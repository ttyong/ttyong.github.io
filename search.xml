<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据挖掘与机器学习-第五章 回归分析</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第五章-回归分析"><a href="#第五章-回归分析" class="headerlink" title="第五章 回归分析"></a>第五章 回归分析</h1><h2 id="回归预测"><a href="#回归预测" class="headerlink" title="回归预测"></a>回归预测</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224555655.png" alt="image-20220424224555655"></p>
<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224738273.png" alt="image-20220424224738273"></p>
<h3 id="回归分析案例"><a href="#回归分析案例" class="headerlink" title="回归分析案例"></a>回归分析案例</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224844325.png" alt="image-20220424224844325"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224913177.png" alt="image-20220424224913177"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225050000.png" alt="image-20220424225050000"></p>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225337145.png" alt="image-20220424225337145"></p>
<h3 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225547631.png" alt="image-20220424225547631"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225719095.png" alt="image-20220424225719095"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225923412.png" alt="image-20220424225923412"></p>
<h3 id="一元线性回归举例"><a href="#一元线性回归举例" class="headerlink" title="一元线性回归举例"></a>一元线性回归举例</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230101753.png" alt="image-20220424230101753"></p>
<h4 id="两种拟合方法"><a href="#两种拟合方法" class="headerlink" title="两种拟合方法"></a>两种拟合方法</h4><h5 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230229501.png" alt="image-20220424230229501"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230548674.png" alt="image-20220424230548674"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231526375.png" alt="image-20220424231526375"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231602615.png" alt="image-20220424231602615"></p>
<h5 id="矩阵法"><a href="#矩阵法" class="headerlink" title="矩阵法"></a>矩阵法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230924197.png" alt="image-20220424230924197"></p>
<h3 id="一元线性回归实现"><a href="#一元线性回归实现" class="headerlink" title="一元线性回归实现"></a>一元线性回归实现</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231700142.png" alt="image-20220424231700142"></p>
<h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>决策树(ID3+C4.5+CART)</p>
<p>支持向量机(SVM)</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据挖掘与机器学习</category>
      </categories>
      <tags>
        <tag>回归算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-第四章 分类算法</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第四章-分类算法"><a href="#第四章-分类算法" class="headerlink" title="第四章 分类算法"></a>第四章 分类算法</h1><h2 id="分类算法概述"><a href="#分类算法概述" class="headerlink" title="分类算法概述"></a>分类算法概述</h2><h3 id="分类的定义"><a href="#分类的定义" class="headerlink" title="分类的定义"></a>分类的定义</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205910301.png" alt="image-20220423205910301"></p>
<h3 id="分类的应用"><a href="#分类的应用" class="headerlink" title="分类的应用"></a>分类的应用</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210010708.png" alt="image-20220423210010708"></p>
<h3 id="什么样的数据适合分类？"><a href="#什么样的数据适合分类？" class="headerlink" title="什么样的数据适合分类？"></a>什么样的数据适合分类？</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205438985.png" alt="image-20220423205438985"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205536080.png" alt="image-20220423205536080"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205553795.png" alt="image-20220423205553795"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210255075.png" alt="image-20220423210255075"></p>
<h3 id="分类器的构建标准"><a href="#分类器的构建标准" class="headerlink" title="分类器的构建标准"></a>分类器的构建标准</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222634239.png" alt="image-20220423222634239"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222816691.png" alt="image-20220423222816691" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222843876.png" alt="image-20220423222843876" style="zoom:80%;">

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210406604.png" alt="image-20220423210406604"></p>
<h2 id="朴素贝叶斯算法-NB"><a href="#朴素贝叶斯算法-NB" class="headerlink" title="朴素贝叶斯算法(NB)"></a>朴素贝叶斯算法(NB)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210906433.png" alt="image-20220423210906433"></p>
<h3 id="频率-amp-概率"><a href="#频率-amp-概率" class="headerlink" title="频率&amp;概率"></a>频率&amp;概率</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211214265.png" alt="image-20220423211214265"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211200738.png" alt="image-20220423211200738"></p>
<h3 id="先验概率-amp-后验概率-amp-条件概率"><a href="#先验概率-amp-后验概率-amp-条件概率" class="headerlink" title="先验概率 &amp; 后验概率 &amp; 条件概率"></a>先验概率 &amp; 后验概率 &amp; 条件概率</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211255437.png" alt="image-20220423211255437"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211406624.png" alt="image-20220423211406624"></p>
<h3 id="贝叶斯算法的核心"><a href="#贝叶斯算法的核心" class="headerlink" title="贝叶斯算法的核心"></a>贝叶斯算法的核心</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211754348.png" alt="image-20220423211754348"></p>
<h3 id="多项式朴素贝叶斯算法-Naive-Bayes"><a href="#多项式朴素贝叶斯算法-Naive-Bayes" class="headerlink" title="多项式朴素贝叶斯算法(Naive Bayes)"></a>多项式朴素贝叶斯算法(Naive Bayes)</h3><h4 id="朴素贝叶斯案例"><a href="#朴素贝叶斯案例" class="headerlink" title="朴素贝叶斯案例"></a>朴素贝叶斯案例</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233036616.png" alt="image-20220423233036616"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233153735.png" alt="image-20220423233153735"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233216892.png" alt="image-20220423233216892"></p>
<h4 id="朴素贝叶斯分类算法"><a href="#朴素贝叶斯分类算法" class="headerlink" title="朴素贝叶斯分类算法"></a>朴素贝叶斯分类算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423232843432.png" alt="image-20220423232843432"></p>
<h3 id="高斯分布朴素贝叶斯算法"><a href="#高斯分布朴素贝叶斯算法" class="headerlink" title="高斯分布朴素贝叶斯算法"></a>高斯分布朴素贝叶斯算法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233437441.png" alt="image-20220423233437441"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233645001.png" alt="image-20220423233645001"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233934867.png" alt="image-20220423233934867"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234236933.png" alt="image-20220423234236933"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234447246.png" alt="image-20220423234447246"></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423235523805.png" alt="image-20220423235523805"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234701473.png" alt="image-20220423234701473"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234842350.png" alt="image-20220423234842350"></p>
<h2 id="K近邻算法-KNN"><a href="#K近邻算法-KNN" class="headerlink" title="K近邻算法(KNN)"></a>K近邻算法(KNN)</h2><h4 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113315121.png" alt="image-20220424113315121"></p>
<h4 id="维度"><a href="#维度" class="headerlink" title="维度"></a>维度</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113409264.png" alt="image-20220424113409264"></p>
<h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424112817814.png" alt="image-20220424112817814" style="zoom:80%;">

<h4 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113525899.png" alt="image-20220424113525899"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424112851183.png" alt="image-20220424112851183"></p>
<h5 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113633832.png" alt="image-20220424113633832"></p>
<h5 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113839988.png" alt="image-20220424113839988"></p>
<h5 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114447305.png" alt="image-20220424114447305"></p>
<h5 id="闵可夫斯基距离"><a href="#闵可夫斯基距离" class="headerlink" title="闵可夫斯基距离"></a>闵可夫斯基距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114615988.png" alt="image-20220424114615988"></p>
<h5 id="杰卡德距离"><a href="#杰卡德距离" class="headerlink" title="杰卡德距离"></a>杰卡德距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114753868.png" alt="image-20220424114753868"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114902226.png" alt="image-20220424114902226"></p>
<h5 id="余弦距离"><a href="#余弦距离" class="headerlink" title="余弦距离"></a>余弦距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114954666.png" alt="image-20220424114954666"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115224915.png" alt="image-20220424115224915"></p>
<h5 id="相关距离"><a href="#相关距离" class="headerlink" title="相关距离"></a>相关距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115436723.png" alt="image-20220424115436723"></p>
<h5 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115458359.png" alt="image-20220424115458359"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115509099.png" alt="image-20220424115509099"></p>
<h5 id="距离总结"><a href="#距离总结" class="headerlink" title="距离总结"></a>距离总结</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115710684.png" alt="image-20220424115710684"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115730672.png" alt="image-20220424115730672"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115922126.png" alt="image-20220424115922126"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115929505.png" alt="image-20220424115929505"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113002694.png" alt="image-20220424113002694"></p>
<h2 id><a href="#" class="headerlink" title></a><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115944637.png" alt="image-20220424115944637"></h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115953912.png" alt="image-20220424115953912"></p>
<h5 id="最近邻算法"><a href="#最近邻算法" class="headerlink" title="最近邻算法"></a>最近邻算法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424121809756.png" alt="image-20220424121809756"></p>
<h4 id="K近邻算法"><a href="#K近邻算法" class="headerlink" title="K近邻算法"></a>K近邻算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424121907864.png" alt="image-20220424121907864"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122045644.png" alt="image-20220424122045644"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122248692.png" alt="image-20220424122248692"></p>
<h5 id="K值的影响"><a href="#K值的影响" class="headerlink" title="K值的影响"></a>K值的影响</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122328955.png" alt="image-20220424122328955"></p>
<h5 id="常用的距离"><a href="#常用的距离" class="headerlink" title="常用的距离"></a>常用的距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122349211.png" alt="image-20220424122349211"></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122521591.png" alt="image-20220424122521591"></p>
<h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122844497.png" alt="image-20220424122844497"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122858657.png" alt="image-20220424122858657"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122912176.png" alt="image-20220424122912176"></p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424123157511.png" alt="image-20220424123157511"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424123304029.png" alt="image-20220424123304029"></p>
<h2 id="多类问题的分类"><a href="#多类问题的分类" class="headerlink" title="多类问题的分类"></a>多类问题的分类</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221609739.png" alt="image-20220424221609739"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221731390.png" alt="image-20220424221731390"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221810933.png" alt="image-20220424221810933"></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据挖掘与机器学习</category>
      </categories>
      <tags>
        <tag>分类算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-第三章</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6-Sklearn.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据挖掘与机器学习-第三章"><a href="#数据挖掘与机器学习-第三章" class="headerlink" title="数据挖掘与机器学习-第三章"></a>数据挖掘与机器学习-第三章</h1><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.机器学习的英文名称叫Machine Learning，简称ML，该领域主要研究的是如何使计算机能够模拟人类的学习行为从而获得新的知识。</span><br><span class="line">2简单来说，机器学习就是让计算机从大量的数据中学习到相关的规律和逻辑，然后利用学习来的规律来预测以后的未知事物</span><br></pre></td></tr></table></figure>

<h2 id="机器学习库Sklearn"><a href="#机器学习库Sklearn" class="headerlink" title="机器学习库Sklearn"></a>机器学习库Sklearn</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.sklearn是机器学习中一个常用的python第三方模块，网址：http:&#x2F;&#x2F;scikit-learn.org&#x2F;stable&#x2F;index.html </span><br><span class="line">2.里面对一些常用的机器学习方法进行了封装，不需要都实现所有的算法，只需要3.简单的调用sklearn里的模块就可以实现机器学习任务。</span><br><span class="line">行业占有率大，spark等采用相同框架</span><br></pre></td></tr></table></figure>

<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174246094.png" alt="image-20220423174246094"></p>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174401518.png" alt="image-20220423174401518"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174417804.png" alt="image-20220423174417804"></p>
<p><a href="https://blog.csdn.net/qq_34271349/article/details/119685889" target="_blank" rel="external nofollow noopener noreferrer">实例参考</a></p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iris:鸢尾花案例  一共150个样本</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174751371.png" alt="image-20220423174751371"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174801962.png" alt="image-20220423174801962"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175253299.png" alt="image-20220423175253299"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175330998.png" alt="image-20220423175330998"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一共150个样本</span><br><span class="line">target：保存鸢尾花类别，一共三类，每类50个数据</span><br><span class="line">data：一个数据4个属性 花萼长度，花萼宽度，花瓣长度，花瓣宽度4个属性预测鸢尾花卉属于（Setosa，Versicolour，Virginica）三个种类中的哪一类。</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Little_Fire/article/details/81062447" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h4 id="分割数据"><a href="#分割数据" class="headerlink" title="分割数据"></a>分割数据</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423181720747.png" alt="image-20220423181720747"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174813212.png" alt="image-20220423174813212"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175603476.png" alt="image-20220423175603476"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175629915.png" alt="image-20220423175629915"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180041821.png" alt="image-20220423180041821"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_size:表示分配给40%的数据给测试数据集</span><br><span class="line">random_state:表示对随机种子的使用情况</span><br></pre></td></tr></table></figure>

<h4 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180200685.png" alt="image-20220423180200685"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180220677.png" alt="image-20220423180220677"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183223046.png" alt="image-20220423183223046"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">支持向量机，因为英文名为 support vector machine，故一般简称为SVM。他是一种常用的判别方法，在机器学习领域是一个有监督的学习模式，通常用来进行模型识别，分类，回归分析以及异常值检测。</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/wj-1314/p/12899598.html" target="_blank" rel="external nofollow noopener noreferrer">SVM参考</a></p>
<h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183355521.png" alt="image-20220423183355521"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183612565.png" alt="image-20220423183612565"></p>
<h4 id="使用模型预测"><a href="#使用模型预测" class="headerlink" title="使用模型预测"></a>使用模型预测</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183757610.png" alt="image-20220423183757610"></p>
<h4 id="机器学习的评测指标"><a href="#机器学习的评测指标" class="headerlink" title="机器学习的评测指标"></a>机器学习的评测指标</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184039500.png" alt="image-20220423184039500"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183935327.png" alt="image-20220423183935327"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184140390.png" alt="image-20220423184140390"></p>
<h5 id="分类常用指标"><a href="#分类常用指标" class="headerlink" title="分类常用指标"></a>分类常用指标</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184554295.png" alt="image-20220423184554295"></p>
<h5 id="回归常用指标"><a href="#回归常用指标" class="headerlink" title="回归常用指标"></a>回归常用指标</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185051245.png" alt="image-20220423185051245"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185702540.png" alt="image-20220423185702540"></p>
<h4 id="学习评测方法"><a href="#学习评测方法" class="headerlink" title="学习评测方法"></a>学习评测方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在训练集上表现良好的模型，在测试集上还是可能表现得不好，进而推翻模型</span><br><span class="line">解决:在测试集上预测前，先在验证集上验证，也就是要将数据划分为测试集、验证集、测试集</span><br><span class="line">问题:导致可用数据进一步减少-&gt;解决方法交叉验证</span><br></pre></td></tr></table></figure>

<h5 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423190111433.png" alt="image-20220423190111433"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185902277.png" alt="image-20220423185902277"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423190659673.png" alt="image-20220423190659673"></p>
<h6 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证"></a>K折交叉验证</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每一个小的数据集都会作为测试集和训练集</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423191530093.png" alt="image-20220423191530093"></p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423191929992.png" alt="image-20220423191929992"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192711660.png" alt="image-20220423192711660"></p>
<h4 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192112660.png" alt="image-20220423192112660"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192224478.png" alt="image-20220423192224478"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192407184.png" alt="image-20220423192407184"></p>
<h2 id="机器学习存在的问题过拟合"><a href="#机器学习存在的问题过拟合" class="headerlink" title="机器学习存在的问题过拟合"></a>机器学习存在的问题过拟合</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过拟合:“你想的太多了”</span><br><span class="line">欠拟合：“你太天真了”</span><br></pre></td></tr></table></figure>

<h3 id="拟合问题的原因"><a href="#拟合问题的原因" class="headerlink" title="拟合问题的原因"></a>拟合问题的原因</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204734730.png" alt="image-20220423204734730"></p>
<h3 id="拟合问题的解决办法"><a href="#拟合问题的解决办法" class="headerlink" title="拟合问题的解决办法"></a>拟合问题的解决办法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204829461.png" alt="image-20220423204829461"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204906923.png" alt="image-20220423204906923"></p>
<h2 id="实验三-boston房价"><a href="#实验三-boston房价" class="headerlink" title="实验三 boston房价"></a>实验三 boston房价</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data中有506个样本，每个样本13个指标</span><br><span class="line">target中有506个，应该是每个城市的分数</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423195715972.png" alt="image-20220423195715972"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423195745757.png" alt="image-20220423195745757"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200105027.png" alt="image-20220423200105027"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200133168.png" alt="image-20220423200133168"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200151194.png" alt="image-20220423200151194"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200614292.png" alt="image-20220423200614292"></p>
<h2 id="方法积累"><a href="#方法积累" class="headerlink" title="方法积累"></a>方法积累</h2><h3 id="快速查看数据结构"><a href="#快速查看数据结构" class="headerlink" title="快速查看数据结构"></a>快速查看数据结构</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200957877.png" alt="image-20220423200957877"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423201241781.png" alt="image-20220423201241781"></p>
<h3 id="查看数据集"><a href="#查看数据集" class="headerlink" title="查看数据集"></a>查看数据集</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423181400223.png" alt="image-20220423181400223"></p>
<h3 id="快速生成data和target"><a href="#快速生成data和target" class="headerlink" title="快速生成data和target"></a>快速生成data和target</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423201830252.png" alt="image-20220423201830252"></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据挖掘与机器学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>python廖雪峰-函数式编程 装饰器</title>
    <url>/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p><a href="https://blog.csdn.net/duyun0/article/details/118087073" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://www.cnblogs.com/hls-code/p/15318801.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584" target="_blank" rel="external nofollow noopener noreferrer">廖雪峰Python-装饰器</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">装饰器是在不改变原函数的源码和调用方式的情况下，为原函数增加功能</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</span><br></pre></td></tr></table></figure>

<h2 id="被装饰函数带参数-初级"><a href="#被装饰函数带参数-初级" class="headerlink" title="被装饰函数带参数-初级"></a>被装饰函数带参数-初级</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(fun.__name__)</span><br><span class="line">        <span class="keyword">return</span> fun(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"goodbye"</span>)</span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_parameter</span><span class="params">(para)</span>:</span></span><br><span class="line">    print(para)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="string">''' # 不写@...可以这么用</span></span><br><span class="line"><span class="string">    say_hello = debug(say_hello)</span></span><br><span class="line"><span class="string">    say_hello()</span></span><br><span class="line"><span class="string">    say_goodbye = debug(say_goodbye)</span></span><br><span class="line"><span class="string">    say_goodbye()</span></span><br><span class="line"><span class="string">    say_parameter = debug(say_parameter)</span></span><br><span class="line"><span class="string">    say_parameter('Jack')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">say_hello</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">say_goodbye</span></span><br><span class="line"><span class="string">goodbye</span></span><br><span class="line"><span class="string">say_parameter</span></span><br><span class="line"><span class="string">Jack'''</span></span><br><span class="line">    </span><br><span class="line">有@...直接使用被装饰函数</span><br></pre></td></tr></table></figure>

<h2 id="装饰器带参数-高级"><a href="#装饰器带参数-高级" class="headerlink" title="装饰器带参数-高级"></a>装饰器带参数-高级</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数的闭包:</span><br><span class="line"><span class="number">1</span>、在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用【即外函数的返回值是内函数的内存地址】。这样就构成了一个闭包。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。</span><br><span class="line"></span><br><span class="line">但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">装饰器的接口约定:</span><br><span class="line">装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了__call__()方法，那么这个对象就是callable的。</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span><span class="params">(level)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[&#123;level&#125;]: enter function &#123;func&#125;()"</span>.format(</span><br><span class="line">                level=level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> inner_wrapper</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='INFO')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(something)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"say &#123;&#125;!"</span>.format(something)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有使用@语法，等同于</span></span><br><span class="line"><span class="comment"># say = logging(level='INFO')(say)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(something)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"do &#123;&#125;..."</span>.format(something)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    say(<span class="string">'hello'</span>)</span><br><span class="line">    do(<span class="string">"my work"</span>)</span><br><span class="line"></span><br><span class="line">[INFO]: enter function say()</span><br><span class="line">say hello!</span><br><span class="line">[DEBUG]: enter function do()</span><br><span class="line">do my work...</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">和两层嵌套的decorator相比，<span class="number">3</span>层嵌套的效果是这样的：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = log(<span class="string">'execute'</span>)(now)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有__name__等属性，但你去看经过decorator装饰之后的函数，它们的__name__已经从原来的<span class="string">'now'</span>变成了<span class="string">'wrapper'</span>：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br><span class="line">因为返回的那个wrapper()函数名字就是<span class="string">'wrapper'</span>，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，有些依赖函数签名的代码执行就会出错。</span><br><span class="line"></span><br><span class="line">不需要编写wrapper.__name__ = func.__name__这样的代码，Python内置的functools.wraps就是干这个事的，所以，一个完整的decorator的写法如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">或者针对带参数的decorator：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="keyword">import</span> functools是导入functools模块。模块的概念稍候讲解。现在，只需记住在定义wrapper()的前面加上@functools.wraps(func)即可。</span><br></pre></td></tr></table></figure>

<h2 id="基于类实现的装饰器"><a href="#基于类实现的装饰器" class="headerlink" title="基于类实现的装饰器"></a>基于类实现的装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span>  <span class="comment"># 接受函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(</span><br><span class="line">            <span class="string">"[&#123;level&#125;]: enter function &#123;func&#125;()"</span>.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__))</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper  <span class="comment"># 返回函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='INFO')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(something)</span>:</span></span><br><span class="line">    print(</span><br><span class="line">    <span class="string">"say &#123;&#125;!"</span>.format(something))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    say(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">[INFO]: enter function say()</span><br><span class="line">say hello!</span><br></pre></td></tr></table></figure>

<h2 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h2><p><a href="https://www.cnblogs.com/hls-code/p/15318801.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考</a></p>
<p><a href="https://blog.csdn.net/YiJie__ShuSheng/article/details/84933648" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-第一章</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%A6%82%E5%BF%B5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据挖掘与机器学习-第一章-数据挖掘的概念"><a href="#数据挖掘与机器学习-第一章-数据挖掘的概念" class="headerlink" title="数据挖掘与机器学习-第一章 数据挖掘的概念"></a>数据挖掘与机器学习-第一章 数据挖掘的概念</h1><h2 id="数据挖掘的定义"><a href="#数据挖掘的定义" class="headerlink" title="数据挖掘的定义"></a>数据挖掘的定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">广义角度:发现数据中的有用信息，从而帮助决策</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">技术过程:数据挖掘是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，提取隐含在其中的、人们事先不知道的、但又是潜在又用的信息和知识，寻找其规律的技术，结合统计学、机器学习和人工智能技术的综合过程</span><br></pre></td></tr></table></figure>

<h2 id="数据挖据的目的"><a href="#数据挖据的目的" class="headerlink" title="数据挖据的目的"></a>数据挖据的目的</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两大基本目标是预测和描述数据</span><br><span class="line">其中预测的计算机建模及实现过程通常被称为:监督学习</span><br><span class="line">	监督学习（supervised learning):从标记的训练数据来推断一个功能的机器学习任务。</span><br><span class="line">描述的通常称为:无监督学习</span><br><span class="line">	无监督学习(unsupervised learning):根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题。往更细分，数据挖掘的目标可以分为以下这些:</span><br><span class="line">预测包含:回归、分类、...</span><br><span class="line">描述包含:聚类、关联规则发现....</span><br></pre></td></tr></table></figure>



<h2 id="数据挖掘技术"><a href="#数据挖掘技术" class="headerlink" title="数据挖掘技术"></a>数据挖掘技术</h2><h3 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计学:是关于认识客观规律总体数量特征和数量关系的科学。它是通过搜索、整理、分析统计资料，认识客观现象数量规律性的方法论科学。</span><br></pre></td></tr></table></figure>

<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">机器学习的英文名称叫Machine Learning，简称ML，是计算机科学的一个重要分支。它研究的是如何让计算机像人类一样学习，并能从中获取新的知识。</span><br><span class="line"></span><br><span class="line">一般的方法是：设定一些算法，让计算机从大量的数据中通过复杂计算总结出一些相关的规律和逻辑，然后这些规律和逻辑来预测未知的数据</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200848899.png" alt="image-20220419200848899" style="zoom: 80%;">

<h4 id="机器学习种类"><a href="#机器学习种类" class="headerlink" title="机器学习种类"></a>机器学习种类</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195517817.png" alt="image-20220419195517817" style="zoom: 67%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200656385.png" alt="image-20220419200656385" style="zoom:67%;">

<h5 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195853584.png" alt="image-20220419195853584" style="zoom:67%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195925953.png" alt="image-20220419195925953" style="zoom:67%;">

<h5 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200036550.png" alt="image-20220419200036550" style="zoom:67%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200056318.png" alt="image-20220419200056318" style="zoom:67%;">



<h2 id="数据挖掘与机器学习的过程"><a href="#数据挖掘与机器学习的过程" class="headerlink" title="数据挖掘与机器学习的过程"></a>数据挖掘与机器学习的过程</h2><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200336571.png" alt="image-20220419200336571" style="zoom:67%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200359451.png" alt="image-20220419200359451" style="zoom:67%;">



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据挖掘与机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-第二章 Pandas</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-Pandas.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据挖掘与机器学习-第二章-Pandas"><a href="#数据挖掘与机器学习-第二章-Pandas" class="headerlink" title="数据挖掘与机器学习-第二章 Pandas"></a>数据挖掘与机器学习-第二章 Pandas</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计学是关于认识客观现象总体数量特征和总体数量关系的科学</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计学常用指标:</span><br><span class="line">平均数</span><br><span class="line">绝对数与相对数</span><br><span class="line">百分比</span><br><span class="line">频率</span><br><span class="line">同比与环比</span><br></pre></td></tr></table></figure>

<h2 id="Pandas快速入门"><a href="#Pandas快速入门" class="headerlink" title="Pandas快速入门"></a>Pandas快速入门</h2><p><a href="https://blog.csdn.net/OohMuYi/article/details/111259411" target="_blank" rel="external nofollow noopener noreferrer">优质参考连接</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网链接：http:&#x2F;&#x2F;pandas.pydata.org&#x2F; </span><br><span class="line">简介：Pandas是python的一个数据分析包，最初由AQR Capital Management于2008年4月开发，并于2009年底开源出来，目前由专注于Python数据包开发的PyData开发team继续开发和维护，属于PyData项目的一部分。Pandas最初被作为金融数据分析工具而开发出来，因此，pandas为时间序列分析提供了很好的支持。</span><br></pre></td></tr></table></figure>

<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419202003501.png" alt="image-20220419202003501"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419202018510.png" alt="image-20220419202018510"></p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="Series-一维"><a href="#Series-一维" class="headerlink" title="Series(一维)"></a>Series(一维)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Series是一种类似于一维数组的对象，它由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成</span><br><span class="line">Series的字符串表现形式为：索引在左边，值在右边</span><br></pre></td></tr></table></figure>

<h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;ser1 = pd.Series(range(<span class="number">4</span>))</span><br><span class="line">&gt;&gt;&gt;ser2 = pd.Series(range(<span class="number">4</span>),index = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>])</span><br><span class="line">&gt;&gt;&gt;sdata = &#123;<span class="string">'Ohio'</span>: <span class="number">35000</span>, <span class="string">'Texas'</span>: <span class="number">71000</span>, <span class="string">'Oregon'</span>: <span class="number">16000</span>, <span class="string">'Utah'</span>: <span class="number">5000</span>&#125;</span><br><span class="line">&gt;&gt;&gt;ser3 = pd.Series(sdata)</span><br><span class="line"></span><br><span class="line">注：传递的data是一个dict字典类型对象，并且传递了index参数，那么对应的值将从字典中取出。否则，index的值将由字典对象里的key值进行构造</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419203403486.png" alt="image-20220419203403486"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Series的index和values</span><br><span class="line">&gt;&gt;&gt;ser3.index</span><br><span class="line">&gt;&gt;&gt;ser3.values</span><br><span class="line">&gt;&gt;&gt;ser2[[<span class="string">"a"</span>,<span class="string">"c"</span>]]</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419203503573.png" alt="image-20220419203503573"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419203611446.png" alt="image-20220419203611446"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419203735729.png" alt="image-20220419203735729"></p>
<h5 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h5><h6 id="下标访问和切片"><a href="#下标访问和切片" class="headerlink" title="下标访问和切片"></a>下标访问和切片</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419203949053.png" alt="image-20220419203949053"></p>
<h6 id><a href="#" class="headerlink" title></a><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419204021047.png" alt="image-20220419204021047"></h6><h5 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h5><h6 id="Series间的计算"><a href="#Series间的计算" class="headerlink" title="Series间的计算"></a>Series间的计算</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419204341693.png" alt="image-20220419204341693"></p>
<h6 id="Series函数的使用"><a href="#Series函数的使用" class="headerlink" title="Series函数的使用"></a>Series函数的使用</h6><p><a href="https://wenku.baidu.com/view/5ba8fe5aa16925c52cc58bd63186bceb19e8ed6f.html" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><strong>mean</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a &#x3D; pd.Series([1, 2, 3, 4, 5])</span><br><span class="line">平均值</span><br><span class="line">&gt;&gt;&gt;print(a.mean())</span><br><span class="line">&gt;&gt;&gt;3</span><br></pre></td></tr></table></figure>

<p><strong>isin</strong></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419205730838.png" alt="image-20220419205730838"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419210245276.png" alt="image-20220419210245276"></p>
<p><strong>unique和value_counts</strong></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419210635004.png" alt="image-20220419210635004"></p>
<p><strong>sort_index和sort_values</strong></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419211323708.png" alt="image-20220419211323708"></p>
<p><strong>sample 抽样</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.sample(n&#x3D;None,frac&#x3D;None,replace&#x3D;False,weights&#x3D;None,random_state&#x3D;None,axis&#x3D;None) # dataframe也可以</span><br><span class="line"></span><br><span class="line">n:指定抽取的样本量</span><br><span class="line">frac:指定抽取样本比例</span><br><span class="line">replace:是否又放回，默认又放回</span><br><span class="line">weights:指定样本抽中的概率，默认等论抽样</span><br><span class="line">random_state:指定抽样的随机种子  类似于random库中随机种子的作用）确保示例的可复现性</span><br><span class="line">axis:抽取行或列  1是列，0是行</span><br></pre></td></tr></table></figure>

<p><a href="https://www.icode9.com/content-1-639722.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考链接</a></p>
<p><a href="https://www.cnblogs.com/ychml/p/14374912.html" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://blog.csdn.net/Flag_ing/article/details/106979895" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419233328091.png" alt="image-20220419233328091"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419233414653.png" alt="image-20220419233414653" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420001304292.png" alt="image-20220420001304292" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420104543372.png" alt="image-20220420104543372" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420104623972.png" alt="image-20220420104623972" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420104733322.png" alt="image-20220420104733322" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420153247563.png" alt="image-20220420153247563" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420153426420.png" alt="image-20220420153426420" style="zoom:80%;">

<h6 id="统计运算-describe、isnull函数"><a href="#统计运算-describe、isnull函数" class="headerlink" title="统计运算(describe、isnull函数)"></a>统计运算(describe、isnull函数)</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420002152905.png" alt="image-20220420002152905" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420002259906.png" alt="image-20220420002259906" style="zoom:80%;">

<h4 id="DataFrame-二维"><a href="#DataFrame-二维" class="headerlink" title="DataFrame(二维)"></a>DataFrame(二维)</h4><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420203611296.png" alt="image-20220420203611296"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420154342882.png" alt="image-20220420154342882" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420154402661.png" alt="image-20220420154402661" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420154430956.png" alt="image-20220420154430956" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420154450776.png" alt="image-20220420154450776" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420154841233.png" alt="image-20220420154841233" style="zoom:80%;">

<h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><h6 id="head和info"><a href="#head和info" class="headerlink" title="head和info"></a>head和info</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420155315947.png" alt="image-20220420155315947" style="zoom:80%;">

<h6 id="index和columns、dtypes、values"><a href="#index和columns、dtypes、values" class="headerlink" title="index和columns、dtypes、values"></a>index和columns、dtypes、values</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420155532908.png" alt="image-20220420155532908" style="zoom:80%;">

<h5 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420203538657.png" alt="image-20220420203538657"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420203520596.png" alt="image-20220420203520596"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420203459896.png" alt="image-20220420203459896"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420160051104.png" alt="image-20220420160051104" style="zoom:80%;">

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420160329471.png" alt="image-20220420160329471"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420160350152.png" alt="image-20220420160350152" style="zoom:80%;">

<h5 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420161117262.png" alt="image-20220420161117262"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420161544928.png" alt="image-20220420161544928" style="zoom:80%;">

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420162352487.png" alt="image-20220420162352487"></p>
<h5 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420202807391.png" alt="image-20220420202807391"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420162634368.png" alt="image-20220420162634368" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420162916153.png" alt="image-20220420162916153" style="zoom:80%;">

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420163704511.png" alt="image-20220420163704511"></p>
<h5 id="groupby操作"><a href="#groupby操作" class="headerlink" title="groupby操作"></a>groupby操作</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420163422038.png" alt="image-20220420163422038"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420163146199.png" alt="image-20220420163146199"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420163451766.png" alt="image-20220420163451766"></p>
<h5 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h5><h6 id="对行或列索引进行排序"><a href="#对行或列索引进行排序" class="headerlink" title="对行或列索引进行排序"></a>对行或列索引进行排序</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420164026168.png" alt="image-20220420164026168"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420164239871.png" alt="image-20220420164239871" style="zoom:80%;">

<h5 id="汇总和计算描述统计"><a href="#汇总和计算描述统计" class="headerlink" title="汇总和计算描述统计"></a>汇总和计算描述统计</h5><h6 id="常用描述和汇总统计函数"><a href="#常用描述和汇总统计函数" class="headerlink" title="常用描述和汇总统计函数"></a>常用描述和汇总统计函数</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420164359848.png" alt="image-20220420164359848"></p>
<h6 id="唯一值以及成员资格"><a href="#唯一值以及成员资格" class="headerlink" title="唯一值以及成员资格"></a>唯一值以及成员资格</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420164856013.png" alt="image-20220420164856013"></p>
<h5 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165236650.png" alt="image-20220420165236650"></p>
<h6 id="滤除缺失数据方法"><a href="#滤除缺失数据方法" class="headerlink" title="滤除缺失数据方法"></a>滤除缺失数据方法</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165313794.png" alt="image-20220420165313794"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165333554.png" alt="image-20220420165333554"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165537126.png" alt="image-20220420165537126" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165638422.png" alt="image-20220420165638422" style="zoom:80%;">

<h6 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170550398.png" alt="image-20220420170550398"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170038065.png" alt="image-20220420170038065" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420165956589.png" alt="image-20220420165956589" style="zoom:80%;">

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170622102.png" alt="image-20220420170622102"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170503126.png" alt="image-20220420170503126"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170816073.png" alt="image-20220420170816073"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420170849202.png" alt="image-20220420170849202"></p>
<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420171054175.png" alt="image-20220420171054175"></p>
<h5 id="对于DataFrame，根据任意一个轴上的索引进行排序"><a href="#对于DataFrame，根据任意一个轴上的索引进行排序" class="headerlink" title="对于DataFrame，根据任意一个轴上的索引进行排序"></a>对于DataFrame，根据任意一个轴上的索引进行排序</h5><h6 id="可以指定升序降序"><a href="#可以指定升序降序" class="headerlink" title="可以指定升序降序"></a>可以指定升序降序</h6><h6 id="按值排序"><a href="#按值排序" class="headerlink" title="按值排序"></a>按值排序</h6><h6 id="对于DataFrame，可以指定按值排序的列"><a href="#对于DataFrame，可以指定按值排序的列" class="headerlink" title="对于DataFrame，可以指定按值排序的列"></a>对于DataFrame，可以指定按值排序的列</h6><h6 id="rank函数"><a href="#rank函数" class="headerlink" title="rank函数"></a>rank函数</h6><h5 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420195734257.png" alt="image-20220420195734257"></p>
<h6 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420195930080.png" alt="image-20220420195930080" style="zoom:80%;">

<h6 id="applymap方法"><a href="#applymap方法" class="headerlink" title="applymap方法"></a>applymap方法</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420200111929.png" alt="image-20220420200111929" style="zoom:80%;">



<h5 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420200342940.png" alt="image-20220420200342940"></p>
<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420200643108.png" alt="image-20220420200643108" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420201317096.png" alt="image-20220420201317096" style="zoom:80%;">



<h4 id="Panel-三维"><a href="#Panel-三维" class="headerlink" title="Panel(三维)"></a>Panel(三维)</h4><h3 id="正态分布-findn函数需要用到"><a href="#正态分布-findn函数需要用到" class="headerlink" title="正态分布(findn函数需要用到)"></a>正态分布(findn函数需要用到)</h3><p><a href="https://baijiahao.baidu.com/s?id=1681320912172746994&wfr=spider&for=pc" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h4 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">又叫高斯分布、正常分布、常态分布</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就是说这些指标背后的数据都会呈现一种中间密集、两边稀疏的特征。</span><br><span class="line"></span><br><span class="line">你可能不禁要问，这是为什么？我们认为，这其实与我们前面所讲的同质与变异的概念相关（参见课程第三讲 统计学核心思维与统计描述）。因为我们研究的对象具有同质性（比如都是成年的中国男子），所以其特征往往是趋同的，即存在一个基准；但由于个体变异的存在（当然变异不会太大），这些特征又不是完全一致，所以会以一定的幅度在基准的上下波动，从而形成了中间密集，两侧稀疏的特征。</span><br></pre></td></tr></table></figure>

<h4 id="连续型随机变量研究区间概率"><a href="#连续型随机变量研究区间概率" class="headerlink" title="连续型随机变量研究区间概率"></a>连续型随机变量研究区间概率</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先，正态分布属于“连续型随机变量分布”的一类。我们知道，对于连续型随机变量，我们不关注“点概率”，只关注“区间概率”，这是什么意思？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们看这个例子，假定随机变量X指是“北京市成年男子的身高”，理论上它可以取任意正数，所以我们把它当做一个连续型随机变量（连续型变量，就是指可以取某一区间或整个实数轴上的任意一个值的变量）来看待。这里，我们先想一想如何计算P(X &#x3D;1.87)? 即身高恰好完全exactly等于1.87的概率是多少，这就是所谓的“点概率”。更极端一点，让随机变量Y是[0,1]这个区间上的任意一点，那么Y的取值有多少个呢？无数多个，我们数不清楚，所以Y 取某一个具体的值的概率是1除以无数，即可以看做是0。于是，这里透露一个很重要的结论：连续型随机变量取任意某个确定的值的概率均为0。因此，对于连续型随机变量，我们通常不研究它取某个特定值的概率，而研究它在某一段区间上的取值，比如身高在1.70～1.80的概率。</span><br></pre></td></tr></table></figure>

<h4 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于初学者来讲，“概率密度”可能是最不友好的一个概念，直接谈概率不行吗，好好的为什么要生出一个“密度”？</span><br><span class="line"></span><br><span class="line">的确，没有太多数理基础，这个概念着实不太好理解。虽然文字和数学公式上你可能感觉很陌生，但我们特别熟知的那条中间高、两边低的“钟形曲线”恰恰就是正态分布的概率密度曲线。前面我们讲了区间概率，这里你就可以通过区间的角度来理解概率密度曲线：曲线越高，也就代表着这个区间的数据越密集，简单理解成在同样大小的房子里，这个房间的人数更多、更挤。除此之外，另一个关于概率密度函数的重要知识点是，积分（这里简单理解为“密度曲线下面积“即可）等于概率。</span><br><span class="line"></span><br><span class="line">随机变量X在某个区间比如（a，b）即a&lt;X&lt;b的概率，就是概率密度曲线在这个区间下的面积，数学上的表达就是密度函数在区间（a， b）上的积分。所以，概率的大小就是“概率密度函数曲线下的面积”的大小，这个不太起眼的概念实际上就决定了你日后是否能理解假设假设中所谓的“拒绝域”</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下图中的三条曲线f(x)，就是概率密度函数，各种形式的概率就是相对应的曲线下面积。这里，数学基础不太好的同学不用特别深挖积分的计算过程，但对这三张图与对应的概率表达形式，同学们要熟知。</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420112153426.png" alt="image-20220420112153426"></p>
<h4 id="均数和标准差"><a href="#均数和标准差" class="headerlink" title="均数和标准差"></a>均数和标准差</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面说对于正态分布的概率密度函数以及积分不用特别关注，那真正需要关注的是什么呢？就是均数和标准差。这里需要明确的是，一旦谈及正态分布，我们首先要想到它的两个参数：均数和标准差。每次一遇到正态分布就迅速找这两个概念，最好形成条件反射，因为这两个数才是我们日后运用正态分布解决实际问题的“利器”。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于正态分布均数和标准差的性质，我们这里简单总结一下：</span><br><span class="line"></span><br><span class="line">1）概率密度曲线在均值处达到最大，并且对称；</span><br><span class="line"></span><br><span class="line">2）一旦均值和标准差确定，正态分布曲线也就确定；</span><br><span class="line"></span><br><span class="line">3）当X的取值向横轴左右两个方向无限延伸时，曲线的两个尾端也无限渐近横轴，理论上永远不会与之相交；</span><br><span class="line"></span><br><span class="line">4）正态随机变量在特定区间上的取值概率由正态曲线下的面积给出，而且其曲线下的总面积等于1 ；</span><br><span class="line"></span><br><span class="line">5）均值可取实数轴上的任意数值，决定正态曲线的具体位置；标准差决定曲线的“陡峭”或“扁平”程度：标准差越大，正态曲线越扁平；标准差越小，正态曲线越陡峭。这是因为，标准差越小，意味着大多数变量值离均数的距离越短，因此大多数值都紧密地聚集在均数周围，图形所能覆盖的变量值就少些（比如1±0.1涵盖[0.9，1.1]），于是都挤在一块，图形上呈现瘦高型。相反，标准差越大，数据跨度就比较大，分散程度大，所覆盖的变量值就越多（比如1±0.5涵盖[0.5，1.5]），图形呈现“矮胖型”。</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420112347075.png" alt="image-20220420112347075"></p>
<h4 id="标准化与查表求概率"><a href="#标准化与查表求概率" class="headerlink" title="标准化与查表求概率"></a>标准化与查表求概率</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来，我们通过一个例子来看如何通过查表法计算正态分布变量在某个区间的概率。首先，我们看这个问题，说小明每天上学的通勤时间是一个随机变量X，这个变量服从正态分布。统计他过去20天的通勤时间（单位：分钟）：26、33、65、28、34、55、25、44、50、36、26、37、43、62、35、38、45、32、28、34。现在我们想知道他上学花30~45分钟的概率。</span><br><span class="line"></span><br><span class="line">首先，我们将问题转化为数学表达式，要算他上学花30~45分钟的概率，就是求P（30 &lt; X &lt; 45）。之前我们一直强调，一个变量服从正态分布，就要立马考虑到它的均数和标准差是多少。这里我们简化一下用他过去20天的样本数据来代替。所以，我们首先计算这20天通勤时间的样本均数及标准差，分别为38.8（分钟）和11.4（分钟）。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后，我们进行标准化，这一步很重要，也称z变换。通过标准化，所有服从一般正态分布的随机变量都变成了服从均数为0，标准差为1的标准正态分布。对于服从标准正态分布的随机变量，专门用z表示。因此，求P（30 &lt; X &lt; 45），就转换成了求P（-0.77 &lt; Z &lt; 0.54），标准化的具体计算为：</span><br><span class="line"></span><br><span class="line">30 →（30-38.8）&#x2F; 11.4 &#x3D; - 0.77</span><br><span class="line">45 →（45-38.8）&#x2F; 11.4 &#x3D; 0.54</span><br><span class="line">X → Z</span><br><span class="line">P（30 ≤ X ≤ 45）&#x3D; P（-0.77 ≤ Z ≤ 0.54）</span><br><span class="line">这里简单提醒一下，经过标准化后，原来的曲线的形状不会变化，即不会改变胖瘦，只是位置发生平移，比如下图中的例子，经过标准化实际上只是均数从1010移到了0。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们正式看看怎么查表，前面我们已经把问题转化成求P (-0.77 ≤ Z ≤0.54) &#x3D; P (Z ≤ 0.54)–P (Z ≤ -0.77)，于是，我们需要找当Z≤0.54和Z≤-0.77的概率值然后相减即可。</span><br><span class="line"></span><br><span class="line">先看Z≤0.54的P值，对照下图，首先看表格最左边那一列，找到0.5，然后，因为0.54的第二位小数是4，所以定位到顶行找到“4”那一列，得到0.7054；同样的方法，我们找到Z≤-0.77对应的P值0.2206。最后我们就能算出，P (-0.77 ≤ Z ≤0.54) &#x3D; 0.4848，约等于0.5。因此，我们可以说，小明上学通勤时间花费30~45分钟的概率是50%，这个概率还挺大的，占了一半。我们通过这个具体的例子详细讲解了随机变量在某个区间的概率求解，不是因为这个计算有多重要，而是想提前给你打好基础，方便理解假设检验及p值等相关概念。</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420114925762.png" alt="image-20220420114925762" style="zoom:80%;">



<h5 id="标准差-预备知识"><a href="#标准差-预备知识" class="headerlink" title="标准差(预备知识)"></a>标准差(预备知识)</h5><p><a href="https://zhidao.baidu.com/question/537440846.html" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">平均值:(x1+x2+...)&#x2F;n&#x3D;</span><br><span class="line">方差:(平均值-x1)^2,(平均值-x2)^2,.....</span><br><span class="line">平均方差:(方差1+方差2+...)&#x2F;n</span><br><span class="line">标准差:平均方差开根</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420114545252.png" alt="image-20220420114545252" style="zoom:80%;">

<h4 id="三个百分数68-、95-、99-7"><a href="#三个百分数68-、95-、99-7" class="headerlink" title="三个百分数68%、95%、99.7%"></a>三个百分数68%、95%、99.7%</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">熟悉了Z变换、查表求概率，我们来看看正态分布运用十分广泛的三个百分数：68%，95%，99.7%。先看标准正态分布，我们知道一个变量服从标准正态分布，它的均数是0，标准差是1，那除了这两个数字之外，我们还能获得更多的信息吗？可以，这三个百分数告诉了我们答案。</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420115546009.png" alt="image-20220420115546009" style="zoom:80%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虽然理论上正态随机变量可以取无数个值，定义域是整个实数轴，但实际上在[-1，1]这个区间就包含了它可以取的68%的值，[-2，2]区间包含了95%的值，[-3，3]包含了它可能取的99.7%的值。这里的1，2，3分别代表一个、两个和三个标准差（标准正态分布的均数为0，标准差为1）。所以，根据这些，我们就可以推断，一个服从标准正态分布的变量，它的取值很不可能超过2，极不可能超过3。这个用处非常大，一下子把我们要研究的重心从整个实数轴缩小到[-3，3]这个区间。另外，这里虽然是以标准正态分布为例进行说明，但这个性质是完全可以推到普通的正态分布的变量的。百分数不变，不过均数和标准差不再是0和1，而是代入具体分布的均数和标准差即可。下面我们来看一个实际应用的例子。</span><br><span class="line"></span><br><span class="line">某小学学生身高的平均值和标准差分别为1.4（米）和0.15（米），我们知道身高一般是服从正态分布的，由此我们可以知道这个学校有68%的学生的身高在1.25到1.55，这里的1.25和1.55就是1.4加减0.15得到的（均数加减一个标准差），有95%的学生身高在1.1到1.7之间（均数加减两个标准差），由此便极大地提升了我们对数据的掌握程度。讲完这些你会发现一种巧妙的求解均数和标准差的方法：如果我们知道了某个变量的95%区间的取值（关于均值对称），我们就可以算出对应的均数和标准差，进而几乎知道了一切。</span><br></pre></td></tr></table></figure>

<img src="C:\Users\Ty\AppData\Roaming\Typora\typora-user-images\image-20220420115813609.png" alt="image-20220420115813609" style="zoom:80%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以上即为梳理的有关正态分布的关键知识点，希望大家在遇到假设检验和p值等概念的理解障碍时能回头看看这些最基础的要点，相信对你会有所帮助。</span><br></pre></td></tr></table></figure>

<h3 id="numpy-random-seed-随机数-预备知识"><a href="#numpy-random-seed-随机数-预备知识" class="headerlink" title="numpy.random.seed() 随机数   预备知识"></a>numpy.random.seed() 随机数   预备知识</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seed() 用于指定随机数生成时所用算法开始的整数值，如果使用相同的seed()值，则每次生成的随即数都相同，如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同。</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/linzch3/article/details/58220569" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://blog.csdn.net/youhuakongzhi/article/details/90572969" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://www.icode9.com/content-1-639722.html" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 别人的见解</span></span><br><span class="line"><span class="number">1.</span>感觉seed括号中的数是计算机创建随机数的依据，确定数后（比如seed(<span class="number">5</span>)），之后的所有随机操作都有确定性。上述例子中，seed()在循环外时，多次运行random.random()会产生一个固定顺序(seed导致)的序列；seed()在循环中时，每次都是重新定义一次相同的seed()（seed（<span class="number">5</span>）），然后只执行一次random.random()，因此每次产生的都是固定的随机序列的首项。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>seed全局有效，seed函数是保证你每次运行程序生成的顺序相同，而不是保证你每次生成同样的值。</span><br><span class="line">比如你在程序中randint() <span class="number">100</span>次，输出<span class="number">100</span>个数，</span><br><span class="line">当你第二次运行该程序时，若设置了和第一次同样的seed的值，程序会输出与第一次运行同样顺序的<span class="number">100</span>个数。</span><br><span class="line">博主博客中的例子在每次<span class="keyword">print</span>的前设置seed来保证每次输出的数相同，道理和上面我说的一样。</span><br><span class="line">重复一次，seed函数是为了保证生成的数序列相同，而不是保证每次生成的值相同。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总结：</span><br><span class="line">1.感觉与seed(n)里的n值无关，指定了只是下次生成的随机数基于这个随机序列</span><br></pre></td></tr></table></figure>



<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420144031937.png" alt="image-20220420144031937" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420144107407.png" alt="image-20220420144107407" style="zoom:80%;">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420144240525.png" alt="image-20220420144240525">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420144146914.png" alt="image-20220420144146914">

<img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220420145813877.png" alt="image-20220420145813877" style="zoom:80%;">

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据挖掘与机器学习</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>python-Flask库</title>
    <url>/python-Flask%E5%BA%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Flask库"><a href="#Flask库" class="headerlink" title="Flask库"></a>Flask库</h1><p><a href="https://www.jb51.net/article/236776.htm" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://flask.palletsprojects.com/en/0.12.x/" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h2 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h2><h2 id="构造URL"><a href="#构造URL" class="headerlink" title="构造URL"></a>构造URL</h2><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><h2 id="模板生成"><a href="#模板生成" class="headerlink" title="模板生成"></a>模板生成</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>cmd命令积累</title>
    <url>/cmd%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="cmd命令积累"><a href="#cmd命令积累" class="headerlink" title="cmd命令积累"></a>cmd命令积累</h1><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md(mkdir) filename</span><br></pre></td></tr></table></figure>

<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type nul &gt; file</span><br></pre></td></tr></table></figure>

<h2 id="写内容到文件"><a href="#写内容到文件" class="headerlink" title="写内容到文件"></a>写内容到文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 'xxx'</span><br></pre></td></tr></table></figure>

<h2 id="查看运行进程，杀掉进程"><a href="#查看运行进程，杀掉进程" class="headerlink" title="查看运行进程，杀掉进程"></a>查看运行进程，杀掉进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">taskkill /pid 7</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>cmd</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第7章 面试与核心复盘</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC7%E7%AB%A0-%E9%9D%A2%E8%AF%95%E4%B8%8E%E6%A0%B8%E5%BF%83%E5%A4%8D%E7%9B%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第6章 TOP N主播统计</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC6%E7%AB%A0-TOP-N%E4%B8%BB%E6%92%AD%E7%BB%9F%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第5章 RDD持久化</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC5%E7%AB%A0-RDD%E6%8C%81%E4%B9%85%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第4章 transformation与action实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC4%E7%AB%A0-transformation%E4%B8%8Eaction%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第3章 spark实战: 单词统计</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC3%E7%AB%A0-spark%E5%AE%9E%E6%88%98-%E5%8D%95%E8%AF%8D%E7%BB%9F%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第十周-第3章-spark实战-单词统计"><a href="#第十周-第3章-spark实战-单词统计" class="headerlink" title="第十周 第3章 spark实战: 单词统计"></a>第十周 第3章 spark实战: 单词统计</h1><h2 id="WordCount程序"><a href="#WordCount程序" class="headerlink" title="WordCount程序"></a>WordCount程序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先看来一个快速入门案例，单词计数</span><br><span class="line">这个需求就是类似于我们在学习MapReduce的时候写的案例</span><br><span class="line">需求这样的：读取文件中的所有内容，计算每个单词出现的次数</span><br><span class="line">这个需求就没什么好分析的了，咱们之前在学习MapReduce的已经分析过了，接下来就来看一下使用Spark需要如何实现</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：由于Spark支持Java、Scala这些语言，目前在企业中大部分公司都是使用Scala语言进行开发，个别公司会使用java进行开发，为了加深大家对Spark的理解，也满足java老程序员的需求，针对本课程中的案例，我们都会先基于Scala代码进行详细的讲解，然后再使用java代码重新实现一遍</span><br></pre></td></tr></table></figure>



<h2 id="Scala代码开发"><a href="#Scala代码开发" class="headerlink" title="Scala代码开发"></a>Scala代码开发</h2><h3 id="scala代码"><a href="#scala代码" class="headerlink" title="scala代码"></a>scala代码</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.scala</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：单词计数</span></span><br><span class="line"><span class="comment">* Created by xuwei</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountScala</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"><span class="comment">//第一步：创建SparkContext</span></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">conf.setAppName(<span class="string">"WordCountScala"</span>)<span class="comment">//设置任务名称</span></span><br><span class="line">.setMaster(<span class="string">"local"</span>)<span class="comment">//local表示在本地执行</span></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="comment">//第二步：加载数据</span></span><br><span class="line"><span class="keyword">val</span> linesRDD = sc.textFile(<span class="string">"D:\\hello.txt"</span>)</span><br><span class="line"><span class="comment">//第三步：对数据进行切割，把一行数据切分成一个一个的单词</span></span><br><span class="line"><span class="keyword">val</span> wordsRDD = linesRDD.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"><span class="comment">//第四步：迭代words,将每个word转化为(word,1)这种形式</span></span><br><span class="line"><span class="keyword">val</span> pairRDD = wordsRDD.map((_,<span class="number">1</span>))</span><br><span class="line"><span class="comment">//第五步：根据key(其实就是word)进行分组聚合统计</span></span><br><span class="line"><span class="keyword">val</span> wordCountRDD = pairRDD.reduceByKey(_ + _)</span><br><span class="line"><span class="comment">//第六步：将结果打印到控制台</span></span><br><span class="line">wordCountRDD.foreach(wordCount=&gt;println(wordCount._1+<span class="string">"--"</span>+wordCount._2))</span><br><span class="line"><span class="comment">//第七步：停止SparkContext</span></span><br><span class="line">sc.stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行代码，结果如下</span><br><span class="line">you--1</span><br><span class="line">hello--2</span><br><span class="line">me--1</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们再来总结一下代码中这几个RDD中的数据结构</span><br><span class="line">val linesRDD &#x3D; sc.textFile(&quot;D:\\hello.txt&quot;)</span><br><span class="line"></span><br><span class="line">linesRDD中的数据是这样的：</span><br><span class="line">hello you</span><br><span class="line">hello me</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val wordsRDD &#x3D; linesRDD.flatMap(_.split(&quot; &quot;))</span><br><span class="line"></span><br><span class="line">wordsRDD中的数据是这样的：</span><br><span class="line">hello</span><br><span class="line">you</span><br><span class="line">hello</span><br><span class="line">me</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val pairRDD &#x3D; wordsRDD.map((_,1))</span><br><span class="line"></span><br><span class="line">pairRDD 中的数据是这样的</span><br><span class="line">(hello,1)</span><br><span class="line">(you,1)</span><br><span class="line">(hello,1)</span><br><span class="line">(me,1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val wordCountRDD &#x3D; pairRDD.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">wordCountRDD 中的数据是这样的</span><br><span class="line">(hello,2)</span><br><span class="line">(you,1)</span><br><span class="line">(me,1)</span><br></pre></td></tr></table></figure>

<h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.java;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.*;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：单词计数</span></span><br><span class="line"><span class="comment">* Created by xuwei</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountJava</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：创建SparkContext：</span></span><br><span class="line"><span class="comment">//注意，针对java代码需要获取JavaSparkContext</span></span><br><span class="line">SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">conf.setAppName(<span class="string">"WordCountJava"</span>)</span><br><span class="line">.setMaster(<span class="string">"local"</span>);</span><br><span class="line">JavaSparkContext sc = <span class="keyword">new</span> JavaSparkContext(conf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：加载数据</span></span><br><span class="line">JavaRDD&lt;String&gt; linesRDD = sc.textFile(<span class="string">"D:\\hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：对数据进行切割，把一行数据切分成一个一个的单词</span></span><br><span class="line"><span class="comment">//注意：FlatMapFunction的泛型，第一个参数表示输入数据类型，第二个表示是输出数据类型</span></span><br><span class="line">JavaRDD&lt;String&gt; wordsRDD = linesRDD.flatMap(<span class="keyword">new</span> 				    FlatMapFunction&lt;String,String&gt;()&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String line)</span> <span class="keyword">throws</span> 	Exception </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Arrays.asList(line.split(<span class="string">" "</span>)).iterator();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步：迭代words,将每个word转化为(word,1)这种形式</span></span><br><span class="line"><span class="comment">//注意：PairFunction的泛型，第一个参数是输入数据类型</span></span><br><span class="line"><span class="comment">//第二个是输出tuple中的第一个参数类型，第三个是输出tuple中的第二个参数类型</span></span><br><span class="line"><span class="comment">//注意：如果后面需要使用到....ByKey，前面都需要使用mapToPair去处理</span></span><br><span class="line">JavaPairRDD&lt;String, Integer&gt; pairRDD = wordRDD.mapToPair(<span class="keyword">new</span> PairFunction&lt;String,String,Integer&gt;()&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String word)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(word, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五步：根据key(其实就是word)进行分组聚合统计</span></span><br><span class="line">JavaPairRDD&lt;String, Integer&gt; wordCountRDD = 			      pairRDD.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer,Integer,Integer&gt;()&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer i1, Integer i2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i1 + i2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第六步：将结果打印到控制台</span></span><br><span class="line">wordCountRDD.foreach(<span class="keyword">new</span> VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Tuple2&lt;String, Integer&gt; tup)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	System.out.println(tup._1+<span class="string">"--"</span>+tup._2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第七步：停止sparkContext</span></span><br><span class="line">sc.stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在编写一行JAVA语句时，有返回值的方法已经决定了返回对象的类型和泛型类型，我们只需要给这个对象起个名字就行。</span><br><span class="line"></span><br><span class="line">如果使用快捷键生成这个返回值，我们就可以减少不必要的打字和思考，专注于过程的实现。</span><br><span class="line"></span><br><span class="line">1.把光标移动到需要生成返回值变量的语句之前</span><br><span class="line">2.右键Refactor-Extract-Variable，也可以按快捷键ctrl+alt+v</span><br></pre></td></tr></table></figure>

<p><a href="https://jingyan.baidu.com/article/63acb44a15ae7f61fcc17e8f.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="任务提交"><a href="#任务提交" class="headerlink" title="任务提交"></a>任务提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对任务的提交有这么几种形式</span><br></pre></td></tr></table></figure>

<h3 id="使用idea"><a href="#使用idea" class="headerlink" title="使用idea"></a>使用idea</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接在idea中执行，方便在本地环境调试代码</span><br><span class="line">咱们刚才使用的就是这种方式</span><br></pre></td></tr></table></figure>

<h3 id="使用spark-submit"><a href="#使用spark-submit" class="headerlink" title="使用spark-submit"></a>使用spark-submit</h3><h4 id="添加打包所用依赖"><a href="#添加打包所用依赖" class="headerlink" title="添加打包所用依赖"></a>添加打包所用依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用spark-submit提交到集群执行，实际工作中会使用这种方式</span><br><span class="line">那接下来我们需要把我们的代码提交到集群中去执行</span><br><span class="line">这个时候就需要对代码打包了</span><br><span class="line">首先在项目的pom文件中添加 build 配置，和 dependencies 标签平级</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- java编译插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.3.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;!-- scala编译插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;net.alchim31.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;scala-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.1.6&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;scalaCompatVersion&gt;2.11&lt;&#x2F;scalaCompatVersion&gt;</span><br><span class="line">                    &lt;scalaVersion&gt;2.11.12&lt;&#x2F;scalaVersion&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;compile-scala&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;phase&gt;compile&lt;&#x2F;phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;add-source&lt;&#x2F;goal&gt;</span><br><span class="line">                            &lt;goal&gt;compile&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;test-compile-scala&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;phase&gt;test-compile&lt;&#x2F;phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;add-source&lt;&#x2F;goal&gt;</span><br><span class="line">                            &lt;goal&gt;testCompile&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;!-- 打包插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;descriptorRefs&gt;</span><br><span class="line">                        &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</span><br><span class="line">                    &lt;&#x2F;descriptorRefs&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;manifest&gt;</span><br><span class="line">                            &lt;mainClass&gt;&lt;&#x2F;mainClass&gt;</span><br><span class="line">                        &lt;&#x2F;manifest&gt;</span><br><span class="line">                    &lt;&#x2F;archive&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改代码中的输入文件路径信息，因为这个时候无法读取windows中的数据了，把代码修改成动态接收输入文件路径</span><br><span class="line">还需要将 setMaster(&quot;local&quot;) 注释掉，后面我们会在提交任务的时候动态指定master信息</span><br><span class="line">修改WordCountScala</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步：创建SparkContext</span></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">conf.setAppName(<span class="string">"WordCountScala"</span>)<span class="comment">//设置任务名称</span></span><br><span class="line"><span class="comment">//.setMaster("local")//local表示在本地执行</span></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf);</span><br><span class="line"><span class="comment">//第二步：加载数据</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">"D:\\hello.txt"</span></span><br><span class="line"><span class="keyword">if</span>(args.length==<span class="number">1</span>)&#123;</span><br><span class="line">path = args(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> linesRDD = sc.textFile(path</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">修改<span class="type">WordCountJava</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：创建SparkContext：</span></span><br><span class="line"><span class="comment">//注意，针对java代码需要获取JavaSparkContext</span></span><br><span class="line"><span class="type">SparkConf</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>();</span><br><span class="line">conf.setAppName(<span class="string">"WordCountJava"</span>);</span><br><span class="line"><span class="comment">//.setMaster("local");</span></span><br><span class="line"><span class="type">JavaSparkContext</span> sc = <span class="keyword">new</span> <span class="type">JavaSparkContext</span>(conf);</span><br><span class="line"><span class="comment">//第二步：加载数据</span></span><br><span class="line"><span class="type">String</span> path = <span class="string">"D:\\hello.txt"</span>;</span><br><span class="line"><span class="keyword">if</span>(args.length==<span class="number">1</span>)&#123;</span><br><span class="line">path = args[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">JavaRDD</span>&lt;<span class="type">String</span>&gt; linesRDD = sc.textFile(path);</span><br></pre></td></tr></table></figure>

<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>

<h4 id="上传，提交任务"><a href="#上传，提交任务" class="headerlink" title="上传，提交任务"></a>上传，提交任务</h4><p><a href="https://spark.apache.org/docs/2.4.3" target="_blank" rel="external nofollow noopener noreferrer">2.4.3官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交任务格式</span><br><span class="line"># Run on a YARN cluster</span><br><span class="line">export HADOOP_CONF_DIR&#x3D;XXX</span><br><span class="line">.&#x2F;bin&#x2F;spark-submit \</span><br><span class="line">  --class org.apache.spark.examples.SparkPi \</span><br><span class="line">  --master yarn \</span><br><span class="line">  --deploy-mode cluster \  # can be client for client mode</span><br><span class="line">  --executor-memory 20G \</span><br><span class="line">  --num-executors 50 \</span><br><span class="line">  &#x2F;path&#x2F;to&#x2F;examples.jar \</span><br><span class="line">  1000</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于spark-submit命令后面的参数有点多，所以在这我们最好是写一个脚本去提交任务</span><br><span class="line">[root@bigdata04 sparkjars]# vi wordCountJob.sh</span><br><span class="line">spark-submit \</span><br><span class="line">--class com.imooc.scala.WordCountScala \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--num-executors 1 \</span><br><span class="line">db_spark-1.0-SNAPSHOT-jar-with-dependencies.jar \</span><br><span class="line">hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;test&#x2F;hello.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在提交任务之前还需要先把hadoop集群启动了，以及对应的historyserver进程(除了客户端节点，所有集群节点都需要启动)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 sparkjars]# sh -x wordCountJob.sh</span><br><span class="line"></span><br><span class="line">此时任务会被提交到YARN集群中，可以看到任务执行成功了(8088)</span><br><span class="line"></span><br><span class="line">但是注意：此时想要查看foreach中打印的结果目前是看不到的，需要通过spark自己的任务界面才能看到，现在只有在任务运行中的时候，我们才能进到spark的任务界面，任务执行结束之后我们就进不去了，一会我们再解决这个问题</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这就是第二种方式，使用spark-submit的方式提交任务到集群中执行</span><br><span class="line">其实spark-submit中还可以配置很多参数，具体等后面我们用到的时候再去详细分析，现在分析不太好</span><br><span class="line">理解</span><br></pre></td></tr></table></figure>

<h3 id="使用spark-shell"><a href="#使用spark-shell" class="headerlink" title="使用spark-shell"></a>使用spark-shell</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第2章 解读spark工作与架构原理</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC2%E7%AB%A0-%E8%A7%A3%E8%AF%BBspark%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第十周-第2章-解读spark工作与架构原理"><a href="#第十周-第2章-解读spark工作与架构原理" class="headerlink" title="第十周 第2章 解读spark工作与架构原理"></a>第十周 第2章 解读spark工作与架构原理</h1><h2 id="Spark的工作原理"><a href="#Spark的工作原理" class="headerlink" title="Spark的工作原理"></a>Spark的工作原理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来分析一下Spark的工作原理</span><br><span class="line">来看这个图</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/b8Fban" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/03/02/b8Fban.md.png" alt="b8Fban.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  首先看中间是一个Spark集群，可以理解为是Spark的 standalone集群，集群中有6个节点</span><br><span class="line">  左边是Spark的客户端节点，这个节点主要负责向Spark集群提交任务，假设在这里我们向Spark集群提交了一个任务</span><br><span class="line">  那这个Spark任务肯定会有一个数据源，数据源在这我们使用HDFS，就是让Spark计算HDFS中的数据。</span><br><span class="line">  当Spark任务把HDFS中的数据读取出来之后，它会把HDFS中的数据转化为RDD，RDD其实是一个弹性分布式数据集，它其实是一个逻辑概念，在这你先把它理解为是一个数据集合就可以了，后面我们会详细分析这个RDD。</span><br><span class="line">  在这里这个RDD你就可以认为是包含了我们读取的HDFS上的数据</span><br><span class="line">其中这个RDD是有分区这个特性的，也就是一整份数据会被分成多份，</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 假设我们现在从HDFS中读取的这份数据被转化为RDD之后，在RDD中分成了3份，那这3份数据可能会分布在3个不同的节点上面，对应这里面的节点1、节点2、节点3</span><br><span class="line">这个RDD的3个分区的数据对应的是partiton-1、partition-2、partition-3</span><br><span class="line">这样的好处是可以并行处理了，后期每个节点就可以计算当前节点上的这一个分区的数据。</span><br><span class="line"></span><br><span class="line">这个计算思想是不是类似于MapReduce里面的计算思想啊，本地计算，但是有一点区别就是这个RDD的数据是在内存中的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设现在这个RDD中每个分区中的数据有10w条</span><br><span class="line">  那接下来我们就想对这个RDD中的数据进行计算了，可以使用一些高阶函数进行计算，例如：flatMap、map之类的</span><br><span class="line">  那在这我们先使用flatMap对数据进行处理，把每一行数据转成多行数据</span><br><span class="line">此时flatMap这个函数就会在节点1、节点2和节点3上并行执行了。</span><br><span class="line">计算之后的结果还是一个带有分区的RDD，那这个RDD我们假设存在节点4、节点5和节点6上面。</span><br><span class="line"></span><br><span class="line">  此时每个节点上面会有一个分区的数据，我们给这些分区数据起名叫partition-4、partition-5、partition-6</span><br><span class="line">  正常情况下，前面节点1上的数据处理之后会发送到节点4上面</span><br><span class="line">另外两个节点也是一样的。</span><br><span class="line">  此时经过flatmap计算之后，前面RDD的数据传输到后面节点上面这个过程是不需要经过shuffle的，可以直接在内存中通过网络传输过去，因为现在这两个RDD的分区数量是一一对应的。</span><br></pre></td></tr></table></figure>

<h3 id="什么是RDD"><a href="#什么是RDD" class="headerlink" title="什么是RDD"></a>什么是RDD</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RDD通常通过Hadoop上的文件，即HDFS文件进行创建，也可以通过程序中的集合来创建</span><br><span class="line">RDD是Spark提供的核心抽象，全称为Resillient Distributed Dataset，即弹性分布式数据集</span><br><span class="line">那我们接下来来看一下这个弹性分布式数据集的特点</span><br></pre></td></tr></table></figure>

<h4 id="RDD的特点"><a href="#RDD的特点" class="headerlink" title="RDD的特点"></a>RDD的特点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">弹性：RDD数据默认情况下存放在内存中，但是在内存资源不足时，Spark也会自动将RDD数据写入磁盘</span><br><span class="line">分布式：RDD在抽象上来说是一种元素数据的集合，它是被分区的，每个分区分布在集群中的不同节点上，从而让RDD中的数据可以被并行操作</span><br><span class="line">容错性：RDD最重要的特性就是提供了容错性，可以自动从节点失败中恢复过</span><br><span class="line"></span><br><span class="line">如果某个节点上的RDD partition，因为节点故障，导致数据丢了，那么RDD会自动通过自己的数据来源</span><br><span class="line">重新计算该partition的数据</span><br></pre></td></tr></table></figure>

<h2 id="Spark架构相关进程"><a href="#Spark架构相关进程" class="headerlink" title="Spark架构相关进程"></a>Spark架构相关进程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来看一下Spark架构相关的进程信息</span><br><span class="line">注意：在这里是以Spark的standalone集群为例进行分析</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Driver：</span><br><span class="line">我们编写的Spark程序就在Driver(进程)上，由Driver进程负责执行</span><br><span class="line">Driver进程所在的节点可以是Spark集群的某一个节点或者就是我们提交Spark程序的客户端节点</span><br><span class="line">具体Driver进程在哪个节点上启动是由我们提交任务时指定的参数决定的，这个后面我们会详细分析</span><br><span class="line"></span><br><span class="line">Master：</span><br><span class="line">集群的主节点中启动的进程</span><br><span class="line">主要负责集群资源的管理和分配，还有集群的监控等</span><br><span class="line"></span><br><span class="line">Worker：</span><br><span class="line">集群的从节点中启动的进程</span><br><span class="line">主要负责启动其它进程来执行具体数据的处理和计算任务</span><br><span class="line"></span><br><span class="line">Executor：</span><br><span class="line">此进程由Worker负责启动，主要为了执行数据处理和计算</span><br><span class="line"></span><br><span class="line">Task：</span><br><span class="line">是一个线程</span><br><span class="line">由Executor负责启动，它是真正干活的</span><br></pre></td></tr></table></figure>

<h2 id="Spark架构原理"><a href="#Spark架构原理" class="headerlink" title="Spark架构原理"></a>Spark架构原理</h2><p><a href="https://imgtu.com/i/b8V1iR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/03/02/b8V1iR.md.png" alt="b8V1iR.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来看一个图，通过刚才那几个进程，我们来分析一下Spark的架构原理</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 首先我们在spark的客户端机器上通过driver进程执行我们的Spark代码</span><br><span class="line">当我们通过spark-submit脚本提交Spark任务的时候Driver进程就启动了。</span><br><span class="line">2. Driver进程启动之后，会做一些初始化的操作，会找到集群master进程，对Spark应用程序进行注册</span><br><span class="line">3. 当Master收到Spark程序的注册申请之后，会发送请求给Worker，进行资源的调度和分配</span><br><span class="line">4. Worker收到Master的请求之后，会为Spark应用启动Executor进程</span><br><span class="line">会启动一个或者多个Executor，具体启动多少个，会根据你的配置来启动</span><br><span class="line">5. Executor启动之后，会向Driver进行反注册，这样Driver就知道哪些Executor在为它服务了</span><br><span class="line">6. Driver会根据我们对RDD定义的操作，提交一堆的task去Executor上执行</span><br><span class="line">task里面执行的其实就是具体的map、flatMap这些操作。</span><br><span class="line"></span><br><span class="line">这就是Spark架构的原理</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第十周 第1章 初识spark</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%8D%81%E5%91%A8-%E7%AC%AC1%E7%AB%A0-%E5%88%9D%E8%AF%86spark.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第十周-第1章-初识spark"><a href="#第十周-第1章-初识spark" class="headerlink" title="第十周 第1章 初识spark"></a>第十周 第1章 初识spark</h1><h2 id="快速了解Spark"><a href="#快速了解Spark" class="headerlink" title="快速了解Spark"></a>快速了解Spark</h2><h3 id="什么是Spark"><a href="#什么是Spark" class="headerlink" title="什么是Spark"></a>什么是Spark</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spark是一个用于大规模数据处理的统一计算引擎</span><br><span class="line">注意：Spark不仅仅可以做类似于MapReduce的离线数据计算，还可以做实时数据计算，并且它还可以实现类似于Hive的SQL计算，等等，所以说它是一个统一的计算引擎</span><br><span class="line">既然说到了Spark，那就不得不提一下Spark里面最重要的一个特性：内存计算</span><br><span class="line">Spark中一个最重要的特性就是基于内存进行计算，从而让它的计算速度可以达到MapReduce的几十倍甚至上百倍</span><br><span class="line">所以说在这大家要知道，Spark是一个基于内存的计算引擎</span><br></pre></td></tr></table></figure>

<h3 id="Spark的特点"><a href="#Spark的特点" class="headerlink" title="Spark的特点"></a>Spark的特点</h3><h4 id="Speed：速度快"><a href="#Speed：速度快" class="headerlink" title="Speed：速度快"></a>Speed：速度快</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于Spark是基于内存进行计算的，所以它的计算性能理论上可以比MapReduce快100倍</span><br><span class="line">Spark使用最先进的DAG调度器、查询优化器和物理执行引擎，实现了高性能的批处理和流处理。</span><br><span class="line">注意：批处理其实就是离线计算，流处理就是实时计算，只是说法不一样罢了，意思是一样的</span><br></pre></td></tr></table></figure>

<h4 id="Easy-of-Use：易用性"><a href="#Easy-of-Use：易用性" class="headerlink" title="Easy of Use：易用性"></a>Easy of Use：易用性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spark的易用性主要体现在两个方面</span><br><span class="line">1. 可以使用多种编程语言快速编写应用程序，例如Java、Scala、Python、R和SQL</span><br><span class="line">2. Spark提供了80多个高阶函数，可以轻松构建Spark任务。</span><br><span class="line">看这个图中的代码，spark可以直接读取json文件，使用where进行过滤，然后使用select查询指定字段中的值</span><br></pre></td></tr></table></figure>

<h4 id="Generality：通用性"><a href="#Generality：通用性" class="headerlink" title="Generality：通用性"></a>Generality：通用性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spark提供了Core、SQL、Streaming、MLlib、GraphX等技术组件，可以一站式地完成大数据领域的离线批处理、SQL交互式查询、流式实时计算，机器学习、图计算等常见的任务</span><br><span class="line">从这可以看出来Spark也是一个具备完整生态圈的技术框架，它不是一个人在战斗。</span><br></pre></td></tr></table></figure>

<h4 id="Runs-Everywhere：到处运行"><a href="#Runs-Everywhere：到处运行" class="headerlink" title="Runs Everywhere：到处运行"></a>Runs Everywhere：到处运行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你可以在Hadoop YARN、Mesos或Kubernetes上使用Spark集群。</span><br><span class="line">并且可以访问HDFS、Alluxio、Apache Cassandra、Apache HBase、Apache Hive和数百个其它数据源中的数据</span><br></pre></td></tr></table></figure>

<h3 id="Spark-vs-Hadoop"><a href="#Spark-vs-Hadoop" class="headerlink" title="Spark vs Hadoop"></a>Spark vs Hadoop</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那接下来我们拿Spark和Hadoop做一个对比</span><br><span class="line">在这里我们通过三个层面进行对比分析</span><br><span class="line">1. 综合能力</span><br><span class="line">Spark是一个综合性质的计算引擎</span><br><span class="line">Hadoop既包含MapReduce(计算引擎)，还包含HDFS(分布式存储)和Yarn(资源管理)</span><br><span class="line">所以说他们两个的定位是不一样的。</span><br><span class="line">从综合能力上来说，hadoop是完胜spark的</span><br><span class="line">2. 计算模型</span><br><span class="line">Spark 任务可以包含多个计算操作，轻松实现复杂迭代计算</span><br><span class="line">而Hadoop中的MapReduce任务只包含Map和Reduce阶段，不够灵活</span><br><span class="line">从计算模型上来说，spark是完胜hadoop的</span><br><span class="line">3. 处理速度</span><br><span class="line">Spark 任务的数据是基于内存的，计算速度很快</span><br><span class="line">而Hadoop中MapReduce 任务是基于磁盘的，速度较慢</span><br><span class="line">从处理速度上来说，spark也是完胜hadoop的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">之前有一种说法，说Spark将会替代Hadoop，这个说法是错误的，其实它们两个的定位是不一样的，Spark是一个通用的计算引擎，而Hadoop是一个包含HDFS、MapRedcue和YARN的框架，所以说Spark</span><br><span class="line">就算替代也只是替代Hadoop中的MapReduce，也不会整个替代Hadoop，因为Spark还需要依赖于Hadoop中的HDFS和YARN。</span><br><span class="line">所以在实际工作中Hadoop会作为一个提供分布式存储和分布式资源管理的角色存在Spark会在它之上去执行。</span><br><span class="line"></span><br><span class="line">所以在工作中就会把spark和hadoop结合到一块来使用</span><br></pre></td></tr></table></figure>

<h3 id="Spark-Hadoop"><a href="#Spark-Hadoop" class="headerlink" title="Spark+Hadoop"></a>Spark+Hadoop</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那下面我们来看一下Spark和Hadoop是如何结合</span><br><span class="line">看这个图</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/b3lMHf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/03/02/b3lMHf.png" alt="b3lMHf.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">底层是Hadoop的HDFS和YARN</span><br><span class="line">Spark core指的是Spark的离线批处理</span><br><span class="line">Spark Streaming指的是Spark的实时流计算</span><br><span class="line">SparkSQL指的是Spark中的SQL计算</span><br><span class="line">Spark Mlib指的是Spark中的机器学习库，这里面集成了很多机器学习算法</span><br><span class="line">最后这个Spark GraphX是指图计算</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实这里面这么多模块，针对大数据开发岗位主要需要掌握的是Spark core、streaming、sql这几个模块，其中Mlib主要是搞算法的岗位使用的，GraphX这个要看是否有图计算相关的需求，所以这两个不是</span><br><span class="line">必须要掌握的。</span><br><span class="line">所以在本套体系课程中我们会学习Spark core、Spark SQL、还有Spark streaming这三块内容</span><br><span class="line">不过由于现在我们主要是学习离线批处理相关的内容，所以会先学习Spark core和Spark SQL，而Spark streaming等到后面我们讲到实时计算的时候再去学习。</span><br><span class="line"></span><br><span class="line">1.5：Spark的应用场景</span><br><span class="line">Spark主要应用在以下这些应用场景中</span><br><span class="line">1. 低延时的海量数据计算需求，这个说的就是针对Spark core的应用</span><br><span class="line">2. 低延时SQL交互查询需求，这个说的就是针对Spark SQL的应用</span><br><span class="line">3. 准实时(秒级)海量数据计算需求，这个说的就是Spark Streaming的应用</span><br></pre></td></tr></table></figure>

<h2 id="Spark集群安装部署"><a href="#Spark集群安装部署" class="headerlink" title="Spark集群安装部署"></a>Spark集群安装部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们对Spark有一个整体概念之后，下面我们来安装部署一下Spark，spark也是支持集群模式的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spark集群有多种部署方式，比较常见的有Standalone模式和ON YARN模式</span><br><span class="line">Standalone模式就是说部署一套独立的Spark集群，后期开发的Spark任务就在这个独立的Spark集群中执行ON YARN模式是说使用现有的Hadoop集群，后期开发的Spark任务会在这个Hadoop集群中执行，此时这个Hadoop集群就是一个公共的了，不仅可以运行MapReduce任务，还可以运行Spark任务，这样集群的资源就可以共享了，并且也不需要再维护一套集群了，减少了运维成本和运维压力，一举两得。</span><br><span class="line">所以在实际工作中都会使用Spark ON YARN模式</span><br><span class="line">不过为了考虑到大家可能会有一些特殊场景确实要使用standalone模式部署独立的spark集群，所以在这，针对这两种部署模式我们都讲一下。</span><br><span class="line">那在具体安装部署之前，需要先下载Spark的安装包。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这需要注意选择合适的安装包</span><br><span class="line">因为我们使用Spark的时候一般都是需要和Hadoop交互的，所以需要下载带有Hadoop依赖的安装包</span><br><span class="line">这个时候就需要选择Hadoop版本对应的Spark安装包，我们的Hadoop是3.2的，里面Hadoop的版本只有2.6和2.7的，那就退而求其次选择hadoop2.7对应的这个Spark安装包，其实也是没什么问题的，如果有强迫症的话，就需要下载Spark的源码包，自己编译配套版本的安装包了。</span><br><span class="line">其实在Spark3.0的那个预览版本里面是有和Hadoop3.2配套的版本的，不过那个不是稳定版本，不建议</span><br><span class="line">在生产环境下使用，所以就不考虑了</span><br></pre></td></tr></table></figure>

<h3 id="stand-alone"><a href="#stand-alone" class="headerlink" title="stand alone"></a>stand alone</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于Spark集群也是支持主从的，在这我们使用三台机器，部署一套一主两从的集群</span><br><span class="line">主节点： bigdata01</span><br><span class="line">从节点： bigdata02,bigdata03</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：需要确保这几台机器上的基础环境是OK的，防火墙、免密码登录、还有JDK</span><br><span class="line">因为这几台机器我们之前已经使用过了，基础环境都是配置过的，所以说在这就直接使用了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先在bigdata01上进行配置</span><br><span class="line">1.解压</span><br><span class="line">2.重名名spark-env.sh.template</span><br><span class="line">3.配置spark-env.sh</span><br><span class="line">在文件末尾增加这两行内容，指定JAVA_HOME和主节点的主机名</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export SPARK_MASTER_HOST&#x3D;bigdata01</span><br><span class="line"></span><br><span class="line">4.重命名slaves.template</span><br><span class="line">5.修改slaves</span><br><span class="line">将文件末尾的localhost去掉，增加bigdata02和bigdata03这两个从节点的主机名</span><br><span class="line">bigdata02</span><br><span class="line">bigdata03</span><br><span class="line"></span><br><span class="line">6.将修改好配置的spark安装包，拷贝到bigdata02和bigdata03上</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动Spark集群</span><br><span class="line">[root@bigdata01 soft]# cd spark-2.4.3-bin-hadoop2.7</span><br><span class="line">[root@bigdata01 spark-2.4.3-bin-hadoop2.7]# sbin&#x2F;start-all.sh</span><br><span class="line"></span><br><span class="line">验证</span><br><span class="line">[root@bigdata01 spark-2.4.3-bin-hadoop2.7]# jps</span><br><span class="line">1731 Master</span><br><span class="line"></span><br><span class="line">[root@bigdata02 ~]# jps</span><br><span class="line">1714 Worker</span><br><span class="line">[root@bigdata03 ~]# jps</span><br><span class="line">1707 Worker</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还可以访问主节点的8080端口来查看集群信息</span><br><span class="line">http:&#x2F;&#x2F;bigdata01:8080&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10. 提交任务</span><br><span class="line">那我们尝试向这个Spark独立集群提交一个spark任务</span><br><span class="line">提交任务的命令该如何写呢？</span><br><span class="line">来看一下Spark的官方文档</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要使用bin目录下的spark-submit脚本提交任务</span><br><span class="line">--class 指定需要指定的入口类</span><br><span class="line">--master指定集群的地址</span><br><span class="line">接着指定需要提交的任务jar包</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">停止Spark集群</span><br><span class="line">在主节点 bigdata01上执行</span><br><span class="line">[root@bigdata01 spark-2.4.3-bin-hadoop2.7]# sbin&#x2F;stop-all.sh</span><br></pre></td></tr></table></figure>

<h3 id="ON-YARN"><a href="#ON-YARN" class="headerlink" title="ON YARN"></a>ON YARN</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ON YARN模式很简单，先保证有一个Hadoop集群，然后只需要部署一个Spark的客户端节点即可，不需要启动任何进程</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：Spark的客户端节点同时也需要是Hadoop的客户端节点，因为Spark需要依赖于Hadoop</span><br><span class="line">我们的Hadoop集群是 bigdata01、bigdata02、bigdata03</span><br><span class="line">那我们可以选择把Spark部署在一个单独的节点上就可以了，其实就类似于我们之前部署Hadoop的客户端节点。</span><br><span class="line">在这我们使用bigdata04来部署spark on yarn，因为这个节点同时也是Hadoop的客户端节点</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 将spark-2.4.3-bin-hadoop2.7.tgz上传到bigdata04的&#x2F;data&#x2F;soft目录中</span><br><span class="line">2. 解压</span><br><span class="line">3. 重命名spark-env.sh.template</span><br><span class="line">4. 修改 spark-env.sh</span><br><span class="line">在文件末尾增加这两行内容，指定JAVA_HOME和Hadoop的配置文件目录</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HADOOP_CONF_DIR&#x3D;&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;etc&#x2F;hadoop</span><br><span class="line"></span><br><span class="line">5. 提交任务</span><br><span class="line">那我们通过这个spark客户点节点，向Hadoop集群上提交spark任务(具体提交方法，可到官网查看)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 可以到YARN的8088界面查看提交上去的任务信息</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第九周 第5章 Scala高级特性</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B9%9D%E5%91%A8-%E7%AC%AC5%E7%AB%A0-Scala%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第九周-第5章-Scala高级特性"><a href="#第九周-第5章-Scala高级特性" class="headerlink" title="第九周 第5章 Scala高级特性"></a>第九周 第5章 Scala高级特性</h1><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">先看一下模式匹配</span><br><span class="line">模式匹配是<span class="type">Scala</span>中非常有特色，非常强大的一种功能。</span><br><span class="line">模式匹配，其实类似于<span class="type">Java</span>中的 switch <span class="keyword">case</span> 语法，即对一个值进行条件判断，然后针对不同的条件，进</span><br><span class="line">行不同的处理</span><br><span class="line">不过<span class="type">Scala</span>没有<span class="type">Java</span>中的 switch <span class="keyword">case</span> 语法，但是，<span class="type">Scala</span>提供了更加强大的 <span class="keyword">match</span> <span class="keyword">case</span> 语法，就是这个</span><br><span class="line">模式匹配</span><br><span class="line"><span class="type">Java</span>的 switch <span class="keyword">case</span> 仅能匹配变量的值，而<span class="type">Scala</span>的 <span class="keyword">match</span> <span class="keyword">case</span> 可以匹配各种情况，比如：变量的类型、</span><br><span class="line">集合的元素，有值没值</span><br></pre></td></tr></table></figure>

<h3 id="对变量的值进行模式匹配"><a href="#对变量的值进行模式匹配" class="headerlink" title="对变量的值进行模式匹配"></a>对变量的值进行模式匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">match case语法格式：变量 match &#123; case 值 &#x3D;&gt; 代码 &#125;</span><br><span class="line">如果值为下划线，则代表了不满足以上所有情况下的默认处理</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span></span>(day: <span class="type">Int</span>) &#123;</span><br><span class="line">day <span class="keyword">match</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> =&gt; println(<span class="string">"Monday"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> =&gt; println(<span class="string">"Tuesday"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> =&gt; println(<span class="string">"Wednesday"</span>)</span><br><span class="line"><span class="keyword">case</span> _ =&gt; println(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scala&gt; demo1(<span class="number">1</span>)</span><br><span class="line"><span class="type">Monday</span></span><br><span class="line">scala&gt; demo1(<span class="number">4</span>)</span><br><span class="line">none</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：match case中，只要一个case分支满足并处理了，就不会继续判断下一个case分支了，这一点与Java不同，java的switch case需要用break停止向下执行</span><br></pre></td></tr></table></figure>

<h3 id="变量类型的模式匹配"><a href="#变量类型的模式匹配" class="headerlink" title="变量类型的模式匹配"></a>变量类型的模式匹配</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Scala</span>的模式匹配一个强大之处就在于，可以直接匹配类型，而不是值！！！这点是java的switch <span class="keyword">case</span>绝对做不到的</span><br><span class="line">语法格式：变量 <span class="keyword">match</span> &#123; <span class="keyword">case</span> 变量: 类型 =&gt; 代码 &#125;</span><br><span class="line">典型的一个应用场景就是针对异常的处理</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processException</span></span>(e: <span class="type">Exception</span>) &#123;</span><br><span class="line">e <span class="keyword">match</span> &#123;</span><br><span class="line"><span class="keyword">case</span> e1: <span class="type">IllegalArgumentException</span> =&gt; println(<span class="string">"IllegalArgumentException "</span></span><br><span class="line"><span class="keyword">case</span> e2: <span class="type">FileNotFoundException</span> =&gt; println(<span class="string">"FileNotFoundException "</span> + e2)</span><br><span class="line"><span class="keyword">case</span> e3: <span class="type">IOException</span> =&gt; println(<span class="string">"IOException "</span> + e3)</span><br><span class="line"><span class="keyword">case</span> _: <span class="type">Exception</span> =&gt; println(<span class="string">"Exception "</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; processException(<span class="keyword">new</span> <span class="type">Exception</span>())</span><br><span class="line"><span class="type">Exception</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">在<span class="keyword">try</span>-<span class="keyword">catch</span>异常中的应用</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">val</span> lines02 = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"D://test02.txt"</span>).mkString</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt; println(<span class="string">"no file"</span>)</span><br><span class="line"><span class="keyword">case</span> ex: <span class="type">IOException</span> =&gt; println(<span class="string">"io exception"</span>)</span><br><span class="line"><span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; println(<span class="string">"exception"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="case-class与模式匹配"><a href="#case-class与模式匹配" class="headerlink" title="case class与模式匹配"></a>case class与模式匹配</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Scala</span>中提供了一种特殊的类，用 <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">进行声明，中文可以称为样例类</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">其实有点类似于Java中的JavaBean的概念</span></span></span><br><span class="line"><span class="class"><span class="title">即只定义field，会由Scala在编译时自动提供get和set方法，但是没有其它的method</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">的主构造函数接收的参数通常不需要使用var或val修饰，Scala自动就会使用val修饰（但是如果你自己使用var修饰，那么还是会按照var来，在这用哪个区别都不大）</span></span></span><br><span class="line"><span class="class"><span class="title">Scala自动为</span> <span class="title">case</span> <span class="title">class</span> <span class="title">定义了伴生对象，也就是object，并且定义了apply</span>(<span class="params"></span>)<span class="title">方法，该方法接收主构造函数中相同的参数，并返回</span> <span class="title">case</span> <span class="title">class</span> <span class="title">对象</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Teacher</span>(<span class="params">name: <span class="type">String</span>, sub: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Student</span>(<span class="params">name: <span class="type">String</span>, cla: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">check</span>(<span class="params">p: <span class="type">Person</span></span>) </span>&#123;</span><br><span class="line">p <span class="keyword">match</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">Teacher</span>(name, sub) =&gt; println(<span class="string">"Teacher, name is "</span> + name + <span class="string">", sub is "</span> + sub)</span><br><span class="line"><span class="keyword">case</span> <span class="type">Student</span>(name, cla) =&gt; println(<span class="string">"Student, name is "</span> + name + <span class="string">", cla is "</span> + cla)</span><br><span class="line"><span class="keyword">case</span> _ =&gt; println(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">执行</span><br><span class="line">scala&gt; check(<span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"tom"</span>,<span class="string">"class1"</span>))</span><br><span class="line"><span class="type">Student</span>, name is tom, cla is class1</span><br><span class="line">scala&gt; check(<span class="keyword">new</span> <span class="type">Person</span>())</span><br><span class="line">none</span><br></pre></td></tr></table></figure>

<h3 id="Option与模式匹配"><a href="#Option与模式匹配" class="headerlink" title="Option与模式匹配"></a>Option与模式匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala有一种特殊的数据类型，叫做Option。</span><br><span class="line">Option有两种值，一种是Some，表示有值，一种是None，表示没有值</span><br><span class="line">Option通常会用于模式匹配中，用于判断某个变量是有值还是没有值，这比null来的更加简洁明了</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/b1Mnh9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/03/01/b1Mnh9.md.png" alt="b1Mnh9.md.png"></a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> ages = <span class="type">Map</span>(<span class="string">"jack"</span> -&gt; <span class="number">18</span>, <span class="string">"tom"</span> -&gt; <span class="number">30</span>, <span class="string">"jessic"</span> -&gt; <span class="number">27</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAge</span></span>(name: <span class="type">String</span>) &#123;</span><br><span class="line"><span class="keyword">val</span> age = ages.get(name)</span><br><span class="line">age <span class="keyword">match</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(age) =&gt; println(<span class="string">"your age is "</span> + age)</span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span> =&gt; println(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; getAge(<span class="string">"jack"</span>)</span><br><span class="line">your age is <span class="number">18</span></span><br><span class="line">scala&gt; getAge(<span class="string">"hehe"</span>)</span><br><span class="line">none</span><br></pre></td></tr></table></figure>

<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala的隐式转换，允许手动指定将某种类型的对象转换成其它类型的对象</span><br><span class="line">Scala的隐式转换，最核心的就是定义隐式转换函数，即implicit conversion function</span><br><span class="line">隐式转换函数与普通函数唯一的语法区别是要以implicit开头而且最好要定义函数返回类型</span><br><span class="line">隐式转换非常强大的一个功能，就是可以在不知不觉中加强现有类型的功能。也就是说，我们可以为某个普通类定义一个加强类，并定义对应的隐式转换函数，这样我们在使用加强类里面的方法的时候，Scala会自动进行隐式转换，把普通类转换为加强类，然后再调用加强类中的方法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala默认会自动使用两种隐式转换</span><br><span class="line">1：源类型，或者目标类型的伴生对象里面的隐式转换函数</span><br><span class="line">2：当前程序作用域内可以用唯一标识符表示的隐式转换函数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果隐式转换函数不在上述两种情况下的话，那么就必须手动使用import引入对应的隐式转换函数</span><br><span class="line">通常建议，仅仅在需要进行隐式转换的地方，比如某个函数内，用import导入隐式转换函数，这样可以缩小隐式转换函数的作用域，避免不需要的隐式转换</span><br></pre></td></tr></table></figure>

<h2 id="案例：狗也能抓老鼠"><a href="#案例：狗也能抓老鼠" class="headerlink" title="案例：狗也能抓老鼠"></a>案例：狗也能抓老鼠</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过隐式转换实现，狗也具备猫抓老鼠的功能</span><br><span class="line"></span><br><span class="line">class cat(val name: String)&#123;</span><br><span class="line">def catchMouse()&#123;println(name+&quot; catch mouse&quot;)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dog(val name: String)</span><br><span class="line"></span><br><span class="line">implicit def object2Cat (obj: Object): cat &#x3D; &#123;</span><br><span class="line">if (obj.getClass &#x3D;&#x3D; classOf[dog]) &#123;</span><br><span class="line">val dog &#x3D; obj.asInstanceOf[dog]</span><br><span class="line">new cat(dog.name)</span><br><span class="line">&#125;</span><br><span class="line">else Nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> d = <span class="keyword">new</span> dog(<span class="string">"d1"</span>)</span><br><span class="line">d: dog = dog@<span class="number">7</span>f0e0db3</span><br><span class="line">scala&gt; d.catchMouse()</span><br><span class="line">d1 <span class="keyword">catch</span> mouse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们后续在工作中一般很少需要我们自己去定义隐式转换函数，大部分的场景是我们只需要使用<span class="keyword">import</span></span><br><span class="line">导入对应的隐式转换函数就可以了，在这个案例中我们是自己手工实现了一个隐私转换函数，因为他们都在一个作用域内，所以就不需要<span class="keyword">import</span>了</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>主构造函数里的参数，要用<span class="keyword">var</span>或<span class="keyword">val</span>修饰；函数不用</span><br></pre></td></tr></table></figure>











<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第九周 第4章 Scala函数式编程</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B9%9D%E5%91%A8-%E7%AC%AC4%E7%AB%A0-Scala%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第九周-第4章-Scala函数式编程"><a href="#第九周-第4章-Scala函数式编程" class="headerlink" title="第九周 第4章 Scala函数式编程"></a>第九周 第4章 Scala函数式编程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来学习一下scala中最重要的内容，函数式编程，其实我们学习Scala这门语言就是因为它的这一个特性，咱们在最开始的时候给大家演示了，使用java代码实现函数式编程是很复杂的，而使用scala代码实现函数式编程就很轻松，很简单了。</span><br><span class="line">这块内容我们在后续工作中会经常使用，需要大家重点掌握。</span><br></pre></td></tr></table></figure>

<h2 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala是一门既面向对象，又面向过程的语言。</span><br><span class="line">因此在Scala中有非常好的面向对象的特性，可以使用Scala来基于面向对象的思想开发大型复杂的系统和工程；</span><br><span class="line">而且Scala也面向过程，因此Scala中有函数的概念。</span><br><span class="line">在Scala中，函数与类、对象一样，都是一等公民，所以说scala的面向过程其实就重在针对函数的编程了，所以称之为函数式编程</span><br></pre></td></tr></table></figure>

<h2 id="函数赋值给变量"><a href="#函数赋值给变量" class="headerlink" title="函数赋值给变量"></a>函数赋值给变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中的函数是一等公民，可以独立定义，独立存在，而且可以直接将函数作为值赋值给变量</span><br><span class="line">Scala的语法规定，将函数赋值给变量时，必须在函数后面加上空格和下划线</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(name: <span class="type">String</span>) &#123; println(<span class="string">"Hello, "</span> + name) &#125;</span><br><span class="line">sayHello: (name: <span class="type">String</span>)<span class="type">Unit</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> sayHelloFunc = sayHello _</span><br><span class="line">sayHelloFunc: <span class="type">String</span> =&gt; <span class="type">Unit</span> = &lt;function1&gt;</span><br><span class="line">scala&gt; sayHelloFunc(<span class="string">"scala"</span>)</span><br><span class="line"><span class="type">Hello</span>, scala</span><br></pre></td></tr></table></figure>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中的函数也可以不需要命名，这种函数称为匿名函数</span><br><span class="line">匿名函数的语法格式：(参数名: 参数类型) &#x3D;&gt; 函数体</span><br><span class="line">(参数名: 参数类型) ：是函数的参数列表</span><br><span class="line"></span><br><span class="line">可以将匿名函数直接赋值给某个变量</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> sayHelloFunc = (name: <span class="type">String</span>) =&gt; println(<span class="string">"Hello, "</span> + name)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> sayHelloFunc = (name: <span class="type">String</span>) =&gt; &#123;println(<span class="string">"Hello, "</span> + name)&#125;</span><br><span class="line"></span><br><span class="line">注意：如果函数体有多行代码，则需要添加&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于函数是一等公民，所以说我们可以直接将某个函数作为参数传入其它函数</span><br><span class="line">这个功能是极其强大的，也是Java这种面向对象的编程语言所不具备的</span><br><span class="line">这个功能在实际工作中是经常需要用到的</span><br><span class="line">接收其它函数作为当前函数的参数，当前这个函数也被称作高阶函数 (higher-order function)</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">看一个例子：</span><br><span class="line">先定义一个匿名函数，赋值给变量sayHelloFunc</span><br><span class="line"><span class="keyword">val</span> sayHelloFunc = (name: <span class="type">String</span>) =&gt; println(<span class="string">"Hello, "</span> + name)</span><br><span class="line"></span><br><span class="line">再定义一个高阶函数，这个高阶函数的参数会接收一个函数</span><br><span class="line">参数： (<span class="type">String</span>) =&gt; <span class="type">Unit</span> 表示这个函数接收一个字符串，没有返回值</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span>(func: (<span class="type">String</span>) =&gt; <span class="type">Unit</span>, name: <span class="type">String</span>) &#123; func(name) &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; greeting(sayHelloFunc, <span class="string">"scala"</span>)</span><br><span class="line"><span class="type">Hello</span>, scala</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">或者还可以这样用，直接把匿名函数的定义传过来也是可以</span><br><span class="line">scala&gt; greeting((name: <span class="type">String</span>) =&gt; println(<span class="string">"Hello, "</span> + name),<span class="string">"scala"</span>)</span><br><span class="line"><span class="type">Hello</span>, scala</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">高阶函数可以自动推断出它里面函数的参数类型，对于只有一个参数的函数，还可以省去小括号</span><br><span class="line"># 先定义一个高阶函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span>(func: (<span class="type">String</span>) =&gt; <span class="type">Unit</span>, name: <span class="type">String</span>) &#123; func(name) &#125;</span><br><span class="line"># 使用高阶函数：完整写法</span><br><span class="line">greeting((name: <span class="type">String</span>) =&gt; println(<span class="string">"Hello, "</span> + name), <span class="string">"scala"</span>)</span><br><span class="line"># 使用高阶函数：高阶函数可以自动推断出参数类型，而不需要写明类型</span><br><span class="line">greeting((name) =&gt; println(<span class="string">"Hello, "</span> + name), <span class="string">"scala"</span>)</span><br><span class="line"># 使用高阶函数：对于只有一个参数的函数，还可以省去其小括号</span><br><span class="line">greeting(name =&gt; println(<span class="string">"Hello, "</span> + name), <span class="string">"scala"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="常用高阶函数"><a href="#常用高阶函数" class="headerlink" title="常用高阶函数"></a>常用高阶函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚才是我们自己实现的高阶函数，其实我们在工作中自己定义高阶函数的场景不多，大部分场景都是去使</span><br><span class="line">用已有的高阶函数</span><br><span class="line">下面我们来看几个常见的高阶函数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map：对传入的每个元素都进行处理，返回一个元素</span><br><span class="line">flatMap：对传入的每个元素都进行处理，返回一个或者多个元素</span><br><span class="line">foreach：对传入的每个元素都进行处理，但是没有返回值</span><br><span class="line">filter：对传入的每个元素都进行条件判断，如果返回true，则保留该元素，否则过滤掉该元素</span><br><span class="line">reduceLeft：从左侧元素开始，进行reduce操作</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).map(num=&gt;&#123;num * <span class="number">2</span>&#125;)</span><br><span class="line">res38: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">可以简写为</span><br><span class="line">scala&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).map(_ * <span class="number">2</span>)</span><br><span class="line">res40: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="type">Array</span>(<span class="string">"hello you"</span>,<span class="string">"hello me"</span>).flatMap(line=&gt;line.split(<span class="string">" "</span>))</span><br><span class="line">res53: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(hello, you, hello, me)</span><br><span class="line"></span><br><span class="line">可以简写为</span><br><span class="line">scala&gt; <span class="type">Array</span>(<span class="string">"hello you"</span>,<span class="string">"hello me"</span>).flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">res54: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(hello, you, hello, me)</span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).map(_ * <span class="number">2</span>).foreach(num=&gt;println(num))</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).map(_ * <span class="number">2</span>).foreach(println(_))</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).map(_ * <span class="number">2</span>).foreach(println _)</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; Array(1, 2, 3, 4, 5).filter(num&#x3D;&gt;num % 2 &#x3D;&#x3D; 0)</span><br><span class="line">res46: Array[Int] &#x3D; Array(2, 4)</span><br><span class="line"></span><br><span class="line">scala&gt; Array(1, 2, 3, 4, 5).filter(_ % 2 &#x3D;&#x3D; 0)</span><br><span class="line">res47: Array[Int] &#x3D; Array(2, 4)</span><br></pre></td></tr></table></figure>

<h3 id="reduceLeft"><a href="#reduceLeft" class="headerlink" title="reduceLeft"></a>reduceLeft</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reduceLeft的使用</span><br><span class="line">表示先对元素1和元素2进行处理，然后将结果与元素3处理，再将结果与元素4处理，依次类推spark中有一个reduce函数，和这个函数的效果一致</span><br><span class="line"></span><br><span class="line">scala&gt; Array(1, 2, 3, 4, 5).reduceLeft((t1,t2)&#x3D;&gt;t1+t2)</span><br><span class="line">res50: Int &#x3D; 15</span><br><span class="line"></span><br><span class="line">scala&gt; Array(1, 2, 3, 4, 5).reduceLeft( _ + _)</span><br><span class="line">res49: Int &#x3D; 15</span><br><span class="line"></span><br><span class="line">注意：这里的两个_代表是两个元素</span><br></pre></td></tr></table></figure>

<h2 id="案例：函数式编程"><a href="#案例：函数式编程" class="headerlink" title="案例：函数式编程"></a>案例：函数式编程</h2> <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">统计多个文本内的单词总数</span><br><span class="line">使用scala的io包读取文本文件内的数据</span><br><span class="line"></span><br><span class="line">使用<span class="type">List</span>的伴生对象，将多个文件内的内容创建为一个<span class="type">List</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> lines01 = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"D://a.txt"</span>).mkString</span><br><span class="line"><span class="keyword">val</span> lines02 = scala.io.<span class="type">Source</span>.fromFile(<span class="string">"D://b.txt"</span>).mkString</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> lines = <span class="type">List</span>(lines01, lines02)</span><br><span class="line"></span><br><span class="line">注意：下面这一行是核心代码，使用了链式调用的函数式编程</span><br><span class="line">lines.flatMap(_.split( <span class="string">" "</span>)).map((_, <span class="number">1</span>)).map(_._2).reduceLeft(_ + _)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lines.flatMap(_.split( <span class="string">" "</span>)) ：表示对每一行数据使用空格进行切割，返回每一个单词</span><br><span class="line">.map((_, <span class="number">1</span>)) ：针对每一个单词，都转成tuple类型，tuple中的第<span class="number">1</span>个元素是这个单词，第<span class="number">2</span>个元素表示单词出现的次数<span class="number">1</span></span><br><span class="line">.map(_._2) ：迭代每一个tuple，获取tuple中的第<span class="number">2</span>个元素</span><br><span class="line">.reduceLeft(_ + _) ：对前面获取到的元素进行累加求和</span><br></pre></td></tr></table></figure>





<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第九周 第3章 Scala面向对象</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B9%9D%E5%91%A8-%E7%AC%AC3%E7%AB%A0-Scala%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第九周-第3章-Scala面向对象"><a href="#第九周-第3章-Scala面向对象" class="headerlink" title="第九周 第3章 Scala面向对象"></a>第九周 第3章 Scala面向对象</h1><h2 id="Scala面向对象编程"><a href="#Scala面向对象编程" class="headerlink" title="Scala面向对象编程"></a>Scala面向对象编程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我们主要学习Scala中的类、对象和接口</span><br><span class="line">注意：</span><br><span class="line">Scala中类和java中的类基本是类似的</span><br><span class="line">Scala中的对象时需要定义的，而java中的对象是通过class new出来的</span><br><span class="line">Scala中的接口是trait，java中的接口是interface</span><br></pre></td></tr></table></figure>

<h3 id="类-class"><a href="#类-class" class="headerlink" title="类-class"></a>类-class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先看一下类</span><br><span class="line">Scala中定义类和Java一样，都是使用 class 关键字</span><br><span class="line">和Java一样，使用new关键字创建对象</span><br><span class="line">那下面来看一个具体案例</span><br><span class="line">定义Person类，创建对象并调用其方法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">var name &#x3D; &quot;scala&quot;</span><br><span class="line">def sayHello()&#123;</span><br><span class="line">println(&quot;Hello,&quot;+name)</span><br><span class="line">&#125;</span><br><span class="line">def getName&#x3D; name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：如果在定义方法的时候指定了()，那么在调用的时候()可写可不写，如果在定义方法的时候</span><br><span class="line">没指定()，则调用方法时肯定不能带()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val p &#x3D; new Person()</span><br><span class="line">p: Person &#x3D; Person@23b8d9f3</span><br><span class="line">scala&gt; p.sayHello()</span><br><span class="line">Hello,scala</span><br><span class="line">scala&gt; p.sayHello</span><br><span class="line">Hello,scala</span><br><span class="line">scala&gt; println(p.getName)</span><br><span class="line">scala</span><br><span class="line">scala&gt; println(p.getName())</span><br><span class="line">&lt;console&gt;:10: error: not enough arguments for method apply: (index: Int)Char</span><br></pre></td></tr></table></figure>

<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类创建好了，下面我们来看一下类中的构造函数，</span><br><span class="line">Scala类中的构造函数可以分为主构造函数和辅助构造函数</span><br><span class="line">这两种构造函数有什么区别呢？</span><br><span class="line">主constructor：类似Java的默认构造函数 this()</span><br><span class="line">辅助constructor：类似Java的重载构造函数 this(name,age)</span><br></pre></td></tr></table></figure>

<h5 id="主constructor"><a href="#主constructor" class="headerlink" title="主constructor"></a>主constructor</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那先来看一下主构造函数</span><br><span class="line">Scala的主constructor是与类名放在一起的，与Java不同，Java中的构造函数是写在类内部的</span><br><span class="line"></span><br><span class="line">注意：在类中，没有定义在任何方法或者是代码块之中的代码就是主constructor的代码</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">val name:<span class="type">String</span>,val age:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">println(<span class="string">"your name is "</span> + name + <span class="string">", your age is "</span> + age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"zs"</span>,<span class="number">19</span>)</span><br><span class="line">your name is zs, your age is <span class="number">19</span></span><br><span class="line">res8: <span class="type">Student</span> = <span class="type">Student</span>@<span class="number">3134153</span>d</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">在创建对象的时候，类中的println语句执行了，说明这个语句属于主构造函数中的代码</span><br><span class="line">主constructor中还可以通过使用默认参数，来给参数设置默认值</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">val name:<span class="type">String</span> = "jack",val age:<span class="type">Int</span> = 20</span>)</span>&#123;</span><br><span class="line">println(<span class="string">"your name is "</span> + name + <span class="string">", your age is "</span> + age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">new</span> <span class="type">Student</span>()</span><br><span class="line">your name is jack, your age is <span class="number">20</span></span><br><span class="line">res10: <span class="type">Student</span> = <span class="type">Student</span>@<span class="number">7</span>ddd84b5</span><br><span class="line">scala&gt; <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"tom"</span>,<span class="number">18</span>)</span><br><span class="line">your name is tom, your age is <span class="number">18</span></span><br><span class="line">res11: <span class="type">Student</span> = <span class="type">Student</span><span class="meta">@a</span>09303</span><br></pre></td></tr></table></figure>

<h5 id="辅构造函数"><a href="#辅构造函数" class="headerlink" title="辅构造函数"></a>辅构造函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中，可以给类定义多个辅助constructor，类似于java中的构造函数重载</span><br><span class="line">辅助constructor之间可以互相调用，但是第一行必须调用主constructor</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>()</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>(name)</span><br><span class="line"><span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> s = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"tom"</span>)</span><br><span class="line">s: <span class="type">Student</span> = <span class="type">Student</span>@<span class="number">1</span>a538ed8</span><br><span class="line">scala&gt; <span class="keyword">val</span> s = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"mick"</span>,<span class="number">30</span>)</span><br><span class="line">s: <span class="type">Student</span> = <span class="type">Student</span>@<span class="number">319642</span>db</span><br></pre></td></tr></table></figure>

<h3 id="对象-object"><a href="#对象-object" class="headerlink" title="对象-object"></a>对象-object</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">前面我们学习的scala中的<span class="class"><span class="keyword">class</span><span class="title">和java中的class是类似的，下面来看一个java中没有的内容，叫Object</span></span></span><br><span class="line"><span class="class"><span class="title">那大家可能有疑问了，Java中也有object，通过class就可以创建object</span></span></span><br><span class="line"><span class="class"><span class="title">但是注意了，在scala中，我们可以直接定义一个object，就像定义class一样。</span></span></span><br><span class="line"><span class="class"><span class="title">object：相当于class的单个实例，通常在里面放一些静态的field或者method</span></span></span><br><span class="line"><span class="class"><span class="title">object不能定义带参数的constructor，只有空参的constructor</span></span></span><br><span class="line"><span class="class"><span class="title">第一次调用object的方法时，会执行object的constructor，也就是执行object内部不在任何方法中的代码，因为它只有空参的构造函数</span></span></span><br><span class="line"><span class="class"><span class="title">但是注意，object的constructor的代码只会在他第一次被调用时执行一次，以后再次调用就不会再执行了</span></span></span><br><span class="line"><span class="class"><span class="title">object通常用于作为单例模式的实现，或者放class的一些静态成员，比如工具方法</span></span></span><br><span class="line"><span class="class"><span class="title">object可以直接使用，不能new</span></span></span><br><span class="line"><span class="class"><span class="title">创建一个object，使用object关键字</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">1</span></span><br><span class="line">println(<span class="string">"this Person object!"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAge</span> </span>= age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">执行，直接通过<span class="type">Object</span>的名称调用属性或者方法即可，类似于<span class="type">Java</span>中的静态类</span><br><span class="line">res18: <span class="type">Person</span><span class="class">.<span class="keyword">type</span> </span>= <span class="type">Person</span>$@<span class="number">73e776</span>b7</span><br><span class="line">scala&gt; <span class="type">Person</span>.age</span><br><span class="line">res19: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">scala&gt; <span class="type">Person</span>.getAge</span><br><span class="line">res20: <span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面学习了class和object，那下面再来看一个特殊的概念，伴生对象</span><br><span class="line">如果有一个class，还有一个与class同名的object，那么就称这个object是class的 伴生对象 ，class是object的 伴生类</span><br><span class="line">注意：伴生类和伴生对象必须存放在一个.scala文件之中</span><br><span class="line">伴生类和伴生对象最大特点在于可以互相访问private field</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> fdNum= <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFdNum</span> </span>= fdNum</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name: <span class="type">String</span>, val age: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span> </span>= println(<span class="string">"Hi, "</span> + name + <span class="string">",you are "</span> + age + <span class="string">" years old!"</span> +</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"tom"</span>,<span class="number">20</span>).sayHello</span><br><span class="line"><span class="type">Hi</span>, tom,you are <span class="number">20</span> years old!, and you have <span class="number">1</span> friend.</span><br><span class="line">scala&gt; <span class="type">Person</span>.fdNum</span><br><span class="line">&lt;console&gt;:<span class="number">9</span>: error: value fdNum is not a member of <span class="class"><span class="keyword">object</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">Person</span>.<span class="title">fdNum</span></span></span><br><span class="line"><span class="class"><span class="title">^</span></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">Person</span>.<span class="title">getFdNum</span></span></span><br><span class="line"><span class="class"><span class="title">res26</span></span>: <span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply是object中非常重要的一个特殊方法，通常在伴生对象中实现apply方法，并在其中实现构造伴生类</span><br><span class="line">对象的功能</span><br><span class="line">在创建对象的时候，就不需要使用new Class的方式，而是使用Class()的方式，隐式调用伴生对象的apply方法，这样会让对象创建更加简洁</span><br><span class="line">例如：Array的伴生对象的apply方法就实现了接收可变数量的参数，以及会创建一个Array对象</span><br><span class="line">val a &#x3D; Array(1, 2, 3, 4, 5)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从Array object的源码中可以看出来，它里面就是在apply方法内部使用new Array创建的对象</span><br><span class="line">下面我们来自己定义一个伴生类和伴生对象</span><br><span class="line">class Person(val name: String)&#123;</span><br><span class="line">println(&quot;my name is,&quot;+name)</span><br><span class="line">&#125;</span><br><span class="line">object Person &#123;</span><br><span class="line">def apply(name: String) &#x3D; &#123;</span><br><span class="line">println(&quot;apply exec...&quot;)</span><br><span class="line">new Person(name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; new Person(&quot;tom&quot;)</span><br><span class="line">my name is,tom</span><br><span class="line">res29: Person &#x3D; Person@63917fe1</span><br><span class="line">scala&gt; Person(&quot;tom&quot;)</span><br><span class="line">apply exec...</span><br><span class="line">my name is,tom</span><br><span class="line">res30: Person &#x3D; Person@35e74e08</span><br><span class="line"></span><br><span class="line">注意：在这里new Person(“zhang”) 等于 Person(“zhang”)，都是获取Person的对象</span><br><span class="line">只不过Person(“zhang”)是用的object中apply方法</span><br><span class="line">而new Person(“zhang”)是直接基于class创建的</span><br></pre></td></tr></table></figure>

<h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来看一下scala中的main方法</span><br><span class="line">和Java一样，在Scala中如果要运行一个应用程序，必须有一个main方法，作为入口</span><br><span class="line">Scala中的main方法必须定义在object中，格式为 def main(args: Array[String])</span><br><span class="line">这就需要在编辑器中操作了，我们可以使用eclipse或者idea，但是eclipse对scala的支持不太好，所以建议使用idea</span><br><span class="line">首先确认一下idea中是否集成了scala语言插件</span><br><span class="line">打开idea，点击 configure--&gt;plugins</span><br><span class="line"></span><br><span class="line">确认scala的插件是否已经安装</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接着创建maven项目</span><br><span class="line"></span><br><span class="line">到这还没完，因为此时我们是无法创建scala代码的，这个项目中也没有集成scala的sdk，只有java的</span><br><span class="line">接下来就需要给这个项目添加scala的sdk了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以后再创建想要创建scala的maven项目，只需要进入到这个界面确认项目中是否有scala的依赖，没有的话直接点击右边的加号按钮添加即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">好，idea的scala开发环境配置好了，但是我一般还是喜欢再增加一些配置</span><br><span class="line">目前项目的src目录下有一个java目录，这个目录表示是放java代码的，当然了你在里面写scala代码肯定</span><br><span class="line">是没有问题的。</span><br><span class="line">只是针对我这种稍微有点强迫症的用起来就有点别扭了</span><br><span class="line">在实际工作中可能我们一个项目既需要使用到java代码，也需要使用到scala代码，所以最好还是建议把</span><br><span class="line">java代码和scala代码分开存放，这样比较清晰</span><br><span class="line">所以我们需要在这里比葫芦画瓢，增加一个scala目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是注意了，这样创建的scala目录是有问题的，你有没有发现这个目录的颜色和java目录的颜色都不一样</span><br><span class="line">因为你在这直接创建的scala目录是一个普通的目录，而java那个目录是一个source根目录</span><br><span class="line">所以我们也需要把scala目录变为source根目录</span><br></pre></td></tr></table></figure>



<h3 id="接口-trait"><a href="#接口-trait" class="headerlink" title="接口-trait"></a>接口-trait</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来看一个scala中的接口，这个接口也是比较特殊的</span><br><span class="line">Scala中的接口称为trait，trait类似于Java中的interface</span><br><span class="line">在triat中可以定义抽象方法</span><br><span class="line">类可以使用 extends 关键字继承trait，无论继承类还是trait统一都是使用 extends 这个关键字</span><br><span class="line">类继承trait后，必须实现trait中的抽象方法，实现时不需要使用 override 关键字</span><br><span class="line">scala不支持对类进行多继承，但是支持对trait进行多重继承，使用 with 关键字即可</span><br><span class="line">下面我们就来看一个接口多继承的案例</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by xuwei</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"><span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"tom"</span>)</span><br><span class="line"><span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"jack"</span>)</span><br><span class="line">p1.sayHello(p2.name)</span><br><span class="line">p1.makeFriends(p2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HelloTrait</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(name: <span class="type">String</span>)&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MakeFriendsTrait</span> </span>&#123; <span class="function"><span class="keyword">def</span> <span class="title">makeFriends</span></span>(p: <span class="type">Person</span>)&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">HelloTrait</span> <span class="keyword">with</span> <span class="title">MakeFriendsTrait</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span></span>(name: <span class="type">String</span>) = println(<span class="string">"Hello, "</span> + name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeFriends</span></span>(p: <span class="type">Person</span>) = println(<span class="string">"Hello, my name is "</span> + name + <span class="string">", your name is"</span>+p.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第九周 第2章 Scala基础语法</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B9%9D%E5%91%A8-%E7%AC%AC2%E7%AB%A0-Scala%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第九周-第2章-Scala基础语法"><a href="#第九周-第2章-Scala基础语法" class="headerlink" title="第九周 第2章 Scala基础语法"></a>第九周 第2章 Scala基础语法</h1><h2 id="Scala的基本使用"><a href="#Scala的基本使用" class="headerlink" title="Scala的基本使用"></a>Scala的基本使用</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cala中的变量分为两种：可变 var 和 不可变 val</span><br><span class="line">可变var：可以随时修改var声明的变量的值</span><br><span class="line">不可变val：val声明的变量，值不能被修改，否则会报错： error: reassignment to val</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; 1</span><br><span class="line">a: Int &#x3D; 1</span><br><span class="line">scala&gt; a &#x3D; 2</span><br><span class="line">a: Int &#x3D; 2</span><br><span class="line">scala&gt; val b &#x3D; 1</span><br><span class="line">b: Int &#x3D; 1</span><br><span class="line">scala&gt; b &#x3D; 2</span><br><span class="line">&lt;console&gt;:8: error: reassignment to val</span><br><span class="line">b &#x3D; 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：在实际工作中，针对一些不需要改变值的变量，通常建议使用val，这样可以不用担心值被错误的修改(等于java中的final类型)。这样可以提高系统的稳定性和健壮性！</span><br><span class="line"></span><br><span class="line">无论声明val变量，还是声明var变量，都可以手动指定变量的类型</span><br><span class="line">如果不指定，Scala会自动根据值，进行类型推断</span><br><span class="line">val c &#x3D; 1 等价于 val c: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; val c &#x3D; 1</span><br><span class="line">c: Int &#x3D; 1</span><br><span class="line">scala&gt; val c: Int &#x3D; 1</span><br><span class="line">c: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中的数据类型可以分为两种，基本数据类型和增强版数据类型</span><br><span class="line">基本数据类型有： Byte、Char、Short、Int、Long、Float、Double、Boolean</span><br><span class="line">增强版数据类型有： StringOps、RichInt、RichDouble、RichChar 等</span><br><span class="line">scala使用这些增强版数据类给基本数据类型增加了上百种增强的功能</span><br><span class="line">例如：RichInt提供的有一个to函数， 1.to(10) ，此处Int会先隐式转换为RichInt，然后再调用其to函数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; 1.to(10)</span><br><span class="line">res2: scala.collection.immutable.Range.Inclusive &#x3D; Range(1, 2, 3, 4, 5, 6, 7,</span><br><span class="line"></span><br><span class="line">注意，to函数还可以这样写</span><br><span class="line">scala&gt; 1 to 10</span><br><span class="line">res3: scala.collection.immutable.Range.Inclusive &#x3D; Range(1, 2, 3, 4, 5, 6, 7,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用基本数据类型，直接就可以调用RichInt中对应的函数</span><br><span class="line">scala&gt; 1.toString() &#x2F;&#x2F;空号也可以不用</span><br><span class="line">res4: String &#x3D; 1</span><br></pre></td></tr></table></figure>

<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala的算术操作符与Java的算术操作符没有什么区别</span><br><span class="line">比如 +、-、*、&#x2F;、% 等，以及 &amp;、|、^、&gt;&gt;、&lt;&lt; 等</span><br><span class="line">注意：Scala中没有提供++、–操作符</span><br><span class="line">我们只能使用+和-，比如count &#x3D; 1，count++是错误的，必须写做count +&#x3D; 1</span><br></pre></td></tr></table></figure>

<h3 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Scala中，if表达式是有返回值的，就是if或者else中最后一行语句返回的值，这一点和java中的if是不一样的，java中的if表达式是没有返回值的</span><br><span class="line"></span><br><span class="line">scala&gt; val age &#x3D; 20</span><br><span class="line">age: Int &#x3D; 20</span><br><span class="line">scala&gt; if(age &gt; 18) 1 else 0</span><br><span class="line">res9: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这因为if表达式是有返回值的，所以可以将if表达式赋予一个变量</span><br><span class="line"></span><br><span class="line">scala&gt; val res &#x3D; if(age &gt; 18) 1 else 0</span><br><span class="line">res: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于if表达式是有值的，而if和else子句的值的类型可能还不一样，此时if表达式的值是什么类型呢？</span><br><span class="line">注意：Scala会自动进行推断，取两个类型的公共父类型</span><br><span class="line"></span><br><span class="line">例如，if(age &gt; 18) 1 else 0，表达式的类型是Int，因为1和0都是Int</span><br><span class="line">例如，if(age &gt; 18) “old” else 0，此时if和else的值分别是String和Int，则表达式的值是Any类型，Any是</span><br><span class="line">String和Int的公共父类型</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; if(age &gt; 18) 1 else 0</span><br><span class="line">res12: Int &#x3D; 1</span><br><span class="line">scala&gt; if(age &gt; 18) &quot;old&quot; else 0</span><br><span class="line">res13: Any &#x3D; old</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果if后面没有跟else，则默认else的值是Unit，也可以用()表示，类似于java中的void或者null</span><br><span class="line">例如，val age &#x3D; 12; if(age &gt; 18) “old”。此时就相当于if(age &gt; 18) “old” else ()。</span><br><span class="line">此时表达式的值是Any</span><br><span class="line"></span><br><span class="line">scala&gt; if(age &gt; 18) &quot;old&quot; else ()</span><br><span class="line">res17: Any &#x3D; ()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果想在scala REPL中执行多行代码，该如何操作？</span><br><span class="line">使用 :paste 和 ctrl+D 的方式</span><br><span class="line">:paste 表示代码块的开始</span><br><span class="line">ctrl+D 表示代码块的结束</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">val age &#x3D; 20</span><br><span class="line">if(age &gt; 18)</span><br><span class="line">1</span><br><span class="line">else</span><br><span class="line">0</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">age: Int &#x3D; 20</span><br><span class="line">res18: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<h3 id="语句终结符"><a href="#语句终结符" class="headerlink" title="语句终结符"></a>语句终结符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala默认不需要语句终结符，它将每一行作为一个语句</span><br><span class="line">如果一行要放多条语句，则前面的语句必须使用语句终结符</span><br><span class="line">语句终结符和Java中的一样，就是我们平时使用的分号</span><br><span class="line"></span><br><span class="line">scala&gt; val age &#x3D; 20; if(age &gt; 18) 1 else 0</span><br><span class="line">age: Int &#x3D; 20</span><br><span class="line">res0: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="print和println"><a href="#print和println" class="headerlink" title="print和println"></a>print和println</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在讲循环之前，先来看一下打印命令print和println</span><br><span class="line">print打印时不会加换行符，而println打印时会加一个换行符，这个特性和Java中的打印语句的特性是一样的</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for循环本身的特性就没什么好说的了，直接上案例，主要注意一下scala中的for和java中的for在语法层面的区别</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">val n &#x3D; 10</span><br><span class="line">for(i &lt;- 1 to n) &#x2F;&#x2F;1.to(n) 一样的</span><br><span class="line">println(i)</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">n: Int &#x3D; 10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面的to可以换成until</span><br><span class="line"></span><br><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">val n &#x3D; 10</span><br><span class="line">for(i &lt;- 1 until 10)</span><br><span class="line">println(i)</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br><span class="line">n: Int &#x3D; 10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对比两次执行的结果发现</span><br><span class="line">1 to 10 可以获取1~10之间的所有数字</span><br><span class="line">1 until 10可以获取1~9之间的所有数字</span><br><span class="line"></span><br><span class="line">所以在这需要注意了，to 和 until 其实都是函数，一个是闭区间，一个是开区间</span><br><span class="line">具体用哪个就要看你的需求了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for循环针对字符串还可以用</span><br><span class="line">scala&gt; for(c &lt;- &quot;hello scala&quot;) println(c)</span><br><span class="line">h </span><br><span class="line">e </span><br><span class="line">l </span><br><span class="line">l </span><br><span class="line">o </span><br><span class="line">s </span><br><span class="line">c </span><br><span class="line">a </span><br><span class="line">l</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：在这里我在for循环后面没有使用花括号，都省略了，主要是因为for循环的循环体代码就只有一行，如果有多行，就需要使用花括号了，否则，最终执行的结果就不是我们想要的</span><br><span class="line"></span><br><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">for(i &lt;- 1 to 5)</span><br><span class="line">println(i)</span><br><span class="line">println(&quot;hehe&quot;)</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5</span><br><span class="line">hehe</span><br></pre></td></tr></table></figure>

<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while循环，它的用法和java中的while也是很像的，主要看一下语法层面的区别</span><br><span class="line"></span><br><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">var n &#x3D; 10</span><br><span class="line">while(n&gt;0)&#123;</span><br><span class="line">println(n)</span><br><span class="line">n -&#x3D; 1</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">10</span><br><span class="line">9 </span><br><span class="line">8 </span><br><span class="line">7 </span><br><span class="line">6 </span><br><span class="line">5 </span><br><span class="line">4 </span><br><span class="line">3 </span><br><span class="line">2 </span><br><span class="line">1</span><br><span class="line">n: Int &#x3D; 0</span><br></pre></td></tr></table></figure>

<h4 id="高级for循环"><a href="#高级for循环" class="headerlink" title="高级for循环"></a>高级for循环</h4><h5 id="if守卫模式"><a href="#if守卫模式" class="headerlink" title="if守卫模式"></a>if守卫模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后来看一下高级for循环的用法</span><br><span class="line">if守卫</span><br><span class="line">if守卫模式，假设我们想要获取1~10之间的所有偶数，使用普通的for循环，需要把每一个数字都循环出来，然后判断是否是偶数</span><br><span class="line">如果在for循环里面使用if守卫，可以在循环的时候就执行一定的逻辑，判断数值是否是偶数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for(i &lt;- 1 to 10 if i % 2 &#x3D;&#x3D; 0) println(i)</span><br><span class="line">2 </span><br><span class="line">4 </span><br><span class="line">6 </span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h5 id="for推导式"><a href="#for推导式" class="headerlink" title="for推导式"></a>for推导式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for推导式，一个典型例子是构造集合</span><br><span class="line"></span><br><span class="line">我们在使用for循环迭代数字的时候，可以使用yield指定一个规则，对迭代出来的数字进行处理，并且创建一个新的集合</span><br><span class="line"></span><br><span class="line">scala&gt; for(i &lt;- 1 to 10) yield i *2</span><br><span class="line">res16: scala.collection.immutable.IndexedSeq[Int] &#x3D; Vector(2, 4, 6, 8, 10, 12</span><br></pre></td></tr></table></figure>

<h3 id="Scala的集合体系"><a href="#Scala的集合体系" class="headerlink" title="Scala的集合体系"></a>Scala的集合体系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来整体学习一下Scala中的集合体系，集合在工作中属于经常使用的数据结构</span><br></pre></td></tr></table></figure>

<h4 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先看一下整个集合体系结构，这个结构与Java的集合体系非常相似</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bKJxIg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/28/bKJxIg.md.png" alt="bKJxIg.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">集合的顶层接口是Iterable，Iterable接口下面还有一些子接口， Set、Seq、Map</span><br><span class="line">这几个子接口下面有具体的实现类</span><br><span class="line">set下面有HashSet、LinkedHashSet、SortedSet等等</span><br><span class="line">seq下面有List、Buffer、Range等等</span><br><span class="line">Map下面有HashMap、SortedMap、LinkedHashMap等等</span><br><span class="line">其中Buffer下面还有两个常用的，ArrayBuffer、ListBuffer</span><br><span class="line">这是集合中一些常见的实现类</span><br><span class="line">在讲这个集合体系的时候，还会关联讲到 Array和Tuple 这两个数据结构</span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中的集合是分成可变和不可变两类集合的</span><br><span class="line">其中可变集合就是说，集合的元素可以动态修改</span><br><span class="line">而不可变集合就是说，集合的元素在初始化之后，就无法修改了</span><br><span class="line">可变集合：在 scala.collection.mutable 这个包下面</span><br><span class="line">不可变集合：在 scala.collection.immutable 这个包下面</span><br><span class="line">我们在创建集合的时候，如果不指定具体的包名，默认会使用不可变集合</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先来看一下Set，Set代表一个没有重复元素的集合</span><br><span class="line">这个集合的特性和Java中Set集合的特性基本一样</span><br><span class="line">Set集合分为可变的和不可变的集合，默认情况下使用的是不可变集合</span><br><span class="line">Set可以直接使用，并且不需要使用new关键字，来看一下</span><br><span class="line"></span><br><span class="line">scala&gt; val s &#x3D; Set(1,2,3)</span><br><span class="line">s: scala.collection.immutable.Set[Int] &#x3D; Set(1, 2, 3)</span><br></pre></td></tr></table></figure>

<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><h6 id="不可变set"><a href="#不可变set" class="headerlink" title="不可变set"></a>不可变set</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是不是很奇怪，本来Set是一个接口，但是却可以创建对象，更神奇的是竟然还不需要使用new关键</span><br><span class="line">字，这就有点颠覆我们的认知了</span><br><span class="line">注意了，大家在学习Scala的时候，可以拿Java来进行对比，加深理解，但是不要全部拿Java里面的知识点来硬套，因为它们两个有些地方还是不一样的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">来看一下Scala的文档，你会发现这个Set不仅仅是一个接口，它还是一个Object，具体这个Object类型我</span><br><span class="line">们在后面会详细分析，在这大家先知道这个东西就行了。</span><br><span class="line"></span><br><span class="line">注意：本来是应该看对应版本2.12.11的文档的，但是2.12.11文档的格式看起来不是很清晰，所以在这我们就是要2.11.12这个版本了，主要的是没有什么变化的，不影响我们使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这大家可以这样理解，只要前面带有object的，可以直接创建对象，并且不需要使用new关键字</span><br><span class="line">所以set可以直接使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：默认情况下直接创建的set集合是一个不可变集合，在这可以看到是在immutable包里面的，不可变集合中的元素一经初始化，就不能改变了，所以初始化后再向里面添加元素就报错了</span><br><span class="line"></span><br><span class="line">scala&gt; val s &#x3D; Set(1,2,3)</span><br><span class="line">s: scala.collection.immutable.Set[Int] &#x3D; Set(1, 2, 3)</span><br><span class="line">scala&gt; s +&#x3D; 4</span><br><span class="line">&lt;console&gt;:9: error: value +&#x3D; is not a member of scala.collection.immutable.Set</span><br><span class="line">s +&#x3D; 4</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是注意，我使用s + 4 这种操作是可以的</span><br><span class="line">scala&gt; val s &#x3D; Set(1,2,3)</span><br><span class="line">s: scala.collection.immutable.Set[Int] &#x3D; Set(1, 2, 3)</span><br><span class="line">scala&gt; s + 4</span><br><span class="line">res33: scala.collection.immutable.Set[Int] &#x3D; Set(1, 2, 3, 4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样是不是和我们刚才说的自相矛盾？</span><br><span class="line">不是的，因为 s + 4 返回的是一个新的集合了，相当于在之前的集合的基础上，创建一个新的集合，新的集合包含之前集合的元素和我们新增的4这个元素</span><br><span class="line">这个大家需要能够区分开</span><br></pre></td></tr></table></figure>

<h6 id="可变set"><a href="#可变set" class="headerlink" title="可变set"></a>可变set</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果想要创建一个可变的set集合，可以使用mutable包下面的set集合，显式指定包名</span><br><span class="line"></span><br><span class="line">scala&gt; val s &#x3D; scala.collection.mutable.Set(1,2,3)</span><br><span class="line">s: scala.collection.mutable.Set[Int] &#x3D; Set(1, 2, 3)</span><br><span class="line">scala&gt; s +&#x3D; 4</span><br><span class="line">res34: s.type &#x3D; Set(1, 2, 3, 4)</span><br><span class="line"> 12345</span><br></pre></td></tr></table></figure>

<h6 id="子类HashSet"><a href="#子类HashSet" class="headerlink" title="子类HashSet"></a>子类HashSet</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashSet：这个集合的特点是：集合中的元素不重复、无序</span><br><span class="line"></span><br><span class="line">HashSet集合分为可变和不可变之分， immutable 包下面的是不可变的，后期无法新增元素</span><br><span class="line">在这里可以使用new关键字，也可以不使用，因为HashSet既是class，又是object，但是包名需要指定，否则无法识别</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val s &#x3D; new scala.collection.mutable.HashSet[Int]()</span><br><span class="line">s: scala.collection.mutable.HashSet[Int] &#x3D; Set()</span><br><span class="line">scala&gt; s +&#x3D;1</span><br><span class="line">res35: s.type &#x3D; Set(1)</span><br><span class="line">scala&gt; s +&#x3D;2</span><br><span class="line">res36: s.type &#x3D; Set(1, 2)</span><br><span class="line">scala&gt; s +&#x3D;5 &#x2F;&#x2F;＋&#x3D;是一个方法，s.+&#x3D;(5)一样</span><br><span class="line">res38: s.type &#x3D; Set(1, 5, 2)</span><br><span class="line"></span><br><span class="line">如果在创建集合的时候就初始化了元素，则可以省略泛型的定义，集合会自动识别元素的类型</span><br></pre></td></tr></table></figure>

<h6 id="子类LinkedHashSet"><a href="#子类LinkedHashSet" class="headerlink" title="子类LinkedHashSet"></a>子类LinkedHashSet</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinkedHashSet：这个集合的特点是：集合中的元素不重复、有序，它会用一个链表维护插入顺序，可以保证集合中元素是有序的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinkedHashSet只有可变的，没有不可变的</span><br><span class="line"></span><br><span class="line">scala&gt; val s &#x3D; new scala.collection.mutable.LinkedHashSet[Int]()</span><br><span class="line">s: scala.collection.mutable.LinkedHashSet[Int] &#x3D; Set()</span><br><span class="line">scala&gt; s +&#x3D;1</span><br><span class="line">res42: s.type &#x3D; Set(1)</span><br><span class="line">scala&gt; s +&#x3D;2</span><br><span class="line">res43: s.type &#x3D; Set(1, 2)</span><br><span class="line">scala&gt; s +&#x3D;5</span><br><span class="line">res44: s.type &#x3D; Set(1, 2, 5)</span><br></pre></td></tr></table></figure>

<h6 id="子类SortedSet"><a href="#子类SortedSet" class="headerlink" title="子类SortedSet"></a>子类SortedSet</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SortedSet：这个集合的特点是：集合中的元素不重复、有序，它会自动根据元素来进行排序</span><br><span class="line"></span><br><span class="line">SortedSet分为可变集合和不可变集合</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bKDyTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/28/bKDyTI.md.png" alt="bKDyTI.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面的那两个SortedSet是上面collection.SortedSet接口的子接口，一般会使用下面那两个。</span><br><span class="line"></span><br><span class="line">scala&gt; val s &#x3D; scala.collection.mutable.SortedSet[String]()</span><br><span class="line">s: scala.collection.mutable.SortedSet[String] &#x3D; TreeSet()</span><br><span class="line">scala&gt; s +&#x3D;(&quot;c&quot;)</span><br><span class="line">res45: s.type &#x3D; TreeSet(c)</span><br><span class="line">scala&gt; s +&#x3D;(&quot;a&quot;)</span><br><span class="line">res46: s.type &#x3D; TreeSet(a, c)</span><br><span class="line">scala&gt; s +&#x3D;(&quot;b&quot;)</span><br><span class="line">res47: s.type &#x3D; TreeSet(a, b, c)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从这可以看出来SortedSet集合中的元素是按照元素的字典顺序排序的</span><br><span class="line">针对里面这些Set集合，如果想要迭代他们里面的元素，可以使用for循环直接迭代</span><br><span class="line">以SortedSet为例，其它的 Set、HashSet、LinkedHashSet 都是一样的</span><br><span class="line"></span><br><span class="line">scala&gt; for(i &lt;- s ) println(i)</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure>

<h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来看一下List，List属于Seq接口的子接口</span><br><span class="line">List代表一个不可变的列表</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个list</span><br><span class="line">scala&gt; val l &#x3D; List(1, 2, 3, 4)</span><br><span class="line">l: List[Int] &#x3D; List(1, 2, 3, 4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：为什么有的地方需要写类的全路径，而有的不需要呢？</span><br><span class="line">由于immutable包是默认导入的，所以不需要导包，但是也会有个别虽然在immutable包下面的，但是不写全路径还是报错，原谅它把，反正你都带全路径肯定是没有问题的，后期我们会使用idea来开发，也不需要考虑包名的问题，不过在这为了演示起来更加清晰，就使用scala的命令行了</span><br></pre></td></tr></table></figure>

<h6 id="head和tail"><a href="#head和tail" class="headerlink" title="head和tail"></a>head和tail</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对List有 head 、 tail 以及 :: 这几个操作</span><br><span class="line">先演示一下 head、tail 操作</span><br><span class="line"></span><br><span class="line">scala&gt; l.head</span><br><span class="line">res49: Int &#x3D; 1</span><br><span class="line">scala&gt; l.tail</span><br><span class="line">res51: List[Int] &#x3D; List(2, 3, 4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head：表示获取List中的第一个元素</span><br><span class="line">tail：表示获取List中第一个元素之后的所有元素</span><br><span class="line">那其实head和tail就可以获取list中的所有元素了</span><br></pre></td></tr></table></figure>

<h6 id><a href="#" class="headerlink" title=": :"></a>: :</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过 :: 操作符，可以将head和tail的结果合并成一个List</span><br><span class="line"></span><br><span class="line">scala&gt; l.head :: l.tail</span><br><span class="line">res52: List[Int] &#x3D; List(1, 2, 3, 4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:: 这种操作符要清楚，在spark源码中是有体现的，一定要能够看懂</span><br><span class="line"></span><br><span class="line">针对List中的元素进行迭代和前面讲的Set集合的迭代是一样的</span><br></pre></td></tr></table></figure>

<h5 id="ListBuffer"><a href="#ListBuffer" class="headerlink" title="ListBuffer"></a>ListBuffer</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里List是不可变的列表，在实际工作中使用的时候会很不方便，因为我们很多场景下都是需要向列表中动态添加元素，这个时候该怎么办呢？</span><br><span class="line">Scala还提供的有一个ListBuffer</span><br><span class="line">ListBuffer：可以支持动态增加或者移除元素</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val lb &#x3D; scala.collection.mutable.ListBuffer[Int]()</span><br><span class="line">lb: scala.collection.mutable.ListBuffer[Int] &#x3D; ListBuffer()</span><br><span class="line">scala&gt; lb +&#x3D;1</span><br><span class="line">res56: lb.type &#x3D; ListBuffer(1)</span><br><span class="line">scala&gt; lb +&#x3D;2</span><br><span class="line">res57: lb.type &#x3D; ListBuffer(1, 2)</span><br><span class="line">scala&gt; lb +&#x3D;5</span><br><span class="line">res58: lb.type &#x3D; ListBuffer(1, 2, 5)</span><br><span class="line">scala&gt; lb -&#x3D;5</span><br><span class="line">res59: lb.type &#x3D; ListBuffer(1, 2)</span><br><span class="line"></span><br><span class="line">ListBuffer也可以直接使用for循环迭代</span><br></pre></td></tr></table></figure>

<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map是一种可迭代的键值对（key&#x2F;value）结构</span><br><span class="line">Map分为可变和不可变，默认情况下使用的是不可变Map</span><br></pre></td></tr></table></figure>

<h6 id="不可变Map"><a href="#不可变Map" class="headerlink" title="不可变Map"></a>不可变Map</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个不可变的Map</span><br><span class="line">创建一个可变的Map</span><br><span class="line">还有一种创建Map的简易方式，这种方式创建的是不可变Map</span><br><span class="line">查询操作</span><br><span class="line">获取指定key对应的value，如果key不存在，会报错</span><br><span class="line">所以在实际工作中这样直接获取不太好，如果遇到了不存在的key程序会报错，导致程序异常退出。</span><br><span class="line">那是不是可以考虑在获取key的值之前，先判断key是否存在</span><br><span class="line">可以使用contains函数检查key是否存在、</span><br><span class="line">使用if-else语句，如果指定的key不存在，则返回一个默认值</span><br><span class="line">这样是没问题的，就是写起来有点麻烦了，有没有方便一点的用法呢？</span><br><span class="line">map中还有一个getOrElse函数</span><br><span class="line">scala&gt; val ages &#x3D; Map(&quot;jack&quot;-&gt;30,&quot;tom&quot;-&gt;25,&quot;jessic&quot;-&gt;23)</span><br><span class="line">ages: scala.collection.immutable.Map[String,Int] &#x3D; Map(jack -&gt; 30, tom -&gt; 25,</span><br><span class="line">scala&gt; ages(&quot;jack&quot;)</span><br><span class="line">res100: Int &#x3D; 30</span><br></pre></td></tr></table></figure>



<h6 id="可变Map"><a href="#可变Map" class="headerlink" title="可变Map"></a>可变Map</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val ages &#x3D; scala.collection.mutable.Map(&quot;jack&quot;-&gt;30,&quot;tom&quot;-&gt;25,&quot;jessic&quot;-</span><br><span class="line">ages: scala.collection.mutable.Map[String,Int] &#x3D; Map(jessic -&gt; 23, jack -&gt; 30</span><br><span class="line">scala&gt; ages(&quot;jack&quot;)</span><br><span class="line">res101: Int &#x3D; 30</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有一种创建Map的简易方式，这种方式创建的是不可变Map</span><br><span class="line"></span><br><span class="line">scala&gt; val ages &#x3D; Map((&quot;jack&quot;,30),(&quot;tom&quot;,25),(&quot;jessic&quot;-&gt;23))</span><br><span class="line">ages: scala.collection.immutable.Map[String,Int] &#x3D; Map(jack -&gt; 30, tom -&gt; 25,</span><br></pre></td></tr></table></figure>

<h6 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.获取指定key对应的value，如果key不存在，会报错</span><br><span class="line"></span><br><span class="line">scala&gt; val ages &#x3D; scala.collection.mutable.Map((&quot;jack&quot;,30),(&quot;tom&quot;,25),(&quot;jessi</span><br><span class="line">ages: scala.collection.mutable.Map[String,Int] &#x3D; Map(jessic -&gt; 23, jack -&gt; 30</span><br><span class="line">scala&gt; val age &#x3D; ages(&quot;jack&quot;)</span><br><span class="line">age: Int &#x3D; 30</span><br><span class="line">scala&gt; val age &#x3D; ages(&quot;jack1&quot;)</span><br><span class="line">java.util.NoSuchElementException: key not found: jack</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以在实际工作中这样直接获取不太好，如果遇到了不存在的key程序会报错，导致程序异常退出。</span><br><span class="line">那是不是可以考虑在获取key的值之前，先判断key是否存在</span><br><span class="line">可以使用contains函数检查key是否存在、</span><br><span class="line">使用if-else语句，如果指定的key不存在，则返回一个默认值</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">scala&gt; val age &#x3D; if (ages.contains(&quot;jack1&quot;)) ages(&quot;jack1&quot;) else 0</span><br><span class="line">age: Int &#x3D; 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样是没问题的，就是写起来有点麻烦了，有没有方便一点的用法呢？</span><br><span class="line">map中还有一个getOrElse函数</span><br><span class="line">3.</span><br><span class="line">scala&gt; val age &#x3D; ages.getOrElse(&quot;jack1&quot;, 0)</span><br><span class="line">age: Int &#x3D; 0</span><br><span class="line"></span><br><span class="line">建议后期从map中获取数据都使用这个 getOrElse 函数</span><br></pre></td></tr></table></figure>

<h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.更新map中的元素(首先确保创建时使用的是mutable)</span><br><span class="line">scala&gt; ages(&quot;jack&quot;) &#x3D; 31</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.增加多个元素</span><br><span class="line">scala&gt; ages +&#x3D; (&quot;hehe&quot; -&gt; 35, &quot;haha&quot; -&gt; 40)</span><br><span class="line">res105: ages.type &#x3D; Map(hehe -&gt; 35, jessic -&gt; 23, jack -&gt; 31, tom -&gt; 25, haha</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.移除元素</span><br><span class="line">scala&gt; ages -&#x3D; &quot;hehe&quot;</span><br><span class="line">res106: ages.type &#x3D; Map(jessic -&gt; 23, jack -&gt; 31, tom -&gt; 25, haha -&gt; 40)</span><br></pre></td></tr></table></figure>

<h6 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.遍历map的entrySet</span><br><span class="line">scala&gt; for ((key, value) &lt;- ages) println(key + &quot; &quot; + value)</span><br><span class="line">jessic 23</span><br><span class="line">jack 31</span><br><span class="line">tom 25</span><br><span class="line">haha 40</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.遍历map的key</span><br><span class="line">scala&gt; for (key &lt;- ages.keySet) println(key)</span><br><span class="line">jessic</span><br><span class="line">jack</span><br><span class="line">tom</span><br><span class="line">haha</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.遍历map的value</span><br><span class="line">scala&gt; for (value &lt;- ages.values) println(value)</span><br><span class="line">23</span><br><span class="line">31</span><br><span class="line">25</span><br><span class="line">40</span><br></pre></td></tr></table></figure>

<h6 id="子类HashMap"><a href="#子类HashMap" class="headerlink" title="子类HashMap"></a>子类HashMap</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashMap：是一个按照key的hash值进行排列存储的map</span><br></pre></td></tr></table></figure>



<h6 id="子类SortedMap"><a href="#子类SortedMap" class="headerlink" title="子类SortedMap"></a>子类SortedMap</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SortedMap：可以自动对Map中的key进行排序【有序的map】</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashMap分为可变和不可变的，没有什么特殊之处</span><br><span class="line">在这主要演示一下SortedMap和LinkedHashMap</span><br><span class="line">SortedMap是不可变的</span><br><span class="line"></span><br><span class="line">scala&gt; val ages &#x3D; scala.collection.immutable.SortedMap(&quot;b&quot; -&gt; 30, &quot;a&quot; -&gt; 15,</span><br><span class="line">ages: scala.collection.immutable.SortedMap[String,Int] &#x3D; Map(a -&gt; 15, b -&gt; 30</span><br></pre></td></tr></table></figure>

<h6 id="子类LinkedHashMap"><a href="#子类LinkedHashMap" class="headerlink" title="子类LinkedHashMap"></a>子类LinkedHashMap</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinkedHashMap：可以记住插入的key-value的顺序</span><br><span class="line"></span><br><span class="line">LinkedHashMap是可变的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val ages &#x3D; new scala.collection.mutable.LinkedHashMap[String, Int]()</span><br><span class="line">ages: scala.collection.mutable.LinkedHashMap[String,Int] &#x3D; Map()</span><br><span class="line">scala&gt; ages(&quot;b&quot;)&#x3D;30</span><br><span class="line">scala&gt; ages(&quot;a&quot;)&#x3D;15</span><br><span class="line">scala&gt; ages(&quot;c&quot;)&#x3D;25</span><br><span class="line">scala&gt; ages</span><br><span class="line">res116: scala.collection.mutable.LinkedHashMap[String,Int] &#x3D; Map(b -&gt; 30, a</span><br></pre></td></tr></table></figure>

<h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中Array的含义与Java中的数组类似，长度不可变</span><br><span class="line">由于Scala和Java都是运行在JVM中，双方可以互相调用，因此Scala数组的底层实际上就是Java数组</span><br><span class="line">数组初始化后，长度就固定下来了，而且元素全部根据其类型进行初始化</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val a &#x3D; new Array[Int](10)</span><br><span class="line">a: Array[Int] &#x3D; Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)</span><br><span class="line">scala&gt; a(0)</span><br><span class="line">res65: Int &#x3D; 0</span><br><span class="line">scala&gt; a(0)&#x3D;1</span><br><span class="line">scala&gt; a(0)</span><br><span class="line">res67: Int &#x3D; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">也可以直接使用Array()创建数组，元素类型自动推断</span><br><span class="line">scala&gt; val a &#x3D; Array(&quot;hello&quot;, &quot;world&quot;)</span><br><span class="line">a: Array[String] &#x3D; Array(hello, world)</span><br><span class="line"></span><br><span class="line">scala&gt; a(0)</span><br><span class="line">res68: String &#x3D; hello</span><br><span class="line">scala&gt; val a1 &#x3D; Array(&quot;hello&quot;, 30)</span><br><span class="line">a1: Array[Any] &#x3D; Array(hello, 30)</span><br></pre></td></tr></table></figure>

<h5 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala中ArrayBuffer与Java中的ArrayList类似，长度可变</span><br><span class="line">ArrayBuffer：添加元素、移除元素</span><br><span class="line">如果不想每次都使用全限定名，则可以预先导入ArrayBuffer类</span><br><span class="line"></span><br><span class="line">scala&gt; import scala.collection.mutable.ArrayBuffer</span><br><span class="line">import scala.collection.mutable.ArrayBuffer</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用ArrayBuffer()的方式可以创建一个空的ArrayBuffer</span><br><span class="line">注意：也支持直接创建并且初始化ArrayBuffer(1,2,3,4)</span><br><span class="line"></span><br><span class="line">scala&gt; val b &#x3D; new ArrayBuffer[Int]()</span><br></pre></td></tr></table></figure>

<h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用+&#x3D;操作符，可以添加一个元素，或者多个元素</span><br><span class="line">b +&#x3D; 1 或者 b +&#x3D; (2, 3, 4, 5)</span><br><span class="line"></span><br><span class="line">2.使用insert()函数可以在指定位置插入元素，但是这种操作效率很低，因为需要移动指定位置后的所有元素 向3号角标的位置添加一个元素 30</span><br><span class="line">scala&gt; b.insert(3,30)</span><br></pre></td></tr></table></figure>

<h6 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用 remove() 函数可以移除指定位置的元素</span><br><span class="line">移除1号角标的元素</span><br><span class="line">scala&gt; b.remove(1)</span><br><span class="line">res73: Int &#x3D; 2</span><br></pre></td></tr></table></figure>

<h6 id="Array和ArrayBuffer转化"><a href="#Array和ArrayBuffer转化" class="headerlink" title="Array和ArrayBuffer转化"></a>Array和ArrayBuffer转化</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.toArray：ArrayBuffer转Array</span><br><span class="line">a.toBuffer：Array转ArrayBuffer</span><br></pre></td></tr></table></figure>

<h5 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面看一下针对数据的常见操作</span><br><span class="line">遍历Array和ArrayBuffer的两种方式</span><br><span class="line">由于Array和ArrayBuffer都是有角标的，所以在迭代数组中元素的时候除了可以使用前面迭代集合的方式还可以使用角标迭代</span><br></pre></td></tr></table></figure>

<h6 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.scala&gt; for(i &lt;- b) println(i)</span><br><span class="line">1 2 3 4 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.scala&gt; for(i &lt;- 0 until b.length ) println(b(i))</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure>

<h6 id="求和，最大值"><a href="#求和，最大值" class="headerlink" title="求和，最大值"></a>求和，最大值</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val sum &#x3D; a.sum</span><br><span class="line">sum: Int &#x3D; 15</span><br><span class="line">scala&gt; val max &#x3D; a.max</span><br><span class="line">max: Int &#x3D; 5</span><br></pre></td></tr></table></figure>

<h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; scala.util.Sorting.quickSort(a)</span><br></pre></td></tr></table></figure>

<h5 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tuple：称之为元组，它与Array类似，都是不可变的，但与数组不同的是元组可以包含不同类型的元素</span><br><span class="line">Tuple中的元素角标从 1 开始</span><br><span class="line"></span><br><span class="line">注意：目前 Scala 支持的元组最大长度为 22 ，对于更大长度可以使用集合或数组</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val t &#x3D; (1, 3.14, &quot;hehe&quot;)</span><br><span class="line">t: (Int, Double, String) &#x3D; (1,3.14,hehe)</span><br><span class="line">scala&gt; t._1</span><br><span class="line">res117: Int &#x3D; 1</span><br><span class="line">scala&gt; t._3</span><br><span class="line">res118: String &#x3D; hehe</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面讲了很多集合体系中的数据结构，有的是可变的，有的是不可变的，有的是既是可变的又是不可变的，听起来有点乱，在这里我们总结一下</span><br><span class="line">可变集合： LinkedHashSet、ListBuffer、ArrayBuffer、LinkedHashMap</span><br><span class="line">不可变集合： List、SortedMap</span><br><span class="line">可变+不可变集合： Set、HashSet、SortedSet、Map、HashMap</span><br><span class="line">还有两个编外人员：</span><br><span class="line">Array、Tuple</span><br><span class="line">Array：长度不可变，里面的元素可变</span><br><span class="line">Tuple：长度不可变，里面的元素也不可变</span><br></pre></td></tr></table></figure>



<h3 id="Scala中函数的使用"><a href="#Scala中函数的使用" class="headerlink" title="Scala中函数的使用"></a>Scala中函数的使用</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先来看一下函数的定义</span><br><span class="line">在Scala中定义函数需要使用 def 关键字，函数包括函数名、参数、函数体</span><br><span class="line">Scala要求必须给出函数所有参数的类型，但是函数返回值的类型不是必须的，因为Scala可以自己根据函数体中的表达式推断出返回值类型。</span><br><span class="line">函数中最后一行代码的返回值就是整个函数的返回值，不需要使用return，这一点与Java不同，java中函数的返回值是必须要使用return的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行函数</span><br><span class="line">scala&gt; def sayHello(name: String) &#x3D; print(&quot;Hello, &quot; + name)</span><br><span class="line">sayHello: (name: String)Unit</span><br><span class="line">scala&gt; sayHello(&quot;Scala&quot;)</span><br><span class="line">Hello, Scala</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行函数</span><br><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">def sayHello(name: String, age: Int) &#x3D; &#123;</span><br><span class="line">println(&quot;My name is &quot;+name+&quot;,age is &quot;+age)</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">sayHello: (name: String, age: Int)Int</span><br><span class="line">scala&gt; sayHello(&quot;Scala&quot;,18)</span><br><span class="line">My name is Scala,age is 18</span><br><span class="line">res120: Int &#x3D; 18</span><br></pre></td></tr></table></figure>

<h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Scala中，有时候我们调用某些函数时，不希望给出参数的具体值，而是希望使用参数自身默认的值，此时就需要在定义函数时使用默认参数。</span><br><span class="line">如果给出的参数不够，则会从左往右依次应用参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def sayHello(fName: String, mName: String &#x3D; &quot;mid&quot;, lName: String &#x3D; &quot;la</span><br><span class="line">sayHello: (fName: String, mName: String, lName: String)String</span><br><span class="line">scala&gt; sayHello(&quot;zhang&quot;,&quot;san&quot;)</span><br><span class="line">res122: String &#x3D; zhang san last</span><br></pre></td></tr></table></figure>

<h5 id="带名参数"><a href="#带名参数" class="headerlink" title="带名参数"></a>带名参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在调用函数时，也可以不按照函数定义的参数顺序来传递参数，而是使用带名参数的方式来传递。</span><br><span class="line">scala&gt; def sayHello(fName: String, mName: String &#x3D; &quot;mid&quot;, lName: String &#x3D; &quot;la</span><br><span class="line">sayHello: (fName: String, mName: String, lName: String)String</span><br><span class="line">scala&gt; sayHello(fName &#x3D; &quot;Mick&quot;, lName &#x3D; &quot;Tom&quot;, mName &#x3D; &quot;Jack&quot;)</span><br><span class="line">res127: String &#x3D; Mick Jack Tom</span><br></pre></td></tr></table></figure>

<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Scala中，有时我们需要将函数定义为参数个数可变的形式，则此时可以使用变长参数来定义函数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; :paste</span><br><span class="line">&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)</span><br><span class="line">def sum(nums: Int*) &#x3D; &#123;  &#x2F;&#x2F;Int的I要大写</span><br><span class="line">var res &#x3D; 0</span><br><span class="line">for (num &lt;- nums) res +&#x3D; num</span><br><span class="line">res</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Exiting paste mode, now interpreting.</span><br><span class="line">sum: (nums: Int*)Int</span><br><span class="line">scala&gt; sum(1,2,3,4,5)</span><br><span class="line">res129: Int &#x3D; 15</span><br></pre></td></tr></table></figure>

<h4 id="特殊的函数-过程"><a href="#特殊的函数-过程" class="headerlink" title="特殊的函数-过程"></a>特殊的函数-过程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Scala中，定义函数时，如果函数体直接在花括号里面而没有使用&#x3D;连接，则函数的返回值类型就是Unit，这样的函数称之为过程</span><br><span class="line">过程通常用于不需要返回值的函数</span><br><span class="line">过程还有一种写法，就是将函数的返回值类型显式定义为Unit</span><br><span class="line">比较一下这四种写法的区别</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有返回值</span><br><span class="line">def sayHello(name: String) &#x3D; &quot;Hello, &quot; + name</span><br><span class="line">def sayHello(name: String): String &#x3D; &quot;Hello, &quot; + name</span><br><span class="line"></span><br><span class="line">无返回值</span><br><span class="line">def sayHello(name: String) &#123; &quot;Hello, &quot; + name &#125;</span><br><span class="line">def sayHello(name: String): Unit &#x3D; &quot;Hello, &quot; + name</span><br><span class="line"></span><br><span class="line">前面两种写法的效果是一样的，都是函数</span><br><span class="line">后面两种写法的效果是一样的，都是过程</span><br></pre></td></tr></table></figure>

<h4 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala提供了lazy特性，如果将一个变量声明为lazy，则只有在第一次使用该变量时，变量对应的表达式才会发生计算</span><br><span class="line">什么场景下需要使用lazy特性呢？</span><br><span class="line">这种特性对于特别耗时的操作特别有用，比如打开文件这个操作。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; import scala.io.Source._</span><br><span class="line">import scala.io.Source._</span><br><span class="line">scala&gt; lazy val lines &#x3D; fromFile(&quot;D:&#x2F;&#x2F;test.txt&quot;).mkString</span><br><span class="line">lines: String &#x3D; &lt;lazy&gt;</span><br><span class="line"></span><br><span class="line">即使D:&#x2F;&#x2F;test.txt文件不存在，代码也不会报错，只有变量使用时才会报错，这就是lazy这个特性</span><br><span class="line">scala&gt; lines</span><br><span class="line">java.io.FileNotFoundException: D:\test.txt (系统找不到指定的文件。)</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<h4 id="用法积累"><a href="#用法积累" class="headerlink" title="用法积累"></a>用法积累</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.字符串不能用单引号代替双引号</span><br><span class="line">2.过程不用等号那种形式时，语句只能放在花括号里</span><br><span class="line">3.数据类型Int的I只能大写</span><br><span class="line">4.只能lazy val xxx；不能lazy var</span><br><span class="line">5</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第九周 第1章 Scala极速入门</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B9%9D%E5%91%A8-%E7%AC%AC1%E7%AB%A0-Scala%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第九周-第1章-Scala极速入门"><a href="#第九周-第1章-Scala极速入门" class="headerlink" title="第九周 第1章 Scala极速入门"></a>第九周 第1章 Scala极速入门</h1><h2 id="为什么要学习Scala语言"><a href="#为什么要学习Scala语言" class="headerlink" title="为什么要学习Scala语言"></a>为什么要学习Scala语言</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先我们来分析一下为什么要学习Scala语言</span><br><span class="line">最直接的一点就是因为我们后面要学的Spark框架需要用到Scala这门语言</span><br><span class="line">但是Spark其实是同时支持Scala语言和Java语言的，为什么非要学Scala呢，使用java它难道不香吗？</span><br><span class="line">这就要说第二点了：看下面的代码，使用Spark统计文件内单词出现的次数这个需求，使用java代码和scala代码的区别是有多么的明显，在代码量上来说，scala是完胜java的，所以在实际工作中开发spark代码，我们都是需要使用scala的，使用java实现函数式编程太别扭了，代码量太大，这个就是我们学习</span><br><span class="line">scala的最直接的原因</span><br></pre></td></tr></table></figure>

<h2 id="什么是Scala"><a href="#什么是Scala" class="headerlink" title="什么是Scala"></a>什么是Scala</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scala是一门多范式的编程语言，它是一种类似Java的编程语言，它设计的初衷是为了实现可伸缩的语言、并集成面向对象编程和函数式编程的各种特性</span><br><span class="line">Scala基于Java虚拟机，也就是基于JVM的一门编程语言。所有Scala代码，都需要编译为字节码，然后交由Java虚拟机来运行</span><br><span class="line">Scala和Java可以无缝相互操作，Scala可以任意调用Java代码，这个特性是非常好的</span><br></pre></td></tr></table></figure>

<h2 id="如何快速掌握Scala语言"><a href="#如何快速掌握Scala语言" class="headerlink" title="如何快速掌握Scala语言"></a>如何快速掌握Scala语言</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这先给大家打个预防针，虽然前面我们说了使用scala实现spark代码会很简洁，但是scala语言本身是</span><br><span class="line">很反人类的，特别是你熟悉了例如java之类的编程语言之后再来学scala，会感觉到既爱又恨</span><br><span class="line">那我们如何快速掌握Scala语言的使用呢？</span><br><span class="line">首先大家在学习的过程中需要对比分析Java和Scala在使用上的区别，这样可以加深我们的理解</span><br><span class="line">然后没事的时候可以尝试着用Scala代码改写你之前的Java代码</span><br><span class="line">最后的最后，交给大家一个绝招，一个终极方案，那就是多练！多练！多练。</span><br><span class="line">因为针对编程语言，其实就是需要掌握它的一些基本语法，大家都是有其它语言编程基础的，在这学习Scala语言，其实主要就是掌握这门语言和其它语言的一些不同之处，只要把这些东西捋顺了，那上手也是很容易的。</span><br></pre></td></tr></table></figure>



<h2 id="Scala环境安装配置"><a href="#Scala环境安装配置" class="headerlink" title="Scala环境安装配置"></a>Scala环境安装配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们就来具体学习使用一下Scala这门神奇的语言。</span><br><span class="line">在具体使用之前需要先安装scala的开发环境，就类似安装java环境一样</span><br><span class="line"></span><br><span class="line">注意：由于Scala是基于Java虚拟机的，所以使用 Scala 之前必须先安装 Java，Java我们已经安装过了。</span><br><span class="line">那在这里我们先到官网下载Scala安装包</span><br><span class="line">Scala现在有三个主要在使用的版本， 2.11，2.12，2.13</span><br><span class="line">目前的话2.12使用的比较多，所以我们就使用这个版本</span><br></pre></td></tr></table></figure>

<h2 id="Scala命令行"><a href="#Scala命令行" class="headerlink" title="Scala命令行"></a>Scala命令行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们刚才进入的就是Scala命令行</span><br><span class="line">Scala命令行也称为Scala解释器(REPL)，它会快速编译Scala代码为字节码，然后交给JVM来执行</span><br><span class="line">这里的REPL表示：Read（取值）-&gt; Evaluation（求值）-&gt; Print（打印）-&gt; Loop（循环）</span><br><span class="line">在Scala命令行内，输入Scala代码，解释器会直接返回结果</span><br><span class="line">如果你没有指定变量来存放计算的值，那么值默认的名称会显示为res开头的变量，而且会显示结果的数据类型</span><br><span class="line">scala&gt; 1+1</span><br><span class="line">res0: Int &#x3D; 2</span><br><span class="line">在后面可以继续使用res0这个变量，以及它里面存放的值</span><br><span class="line">scala&gt; 5 * res0</span><br><span class="line">res1: Int &#x3D; 10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala的命令行也有自动补全功能，使用起来还是比较方便的</span><br><span class="line">输入res，按键盘上的tab键，下面就会列出目前以res开头的变量名称</span><br><span class="line">scala&gt; res</span><br><span class="line">res0 res1</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>maven相关</title>
    <url>/maven%E7%9B%B8%E5%85%B3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="maven相关"><a href="#maven相关" class="headerlink" title="maven相关"></a>maven相关</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打jar包</span><br><span class="line">在项目根目录下</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line">2.为项目下载pom上配置的依赖</span><br><span class="line">在项目根目录下(用cmd或IDEA)</span><br><span class="line">mvn clean compile</span><br><span class="line"></span><br><span class="line">下载后，在项目上右键-&gt;maven-&gt;reload project</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
  </entry>
  <entry>
    <title>mysql安装</title>
    <url>/mysql%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h1><p><a href="https://www.cnblogs.com/ivy-zheng/p/11088644.html" target="_blank" rel="external nofollow noopener noreferrer">url1</a></p>
<p><a href="https://blog.csdn.net/t15263857960/article/details/83590484" target="_blank" rel="external nofollow noopener noreferrer">url2</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装包是目免安装型的</span><br><span class="line">2.在系统环境变量里添加mysql的路径到xxx\bin(也可以用管理员权限打开的cmd，切到这个路径下，再执行命令)</span><br><span class="line">3.用管理员权限打开cmd，输入</span><br><span class="line">mysqld --initialize --console  (注意一定要看之前是否安装过mysql,在环境变量里，一眼就可以看出，不然总是报各种错误; 加上console可以看到初始化后为root创建的临时密码)</span><br><span class="line">4.mysqld -install 将mysql服务安装到win服务</span><br><span class="line">5.net start mysql (启动服务)</span><br><span class="line">6.mysql -uroot -p 再输入之前生成的临时密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果安装时已有mysql服务，删除：sc delete mysql</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/b70a2cb5d4be" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改临时密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; &#x2F;&#x2F;记得修改自己的账户</span><br><span class="line">flush privileges; &#x2F;&#x2F;修改成功后刷新权限</span><br><span class="line">quit; &#x2F;&#x2F;最后退出</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第6章 Hive技巧与核心复盘</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC6%E7%AB%A0-Hive%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%A0%B8%E5%BF%83%E5%A4%8D%E7%9B%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第5章 Hive高级函数实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC5%E7%AB%A0-Hive%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0%E5%AE%9E%E6%88%98%202.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第八周-第5章-Hive高级函数实战"><a href="#第八周-第5章-Hive高级函数实战" class="headerlink" title="第八周 第5章 Hive高级函数实战"></a>第八周 第5章 Hive高级函数实战</h1><h2 id="一个SQL语句分析"><a href="#一个SQL语句分析" class="headerlink" title="一个SQL语句分析"></a>一个SQL语句分析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.Key</span><br><span class="line">, SUM(a.Cnt) AS Cnt</span><br><span class="line">FROM (</span><br><span class="line">	SELECT Key, COUNT(*) AS Cnt</span><br><span class="line">	FROM TableName</span><br><span class="line">	GROUP BY Key,</span><br><span class="line">		CASE</span><br><span class="line">			WHEN Key &#x3D; &#39;KEY001&#39; THEN Hash(Random()) % 50</span><br><span class="line">			ELSE 0</span><br><span class="line">		END</span><br><span class="line">) a</span><br><span class="line">GROUP BY a.Key;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解释：这个SQL其实是一个解决数据倾斜的SQL</span><br><span class="line">先看里面的select语句，里面的select语句其实是根据key进行分组，但是这个key对应的数据存在数据倾</span><br><span class="line">斜，key&#x3D;KEY001的数据占了整份数据的90%，所以直接针对key进行分组肯定会出现数据倾斜，应该计</span><br><span class="line">算效率，所以在这里就实现了曲线救国，先把key&#x3D;KEY001的数据打散，分成50份，进行局部聚合</span><br><span class="line">最后再通过外面的select进行全局的聚合，这样就可以显著提高计算效率</span><br></pre></td></tr></table></figure>

<h2 id="hue"><a href="#hue" class="headerlink" title="hue"></a>hue</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHD的hue界面的使用</span><br></pre></td></tr></table></figure>

<h2 id="【扩展内容】Hive数据倾斜的解决方案"><a href="#【扩展内容】Hive数据倾斜的解决方案" class="headerlink" title="【扩展内容】Hive数据倾斜的解决方案"></a>【扩展内容】Hive数据倾斜的解决方案</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可能会触发Hive数据倾斜的几种情况</span><br><span class="line"></span><br><span class="line">关键字 		情形 		后果</span><br><span class="line">join 其中一个表较小，但是key集中 分发到某一个或几个Reduce</span><br><span class="line">			大表与小表，但是分桶的判断字段0值或空值过多 这些空值都由一个reduce处</span><br><span class="line">group by group by维度过小，处理的数量过多 处理某值的reduce非常</span><br><span class="line">count distinct 某特殊值过多 处理此特殊值的reduc</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原因：</span><br><span class="line">1)、key分布不均匀</span><br><span class="line">2)、业务数据本身的特性</span><br><span class="line">3)、建表时考虑不周</span><br><span class="line">4)、某些SQL语句本身就有数据倾斜</span><br><span class="line">表现：</span><br><span class="line">任务进度长时间维持在99%（或100</span><br><span class="line">务未完成。因为其处理的数据量和其</span><br><span class="line">单一reduce的记录数与平均记录数差</span><br><span class="line">数据倾斜的解决方案</span><br><span class="line">参数调节：</span><br><span class="line">hive.map.aggr&#x3D;true</span><br><span class="line">Map 端部分聚合，相当于Combiner</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive.groupby.skewindata&#x3D;true</span><br><span class="line">有数据倾斜的时候进行负载均衡，当选项设定为 true，生成的查询计划会有两个 MR Job。第一个 MR</span><br><span class="line">Job 中，Map 的输出结果集合会随机分布到 Reduce 中，每个 Reduce 做部分聚合操作，并输出结果，这</span><br><span class="line">样处理的结果是相同的 Group By Key 有可能被分发到不同的 Reduce 中，从而达到负载均衡的目的；第</span><br><span class="line">二个 MR Job 再根据预处理的数据结果按照 Group By Key 分布到 Reduce 中（这个过程可以保证相同的</span><br><span class="line">Group By Key 被分布到同一个 Reduce 中），最后完成最终的聚合操作。</span><br><span class="line">SQL语句调节：</span><br><span class="line">大小表Join：</span><br><span class="line">使用map join让小的维度表（1000条以下的记录条数） 先进内存。在map端完成reduce.</span><br><span class="line">大表Join大表：</span><br><span class="line">把空值的key变成一个字符串加上随机数，把倾斜的数据分到不同的reduce上，由于null值关联不上，处理后并不影响最终结果。</span><br><span class="line">count distinct大量相同特殊值</span><br><span class="line">count distinct时，将值为空的情况单独处理，如果是计算count distinct，可以不用处理，直接过滤，在最后结果中加1。如果还有其他计算，需要进行group by，可以先将值为空的记录单独处理，再和其他计算结果进行union。</span><br><span class="line">针对去重求和的需求还可以这样做：</span><br><span class="line">采用sum() group by的方式来替换count(distinct)完成计算。</span><br><span class="line">特殊情况特殊处理：</span><br><span class="line">在业务逻辑优化效果的不大情况下，有些时候是可以将倾斜的数据单独拿出来处理。最后union回去。</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第5章 Hive高级函数实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC5%E7%AB%A0-Hive%E9%AB%98%E7%BA%A7%E5%87%BD%E6%95%B0%E5%AE%9E%E6%88%98%201.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第八周-第5章-Hive高级函数实战"><a href="#第八周-第5章-Hive高级函数实战" class="headerlink" title="第八周 第5章 Hive高级函数实战"></a>第八周 第5章 Hive高级函数实战</h1><h2 id="函数的基本操作"><a href="#函数的基本操作" class="headerlink" title="函数的基本操作"></a>函数的基本操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和mysql一样的，hive也是一个主要做统计的工具，所以为了满足各种各样的统计需要，他也内置了相当</span><br><span class="line">多的函数，我们可以通过 show functions; 来查看hive中的内置函数</span><br><span class="line">hive (default)&gt; show functions;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看指定函数的描述信息我们可以使用： desc function functionName;</span><br><span class="line"></span><br><span class="line">hive (default)&gt; desc function year;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示函数的扩展内容</span><br><span class="line">hive (default)&gt; desc function extended year;</span><br></pre></td></tr></table></figure>

<h2 id="Hive高级函数应用"><a href="#Hive高级函数应用" class="headerlink" title="Hive高级函数应用"></a>Hive高级函数应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">普通的就不说了，mysql中支持的函数这里面大部分都支持，并且hive支持的函数比mysql还要多，在这里我们主要挑几个典型的说一下</span><br></pre></td></tr></table></figure>

<h3 id="分组排序取TopN"><a href="#分组排序取TopN" class="headerlink" title="分组排序取TopN"></a>分组排序取TopN</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个典型的应用场景，分组排序取TopN操作</span><br><span class="line">主要需要使用到ROW_NUMBER() 和 OVER()函数</span><br><span class="line">row_number和over函数通常搭配在一起使用</span><br><span class="line">row_number会对数据编号，编号从1开始</span><br><span class="line">over可以理解为把数据划分到一个窗口内，里面可以加上partition by，表示按照字段对数据进行分组，</span><br><span class="line">还可以加上order by 表示对每个分组内的数据按照某个字段进行排序</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们的需求是这样，有一份学生的考试分数信息，语文、数学、英语这三门，需要计算出班级中单科排名前三名学生的姓名</span><br><span class="line">基础数据是这样的</span><br><span class="line">[root@bigdata04 hivedata]# more student_score.data</span><br><span class="line">1 zs1 chinese 80</span><br><span class="line">2 zs1 math 90</span><br><span class="line">3 zs1 english 89</span><br><span class="line">4 zs2 chinese 60</span><br><span class="line">5 zs2 math 75</span><br><span class="line">6 zs2 english 80</span><br><span class="line">7 zs3 chinese 79</span><br><span class="line">8 zs3 math 83</span><br><span class="line">9 zs3 english 72</span><br><span class="line">10 zs4 chinese 90</span><br><span class="line">11 zs4 math 76</span><br><span class="line">12 zs4 english 80</span><br><span class="line">13 zs5 chinese 98</span><br><span class="line">14 zs5 math 80</span><br><span class="line">15 zs5 english 70</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">建表</span><br><span class="line">create external table student_score(</span><br><span class="line">id int,</span><br><span class="line">name string,</span><br><span class="line">sub string,</span><br><span class="line">score int</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">location &#39;&#x2F;data&#x2F;student_score&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加载数据</span><br><span class="line">[root@bigdata04 hivedata]# hdfs dfs -put &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;student_score.dat</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们先使用row_number对数据编号，看一下是什么样子，row_number不能单独使用，在这里需要加上over</span><br><span class="line"></span><br><span class="line">select *,row_number() over() from student_score;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果如下：在这里相当于给表里面的所有数据编了一个号，从1开始</span><br><span class="line">15 zs5 english 70 1</span><br><span class="line">14 zs5 math 80 2</span><br><span class="line">13 zs5 chinese 98 3</span><br><span class="line">12 zs4 english 80 4</span><br><span class="line">11 zs4 math 76 5</span><br><span class="line">10 zs4 chinese 90 6</span><br><span class="line">9 zs3 english 72 7</span><br><span class="line">8 zs3 math 83 8</span><br><span class="line">7 zs3 chinese 79 9</span><br><span class="line">6 zs2 english 80 10</span><br><span class="line">5 zs2 math 75 11</span><br><span class="line">4 zs2 chinese 60 12</span><br><span class="line">3 zs1 english 89 13</span><br><span class="line">2 zs1 math 90 14</span><br><span class="line">1 zs1 chinese 80 15</span><br><span class="line"></span><br><span class="line">但是我们是希望对这些数据，先分组，再对组内数据进行排序，再编号</span><br><span class="line">所以就需要在over函数内部添加partiton by进行分组，添加order by 进行排序，最终给生成的编号起了</span><br><span class="line">换一个别名num</span><br></pre></td></tr></table></figure>

<h3 id="row-number"><a href="#row-number" class="headerlink" title="row_number()"></a>row_number()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行sql</span><br><span class="line">select *, row_number() over (partition by sub order by score desc) as num from student_score</span><br><span class="line"></span><br><span class="line">13 zs5 chinese 98 1</span><br><span class="line">10 zs4 chinese 90 2</span><br><span class="line">1 zs1 chinese 80 3</span><br><span class="line">7 zs3 chinese 79 4</span><br><span class="line">4 zs2 chinese 60 5</span><br><span class="line">3 zs1 english 89 1</span><br><span class="line">6 zs2 english 80 2</span><br><span class="line">12 zs4 english 80 3</span><br><span class="line">9 zs3 english 72 4</span><br><span class="line">15 zs5 english 70 5</span><br><span class="line">2 zs1 math 90 1</span><br><span class="line">8 zs3 math 83 2</span><br><span class="line">14 zs5 math 80 3</span><br><span class="line">11 zs4 math 76 4</span><br><span class="line">5 zs2 math 75 5</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接着就可以获取前三名了，</span><br><span class="line">执行sql</span><br><span class="line"></span><br><span class="line">select * from (</span><br><span class="line">select *, row_number() over (partition by sub order by score desc) as num</span><br><span class="line">from student_score</span><br><span class="line">) s where s.num&lt;&#x3D;3</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13 zs5 chinese 98 1</span><br><span class="line">10 zs4 chinese 90 2</span><br><span class="line">1 zs1 chinese 80 3</span><br><span class="line">3 zs1 english 89 1</span><br><span class="line">6 zs2 english 80 2</span><br><span class="line">12 zs4 english 80 3</span><br><span class="line">2 zs1 math 90 1</span><br><span class="line">8 zs3 math 83 2</span><br><span class="line">14 zs5 math 80 3</span><br></pre></td></tr></table></figure>

<h3 id="rank"><a href="#rank" class="headerlink" title="rank()"></a>rank()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面SQL中的 row_number() 可以替换为 rank() 或者 dense_rank()</span><br><span class="line">其中： rank() 表示上下两条记录的score相等时，记录的行号是一样的，但下一个score值的行号递增N</span><br><span class="line">（N是重复的次数），比如：有两条并列第一，下一个是第三，没有第二</span><br><span class="line"></span><br><span class="line">执行sql</span><br><span class="line">select *, rank() over (partition by sub order by score desc) as num from student_score</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13 zs5 chinese 98 1</span><br><span class="line">10 zs4 chinese 90 2</span><br><span class="line">1 zs1 chinese 80 3</span><br><span class="line">7 zs3 chinese 79 4</span><br><span class="line">4 zs2 chinese 60 5</span><br><span class="line">3 zs1 english 89 1</span><br><span class="line">6 zs2 english 80 2</span><br><span class="line">12 zs4 english 80 2</span><br><span class="line">9 zs3 english 72 4</span><br><span class="line">15 zs5 english 70 5</span><br><span class="line">2 zs1 math 90 1</span><br><span class="line">8 zs3 math 83 2</span><br><span class="line">14 zs5 math 80 3</span><br><span class="line">11 zs4 math 76 4</span><br><span class="line">5 zs2 math 75 5</span><br></pre></td></tr></table></figure>

<h3 id="dense-rank"><a href="#dense-rank" class="headerlink" title="dense_rank()"></a>dense_rank()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dense_rank() 表示上下两条记录的score相等时，下一个score值的行号递增1，比如：有两条并列第一，下一个是第二</span><br><span class="line">执行sql</span><br><span class="line">select *, dense_rank() over (partition by sub order by score desc) as num from student_score;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13 zs5 chinese 98 1</span><br><span class="line">10 zs4 chinese 90 2</span><br><span class="line">1 zs1 chinese 80 3</span><br><span class="line">7 zs3 chinese 79 4</span><br><span class="line">4 zs2 chinese 60 5</span><br><span class="line">3 zs1 english 89 1</span><br><span class="line">6 zs2 english 80 2</span><br><span class="line">12 zs4 english 80 2</span><br><span class="line">9 zs3 english 72 3</span><br><span class="line">15 zs5 english 70 4</span><br><span class="line">2 zs1 math 90 1</span><br><span class="line">8 zs3 math 83 2</span><br><span class="line">14 zs5 math 80 3</span><br><span class="line">11 zs4 math 76 4</span><br><span class="line">5 zs2 math 75 5</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">row_number() over() 是正常排序</span><br><span class="line">rank() over() 是跳跃排序，有两个第一名时接下来就是第三名（在各个分组内）</span><br><span class="line">dense_rank() over() 是连续排序，有两个第一名时仍然跟着第二名（在各个分组内）</span><br></pre></td></tr></table></figure>

<h3 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行转列就是把多行数据转为一列数据</span><br><span class="line">针对行转列这种需求主要需要使用到 CONCAT_WS()、COLLECT_SET() 、COLLECT_LIST() 函数</span><br><span class="line">先看一下这几个函数的描述信息，注意，有的函数在帮助文档里面没有描述信息</span><br></pre></td></tr></table></figure>

<h4 id="CONCAT-WS"><a href="#CONCAT-WS" class="headerlink" title="CONCAT_WS()"></a>CONCAT_WS()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc function CONCAT_WS;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">CONCAT_WS(separator, [string | array(string)]+) - returns the concatenation of</span><br><span class="line">Time taken: 0.019 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONCAT_WS() 函数可以实现根据指定的分隔符拼接多个字段的值，最终转化为一个带有分隔符的字符串</span><br><span class="line">它可以接收多个参数，第一个参数是分隔符，后面的参数可以是字符串或者字符串数组，最终就是使用分隔符把后面的所有字符串拼接到一块</span><br></pre></td></tr></table></figure>

<h4 id="COLLECT-LIST"><a href="#COLLECT-LIST" class="headerlink" title="COLLECT_LIST()"></a>COLLECT_LIST()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc function COLLECT_LIST;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">COLLECT_LIST(x) - Returns a list of objects with duplicates</span><br><span class="line">Time taken: 0.014 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line">这个函数可以返回一个list集合，集合中的元素会重复，一般和group by 结合在一起使用，一会再演示</span><br></pre></td></tr></table></figure>

<h4 id="COLLECT-SET"><a href="#COLLECT-SET" class="headerlink" title="COLLECT_SET()"></a>COLLECT_SET()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc function COLLECT_SET;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">COLLECT_SET(x) - Returns a set of objects with duplicate elements eliminated</span><br><span class="line">Time taken: 0.014 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line">这个函数可以返回一个set集合，集合汇中的元素不重复，一般和group by 结合在一起使用，一会再演示</span><br><span class="line">根据前面的分析，使用这几个函数我们就可以实现行转列这个需求了</span><br></pre></td></tr></table></figure>

<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 hivedata]# more student_favors.data</span><br><span class="line">zs swing</span><br><span class="line">zs footbal</span><br><span class="line">zs sing</span><br><span class="line">zs codeing</span><br><span class="line">zs swing</span><br><span class="line"></span><br><span class="line">期望的结果是这样的</span><br><span class="line">zs swing,footbal,sing,codeing,swing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">分析一下：</span><br><span class="line">在这其实就是对数据进行了分组，分组之后可以把相同人的爱好保存到一个数组中，再把数组中的数据转成使用逗号分割的字符串</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开始对原始数据建表</span><br><span class="line">create external table student_favors(</span><br><span class="line">name string,</span><br><span class="line">favor string</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">location &#39;&#x2F;data&#x2F;student_favors&#39;;</span><br><span class="line"></span><br><span class="line">上传数据</span><br><span class="line">[root@bigdata04 hivedata]# hdfs dfs -put &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;student_favors.data &#x2F;data&#x2F;student_favors</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看数据</span><br><span class="line">hive (default)&gt; select * from student_favors;</span><br><span class="line">OK</span><br><span class="line">student_favors.name student_favors.favor</span><br><span class="line">zs swing</span><br><span class="line">zs footbal</span><br><span class="line">zs sing</span><br><span class="line">zs codeing</span><br><span class="line">zs swing</span><br><span class="line">Time taken: 0.175 seconds, Fetched: 5 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先对name字段进行分组，把favor转成一个数组</span><br><span class="line">select name,collect_list(favor) as favor_list from student_favors group by name;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果如下</span><br><span class="line"> zs [&quot;swing&quot;,&quot;footbal&quot;,&quot;sing&quot;,&quot;codeing&quot;,&quot;swing&quot;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后再使用 concat_ws 把数组中的元素按照指定分隔符转成字符串</span><br><span class="line">这样就实现了多行数据转为一列数据了</span><br><span class="line">执行行转列操作</span><br><span class="line">select name,concat_ws(&#39;,&#39;,collect_list(favor)) as favor_list from student_favors group by name;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果如下</span><br><span class="line">zs swing,footbal,sing,codeing,swing</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们发现这里面有一些爱好是重复的，如果不希望出现重复的话可以使用COLLECT_SET()</span><br><span class="line">执行sql</span><br><span class="line">select name,concat_ws(&#39;,&#39;,collect_set(favor)) as favor_list from student_favors group by name;</span><br></pre></td></tr></table></figure>

<h3 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列转行是和刚才的行转列反着来的，列转行可以把一列数据转成多行</span><br><span class="line">主要使用到 SPLIT()、EXPLODE()和LATERAL VIEW</span><br><span class="line">看一下这几个函数</span><br></pre></td></tr></table></figure>

<h4 id="SPLIT"><a href="#SPLIT" class="headerlink" title="SPLIT()"></a>SPLIT()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc function SPLIT;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">SPLIT(str, regex) - Splits str around occurances that match regex</span><br><span class="line">Time taken: 0.011 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line">split函数，接受一个字串符和切割规则，就类似于java中的split函数，使用切割规则对字符串中的数据进行切割，最终返回一个array数组</span><br></pre></td></tr></table></figure>

<h4 id="EXPLODE"><a href="#EXPLODE" class="headerlink" title="EXPLODE()"></a>EXPLODE()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc function EXPLODE;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">EXPLODE(a) - separates the elements of array a into multiple rows, or the ele</span><br><span class="line">Time taken: 0.013 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line">explode函数可以接受array或者map</span><br><span class="line">explode(ARRAY)：表示把数组中的每个元素转成一行</span><br><span class="line">explode(MAP) ：表示把map中每个key-value对，转成一行，key为一列，value为一列</span><br></pre></td></tr></table></figure>



<h4 id="LATERAL-VIEW"><a href="#LATERAL-VIEW" class="headerlink" title="LATERAL VIEW"></a>LATERAL VIEW</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lateral view 通常和split， explode等函数一起使用。</span><br><span class="line">split可以对表中的某一列进行切割，返回一个数组类型的字段，explode可以对这个数组中的每一个元素</span><br><span class="line">转为一行，lateral view可以对这份数据产生一个支持别名的虚拟表</span><br><span class="line">原始数据如下</span><br></pre></td></tr></table></figure>

<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 hivedata]# more student_favors_2.data</span><br><span class="line">zs swing,footbal,sing</span><br><span class="line">ls codeing,swing</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">希望的结果是这样的</span><br><span class="line">zs swing</span><br><span class="line">zs footbal</span><br><span class="line">zs sing</span><br><span class="line">ls codeing</span><br><span class="line">ls swing</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接着建表</span><br><span class="line">create external table student_favors_2(</span><br><span class="line">name string,</span><br><span class="line">favorlist string</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">location &#39;&#x2F;data&#x2F;student_favors_2&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上传数据</span><br><span class="line">[root@bigdata04 hivedata]# hdfs dfs -put &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;student_favors_2</span><br><span class="line"></span><br><span class="line">查看数据</span><br><span class="line">hive (default)&gt; select * from student_favors_2;</span><br><span class="line">OK</span><br><span class="line">student_favors_2.name student_favors_2.favorlist</span><br><span class="line">zs swing,footbal,sing</span><br><span class="line">ls codeing,swing</span><br><span class="line">Time taken: 0.131 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先使用split对favorlist字段进行切割</span><br><span class="line">hive (default)&gt; select split(favorlist,&#39;,&#39;) from student_favors_2;</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">_c1</span><br><span class="line">[&quot;swing&quot;,&quot;footbal&quot;,&quot;sing&quot;]</span><br><span class="line">[&quot;codeing&quot;,&quot;swing&quot;]</span><br><span class="line">Time taken: 0.224 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再使用explode对数据进行操作</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select explode(split(favorlist,&#39;,&#39;)) from student_favors_2;</span><br><span class="line">OK</span><br><span class="line">col</span><br><span class="line">swing</span><br><span class="line">footbal</span><br><span class="line">sing</span><br><span class="line">codeing</span><br><span class="line">swing</span><br><span class="line">Time taken: 0.185 seconds, Fetched: 5 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实到这里已经实现了列转行了，但是还需要把name字段拼接上，这时候就需要使用later view了，否则直接查询name字段会报错</span><br><span class="line">laterview相当于把explode返回的数据作为一个虚拟表来使用了，起名字为table1，然后给这个表里面的那一列数据起一个名字叫favor_new，如果有多个字段，可以再后面指定多个。这样在select后面就可以使用这个名字了，有点类似join操作了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,favor_new from student_favors_2 lateral view explode(split(favorlist,&#39;,&#39;)) table1 as favor_new;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果如下：</span><br><span class="line">zs swing</span><br><span class="line">zs footbal</span><br><span class="line">zs sing</span><br><span class="line">ls codeing</span><br><span class="line">ls swing</span><br></pre></td></tr></table></figure>

<h2 id="Hive排序相关函数"><a href="#Hive排序相关函数" class="headerlink" title="Hive排序相关函数"></a>Hive排序相关函数</h2><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hive中的order by跟传统的sql语言中的order by作用是一样的，会对查询的结果做一次全局排序，使用这个语句的时候生成的reduce任务只有一个</span><br></pre></td></tr></table></figure>

<h3 id="SORT-BY"><a href="#SORT-BY" class="headerlink" title="SORT BY"></a>SORT BY</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hive中指定了sort by，如果有多个reduce，那么在每个reducer端都会做排序，也就是说保证了局部有序（每个reducer出来的数据是有序的，但是不能保证所有的数据是全局有序的，除非只有一个reducer）</span><br><span class="line">使用前面的t2_bak表，表中的数据如下：</span><br><span class="line">hive (default)&gt; select * from t2_bak;</span><br><span class="line">OK</span><br><span class="line">t2_bak.id t2_bak.name</span><br><span class="line">1 NULL</span><br><span class="line">2 NULL</span><br><span class="line">3 NULL</span><br><span class="line">4 NULL</span><br><span class="line">5 NULL</span><br><span class="line">1 NULL</span><br><span class="line">2 NULL</span><br><span class="line">3 NULL</span><br><span class="line">4 NULL</span><br><span class="line">5 NULL</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行排序SQL</span><br><span class="line">hive (default)&gt; select id from t2_bak sort by id;</span><br><span class="line">......</span><br><span class="line">Hadoop job information for Stage-1: number of mappers: 1; number of reducers:</span><br><span class="line">......</span><br><span class="line">OK</span><br><span class="line">id</span><br><span class="line">1 </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">2 </span><br><span class="line">3</span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">5</span><br><span class="line">Time taken: 24.562 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚才我们说sort by是局部有序，为什么最终的结果还是全局有序呢？</span><br><span class="line">看里面的日志，现在只有一个reduce任务，所以最终结果还是有序的</span><br><span class="line">动态设置reduce任务数量为2，然后再执行排序的SQL</span><br><span class="line"></span><br><span class="line">hive (default)&gt; set mapreduce.job.reduces &#x3D; 2;</span><br><span class="line">hive (default)&gt; select id from t2_bak sort by id;</span><br><span class="line">.......</span><br><span class="line">Hadoop job information for Stage-1: number of mappers: 1; number of reducers:</span><br><span class="line">......</span><br><span class="line">OK</span><br><span class="line">id</span><br><span class="line">1 3 3 4 5 5 1 2 2 4</span><br><span class="line">Time taken: 27.943 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时会发现数据就没有全局排序了，因为有多个reduce了。</span><br><span class="line">不过针对ORDER BY来说，你动态设置再多的reduce数量都没有用，最后还是只产生1个reduce。</span><br></pre></td></tr></table></figure>



<h3 id="DISTRIBUTE-BY"><a href="#DISTRIBUTE-BY" class="headerlink" title="DISTRIBUTE BY"></a>DISTRIBUTE BY</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ditribute by是控制map的输出到reducer是如何划分的</span><br><span class="line"></span><br><span class="line">ditribute by：只会根据指定的key对数据进行分区，但是不会排序。</span><br><span class="line">一般情况下可以和sort by 结合使用，先对数据分区，再进行排序</span><br><span class="line">两者结合使用的时候distribute by必须要写在sort by之前</span><br><span class="line">先来看一下单独ditribute by的使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; set mapreduce.job.reduces &#x3D; 2;</span><br><span class="line">hive (default)&gt; select id from t2_bak distribute by id;</span><br><span class="line">.......</span><br><span class="line">Number of reduce tasks not specified. Defaulting to jobconf value of: 2</span><br><span class="line">.......</span><br><span class="line">OK</span><br><span class="line">id</span><br><span class="line">4 </span><br><span class="line">2 </span><br><span class="line">4 </span><br><span class="line">2 </span><br><span class="line">5 </span><br><span class="line">3 </span><br><span class="line">1 </span><br><span class="line">5 </span><br><span class="line">3 </span><br><span class="line">1</span><br><span class="line">Time taken: 25.395 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以结合sort by实现分区内的排序，默认是升序，可以通过desc来设置倒序</span><br><span class="line"></span><br><span class="line">hive (default)&gt; set mapreduce.job.reduces &#x3D; 2;</span><br><span class="line">hive (default)&gt; select id from t2_bak distribute by id sort by id;</span><br><span class="line">.......</span><br><span class="line">Number of reduce tasks not specified. Defaulting to jobconf value of: 2</span><br><span class="line">.......</span><br><span class="line">id</span><br><span class="line">2 2 4 4 1 1 3 3 5 5</span><br><span class="line">Time taken: 24.468 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select id from t2_bak distribute by id sort by id desc;</span><br></pre></td></tr></table></figure>



<h3 id="CLUSTER-BY"><a href="#CLUSTER-BY" class="headerlink" title="CLUSTER BY"></a>CLUSTER BY</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster by的功能就是distribute by和sort by的简写形式</span><br><span class="line">也就是 cluster by id 等于 distribute by id sort by id</span><br><span class="line">注意被cluster by指定的列只能是升序，不能指定asc和desc</span><br><span class="line"></span><br><span class="line">hive (default)&gt; set mapreduce.job.reduces &#x3D; 2;</span><br><span class="line">hive (default)&gt; select id from t2_bak cluster by id;</span><br><span class="line">.....</span><br><span class="line">Number of reduce tasks not specified. Defaulting to jobconf value of: 2</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">OK</span><br><span class="line">id</span><br><span class="line">2 </span><br><span class="line">2 </span><br><span class="line">4 </span><br><span class="line">4 </span><br><span class="line">1 </span><br><span class="line">1 </span><br><span class="line">3 </span><br><span class="line">3 </span><br><span class="line">5 </span><br><span class="line">5</span><br><span class="line">Time taken: 25.495 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<h2 id="Hive-的分组和去重函数"><a href="#Hive-的分组和去重函数" class="headerlink" title="Hive 的分组和去重函数"></a>Hive 的分组和去重函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GROUP BY ：对数据按照指定字段进行分组</span><br><span class="line">DISTINCT：对数据中指定字段的重复值进行去重</span><br><span class="line"></span><br><span class="line">第一种：select count(distinct name) from order</span><br><span class="line">第二种：select count(tmp.name) from (select name from order group by name) tmp</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种：使用distinct会将所有的name都shuffle到一个reducer里面，性能较低</span><br><span class="line">第二种：先对name分组，因为分组的同时其实就是去重，此时是可以并行计算的，然后再计算count</span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第4章 Hive核心实战2</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC4%E7%AB%A0-Hive%E6%A0%B8%E5%BF%83%E5%AE%9E%E6%88%98%204.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第八周-第4章-Hive核心实战"><a href="#第八周-第4章-Hive核心实战" class="headerlink" title="第八周 第4章 Hive核心实战"></a>第八周 第4章 Hive核心实战</h1>

<a href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html" title="hadoop实验课-hive">hadoop实验课-hive</a>

<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来看一个综合案例，主要使用外部分区表和视图实现</span><br><span class="line">需求：Flume按天把日志数据采集到HDFS中的对应目录中，使用SQL按天统计每天数据的相关指标</span><br><span class="line">分析一下：</span><br><span class="line">Flume按天把日志数据保存到HDFS中的对应目录中</span><br><span class="line">针对Flume的source可以使用execsource、channel可以使用基于文件的或者内存的，sink使用hdfssink，在hdfssink的path路径中需要使用%Y%m%d获取日期，将每天的日志数据采集到指定的hdfs目录中</span><br><span class="line">这个是我们在前面学习Flume的时候已经讲过的了，这个倒不难</span><br><span class="line">后面就是需要对按天采集的日志数据建表，由于这份数据可能会被多种计算引擎使用，所以建议使用外部表，这样就算我们不小心把表删了，数据也还是在的，不影响其他人使用，还有就是这份数据是按天分目录存储的，在实际工作中，离线计算的需求大部分都是按天计算的，所以在这里最好在表中增加日期这个</span><br><span class="line">分区字段，所以最终决定使用外部分区表。</span><br><span class="line">前面FLume采集数据的流程我们就不再演示了，在这我就直接使用之前我们使用hdfs落盘的数据了。</span><br><span class="line">我们之前有一个案例是分类型，分目录，把多种类型的数据存储到不同的目录下</span><br><span class="line">目录结构是这样的，首先是按天，然后是按照类型</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第4章 Hive核心实战2</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC4%E7%AB%A0-Hive%E6%A0%B8%E5%BF%83%E5%AE%9E%E6%88%98%202.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第八周-第4章-Hive核心实战"><a href="#第八周-第4章-Hive核心实战" class="headerlink" title="第八周 第4章 Hive核心实战"></a>第八周 第4章 Hive核心实战</h1>

<a href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html" title="hadoop实验课-hive">hadoop实验课-hive</a>

<h2 id="Hive中的数据类型"><a href="#Hive中的数据类型" class="headerlink" title="Hive中的数据类型"></a>Hive中的数据类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive作为一个类似数据库的框架，也有自己的数据类型，便于存储、统计、分析。</span><br><span class="line">Hive中主要包含两大数据类型</span><br><span class="line">	一类是基本数据类型</span><br><span class="line">	一类是复合数据类型</span><br><span class="line">基本数据类型：常用的有INT,STRING,BOOLEAN,DOUBLE等</span><br><span class="line">复合数据类型：常用的有ARRAY,MAP,STRUCT等</span><br></pre></td></tr></table></figure>



<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看这个表，一般数字类型我们可以试验int，小数可以使用double，日期可以使用date类型、还有就是</span><br><span class="line">boolean类型，这些算是比较常见的了，前面我们在建表的时候基本都用过了。</span><br><span class="line">这些基本数据类型倒没有什么特殊之处</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 开始支持版本 数据类型 开始支持版本</span><br><span class="line">TINYINT ~ TIMESTAMP 0.8.0</span><br><span class="line">SMALLINT ~ DATE 0.12.0</span><br><span class="line">INT&#x2F;INTEGER ~ STRING ~</span><br><span class="line">BIGINT ~ VARCHAR 0.12.0</span><br><span class="line">FLOAT ~ CHAR 0.13.0</span><br><span class="line">DOUBLE ~ BOOLEAN ~</span><br><span class="line">DECIMAL 0.11.0</span><br></pre></td></tr></table></figure>



<h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面主要看一下复合数据类型，在这里我们主要分析这三个， array，map和struct</span><br><span class="line"></span><br><span class="line">数据类型 开始支持版本 格式</span><br><span class="line">ARRAY 0.14.0 ARRAY&lt;data_type&gt;</span><br><span class="line">MAP 0.14.0 MAP&lt;primitive_type, data_type&gt;</span><br><span class="line">STRUCT ~ STRUCT&lt;col_name : data_type, ...&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先来看Array，这个表示是一个数组结构</span><br><span class="line">在这里举一个例子：学生有多个爱好，有两个学生，zhangsan、lisi，</span><br><span class="line">zhangsan的爱好是swing、sing、coding</span><br><span class="line">lisi的爱好是music、football</span><br><span class="line">每个学生的爱好都是不固定的，有多有少，如果根据学生的每一个爱好都在表里面增加一列，这样就不合适了，后期可能要经常增加列存储不同的爱好</span><br><span class="line">如果我们如果把每个学生的爱好都拼接为一个字符串保存到一个字段中，这样针对存储层面来说是没有问题的，但是后期需要根据爱好的增加而修改字段，这样操作起来很不方便，如果想获取每个学生的1个爱好，这样是没办法直接获取的，因为这些爱好是以字符串的形式保存在一个字段中的</span><br><span class="line">为了方便存储和使用，我们针对学生的爱好这种数据个数不固定的场景，可以使用数组的形式来存储</span><br><span class="line">测试数据是这样的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 hivedata]# more stu.data</span><br><span class="line">1 zhangsan swing,sing,coding</span><br><span class="line">2 lisi music,football</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">来建一张表，指定了一个array数组类型的字段叫favors，数组中存储字符串，数组中的元素怎么分割呢？通过 collection items terminated by &#39;,&#39; 指定的</span><br><span class="line"></span><br><span class="line">create table stu(</span><br><span class="line">id int,</span><br><span class="line">name string,</span><br><span class="line">favors array&lt;string&gt;</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">collection items terminated by &#39;,&#39;</span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;stu.data&#39; into ta</span><br><span class="line">Loading data to table default.stu</span><br><span class="line">OK</span><br><span class="line">Time taken: 1.478 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询数组中的某一个元素，使用 arrayName[index]</span><br><span class="line">hive (default)&gt; select * from stu;</span><br><span class="line">OK</span><br><span class="line">stu.id stu.name stu.favors</span><br><span class="line">1 zhangsan [&quot;swing&quot;,&quot;sing&quot;,&quot;coding&quot;]</span><br><span class="line">2 lisi [&quot;music&quot;,&quot;football&quot;]</span><br><span class="line">Time taken: 1.547 seconds, Fetched: 2 row(s)</span><br><span class="line">hive (default)&gt; select id,name,favors[1] from stu;</span><br><span class="line">OK</span><br><span class="line">id name _c2</span><br><span class="line"></span><br><span class="line">1 zhangsan sing</span><br><span class="line">2 lisi football</span><br><span class="line">Time taken: 0.631 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">角标是从0开始的，如果获取到了不存在的角标则返回null</span><br><span class="line">这就是Array类型的使用了</span><br></pre></td></tr></table></figure>



<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来说一下另外一种常见的集合——map，我们知道map集合里面存储的是键值对，每一个键值对属于Map集合的一个item，</span><br><span class="line">这里给大家举个例子，有两个学生zhangsan、lisi，每个学生有语文、数学、英语，成绩如下：</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# more stu2.data</span><br><span class="line">1 zhangsan chinese:80,math:90,english:100</span><br><span class="line">2 lisi chinese:89,english:70,math:88</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对学生的成绩信息最好也是存储到一个字段中，方便管理和使用，发现学生的成绩都是key-value类型的，所以非常适合使用map类型</span><br><span class="line">建表语句如下：指定scores字段类型为map格式</span><br><span class="line">通过 collection items terminated by &#39;,&#39; 指定了map中元素之间的分隔符</span><br><span class="line">通过 map keys terminated by &#39;:&#39; 指定了key和value之间的分隔符</span><br><span class="line"></span><br><span class="line">create table stu2(</span><br><span class="line">id int,</span><br><span class="line">name string,</span><br><span class="line">scores map&lt;string,int&gt;</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">collection items terminated by &#39;,&#39;</span><br><span class="line">map keys terminated by &#39;:&#39;</span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;stu2.data&#39; into t</span><br><span class="line">Loading data to table default.stu2</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.521 seconds</span><br><span class="line"></span><br><span class="line">查看表中的数据</span><br><span class="line">hive (default)&gt; select * from stu2;</span><br><span class="line">OK</span><br><span class="line">stu2.id stu2.name stu2.scores</span><br><span class="line">1 zhangsan &#123;&quot;chinese&quot;:80,&quot;math&quot;:90,&quot;english&quot;:100&#125;</span><br><span class="line">2 lisi &#123;&quot;chinese&quot;:89,&quot;english&quot;:70,&quot;math&quot;:88&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询所有学生的语文和数学成绩</span><br><span class="line">hive (default)&gt; select id,name,scores[&#39;chinese&#39;] as ch_score ,scores[&#39;math&#39;] as math_score from stu2;</span><br><span class="line"></span><br><span class="line">id name ch_score math_score</span><br><span class="line">1  zhangsan  80    90</span><br><span class="line">2 lisi       89    88</span><br><span class="line">Time taken: 0.232 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这注意一下，我们取数据是根据元素中的key获取的，和map结构中元素的位置没有关系</span><br></pre></td></tr></table></figure>

<h4 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再来介绍最后一种复合类型struct，有点像java中的对象，举个例子说明一下，</span><br><span class="line">某学校有2个实习生，zhangsan、lisi，每个实习生都有地址信息，一个是户籍地所在的城市，一个是公司所在的城市，</span><br><span class="line">我们来组织一下数据</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# more stu3.data</span><br><span class="line">1 zhangsan bj,sh</span><br><span class="line">2 lisi gz,sz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对这里面的地址信息，不能懒省事使用字符串，否则后期想要获取他们对应的户籍地城市或者公司所在</span><br><span class="line">的城市信息时就比较麻烦了</span><br><span class="line">所以在这我们可以考虑使用Struct类型</span><br><span class="line">建表语句如下：</span><br><span class="line"></span><br><span class="line">create table stu3(</span><br><span class="line">id int,</span><br><span class="line">name string,</span><br><span class="line">address struct&lt;home_addr:string,office_addr:string&gt;</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">collection items terminated by &#39;,&#39;</span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;stu3.data&#39; into t</span><br><span class="line">Loading data to table default.stu3</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.447 seconds</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from stu3;</span><br><span class="line">OK</span><br><span class="line">stu3.id stu3.name stu3.address</span><br><span class="line">1 zhangsan &#123;&quot;home_addr&quot;:&quot;bj&quot;,&quot;office_addr&quot;:&quot;sh&quot;&#125;</span><br><span class="line">2 lisi &#123;&quot;home_addr&quot;:&quot;gz&quot;,&quot;office_addr&quot;:&quot;sz&quot;&#125;</span><br><span class="line">Time taken: 0.189 seconds, Fetched: 2 row(s)</span><br><span class="line">hive (default)&gt; select id,name,address.home_addr from stu3;</span><br><span class="line">OK</span><br><span class="line">id name home_addr</span><br><span class="line">1 zhangsan bj</span><br><span class="line">2 lisi gz</span><br><span class="line">Time taken: 0.201 seconds, Fetched: 2 row(s)</span><br><span class="line"></span><br><span class="line">在这里大家会发现其实这个需求，我们使用Array也是可以搞定的吧，只不过是在查询的时候只能通过角</span><br><span class="line">标访问，不太方便而已。</span><br></pre></td></tr></table></figure>



<h4 id="Struct和Map的区别"><a href="#Struct和Map的区别" class="headerlink" title="Struct和Map的区别"></a>Struct和Map的区别</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果从建表语句上来分析，其实这个Struct和Map还是有一些相似之处的</span><br><span class="line">来总结一下：</span><br><span class="line">map中可以随意增加k-v对的个数</span><br><span class="line">struct中的k-v个数是固定的</span><br><span class="line">map在建表语句中需要指定k-v的类型</span><br><span class="line">struct在建表语句中需要指定好所有的属性名称和类型</span><br><span class="line">map中通过[]取值</span><br><span class="line">struct中通过.取值，类似java中的对象属性引用</span><br><span class="line">map的源数据中需要带有k-v</span><br><span class="line">struct的源数据中只需要有v即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总体而言还是map比较灵活，但是会额外占用磁盘空间，因为他比struct多存储了数据的key</span><br><span class="line">struct只需要存储value，比较节省空间，但是灵活性有限，后期无法动态增加k-v</span><br></pre></td></tr></table></figure>



<h2 id="案例：复合数据类型的使用"><a href="#案例：复合数据类型的使用" class="headerlink" title="案例：复合数据类型的使用"></a>案例：复合数据类型的使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我们把前面学到的这三种复合数据类型结合到一块来使用一下。</span><br><span class="line">有一份数据是这样的</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# more student.data</span><br><span class="line">1 zhangsan english,sing,swing chinese:80,math:90,english:10</span><br><span class="line">2 lisi games,coding chinese:89,english:70,math:88 gz,sz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据这份数据建表，根据咱们前面的学习，这里面这几个字段分别是int类型、string类型，array类型，map类型，struct类型</span><br><span class="line">其实也不一定非要使用这些复合类型，主要是需要根据具体业务分析，使用复合数据类型可以更方便的操作数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student (</span><br><span class="line">id int comment &#39;id&#39;,</span><br><span class="line">name string comment &#39;name&#39;,</span><br><span class="line">favors array&lt;string&gt; ,</span><br><span class="line">scores map&lt;string, int&gt;,</span><br><span class="line">address struct&lt;home_addr:string,office_addr:string&gt;</span><br><span class="line">) row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">collection items terminated by &#39;,&#39;</span><br><span class="line">map keys terminated by &#39;:&#39;</span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;student.data&#39; into table student;</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from student;</span><br><span class="line">OK</span><br><span class="line">student.id student.name student.favors student.scores student.addre</span><br><span class="line">1 zhangsan [&quot;english&quot;,&quot;sing&quot;,&quot;swing&quot;] &#123;&quot;chinese&quot;:80,&quot;math&quot;:</span><br><span class="line">2 lisi [&quot;games&quot;,&quot;coding&quot;] &#123;&quot;chinese&quot;:89,&quot;english&quot;:70,&quot;math&quot;:88&#125;</span><br><span class="line">Time taken: 0.168 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>



<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问：在mysql中有一张表student(id,name)，还有一张表address(stu_id,</span><br><span class="line">home,school)，还有联系方式表contact(stu_id,mine,parents,others)。如果把这三张表迁移到hive中，</span><br><span class="line">如何迁移？</span><br><span class="line">答：</span><br><span class="line">可以一一对应迁移，优点是迁移成本非常低，包括DDL和业务逻辑，几乎不需要修改，可以直接使用。缺点是产生大量的表连接，造成查询慢。</span><br><span class="line">可以一对多，mysql中的多张关联表可以创建为hive中的一张表。优点是减少表连接操作。缺点是迁移成本高，需要修改原有的业务逻辑。</span><br><span class="line">实际上，在我们日常的开发过程中遇到这样的问题，要想比较完美、顺利的解决，一般都分为两个阶段，</span><br><span class="line">第一个阶段，现在快捷迁移，就是上面说的一一对应，让我们的系统能跑起来，在此基础之上呢，再做一张大表，尽量包含以上所有字段，例如：</span><br><span class="line">stu(id, name, address struct&lt;home,school&gt;, contact struct&lt;…&gt;);</span><br><span class="line">等第二个阶段完工之后了，就可以跑在新的系统里面了。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第4章 Hive核心实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC4%E7%AB%A0-Hive%E6%A0%B8%E5%BF%83%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第八周-第4章-Hive核心实战"><a href="#第八周-第4章-Hive核心实战" class="headerlink" title="第八周 第4章 Hive核心实战"></a>第八周 第4章 Hive核心实战</h1>

<a href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html" title="hadoop实验课-hive">hadoop实验课-hive</a>

<h2 id="Hive中数据库的操作"><a href="#Hive中数据库的操作" class="headerlink" title="Hive中数据库的操作"></a>Hive中数据库的操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use xxx;</span><br><span class="line">create database xxx;</span><br><span class="line"></span><br><span class="line">drop database xxxx;</span><br></pre></td></tr></table></figure>

<h2 id="Hive中表的操作"><a href="#Hive中表的操作" class="headerlink" title="Hive中表的操作"></a>Hive中表的操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table xxx(id int);</span><br></pre></td></tr></table></figure>

<h3 id="查看创建的表"><a href="#查看创建的表" class="headerlink" title="查看创建的表"></a>查看创建的表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看表信息</span><br><span class="line">show tables;###</span><br></pre></td></tr></table></figure>

<h3 id="查看表结构信息"><a href="#查看表结构信息" class="headerlink" title="查看表结构信息"></a>查看表结构信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc xxx;</span><br></pre></td></tr></table></figure>

<h3 id="查看表的创建信息"><a href="#查看表的创建信息" class="headerlink" title="查看表的创建信息"></a>查看表的创建信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table xxx;</span><br><span class="line">从这里的location可以看到这个表在hdfs上的位置。</span><br><span class="line">注意了：表中的数据是存储在hdfs中的，但是表的名称、字段信息是存储在metastore中的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到metastore中看一下</span><br><span class="line">先看tbls表，这个里面中存储的都是在hive中创建的表</span><br><span class="line">可以看到DB_ID 为1</span><br><span class="line">可以到dbs表中看到默认default数据库的id就是1。</span><br><span class="line">TBL_NAME 是这个表的名称。</span><br><span class="line"></span><br><span class="line">在表COLUMNS_V2中存储的是Hive表的字段信息(包含字段注释、字段名称、字段类型、字段顺序)</span><br><span class="line">其中的CD_ID和tbls中的TBL_ID相等</span><br></pre></td></tr></table></figure>

<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; alter table t2 rename to t2_bak;</span><br><span class="line"></span><br><span class="line">hdfs中对应的目录名称也同步变化了</span><br></pre></td></tr></table></figure>

<h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们前面向表中添加数据是使用的insert命令，其实使用insert向表里面添加数据只是在测试的时候使用，实际中向表里面添加数据很少使用insert命令的</span><br><span class="line">具体原因我们后面再分析，在这大家先带着这个问题。</span><br><span class="line">insert into test2(id, name) values(1,&quot;zhangsan&quot;);</span><br><span class="line"></span><br><span class="line">向表中加载数据可以使用load命令</span><br><span class="line">以t2_bak为例，在bigdata04机器的 &#x2F;data&#x2F;soft&#x2F;hivedata 下有一个 t2.data 文件，将其加载到 t2_bak表中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 hivedata]# pwd</span><br><span class="line">&#x2F;data&#x2F;soft&#x2F;hivedata</span><br><span class="line">[root@bigdata04 hivedata]# more t2.data</span><br><span class="line">1 2 3 4 5</span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t2.data&#39; into table t2_bak</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from t2_bak;</span><br><span class="line">OK</span><br><span class="line">t2_bak.id</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们到hdfs上去看一下这个表，发现刚才的文件其实就是上传到了t2_bak目录中</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HzRNWV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/22/HzRNWV.md.png" alt="HzRNWV.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们自己手工通过put命令把数据上传到t2_bak目录中可以吗？</span><br><span class="line">可以的！</span><br><span class="line">hdfs dfs -put &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t2_bak.data &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;t2_bak</span><br><span class="line"></span><br><span class="line">到hdfs上确认一下，可以看到刚才上传的文件</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HzWY0H" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/22/HzWY0H.md.png" alt="HzWY0H.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再查询一下这个表的数据，可以发现数据多了一份，说明刚才使用hdfs的put命令上传的是可以的。</span><br><span class="line">hive (default)&gt; select * from t2_bak;</span><br><span class="line">OK</span><br><span class="line">t2_bak.id</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="表增加字段及注释、删除表"><a href="#表增加字段及注释、删除表" class="headerlink" title="表增加字段及注释、删除表"></a>表增加字段及注释、删除表</h3><h4 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在工作中会有给已存在的表增加字段的需求，需要使用alter命令</span><br><span class="line">在这里我们给t2_bak表增加一个name字段，重新查看表结构信息，再查询一下这个表中的数据，结果发现，第二列为null，这是正常的，因为我们的数据数据文件中就只有一列，第二列查询不到，就显示为null，不会报错，这一点要注意一下</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; alter table t2_bak add columns (name string);</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.175 seconds</span><br><span class="line">hive (default)&gt; desc t2_bak;</span><br><span class="line">OK</span><br><span class="line">col_name data_type comment</span><br><span class="line">id int</span><br><span class="line">name string</span><br><span class="line">Time taken: 0.121 seconds, Fetched: 2 row(s)</span><br><span class="line">hive (default)&gt; select * from t2_bak;</span><br><span class="line">OK</span><br><span class="line">t2_bak.id t2_bak.name</span><br><span class="line">1 NULL</span><br><span class="line">2 NULL</span><br><span class="line">3 NULL</span><br><span class="line">4 NULL</span><br><span class="line">5 NULL</span><br><span class="line">1 NULL</span><br><span class="line">2 NULL</span><br><span class="line">3 NULL</span><br><span class="line">4 NULL</span><br><span class="line">5 NULL</span><br><span class="line">Time taken: 0.199 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<h4 id="增加注释"><a href="#增加注释" class="headerlink" title="增加注释"></a>增加注释</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在我们通过desc查询表中的字段信息发现都没有注释，所以想要给字段加一些注释，以及表本身也可以增加注释，都是使用comment关键字</span><br><span class="line">重新创建一个表t2</span><br><span class="line">注意：在建表语句中，缩进不要使用tab制表符，否则拷贝到hive命令行下执行会提示语句错误，这里的缩进需要使用空格</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t2(</span><br><span class="line">age int comment &#39;年龄&#39;</span><br><span class="line">) comment &#39;测试&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看这个表的信息，结果发现我们添加的中文注释都是乱码</span><br><span class="line"></span><br><span class="line">hive (default)&gt; desc t2;</span><br><span class="line">OK</span><br><span class="line">col_name data_type comment</span><br><span class="line">age int ??</span><br><span class="line">Time taken: 0.086 seconds, Fetched: 1 row(s)</span><br><span class="line">hive (default)&gt; show create table t2;</span><br><span class="line">OK</span><br><span class="line">createtab_stmt</span><br><span class="line">CREATE TABLE &#96;t2&#96;(</span><br><span class="line">&#96;age&#96; int COMMENT &#39;??&#39;)</span><br><span class="line">COMMENT &#39;??&#39;</span><br><span class="line">ROW FORMAT SERDE</span><br><span class="line">&#39;org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原因是什么？怎么破？</span><br><span class="line">中文乱码的原因是因为hive数据库里面的表都是latin1编码的，中文本来就会显示乱码，但是又不能修改整个数据库里面所有表的编码，否则在使用hive的时候会出问题，那么只有考虑把存储字段注释和表注释相关的表的编码改为utf8。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登陆Mysql数据库切换到Hive库：</span><br><span class="line"></span><br><span class="line">C:\Users\yehua&gt;mysql -uroot -padmin</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecu</span><br><span class="line">Welcome to the MySQL monitor. Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 736</span><br><span class="line">Server version: 8.0.16 MySQL Community Server - GPL</span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement</span><br><span class="line">mysql&gt; use hive;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">确认一下现在表COLUMNS_V2和TABLE_PARAMS的编码，都是latin1</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table COLUMNS_V2;</span><br><span class="line">+------------+---------------------------------------------------------------</span><br><span class="line">| Table | Create Table</span><br><span class="line">+------------+---------------------------------------------------------------</span><br><span class="line">| COLUMNS_V2 | CREATE TABLE &#96;columns_v2&#96; (</span><br><span class="line">&#96;CD_ID&#96; bigint(20) NOT NULL,</span><br><span class="line">&#96;COMMENT&#96; varchar(256) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL</span><br><span class="line">&#96;COLUMN_NAME&#96; varchar(767) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL</span><br><span class="line">&#96;TYPE_NAME&#96; mediumtext,</span><br><span class="line">&#96;INTEGER_IDX&#96; int(11) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;CD_ID&#96;,&#96;COLUMN_NAME&#96;),</span><br><span class="line">KEY &#96;COLUMNS_V2_N49&#96; (&#96;CD_ID&#96;),</span><br><span class="line">CONSTRAINT &#96;COLUMNS_V2_FK1&#96; FOREIGN KEY (&#96;CD_ID&#96;) REFERENCES &#96;cds&#96; (&#96;CD_ID&#96;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin1 |</span><br><span class="line">+------------+---------------------------------------------------------------</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table TABLE_PARAMS;</span><br><span class="line">+--------------+-------------------------------------------------------------</span><br><span class="line">| Table | Create Table</span><br><span class="line">+--------------+-------------------------------------------------------------</span><br><span class="line">| TABLE_PARAMS | CREATE TABLE &#96;table_params&#96; (</span><br><span class="line">&#96;TBL_ID&#96; bigint(20) NOT NULL,</span><br><span class="line">&#96;PARAM_KEY&#96; varchar(256) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,</span><br><span class="line">&#96;PARAM_VALUE&#96; mediumtext CHARACTER SET latin1 COLLATE latin1_bin,</span><br><span class="line">PRIMARY KEY (&#96;TBL_ID&#96;,&#96;PARAM_KEY&#96;),</span><br><span class="line">KEY &#96;TABLE_PARAMS_N49&#96; (&#96;TBL_ID&#96;),</span><br><span class="line">CONSTRAINT &#96;TABLE_PARAMS_FK1&#96; FOREIGN KEY (&#96;TBL_ID&#96;) REFERENCES &#96;tbls&#96; (&#96;TB</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin1 |</span><br><span class="line">+--------------+-------------------------------------------------------------</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改这两张表的编码即可；</span><br><span class="line">alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;</span><br><span class="line">alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你的表创建了分区的话就要再执行两条命令：</span><br><span class="line">alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</span><br><span class="line">alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样修改之后以后就可以看到中文注释了。</span><br><span class="line">注意：需要先把之前创建的t2表删除掉，因为之前存储的中文已经是乱码了，无法恢复，删除之后重新创建就可以了</span><br></pre></td></tr></table></figure>

<h3 id="指定列和行分隔符的指定"><a href="#指定列和行分隔符的指定" class="headerlink" title="指定列和行分隔符的指定"></a>指定列和行分隔符的指定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在我们实际工作中，肯定不会像上面一样创建一张非常简单的表，实际中表的字段会比较多，下面我们就来创建一个多字段的表t3</span><br><span class="line">create table t3(</span><br><span class="line">id int comment &#39;ID&#39;,</span><br><span class="line">stu_name string comment &#39;name&#39;,</span><br><span class="line">stu_birthday date comment &#39;birthday&#39;,</span><br><span class="line">online boolean comment &#39;is online&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这样创建没有问题，我们来加载对应的数据文件 &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t3.data ，表中的多列内容之间是使用制表符分割的</span><br><span class="line">看一下表中的数据，会不会有问题呢？</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# pwd</span><br><span class="line">&#x2F;data&#x2F;soft&#x2F;hivedata</span><br><span class="line">[root@bigdata04 hivedata]# more t3.data</span><br><span class="line">1 张三 2020-01-01 true</span><br><span class="line">2 李四 2020-02-01 false</span><br><span class="line">3 王五 2020-03-01 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t3.data&#39; into table t3;</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from t3;</span><br><span class="line">OK</span><br><span class="line">t3.id t3.stu_name t3.stu_birthday t3.online</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br><span class="line"></span><br><span class="line">在这里发现不是我们想要的结果，都是 NULL ，说明数据没有被识别，这是为什么？</span><br><span class="line">注意了，hive在创建表的时候，需要我们指定相应的行分隔符，列分隔符。而我们在创建mysql表的时候，这些都是不需要的，因为它在组织数据的时候，已经规定好了数据的表现形式。</span><br><span class="line">我们刚才在创建t3的时候没有指定相应的分隔符，所以导致使用制表符分割的数据无法被解析。</span><br><span class="line">实际上呢，hive是有默认的分隔符的，默认的行分隔符是 &#39;\n&#39; ，就是换行符，而默认的列分隔符呢，是\001 。</span><br><span class="line">\001 这个是ASCII码中的特殊不常使用的不可见字符，在文本中我们可以通过 ctrl+v 和 ctrl+a 来输入\001 ，这里我们在将 t3.data 改一下，重新上传，再查看表t3。</span><br><span class="line">修改t3.data</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# vi t3.data</span><br><span class="line">1^A张三^A2020-01-01^Atrue</span><br><span class="line">2 李四 2020-02-01 false</span><br><span class="line">3 王五 2020-03-01 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重新加载数据，查询表数据，这个时候发现刚才修改的那条数据被成功解析了</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t3.data&#39; into table t3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Loading data to table default.t3</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.367 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from t3;</span><br><span class="line">OK</span><br><span class="line">t3.id t3.stu_name t3.stu_birthday t3.online</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">1 张三 2020-01-01 true</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">NULL NULL NULL NULL</span><br><span class="line">Time taken: 0.149 seconds, Fetched: 6 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那么问题来了，为了我们能够在上传数据之后让hive表正确识别数据，那我们该如何修改hive表的默认分隔符呢？</span><br><span class="line">其实也是非常的简单，只要我们在创建表的时候指定一下分隔符就可以了，我们把建表语句修改一下，重新创建一个表t3_new</span><br><span class="line"></span><br><span class="line">create table t3_new(</span><br><span class="line">id int comment &#39;ID&#39;,</span><br><span class="line">stu_name string comment &#39;name&#39;,</span><br><span class="line">stu_birthday date comment &#39;birthday&#39;,</span><br><span class="line">online boolean comment &#39;is online&#39;</span><br><span class="line">)row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br><span class="line"></span><br><span class="line">在这需要注意的是， lines terminated by 行分隔符可以忽略不写，但是如果要写的话，只能写到最后面！</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把t3.data文件中的字段分隔符都恢复为制表符，然后重新把数据加载到t3_new表中。</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;t3.data&#39; into table t3_new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看t3_new表中的数据，注意，针对无法识别的数据显示为NULL，因为最后一列为boolean类型，但是在数据中我故意指定了一个数字，所以导致无法解析，但是不会导致数据加载失败，也不会导致查询失败，这就是hive的特性，他不会提前检查数据，只有在使用的时候才会检查数据，如果数据有问题就显示为null，也不报错。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from t3_new;</span><br><span class="line">OK</span><br><span class="line">t3_new.id t3_new.stu_name t3_new.stu_birthday t3_new.online</span><br><span class="line">1 张三 2020-01-01 true</span><br><span class="line">2 李四 2020-02-01 false</span><br><span class="line">3 王五 2020-03-01 NULL</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第4章 Hive核心实战2</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC4%E7%AB%A0-Hive%E6%A0%B8%E5%BF%83%E5%AE%9E%E6%88%98%203.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第八周-第4章-Hive核心实战"><a href="#第八周-第4章-Hive核心实战" class="headerlink" title="第八周 第4章 Hive核心实战"></a>第八周 第4章 Hive核心实战</h1>

<a href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html" title="hadoop实验课-hive">hadoop实验课-hive</a>

<h2 id="Hive中的表类型"><a href="#Hive中的表类型" class="headerlink" title="Hive中的表类型"></a>Hive中的表类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Mysql中没有表类型这个概念，因为它就只有一种表。</span><br><span class="line">但是Hive中是有多种表类型的，我们可以分为四种，内部表、外部表、分区表、桶表</span><br><span class="line">下面来一个一个学习一下这些类型的表</span><br></pre></td></tr></table></figure>



<h3 id="内部表"><a href="#内部表" class="headerlink" title="内部表"></a>内部表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先看内部表</span><br><span class="line">内部表也可以称为受控表</span><br><span class="line">它是Hive中的默认表类型，表数据默认存储在 warehouse 目录中</span><br><span class="line">在加载数据的过程中，实际数据会被移动到warehouse目录中，就是咱们前面在使用load加载数据的时候，数据就会被加载到warehouse中表对应的目录中</span><br><span class="line">当我们删除表时，表中的数据和元数据将会被同时删除</span><br><span class="line">实际上，我们前面创建的表都属于受控表，前面我们已经演示了，创建一张表，其对应就，在metastore中存储表的元数据信息，当我们一旦从hive中删除一张表之后，表中的数据会被删除，在metastore中存储的元数据信息也会被删除。</span><br><span class="line">这就是内部表的特性。</span><br></pre></td></tr></table></figure>

<h3 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">建表语句中包含 External 的表叫外部表</span><br><span class="line">外部表在加载数据的时候，实际数据并不会移动到warehouse目录中，只是与外部数据建立一个链接(映射关系)</span><br><span class="line">表的定义和数据的生命周期互相不约束，数据只是表对hdfs上的某一个目录的引用而已，当删除表定义的时候，数据依然是存在的。仅删除表和数据之间引用关系，所以这种表是比较安全的，就算是我们误删表了，数据还是没丢的</span><br><span class="line">我们来创建一张外部表，看一下外部表的建表语句该如何来写</span><br><span class="line">看一下官方文档</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那根据这个格式我们自己来创建一个外部表</span><br><span class="line">create external table external_table (</span><br><span class="line">key string</span><br><span class="line">) location &#39;&#x2F;data&#x2F;external&#39;;</span><br><span class="line"></span><br><span class="line">表创建完以后到hdfs上查询，如果指定的目录不存在会自动创建</span><br><span class="line">此时到hdfs的 &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F; 目录下查看，是看不到这个表的目录的，因为这个表的目录是我们刚才通过location指定的目录</span><br><span class="line"></span><br><span class="line">我们再来看一下metastore中的tbls表，这里看到external_table的类型是外部表。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bCVdy9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bCVdy9.md.png" alt="bCVdy9.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 hivedata]# more external_table.data</span><br><span class="line">a </span><br><span class="line">b </span><br><span class="line">c </span><br><span class="line">d </span><br><span class="line">e</span><br><span class="line"></span><br><span class="line">加载数据</span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;external_table.dat</span><br><span class="line">Loading data to table default.external_table</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.364 seconds</span><br><span class="line"></span><br><span class="line">此时加载的数据会存储到hdfs的 &#x2F;data&#x2F;external 目录下</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bCZgA0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bCZgA0.md.png" alt="bCZgA0.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来尝试删除这个表，看看会发生什么现象</span><br><span class="line">到hdfs上查看数据，发现之前上传上去的数据还在</span><br><span class="line"></span><br><span class="line">这个其实就是前面我们所的外部表的特性，外部表被删除时，只会删除表的元数据，表中的数据不会被删除。</span><br></pre></td></tr></table></figure>

<h4 id="内部表和外部表相互转化"><a href="#内部表和外部表相互转化" class="headerlink" title="内部表和外部表相互转化"></a>内部表和外部表相互转化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：实际上内外部表是可以互相转化的，需要我们做一下简单的设置即可。</span><br><span class="line">内部表转外部表</span><br><span class="line">alter table tblName set tblproperties (‘external’&#x3D;‘true’);</span><br><span class="line">外部表转内部表</span><br><span class="line">alter table tblName set tblproperties (‘external’&#x3D;‘false’);</span><br><span class="line">(不要根据数据是否在warehouse中，来判断是否是内外部表；外部表不指定location时，删除外部表时，warehouse里的数据也不会被删除；内部表也可指指定数据不放到warehouse里，但删除表时，数据还是会被删除)</span><br><span class="line">在实际工作中，我们在hive中创建的表95%以上的都是外部表</span><br><span class="line">因为大致流程是这样的，我们先通过flume采集数据，把数据上传到hdfs中，然后在hive中创建外部表和hdfs上的数据绑定关系，就可以使用sql查询数据了，所以连load数据那一步都可以省略了，因为是先有数据，才创建的表。</span><br><span class="line">画图分析一下。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bCn2Nt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bCn2Nt.md.png" alt="bCn2Nt.md.png"></a></p>
<h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><h4 id="单个分区字段"><a href="#单个分区字段" class="headerlink" title="单个分区字段"></a>单个分区字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  假设我们的web服务器每天都产生一个日志数据文件，Flume把数据采集到HDFS中，每一天的数据存储到一个日期目录中。我们如果想查询某一天的数据的话，hive执行的时候默认会对所有文件都扫描一遍，然后再过滤出来我们想要查询的那一天的数据</span><br><span class="line">如果你已经采集了一年的数据，这样每次计算都需要把一年的数据取出来，再过滤出来某一天的数据，效率就太低了，会非常浪费资源，所以我们可以让hive在查询的时候，根据你要查询的日期，直接定位到对应的日期目录。这样就可以直接查询满足条件的数据了，效率提升可不止一点点啊，是质的提升。</span><br><span class="line">想要实现这个功能，就需要使用分区表了</span><br><span class="line"></span><br><span class="line">  分区可以理解为分类，通过分区把不同类型的数据放到不同目录中</span><br><span class="line">  分区的标准就是指定分区字段，分区字段可以有一个或多个，根据咱们刚才举的例子，分区字段就是日期</span><br><span class="line">  分区表的意义在于优化查询，查询时尽量利用分区字段，如果不使用分区字段，就会全表扫描，最典型的一个场景就是把天作为分区字段，查询的时候指定天</span><br><span class="line">按照上面的分析，我们来创建一个分区表，使用partitioned by指定区分字段，分区字段的名称为dt，类型为string</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table partition_1 (</span><br><span class="line">id int,</span><br><span class="line">name string</span><br><span class="line">) partitioned by (dt string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;;</span><br><span class="line"></span><br><span class="line">查看表的信息，可以看到分区信息</span><br><span class="line">hive (default)&gt; desc partition_1;</span><br><span class="line">OK</span><br><span class="line">col_name data_type comment</span><br><span class="line">id int</span><br><span class="line">name string</span><br><span class="line">dt string</span><br><span class="line"># Partition Information</span><br><span class="line"># col_name data_type comment</span><br><span class="line">dt string</span><br><span class="line">Time taken: 0.745 seconds, Fetched: 7 row(s)</span><br></pre></td></tr></table></figure>

<h5 id="加载数据时自动创建分区"><a href="#加载数据时自动创建分区" class="headerlink" title="加载数据时自动创建分区"></a>加载数据时自动创建分区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据格式是这样的</span><br><span class="line">[root@bigdata04 hivedata]# more partition_1.data</span><br><span class="line">1 zhangsan</span><br><span class="line">2 lisi</span><br><span class="line"></span><br><span class="line">向分区表中加载数据【注意，在这里添加数据的同时需要指定分区信息】</span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_1.data&#39; into table partition_1 partition(dt&#x3D;&#39;20200101&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">来查看一下hdfs中的信息，刚才创建的分区信息在hdfs中的体现是一个目录。</span><br><span class="line">由于这个分区表属于内部表， 所以目录还在warehouse这个目录中</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220223165814509.png" alt="image-20220223165814509"></p>
<h5 id="手动创建分区"><a href="#手动创建分区" class="headerlink" title="手动创建分区"></a>手动创建分区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当然我也可以手动在表中只创建分区：</span><br><span class="line">hive (default)&gt; alter table partition_1 add partition (dt&#x3D;&#39;2020-01-02&#39;);</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.295 seconds</span><br><span class="line"></span><br><span class="line">此时会发现hdfs中又多了一个目录，只不过这个分区目录中是没有数据的</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bClx0g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bClx0g.md.png" alt="bClx0g.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向这个分区中添加数据，可以使用刚才的load命令或者hdfs的put命令都可以</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_1.data&#39;</span><br><span class="line">Loading data to table default.partition_1 partition (dt&#x3D;2020-01-02)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bC1YHe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bC1YHe.md.png" alt="bC1YHe.md.png"></a></p>
<h5 id="查看表的分区"><a href="#查看表的分区" class="headerlink" title="查看表的分区"></a>查看表的分区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如何查看我的表中目前有哪些分区呢，语法为： show partitions tblName</span><br><span class="line"></span><br><span class="line">hive (default)&gt; show partitions partition_1;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">dt&#x3D;2020-01-01</span><br><span class="line">dt&#x3D;2020-01-02</span><br><span class="line">Time taken: 0.246 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>

<h5 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那问题来了，刚才增加了一个分区，那我能删除一个分区吗？</span><br><span class="line">必须是可以的</span><br><span class="line"></span><br><span class="line">hive (default)&gt; alter table partition_1 drop partition(dt&#x3D;&#39;2020-01-02&#39;);</span><br><span class="line">Dropped the partition dt&#x3D;2020-01-02</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.771 seconds</span><br><span class="line">hive (default)&gt; show partitions partition_1;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">dt&#x3D;2020-01-01</span><br><span class="line">Time taken: 0.174 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，此时分区删除之后，分区中对应的数据也就没有了，因为是内部表，所以分区的数据是会被删掉的</span><br></pre></td></tr></table></figure>

<h4 id="多个分区字段"><a href="#多个分区字段" class="headerlink" title="多个分区字段"></a>多个分区字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚才呢，我们创建了一个分区，但是有的业务需求，需要创建多个分区，可以吗？</span><br><span class="line">当然是可以的！</span><br><span class="line">这里再举一个例子。某学校，有若干二级学院，每年都招很多学生，学校的统计需求大部分会根据年份和学院名称作为条件</span><br><span class="line">所以为了提高后期的统计效率，我们最好是使用年份和学院名称作为分区字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table partition_2 (</span><br><span class="line">id int,</span><br><span class="line">name string</span><br><span class="line">) partitioned by (year int, school string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; desc partition_2;</span><br><span class="line">OK</span><br><span class="line">col_name data_type comment</span><br><span class="line">id int</span><br><span class="line">name string</span><br><span class="line">year int</span><br><span class="line">school string</span><br><span class="line"># Partition Information</span><br><span class="line"># col_name data_type comment</span><br><span class="line">year int</span><br><span class="line">school string</span><br><span class="line">Time taken: 0.097 seconds, Fetched: 9 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据文件内容</span><br><span class="line">[root@bigdata04 hivedata]# more partition_2.data</span><br><span class="line">1 zhangsan</span><br><span class="line">2 lisi</span><br><span class="line">3 wangwu</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：数据文件中只需要有id和name这两个字段的值就可以了，具体year和school这两个分区字段是在加载分区的时候指定的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_2.data&#39; into partition_2 patition(year&#x3D;2020, school&#x3D;&quot;xk&quot;)</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_2.data&#39; into partition_2 patition(year&#x3D;2020, school&#x3D;&quot;english&quot;)</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_2.data&#39; into partition_2 patition(year&#x3D;2019, school&#x3D;&quot;xk&quot;)</span><br><span class="line"></span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;partition_2.data&#39; into partition_2 patition(year&#x3D;2019, school&#x3D;&quot;english&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看分区信息</span><br><span class="line">hive (default)&gt; show partitions partition_2;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">year&#x3D;2019&#x2F;school&#x3D;english</span><br><span class="line">year&#x3D;2019&#x2F;school&#x3D;xk</span><br><span class="line">year&#x3D;2020&#x2F;school&#x3D;english</span><br><span class="line">year&#x3D;2020&#x2F;school&#x3D;xk</span><br></pre></td></tr></table></figure>

<h4 id="查询分区表"><a href="#查询分区表" class="headerlink" title="查询分区表"></a>查询分区表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们讲了如何创建、增加和删除分区</span><br><span class="line">还有一个比较重要的是我们该如何查询分区中的数据呢？其实非常简单，分区相当于我们的一个查询条</span><br><span class="line">件，直接跟在where后面就可以了。</span><br><span class="line"></span><br><span class="line">select * from partition_2; 【全表扫描，没有用到分区的特性】</span><br><span class="line">select * from partition_2 where year &#x3D; 2019;【用到了一个分区字段进行过滤】</span><br><span class="line">select * from partition_2 where year &#x3D; 2019 and school &#x3D; &#39;xk&#39;;【用到了两个分区字段进行过滤】</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这就是分区表的主要操作</span><br><span class="line">其实我们在这使用的分区表可以认为是内部分区表，内部分区表的应用场景也不多，外部分区表的应用场景才多，外部分区表就是在外部表的基础上又增加了分区。</span><br></pre></td></tr></table></figure>



<h4 id="外部分区表"><a href="#外部分区表" class="headerlink" title="外部分区表"></a>外部分区表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部分区表示工作中最常用的表</span><br><span class="line">我们先来创建一个外部分区表</span><br><span class="line"></span><br><span class="line">create external table ex_par(</span><br><span class="line">id int,</span><br><span class="line">name string</span><br><span class="line">)partitioned by(dt string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">location &#39;&#x2F;data&#x2F;ex_par&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其它的操作和前面操作普通分区表是一样的，我们主要演示一下添加分区数据和删除分区的操作添加分区数据</span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;ex_par.data&#39; into table ex_par partition(dt&#x3D;20200101)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hive (default)&gt; show partitions ex_par;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">dt&#x3D;2020-01-01</span><br><span class="line">Time taken: 0.415 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除分区(删除后，此时hdfs上的分区目录还在)</span><br><span class="line">hive (default)&gt; alter table ex_par drop partition(dt&#x3D;&#39;2020-01-01&#39;);</span><br><span class="line">Dropped the partition dt&#x3D;2020-01-01</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.608 seconds</span><br><span class="line">hive (default)&gt; show partitions ex_par;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">Time taken: 0.229 seconds</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：此时分区目录的数据还是在的，因为这个是外部表，所以删除分区也只是删除分区的定义，分区中的数据还是在的，这个和内部分区表就不一样了</span><br><span class="line"></span><br><span class="line">虽然这个分区目录还在，但是刚才我们通过，show partitions 已经查不到分区信息了，所以查询表数据是查不出来的，虽然这个目录确实在这个表对应的hdfs目录中，但是由于这个是一个分区表，这份数据没有和任何分区绑定，所以就查询不出来</span><br><span class="line">这个一定要注意，在实际工作中新手最容易遇到的一个问题就是，针对分区表，通过hdfs的put命令把数据上传上去了，但是却查不到数据，就是因为没有在表中添加分区信息，也就是说你们现在虽然在一起了，但是还没有领结婚证，国家还不承认。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果数据已经上传上去了，如何给他们绑定关系呢？就是使用前面咱们讲的alter add partition命令，注</span><br><span class="line">意在这里需要通过location指定分区目录</span><br><span class="line">hive (default)&gt; alter table ex_par add partition(dt&#x3D;&#39;2020-01-01&#39;) location &#39;&#x2F;data&#x2F;ex_par&#x2F;dt&#x3D;20200101&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时再查询分区数据和表数据，就正常了。</span><br><span class="line">hive (default)&gt; show partitions ex_par;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">dt&#x3D;2020-01-01</span><br><span class="line">Time taken: 0.19 seconds, Fetched: 1 row(s)</span><br><span class="line">hive (default)&gt; select * from ex_par;</span><br><span class="line">OK</span><br><span class="line">ex_par.id ex_par.name ex_par.dt</span><br><span class="line">1 zhangsan 2020-01-01</span><br><span class="line">2 lisi 2020-01-01</span><br><span class="line">3 wangwu 2020-01-01</span><br><span class="line">Time taken: 0.432 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;ex_par.data&#39; into table ex_par  partition(dt&#x3D;&#39;20200101&#39;);</span><br><span class="line">load data .... partition 这条命令做了两个事情，1：上传数据，2：添加分区(绑定数据和分区之间的关系)</span><br><span class="line"></span><br><span class="line">hdfs dfs -mkdir &#x2F;data&#x2F;ex_par&#x2F;20200101</span><br><span class="line">hdfs dfs -put &#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;ex_par.data &#x2F;data&#x2F;ex_par&#x2F;20200101</span><br><span class="line"></span><br><span class="line">alter table ex_par add partition(dt&#x3D;&#39;20200101&#39;) location &#39;&#x2F;data&#x2F;ex_par&#x2F;dt&#x3D;20200101&#39;;</span><br><span class="line">上面这三条命令做了两件事情，1：上传数据 2：添加分区(绑定数据和分区之间的关系)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部分区表是工作中最常见的表</span><br></pre></td></tr></table></figure>

<h3 id="桶表"><a href="#桶表" class="headerlink" title="桶表"></a>桶表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">桶表是对数据进行哈希取值，然后放到不同文件中存储</span><br><span class="line">物理上，每个桶就是表(或分区）里的一个文件</span><br><span class="line">什么时候会用到桶表呢？</span><br><span class="line">举个例子，针对中国的人口，主要集中河南、江苏、山东、广东、四川，其他省份就少的多了，你像西藏</span><br><span class="line">就三四百万，海南也挺少的，如果使用分区表，我们把省份作为分区字段，数据会集中在某几个分区，其</span><br><span class="line">他分区数据就不会很多，那这样对数据存储以及查询不太友好，在计算的时候会出现数据倾斜的问题，计</span><br><span class="line">算效率也不高，我们应该相对均匀的存放数据，从源头上解决，这个时候我们就可以采用分桶的概念，也</span><br><span class="line">就是使用桶表</span><br></pre></td></tr></table></figure>

<h4 id="创建桶表"><a href="#创建桶表" class="headerlink" title="创建桶表"></a>创建桶表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来建立一个桶表：</span><br><span class="line">这个表的意思是按照id进行分桶，分成4个桶。</span><br><span class="line">create table bucket_tb(</span><br><span class="line">id int</span><br><span class="line">) clustered by (id) into 4 buckets;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table bucket_tb(</span><br><span class="line">id int</span><br><span class="line">) clustered by (id) into 4 buckets;</span><br><span class="line"></span><br><span class="line">这个时候往桶中加载数据的时候，就不能使用load data的方式了，而是需要使用其它表中的数据，那么给桶表加载数据的写法就有新的变化了。</span><br><span class="line">类似这样的写法</span><br><span class="line">insert into table … select … from …;</span><br><span class="line">注意，在插入数据之前需要先设置开启桶操作，不然数据无法分到不同的桶里面</span><br><span class="line">其实这里的分桶就是设置reduce任务的数量，因为你分了多少个桶，最终结果就会产生多少个文件，最终结果中文件的数量就和reduce任务的数量是挂钩的</span><br><span class="line">设置完 set hive.enforce.bucketing &#x3D; true 可以自动控制reduce的数量从而适配bucket的个数</span><br><span class="line"></span><br><span class="line">hive (default)&gt; set hive.enforce.bucketing&#x3D;true;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化一个表，用于向桶表中加载数据</span><br><span class="line">原始数据文件是这样的</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hivedata]# more b_source.data</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; create table b_source(id int);</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.262 seconds</span><br><span class="line">hive (default)&gt; load data local inpath &#39;&#x2F;data&#x2F;soft&#x2F;hivedata&#x2F;b_source.data&#39; into table b_source;</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from b_source;</span><br><span class="line">OK</span><br><span class="line">b_source.id</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">Time taken: 0.187 seconds, Fetched: 12 row(s)</span><br></pre></td></tr></table></figure>

<h4 id="向桶表加载数据"><a href="#向桶表加载数据" class="headerlink" title="向桶表加载数据"></a>向桶表加载数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向桶表中加载数据</span><br><span class="line">hive (default)&gt; insert into table bucket_tb select id from b_source where id !&#x3D; NULL;</span><br></pre></td></tr></table></figure>

<h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from bucket_tb;</span><br><span class="line">OK</span><br><span class="line">bucket_tb.id</span><br><span class="line">12</span><br><span class="line">8 </span><br><span class="line">4 </span><br><span class="line">9 </span><br><span class="line">5 </span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">6 </span><br><span class="line">2</span><br><span class="line">11</span><br><span class="line">7 </span><br><span class="line">3</span><br><span class="line">Time taken: 0.183 seconds, Fetched: 12 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按照我们设置的桶的数量为4，这样在hdfs中会存在4个对应的文件，每个文件的大小是相似的</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220223230539806.png" alt="image-20220223230539806"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到hdfs上查看桶表中的文件内容，可以看出是通过对buckets取模确定的</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/bPt0SJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/23/bPt0SJ.md.png" alt="bPt0SJ.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样就实现了数据分桶存储。</span><br><span class="line">桶表的主要作用：</span><br></pre></td></tr></table></figure>

<h4 id="桶表的作用"><a href="#桶表的作用" class="headerlink" title="桶表的作用"></a>桶表的作用</h4><h5 id="数据抽样"><a href="#数据抽样" class="headerlink" title="数据抽样"></a>数据抽样</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据抽样</span><br><span class="line">假如我们使用的是一个大规模的数据集,我们只想去抽取部分数据进行查看.使用bucket表可以变得更加的高效</span><br><span class="line">select * from bucket_tb tablesample(bucket 1 out of 4 on id);</span><br><span class="line">tablesample是抽样语句</span><br><span class="line">语法解析：TABLESAMPLE(BUCKET x OUT OF y ON column)</span><br><span class="line">y尽可能是桶表的bucket数的倍数或者因子，而且y必须要大于等于x</span><br><span class="line">y表示是把桶表中的数据随机分为多少桶</span><br><span class="line">x表示取出第几桶的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bucket 1 out of 4 on id：根据id对桶表中的数据重新分桶，分成4桶，取出第1桶的数据</span><br><span class="line">bucket 2 out of 4 on id：根据id对桶表中的数据重新分桶，分成4桶，取出第2桶的数据</span><br><span class="line">bucket 3 out of 4 on id：根据id对桶表中的数据重新分桶，分成4桶，取出第3桶的数据</span><br><span class="line">bucket 4 out of 4 on id：根据id对桶表中的数据重新分桶，分成4桶，取出第4桶的数据</span><br><span class="line">验证一下效果，这里面四个SQL语句，每个SQL语句取出一个桶的数据，最终的总和就是表中的所有数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from bucket_tb tablesample(bucket 1 out of 4 on id);</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select * from bucket_tb tablesample(bucket 2 out of 4 on id);</span><br></pre></td></tr></table></figure>

<h5 id="提高某些查询效率"><a href="#提高某些查询效率" class="headerlink" title="提高某些查询效率"></a>提高某些查询效率</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：join查询,可以避免产生笛卡尔积的操作</span><br><span class="line">select a.id,a.name,b.addr from a join b on a.id &#x3D; b.id;</span><br><span class="line">如果a表和b表已经是分桶表，而且分桶的字段是id字段，那么做这个操作的时候就不需要再进行全表笛卡尔积了，因为分桶之后相同规则的id已经在相同的文件里面了。</span><br></pre></td></tr></table></figure>



<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hive中，也有视图的概念，那我们都知道视图实际上是一张虚拟的表，是对数据的逻辑表示，它的主要作用是为了降低查询的复杂度。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们在Hive中如何来创建一个视图呢？</span><br><span class="line">需要使用create view命令，</span><br><span class="line">下面我们来创建一个视图</span><br></pre></td></tr></table></figure>

<h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; create view v1 as select t3_new.id,t3_new.stu_name from t3_new;</span><br><span class="line"></span><br><span class="line">此时通过 show tables 也可以查看到这个视图</span><br><span class="line">hive (default)&gt; show tables;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">b_source</span><br><span class="line">bucket_tb</span><br><span class="line">ex_par</span><br><span class="line">partition_1</span><br><span class="line">partition_2</span><br><span class="line">stu</span><br><span class="line">stu2</span><br><span class="line">stu3</span><br><span class="line">student</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t2_bak</span><br><span class="line">t3</span><br><span class="line">t3_new</span><br><span class="line">v1</span><br></pre></td></tr></table></figure>

<h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看视图的结构，显示的内容和表显示的内容是没有区别的</span><br><span class="line"></span><br><span class="line">hive (default)&gt; desc v1;</span><br><span class="line">OK</span><br><span class="line">col_name data_type comment</span><br><span class="line">id int</span><br><span class="line">stu_name string</span><br><span class="line">Time taken: 0.041 seconds, Fetched: 2 row(s)</span><br><span class="line"></span><br><span class="line">通过视图查询数据</span><br><span class="line">hive (default)&gt; select * from v1;</span><br><span class="line">OK</span><br><span class="line">v1.id v1.stu_name</span><br><span class="line">1 张三</span><br><span class="line">2 李四</span><br><span class="line">3 王五</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：视图在&#x2F;user&#x2F;hive&#x2F;warehouse中是不存在的。因为它只是一个虚拟的表</span><br><span class="line"></span><br><span class="line">在元数据metastore中的体现</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/biY1Tf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/24/biY1Tf.md.png" alt="biY1Tf.md.png"></a></p>
<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop view v1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第3章 Hive基础使用</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC3%E7%AB%A0-Hive%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第八周-第3章-Hive基础使用"><a href="#第八周-第3章-Hive基础使用" class="headerlink" title="第八周 第3章 Hive基础使用"></a>第八周 第3章 Hive基础使用</h1><h2 id="Hive的使用方式"><a href="#Hive的使用方式" class="headerlink" title="Hive的使用方式"></a>Hive的使用方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作Hive可以在Shell命令行下操作，或者是使用JDBC代码的方式操作</span><br><span class="line">下面先来看一下在命令行中操作的方式</span><br></pre></td></tr></table></figure>

<h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对命令行这种方式，其实还有两种使用</span><br><span class="line">第一个是使用bin目录下的hive命令，这个是从hive一开始就支持的使用方式</span><br><span class="line">后来又出现一个beeline命令，它是通过HiveServer2服务连接hive，它是一个轻量级的客户端工具，所以</span><br><span class="line">后来官方开始推荐使用这个。</span><br><span class="line">具体使用哪个我觉得属于个人的一个习惯问题，特别是一些做了很多年大数据开发的人，已经习惯了使用</span><br><span class="line">hive命令，如果让我使用beeline会感觉有点别扭</span><br><span class="line">针对我们写的hive sql通过哪一种客户端去执行结果都是一样的，没有任何区别，所以在这里我们使用哪</span><br><span class="line">个就无所谓了。</span><br></pre></td></tr></table></figure>

<h4 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先看第一种，这种直接就可以连进去</span><br><span class="line"></span><br><span class="line">[root@bigdata04 apache-hive-3.1.2-bin]# bin&#x2F;hive</span><br><span class="line"></span><br><span class="line">这里有一行信息提示，从Hive2开始Hive-on-MR就过时了，并且在以后的版本中可能就不维护了，建议</span><br><span class="line">使用其它的计算引擎，例如：spark或者tez</span><br><span class="line">如果你确实想使用MapReduce引擎，那建议你使用Hive1.x的版本。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt; show tables;</span><br><span class="line">hive&gt; create table t1(id int,name string);</span><br><span class="line"></span><br><span class="line">hive&gt; insert into t1(id,name) values(1,&quot;zs&quot;);</span><br><span class="line">此时会产生mapreduce任务</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt; select * from t1;</span><br><span class="line"></span><br><span class="line">查询数据，为什么这时没有产生mapreduce任务呢？因为这个计算太简单了，不需要经过mapreduce任</span><br><span class="line">务就可以获取到结果，直接读取表对应的数据文件就可以了。</span><br><span class="line"></span><br><span class="line">hive&gt; drop table t1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">退出</span><br><span class="line">exit;</span><br><span class="line">quit;</span><br><span class="line">ctrl C</span><br></pre></td></tr></table></figure>

<h4 id="beeline"><a href="#beeline" class="headerlink" title="beeline"></a>beeline</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.启动hiveserver2服务</span><br><span class="line">&#x2F;bin&#x2F;hiveserver2</span><br><span class="line">2.bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;localhost:10000</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，启动hiveserver2服务之后，最下面会输出几行Hive Session ID的信息，一定要等到输出4行以后再使用beeline去连接，否则会提示连接拒绝</span><br><span class="line"></span><br><span class="line">当hiveserver2服务没有真正启动成功之前连接会提示这样的信息</span><br><span class="line"></span><br><span class="line">[root@bigdata04 apache-hive-3.1.2-bin]# bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;localhost</span><br><span class="line">Connecting to jdbc:hive2:&#x2F;&#x2F;localhost:10000</span><br><span class="line">20&#x2F;05&#x2F;06 16:44:21 [main]: WARN jdbc.HiveConnection: Failed to connect to loca</span><br><span class="line">Could not open connection to the HS2 server. Please check the server URI and</span><br><span class="line">Error: Could not open client transport with JDBC Uri: jdbc:hive2:&#x2F;&#x2F;localhost:</span><br><span class="line">Beeline version 3.1.2 by Apache Hive</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">等待hiveserver2服务真正启动之后再连接，此时就可以连接进去了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:hive2:&#x2F;&#x2F;localhost:10000&gt; create table t1(id int,name string);</span><br><span class="line"></span><br><span class="line">0: jdbc:hive2:&#x2F;&#x2F;localhost:10000&gt; insert into t1(id,name) values(1,&quot;zs&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现添加数据报错，提示匿名用户对&#x2F;tmp&#x2F;hadoop-yarn没有写权限</span><br><span class="line">解决方法有两个</span><br><span class="line">1. 给hdfs中的&#x2F;tmp&#x2F;hadoop-yarn设置777权限，让匿名用户具备权限</span><br><span class="line">可以直接给tmp及下面的所有目录设置777权限</span><br><span class="line">hdfs dfs -chmod -R 777 &#x2F;tmp</span><br><span class="line">2. 在启动beeline的时候指定一个对这个目录有操作权限的用户</span><br><span class="line">bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;localhost:10000 -n root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时使用bin&#x2F;hive命令行查看也是可以的，这两种方式维护的是同一份Metastore</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：在beeline后面指定hiveserver2的地址的时候，可以指定当前机器的内网ip也是可以的。(其它机器也可连)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后面我们使用的时候我还是使用hive命令，已经习惯用这个了，还有一个就是大家如果也用这个的话，别</span><br><span class="line">人是不是感觉你也是老司机了，但是你要知道官方目前是推荐使用beeline命令的</span><br><span class="line">在工作中我们如果遇到了每天都需要执行的命令，那我肯定想要把具体的执行sql写到脚本中去执行，但</span><br><span class="line">是现在这种用法每次都需要开启一个会话，好像还没办法把命令写到脚本中。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，hive后面可以使用 -e 命令，这样这条hive命令就可以放到脚本中定时调度执行了因为这样每次hive都会开启一个新的会话，执行完毕以后再关闭这个会话。</span><br><span class="line"></span><br><span class="line">当然了beeline也可以，后面也是跟一个-e参数</span><br></pre></td></tr></table></figure>



<h3 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a>JDBC方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JDBC这种方式也需要连接hiveserver2服务，前面我们已经启动了hiveserver2服务，在这里直接使用就可以了</span><br><span class="line">创建maven项目 db_hive</span><br><span class="line">在pom中添加hive-jdbc的依赖(百度mvn可以下载依赖)</span><br><span class="line"></span><br><span class="line">&lt;!-- hive-jdbc驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.hive&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hive-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开发代码，创建包名： com.imooc.hive</span><br><span class="line">创建类名： HiveJdbcDemo</span><br></pre></td></tr></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.hive;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC代码操作 Hive</span></span><br><span class="line"><span class="comment"> * 注意：需要先启动hiveserver2服务</span></span><br><span class="line"><span class="comment"> * Created by xuwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveJdbcDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//指定hiveserver2的连接</span></span><br><span class="line">        String jdbcUrl = <span class="string">"jdbc:hive2://192.168.206.132:10000"</span>;</span><br><span class="line">    <span class="comment">//获取jdbc连接，这里的user使用root，就是linux中的用户名，password随便指定即</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(jdbcUrl, <span class="string">"root"</span>, <span class="string">"any"</span>)</span><br><span class="line">    <span class="comment">//获取Statement</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">    <span class="comment">//指定查询的sql</span></span><br><span class="line">        String sql = <span class="string">"select * from t1"</span>;</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">        ResultSet res = stmt.executeQuery(sql);</span><br><span class="line">    <span class="comment">//循环读取结果</span></span><br><span class="line">        <span class="keyword">while</span> (res.next())&#123;</span><br><span class="line">            System.out.println(res.getInt(<span class="string">"id"</span>)+<span class="string">"\t"</span>+res.getString(<span class="string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;D:&#x2F;.m2&#x2F;org&#x2F;apache&#x2F;logging&#x2F;log4j&#x2F;log4j-slf4</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;D:&#x2F;.m2&#x2F;org&#x2F;slf4j&#x2F;slf4j-log4j12&#x2F;1.6.1&#x2F;slf4j</span><br><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#multiple_bindings for an explanati</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory</span><br><span class="line"></span><br><span class="line">ERROR StatusLogger No log4j2 configuration file found. Using default configur</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析上面的警告信息，发现现在是有两个log4j的实现类，需要去掉一个，还有就是缺少log4j2的配置文</span><br><span class="line">件，注意log4j2的配置文件是xml格式的，不是properties格式的</span><br><span class="line">1: 去掉多余的log4j依赖，从日志中可以看到日志的路径</span><br><span class="line">这两个去掉哪个都可以，这两个都是hive-jdbc这个依赖带过来的，所以需要修改pom文件中hive-jdbc中</span><br><span class="line">的依赖</span><br><span class="line">&lt;!-- hive-jdbc驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.hive&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hive-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;!-- 去掉 log4j依赖 --&gt;</span><br><span class="line">	&lt;exclusion&gt;</span><br><span class="line">	&lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;exclusion&gt;</span><br><span class="line">&lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2：在项目的resources目录中增加log4j2.xml配置文件</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status&#x3D;&quot;INFO&quot;&gt;</span><br><span class="line">&lt;Appenders&gt;</span><br><span class="line">&lt;Console name&#x3D;&quot;Console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">&lt;PatternLayout pattern&#x3D;&quot;%d&#123;YYYY-MM-dd HH:mm:ss&#125; [%t] %-5p %c&#123;1&#125;:%</span><br><span class="line">&lt;&#x2F;Console&gt;</span><br><span class="line">&lt;&#x2F;Appenders&gt;</span><br><span class="line">&lt;Loggers&gt;</span><br><span class="line">&lt;Root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">&lt;AppenderRef ref&#x3D;&quot;Console&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Root&gt;</span><br><span class="line">&lt;&#x2F;Loggers&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Set命令的使用"><a href="#Set命令的使用" class="headerlink" title="Set命令的使用"></a>Set命令的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在hive命令行中可以使用set命令临时设置一些参数的值，</span><br><span class="line">其实就是临时修改hive-site.xml中参数的值</span><br><span class="line">不过通过set命令设置的参数只在当前会话有效，退出重新打开就无效了</span><br><span class="line">如果想要对当前机器上的当前用户有效的话可以把命令配置在 ~&#x2F;.hiverc文件中</span><br><span class="line">所以总结一下，使用set命令配置的参数是当前会话有效，在~&#x2F;.hiverc文件中配置的是当前机器中的当前用户有效，而在hive-site.xml中配置的则是永久有效了，</span><br><span class="line">在hive-site.xml中有一个参数是 hive.cli.print.current.db ，这个参数可以显示当前所在的数据库名称，默认值为 false 。</span><br></pre></td></tr></table></figure>

<h4 id="显示数据库名"><a href="#显示数据库名" class="headerlink" title="显示数据库名"></a>显示数据库名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt; set hive.cli.print.current.db &#x3D; true;</span><br><span class="line">hive (default)&gt;</span><br></pre></td></tr></table></figure>

<h4 id="显示列属性"><a href="#显示列属性" class="headerlink" title="显示列属性"></a>显示列属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from t1;</span><br><span class="line">OK</span><br><span class="line">1 zs</span><br><span class="line">Time taken: 0.184 seconds, Fetched: 1 row(s)</span><br><span class="line">hive (default)&gt; set hive.cli.print.header &#x3D; true;</span><br><span class="line">hive (default)&gt; select * from t1;</span><br><span class="line">OK</span><br><span class="line">t1.id t1.name</span><br><span class="line">1 zs</span><br><span class="line">Time taken: 0.202 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">些参数属于我自己的个人习惯，所以我希望把这个配置放到我个人用户下面</span><br><span class="line">修改 ~&#x2F;.hiverc ，我们每次在进入hive命令行的时候都会加载当前用户目录下的 .hiverc 文件中的内容</span><br></pre></td></tr></table></figure>

<h4 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们想查看一下hive的历史操作命令如何查看呢？</span><br><span class="line">linux中有一个history命令可以查看历史操作命令hive中也有类似的功能，hive中的历史命令会存储在当前用户目录下的 .hivehistory 目录中</span><br><span class="line"></span><br><span class="line">[root@bigdata04 apache-hive-3.1.2-bin]# more ~&#x2F;.hivehistory</span><br><span class="line">show tables;</span><br><span class="line">exit</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h2 id="Hive的日志配置"><a href="#Hive的日志配置" class="headerlink" title="Hive的日志配置"></a>Hive的日志配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;apache-hive-3.1.2-bin&#x2F;lib&#x2F;log4jSLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;share&#x2F;hadoop&#x2F;common</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们每次进入hive命令行的时候都会出现这么一坨日志，看着很恶心，想要去掉，怎么办呢？</span><br><span class="line">通过分析日志可知，现在也是有重复的日志依赖，所以需要删除一个，</span><br><span class="line">这里是hive中的一个日志依赖包和hadoop中的日志依赖包冲入了，那我们只能去掉Hive的了，因为hadoop是共用的，尽量不要删它里面的东西。</span><br><span class="line">为了保险起见，我们可以使用mv给这个日志依赖包重命名，这样它就不生效了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有就是当我们遇到Hive执行发生错误的时候，我们要学会去查看Hive的日志信息，通过日志的提示来分析，找到错误的根源，帮助我们及时解决错误。</span><br><span class="line">那我们在哪里查看Hive日志呢，我们可以通过配置文件来找到默认日志文件所在的位置。</span><br><span class="line">在hive的conf目录下有一些log4j的模板配置文件，我们需要去修改一下，让它生效。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先是 hive-log4j.properties.template 这个文件，去掉 .template 后缀，修改里面的 property.hive.log.level 和 property.hive.log.dir 参数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 conf]# mv hive-log4j2.properties.template hive-log4j2.propert</span><br><span class="line">[root@bigdata04 conf]# vi hive-log4j2.properties</span><br><span class="line">property.hive.log.level &#x3D; WARN</span><br><span class="line">property.hive.root.logger &#x3D; DRFA</span><br><span class="line">property.hive.log.dir &#x3D; &#x2F;data&#x2F;hive_repo&#x2F;log</span><br><span class="line">property.hive.log.file &#x3D; hive.log</span><br><span class="line">property.hive.perflogger.log.level &#x3D; INFO</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后修改 hive-exec-log4j2.properties.template 这个文件，去掉 .template 后缀修改里面的</span><br><span class="line"></span><br><span class="line">[root@bigdata04 conf]# mv hive-exec-log4j2.properties.template hive-exec-log4</span><br><span class="line">[root@bigdata04 conf]# vi hive-exec-log4j2.properties</span><br><span class="line">property.hive.log.level &#x3D; WARN</span><br><span class="line">property.hive.root.logger &#x3D; FA</span><br><span class="line">property.hive.query.id &#x3D; hadoop</span><br><span class="line">property.hive.log.dir &#x3D; &#x2F;data&#x2F;hive_repo&#x2F;log</span><br><span class="line">property.hive.log.file &#x3D; $&#123;sys:hive.query.id&#125;.log</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样后期分析日志就可以到 &#x2F;data&#x2F;hive_repo&#x2F;log 目录下去查看了。</span><br><span class="line"></span><br><span class="line">提交任务后，在mapreduce产生的一些日志，还是要去yarn的weibu界面看</span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第2章 数据库与数据仓库的区别</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第八周-第2章-数据库与数据仓库的区别"><a href="#第八周-第2章-数据库与数据仓库的区别" class="headerlink" title="第八周 第2章 数据库与数据仓库的区别"></a>第八周 第2章 数据库与数据仓库的区别</h1><h2 id="Hive-VS-Mysql"><a href="#Hive-VS-Mysql" class="headerlink" title="Hive VS Mysql"></a>Hive VS Mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了加深对Hive的理解，下面我们拿Hive和我们经常使用的Mysql做一个对比</span><br><span class="line"></span><br><span class="line">           HIVE 					MySQL</span><br><span class="line">数据存储位置 HDFS 					本地磁盘</span><br><span class="line">数据格式 	用户定义 					系统决定</span><br><span class="line">数据更新 	不支持(不支持修改和删除,新增) 		支持(支持增删</span><br><span class="line">索引 		  有，但较弱，一般很少用 		有，经常使用</span><br><span class="line">执行 		  MapReduce				 	Executor</span><br><span class="line">执行延迟 		高 						低</span><br><span class="line">可扩展性 		高 						低</span><br><span class="line">数据规模 		大 						小</span><br></pre></td></tr></table></figure>

<h2 id="数据库-VS-数据仓库"><a href="#数据库-VS-数据仓库" class="headerlink" title="数据库 VS 数据仓库"></a>数据库 VS 数据仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们说了Hive是一个数据仓库，咱们平时经常使用的mysql属于数据库，那数据库和数据仓库到底有什么区别呢？</span><br><span class="line">下面我们来分析一下</span><br><span class="line">数据库：传统的关系型数据库主要应用在基本的事务处理，例如银行交易之类的场景</span><br><span class="line">数据库支持增删改查这些常见的操作。</span><br><span class="line">数据仓库：主要做一些复杂的分析操作，侧重决策支持，相对数据库而言，数据仓库分析的数据规模要大得多。但是数据仓库只支持查询操作，不支持修改和删除</span><br><span class="line">这些都是明面上的一些区别</span><br><span class="line">其实数据库与数据仓库的本质区别就是 OLTP与OLAP 的区别</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive和关系数据库存储文件的系统不同，hive使用的是hadoop的HDFS（hadoop的分布式文件系统），关系数据库则是服务器本地的文件 系统</span><br></pre></td></tr></table></figure>



<h3 id="OLTP-VS-OLAP"><a href="#OLTP-VS-OLAP" class="headerlink" title="OLTP VS OLAP"></a>OLTP VS OLAP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那这里的OLTO和OLAP又是什么意思呢？</span><br><span class="line">	OLTP(On-Line Transaction Processing)：操作型处理，称为联机事务处理，也可以称为面向交易的处理系统，它是针对具体业务在数据库联机的日常操作，通常对少数记录进行查询、修改。用户较为关心操作的响应时间、数据的安全性、完整性等问题</span><br><span class="line">	OLAP(On-Line Analytical Processing)：分析型处理，称为联机分析处理，一般针对某些主题历史数据进行分析，支持管理决策。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实从字面上来对比，OLTP 和 OLAP 只有一个单词不一样</span><br><span class="line">OLTP侧重于事务，OLAP侧重于分析</span><br><span class="line">所以数据库和数据仓库的特性是不一样的，不过我们平时在使用的时候，可以把Hive作为一个数据库来操作，但是你要知道他们两个是不一样的。数据仓库的概念是比数据库要大的</span><br></pre></td></tr></table></figure>

<h2 id="Hive安装部署"><a href="#Hive安装部署" class="headerlink" title="Hive安装部署"></a>Hive安装部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在我们对Hive有了基本的了解，就想使用Hive分析一下HDFS中的数据，在分析数据之前，我们需要先把Hive安装部署起来</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要安装Hive，那首先要下载Hive的安装包，进入Hive的官网，找到download下载链接</span><br><span class="line"></span><br><span class="line">发现目前hive主要有三大版本，Hive1.x、Hive2.x、Hive3.x</span><br><span class="line">Hive1.x已经2年没有更新了，所以这个版本后续基本不会再维护了，不过这个版本已经迭代了很多年了，也是比较稳定的</span><br><span class="line">Hive2.x最近一直在更新</span><br><span class="line">Hive3.x上次是19年8月份更新的，也算是一直在维护</span><br><span class="line">那我们到底选择哪个版本呢？注意了，在选择Hive版本的时候我们需要注意已有的Hadoop集群的版本。</span><br><span class="line">因为Hive会依赖于Hadoop，所以版本需要兼容才可以。</span><br><span class="line">具体Hive和Hadoop的版本对应关系可以在download页面下的news列表里面看到。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按照这里面说的hive2.x的需要在hadoop2.x版本中运行，hive3.x的需要在hadoop3.x版本中运行。</span><br><span class="line">所以在这里我们最好是使用Hive3.x的版本</span><br><span class="line">那我们就下载hive-3.1.2这个版本，如果想要下载其它历史版本的话这里面还找不到，不过可以使用</span><br><span class="line">apache的一个通用archive地址</span><br><span class="line">https:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;hive&#x2F;</span><br><span class="line">在这里面就可以找到hive的所有历史版本了</span><br></pre></td></tr></table></figure>

<h3 id="hive安装"><a href="#hive安装" class="headerlink" title="hive安装"></a>hive安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面开始安装Hive</span><br><span class="line">Hive相当于Hadoop的客户端工具，安装时不一定非要放在集群的节点中，可以放在任意一个集群客户端节点上都可以</span><br><span class="line">1.下载，上传，解压</span><br><span class="line">2.修改配置文件</span><br><span class="line">需要修改配置文件，进入hive的conf目录中，先对这两个模板文件重命名</span><br><span class="line"></span><br><span class="line">[root@bigdata04 conf]# mv hive-env.sh.template hive-env.sh</span><br><span class="line">[root@bigdata04 conf]# mv hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3：然后再修改这两个文件的内容</span><br><span class="line">注意：在 hive-env.sh 文件的末尾直接增加下面三行内容，【根据实际的路径配置】</span><br><span class="line"></span><br><span class="line">[root@bigdata04 conf]# vi hive-env.sh</span><br><span class="line">.....</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;apache-hive-3.1.2-bin</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：在hive-site.xml文件中根据下面property中的name属性的值修改对应value的值，这些属</span><br><span class="line">性默认里面都是有的，所以都是修改对应的value的值即可</span><br><span class="line">由于这里面需要指定Metastore的地址，Metastore我们使用Mysql，所以需要大家提前安装好</span><br><span class="line">Mysql，我这里使用的是Mysql8.0.16版本，Mysql安装包会提供给大家，建议大家直接在自己的</span><br><span class="line">windows机器中安装Mysql即可，当然了，你在Linux中安装也可以。</span><br><span class="line">我这里Mysql的用户名是root、密码是admin，在下面的配置中会使用到这些信息，大家可以根据</span><br><span class="line">自己实际的用户名和密码修改这里面的value的值</span><br></pre></td></tr></table></figure>

<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于这里面需要指定Metastore的地址，Metastore我们使用Mysql，所以需要大家提前安装好Mysql，我这里使用的是Mysql8.0.16版本，Mysql安装包会提供给大家，建议大家直接在自己的windows机器中安装Mysql即可，当然了，你在Linux中安装也可以。</span><br></pre></td></tr></table></figure>

<a href="/mysql%E5%AE%89%E8%A3%85.html" title="mysql安装">mysql安装</a>

<h3 id="hive配置修改"><a href="#hive配置修改" class="headerlink" title="hive配置修改"></a>hive配置修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我这里Mysql的用户名是root、密码是admin，在下面的配置中会使用到这些信息，大家可以根据自己实际的用户名和密码修改这里面的value的值</span><br></pre></td></tr></table></figure>

<h4 id="hive-site-xml"><a href="#hive-site-xml" class="headerlink" title="hive-site.xml"></a>hive-site.xml</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面这个ip应该错了，应该填自己主机ip；并在mysql中创建hive数据库</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 conf]# vi hive-site.xml</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionURL&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;jdbc:mysql:&#x2F;&#x2F;192.168.0.10:3306&#x2F;hive?serverTimezone&#x3D;Asia&#x2F;Shanghai&lt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;com.mysql.cj.jdbc.Driver&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;root&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;admin&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.querylog.location&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;data&#x2F;hive_repo&#x2F;querylog&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.exec.local.scratchdir&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;data&#x2F;hive_repo&#x2F;scratchdir&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.downloaded.resources.dir&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;data&#x2F;hive_repo&#x2F;resources&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h4 id="导入mysql驱动"><a href="#导入mysql驱动" class="headerlink" title="导入mysql驱动"></a>导入mysql驱动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意mysql驱动包的版本，要和我们安装的版本保持一致：mysql-connector-java-8.0.16.jar</span><br><span class="line"></span><br><span class="line">[root@bigdata04 lib]# ll</span><br><span class="line">........</span><br><span class="line">-rw-r--r--. 1 root root 2293144 Mar 20 2019 mysql-connector-java-8.0.16.jar</span><br></pre></td></tr></table></figure>

<h4 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改bigdata01中的core-site.xml，然后同步到集群中的另外两个节点上(客户端节点不用修改)</span><br><span class="line">如果不增加这个配置，使用beeline连接hive的时候会报错</span><br><span class="line"></span><br><span class="line">注意：bigdata04这个客户端节点上不需要修改这个配置就可以了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 hadoop]# vi core-site.xml</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.proxyuser.root.hosts&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.proxyuser.root.groups&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="初始化Hive的Metastore"><a href="#初始化Hive的Metastore" class="headerlink" title="初始化Hive的Metastore"></a>初始化Hive的Metastore</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava&#x2F;lang&#x2F;String;Ljava&#x2F;lang&#x2F;Object;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.hadoop和hive的两个guava.jar版本不一致</span><br><span class="line">两个位置分别位于下面两个目录：</span><br><span class="line">- &#x2F;usr&#x2F;local&#x2F;hive&#x2F;lib&#x2F;guava-19.0.jar</span><br><span class="line">- &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-27.0-jre.jar</span><br><span class="line"></span><br><span class="line">直接把hive里的移走，把hadoop里的复制过来，完美解决</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.SLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;apache-hive-3.1.2-bin&#x2F;lib&#x2F;log4j-slf4j-impl-2.10.0.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.2&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;slf4j-log4j12-1.7.25.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这两个jar不同，但方法有相同的，不用管</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.</span><br><span class="line">[root@bigdata04 apache-hive-3.1.2-bin]# bin&#x2F;schematool -dbType mysql -initSch</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: com.ctc.wstx.exc.WstxP</span><br><span class="line">at [row,col,system-id]: [3215,96,&quot;file:&#x2F;data&#x2F;soft&#x2F;apache-hive-3.1.2-bin&#x2F;conf</span><br><span class="line"></span><br><span class="line">但是执行之后发现报错了，提示hive-site.xml文件中的第3215行内容有问题</span><br><span class="line">其实这个是原始配置文件本身就有的问题，最直接的就是把这一行直接删掉，删除之后的效果如下：其实就是把hive.txn.xlock.iow对应的description标签内容删掉，这样就可以了</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.txn.xlock.iow&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;description&gt;</span><br><span class="line">&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.</span><br><span class="line">[root@bigdata04 apache-hive-3.1.2-bin]# bin&#x2F;schematool -dbType mysql -initSchema</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;apache-hive-3.1.2-bin&#x2F;lib&#x2F;log4j-slf4j-impl-2.10.0.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.2&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;slf4j-log4j12-1.7.25.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Metastore connection URL:        jdbc:mysql:&#x2F;&#x2F;192.168.206.1:3306&#x2F;hive?serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">Metastore Connection Driver :    com.mysql.cj.jdbc.Driver</span><br><span class="line">Metastore connection User:       root</span><br><span class="line">org.apache.hadoop.hive.metastore.HiveMetaException: Failed to get schema version.</span><br><span class="line">Underlying cause: com.mysql.cj.jdbc.exceptions.CommunicationsException : Communications link failure</span><br><span class="line"></span><br><span class="line">The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</span><br><span class="line">SQL Error code: 0</span><br><span class="line">Use --verbose for detailed stacktrace.</span><br><span class="line">*** schemaTool failed ***</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开&#x2F;usr&#x2F;local&#x2F;hive&#x2F;conf&#x2F;hive-site.xml</span><br><span class="line"></span><br><span class="line">hive配置文件hive-site.xml中ConnectionURL中加上serverTimezone&#x3D;GMT就可以了。</span><br><span class="line"></span><br><span class="line">2.&lt;name&gt;javax.jdo.option.ConnectionURL&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;jdbc:mysql:&#x2F;&#x2F;192.168.52.26:3306&#x2F;hive&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第八周 第1章 快速了解Hive</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AB%E5%91%A8-%E7%AC%AC1%E7%AB%A0-%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3Hive.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第八周-第1章-快速了解Hive"><a href="#第八周-第1章-快速了解Hive" class="headerlink" title="第八周 第1章 快速了解Hive"></a>第八周 第1章 快速了解Hive</h1><h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hive是建立在Hadoop上的数据仓库基础构架。它提供了一系列的工具，可以用来进行数据提取转化加载，可以简称为ETL。</span><br><span class="line">Hive 定义了简单的类SQL查询语言，称为HQL，它允许熟悉SQL的用户直接查询Hadoop中的数据，同时，这个语言也允许熟悉MapReduce的开发者开发自定义的mapreduce任务来处理内建的SQL函数无法完成的复杂的分析任务。</span><br><span class="line">Hive中包含的有SQL解析引擎，它会将SQL语句转译成M&#x2F;R Job,然后在Hadoop中执行。</span><br><span class="line">通过这里的分析我们可以了解到Hive可以通过sql查询Hadoop中的数据，并且sql底层也会转化成mapreduce任务，所以hive是基于hadoop的。</span><br></pre></td></tr></table></figure>



<h2 id="Hive的数据存储"><a href="#Hive的数据存储" class="headerlink" title="Hive的数据存储"></a>Hive的数据存储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hive的数据存储基于Hadoop的 HDFS</span><br><span class="line">Hive没有专门的数据存储格式</span><br><span class="line">Hive默认可以直接加载文本文件（TextFile），还支持SequenceFile、RCFile等文件格式</span><br><span class="line">针对普通文本数据，我们在创建表时，只需要指定数据的列分隔符与行分隔符，Hive即可解析里面的数据</span><br></pre></td></tr></table></figure>



<h2 id="Hive的系统架构"><a href="#Hive的系统架构" class="headerlink" title="Hive的系统架构"></a>Hive的系统架构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来分析一下Hive的系统架构</span><br><span class="line">看这个图，下面表示是Hadoop集群，上面是Hive，从这也可以看出来Hive是基于Hadoop的。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HLJa4O" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/20/HLJa4O.md.png" alt="HLJa4O.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户接口，包括 CLI、JDBC&#x2F;ODBC、WebGUI</span><br><span class="line">CLI，即Shell命令行，表示我们可以通过shell命令行操作Hive</span><br><span class="line">JDBC&#x2F;ODBC 是 Hive 的Java操作方式，与使用传统数据库JDBC的方式类似</span><br><span class="line">WebUI是通过浏览器访问 Hive</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元数据存储(Metastore)，注意：这里的存储是名词，Metastore表示是一个存储系统</span><br><span class="line">Hive中的元数据包括表的相关信息，Hive会将这些元数据存储在Metastore中，目前Metastore只支持 mysql、derby</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Driver：包含：编译器、优化器、执行器</span><br><span class="line">编译器、优化器、执行器可以完成 Hive的 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划最终存储在 HDFS 中，并在随后由MapReduce 调用执行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop：Hive会使用 HDFS 进行存储，利用 MapReduce 进行计算</span><br><span class="line">Hive 的数据存储在 HDFS 中，大部分的查询由 MapReduce 完成（特例 select * from table 不会生</span><br><span class="line">成 MapRedcue 任务，如果在SQL语句后面再增加where过滤条件就会生成MapReduce任务了。）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  在这有一点需要注意的，就是从Hive2开始，其实官方就不建议默认使用MapReduce引擎了，而是建议使用Tez引擎或者是Spark引擎，不过目前一直到最新的3.x版本中mapreduce还是默认的执行引擎</span><br><span class="line">  其实大数据计算引擎是有几个发展阶段的，</span><br><span class="line">  首先是第一代大数据计算引擎：MapReduce</span><br><span class="line">  接着是第二代大数据计算引擎：Tez，Tez的存在感比较低，它是源于MapReduce，主要和Hive结合在一起使用，它的核心思想是将Map和Reduce两个操作进一步拆分，这些分解后的元操作可以灵活组合，产生新的操作，这些操作经过一些控制程序组装后，可以形成一个大的作业，这样可以提高计算效率，我们在实际工作中Hive使用的就是 Tez引擎，替换Hive的执行引擎也很简单，只需要把Tez安装好（Tez也是支持在YARN上执行的），然后到Hive中配置一下就可以了，不管使用什么引擎，不会对我们使用hive造</span><br><span class="line">成什么影响，也就说对上层的使用没有影响</span><br><span class="line">  接着是第三代大数据计算引擎：Spark，Spark在当时属于一个划时代的产品，改变了之前基于磁盘的计算思路，而是采用内存计算，就是说Spark把数据读取过来以后，中间的计算结果是不会进磁盘的，一直到出来最终结果，才会写磁盘，这样就大大提高了计算效率，而MapReduce的中间结果是会写磁盘的，所以效率没有Spark高。Spark的执行效率号称比MapReduce 快100倍，当然这需要在一定数据规模下才会差这么多，如果我们就计算几十兆或者几百兆的文件，你去对比发现其实也不会差多少，后面我们也会学到Spark这个基于内存的大数据计算引擎</span><br><span class="line"></span><br><span class="line">注意：spark也是支持在YARN上执行的</span><br><span class="line"></span><br><span class="line">其实目前还有第四代大数据计算引擎，：Flink，Flink是一个可以支持纯实时数据计算的计算引擎，在实时计算领域要优于Saprk，Flink和Spark其实是有很多相似之处，在某些方面他们两个属于互相参考，互相借鉴，互相成长，Flink后面我们也会学到，等后面我们讲到这个计算引擎的时候再详细分析。</span><br><span class="line"></span><br><span class="line">注意：Flink也是支持在YARN上执行的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以发现没有，MapReduce、Tez、Spark、Flink这些计算引擎都是支持在yarn上执行的，所以说Hdoop2中对架构的拆分是非常明智的。</span><br><span class="line">解释完这些名词之后其实我们就对这个架构有了一个基本理解，</span><br><span class="line">再看来这个图</span><br><span class="line">用户通过接口传递Hive SQL，然后经过Driver对SQL进行分析、编译，生成查询计划，查询计划会存储在HDFS中，然后再通过MapReduce进行计算出结果，这就是整个大的流程。</span><br><span class="line">其实在这里我们可以发现，Hive这个哥们是既不存储数据，也不计算数据，这些活都给了Hadoop来干，Hive底层最核心的东西其实就是Driver这一块，将SQL语句解析为最终的查询计划。</span><br></pre></td></tr></table></figure>


<h3 id="Metastore"><a href="#Metastore" class="headerlink" title="Metastore"></a>Metastore</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接着来看一下Hive中的元数据存储，Metastore</span><br><span class="line">Metastore是Hive元数据的集中存放地。</span><br><span class="line">Hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在的hdfs目录等</span><br><span class="line">Metastore默认使用内嵌的derby数据库</span><br><span class="line">Derby数据库的缺点：在同一个目录下一次只能打开一个会话</span><br><span class="line">使 用 derby 存 储 方 式 时 ， Hive 会 在 当 前 目 录 生 成 一 个 derby.log 文 件 和 一 个 metastore_db 目 录 ，metastore_db里面会存储具体的元数据信息</span><br><span class="line">如果下次切换到一个另一个新目录访问Hive，则会重新生成derby.log文件metastore_db目录，这样就没有办法使用之前的元数据信息了。</span><br><span class="line">推荐使用MySQL作为外置存储引擎，可以支持多用户同时访问以及元数据共享。</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>写linux的shell脚本方法积累</title>
    <url>/%E5%86%99linux%E7%9A%84shell%E8%84%9A%E6%9C%AC%E6%96%B9%E6%B3%95%E7%A7%AF%E7%B4%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="写linux的shell脚本方法积累"><a href="#写linux的shell脚本方法积累" class="headerlink" title="写linux的shell脚本方法积累"></a>写linux的shell脚本方法积累</h1><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 循环向文件中生成数据</span><br><span class="line"># 下面括号里没空格会报错</span><br><span class="line">while [ &quot;1&quot;&#x3D;&quot;1&quot; ]</span><br><span class="line">do</span><br><span class="line">        # 获取当前时间戳</span><br><span class="line">        curr_time&#x3D;&#96;date +%s&#96;</span><br><span class="line">        # 获取当前主机名</span><br><span class="line">        name&#x3D;&#96;hostname&#96;</span><br><span class="line">        echo $&#123;name&#125;_$&#123;curr_time&#125; &gt;&gt; &#x2F;data&#x2F;log&#x2F;networkLogUploadToHdfsExample&#x2F;access.l</span><br><span class="line">og</span><br><span class="line">        sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="案例二-写Flume进程的监控脚本"><a href="#案例二-写Flume进程的监控脚本" class="headerlink" title="案例二 写Flume进程的监控脚本"></a>案例二 写Flume进程的监控脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">monlist &#x3D; &#96;cat monlist.conf&#96;</span><br><span class="line">echo &quot;start check&quot;</span><br><span class="line">for item in $&#123;monlist&#125;</span><br><span class="line">do</span><br><span class="line">    # 设置字段分隔符</span><br><span class="line">    OLD_IFS&#x3D;$IFS</span><br><span class="line">    IFS&#x3D;&quot;&#x3D;&quot;</span><br><span class="line">    # 把一行内容转成多列[数组] </span><br><span class="line">    arr&#x3D;($item) </span><br><span class="line">    # 获取等号左边的内容</span><br><span class="line">    name&#x3D;$&#123;arr[0]&#125;</span><br><span class="line">    # 获取等号右边的内容</span><br><span class="line">    script&#x3D;$&#123;arr[1]&#125;</span><br><span class="line">    echo &quot;time is:&quot;&#96;date +&quot;%Y-%m-%d %H:%M:%S&quot;&#96;&quot; check &quot;$name</span><br><span class="line">    if [ &#96;jps -m|grep $name | wc -l&#96; -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">    # 发短信或者邮件告警</span><br><span class="line">    echo &#96;date +&quot;%Y-%m-%d %H:%M:%S&quot;&#96;$name &quot;is none&quot;</span><br><span class="line">    sh -x .&#x2F;$&#123;script&#125;</span><br><span class="line">    fi</span><br><span class="line">    done</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 myconfFile]# vim monlist.conf </span><br><span class="line">load-failover.conf &#x3D; startExample.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 myconfFile]# vim startExample.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">flume_path &#x3D; &#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin</span><br><span class="line">nohup $&#123;flume_path&#125;&#x2F;bin&#x2F;flume-ng --name a1 --conf $&#123;flume_path&#125;&#x2F;conf --conf-file $&#123;flume_</span><br><span class="line">path&#125;&#x2F;conf&#x2F;myconfFile&#x2F;load-failover.conf &amp;</span><br></pre></td></tr></table></figure>

<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 sparkjars]# vi wordCountJob.sh</span><br><span class="line">spark-submit \</span><br><span class="line">--class com.imooc.scala.WordCountScala \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--num-executors 1 \</span><br><span class="line">db_spark-1.0-SNAPSHOT-jar-with-dependencies.jar \</span><br><span class="line">hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;test&#x2F;hello.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想写成多行时，在上一行+空格+\</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第2章 极速上手Flume使用 采集网络日志上传到HDFS</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC2%E7%AB%A0-%E6%9E%81%E9%80%9F%E4%B8%8A%E6%89%8BFlume%E4%BD%BF%E7%94%A8-%E9%87%87%E9%9B%86%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97%E4%B8%8A%E4%BC%A0%E5%88%B0HDFS.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第七周-第2章-极速上手Flume使用-采集网络日志上传到HDFS"><a href="#第七周-第2章-极速上手Flume使用-采集网络日志上传到HDFS" class="headerlink" title="第七周 第2章 极速上手Flume使用 采集网络日志上传到HDFS"></a>第七周 第2章 极速上手Flume使用 采集网络日志上传到HDFS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们讲了两个案例的使用，接下来看一个稍微复杂一点的案例：</span><br><span class="line">需求是这样的，</span><br><span class="line">1. 将A和B两台机器实时产生的日志数据汇总到机器C中</span><br><span class="line">2. 通过机器C将数据统一上传至HDFS的指定目录中</span><br><span class="line">注意：HDFS中的目录是按天生成的，每天一个目录</span><br><span class="line">看下面这个图，来详细分析一下</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HTp8o9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/HTp8o9.md.png" alt="HTp8o9.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据刚才的需求分析可知，我们一共需要三台机器</span><br><span class="line">这里使用bigdata02和bigdata03采集当前机器上产生的实时日志数据，统一汇总到bigdata04机器上。</span><br><span class="line">其中bigdata02和bigdata03中的source使用基于file的source，ExecSource，因为要实时读取文件中的新增数据channel在这里我们使用基于内存的channel，因为这里是采集网站的访问日志，就算丢一两条数据对整体结果影响也不大，我们只希望采集到的数据可以快读进入hdfs中，所以就选择了基于内存的channel。</span><br><span class="line">由于bigdata02和bigdata03的数据需要快速发送到bigdata04中，为了快速发送我们可以通过网络直接传输，sink建议使用avrosink，avro是一种数据序列化系统，经过它序列化的数据传输起来效率更高，并且它对应的还有一个avrosource，avrosink的数据可以直接发送给avrosource，所以他们可以无缝衔接。</span><br><span class="line">这样bigdata04的source就确定了 使用avrosource、channel还是基于内存的channel，sink就使用hdfssink，因为是要向hdfs中写数据的。</span><br><span class="line">这里面的组件，只有execsource、avrosource、avrosink我们还没有使用过，其他的组件都使用过了。</span><br><span class="line">最终需要在每台机器上启动一个agent，启动的时候需要注意先后顺序，先启动bigdata04上面的，再启动bigdata02和bigdata03上面的。</span><br></pre></td></tr></table></figure>

<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="bigdata02"><a href="#bigdata02" class="headerlink" title="bigdata02"></a>bigdata02</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h3 id="bigdata03"><a href="#bigdata03" class="headerlink" title="bigdata03"></a>bigdata03</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：bigdata02和bigdata03中配置的a1.sinks.k1.port 的值45454需要和bigdata04中配置的一致</span><br></pre></td></tr></table></figure>

<h3 id="bigdata02-conf"><a href="#bigdata02-conf" class="headerlink" title="bigdata02 conf"></a>bigdata02 conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata02 conf]# vim file-to-avro-101.conf</span><br><span class="line"></span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;data&#x2F;log&#x2F;networkLogUploadToHdfsExample&#x2F;access.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line"># ip也行</span><br><span class="line">a1.sinks.k1.hostname &#x3D; bigdata04</span><br><span class="line"># 端口没用过的就行</span><br><span class="line">a1.sinks.k1.port &#x3D; 45454</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure>



<h3 id="bigdata03-conf"><a href="#bigdata03-conf" class="headerlink" title="bigdata03 conf"></a>bigdata03 conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata03 conf]# vim file-to-avro-102.conf</span><br><span class="line"></span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;data&#x2F;log&#x2F;networkLogUploadToHdfsExample&#x2F;access.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line"># ip也行</span><br><span class="line">a1.sinks.k1.hostname &#x3D; bigdata04</span><br><span class="line"># 端口没用过的就行</span><br><span class="line">a1.sinks.k1.port &#x3D; 45454</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure>



<h3 id="bigdata04-conf"><a href="#bigdata04-conf" class="headerlink" title="bigdata04 conf"></a>bigdata04 conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这台机器我们已经安装过Flume了，所以直接配置Agent即可</span><br><span class="line">在指定Agent中sink配置的时候注意，我们的需求是需要按天在hdfs中创建目录，并把当天的数据上传到当天的日期目录中，这也就意味着hdfssink中的path不能写死，需要使用变量，动态获取时间，查看官方文档可知，在hdfs的目录中需要使用%Y%m%d</span><br><span class="line">在这还有一点需要注意的，因为我们这里需要抽取时间，这个时间其实是需要从数据里面抽取，咱们前面说过数据的基本单位是Event，Event是一个对象，后面我们会详细分析，在这里大家先知道它里面包含的既有我们采集到的原始的数据，还有一个header属性，这个header属性是一个key-value结构的，我们现在抽取时间就需要到event的header中抽取，但是默认情况下event的header中是没有日期的，强行抽取是会报错的，会提示抽取不到，返回空指针异常。</span><br><span class="line">java.lang.NullPointerException: Expected timestamp in the Flume event headers, but it was n</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那如何向header中添加日期呢？ 其实官方文档中也说了，可以使用hdfs.useLocalTimeStamp或者时间拦截器，时间拦截器我们后面会讲，暂时最简单直接的方式就是使用hdfs.useLocalTimeStamp，这个属性的值默认为false，需要改为true。</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220218163730584.png" alt="image-20220218163730584"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 conf]# vim avro-to-hdfs.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 45454</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;networkLogUploadToHdfsExaple&#x2F;%Y%m%d</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; access-</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix&#x3D;.log</span><br><span class="line">a1.sinks.k1.hdfs.fileType&#x3D;DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat&#x3D;Text</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval&#x3D;3600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize&#x3D;134217728</span><br><span class="line">a1.sinks.k1.hdfs.rollCount&#x3D;0</span><br><span class="line">#(不设置前面使用时间变量会报错)使用event header里的timestamp要麻烦些</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp&#x3D;true</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel&#x3D;c1</span><br></pre></td></tr></table></figure>



<h2 id="模拟数据源"><a href="#模拟数据源" class="headerlink" title="模拟数据源"></a>模拟数据源</h2><h3 id="bigdata02-1"><a href="#bigdata02-1" class="headerlink" title="bigdata02"></a>bigdata02</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata02 log]# vim SimulateData.sh </span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 循环向文件中生成数据</span><br><span class="line">while [ &quot;1&quot;&#x3D;&quot;1&quot; ]</span><br><span class="line">do</span><br><span class="line">        # 获取当前时间戳</span><br><span class="line">        curr_time&#x3D;&#96;date +%s&#96;</span><br><span class="line">        # 获取当前主机名</span><br><span class="line">        name&#x3D;&#96;hostname&#96;</span><br><span class="line">        echo $&#123;name&#125;_$&#123;curr_time&#125; &gt;&gt; &#x2F;data&#x2F;log&#x2F;networkLogUploadToHdfsExample&#x2F;access.log</span><br><span class="line">        sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<h3 id="bigdata03-1"><a href="#bigdata03-1" class="headerlink" title="bigdata03"></a>bigdata03</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure>



<h2 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来开始启动相关的服务进程</span><br><span class="line">首先启动bigdata04上的agent服务</span><br><span class="line">接下来启动bigdata-02上的agent服务和shell脚本</span><br><span class="line">最后启动bigdata-03上的agent服务和shell脚本</span><br></pre></td></tr></table></figure>



<h3 id="启动bigdata04"><a href="#启动bigdata04" class="headerlink" title="启动bigdata04"></a>启动bigdata04</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h3 id="启动bigdata02"><a href="#启动bigdata02" class="headerlink" title="启动bigdata02"></a>启动bigdata02</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h3 id="启动bigdata03"><a href="#启动bigdata03" class="headerlink" title="启动bigdata03"></a>启动bigdata03</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.shell脚本</span><br><span class="line">while [ 1&#x3D;1 ] </span><br><span class="line"># 两个空格不能少</span><br><span class="line"></span><br><span class="line">2.flume配置</span><br><span class="line">注释不要写在语句的同一行后面</span><br><span class="line"></span><br><span class="line">3.启动agent时</span><br><span class="line">先启动bigdata02,bigdata03和先关bigdata04都会造成数据流失</span><br></pre></td></tr></table></figure>

<h2 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h2><p><a href="https://imgtu.com/i/HTfiPs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/HTfiPs.md.png" alt="HTfiPs.md.png"></a></p>
<p><a href="https://imgtu.com/i/HTfGM6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/HTfGM6.md.png" alt="HTfGM6.md.png"></a><br><a href="https://imgtu.com/i/HTf3xx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/HTf3xx.md.png" alt="HTf3xx.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：启动之后稍等一会就可以看到数据了，我们观察数据的变化，会发现hdfs中数据增长的不是很快，它会每隔一段时间添加一批数据，实时性好像没那么高？</span><br><span class="line">这是因为avrosink中有一个配置batch-size，它的默认值是100，也就是每次发送100条数据，如果数据不够100条，则不发送。</span><br><span class="line">具体这个值设置多少合适，要看你source数据源大致每秒产生多少数据，以及你希望的延迟要达到什么程度，如果这个值设置太小的话，会造成sink频繁向外面写数据，这样也会影响性能。</span><br><span class="line">最终，依次停止bigdata02、bigdata03中的服务，最后停止bigdata04中的服务</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HTIFTU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/HTIFTU.md.png" alt="HTIFTU.md.png"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第2章 极速上手Flume使用 采集文件内容到HDFS</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC2%E7%AB%A0-%E6%9E%81%E9%80%9F%E4%B8%8A%E6%89%8BFlume%E4%BD%BF%E7%94%A8-%E9%87%87%E9%9B%86%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%B0HDFS.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第2章-极速上手Flume使用-采集文件内容到HDFS"><a href="#第2章-极速上手Flume使用-采集文件内容到HDFS" class="headerlink" title="第2章 极速上手Flume使用 采集文件内容到HDFS"></a>第2章 极速上手Flume使用 采集文件内容到HDFS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来看一个工作中的典型案例：</span><br><span class="line">采集文件内容上传至HDFS</span><br><span class="line">需求：采集目录中已有的文件内容，存储到HDFS</span><br><span class="line">分析：source是要基于目录的，channel建议使用file，可以保证不丢数据，sink使用hdfs</span><br><span class="line">下面要做的就是配置Agent了，可以把example.conf拿过来修改一下，新的文件名为file-to-hdfs.conf</span><br><span class="line">首先是基于目录的source，咱们前面说过，Spooling Directory Source可以实现目录监控来看一下这个Spooling Directory Source</span><br></pre></td></tr></table></figure>

<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><h3 id="Spooling-Directory-Source"><a href="#Spooling-Directory-Source" class="headerlink" title="Spooling Directory Source"></a>Spooling Directory Source</h3><p><a href="https://imgtu.com/i/HI4GDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/HI4GDS.md.png" alt="HI4GDS.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channels和type肯定是必填的，还有一个是spoolDir，就是指定一个监控的目录</span><br><span class="line">看他下面的案例，里面还多指定了一个fileHeader，这个我们暂时也用不到，后面等我们讲了Event之后</span><br><span class="line">大家就知道这个fileHeader可以干什么了，先记着有这个事把。</span><br></pre></td></tr></table></figure>

<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来是channel了</span><br><span class="line">channel在这里使用基于文件的，可以保证数据的安全性</span><br><span class="line">如果针对采集的数据，丢个一两条对整体结果影响不大，只要求采集效率，那么这个时候完全可以使用基于内存的channel</span><br><span class="line">咱们前面的例子中使用的是基于内存的channel，下面我们到文档中找一下基于文件的channel</span><br></pre></td></tr></table></figure>

<h3 id="File-Channel"><a href="#File-Channel" class="headerlink" title="File Channel"></a>File Channel</h3><p><a href="https://imgtu.com/i/HI5YM6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/HI5YM6.md.png" alt="HI5YM6.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据这里的例子可知，主要配置checkpointDir和dataDir，因为这两个目录默认会在用户家目录下生成，建议修改到其他地方</span><br><span class="line">checkpointDir是存放检查点目录</span><br><span class="line">data是存放数据的目录</span><br></pre></td></tr></table></figure>

<h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后是sink</span><br><span class="line">因为要向hdfs中输出数据，所以可以使用hdfssink</span><br></pre></td></tr></table></figure>

<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p><a href="https://imgtu.com/i/HIozKx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/HIozKx.md.png" alt="HIozKx.md.png"></a></p>
<p><a href="https://imgtu.com/i/HITpqK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/HITpqK.md.png" alt="HITpqK.md.png"></a></p>
<p><a href="https://imgtu.com/i/HITCVO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/HITCVO.md.png" alt="HITCVO.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs.path是必填项，指定hdfs上的存储目录</span><br><span class="line">看这里例子中还指定了filePrefix参数，这个是一个文件前缀，会在hdfs上生成的文件前面加上这个前缀，这个属于可选项，有需求的话可以加上</span><br><span class="line">一般在这我们需要设置writeFormat和fileType这两个参数</span><br><span class="line">默认情况下writeFormat的值是Writable，建议改为Text，看后面的解释，如果后期想使用hive或者impala操作这份数据的话，必须在生成数据之前设置为Text，Text表示是普通文本数据</span><br><span class="line">fileType默认是SequenceFile，还支持DataStream 和 CompressedStream ，DataStream 不会对输出数据进行压缩，CompressedStream 会对输出数据进行压缩，在这里我们先不使用压缩格式的，所以选择DataStream</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">除了这些参数以外，还有三个也比较重要</span><br><span class="line">hdfs.rollInterval、hdfs.rollSize和hdfs.rollCount</span><br><span class="line">hdfs.rollInterval默认值是30，单位是秒，表示hdfs多长时间切分一个文件，因为这个采集程序是一直运行的，只要有新数据，就会被采集到hdfs上面，hdfs默认30秒钟切分出来一个文件，如果设置为0表示不按时间切文件</span><br><span class="line">hdfs.rollSize默认是1024，单位是字节，最终hdfs上切出来的文件大小都是1024字节，如果设置为0表示不按大小切文件</span><br><span class="line">hdfs.rollCount默认设置为10，表示每隔10条数据切出来一个文件，如果设置为0表示不按数据条数切文件</span><br><span class="line">这三个参数，如果都设置的有值，哪个条件先满足就按照哪个条件都会执行。</span><br><span class="line">在实际工作中一般会根据时间或者文件大小来切分文件，我们之前在工作中是设置的时间和文件大小相结合，时间设置的是一小时，文件大小设置的128M，这两个哪个满足执行哪个</span><br><span class="line">所以针对hdfssink的配置最终是这样的</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line"></span><br><span class="line"># Describe&#x2F;configure the source</span><br><span class="line">a1.sources.r1.type &#x3D; spooldir</span><br><span class="line">a1.sources.r1.spoolDir &#x3D; &#x2F;data&#x2F;log&#x2F;studentDir</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type &#x3D; file</span><br><span class="line">a1.channels.c1.checkpointDir &#x3D; &#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;studentDir&#x2F;chec</span><br><span class="line">kpoint</span><br><span class="line">a1.channels.c1.dataDirs &#x3D; &#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;studentDir&#x2F;data</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;192.168.206.129:9000&#x2F;flume&#x2F;studentDir</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; stu-</span><br><span class="line">a1.sinks.k1.hdfs.fileType &#x3D; DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat &#x3D; Text</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval &#x3D; 3600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize &#x3D; 134217728</span><br><span class="line">a1.sinks.k1.hdfs.rollCount &#x3D; 0</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure>

<h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面就可以启动agent了，在启动agent之前，先初始化一下测试数据</span><br><span class="line">创建&#x2F;data&#x2F;log&#x2F;studentDir目录，然后在里面添加一个文件，class1.dat</span><br><span class="line">class1.dat中存储的是学生信息，学生姓名、年龄、性别</span><br><span class="line"></span><br><span class="line">[root@bigdata04 ~]# mkdir -p &#x2F;data&#x2F;log&#x2F;studentDir</span><br><span class="line">[root@bigdata04 ~]# cd &#x2F;data&#x2F;log&#x2F;studentDir</span><br><span class="line">[root@bigdata04 studentDir]# more class1.dat</span><br><span class="line">jack 18 male</span><br><span class="line">jessic 20 female</span><br><span class="line">tom 17 male</span><br></pre></td></tr></table></figure>

<h2 id="启动Agent"><a href="#启动Agent" class="headerlink" title="启动Agent"></a>启动Agent</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动之前，先启动hadoop</span><br><span class="line">启动Agent，使用在前台启动的方式，方便观察现象</span><br><span class="line"></span><br><span class="line">apache-flume-1.9.0-bin]# bin&#x2F;flume-ng agent --name a1 --conf conf --conf-file conf&#x2F;file-to-hdfs.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>

<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-05-02 15:36:58,283 (conf-file-poller-0) [ERROR - org.apache.flume.node.P</span><br><span class="line">java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;hadoop&#x2F;io&#x2F;SequenceFile$Compression</span><br><span class="line">at org.apache.flume.sink.hdfs.HDFSEventSink.configure(HDFSEventSink.j</span><br><span class="line">at org.apache.flume.conf.Configurables.configure(Configurables.java:4</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.io.SequenceFil</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:382)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">... 12 more</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是发现在启动的时候报错，提示找不到SequenceFile，但是我们已经把fileType改为了DataStream，</span><br><span class="line">但是Flume默认还是会加载这个类</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.hadoop.io.SequenceFile$CompressionT</span><br><span class="line">ype</span><br><span class="line">就算你把SequenceFile相关的jar包都拷贝到flume的lib目录下解决了这个问题，但是还是会遇到找不到</span><br><span class="line">找不到HDFS这种文件类型，还是缺少hdfs相关的jar包</span><br><span class="line">No FileSystem for scheme: hdfs</span><br><span class="line">当然这个问题也可以通过拷贝jar包来解决这个问题，但是这样其实太费劲了，并且后期我们有很大可能需要在这个节点上操作HDFS，所以其实最简单直接的方法就是把这个节点设置为hadoop集群的一个客户端节点，这样操作hdfs就没有任何问题了。</span><br><span class="line">咱们之前在讲Hadoop的时候讲了客户端节点的特性，其实很简单，我们直接把集群中修改好配置的hadoop目录远程拷贝到bigdata04上就可以了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 soft]# scp -rq hadoop-3.2.0 192.168.182.103:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">由于bigdata01和bigdata04没有做免密码登录，也不认识它的主机名，所以就使用ip，并且输入密码了。</span><br><span class="line">拷贝完成之后到bigdata04节点上验证一下</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：还需要修改环境变量，配置HADOOP_HOME，否则启动Agent的时候还是会提示找不到SequenceFile</span><br><span class="line"></span><br><span class="line">[root@bigdata04 hadoop-3.2.0]# vi &#x2F;etc&#x2F;profile</span><br><span class="line">.....</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0</span><br><span class="line">export PATH&#x3D;.:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;bin:$PATH</span><br><span class="line">[root@bigdata04 hadoop-3.2.0]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h2 id="再次启动Agent"><a href="#再次启动Agent" class="headerlink" title="再次启动Agent"></a>再次启动Agent</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时可以看到Agent正常启动</span><br><span class="line"></span><br><span class="line">到hdfs上验证结果</span><br><span class="line">[root@bigdata01 lib]# hdfs dfs -ls &#x2F;flume&#x2F;studentDir</span><br><span class="line">Found 1 items</span><br><span class="line">-rw-r--r--   2 root supergroup         47 2022-02-18 11:46 &#x2F;flume&#x2F;studentDir&#x2F;stu-.1645155976762.tmp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时发现文件已经生成了，只不过默认情况下现在的文件是 .tmp 结尾的，表示它在被使用，因为Flume只要采集到数据就会向里面写，这个后缀默认是由 hdfs.inUseSuffix 参数来控制的。</span><br><span class="line">文件名上还拼接了一个当前时间戳，这个是默认文件名的格式，当达到文件切割时机的时候会给文件改名字，去掉.tmp</span><br><span class="line">这个文件现在也是可以查看的，里面的内容其实就是class1.dat文件中的内容</span><br><span class="line"></span><br><span class="line">[root@bigdata04 ~]# hdfs dfs -cat hdfs:&#x2F;&#x2F;192.168.182.100:9000&#x2F;flume&#x2F;studentDi</span><br><span class="line">jack 18 male</span><br><span class="line">jessic 20 female</span><br><span class="line">tom 17 male</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以此时Flume就会监控linux中的&#x2F;data&#x2F;log&#x2F;studentDir目录，当发现里面有新文件的时候就会把数据采集过来。</span><br><span class="line">那Flume怎么知道哪些文件是新文件呢？它会不会重复读取同一个文件的数据呢？</span><br><span class="line">不会的，我们到&#x2F;data&#x2F;log&#x2F;studentDir目录看一下你就知道了</span><br><span class="line"></span><br><span class="line">[root@bigdata04 studentDir]# cd checkpoint&#x2F;</span><br><span class="line">[root@bigdata04 checkpoint]# ls</span><br><span class="line">checkpoint  checkpoint.meta  inflightputs  inflighttakes  in_use.lock  queueset</span><br><span class="line">[root@bigdata04 checkpoint]# pwd</span><br><span class="line">&#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;studentDir&#x2F;checkpoint</span><br><span class="line">You have new mail in &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 studentDir]# cd data&#x2F;</span><br><span class="line">[root@bigdata04 data]# ls</span><br><span class="line">in_use.lock  log-2       log-3.meta  log-5       log-6.meta</span><br><span class="line">log-1        log-2.meta  log-4       log-5.meta  log-7</span><br><span class="line">log-1.meta   log-3       log-4.meta  log-6       log-7.meta</span><br><span class="line">[root@bigdata04 data]# pwd</span><br><span class="line">&#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;studentDir&#x2F;data</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现里面有一个 log-1 的文件，这个文件中存储的其实就是读取到的内容，只不过在这无法直接查看。</span><br><span class="line">现在我们想看一下Flume最终生成的文件是什么样子的，难道要根据配置等待1个小时或者弄一个128M的文件过来吗，</span><br><span class="line">其实也没必要，我们可以暴力操作一下</span><br><span class="line">停止Agent就可以看到了，当Agent停止的时候就会去掉 .tmp 标志了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我再重启Agent之后，会不会再给加上.tmp呢，不会了，每次停止之前都会把所有的文件解除占用状态，下次启动的时候如果有新数据，则会产生新的文件，这其实就模拟了一下自动切文件之后的效果。</span><br><span class="line">但是这个文件看起来比较别扭，连个后缀都没有，没有后缀倒不影响使用，就是看起来不好看</span><br><span class="line">在这给大家留一个作业，下一次再生成新文件的时候我希望文件名有一个后缀是.log，大家下去之后自己查看官网文档资料，修改Agent配置，添加测试数据，验证效果。</span><br><span class="line">答案：其实就是使用hdfs sink中的hdfs.fileSuffix参数</span><br></pre></td></tr></table></figure>

<h2 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flume v1.9.0启动报错ERROR - org.apache.flume.sink.hdfs.HDFSEventSink.process(HDFSEventSink.java:459)</span><br><span class="line"></span><br><span class="line">Hadoop 3.3.0 中的 guava 版本和 Flume 1.9.0 中的版本不一致</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/llwy1428/article/details/112169028" target="_blank" rel="external nofollow noopener noreferrer">解决</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第3章 Flume核心复盘篇</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC3%E7%AB%A0-Flume%E6%A0%B8%E5%BF%83%E5%A4%8D%E7%9B%98%E7%AF%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第3章 Flume出神入化篇</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC3%E7%AB%A0-Flume%E5%87%BA%E7%A5%9E%E5%85%A5%E5%8C%96%E7%AF%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第七周-第3章-Flume出神入化篇"><a href="#第七周-第3章-Flume出神入化篇" class="headerlink" title="第七周 第3章 Flume出神入化篇"></a>第七周 第3章 Flume出神入化篇</h1><h2 id="各种自定义组件"><a href="#各种自定义组件" class="headerlink" title="各种自定义组件"></a>各种自定义组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们前面讲了很多组件，有核心组件和高级组件</span><br><span class="line">source、channel、sink以及Source Interceptors，Channel Selectors、Sink Processors</span><br><span class="line">针对这些组件，Flume都内置提供了组件的很多具体实现，在实际工作中，95%以上的数据采集需求都是</span><br><span class="line">可以满足的，但是谁也不敢保证100%都能满足，因为什么奇葩的需求都会有，那针对系统内没有提供的</span><br><span class="line">一些组件怎么办呢？</span><br><span class="line">假设我们想把flume采集到的数据输出到mysql中，那这个时候就需要有针对mysql的sink组件了，但是</span><br><span class="line">Flume中并没有，因为这种需求不常见，往mysql中写的都是结构化数据，数据的格式是固定的，但是</span><br><span class="line">flume采集的一般都是日志数据，这种属于非结构化数据，不支持也是正常的，但是我们在这里就是需要</span><br><span class="line">使用Flume往mysql中写数据，那怎么办？</span><br><span class="line">要不我们考虑换一个采集工具把，当然这也是一种解决方案，如果有其他采集工具支持向mysql中写数据</span><br><span class="line">的话那可以考虑换一个采集工具，如果所有的采集工具都不支持向mysql中写数据呢，也就是说你这个需</span><br><span class="line">求就是前无古人后无来者的，怎么破？</span><br><span class="line">不用担心，天无绝人之路，其实咱们使用的Flume提供的那些内置组件也都是作者一行代码一行代码写出</span><br><span class="line">来的，那我们是不是也可以自己写一个自定义的组件呢？可以的，并且flume也很欢迎你这样去做，它把</span><br><span class="line">开发文档什么的东西都给你准备好了。</span><br><span class="line">注意了，就算没有文档，我们也要想办法去自定义，没有文档的话就需要去抠Flume的源码了。</span><br><span class="line">在这里Flume针对自定义组件提供了详细的文档说明，我们来看一下</span><br><span class="line">通过Flume User Guide可以看到，针对source、channle、sink、Source Interceptors，Channel</span><br><span class="line">Selectors、都是可以的，这里面都显示了针对自定义的组件如何配置使用</span><br><span class="line">Sink Processors目前暂时不支持自定义。</span><br><span class="line">那这些支持自定义的组件具体开发步骤是什么样的呢？代码该写成什么样的呢？</span><br><span class="line">大家还记得Flume有两个文档链接吗？</span><br><span class="line">Flume Developer Guide</span><br><span class="line">只不过开发者文档里面目前还不算太完善，但是基本source、sink组件的自定义过程在这里都是有的</span><br><span class="line">索</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自定义channel的内容目前还没完善，如果你确实想自定义这个组件，就需要到Flume源码中找到目前支持的那些channel的代码，参考着实现我们自定义的channel组件。</span><br><span class="line">大家在这里知道可以自定义，并且知道自定义组件的文档在哪里就可以了，目前来说，需要我们自定义组件的场景实在是太少了，几乎和买彩票中奖的概率差不多。</span><br><span class="line">前面我们掌握了Flume的基本使用和高级使用场景，下面我们来看一下针对Flume的一些企业级优化和监控手段</span><br></pre></td></tr></table></figure>

<h2 id="Flume优化"><a href="#Flume优化" class="headerlink" title="Flume优化"></a>Flume优化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 调整Flume进程的内存大小，建议设置1G~2G，太小的话会导致频繁GC</span><br><span class="line">因为Flume进程也是基于Java的，所以就涉及到进程的内存设置，一般建议启动的单个Flume进程(或者说单个Agent)内存设置为1G~2G，内存太小的话会频繁GC，影响Agent的执行效率。</span><br><span class="line">那具体设置多少合适呢？</span><br><span class="line">这个需求需要根据Agent读取的数据量的大小和速度有关系，所以需要具体情况具体分析，当Flume的Agent启动之后，对应就会启动一个进程，我们可以通过jstat -gcutil PID 1000来看看这个进程GC的信息，每一秒钟刷新一次，如果GC次数增长过快，说明内存不够用。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用jps查看目前启动flume进程</span><br><span class="line"></span><br><span class="line">[root@bigdata04 ~]# jps</span><br><span class="line">2957 Jps</span><br><span class="line">2799 Application</span><br><span class="line"></span><br><span class="line">执行 jstat -gcutil PID 1000</span><br><span class="line">[root@bigdata04 ~]# jstat -gcutil 2799 1000</span><br><span class="line">S0 S1 E O M CCS YGC YGCT FGC FGCT GCT</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br><span class="line">100.00 0.00 17.54 42.80 96.46 92.38 8 0.029 0 0.000 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里主要看YGC YGCT FGC FGCT GCT</span><br><span class="line">YGC：表示新生代堆内存GC的次数，如果每隔几十秒产生一次，也还可以接受，如果每秒都会发生一次YGC，那说明需要增加内存了</span><br><span class="line">YGCT：表示新生代堆内存GC消耗的总时间</span><br><span class="line">FGC：FULL GC发生的次数，注意，如果发生FUCC GC，则Flume进程会进入暂停状态，FUCC GC执行完以后</span><br><span class="line">Flume才会继续工作，所以FUCC GC是非常影响效率的，这个指标的值越低越好，没有更好。</span><br><span class="line">GCT：所有类型的GC消耗的总时间</span><br></pre></td></tr></table></figure>

<h3 id="修改Flume进程内存"><a href="#修改Flume进程内存" class="headerlink" title="修改Flume进程内存"></a>修改Flume进程内存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果需要调整Flume进程内存的话，需要调整 flume-env.s h脚本中的 JAVA_OPTS 参数</span><br><span class="line">把 export JAVA_OPTS 参数前面的#号去掉才会生效。</span><br><span class="line"></span><br><span class="line">export JAVA_OPTS&#x3D;&quot;-Xms1024m -Xmx1024m -Dcom.sun.management.jmxremote&quot;</span><br><span class="line"></span><br><span class="line">建议这里的 Xms 和 Xmx 设置为一样大，避免进行内存交换，内存交换也比较消耗性能。</span><br></pre></td></tr></table></figure>

<h3 id="一台机器多个agent时"><a href="#一台机器多个agent时" class="headerlink" title="一台机器多个agent时"></a>一台机器多个agent时</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在一台服务器启动多个agent的时候，建议修改配置区分日志文件</span><br><span class="line">因为在conf目录下有log4j.properties，在这里面指定了日志文件的名称和位置，所有使用conf目录下面</span><br><span class="line">配置启动的Agent产生的日志都会记录到同一个日志文件中，如果我们在一台机器上启动了10几个Agent，后期发现某一个Agent挂了，想要查看日志分析问题，这个时候就疯了，因为所有Agent产生的日志都混到一块了，压根都没法分析日志了。</span><br><span class="line">所以建议拷贝多个conf目录，然后修改对应conf目录中log4j.properties日志的文件名称(可以保证多个agent的日志分别存储)，并且把日志级别调整为warn(减少垃圾日志的产生)，默认info级别会记录很多日志信息。</span><br><span class="line">这样在启动Agent的时候分别通过–conf参数指定不同的conf目录，后期分析日志就方便了，每一个Agent都有一个单独的日志文件。</span><br></pre></td></tr></table></figure>

<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以bigdata04机器为例：</span><br><span class="line">复制conf-failover目录，以后启动sink的failover任务的时候使用这个目录</span><br><span class="line">修改 log4j.properties中的日志记录级别和日志文件名称，日志文件目录可以不用修改，统一使用logs目录即可。</span><br><span class="line"></span><br><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# cp -r conf&#x2F; conf-failover</span><br><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# cd conf-failover&#x2F;</span><br><span class="line">[root@bigdata04 conf-failover]# vi log4j.properties</span><br><span class="line">.....</span><br><span class="line">flume.root.logger&#x3D;WARN,LOGFILE</span><br><span class="line">flume.log.dir&#x3D;.&#x2F;logs</span><br><span class="line">flume.log.file&#x3D;flume-failover.log</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# nohup bin&#x2F;flume-ng agent --name a1 --conf conf-failover --conf-file xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这样就会在flume的logs目录中产生 flume-failover.log 文件，并且文件中只记录WARN和ERROR级别</span><br><span class="line">的日志，这样后期排查日志就很清晰了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# cd logs&#x2F;</span><br><span class="line">[root@bigdata04 logs]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 478 May 3 16:25 flume-failover.log</span><br></pre></td></tr></table></figure>

<h2 id="Flume进程监控"><a href="#Flume进程监控" class="headerlink" title="Flume进程监控"></a>Flume进程监控</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flume的Agent服务是一个独立的进程，假设我们使用source-&gt;channel-&gt;sink实现了一个数据采集落盘</span><br><span class="line">的功能，如果这个采集进程被误操作干掉了，这个时候我们是发现不了的，什么时候会发现呢？</span><br><span class="line">可能第二天，产品经理找到你了，说昨天的这个指标值有点偏低啊，你来看下怎么回事，然后你就一顿操</span><br><span class="line">作猛如虎，结果发现原始数据少了一半多，那是因为Flume的采集程序在昨天下午的时候被误操作干掉</span><br><span class="line">了。</span><br><span class="line">找到问题之后，你就苦巴巴的手工去补数据，重跑计算程序，最后再找产品经理确认数据的准确性。</span><br><span class="line">类似的问题会有很多，这说明你现在是无法掌控你手下的这些程序，他们都是不受控的状态，说不定哪天</span><br><span class="line">哪个程序不高兴，他就自杀了，不干活了，过了好几天，需要用到这个数据的时候你才发现，发现的早的</span><br><span class="line">话还能补数据，发现晚的话数据可能都补不回来了，这样对公司来说就是属于比较严重的数据故障问题，</span><br><span class="line">这样你年终奖想拿18薪就不太现实了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以针对这些存在单点故障的进程，我们都需要添加监控告警机制，最起码出问题能及时知道，再好一点的呢，可以尝试自动修复重启。</span><br><span class="line">那针对Flume中的Agent我们就来实现一个监控功能，并且尝试自动重启</span><br><span class="line">大致思路是这样的，</span><br><span class="line">1. 首先需要有一个配置文件，配置文件中指定你现在需要监控哪些Agent</span><br><span class="line">2. 有一个脚本负责读取配置文件中的内容，定时挨个检查Agent对应的进程还在不在，如果发现对应的进程不在，则记录错误信息，然后告警(发短信或者发邮件) 并尝试重启</span><br></pre></td></tr></table></figure>

<h3 id="编写监控相关程序"><a href="#编写监控相关程序" class="headerlink" title="编写监控相关程序"></a>编写监控相关程序</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 myconfFile]# vim monlist.conf </span><br><span class="line">load-failover.conf&#x3D;startExample.sh # 等号处空格不能要，monlist.sh要出错</span><br></pre></td></tr></table></figure>

<h4 id="进程启动脚本"><a href="#进程启动脚本" class="headerlink" title="进程启动脚本"></a>进程启动脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 myconfFile]# vim startExample.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">flume_path&#x3D;&#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin # 等号处空格不能要</span><br><span class="line">nohup $&#123;flume_path&#125;&#x2F;bin&#x2F;flume-ng --name a1 --conf $&#123;flume_path&#125;&#x2F;conf --conf-file $&#123;flume_path&#125;&#x2F;conf&#x2F;myconfFile&#x2F;load-failover.conf &amp;</span><br></pre></td></tr></table></figure>

<h4 id="监控脚本"><a href="#监控脚本" class="headerlink" title="监控脚本"></a>监控脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 myconfFile]# vim monlist.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">monlist&#x3D;&#96;cat monlist.conf&#96; #等号那里不能有空格</span><br><span class="line">echo &quot;start check&quot;</span><br><span class="line">for item in $&#123;monlist&#125;</span><br><span class="line">do</span><br><span class="line">    # 设置字段分隔符</span><br><span class="line">    OLD_IFS&#x3D;$IFS</span><br><span class="line">    IFS&#x3D;&quot;&#x3D;&quot;</span><br><span class="line">    # 把一行内容转成多列[数组] </span><br><span class="line">    arr&#x3D;($item) </span><br><span class="line">    # 获取等号左边的内容</span><br><span class="line">    name&#x3D;$&#123;arr[0]&#125;</span><br><span class="line">    # 获取等号右边的内容</span><br><span class="line">    script&#x3D;$&#123;arr[1]&#125;</span><br><span class="line">    echo &quot;time is:&quot;&#96;date +&quot;%Y-%m-%d %H:%M:%S&quot;&#96;&quot; check &quot;$name</span><br><span class="line">    if [ &#96;jps -m|grep $name | wc -l&#96; -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">    # 发短信或者邮件告警</span><br><span class="line">    echo &#96;date +&quot;%Y-%m-%d %H:%M:%S&quot;&#96;$name &quot;is none&quot;</span><br><span class="line">    sh -x .&#x2F;$&#123;script&#125;</span><br><span class="line">    fi</span><br><span class="line">    done</span><br></pre></td></tr></table></figure>

<h4 id="设置定时检查"><a href="#设置定时检查" class="headerlink" title="设置定时检查"></a>设置定时检查</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：这个需要定时执行，所以可以使用crontab定时调度</span><br><span class="line"></span><br><span class="line">* * * * * root &#x2F;bin&#x2F;bash &#x2F;data&#x2F;soft&#x2F;monlist.sh</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第3章 精讲Flume高级组件</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC3%E7%AB%A0-%E7%B2%BE%E8%AE%B2Flume%E9%AB%98%E7%BA%A7%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第七周-第3章-精讲Flume高级组件"><a href="#第七周-第3章-精讲Flume高级组件" class="headerlink" title="第七周 第3章 精讲Flume高级组件"></a>第七周 第3章 精讲Flume高级组件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们掌握了Flume中的核心组件 source、channel、sink的使用，下面我们来学习一下Flume中的一</span><br><span class="line">些高级组件的使用</span><br></pre></td></tr></table></figure>

<h2 id="高级组件"><a href="#高级组件" class="headerlink" title="高级组件"></a>高级组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Source Interceptors：Source可以指定一个或者多个拦截器按先后顺序依次对采集到的数据进行处</span><br><span class="line">理。</span><br><span class="line">Channel Selectors：Source发往多个Channel的策略设置，如果source后面接了多个channel，到</span><br><span class="line">底是给所有的channel都发，还是根据规则发送到不同channel，这些是由Channel Selectors来控制</span><br><span class="line">的</span><br><span class="line">Sink Processors：Sink 发送数据的策略设置，一个channel后面可以接多个sink，channel中的数据</span><br><span class="line">是被哪个sink获取，这个是由Sink Processors控制的</span><br></pre></td></tr></table></figure>

<h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在具体分析这些高级组件之前，我们先插播一个小知识点，这个知识点在高级组件中会用到</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Event是Flume传输数据的基本单位，也是事务的基本单位，在文本文件中，通常一行记录就是一个Event</span><br><span class="line">Event中包含header和body；</span><br><span class="line">body是采集到的那一行记录的原始内容</span><br><span class="line">header类型为Map&lt;String, String&gt;，里面可以存储一些属性信息，方便后面使用</span><br><span class="line">我们可以在Source中给每一条数据的header中增加key-value，在Channel和Sink中使用header中的值了。</span><br></pre></td></tr></table></figure>

<h3 id="Source-Interceptors"><a href="#Source-Interceptors" class="headerlink" title="Source Interceptors"></a>Source Interceptors</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下里我们看一下第一个高级组件，Source Interceptors</span><br><span class="line">系统中已经内置提供了很多Source Interceptors</span><br><span class="line"></span><br><span class="line">常见的Source Interceptors类型：Timestamp Interceptor、Host Interceptor、Search and Replace</span><br><span class="line">Interceptor 、Static Interceptor、Regex Extractor Interceptor 等</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Timestamp Interceptor：向event中的header里面添加timestamp 时间戳信息</span><br><span class="line">Host Interceptor：向event中的header里面添加host属性，host的值为当前机器的主机名或者ip</span><br><span class="line">  Search and Replace Interceptor：根据指定的规则查询Event中body里面的数据，然后进行替换，这个拦截器会修改event中body的值，也就是会修改原始采集到的数据内容</span><br><span class="line">  Static Interceptor：向event中的header里面添加固定的key和value</span><br><span class="line">  Regex Extractor Interceptor：根据指定的规则从Event中的body里面抽取数据，生成key和value，再把key和value添加到header中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据刚才的分析，总结一下：</span><br><span class="line">  Timestamp Interceptor、Host Interceptor、Static Interceptor、Regex Extractor Interceptor是向event中的header里面添加key-value类型的数据，方便后面的channel和sink组件使用，对采集到的原始数据内容没有任何影响</span><br><span class="line"></span><br><span class="line">  Search and Replace Interceptor是会根据规则修改event中body里面的原始数据内容，对header没有任何影响，使用这个拦截器需要特别小心，因为他会修改原始数据内容。</span><br><span class="line">  这里面这几个拦截器其中Search and Replace Interceptor和Regex Extractor Interceptor 我们在工作中使用的比较多一些</span><br></pre></td></tr></table></figure>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对采集到的数据按天按类型分目录存储</span><br><span class="line">我们的原始数据是这样的，看这个文件，Flume测试数据格式.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">video_info</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:&quot;14943445328940974601&quot;,&quot;uid&quot;:&quot;840717325115457536&quot;,&quot;lat&quot;:&quot;53.530598&quot;,&quot;lnt&quot;:&quot;-2.5620373&quot;,&quot;hots&quot;:0,&quot;title&quot;:&quot;0&quot;,&quot;status&quot;:&quot;1&quot;,&quot;topicId&quot;:&quot;0&quot;,&quot;end_time&quot;:&quot;1494344570&quot;,&quot;watch_num&quot;:0,&quot;share_num&quot;:&quot;1&quot;,&quot;replay_url&quot;:null,&quot;replay_num&quot;:0,&quot;start_time&quot;:&quot;1494344544&quot;,&quot;timestamp&quot;:1494344571,&quot;type&quot;:&quot;video_info&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info</span><br><span class="line"></span><br><span class="line">&#123;&quot;uid&quot;:&quot;861848974414839801&quot;,&quot;nickname&quot;:&quot;mick&quot;,&quot;usign&quot;:&quot;&quot;,&quot;sex&quot;:1,&quot;birthday&quot;:&quot;&quot;,&quot;face&quot;:&quot;&quot;,&quot;big_face&quot;:&quot;&quot;,&quot;email&quot;:&quot;abc@qq.com&quot;,&quot;mobile&quot;:&quot;&quot;,&quot;reg_type&quot;:&quot;102&quot;,&quot;last_login_time&quot;:&quot;1494344580&quot;,&quot;reg_time&quot;:&quot;1494344580&quot;,&quot;last_update_time&quot;:&quot;1494344580&quot;,&quot;status&quot;:&quot;5&quot;,&quot;is_verified&quot;:&quot;0&quot;,&quot;verified_info&quot;:&quot;&quot;,&quot;is_seller&quot;:&quot;0&quot;,&quot;level&quot;:1,&quot;exp&quot;:0,&quot;anchor_level&quot;:0,&quot;anchor_exp&quot;:0,&quot;os&quot;:&quot;android&quot;,&quot;timestamp&quot;:1494344580,&quot;type&quot;:&quot;user_info&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gift_record</span><br><span class="line"></span><br><span class="line">&#123;&quot;send_id&quot;:&quot;834688818270961664&quot;,&quot;good_id&quot;:&quot;223&quot;,&quot;video_id&quot;:&quot;14943443045138661356&quot;,&quot;gold&quot;:&quot;10&quot;,&quot;timestamp&quot;:1494344574,&quot;type&quot;:&quot;gift_record&quot;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  这份数据中有三种类型的数据，视频信息、用户信息、送礼信息，数据都是json格式的，这些数据还有一个共性就是里面都有一个type字段，type字段的值代表数据类型</span><br><span class="line">当我们的直播平台正常运行的时候，会实时产生这些日志数据，我们希望把这些数据采集到hdfs上进行存储，并且要按照数据类型进行分目录存储，视频数据放一块、用户数据放一块、送礼数据放一块</span><br><span class="line">  针对这个需求配置agent的话，source使用基于文件的execsource、channle使用基于文件的channle，我们希望保证数据的完整性和准确性，sink使用hdfssink</span><br><span class="line">  但是注意了，hdfssink中的path不能写死，首先是按天 就是需要动态获取日期，然后是因为不同类型的数据要存储到不同的目录中</span><br><span class="line">  那也就意味着path路径中肯定要是有变量，除了日期变量还要有数据类型变量，</span><br><span class="line">这里的数据类型的格式都是单词中间有一个下划线，但是我们的要求是目录中的单词不要出现下划线，使用驼峰的命名格式。</span><br><span class="line">  所以最终在hdfs中需要生成的目录大致是这样的</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H7Ry2q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/H7Ry2q.png" alt="H7Ry2q.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里的日期变量好获取，但是数据类型如何获取呢？</span><br><span class="line">注意了，咱们前面分析了，通过source的拦截器可以向event的header中添加key-value，然后在后面的channle或者sink中获取key-value的值</span><br><span class="line">那我们在这就可以通过Regex Extractor Interceptor获取原始数据中的type字段的值，获取出来以后存储到header中，这样在sink阶段就可以获取到了。</span><br><span class="line">但是这个时候直接获取到的type的值是不满足要求的，需要对type的值进行转换，去掉下划线，转化为驼峰形式</span><br><span class="line">所以可以先使用Search and Replace Interceptor对原始数据中type的值进行转换，然后使用Regex Extractor Interceptor指定规则获取type字段的值，添加到header中。</span><br></pre></td></tr></table></figure>

<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以整体的流程是这样的</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H7WlLT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/H7WlLT.md.png" alt="H7WlLT.md.png"></a></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#给三个组件起名</span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置sources</span><br><span class="line">a1.sources.r1.type&#x3D;exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;data&#x2F;log&#x2F;moreTypeData&#x2F;moreType.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置拦截器</span><br><span class="line">a1.sources.r1.interceptors &#x3D; i1 i2 i3 i4</span><br><span class="line">a1.sources.r1.interceptors.i1.type &#x3D; search_replace</span><br><span class="line">a1.sources.r1.interceptors.i1.searchPattern &#x3D; &quot;type&quot;:&quot;video_info&quot;</span><br><span class="line">a1.sources.r1.interceptors.i1.replaceString &#x3D; &quot;type&quot;:&quot;videoInfo&quot;</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors.i2.type &#x3D; search_replace</span><br><span class="line">a1.sources.r1.interceptors.i2.searchPattern &#x3D; &quot;type&quot;:&quot;user_info&quot;</span><br><span class="line">a1.sources.r1.interceptors.i2.replaceString &#x3D; &quot;type&quot;:&quot;userInfo&quot;</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors.i3.type &#x3D; search_replace</span><br><span class="line">a1.sources.r1.interceptors.i3.searchPattern &#x3D; &quot;type&quot;:&quot;gift_record&quot;</span><br><span class="line">a1.sources.r1.interceptors.i3.replaceString &#x3D; &quot;type&quot;:&quot;giftRecord&quot;</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors.i4.type&#x3D;regex_extractor</span><br><span class="line">a1.sources.r1.interceptors.i4.regex &#x3D; &quot;type&quot;:&quot;(\\w+)&quot;</span><br><span class="line">a1.sources.r1.interceptors.i4.serializers &#x3D; s1</span><br><span class="line">a1.sources.r1.interceptors.i4.serializers.s1.name &#x3D; logType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置channels</span><br><span class="line">a1.channels.c1.type &#x3D; file</span><br><span class="line">a1.channels.c1.checkpointDir &#x3D; &#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;moreType&#x2F;checkpoint</span><br><span class="line">a1.channels.c1.dataDirs &#x3D; &#x2F;data&#x2F;soft&#x2F;apache-flume-1.9.0-bin&#x2F;data&#x2F;moreType&#x2F;data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置sinks</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;moreTypeData&#x2F;%Y%m%d&#x2F;%&#123;logType&#125;</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; data-</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix&#x3D; .log</span><br><span class="line">a1.sinks.k1.hdfs.fileType&#x3D; DataStream</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval&#x3D; 3600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize&#x3D;134217728</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat&#x3D; Text</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp&#x3D;true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel&#x3D; c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：这里面的拦截器，拦截器可以设置一个或者多个，source采集的每一条数据都会经过所有</span><br><span class="line">的拦截器进行处理，多个拦截器按照顺序执行。</span><br></pre></td></tr></table></figure>



<h5 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h5><p><a href="https://imgtu.com/i/H7LO1O" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/18/H7LO1O.md.png" alt="H7LO1O.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看一下HDFS中的文件内容，发现type字段的值确实被拦截器修改了</span><br><span class="line">这就实现了按天，按类型分目录存储。</span><br></pre></td></tr></table></figure>



<h3 id="Channel-Selectors"><a href="#Channel-Selectors" class="headerlink" title="Channel Selectors"></a>Channel Selectors</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来看一下Channel Selectors</span><br><span class="line">Channel Selectors类型包括：Replicating Channel Selector 和Multiplexing Channel Selector</span><br><span class="line">其中Replicating Channel Selector是默认的channel 选择器，它会将Source采集过来的Event发往所有</span><br><span class="line">Channel</span><br><span class="line">查看官方文档中针对这个默认channel选择器的解释</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HHUhBq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHUhBq.md.png" alt="HHUhBq.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个例子的配置中，c3是可选channel。对c3的写入失败将被忽略。由于c1和c2未标记为可选，因此未</span><br><span class="line">能写入这些channel将导致事务失败</span><br><span class="line">针对这个配置，通俗一点来说就是，source的数据会发往c1、c2、c3这三个channle中，可以保证c1、</span><br><span class="line">c2一定能接收到所有数据，但是c3就无法保证了</span><br><span class="line">这个selector.optional参数是一个可选项，可以不用配置就行。</span><br><span class="line">如果是多个channel的话，直接在channels参数后面指定多个channel的名称就可以了，多个channel名</span><br><span class="line">称中间使用空格隔开，</span><br><span class="line">其实你看这个名称是channels 带有s，从名字上看就能看出来他支持多个channel</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有一个 channel选择器是Multiplexing Channel Selector，它表示会根据Event中header里面的值将</span><br><span class="line">Event发往不同的Channel</span><br><span class="line">看下官网中的介绍</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HHaEDI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHaEDI.md.png" alt="HHaEDI.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个例子的配置中，指定了4个channel,c1、c2、c3、c4</span><br><span class="line">source采集到的数据具体会发送到哪个channel中，会根据event中header里面的state属性的值，这个</span><br><span class="line">是通过selector.header控制的</span><br><span class="line">如果state属性的值是CZ，则发送给c1</span><br><span class="line">如果state属性的值是US，则发送给c2 c3</span><br><span class="line">如果state属性的值是其它值，则发送给c4</span><br><span class="line">这些规则是通过selector.mapping和selector.default控制的</span><br><span class="line">这样就可以实现根据一定规则把数据分发给不同的channel了。</span><br></pre></td></tr></table></figure>

<h4 id="Replicating-Channel-Selector-案例"><a href="#Replicating-Channel-Selector-案例" class="headerlink" title="Replicating Channel Selector  案例"></a>Replicating Channel Selector  案例</h4><p><a href="https://imgtu.com/i/HHdMo6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHdMo6.md.png" alt="HHdMo6.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个案例中我们使用Replicating选择器，将source采集到的数据重复发送给两个channle，最后每个</span><br><span class="line">channel后面接一个sink，负责把数据存储到不同存储介质中，方便后期使用。</span><br><span class="line">在实际工作中这种需求还是比较常见的，就是我们希望把一份数据采集过来以后，分别存储到不同的存储</span><br><span class="line">介质中，不同存储介质的特点和应用场景是不一样的，典型的就是hdfssink 和kafkasink，</span><br><span class="line">通过hdfssink实现离线数据落盘存储，方便后面进行离线数据计算</span><br><span class="line">通过kafkasink实现实时数据存储，方便后面进行实时计算，</span><br><span class="line">由于我们还没有学kafka，所以在这里先使用loggersink代理。</span><br></pre></td></tr></table></figure>

<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 conf]# vim tcp-to-replicatingchannel.conf </span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1 c2</span><br><span class="line">a1.sinks&#x3D;k1 k2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 55555</span><br><span class="line"></span><br><span class="line"># 配置channel选择器[默认就是replicating,可以省略]</span><br><span class="line">a1.sources.r1.selector.type &#x3D; replicating</span><br><span class="line">#a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">#a1.sources.r1.selector.optional &#x3D; c2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">a1.sinks.k1.type&#x3D;logger</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type&#x3D;hdfs</span><br><span class="line">a1.sinks.k2.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;replicatingSelector</span><br><span class="line">a1.sinks.k2.hdfs.filePrefix &#x3D; data-</span><br><span class="line">a1.sinks.k2.hdfs.fileType &#x3D; DataStream</span><br><span class="line">a1.sinks.k2.hdfs.rollSize &#x3D; 134217728</span><br><span class="line">a1.sinks.k2.hdfs.rollInterval &#x3D; 3600</span><br><span class="line">a1.sinks.k2.hdfs.fileSuffiix &#x3D; .log</span><br><span class="line">a1.sinks.k2.hdfs.writeFormat &#x3D; Text</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br></pre></td></tr></table></figure>

<h5 id="启动，输入数据，查看"><a href="#启动，输入数据，查看" class="headerlink" title="启动，输入数据，查看"></a>启动，输入数据，查看</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成测试数据，通过telnet连接到socket</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HHyp1f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHyp1f.png" alt="HHyp1f.png"></a></p>
<p><a href="https://imgtu.com/i/HHy9c8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHy9c8.md.png" alt="HHy9c8.md.png"></a></p>
<p><a href="https://imgtu.com/i/HHyucT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHyucT.md.png" alt="HHyucT.md.png"></a></p>
<h4 id="Multiplexing-Channel-Selector-案例"><a href="#Multiplexing-Channel-Selector-案例" class="headerlink" title="Multiplexing Channel Selector  案例"></a>Multiplexing Channel Selector  案例</h4><p><a href="https://imgtu.com/i/HHyq2V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHyq2V.md.png" alt="HHyq2V.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最终再把不同channel中的数据存储到不同介质中。</span><br><span class="line">在这里面我们需要用到正则抽取拦截器在Event的header中生成key-value</span><br><span class="line">作为Multiplexing选择器的规则</span><br></pre></td></tr></table></figure>

<h5 id="测试数据格式"><a href="#测试数据格式" class="headerlink" title="测试数据格式"></a>测试数据格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:19,&quot;city&quot;:&quot;bj&quot;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:26,&quot;city&quot;:&quot;sh&quot;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来配置Agent，复制tcp-to-replicatingchannel.conf的内容，</span><br><span class="line">主要增加source拦截器和修改channel选择器，以及hdfsink中的path路径</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 conf]# vim tcp-to-multiplexingchannel.conf </span><br><span class="line">#</span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1 c2</span><br><span class="line">a1.sinks&#x3D;k1 k2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 55555</span><br><span class="line"></span><br><span class="line">  配置正则抽取拦截器</span><br><span class="line">a1.sources.r1.interceptors&#x3D;i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type&#x3D;regex_extractor</span><br><span class="line">a1.sources.r1.interceptors.i1.regex &#x3D; &quot;city&quot;:&quot;(\\w+)&quot;</span><br><span class="line">a1.sources.r1.interceptors.i1.serializers &#x3D; s1</span><br><span class="line">a1.sources.r1.interceptors.i1.serializers.s1.name &#x3D; city</span><br><span class="line"></span><br><span class="line"># 配置channel选择器</span><br><span class="line">a1.sources.r1.selector.type &#x3D; multiplexing</span><br><span class="line">a1.sources.r1.selector.header &#x3D; city</span><br><span class="line">a1.sources.r1.selector.mapping.bj &#x3D; c1</span><br><span class="line">#a1.sources.r1.selector.mapping.sh &#x3D; c2    </span><br><span class="line">a1.sources.r1.selector.default &#x3D; c2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">a1.sinks.k1.type&#x3D;logger</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type&#x3D;hdfs</span><br><span class="line">a1.sinks.k2.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;multiplexingSelector</span><br><span class="line">a1.sinks.k2.hdfs.filePrefix &#x3D; data-</span><br><span class="line">a1.sinks.k2.hdfs.fileType &#x3D; DataStream</span><br><span class="line">a1.sinks.k2.hdfs.rollSize &#x3D; 134217728</span><br><span class="line">a1.sinks.k2.hdfs.rollInterval &#x3D; 3600</span><br><span class="line">a1.sinks.k2.hdfs.fileSuffiix &#x3D; .log</span><br><span class="line">a1.sinks.k2.hdfs.writeFormat &#x3D; Text</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br><span class="line">You have new mail in &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</span><br><span class="line">[root@bigdata04 conf]# vim tcp-to-multiplexingchannel.conf </span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 55555</span><br><span class="line"></span><br><span class="line"># 配置正则抽取拦截器</span><br><span class="line">a1.sources.r1.interceptors&#x3D;i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type&#x3D;regex_extractor</span><br><span class="line">a1.sources.r1.interceptors.i1.regex &#x3D; &quot;city&quot;:&quot;(\\w+)&quot;</span><br><span class="line">a1.sources.r1.interceptors.i1.serializers &#x3D; s1</span><br><span class="line">a1.sources.r1.interceptors.i1.serializers.s1.name &#x3D; city</span><br><span class="line"></span><br><span class="line"># 配置channel选择器</span><br><span class="line">a1.sources.r1.selector.type &#x3D; multiplexing</span><br><span class="line">a1.sources.r1.selector.header &#x3D; city</span><br><span class="line">a1.sources.r1.selector.mapping.bj &#x3D; c1</span><br><span class="line">#a1.sources.r1.selector.mapping.sh &#x3D; c2    </span><br><span class="line">a1.sources.r1.selector.default &#x3D; c2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">a1.sinks.k1.type&#x3D;logger</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type&#x3D;hdfs</span><br><span class="line">a1.sinks.k2.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;multiplexingSelector</span><br><span class="line">a1.sinks.k2.hdfs.filePrefix &#x3D; data-</span><br><span class="line">a1.sinks.k2.hdfs.fileType &#x3D; DataStream</span><br><span class="line">a1.sinks.k2.hdfs.rollSize &#x3D; 134217728</span><br><span class="line">a1.sinks.k2.hdfs.rollInterval &#x3D; 3600</span><br><span class="line">a1.sinks.k2.hdfs.fileSuffiix &#x3D; .log</span><br><span class="line">a1.sinks.k2.hdfs.writeFormat &#x3D; Text</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br></pre></td></tr></table></figure>

<h5 id="启动，输入测试数据，查看"><a href="#启动，输入测试数据，查看" class="headerlink" title="启动，输入测试数据，查看"></a>启动，输入测试数据，查看</h5><p><a href="https://imgtu.com/i/HHWN8A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHWN8A.png" alt="HHWN8A.png"></a><br><a href="https://imgtu.com/i/HHWavt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHWavt.md.png" alt="HHWavt.md.png"></a><br><a href="https://imgtu.com/i/HHWUgI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HHWUgI.md.png" alt="HHWUgI.md.png"></a></p>
<h3 id="Sink-Processors"><a href="#Sink-Processors" class="headerlink" title="Sink Processors"></a>Sink Processors</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来看一下Sink处理器</span><br><span class="line">  Sink Processors类型包括这三种：Default Sink Processor、Load balancing Sink Processor和Failover Sink Processor</span><br><span class="line">  DefaultSink Processor是默认的，不用配置sinkgroup，就是咱们现在使用的这种最普通的形式，一个channel后面接一个sink的形式</span><br><span class="line">  Load balancing Sink Processor是负载均衡处理器，一个channle后面可以接多个sink，这多个sink属于一个sink group，根据指定的算法进行轮询或者随机发送，减轻单个sink的压力</span><br><span class="line">  Failover Sink Processor是故障转移处理器，一个channle后面可以接多个sink，这多个sink属于一个sink group，按照sink的优先级，默认先让优先级高的sink来处理数据，如果这个sink出现了故障，则用优先级低一点的sink处理数据，可以保证数据不丢失。</span><br></pre></td></tr></table></figure>

<h4 id="Load-balancing-Sink-Processor"><a href="#Load-balancing-Sink-Processor" class="headerlink" title="Load balancing Sink Processor"></a>Load balancing Sink Processor</h4><h4 id="Load-balancing-Sink-Processor-案例"><a href="#Load-balancing-Sink-Processor-案例" class="headerlink" title="Load balancing Sink Processor  案例"></a>Load balancing Sink Processor  案例</h4><p><a href="https://imgtu.com/i/HbsWad" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbsWad.md.png" alt="HbsWad.md.png"></a></p>
<p><a href="https://imgtu.com/i/HbsfIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbsfIA.md.png" alt="HbsfIA.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看中间的参数信息，</span><br><span class="line">processor.sinks：指定这个sink groups中有哪些sink，指定sink的名称，多个的话中间使用空格隔开即可【注意，这里写的是processor.sinks，但是在下面的example中使用的是sinks，实际上就是sinks，所以文档也是有一些瑕疵的，不过Flume的文档已经算是写的非常好的了】</span><br><span class="line">processor.type：针对负载均衡的sink处理器，这里需要指定load_balance</span><br><span class="line">processor.selector：此参数的值内置支持两个，round_robin和random，round_robin表示轮询，按照sink的顺序，轮流处理数据，random表示随机。</span><br><span class="line">processor.backoff：默认为false，设置为true后，故障的节点会列入黑名单，过一定时间才会再次发送数据，如果还失败，则等待时间是指数级增长；一直到达到最大的时间。</span><br><span class="line">如果不开启，故障的节点每次还会被重试发送，如果真有故障节点的话就会影响效率。</span><br><span class="line">processor.selector.maxTimeOut：最大的黑名单时间，默认是30秒</span><br></pre></td></tr></table></figure>

<h5 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个负载均衡案例可以解决之前单节点输出能力有限的问题，可以通过多个sink后面连接多个Agent实现负载均衡，如果后面的Agent挂掉1个，也不会影响整体流程，只是处理效率又恢复到了之前的状态。</span><br></pre></td></tr></table></figure>

<h6 id="bigdata04"><a href="#bigdata04" class="headerlink" title="bigdata04"></a>bigdata04</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1 k2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"># 配置sink组件,[为了方便演示效果，把batch-size设置为1]</span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; bigdata02</span><br><span class="line">a1.sinks.k1.port &#x3D; 45454</span><br><span class="line">a1.sinks.k1.batch-size&#x3D;1</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; bigdata03</span><br><span class="line">a1.sinks.k2.port &#x3D; 41414</span><br><span class="line">a1.sinks.k1.batch-size&#x3D;1</span><br><span class="line"></span><br><span class="line"># 配置sink策略</span><br><span class="line">a1.sinkgroups &#x3D; g1</span><br><span class="line">a1.sinkgroups.g1.sinks &#x3D; k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type &#x3D; load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.backoff &#x3D; true</span><br><span class="line">a1.sinkgroups.g1.processor.selector &#x3D; round_robin</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel&#x3D;c1</span><br><span class="line">a1.sinks.k2.channel&#x3D;c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sinks.k1.port &#x3D; 45454和a1.sinks.k2.port &#x3D; 41414的端口一致也没事，因为是在不同的节点上，只要bigdata02,bigdata03上写的一致就行</span><br></pre></td></tr></table></figure>

<h6 id="bigdata02"><a href="#bigdata02" class="headerlink" title="bigdata02"></a>bigdata02</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 45454</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;sinkProcessor_load_balance</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; data130</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat&#x3D;Text</span><br><span class="line">a1.sinks.k1.hdfs.fileType&#x3D;DataStream</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval&#x3D;3600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize&#x3D;134217728</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix&#x3D;.log</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel&#x3D;c1</span><br></pre></td></tr></table></figure>

<h6 id="bigdata03"><a href="#bigdata03" class="headerlink" title="bigdata03"></a>bigdata03</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 41414</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;flume&#x2F;sinkProcessor_load_balance</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; data131</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat&#x3D;Text</span><br><span class="line">a1.sinks.k1.hdfs.fileType&#x3D;DataStream</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval&#x3D;3600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize&#x3D;134217728</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix&#x3D;.log</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels&#x3D;c1</span><br><span class="line">a1.sinks.k1.channel&#x3D;c1</span><br></pre></td></tr></table></figure>

<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还是先启动后面，再启动前面</span><br><span class="line"></span><br><span class="line">注意：02,03在启动之前需要到&#x2F;etc&#x2F;profile中先配置HADOOP_HOME环境变量，因为这个Agent中使用到了hdfs</span><br></pre></td></tr></table></figure>

<h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NoSuchMethodError:com.google.common.base.Preconditions.checkArgument(...)(已解决)</span><br><span class="line"></span><br><span class="line">hadoop和flume的guava版本不同</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/lkx99661014/article/details/104586955" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<h5 id="结果查看-1"><a href="#结果查看-1" class="headerlink" title="结果查看"></a>结果查看</h5><p><a href="https://imgtu.com/i/HbsWad" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbsWad.png" alt="HbsWad.png"></a><br><a href="https://imgtu.com/i/HbsfIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbsfIA.png" alt="HbsfIA.png"></a><a href="https://imgtu.com/i/HbvJbD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbvJbD.png" alt="HbvJbD.png"></a><br><a href="https://imgtu.com/i/HbvGDO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbvGDO.png" alt="HbvGDO.png"></a><br><a href="https://imgtu.com/i/HbvtVe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbvtVe.png" alt="HbvtVe.png"></a></p>
<h4 id="Failover-Sink-Processor"><a href="#Failover-Sink-Processor" class="headerlink" title="Failover Sink Processor"></a>Failover Sink Processor</h4><h4 id="Failover-Sink-Processor-案例"><a href="#Failover-Sink-Processor-案例" class="headerlink" title="Failover Sink Processor  案例"></a>Failover Sink Processor  案例</h4><p><a href="https://imgtu.com/i/Hbz23n" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/Hbz23n.png" alt="Hbz23n.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来看一下故障转移</span><br><span class="line">在这个图中，也是一个channel后面接了两个sink，但是这里和负载均衡架构不一样的是，这两个sink正常情况下只有一个干活，另一个是不干活的</span><br><span class="line"></span><br><span class="line">这个故障转移案例可以解决sink组件单点故障的问题，如果某一个sink输出功能失效，另一个还可以顶上</span><br><span class="line">来，同时只会存在一个真正输出数据的sink。</span><br><span class="line"></span><br><span class="line">来看一下Failover Sink Processor的文档介绍</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HbzWj0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HbzWj0.png" alt="HbzWj0.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">processor.type：针对故障转移的sink处理器，使用failover</span><br><span class="line">processor.priority.：指定sink group中每一个sink组件的优先级，默认情况下channel中的数据会被优先级比较高的sink取走</span><br><span class="line">processor.maxpenalty：sink发生故障之后，最大等待时间</span><br></pre></td></tr></table></figure>

<h5 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h5><h6 id="bigdata04-1"><a href="#bigdata04-1" class="headerlink" title="bigdata04"></a>bigdata04</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就sink配置策略改变</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sources&#x3D;r1</span><br><span class="line">a1.channels&#x3D;c1</span><br><span class="line">a1.sinks&#x3D;k1 k2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"></span><br><span class="line"># 配置sink组件,[为了方便演示效果，把batch-size设置为1]</span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; bigdata02</span><br><span class="line">a1.sinks.k1.port &#x3D; 45454</span><br><span class="line">a1.sinks.k1.batch-size&#x3D;1</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; bigdata03</span><br><span class="line">a1.sinks.k2.port &#x3D; 41414</span><br><span class="line">a1.sinks.k1.batch-size&#x3D;1</span><br><span class="line"></span><br><span class="line">#配置sink策略</span><br><span class="line">a1.sinkgroups &#x3D; g1</span><br><span class="line">a1.sinkgroups.g1.sinks &#x3D; k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type &#x3D; failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 &#x3D; 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 &#x3D; 10</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty &#x3D; 10000</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel&#x3D;c1</span><br><span class="line">a1.sinks.k2.channel&#x3D;c1</span><br></pre></td></tr></table></figure>



<h6 id="bigdata02-1"><a href="#bigdata02-1" class="headerlink" title="bigdata02"></a>bigdata02</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与上个案例一样，就hdfs地址改变</span><br></pre></td></tr></table></figure>

<h6 id="bigdata03-1"><a href="#bigdata03-1" class="headerlink" title="bigdata03"></a>bigdata03</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与上个案例一样，就hdfs地址改变</span><br></pre></td></tr></table></figure>

<h6 id="结果查看-2"><a href="#结果查看-2" class="headerlink" title="结果查看"></a>结果查看</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![HqC2IU.png](https:&#x2F;&#x2F;s4.ax1x.com&#x2F;2022&#x2F;02&#x2F;19&#x2F;HqC2IU.png)](https:&#x2F;&#x2F;imgtu.com&#x2F;i&#x2F;HqC2IU)</span><br><span class="line">[![HqCWiF.png](https:&#x2F;&#x2F;s4.ax1x.com&#x2F;2022&#x2F;02&#x2F;19&#x2F;HqCWiF.png)](https:&#x2F;&#x2F;imgtu.com&#x2F;i&#x2F;HqCWiF)</span><br><span class="line">[![HqCgaT.png](https:&#x2F;&#x2F;s4.ax1x.com&#x2F;2022&#x2F;02&#x2F;19&#x2F;HqCgaT.png)](https:&#x2F;&#x2F;imgtu.com&#x2F;i&#x2F;HqCgaT)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后到hdfs上验证数据，发现现在数据是通过bigdata03这台机器写出去的，因为对应bigdata03这台机</span><br><span class="line">器的sink组件的优先级比较高</span><br></pre></td></tr></table></figure>

<h4 id="模拟Agent挂掉"><a href="#模拟Agent挂掉" class="headerlink" title="模拟Agent挂掉"></a>模拟Agent挂掉</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来模拟bigdata03这台机器上的的Agent挂掉，也就意味着k2这个sink写不出去数据了，此时，我们再通过socket发送一条数据，看看会怎么样</span><br><span class="line">直接在bigdata03窗口中按 ctrl+c 停止agent即可</span><br><span class="line">然后再生成一条数据</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HqACcQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HqACcQ.png" alt="HqACcQ.png"></a><br><a href="https://imgtu.com/i/HqA91g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/19/HqA91g.png" alt="HqA91g.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时如果把bigdata03上的Agent再启动的话，会发现新采集的数据会通过bigdata03上的Agent写出去，这是因为它的优先级比较高。</span><br><span class="line">这就是Sink故障转移的应用</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第2章 极速上手Flume使用</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC2%E7%AB%A0-%E6%9E%81%E9%80%9F%E4%B8%8A%E6%89%8BFlume%E4%BD%BF%E7%94%A8%20%20Flume%E7%9A%84hello%20world.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第七周-第2章-极速上手Flume使用"><a href="#第七周-第2章-极速上手Flume使用" class="headerlink" title="第七周 第2章 极速上手Flume使用"></a>第七周 第2章 极速上手Flume使用</h1><h2 id="Flume的Hello-World！"><a href="#Flume的Hello-World！" class="headerlink" title="Flume的Hello World！"></a>Flume的Hello World！</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们就想上手操作Flume，具体该怎么做呢？</span><br><span class="line">先来看一个入门级别的Hello World案例。</span><br><span class="line">我们前面说了，启动Flume任务其实就是启动一个Agent，Agent是由source、channel、sink组成的，这</span><br><span class="line">些组件在使用的时候只需要写几行配置就可以了</span><br><span class="line">那下面我们就看一下source、channel、sink该如何配置呢？</span><br><span class="line">接下来带着大家看一下官网</span><br><span class="line">找到左边的documentation，查看文档信息</span><br><span class="line"></span><br><span class="line">其实Flume的操作文档是非常良心的，整理的非常详细，给flume的维护者们点个赞。</span><br><span class="line">进入Flume User Guide</span><br></pre></td></tr></table></figure>



<p><a href="https://imgtu.com/i/H5YXR0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5YXR0.md.png" alt="H5YXR0.md.png"></a></p>
<h3 id="flume配置"><a href="#flume配置" class="headerlink" title="flume配置"></a>flume配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面有一个Agent配置的例子：</span><br><span class="line"></span><br><span class="line"># example.conf: A single-node Flume configuration</span><br><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line"># Describe&#x2F;configure the source</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; localhost</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个例子中首先定义了source的名字、sink的名字还有channel的名字</span><br><span class="line">下面配置source的相关参数</span><br><span class="line">下面配置了sink的相关参数</span><br><span class="line">接着配置了channel的相关参数</span><br><span class="line">最后把这三个组件连接到了一起，就是告诉source需要向哪个channel写入数据，告诉sink需要从哪个</span><br><span class="line">channel读取数据，这样source、channel、sink这三个组件就联通了。</span><br><span class="line">总结下来，配置Flume agent的主要流程是这样的</span><br><span class="line">1. 给每个组件起名字</span><br><span class="line">2. 配置每个组件的相关参数</span><br><span class="line">3. 把它们联通起来</span><br><span class="line">注意了，在Agent中配置的三大组件为什么要这样写呢？如果我是第一次使用我也不会写啊。</span><br><span class="line">三大组件的配置在文档中是有详细说明的，来看一下，在Flume Sources下面显示的都是已经内置支持的</span><br><span class="line">Source组件</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H5YOGq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5YOGq.png" alt="H5YOGq.png"></a></p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><h5 id="NetCat-Tcp"><a href="#NetCat-Tcp" class="headerlink" title="NetCat Tcp"></a>NetCat Tcp</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们刚才看的案例中使用的是source类型是netcat，其实就是NetCat TCP Source，看一下详细内容</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H5YLin" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5YLin.png" alt="H5YLin.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面的粗体字体是必选的参数</span><br><span class="line">第一个参数是为了指定source需要向哪个channel写数据，这个其实是通用的参数，</span><br><span class="line">主要看下面这三个，type、bind、port</span><br><span class="line">type：类型需要指定为natcat</span><br><span class="line">bind：指定当前机器的ip，使用hostname也可以</span><br><span class="line">port：指定当前机器中一个没有被使用的端口</span><br><span class="line">指定bind和port表示开启监听模式，监听指定ip和端口中的数据，其实就是开启了一个socket的服务端，</span><br><span class="line">等待客户端连接进来写入数据</span><br><span class="line">在这里给agent起名为a1,所以netcat类型的配置如下，这里面还指定了source、channel的名字，并且把</span><br><span class="line">source和channel连接到一起了，刨除这几个配置之外就剩下了三行配置，就是刚才我们分析的那三个必</span><br><span class="line">填参数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 6666</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line"></span><br><span class="line">注意了，bind参数后面指定的ip是四个0，这个当前机器的通用ip，因为一台机器可以有多个ip，例如：</span><br><span class="line">内网ip、外网ip，如果通过bind参数指定某一个ip的话，表示就只监听通过这个ip发送过来的数据了，这</span><br><span class="line">样会有局限性，所以可以指定0.0.0.0。</span><br><span class="line">下面几个参数都是可选配置，默认可以不配置。</span><br><span class="line">接着是channel，案例中channel使用的是memory</span><br></pre></td></tr></table></figure>



<h4 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h4><h5 id="memory-channel"><a href="#memory-channel" class="headerlink" title="memory channel"></a>memory channel</h5><p><a href="https://imgtu.com/i/H5t5f1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5t5f1.png" alt="H5t5f1.png"></a><br><a href="https://imgtu.com/i/H5t76K" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5t76K.md.png" alt="H5t76K.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面只有type是必填项，其他都是可选的</span><br></pre></td></tr></table></figure>



<h4 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h4><h5 id="logger-sink"><a href="#logger-sink" class="headerlink" title="logger sink"></a>logger sink</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后看一下sink，在案例中sink使用的是logger，对应的就是Logger Sink</span><br><span class="line"></span><br><span class="line">logger sink中默认也只需要指定type即可</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H5NajK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5NajK.png" alt="H5NajK.png"></a><br><a href="https://imgtu.com/i/H5NUc6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/17/H5NUc6.md.png" alt="H5NUc6.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后期我们如果想要使用其他的内置组件，直接到官网文档这里查找即可，这里面的配置有很多，没有必要去记，肯定记不住，只要知道到哪里去找就可以，工作的时候又不是闭卷考试，官网是可以随便使用的，</span><br><span class="line">所以建议大家到官网找到配置之后直接拷贝，要不然自己手写很容易出错。</span><br><span class="line">配置文件分析完了，可以把这些配置放到一个配置文件中，起名叫example.conf，把这个配置文件放到conf&#x2F; 目录下。</span><br></pre></td></tr></table></figure>

<h3 id="Flume配置文件"><a href="#Flume配置文件" class="headerlink" title="Flume配置文件"></a>Flume配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># example.conf: A single-node Flume configuration</span><br><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line"># Describe&#x2F;configure the source</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; localhost</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c1.transactionCapacity &#x3D; 100</span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1 注意：这里没有s，真他妈操蛋</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，这个配置文件中的a1表示是agent的名称，还有就是port指定的端口必须是未被使用的，可以先查询一下当前机器使用了哪些端口，端口的可用范围是1-65535，如果懒得去查的话，就尽量使用偏大一些的端口，这样被占用的概率就非常低了</span><br></pre></td></tr></table></figure>

<h3 id="启动Agent"><a href="#启动Agent" class="headerlink" title="启动Agent"></a>启动Agent</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;flume-ng agent --name a1 --conf conf --conf-file example.conf -Dflume.root.logger&#x3D;INFO,console</span><br><span class="line">(经过实验，必须在apche安装目录下执行; 在bin下执行有问题)</span><br><span class="line"></span><br><span class="line">这里面使用flume-ng命令</span><br><span class="line"></span><br><span class="line">后面指定agent，表示启动一个Flume的agent代理</span><br><span class="line">--name：指定agent的名字</span><br><span class="line">--conf：指定flume配置文件的根目录</span><br><span class="line">--conf-file：指定Agent对应的配置文件(包含source、channel、sink配置的文件)</span><br><span class="line">-D：动态添加一些参数，在这里是指定了flume的日志输出级别和输出位置，INFO表示日志级别，</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，其实agent的启动命令还可以这样写</span><br><span class="line">bin&#x2F;flume-ng agent -n $agent_name -c conf -f conf&#x2F;flume-conf.properties.template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里面的-n属于简写，完整的写法就是–name</span><br><span class="line">-c完整写法的–conf</span><br><span class="line">-f完整写法是–conf-file</span><br><span class="line">所以以后看到这两种写法要知道他们都是正确的写法。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动Agent</span><br><span class="line">在这里我们使用完整的写法，看起来清晰一些</span><br><span class="line">注意了，由于配置文件里面指定了agent的名称为a1,所以在–name后面也需要指定a1，还有就是通过–conf-file指定配置文件的时候需要指定conf目录下的example.conf配置文件</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动之后会看到如下信息，表示启动成功，启动成功之后，这个窗口会被一直占用，因为Agent服务一直在运行，现在属于一个前台进程</span><br><span class="line"></span><br><span class="line">2020-05-02 10:14:56,464 (lifecycleSupervisor-1-4) [INFO - org.apache.flume.so</span><br></pre></td></tr></table></figure>

<h4 id="开启的socket服务端"><a href="#开启的socket服务端" class="headerlink" title="开启的socket服务端"></a>开启的socket服务端</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果看到提示的有ERROR级别的日志信息，就需要具体问题具体分析了，一般都是配置文件配置错误了。</span><br><span class="line">接下来我们需要连接到source中通过netcat开启的socket服务端</span><br><span class="line">克隆一个bigdata04的会话，因为前面启动Agent之后，窗口就被占用了</span><br><span class="line">使用telnet命令可以连接到指定socket服务，telnet后面的主机名和端口是根据example.conf配置文件中配置的</span><br><span class="line">注意：如果提示找不到telnet命令，则需要使用yum在线安装</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 ~]# yum install -y telnet</span><br><span class="line">[root@bigdata04 ~]# telnet localhost 44444</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Connection refused</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line">hello world!</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">回到Agent所在的窗口，可以看到下面多了一行日志，就是我们在telnet中输入的内容</span><br></pre></td></tr></table></figure>

<h4 id="修改ip"><a href="#修改ip" class="headerlink" title="修改ip"></a>修改ip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按 ctrl+c 断开telnet连接</span><br><span class="line">重新使用telnet连接，此时不使用localhost，使用本机的内网ip可以吗？ 192.168.182.103</span><br><span class="line"></span><br><span class="line">[root@bigdata04 ~]# telnet 192.168.182.103 44444</span><br><span class="line">Trying 192.168.182.103...</span><br><span class="line">telnet: connect to address 192.168.182.103: Connection refused</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以此时Agent中source的配置在使用的时候就受限制了，在开启telnet客户端的时候就只能在本地开启了，无法在其他机器上使用，因为source中绑定的ip是localhost。</span><br><span class="line"></span><br><span class="line">如果想要支持一个网络内其它机器上也可以使用telnet链接的话就需要修改bind参数指定的值了最直接的就是指定192.168.182.103这个内网ip，其实还有一种更加通用的方式是指定0.0.0.0，此时表示会监听每一个可用的ip地址，所以在绑定ip端口时，ip通常都会使用0.0.0.0</span><br><span class="line">那在这里我们把example.conf中的localhost改为0.0.0.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按ctrl+c停止刚才启动的agent</span><br><span class="line"></span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">启动Agent  </span><br><span class="line"></span><br><span class="line">在另一个会话窗口中使用telnet连接</span><br><span class="line">[root@bigdata04 ~]# telnet 192.168.182.103 44444</span><br><span class="line">Trying 192.168.182.103...</span><br><span class="line">Connected to 192.168.182.103.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line">hi</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">此时可以在其他机器上使用telnet连接也可以，在bigdata01机器上</span><br></pre></td></tr></table></figure>

<h3 id="Flume-Agent后台运行"><a href="#Flume-Agent后台运行" class="headerlink" title="Flume Agent后台运行"></a>Flume Agent后台运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是注意了，此时Flume中Agent服务是在前台运行，这个服务实际工作中需要一直运行，所以需要放到后台运行。</span><br><span class="line">Flume自身没有提供直接把进程放到后台执行的参数，所以就需要使用咱们前面学习的nohup和&amp;了。</span><br><span class="line">此时就不需要指定-Dflume.root.logger&#x3D;INFO,console参数了，默认情况下flume的日志会记录到日志文件中。</span><br><span class="line">停掉之前的Agent，重新执行</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# nohup bin&#x2F;flume-ng agent --name a1 --conf conf --conf-file xxx &amp;</span><br><span class="line"></span><br><span class="line">启动之后，通过jps命令可以查看到一个application进程，这个就是启动的Agent</span><br><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# jps</span><br><span class="line">9619 Jps</span><br><span class="line">9581 Application</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样看起来不清晰，如果后期启动了多个Agent，都分不出来哪个是哪个了</span><br><span class="line">可以在jps后面加上参数 -ml，这样可以看到启动时指定的一些参数信息</span><br><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# jps -m</span><br><span class="line">9659 Jps -m</span><br><span class="line">9581 Application --name a1 --conf-file conf&#x2F;example.conf</span><br><span class="line"></span><br><span class="line">或者使用ps命令也可以</span><br><span class="line">[root@bigdata04 apache-flume-1.9.0-bin]# ps -ef|grep flume</span><br><span class="line">root 9581 1500 0 10:54 pts&#x2F;0 00:00:00 &#x2F;data&#x2F;soft&#x2F;jdk1.8&#x2F;bin&#x2F;java</span><br><span class="line">root 9672 1500 0 10:57 pts&#x2F;0 00:00:00 grep --color&#x3D;auto flume</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时需要想要停止这个Agent的话就需要使用kill命令了</span><br></pre></td></tr></table></figure>

<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">哪个都可以，条条道路通罗马，具体就看你个人喜好了，ps命令显示的内容更为详细。</span><br><span class="line">这个Agent中的sink组件把数据以日志的方式写出去了，所以这个数据默认就会进入到flume的日志文件中，那我们来看一下flume的日志文件在flume的logs目录中有一个flume.log</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata04 logs]# tail -2 flume.log</span><br><span class="line">02 May 2020 10:54:28,211 INFO [lifecycleSupervisor-1-4] (org.apache.flume.so</span><br><span class="line">02 May 2020 10:54:28,215 INFO [lifecycleSupervisor-1-4] (org.apache.flume.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再使用telnet向里面输入一些数据</span><br><span class="line">[root@bigdata04 ~]# telnet 192.168.182.103 44444</span><br><span class="line">Trying 192.168.182.103...</span><br><span class="line">Connected to 192.168.182.103.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line">daemon</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再回agent看</span><br><span class="line">[root@bigdata04 logs]# tail -2 flume.log</span><br><span class="line">02 May 2020 10:54:28,215 INFO [lifecycleSupervisor-1-4] (org.apache.flume.so</span><br><span class="line">02 May 2020 11:00:26,293 INFO [SinkRunner-PollingRunner-DefaultSinkProcessor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果配置文件里不是配置的logger，在这个日志文件里就看不见了</span><br></pre></td></tr></table></figure>

<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error downloading packages:</span><br><span class="line">  1:telnet-0.17-66.el7.x86_64: [Errno 256] No more mirrors to try.(ping www.baidu.com也ping不通)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第七周 第1章 极速入门Flume</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%83%E5%91%A8-%E7%AC%AC1%E7%AB%A0-%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8Flume.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第七周-第1章-极速入门"><a href="#第七周-第1章-极速入门" class="headerlink" title="第七周 第1章 极速入门"></a>第七周 第1章 极速入门</h1><h2 id="什么是Flume"><a href="#什么是Flume" class="headerlink" title="什么是Flume"></a>什么是Flume</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先来看一下官方解释</span><br><span class="line">Flume是一个高可用，高可靠，分布式的海量日志采集、聚合和传输的系统，能够有效的收集、聚合、移动大量的日志数据。</span><br><span class="line">其实通俗一点来说就是Flume是一个很靠谱，很方便、很强的日志采集工具。</span><br><span class="line">他是目前大数据领域数据采集最常用的一个框架</span><br><span class="line">为什么它这么香呢？</span><br><span class="line">主要是因为使用Flume采集数据不需要写一行代码，注意是一行代码都不需要，只需要在配置文件中随便写几行配置Flume就会死心塌地的给你干活了，是不是很香？</span><br><span class="line">看这个图，这个属于Flume的一个非常典型的应用场景，使用Flume采集数据，最终存储到HDFS上。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H4pUiV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/16/H4pUiV.png" alt="H4pUiV.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">左边的web server表示是一个web项目，web项目会产生日志数据，通过中间的Agent把日志数据采集到HDFS中。</span><br><span class="line">其中这个Agent就是我们使用Flume启动的一个代理，它是一个持续传输数据的服务，数据在Agent内部的这些组件之间传输的基本单位是Event</span><br><span class="line">从图中可以看到，Agent是由Source、Channel、Sink这三大组件组成的，这就是Flume中的三大核心组件，</span><br><span class="line">其中source是数据源，负责读取数据</span><br><span class="line">channel是临时存储数据的，source会把读取到的数据临时存储到channel中</span><br><span class="line">sink是负责从channel中读取数据的，最终将数据写出去，写到指定的目的地中</span><br><span class="line">后面我们会详细分析这三大组件。</span><br></pre></td></tr></table></figure>



<h2 id="Flume的特性"><a href="#Flume的特性" class="headerlink" title="Flume的特性"></a>Flume的特性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 它有一个简单、灵活的基于流的数据流结构，这个其实就是刚才说的Agent内部有三大组件，数据通过这三大组件流动的</span><br><span class="line">2. 具有负载均衡机制和故障转移机制，这个后面我们会详细分析</span><br><span class="line">3. 一个简单可扩展的数据模型(Source、Channel、Sink)，这几个组件是可灵活组合的</span><br></pre></td></tr></table></figure>



<h2 id="Flume高级应用场景"><a href="#Flume高级应用场景" class="headerlink" title="Flume高级应用场景"></a>Flume高级应用场景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们分析了Flume的典型常见应用场景，下面来看一下Flume的高级应用场景</span><br><span class="line">看这个图，这个图里面主要演示了Flume的多路输出，就是可以将采集到的一份数据输出到多个目的地中，不同目的地的数据对应不同的业务场景。</span><br></pre></td></tr></table></figure>

<h3 id="一对多的输出"><a href="#一对多的输出" class="headerlink" title="一对多的输出"></a>一对多的输出</h3><p><a href="https://imgtu.com/i/H49eOJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/16/H49eOJ.png" alt="H49eOJ.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来详细分析一下</span><br><span class="line">这个图里面一共有两个Agent，表示我们启动了2个Flume的代理，或者可以理解为了启动了2个flume的进程。</span><br><span class="line">首先看左边这个agent，给他起个名字叫 foo</span><br><span class="line">这里面有一个source，source后面接了3个channel，表示source读取到的数据会重复发送给每个channel，每个channel中的数据都是一样的</span><br><span class="line">针对每个channel都接了一个sink，这三个sink负责读取对应channel中的数据，并且把数据输出到不同的目的地，</span><br><span class="line">sink1负责把数据写到hdfs中</span><br><span class="line">sink2负责把数据写到一个Java消息服务数据队列中</span><br><span class="line">sink3负责把数据写给另一个Agent</span><br><span class="line">注意了，Flume中多个Agent之间是可以连通的，只需要让前面Agent的sink组件把数据写到下一个Agent的source组件中即可。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以sink3就把数据输出到了Agent bar中</span><br><span class="line">在Agent bar中同样有三个组件，source组件其实就获取到了sink3发送过来的数据，然后把数据临时存储到自己的channel4中，最终再通过sink组件把数据写到其他地方。</span><br><span class="line">这就是这个场景的应用，把采集到的一份数据重复输出到不同的目的地中</span><br></pre></td></tr></table></figure>

<h3 id="flume的汇聚功能"><a href="#flume的汇聚功能" class="headerlink" title="flume的汇聚功能"></a>flume的汇聚功能</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接着再看下面这张图，这张图主要表示了flume的汇聚功能，就是多个Agent采集到的数据统一汇聚到一个Agent</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H4ifAA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/16/H4ifAA.png" alt="H4ifAA.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面来详细分析一下，</span><br><span class="line">这个图里面一共启动了四个agent，左边的三个agent都是负责采集对应web服务器中的日志数据，数据采集过来之后统一发送给agent4，最后agent4进行统一汇总，最终写入hdfs。</span><br><span class="line">这种架构的好处是后期如果要修改最终数据的输出目的地，只需要修改agent4中的sink即可，不需要修改agent1、2、3。</span><br><span class="line">但是这种架构也有弊端，</span><br><span class="line">1. 如果有很多个agent同时向agent4写数据，那么agent4会出现性能瓶颈，导致数据处理过慢</span><br><span class="line">2. 这种架构还存在单点故障问题，如果agent4挂了，那么所有的数据都断了。</span><br><span class="line">不过这些问题可以通过flume中的负载均衡和故障转移机制解决，后面我们会详细分析</span><br></pre></td></tr></table></figure>



<h2 id="Flume的三大核心组件"><a href="#Flume的三大核心组件" class="headerlink" title="Flume的三大核心组件"></a>Flume的三大核心组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flume的三大核心组件：</span><br><span class="line">Source：数据源</span><br><span class="line">Channel：临时存储数据的管道</span><br><span class="line">Sink：目的地</span><br><span class="line">接下来具体看一下这三大核心组件都是干什么的</span><br></pre></td></tr></table></figure>

<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Source：数据源：通过source组件可以指定让Flume读取哪里的数据，然后将数据传递给后面的channel</span><br><span class="line">Flume内置支持读取很多种数据源，基于文件、基于目录、基于TCP\UDP端口、基于HTTP、Kafka的等等、当然了，如果这里面没有你喜欢的，他也是支持自定义的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这我们挑几个常用的看一下：</span><br><span class="line">Exec Source：实现文件监控，可以实时监控文件中的新增内容，类似于linux中的tail -f 效果。</span><br><span class="line">在这需要注意 tail -F 和 tail -f 的区别</span><br><span class="line">tail -F</span><br><span class="line">等同于–follow&#x3D;name --retry，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪</span><br><span class="line">tail -f</span><br><span class="line">等同于–follow&#x3D;descriptor，根据文件描述符进行追踪，当文件改名或被删除，追踪停止</span><br><span class="line">在实际工作中我们的日志数据一般都会通过log4j记录，log4j产生的日志文件名称是固定的，每天定时给文件重命名</span><br><span class="line">假设默认log4j会向access.log文件中写日志，每当凌晨0点的时候，log4j都会对文件进行重命名，在access后面添加昨天的日期，然后再创建新的access.log记录当天的新增日志数据。</span><br><span class="line">这个时候如果想要一直监控access.log文件中的新增日志数据的话，就需要使用tail -F</span><br></pre></td></tr></table></figure>

<h4 id="Exec-Source"><a href="#Exec-Source" class="headerlink" title="Exec Source"></a>Exec Source</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NetCat TCP&#x2F;UDP Source： 采集指定端口(tcp、udp)的数据，可以读取流经端口的每一行数据</span><br><span class="line">Spooling Directory Source：采集文件夹里新增的文件</span><br><span class="line">Kafka Source：从Kafka消息队列中采集数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意了，前面我们分析的这几个source组件，其中execsource 和 kafkasource在实际工作中是最</span><br><span class="line">常见的，可以满足大部分的数据采集需求。</span><br></pre></td></tr></table></figure>

<h4 id="NetCat-TCP-UDP-Source"><a href="#NetCat-TCP-UDP-Source" class="headerlink" title="NetCat TCP/UDP Source"></a>NetCat TCP/UDP Source</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采集指定端口(tcp、udp)的数据，可以读取流经端口的每一行数据</span><br></pre></td></tr></table></figure>



<h4 id="Spooling-Directory-Source"><a href="#Spooling-Directory-Source" class="headerlink" title="Spooling Directory Source"></a>Spooling Directory Source</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采集文件夹里新增的文件</span><br></pre></td></tr></table></figure>



<h4 id="Kafka-Source"><a href="#Kafka-Source" class="headerlink" title="Kafka Source"></a>Kafka Source</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从Kafka消息队列中采集数据</span><br></pre></td></tr></table></figure>



<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Channel：接受Source发出的数据，可以把channel理解为一个临时存储数据的管道</span><br><span class="line">Channel的类型有很多：内存、文件，内存+文件、JDBC等</span><br><span class="line"></span><br><span class="line">接下来我们来分析一下</span><br></pre></td></tr></table></figure>

<h4 id="Memory-Channel"><a href="#Memory-Channel" class="headerlink" title="Memory Channel"></a>Memory Channel</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Memory Channel：使用内存作为数据的存储</span><br><span class="line">优点是效率高，因为就不涉及磁盘IO</span><br><span class="line">缺点有两个</span><br><span class="line">1：可能会丢数据，如果Flume的agent挂了，那么channel中的数据就丢失了。</span><br><span class="line">2：内存是有限的，会存在内存不够用的情况</span><br></pre></td></tr></table></figure>



<h4 id="File-Channel"><a href="#File-Channel" class="headerlink" title="File Channel"></a>File Channel</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File Channel：使用文件来作为数据的存储</span><br><span class="line">优点是数据不会丢失</span><br><span class="line">缺点是效率相对内存来说会有点慢，但是这个慢并没有我们想象中的那么慢，</span><br><span class="line">所以这个也是比较常用的一种channel。</span><br></pre></td></tr></table></figure>



<h4 id="Spillable-Memory-Channel"><a href="#Spillable-Memory-Channel" class="headerlink" title="Spillable Memory Channel"></a>Spillable Memory Channel</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spillable Memory Channel：使用内存和文件作为数据存储，即先把数据存到内存中，如果内存中</span><br><span class="line">数据达到阈值再flush到文件中</span><br><span class="line">优点：解决了内存不够用的问题。</span><br><span class="line">缺点：还是存在数据丢失的风险</span><br></pre></td></tr></table></figure>



<h3 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sink：从Channel中读取数据并存储到指定目的地</span><br><span class="line">Sink的表现形式有很多：打印到控制台、HDFS、Kafka等，</span><br><span class="line">注意：Channel中的数据直到进入目的地才会被删除，当Sink写入目的地失败后，可以自动重写，不会造成数据丢失，这块是有一个事务保证的。</span><br></pre></td></tr></table></figure>

<h4 id="常用的sink组件有"><a href="#常用的sink组件有" class="headerlink" title="常用的sink组件有"></a>常用的sink组件有</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger Sink：将数据作为日志处理，可以选择打印到控制台或者写到文件中，这个主要在测试的时</span><br><span class="line">候使用</span><br><span class="line">HDFS Sink：将数据传输到HDFS中，这个是比较常见的，主要针对离线计算的场景</span><br><span class="line">Kafka Sink：将数据发送到kafka消息队列中，这个也是比较常见的，主要针对实时计算场景，数据不落盘，实时传输，最后使用实时计算框架直接处理。</span><br></pre></td></tr></table></figure>

<h2 id="Flume安装部署"><a href="#Flume安装部署" class="headerlink" title="Flume安装部署"></a>Flume安装部署</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><h3 id="Flume安装部署-1"><a href="#Flume安装部署-1" class="headerlink" title="Flume安装部署"></a>Flume安装部署</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要使用Flume采集数据，那肯定要先安装Flume</span><br><span class="line">在这里我重新克隆了一台Linux机器，主机名设置为bigdata04，ip设置为192.168.206.132</span><br><span class="line">屏蔽防火墙，安装jdk并配置环境变量，因为Flume是java开发，所以需要依赖jdk环境</span><br><span class="line"></span><br><span class="line">直接克隆的bigdata01虚拟机的当前状态：ip和hostname需要改，防火墙和java环境已经配置好了，ip映射需要添加</span><br><span class="line">这些工作已经提前做好了，继续往下面分析</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装包下载好以后上传到linux机器的&#x2F;data&#x2F;soft目录下，并且解压</span><br><span class="line"></span><br><span class="line">修改盘flume的env环境变量配置文件</span><br><span class="line">在flume的conf目录下，修改flume-env.sh.template的名字，去掉后缀template</span><br><span class="line"></span><br><span class="line">这样就好了，Flume的安装是不是很简单，这个时候我们不需要启动任何进程，只有在配置好采集任务之</span><br><span class="line">后才需要启动Flume。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>java使用技巧积累</title>
    <url>/java%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E7%A7%AF%E7%B4%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="java使用技巧积累"><a href="#java使用技巧积累" class="headerlink" title="java使用技巧积累"></a>java使用技巧积累</h1><h2 id="休眠固定时间"><a href="#休眠固定时间" class="headerlink" title="休眠固定时间"></a>休眠固定时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.sleep((<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h2 id="java生成文件"><a href="#java生成文件" class="headerlink" title="java生成文件"></a>java生成文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate_141M</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"D:\\s_name_141.dat"</span>;</span><br><span class="line">        System.out.println(<span class="string">"start: 开始生成141M文件-&gt;"</span> + fileName);</span><br><span class="line">        BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(fileName));</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; <span class="number">8221592</span>) &#123;</span><br><span class="line">            bfw.write(<span class="string">"zhangsan beijing"</span>);</span><br><span class="line">            bfw.newLine();</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">10000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                bfw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串变整数"><a href="#字符串变整数" class="headerlink" title="字符串变整数"></a>字符串变整数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(&quot;2&quot;)</span><br><span class="line">生成long型的Long.parseLong(&quot;2&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="制表符"><a href="#制表符" class="headerlink" title="制表符"></a>制表符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;t</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java写文件和读文件</title>
    <url>/java%E5%86%99%E6%96%87%E4%BB%B6%E5%92%8C%E8%AF%BB%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="java写文件和读文件"><a href="#java写文件和读文件" class="headerlink" title="java写文件和读文件"></a>java写文件和读文件</h1><p><a href="https://www.cnblogs.com/rinack/p/14173936.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第六周 第五章 Hadoop核心复盘</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AD%E5%91%A8-%E7%AC%AC%E4%BA%94%E7%AB%A0-Hadoop%E6%A0%B8%E5%BF%83%E5%A4%8D%E7%9B%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第六周 第四章 Hadoop官方文档使用指北</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AD%E5%91%A8-%E7%AC%AC%E5%9B%9B%E7%AB%A0-Hadoop%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第六周-第四章-Hadoop官方文档使用指北"><a href="#第六周-第四章-Hadoop官方文档使用指北" class="headerlink" title="第六周 第四章 Hadoop官方文档使用指北"></a>第六周 第四章 Hadoop官方文档使用指北</h1><h2 id="Hadoop官方文档使用指北"><a href="#Hadoop官方文档使用指北" class="headerlink" title="Hadoop官方文档使用指北"></a>Hadoop官方文档使用指北</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们把Hadoop中的HDFS、MapReduce、YARN中比较常用和重要的功能基本都学习完了，但是在</span><br><span class="line">后续工作中可能会遇到一些特殊的场景需要用到特殊的知识点，这个时候就需要考验大家的自学能力了，</span><br><span class="line">以及后期你再遇到一些新的技术框架，想要从0开始学习的时候</span><br><span class="line">这个时候该如何下手呢？</span><br><span class="line">官方文档是最直接最靠谱的途径</span><br><span class="line">下面我们就以Hadoop官网为例来分析一下：</span><br><span class="line">其实咱们前面学习的很多知识点在官网中都有说明</span><br><span class="line">一般网站上都有这么几个链接，</span><br><span class="line">下载：下载安装包</span><br><span class="line">快速开始：快速安装部署，运行起来</span><br><span class="line">文档：最完整、最权威的技术文档</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要学习框架中的一些知识点，需要点击文档链接进去，但是目前hadoop官网的这个文档链接是有问题的，毕竟是免费开源的，大家就忍了吧</span><br><span class="line">从这里进不去，但是可以从快速开始链接进去，最终结果是一样的。</span><br><span class="line">进来之后默认是集群安装部署的内容，因为快速开始是为了帮助大家快速把这个框架安装部署运行起来，这块内容属于文档中的一部分。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们看文档左边的菜单，往下面拉，这里面有HDFS、MapReduce、YARN的内容</span><br><span class="line">所以说以后如果想要查找一些不常用的技术点的时候就可以到这里来查看了。</span><br><span class="line"></span><br><span class="line">大致的步骤就这样了，剩下的就是需要具体看里面的细节内容了。</span><br><span class="line">针对其他技术框架也是一样的，都是这样的思路，大家一定要学会看官方文档，这才是你学习能力的最直接体现。</span><br><span class="line">刚开始可能看起来比较懵，见得多了就熟悉了，看的多了就习惯了，这一步必须要踏出去！</span><br><span class="line">后面我们学习的每个框架我都会带着大家去看一下官网的，时间长了大家就可以掌握 如何通过官网去学习了</span><br><span class="line">学习知识是重要的，但是学习如何去学习是更重要的！</span><br></pre></td></tr></table></figure>

<h2 id="Hadoop在CDH和HDP中的使用"><a href="#Hadoop在CDH和HDP中的使用" class="headerlink" title="Hadoop在CDH和HDP中的使用"></a>Hadoop在CDH和HDP中的使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们前面学习了官方的Apache Hadoop版本，我们前面也说了，在实际工作中其实会使用CDH或者HDP，那下面我们就看一下在CDH和HDP中如何操作Hadoop。</span><br><span class="line">注意了，在这里我不打算讲CDH和HDP的安装部署，意义不大，咱们是开发人员，主要侧重于代码开发，安装部署的工作是运维人员的，咱们不能抢饭碗啊，什么都让你做了，别人不就得喝西北风啊，这样太不地道了，对吧。</span><br><span class="line">不过我们在这里要演示，肯定先安装部署了，在这里给大家分享一个好东西，不要告诉别人哦，这里面的东西目前到官网都下载不到了，没有下载链接了，幸亏我之前留的有后手，提前下载了一份。</span><br><span class="line"></span><br><span class="line">cloudera-quickstart-vm-5.13.0-0-vmware.zip</span><br><span class="line">HDP_3.0.1_vmware_181205.ova</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这两个文件可以通过vmware打开，里面已经安装好了CDH和HDP，可以在一台机器上启动，模拟正常的集群环境，这都是在官网上下载的，可以直接使用，非常简单，我们在这主要是为了演示一下如何在CDH和HDP中操作Hadoop，其实说实话，他们在操作的时候没有什么区别，和我们操作原生版本的Hadoop一样，但是呢如果不带着大家去亲身感受一把，大家心里面总是感觉有点虚。</span><br><span class="line">注意了，这里面的cloudera-quickstart-vm-5.13.0-0-vmware.zip这个文件目前官网已经没有下载链接了</span><br><span class="line">HDP_3.0.1_vmware_181205.ova目前是有的。</span><br></pre></td></tr></table></figure>

<h3 id="下面我们就来先演示一下CDH"><a href="#下面我们就来先演示一下CDH" class="headerlink" title="下面我们就来先演示一下CDH"></a>下面我们就来先演示一下CDH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先解压，再使用vmware直接打开即可，选择本地的镜像文件，在这里最好选择centos6.7的iso镜像文件，因为这个操作系统的版本就是centos6.7。</span><br><span class="line">CentOS-6.7-x86_64-minimal.iso</span><br><span class="line"></span><br><span class="line">注意了，这个虚拟机默认会使用4G内存，1个CPU，64G的磁盘，内存至少要4个G，太少的话有可能启动不了，在这我把资源调大一些，内存给他分8个G，CPU分2个，这样这个虚拟机运行会快一些，当然了，如果你本地的资源不多的话就使用默认的也可以。</span><br><span class="line"></span><br><span class="line">接着启动这个虚拟机即可。</span><br><span class="line">在启动之前，先把本地启动的那几台虚拟机关闭掉，要不然启动太多机器容易卡。</span><br><span class="line">启动的过程稍微有点慢，不要着急。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟机启动后，CDH中大数据的所有组件都是启动状态，可以在root账号下通过jsp命令查看已启动的服务</span><br><span class="line">root账号的密码是 cloudera</span><br><span class="line">通过su命令切换到root用户，然后输入root用户的密码即可。</span><br><span class="line"></span><br><span class="line">这里面除了有Hadoop的相关进程，还有其他大数据框架的进程</span><br><span class="line">注意了，CDH和HDP是一个平台，里面可以安装很多大数据组件，Hadoop只是它里面的一个软件而已。就类似于安卓的谷歌市场，苹果的appstore一样。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们尝试操作一下hdfs</span><br><span class="line">在这需要注意一下，我们使用HDFS的全路径尝试一下</span><br><span class="line">结果发现执行报错，这是因为CDH中启动的Hadoop集群，namenode的端口号是8020，不是9000，这一点需要注意一下</span><br><span class="line">在这里同样可以访问HDFS的web界面和YARN的web界面</span><br><span class="line">在这里访问HDFS的web界面我们需要使用 50070 端口，因为这里面的hadoop集群的版本是2.6的，在 hadoop2.x 中hdfs的web界面端口是 50070</span><br><span class="line">可以通过hadoop version命令查看版本号</span><br><span class="line">[root@quickstart Desktop]# hdfs dfs -ls &#x2F;</span><br><span class="line">Found 6 items</span><br><span class="line">drwxrwxrwx - hdfs supergroup 0 2017-10-23 10:29 &#x2F;benchmarks</span><br><span class="line">drwxr-xr-x - hbase supergroup 0 2020-04-28 01:06 &#x2F;hbase</span><br><span class="line">drwxr-xr-x - solr solr 0 2017-10-23 10:32 &#x2F;solr</span><br><span class="line">drwxrwxrwt - hdfs supergroup 0 2020-04-28 01:06 &#x2F;tmp</span><br><span class="line">drwxr-xr-x - hdfs supergroup 0 2017-10-23 10:31 &#x2F;user</span><br><span class="line">drwxr-xr-x - hdfs supergroup 0 2017-10-23 10:31 &#x2F;var</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在这需要注意一下，我们使用HDFS的全路径尝试一下</span><br><span class="line">[root@quickstart Desktop]# hdfs dfs -ls hdfs:&#x2F;&#x2F;127.0.0.1:9000&#x2F;</span><br><span class="line">20&#x2F;04&#x2F;28 01:13:57 WARN ipc.Client: Failed to connect to server: quickstart.cl</span><br><span class="line">java.net.ConnectException: Connection refused</span><br><span class="line"></span><br><span class="line">结果发现执行报错，这是因为CDH中启动的Hadoop集群，namenode的端口号是8020，不是9000，这一点需要注意一下</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里同样可以访问HDFS的web界面和YARN的web界面</span><br><span class="line">在这里访问HDFS的web界面我们需要使用 50070(不是9870) 端口，因为这里面的hadoop集群的版本是2.6的，在 hadoop2.x 中hdfs的web界面端口是 50070</span><br><span class="line">127.0.0.1:50070</span><br><span class="line"></span><br><span class="line">可以通过hadoop version命令查看版本号</span><br><span class="line"></span><br><span class="line">YARN的web界面</span><br><span class="line">127.0.0.1:8088</span><br></pre></td></tr></table></figure>

<h2 id="接下来看一下HDP"><a href="#接下来看一下HDP" class="headerlink" title="接下来看一下HDP"></a>接下来看一下HDP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vmware中打开HDP_3.0.1_vmware_181205.ova，会弹出如下界面</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里面修改一下新虚拟机的存储路径</span><br><span class="line">指定到这里，和之前安装的虚拟机放到同一个目录下</span><br><span class="line">D:\Program Files (x86)\Virtual Machines\HDP_3.0.1_vmware_181205</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第六周 第三章 YARN实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AD%E5%91%A8-%E7%AC%AC%E4%B8%89%E7%AB%A0-YARN%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第六周-第三章-YARN实战"><a href="#第六周-第三章-YARN实战" class="headerlink" title="第六周 第三章 YARN实战"></a>第六周 第三章 YARN实战</h1><h2 id="HADOOP之YARN详解"><a href="#HADOOP之YARN详解" class="headerlink" title="HADOOP之YARN详解"></a>HADOOP之YARN详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们学习了Hadoop中的MapReduce，我们知道MapReduce任务是需要在YARN中执行的，那下面</span><br><span class="line">我们就来学习一下Hadoop中的YARN</span><br></pre></td></tr></table></figure>

<h3 id="YARN的由来"><a href="#YARN的由来" class="headerlink" title="YARN的由来"></a>YARN的由来</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从Hadoop2开始，官方把资源管理单独剥离出来，主要是为了考虑后期作为一个公共的资源管理平台，</span><br><span class="line">任何满足规则的计算引擎都可以在它上面执行。</span><br><span class="line">所以YARN可以实现HADOOP集群的资源共享，不仅仅可以跑MapRedcue，还可以跑Spark、Flink。</span><br></pre></td></tr></table></figure>

<h3 id="YARN架构分析"><a href="#YARN架构分析" class="headerlink" title="YARN架构分析"></a>YARN架构分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们之前部署Hadoop集群的时候也对YARN的架构有了基本的了解</span><br><span class="line">YARN主要负责集群资源的管理和调度 ，支持主从架构，主节点最多可以有2个，从节点可以有多个</span><br><span class="line">其中：ResourceManager：是主节点，主要负责集群资源的分配和管理</span><br><span class="line">NodeManager：是从节点，主要负责当前机器资源管理</span><br></pre></td></tr></table></figure>

<h3 id="YARN资源管理模型"><a href="#YARN资源管理模型" class="headerlink" title="YARN资源管理模型"></a>YARN资源管理模型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">YARN主要管理内存和CPU这两种资源类型</span><br><span class="line">  当NodeManager节点启动的时候自动向ResourceManager注册，将当前节点上的可用CPU信息和内存</span><br><span class="line">信息注册上去。</span><br><span class="line">  这样所有的nodemanager注册完成以后，resourcemanager就知道目前集群的资源总量了。</span><br><span class="line">  那我们现在来看一下我这个一主两从的集群资源是什么样子的，打开yarn的<span class="number">8088</span>界面</span><br><span class="line">    </span><br><span class="line">    注意，这里面显示的资源是集群中所有从节点的资源总和，不包括主节点的资源，</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H2ELY6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/H2ELY6.md.png" alt="H2ELY6.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们再详细看一下每一个从节点的资源信息</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H21Xsx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/H21Xsx.md.png" alt="H21Xsx.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是这个数值是对不上的，我的linux机器每台只给它分配了2G的内存  通过free -m可以看到</span><br><span class="line"></span><br><span class="line">CPU只分配了1个 通过top命令可以看到</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那为什么在这里显示是内存是8G，CPU是8个呢？</span><br><span class="line">不要着急，我们先喝杯咖啡，看一下下面这2个参数</span><br><span class="line"></span><br><span class="line">yarn.nodemanager.resource.memory-mb：单节点可分配的物理内存总量，默认是8MB*1024，即8G</span><br><span class="line">yarn.nodemanager.resource.cpu-vcores：单节点可分配的虚拟CPU个数，默认是8</span><br><span class="line">看到没有，这都是默认单节点的内存和CPU信息，就算你这个机器没有这么多资源，但是在yarndefault.xml中有这些默认资源的配置，这样当nodemanager去上报资源的时候就会读取这两个参数的值，这也就是为什么我们在前面看到了单节点都是8G内存和8个cpu，其实我们的linux机器是没有这么大资源的，那你这就是虚标啊，肯定不能这样干，你实际有多少就是多少，所以我们可以修改这些参数的值，修改的话就在yarn-site.xml中进行配置即可，改完之后就可以看到真实的信息了，在这我就先不改了，针对我们的学习环境不影响使用，修改的意义不大，你知道这回事就行了。</span><br></pre></td></tr></table></figure>



<h3 id="YARN中的调度器-面试中经常问"><a href="#YARN中的调度器-面试中经常问" class="headerlink" title="YARN中的调度器(面试中经常问)"></a>YARN中的调度器(面试中经常问)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来详细分析一下YARN中的调度器，这个是非常实用的东西，面试的时候也会经常问到。</span><br><span class="line">大家可以想象一个场景，我们集群的资源是有限的，在实际工作中会有很多人向集群中提交任务，那这时候资源如何分配呢？</span><br><span class="line">如果你提交了一个很占资源的任务，这一个任务就把集群中90%的资源都占用了，后面别人再提交任务，剩下的资源就不够用了，这个时候怎么办？</span><br><span class="line">让他们等你的任务执行完了再执行？还是说你把你的资源匀出来一些分给他，你少占用一些，让他也能慢慢的开始执行？</span><br><span class="line">[root@bigdata02 ~]# free -m</span><br><span class="line">total used free shared buff&#x2F;cache availab</span><br><span class="line">Mem: 1819 372 1133 9 313 12</span><br><span class="line">Swap: 2047 0 2047</span><br><span class="line">1234</span><br><span class="line">top - 11:30:35 up 1:05, 1 user, load average: 0.00, 0.08, 0.10</span><br><span class="line">Tasks: 99 total, 1 running, 98 sleeping, 0 stopped, 0 zombie</span><br><span class="line">%Cpu0 : 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">具体如何去做这个是由YARN中的调度器负责的</span><br><span class="line">YARN中支持三种调度器</span><br><span class="line"><span class="number">1</span>：FIFO Scheduler：先进先出(first in, first out)调度策略</span><br><span class="line"><span class="number">2</span>：Capacity Scheduler：FIFO Scheduler的多队列版本</span><br><span class="line"><span class="number">3</span>：FairScheduler：多队列，多用户共享资源</span><br><span class="line">    </span><br><span class="line">下面来看图分析一下这三种调度器的特性</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H2dj9f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/H2dj9f.md.png" alt="H2dj9f.md.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FIFO Scheduler：是先进先出的，大家都是排队的，如果你的任务申请不到足够的资源，那你就等着，等前面的任务执行结束释放了资源之后你再执行。这种在有些时候是不合理的，因为我们有一些任务的优先级比较高，我们希望任务提交上去立刻就开始执行，这个就实现不了了。</span><br><span class="line">CapacityScheduler：它是FifoScheduler的多队列版本，就是我们先把集群中的整块资源划分成多份，我们可以人为的给这些资源定义使用场景，例如图里面的queue A里面运行普通的任务，queueB中运行优先级比较高的任务。这两个队列的资源是相互对立的</span><br><span class="line">但是注意一点，队列内部还是按照先进先出的规则。</span><br><span class="line">FairScheduler：支持多个队列，每个队列可以配置一定的资源，每个队列中的任务共享其所在队列的所有资源，不需要排队等待资源</span><br><span class="line">具体是这样的，假设我们向一个队列中提交了一个任务，这个任务刚开始会占用整个队列的资源，当你再提交第二个任务的时候，第一个任务会把他的资源释放出来一部分给第二个任务使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在实际工作中我们一般都是使用第二种， CapacityScheduler ，从hadoop2开始， CapacitySchedule r也是集群中的默认调度器了</span><br><span class="line">那下面我们到集群上看一下，点击左侧的Scheduler查看</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H2y4IJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/H2y4IJ.md.png" alt="H2y4IJ.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Capacity，这个是集群的调度器类型，</span><br><span class="line">下面的root是根的意思，他下面目前只有一个队列，叫default，我们之前提交的任务都会进入到这个队列中。</span><br></pre></td></tr></table></figure>

<h3 id="案例：YARN多资源队列配置和使用"><a href="#案例：YARN多资源队列配置和使用" class="headerlink" title="案例：YARN多资源队列配置和使用"></a>案例：YARN多资源队列配置和使用</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来修改一下，增加多个队列</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  我们的需求是这样的，希望增加2个队列，一个是online队列，一个是offline队列</span><br><span class="line">  然后向offline队列中提交一个mapreduce任务</span><br><span class="line">  online队列里面运行实时任务，offline队列里面运行离线任务，我们现在学习的mapreduce就属于离线任务</span><br><span class="line">  实时任务我们后面会学习，等讲到了再具体分析。</span><br><span class="line"> 这两个队列其实也是我们公司中最开始分配的队列，不过随着后期集群规模的扩大和业务需求的增加，后期又增加了多个队列。</span><br><span class="line">在这里我们先增加这2个队列，后期再增加多个也是一样的。</span><br><span class="line">具体步骤如下：</span><br><span class="line">修改集群中 etc&#x2F;hadoop 目录下的 capacity-scheduler.xml 配置文件</span><br><span class="line">修改和增加以下参数，针对已有的参数，修改value中的值，针对没有的参数，则直接增加</span><br><span class="line">这里的 default 是需要保留的，增加 online,offline ，这三个队列的资源比例为 7:1:2</span><br><span class="line">具体的比例需要根据实际的业务需求来，看你们那些类型的任务比较多，对应的队列中资源比例就调高一些，我们现在暂时还没有online任务，所以我就把online队列的资源占比设置的小一些。</span><br><span class="line">先修改bigdata01上的配置</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.queues&lt;/name&gt;</span><br><span class="line">&lt;value&gt;default,online,offline&lt;/value&gt;</span><br><span class="line">&lt;description&gt;队列列表,多个队列之间使用逗号分割&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.default.capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;70&lt;/value&gt;</span><br><span class="line">&lt;description&gt;default队列70%&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.online.capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;10&lt;/value&gt;</span><br><span class="line">&lt;description&gt;online队列10%&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.offline.capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;20&lt;/value&gt;</span><br><span class="line">&lt;description&gt;offline队列20%&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.default.maximum-capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;70&lt;/value&gt;</span><br><span class="line">&lt;description&gt;Default队列可使用的资源上限.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.online.maximum-capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;10&lt;/value&gt;</span><br><span class="line">&lt;description&gt;online队列可使用的资源上限.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.scheduler.capacity.root.offline.maximum-capacity&lt;/name&gt;</span><br><span class="line">&lt;value&gt;20&lt;/value&gt;</span><br><span class="line">&lt;description&gt;offline队列可使用的资源上限.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改好以后再同步到另外两个节点上</span><br><span class="line">scp -rq capacity-scheduler.xml bigdata02:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line">scp -rq capacity-scheduler.xml bigdata03:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">然后重启集群才能生效</span><br><span class="line"></span><br><span class="line">进入yarn的web界面，查看最新的调度器队列信息</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HWPnTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HWPnTx.md.png" alt="HWPnTx.md.png"></a><br><a href="https://imgtu.com/i/HWPKk6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HWPKk6.md.png" alt="HWPKk6.md.png"></a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">注意了，现在默认提交的任务还是会进入<span class="keyword">default</span>的队列，如果希望向offline队列提交任务的话，需要指定队列名称，不指定就进默认的队列</span><br><span class="line">在这里我们还需要同步微调一下代码，否则我们指定的队列信息 代码是无法识别的</span><br><span class="line">拷贝WordCountJob类，新的类名为 WordCountJobQueue</span><br><span class="line">主要在job配置中增加一行代码</span><br></pre></td></tr></table></figure>

<h5 id="代码的改变"><a href="#代码的改变" class="headerlink" title="代码的改变"></a>代码的改变</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在最初的wordcount案例代码基础上</span><br><span class="line">**主要改写job部分</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定Job需要的配置参数</span></span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="comment">// (调度器)解析命令行中通过-D传递过来的参数，添加到conf中</span></span><br><span class="line">            String[] remainingArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">            <span class="comment">// 创建一个Job</span></span><br><span class="line">            Job job = Job.getInstance(conf);</span><br><span class="line">            <span class="comment">// 注意：这一行必须设置，否者在集群中执行时找不到WordCountJob这个类</span></span><br><span class="line">            job.setJarByClass(WordCountJobSkew<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定输入路径，可以是文件也可以是目录(目录里只有一个文件时可以); 注意FileInputFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(remainingArgs[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 指定输出路径(只能是hdfs上一个不存在的目录); 注意FileOutFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(remainingArgs[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure>

<h3 id="打包，上传，执行"><a href="#打包，上传，执行" class="headerlink" title="打包，上传，执行"></a>打包，上传，执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar bigdata_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar com.imooc.mc.WordCountJobQueue -Dmapreduce.job.queuename&#x3D;offline  &#x2F;test&#x2F;WordCount&#x2F;test&#x2F;test.txt &#x2F;test&#x2F;WordCount&#x2F;test&#x2F;outcomeScheduler</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HWALse" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HWALse.md.png" alt="HWALse.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们去掉指定队列名称的配置(命令中，代码不用改)，此时还会使用default队列</span><br><span class="line"></span><br><span class="line">这就是YARN中调度器多资源队列的配置，在工作中我们只要掌握如何使用这些队列就可以了，具体如何配置是我们向运维同学提需求，他们去配置。</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第六周 第二章 剖析数据倾向问题与企业级解决方案</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AD%E5%91%A8-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%89%96%E6%9E%90%E6%95%B0%E6%8D%AE%E5%80%BE%E5%90%91%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第六周-第二章-剖析数据倾向问题与企业级解决方案"><a href="#第六周-第二章-剖析数据倾向问题与企业级解决方案" class="headerlink" title="第六周 第二章 剖析数据倾向问题与企业级解决方案"></a>第六周 第二章 剖析数据倾向问题与企业级解决方案</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  在实际工作中，如果我们想提高MapReduce的执行效率，最直接的方法是什么呢？</span><br><span class="line">我们知道MapReduce是分为Map阶段和Reduce阶段，其实提高执行效率就是提高这两个阶段的执行效率默认情况下Map阶段中Map任务的个数是和数据的InputSplit相关的，InputSplit的个数一般是和Block块是有关联的，所以可以认为Map任务的个数和数据的block块个数有关系，针对Map任务的个数我们一般是不需要干预的，除非是前面我们说的海量小文件，那个时候可以考虑把小文件合并成大文件。其他情况是不需要调整的，那就剩下Reduce阶段了，咱们前面说过，默认情况下reduce的个数是<span class="number">1</span>个，所以现在MapReduce任务的压力就集中在Reduce阶段了，如果说数据量比较大的时候，一个reduce任务处理起来肯定是比较慢的，所以我们可以考虑增加reduce任务的个数，这样就可以实现数据分流了，提高计算效率了。</span><br><span class="line">但是注意了，如果增加Reduce的个数，那肯定是要对数据进行分区的，分区之后，每一个分区的数据会被一个reduce任务处理。</span><br><span class="line">那如何增加分区呢？</span><br><span class="line">我们来看一下代码，进入WordCountJob中，其实我们可以通过job.setPartitionerClass 来设置分区类，不过目前我们是没有设置的，那框架中是不是有默认值啊，是有的，我们可以通过 job.getPartitionerClass 方法看到默认情况下会使用 HashPartitioner 这个分区类</span><br></pre></td></tr></table></figure>

<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们来看一下HashPartitioner的实现是什么样子的</span><br><span class="line"></span><br><span class="line">&#x2F;** Partition keys by their &#123;@link Object#hashCode()&#125;. *&#x2F;</span><br><span class="line">@InterfaceAudience.Public</span><br><span class="line">@InterfaceStability.Stable</span><br><span class="line">public class HashPartitioner&lt;K, V&gt; extends Partitioner&lt;K, V&gt; &#123;</span><br><span class="line">&#x2F;** Use &#123;@link Object#hashCode()&#125; to partition. *&#x2F;</span><br><span class="line">public int getPartition(K key, V value,</span><br><span class="line">int numReduceTasks) &#123;</span><br><span class="line">return (key.hashCode() &amp; Integer.MAX_VALUE) % numReduceTasks;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashPartitioner继承了Partitioner，这里面其实就一个方法， getPartition ，其实map里面每一条数据都会进入这个方法来获取他们所在的分区信息，这里的key就是k2,value就是v2</span><br><span class="line">主要看里面的实现</span><br><span class="line"></span><br><span class="line">(key.hashCode() &amp; Integer.MAX_VALUE) % numReduceTasks</span><br><span class="line"></span><br><span class="line">  其实起决定性的因素就是 numReduceTasks 的值，这个值默认是1，通过 job.getNumReduceTasks() 可知。</span><br><span class="line">  所以最终任何值%1 都返回0，那也就意味着他们都在0号分区，也就只有这一个分区。</span><br><span class="line">  如果想要多个分区，很简单，只需要把 numReduceTasks 的数目调大即可(当为5时，取余后的值可能为0,1,2,3,4,也就是五个分区)，这个其实就reduce任务的数量，那也就意味着，只要redcue任务数量变大了，对应的分区数也就变多了，有多少个分区就会有多少个reduce任务，那我们就不需要单独增加分区的数量了，只需要控制好Redcue任务的数量即可。</span><br><span class="line">  增加redcue任务个数在一定场景下是可以提高效率的，但是在一些特殊场景下单纯增加reduce任务个数是无法达到质的提升的。</span><br></pre></td></tr></table></figure>

<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来分析一个场景：</span><br><span class="line">  假设我们有一个文件，有1000W条数据，这里面的值主要都是数字，1,2,3,4,5,6,7,8,9,10，我们希望统计出来每个数字出现的次数</span><br><span class="line">  其实在私底下我们是知道这份数据的大致情况的，这里面这1000w条数据，值为5的数据有910w条左右，剩下的9个数字一共只有90w条，那也就意味着，这份数据中，值为5的数据比较集中，或者说值为5的数据属于倾斜的数据，在这一整份数据中，它占得比重比其他的数据多得多。</span><br><span class="line">  下面我们画图来具体分析一下：</span><br><span class="line">假设这1000W条数据的文件有3个block，会产生3个InputSplt，最终会产生3个Map任务，默认情况下只有一个reduce任务，所以所有的数据都会让这一个reduce任务处理，这样这个Reduce压力肯定很大，大量的时间都消耗在了这里</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H660gK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/14/H660gK.png" alt="H660gK.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那根据我们前面的分析，我们可以增加reduce任务的数量，看下面这张图，我们把reduce任务的数量调</span><br><span class="line">整到10个，这个时候就会把1000w条数据让这10 个reduce任务并行处理了，这个时候效率肯定会有一定</span><br><span class="line">的提升，但是最后我们会发现，性能提升是有限的，并没有达到质的提升，那这是为什么呢？</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H66w36" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/14/H66w36.png" alt="H66w36.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  我们来分析一下，刚才我们说了我们这份数据中，值为5的数据有910w条，这就占了整份数据的90%了，那这90%的数据会被一个reduce任务处理，在这里假设是让reduce5处理了，reduce5这个任务执行的是比较慢的，其他reduce任务都执行结束很长时间了，它还没执行结束，因为reduce5中处理的数据量和其他reduce中处理的数据量规模相差太大了，所以最终reduce5拖了后腿。咱们mapreduce任务执行消耗的时间是一直统计到最后一个执行结束的reduce任务，所以就算其他reduce任务早都执行结束了也没有用，整个mapreduce任务是没有执行结束的。</span><br><span class="line">那针对这种情况怎么办？</span><br><span class="line">  这个时候单纯的增加reduce任务的个数已经不起多大作用了，如果启动太多可能还会适得其反。</span><br><span class="line">其实这个时候最好的办法是把这个值为5的数据尽量打散，把这个倾斜的数据分配到其他reduce任务中去计算，这样才能从根本上解决问题。</span><br><span class="line">  这就是我们要分析的一个数据倾斜的问题</span><br><span class="line">MapReduce程序执行时，Reduce节点大部分执行完毕，但是有一个或者几个Reduce节点运行很慢，导致整个程序处理时间变得很长</span><br><span class="line">  具体表现为：Ruduce阶段一直卡着不动</span><br><span class="line">根据刚才的分析，有两种方案</span><br><span class="line">1. 增加reduce任务个数，这个属于治标不治本，针对倾斜不是太严重的数据是可以解决问题的，针对倾斜严重的数据，这样是解决不了根本问题的</span><br><span class="line">2. 把倾斜的数据打散这种可以根治倾斜严重的数据。</span><br></pre></td></tr></table></figure>

<h2 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在呢我们通过理论层面分析完了，那接下来我们来具体进入一个实际案例上手操作一下</span><br><span class="line">还使用我们刚才说的那一份数据，1000w条的，其中值为5的大致有910w条左右</span><br><span class="line">其他的加起来一共90万条左右。</span><br><span class="line">这个数据文件我已经生成好了，直接上传到linux服务器上就可以，上传到&#x2F;data&#x2F;soft目录下</span><br><span class="line"></span><br><span class="line">这个文件有点大，在windows本地无法打开，在这里我们去一条数据看一下数据格式，前面是一个数</span><br><span class="line">字，后面是一行日志，这个数据是我自己造的，我们主要是使用前面的这个数字，后面的内容主要是为了</span><br><span class="line">充数的，要不然文件太小，测试不出来效果。后面我们解析数据的时候只获取前面这个数字即可，前面这</span><br><span class="line">个数字是1-10之间的数字</span><br><span class="line">接下来把这个文件上传到hdfs上</span><br><span class="line">[root@bigdata01 soft]# ll</span><br><span class="line">total 2632200</span><br><span class="line">drwxr-xr-x. 9 1001 1002 244 Apr 26 20:34 hadoop-3.2.0</span><br><span class="line">-rw-r--r--. 1 root root 345625475 Jul 19 2019 hadoop-3.2.0.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root 1860100000 Apr 27 21:58 hello_10000000.dat</span><br><span class="line">drwxr-xr-x. 7 10 143 245 Dec 16 2018 jdk1.8</span><br><span class="line">-rw-r--r--. 1 root root 194042837 Apr 6 23:14 jdk-8u202-linux-x64.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root 147616384 Apr 27 16:22 s_name_140.dat</span><br><span class="line">-rw-r--r--. 1 root root 147976384 Apr 27 16:22 s_name_141.dat</span><br><span class="line">123456789</span><br><span class="line">[root@bigdata01 soft]# tail -1 hello_10000000.dat</span><br><span class="line">10 INFO main org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter: FileO</span><br><span class="line"></span><br><span class="line">接下来把这个文件上传到hdfs上</span><br></pre></td></tr></table></figure>

<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要设置:</span><br><span class="line">1.map对k1的处理，</span><br><span class="line">2.reduce阶段模拟复杂数据处理，</span><br><span class="line">3.job.setNumReduceTasks(num);</span><br></pre></td></tr></table></figure>

<h4 id="自己创建的测试数据"><a href="#自己创建的测试数据" class="headerlink" title="自己创建的测试数据"></a>自己创建的测试数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一共5000000行</span><br><span class="line">60% 5</span><br><span class="line">5% 1 2 3 4 6 7 8 9</span><br></pre></td></tr></table></figure>



<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            <span class="comment">//logger.info("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;");</span></span><br><span class="line">            <span class="comment">//System.out.println("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;");</span></span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">            Text k2 = <span class="keyword">new</span> Text(words[<span class="number">0</span>]);</span><br><span class="line">            LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">            context.write(k2,v2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//Logger logger = LoggerFactory.getLogger(myReducer.class);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对&lt;k2, &#123;v2...&#125;&gt;的数据进行累加求和，生成&lt;k3,v3&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k2</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v2s</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k2, Iterable&lt;LongWritable&gt; v2s, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LongWritable v2:v2s)&#123;</span><br><span class="line">                <span class="comment">//logger.info("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;");</span></span><br><span class="line">                <span class="comment">//System.out.println("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;");</span></span><br><span class="line">                sum += v2.get();</span><br><span class="line">                <span class="comment">//模拟Reduce的复杂计算消耗的时间</span></span><br><span class="line">                <span class="keyword">if</span>(sum%<span class="number">200</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    Thread.sleep((<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Text k3 = k2;</span><br><span class="line">            LongWritable v3 = <span class="keyword">new</span> LongWritable(sum);</span><br><span class="line">            <span class="comment">//logger.info("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;");</span></span><br><span class="line">            <span class="comment">//System.out.println("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;");</span></span><br><span class="line">            context.write(k3, v3);</span><br><span class="line">            <span class="comment">// super.reduce(key, values, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(args.length!=<span class="number">3</span>)&#123;</span><br><span class="line">                System.exit(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="string">"缺少路径参数！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指定Job需要的配置参数</span></span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="comment">// 创建一个Job</span></span><br><span class="line">            Job job = Job.getInstance(conf);</span><br><span class="line">            <span class="comment">// 注意：这一行必须设置，否者在集群中执行时找不到WordCountJob这个类</span></span><br><span class="line">            job.setJarByClass(WordCountJobSkew<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定输入路径，可以是文件也可以是目录(目录里只有一个文件时可以); 注意FileInputFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 指定输出路径(只能是hdfs上一个不存在的目录); 注意FileOutFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定map相关代码</span></span><br><span class="line">            job.setMapperClass(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k2类型</span></span><br><span class="line">            job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v2类型</span></span><br><span class="line">            job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//指定reduce相关代码</span></span><br><span class="line">            job.setReducerClass(myReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k3类型</span></span><br><span class="line">            job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v3类型</span></span><br><span class="line">            job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            job.setNumReduceTasks(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">            <span class="comment">// 提交job</span></span><br><span class="line">            job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h3><p><a href="https://imgtu.com/i/H6xkFA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/14/H6xkFA.md.png" alt="H6xkFA.md.png"></a></p>
<h4 id="1个reduceTask"><a href="#1个reduceTask" class="headerlink" title="1个reduceTask"></a>1个reduceTask</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar bigdata_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar com.imooc.mc.WordCountJobSkew &#x2F;test&#x2F;shujuqingxie&#x2F;QingXieData.txt &#x2F;test&#x2F;shujuqingxie&#x2F;outcome1 1</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H6x4kd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/14/H6x4kd.md.png" alt="H6x4kd.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">具体分析页面打不开</span><br></pre></td></tr></table></figure>



<h4 id="9个reduceTask"><a href="#9个reduceTask" class="headerlink" title="9个reduceTask"></a>9个reduceTask</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar bigdata_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar com.imooc.mc.WordCountJobSkew &#x2F;test&#x2F;shujuqingxie&#x2F;QingXieData.txt &#x2F;test&#x2F;shujuqingxie&#x2F;outcome1 9</span><br></pre></td></tr></table></figure>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><a href="https://imgtu.com/i/HczLlt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HczLlt.md.png" alt="HczLlt.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以从这可以看出来，性能提升并不大</span><br><span class="line"></span><br><span class="line">具体分析Reduce任务的执行时间</span><br><span class="line">这里由于有10个reduce，所以一共有10行，在这我们截取了一部分，其中这里面有一个reduce任务消耗的时间比较长，其他reduce任务的执行时间都是4~5秒，这个reduce任务的执行时间是1分26秒，那就意味着值为5的那910w数据进入到这个reduce了，所以它执行的比较慢。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/Hcpypn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/14/Hcpypn.md.png" alt="Hcpypn.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map任务14个里面，kill 2个是因为“推测执行”，当map任务里某些maptask任务相比其它maptask明显慢很多时(会认为是有异常)，会自动产生新的maptask任务，两个一起执行，最后杀掉慢的 下面这是reduce阶段某个reducetask的推测执行</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HgCe78" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HgCe78.md.png" alt="HgCe78.md.png"></a></p>
<h3 id="把倾斜的数据打散-面试"><a href="#把倾斜的数据打散-面试" class="headerlink" title="把倾斜的数据打散(面试)"></a>把倾斜的数据打散(面试)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  那我们再把reduce任务的个数提高一下，会不会提高性能呢？不会了，刚才从1个reduce任务提高到10个reduce任务时间也就减少了三四秒钟，所以再增加reduce任务的个数就没有多大意义了。</span><br><span class="line">  那接下来就需要使用我们的绝招了，把倾斜的数据打散，在这里就是把5这个数字打散，</span><br><span class="line">怎么打散呢？其实就是给他加上一些有规律的随机数字就可以了</span><br><span class="line">  在这里我们这样处理，我把5这个数值的数据再分成10份，所以我就在这个数值5后面拼上一个0~9的随机数即可。</span><br></pre></td></tr></table></figure>

<h4 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">只需要在map中把k2的值修改一下就可以了，这样就可以把值为<span class="number">5</span>的数据打散了。</span><br><span class="line">编译打包，提交到集群</span><br><span class="line">String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            String key = words[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"5"</span>.equals(key))&#123;</span><br><span class="line">                key = <span class="string">"5_"</span>+random.nextInt(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">            Text k2 = <span class="keyword">new</span> Text(key);</span><br><span class="line">            LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">            context.write(k2,v2);</span><br></pre></td></tr></table></figure>



<h4 id="reduce-1"><a href="#reduce-1" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">没变</span><br></pre></td></tr></table></figure>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，这个时候获取到的并不是最终的结果，因为我们把值为5的数据随机分成多份了，最多分成10份</span><br><span class="line"></span><br><span class="line">任务总的执行消耗时间为： Elapsed: 1mins, 39sec</span><br><span class="line">这次任务执行时间节省了1分钟多的左右，在这就属于质的提升了，相当于节省了将近一半的时间了</span><br><span class="line"></span><br><span class="line">查看一下reduce任务执行情况，在这里就没有发现特别耗时的reduce任务了，消耗的时间几乎都差不多</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HgM8TH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HgM8TH.png" alt="HgM8TH.png"></a><br><a href="https://imgtu.com/i/HgMJkd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HgMJkd.md.png" alt="HgMJkd.md.png"></a><br><a href="https://imgtu.com/i/HgMYtA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HgMYtA.md.png" alt="HgMYtA.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 但是这个时候我们获取到的最终结果是一个半成品，还需要进行一次加工，其实我们前面把这个倾斜的数据打散之后相当于做了一个局部聚合，现在还需要再开发一个mapreduce任务再做一次全局聚合，其实也很简单，获取到上一个map任务的输出，在map端读取到数据之后，对数据先使用空格分割，然后对第一列的数据再使用下划线分割，分割之后总是取第一列，这样就可以把值为5的数据还原出来了，这个时候数据一共就这么十几条，怎么处理都很快了，这个代码就给大家留成作业了，我们刚才已经把详细的过程都分析过了，大家下去之后自己写一下，如果遇到了问题，可以在咱们的问答区一块讨论，或者直接找我都是可以的。</span><br><span class="line">这就是针对数据倾斜问题的处理方法，面试的时候经常问到，大家一定要能够把这个思路说明白。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HWm7uT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/15/HWm7uT.png" alt="HWm7uT.png"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第六周 第一章 剖析小文件问题与企业级解决方案</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%85%AD%E5%91%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%89%96%E6%9E%90%E5%B0%8F%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第六周-第一章-剖析小文件问题与企业级解决方案"><a href="#第六周-第一章-剖析小文件问题与企业级解决方案" class="headerlink" title="第六周 第一章 剖析小文件问题与企业级解决方案"></a>第六周 第一章 剖析小文件问题与企业级解决方案</h1><h2 id="MapReduce性能优化"><a href="#MapReduce性能优化" class="headerlink" title="MapReduce性能优化"></a>MapReduce性能优化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">现在大家已经掌握了MapReduce程序的开发步骤，注意了，针对MapReduce的案例我们并没有讲太多，主要是因为在实际工作中真正需要我们去写MapReduce代码的场景已经是凤毛麟角了，因为后面我们会学习一个大数据框架Hive，Hive支持SQL，这个Hive底层会把SQL转化为MapReduce执行，不需要我们写一行代码，所以说工作中的大部分需求我们都使用SQL去实现了，谁还苦巴巴的来写代码啊，一行SQL能抵你写的几十行代码，你还想去写MapReduce代码吗，肯定不想了。</span><br><span class="line">但是MapReduce代码的开发毕竟是基本功，所以前面我们也详细的讲解了它的开发流程。</span><br><span class="line">虽然现在MapReduce代码写的很少了，但是针对MapReduce程序的性能优化是少不了的，面试也是经常会问到的，所以下面我们就来分析一下MapReduce中典型的性能优化场景</span><br><span class="line">第一个场景是：小文件问题</span><br><span class="line">第二个场景是：数据倾斜问题</span><br></pre></td></tr></table></figure>



<h3 id="小文件问题"><a href="#小文件问题" class="headerlink" title="小文件问题"></a>小文件问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先一个一个来，不要着急，我们先看小文件问题</span><br><span class="line">咱们前面分析过，Hadoop的HDFS和MapReduce都是针对大数据文件来设计的，在小文件的处理上不但效率低下，而且十分消耗内存资源</span><br><span class="line">针对HDFS而言，每一个小文件在namenode中都会占用150字节的内存空间，最终会导致集群中虽然存储了很多个文件，但是文件的体积并不大，这样就没有意义了。针对MapReduce而言，每一个小文件都是一个Block，都会产生一个InputSplit，最终每一个小文件都会产生一个map任务，这样会导致同时启动太多的Map任务，Map任务的启动是非常消耗性能的，但是启动了以后执行了很短时间就停止了，因为小文件的数据量太小了，这样就会造成任务执行消耗的时间还没有启动任务消耗的时间多，这样也会影响MapReduce执行的效率。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  针对这个问题,解决办法通常是选择一个容器，将这些小文件组织起来统一存储，HDFS提供了两种类型的容器，分别是SequenceFile 和 MapFile</span><br><span class="line">SequeceFile是Hadoop 提供的一种二进制文件，这种二进制文件直接将&lt;key, value&gt;对序列化到文件中。</span><br><span class="line">  一般对小文件可以使用这种文件合并，即将小文件的文件名作为key，文件内容作为value序列化到大文件中</span><br><span class="line">  但是这个文件有一个缺点，就是它需要一个合并文件的过程，最终合并的文件会比较大，并且合并后的文件查看起来不方便，必须通过遍历才能查看里面的每一个小文件</span><br><span class="line">  所以这个SequenceFile 其实可以理解为把很多小文件压缩成一个大的压缩包了。</span><br></pre></td></tr></table></figure>

<h4 id="SequenceFile"><a href="#SequenceFile" class="headerlink" title="SequenceFile"></a>SequenceFile</h4><h4 id="创建SequenceFile"><a href="#创建SequenceFile" class="headerlink" title="创建SequenceFile"></a>创建SequenceFile</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">下面我们来具体看一下如何生成SequenceFile</span><br><span class="line">生成SequenceFile需要开发代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.SequenceFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小文件解决方案之SequenceFile</span></span><br><span class="line"><span class="comment"> * Created by xuwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallFileSeq</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        write(<span class="string">"D:\\hadoopTestData\\"</span>, <span class="string">"/seqFile"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成SequenceFile文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputDir 输入目录-windows目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile 输出文件-hdfs文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String inputDir, String outputFile)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个配置对象</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定HDFS的地址</span></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>,<span class="string">"hdfs://bigdata01:9000"</span>);</span><br><span class="line">        <span class="comment">//获取操作HDFS的对象</span></span><br><span class="line">        FileSystem fileSystem = FileSystem.get(conf);</span><br><span class="line">        <span class="comment">//删除输出文件</span></span><br><span class="line">        fileSystem.delete(<span class="keyword">new</span> Path(outputFile),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造opts数组，有三个元素</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                第一个是输出路径</span></span><br><span class="line"><span class="comment">                第二个是key类型</span></span><br><span class="line"><span class="comment">                第三个是value类型</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SequenceFile.Writer.Option[] opts = <span class="keyword">new</span> SequenceFile.Writer.Option[]&#123;</span><br><span class="line">            SequenceFile.Writer.file(<span class="keyword">new</span> Path(outputFile)),</span><br><span class="line">                SequenceFile.Writer.keyClass(Text<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">SequenceFile</span>.<span class="title">Writer</span>.<span class="title">valueClass</span>(<span class="title">Text</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">        &#125;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个writer实例</span></span><br><span class="line">        SequenceFile.Writer writer = SequenceFile.createWriter(conf, opts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定要压缩的文件的目录</span></span><br><span class="line">        File inputDirPath = <span class="keyword">new</span> File(inputDir);</span><br><span class="line">        <span class="keyword">if</span>(inputDirPath.isDirectory())&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File[] files = inputDirPath.listFiles();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span>(File file: files)&#123;</span><br><span class="line">                <span class="comment">//获取文件全部内容</span></span><br><span class="line">                String content = FileUtils.readFileToString(file, <span class="string">"UTF-8"</span>);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                String fileName = file.getName();</span><br><span class="line">                <span class="comment">//文件名作为key</span></span><br><span class="line">                Text key = <span class="keyword">new</span> Text(fileName);</span><br><span class="line">                <span class="comment">//文件内容作为value</span></span><br><span class="line">                Text value = <span class="keyword">new</span> Text(content);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                writer.append(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String inputFile)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定HDFS的地址</span></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>,<span class="string">"hdfs://bigdata01:9000"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(conf, SequenceFile.Reader.file(<span class="keyword">new</span> Path(inputFile)) );</span><br><span class="line">        Text key = <span class="keyword">new</span> Text();</span><br><span class="line">        Text value = <span class="keyword">new</span> Text();</span><br><span class="line">        <span class="keyword">while</span>(reader.next(key, value))&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            System.out.println(<span class="string">"文件名："</span>+key.toString());</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            System.out.println(<span class="string">"文件内容："</span>+value.toString()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="读SquenceFile"><a href="#读SquenceFile" class="headerlink" title="读SquenceFile"></a>读SquenceFile</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只能通过遍历的方法去读</span><br></pre></td></tr></table></figure>



<h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;hadoop&#x2F;conf&#x2F;Configuration</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前往别加载错类，搞死个人</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[WARN] - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br></pre></td></tr></table></figure>



<h4 id="MapFile"><a href="#MapFile" class="headerlink" title="MapFile"></a>MapFile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来看一下MapFile</span><br><span class="line">MapFile是排序后的SequenceFile,MapFile由两部分组成，分别是index和data</span><br><span class="line">index作为文件的数据索引，主要记录了每个Record的key值，以及该Record在文件中的偏移位置。在MapFile被访问的时候,索引文件会被加载到内存，通过索引映射关系可迅速定位到指定Record所在文件位置，因此，相对SequenceFile而言，MapFile的检索效率是高效的，缺点是会消耗一部分内存来存储index数据。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.MapFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.SequenceFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallFileMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        write(<span class="string">"D:\\hadoopTestData\\"</span>, <span class="string">"/mapFile"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        read(<span class="string">"/mapFile"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成SequenceFile文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputDir 输入目录-windows目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputDir 输出文件-hdfs文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String inputDir, String outputDir)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个配置对象</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定HDFS的地址</span></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>,<span class="string">"hdfs://bigdata01:9000"</span>);</span><br><span class="line">        <span class="comment">//获取操作HDFS的对象</span></span><br><span class="line">        FileSystem fileSystem = FileSystem.get(conf);</span><br><span class="line">        <span class="comment">//删除输出文件</span></span><br><span class="line">        fileSystem.delete(<span class="keyword">new</span> Path(outputDir),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造opts数组，有三个元素</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                第一个是输出路径</span></span><br><span class="line"><span class="comment">                第二个是key类型</span></span><br><span class="line"><span class="comment">                第三个是value类型</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SequenceFile.Writer.Option[] opts = <span class="keyword">new</span> SequenceFile.Writer.Option[]&#123;</span><br><span class="line">                MapFile.Writer.keyClass(Text<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">MapFile</span>.<span class="title">Writer</span>.<span class="title">valueClass</span>(<span class="title">Text</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">        &#125;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个writer实例</span></span><br><span class="line">        MapFile.Writer writer = <span class="keyword">new</span> MapFile.Writer(conf, <span class="keyword">new</span> Path(outputDir), opts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定要压缩的文件的目录</span></span><br><span class="line">        File inputDirPath = <span class="keyword">new</span> File(inputDir);</span><br><span class="line">        <span class="keyword">if</span>(inputDirPath.isDirectory())&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File[] files = inputDirPath.listFiles();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span>(File file: files)&#123;</span><br><span class="line">                <span class="comment">//获取文件全部内容</span></span><br><span class="line">                String content = FileUtils.readFileToString(file, <span class="string">"UTF-8"</span>);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                String fileName = file.getName();</span><br><span class="line">                <span class="comment">//文件名作为key</span></span><br><span class="line">                Text key = <span class="keyword">new</span> Text(fileName);</span><br><span class="line">                <span class="comment">//文件内容作为value</span></span><br><span class="line">                Text value = <span class="keyword">new</span> Text(content);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                writer.append(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String inputDir)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//指定HDFS的地址</span></span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>,<span class="string">"hdfs://bigdata01:9000"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        MapFile.Reader reader = <span class="keyword">new</span> MapFile.Reader(<span class="keyword">new</span> Path(inputDir), conf);</span><br><span class="line">        Text key = <span class="keyword">new</span> Text();</span><br><span class="line">        Text value = <span class="keyword">new</span> Text();</span><br><span class="line">        <span class="keyword">while</span>(reader.next(key, value))&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            System.out.println(<span class="string">"文件名："</span>+key.toString());</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            System.out.println(<span class="string">"文件内容："</span>+value.toString()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通过MapReduce读取SequenceFile"><a href="#通过MapReduce读取SequenceFile" class="headerlink" title="通过MapReduce读取SequenceFile"></a>通过MapReduce读取SequenceFile</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来看一个案例</span><br><span class="line">我们来使用SequenceFile实现小文件的存储和计算</span><br><span class="line">小文件的存储刚才我们已经通过代码实现了，接下来我们要实现如何通过MapReduce读取SequenceFile</span><br><span class="line">咱们之前的代码默认只能读取普通文本文件，针对SequenceFile是无法读取的</span><br><span class="line">那该如何设置才能让mapreduce可以读取SequenceFile呢？</span><br><span class="line">很简单，只需要在job中设置输入数据处理类就行了，默认情况下使用的是TextInputFormat</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Sequence;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：读取hdfs上的hello.txt文件，计算文件中各个单词出现次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 原始文件内容如下：</span></span><br><span class="line"><span class="comment"> * hello you</span></span><br><span class="line"><span class="comment"> * hello me</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最终需要的结果形式：</span></span><br><span class="line"><span class="comment"> * hello 2</span></span><br><span class="line"><span class="comment"> * me 1</span></span><br><span class="line"><span class="comment"> * you 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountJobSeq</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="comment">// map阶段</span></span><br><span class="line">    <span class="comment">// 注意：myMapper和myReducer类可以提到外面去写，这里只是为了方便学习</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要实现map函数</span></span><br><span class="line"><span class="comment">         * 这个函数就是可以接受&lt;k1,v1&gt;, 产生&lt;k2,v2&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            <span class="comment">//logger.info("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;");</span></span><br><span class="line">            System.out.println(<span class="string">"&lt;k1, v1&gt;: &lt;"</span>+k1.toString()+<span class="string">", "</span>+v1.toString()+<span class="string">"&gt;"</span>);</span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words)&#123;</span><br><span class="line">                <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">                Text k2 = <span class="keyword">new</span> Text(word);</span><br><span class="line">                LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">                context.write(k2,v2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reduce阶段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(myReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对&lt;k2, &#123;v2...&#125;&gt;的数据进行累加求和，生成&lt;k3,v3&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k2</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v2s</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k2, Iterable&lt;LongWritable&gt; v2s, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LongWritable v2:v2s)&#123;</span><br><span class="line">                logger.info(<span class="string">"&lt;k2, v2&gt;: &lt;"</span>+k2.toString()+<span class="string">", "</span>+v2.get()+<span class="string">"&gt;"</span>);</span><br><span class="line">                <span class="comment">//System.out.println("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;");</span></span><br><span class="line">                sum += v2.get();</span><br><span class="line">            &#125;</span><br><span class="line">            Text k3 = k2;</span><br><span class="line">            LongWritable v3 = <span class="keyword">new</span> LongWritable(sum);</span><br><span class="line">            logger.info(<span class="string">"&lt;k3, v3&gt;: &lt;"</span>+k3.toString()+<span class="string">", "</span>+v3.get()+<span class="string">"&gt;"</span>);</span><br><span class="line">            <span class="comment">//System.out.println("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;");</span></span><br><span class="line">            context.write(k3, v3);</span><br><span class="line">            <span class="comment">// super.reduce(key, values, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组装job=map+reduce</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(args.length!=<span class="number">2</span>)&#123;</span><br><span class="line">                System.exit(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="string">"缺少路径参数！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指定Job需要的配置参数</span></span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="comment">// 创建一个Job</span></span><br><span class="line">            Job job = Job.getInstance(conf);</span><br><span class="line">            <span class="comment">// 注意：这一行必须设置，否者在集群中执行时找不到WordCountJob这个类</span></span><br><span class="line">            job.setJarByClass(WordCountJobForHowManyMapTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定输入路径，可以是文件也可以是目录(目录里只有一个文件时可以); 注意FileInputFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 指定输出路径(只能是hdfs上一个不存在的目录); 注意FileOutFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            job.setInputFormatClass(SequenceFileInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定map相关代码</span></span><br><span class="line">            job.setMapperClass(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k2类型</span></span><br><span class="line">            job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v2类型</span></span><br><span class="line">            job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//指定reduce相关代码</span></span><br><span class="line">            job.setReducerClass(myReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k3类型</span></span><br><span class="line">            job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v3类型</span></span><br><span class="line">            job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交job</span></span><br><span class="line">            job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在hdfs上创建的seqFile和mapFile都看不见，但IDEA上read方法却正确执行</span><br><span class="line"></span><br><span class="line">conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs:&#x2F;&#x2F;bigdata01:9000&quot;) &#x2F;&#x2F; FS写成了Fs</span><br><span class="line"></span><br><span class="line">2.org.apache.hadoop.security.AccessControlException: Permission denied: user&#x3D;***</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;diqijiederizi&#x2F;article&#x2F;details&#x2F;82753573</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>廖雪峰java教程笔记-java数组操作</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-java%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p><em>for通过索引</em></p>
<p><em>for each直接得到元素</em></p>
<h2 id="打印数组内容"><a href="#打印数组内容" class="headerlink" title="打印数组内容"></a>打印数组内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>直接打印数组变量，得到的是数组在JVM中的引用地址：</span><br><span class="line"></span><br><span class="line">int[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line">System.out.println(ns); // 类似 [I@<span class="number">7852e922</span></span><br><span class="line">                               </span><br><span class="line"><span class="number">2.</span>这并没有什么意义，因为我们希望打印的数组的元素内容。因此，使用<span class="keyword">for</span> each循环来打印它：</span><br><span class="line">int[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (int n : ns) &#123;</span><br><span class="line">    System.out.print(n + <span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>使用<span class="keyword">for</span> each循环打印也很麻烦。幸好Java标准库提供了Arrays.toString()，可以快速打印数组内容：</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">遍历数组可以使用for循环，for循环可以访问数组索引，for each循环直接迭代每个数组元素，但无法获取索引；</span><br><span class="line"></span><br><span class="line">使用Arrays.toString()可以快速获取数组内容</span><br></pre></td></tr></table></figure>

<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><em>每次循环，将本次最大数放到后面</em></p>
<p><em>最多需要n-1次循环</em></p>
<img src="https://s1.ax1x.com/2020/03/26/8zVORH.png" alt="8zVORH.png" border="0" width="400" height="300/">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实际上，Java的标准库已经内置了排序功能，我们只需要调用JDK提供的Arrays.sort()就可以排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        Arrays.sort(ns); //降序排列</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">必须注意，对数值数组排序实际上修改了数组本身</span><br><span class="line">即变量ns指向的数组内容已经被改变了</span><br><span class="line"></span><br><span class="line">如果对一个字符串数组进行排序，原来的字符串在内存中均没有任何变化，但是ns数组的每个元素指向变化了</span><br></pre></td></tr></table></figure>

<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用的排序算法有冒泡排序、插入排序和快速排序等；</span><br><span class="line">冒泡排序使用两层for循环实现排序；</span><br><span class="line">交换两个变量的值需要借助一个临时变量。</span><br><span class="line">可以直接使用Java标准库提供的Arrays.sort()进行排序；</span><br><span class="line">对数组排序会直接修改数组本身。</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h3 id="内置排序"><a href="#内置排序" class="headerlink" title="内置排序"></a>内置排序</h3><p><em>import java.util.Arrays;</em></p>
<p>Arrays.sort(ns);</p>
<p><em>当数组为数值类型，数组内容已经改变；当数组为字符串数组时，元素指向发生改变</em></p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="多维数组定义"><a href="#多维数组定义" class="headerlink" title="多维数组定义"></a>多维数组定义</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a =   <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] [<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">int[] [] = &#123;&#123;&#125;,&#123;&#125;,...&#125;  # 二维数组的每个数组元素的长度并不要求相同，例如，可以这么定义</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        int[] arr0 = ns[<span class="number">0</span>];</span><br><span class="line">        System.out.println(arr0.length); // <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实际上arr0就获取了ns数组的第<span class="number">0</span>个元素。因为ns数组的每个元素也是一个数组，因此，arr0指向的数组就是&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="打印多维数组"><a href="#打印多维数组" class="headerlink" title="打印多维数组"></a>打印多维数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>要打印一个二维数组，可以使用两层嵌套的<span class="keyword">for</span>循环：</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int[] arr : ns) &#123;</span><br><span class="line">    <span class="keyword">for</span> (int n : arr) &#123;</span><br><span class="line">        System.out.print(n);</span><br><span class="line">        System.out.print(<span class="string">', '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>或者使用Java标准库的Arrays.deepToString()</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(Arrays.deepToString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">三维数组就是二维数组的数组。可以这么定义一个三维数组：</span><br><span class="line"></span><br><span class="line">int[][][] ns = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">10</span>, <span class="number">11</span>&#125;,</span><br><span class="line">        &#123;<span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;,</span><br><span class="line">        &#123;<span class="number">17</span>, <span class="number">18</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">理论上，我们可以定义任意的N维数组。但在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用。</span><br></pre></td></tr></table></figure>

<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二维数组就是数组的数组，三维数组就是二维数组的数组；</span><br><span class="line">多维数组的每个数组元素长度都不要求相同；</span><br><span class="line">打印多维数组可以使用Arrays.deepToString()；</span><br><span class="line">最常见的多维数组是二维数组，访问二维数组的一个元素使用array[row][col]</span><br></pre></td></tr></table></figure>



<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">java程序的入口是main方法，它可以接受一个命令行参数，它是String数组</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个命令行参数由JVM接收用户输入并传给main方法：</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们可以利用接收到的命令行参数，根据不同的参数执行不同的代码。例如，实现一个-version参数，打印程序版本号：</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"-version"</span>.equals(arg)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"v 1.0"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">上面这个程序必须在命令行执行，我们先编译它：</span><br><span class="line"></span><br><span class="line">$ javac Main.java</span><br><span class="line">然后，执行的时候，给它传递一个-version参数：</span><br><span class="line"></span><br><span class="line">$ java Main -version</span><br><span class="line">v <span class="number">1.0</span></span><br><span class="line">这样，程序就可以根据传入的命令行参数，作出不同的响应</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>廖雪峰java笔记</category>
      </categories>
  </entry>
  <entry>
    <title>廖雪峰java教程笔记-java流程控制</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">System.out.println 换行</span><br><span class="line">System.out.<span class="keyword">print</span>  不换行</span><br></pre></td></tr></table></figure>

<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">printf(<span class="string">"%.3f"</span>, d)</span><br><span class="line"></span><br><span class="line">%表示占位符，连续两个%%表示%</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/87yp26" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/23/87yp26.png" alt="87yp26.png" border="0" width="400/"></a></p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">和输出相比，Java的输入就要复杂得多。</span><br><span class="line">我们先看一个从控制台读取一个字符串和一个整数的例子：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.<span class="keyword">in</span>); // 创建Scanner对象</span><br><span class="line">        System.out.print(<span class="string">"Input your name: "</span>); // 打印提示</span><br><span class="line">        String name = scanner.nextLine(); // 读取一行输入并获取字符串</span><br><span class="line">        System.out.print(<span class="string">"Input your age: "</span>); // 打印提示</span><br><span class="line">        int age = scanner.nextInt(); // 读取一行输入并获取整数</span><br><span class="line">        System.out.printf(<span class="string">"Hi, %s, you are %d\n"</span>, name, age); // 格式化输出</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建Scanner对象并传入System.in。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。</span><br><span class="line"></span><br><span class="line">有了Scanner对象后，要读取用户输入的字符串，使用scanner.nextLine()，要读取用户输入的整数，使用scanner.nextInt()。Scanner会自动转换数据类型，因此不必手动转换。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+ scanner.next 读取直到空格符</span><br><span class="line">+ scanner.nextLine 读取一行</span><br><span class="line">+ scanner.nextInt</span><br><span class="line">+ scanner.nextDouble</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java提供的输出包括：System.out.println() / print() / printf()，其中printf()可以格式化输出；</span><br><span class="line"></span><br><span class="line">Java提供Scanner对象来方便输入，读取对应的类型可以使用：scanner.nextLine() / nextInt() / nextDouble() / ...</span><br></pre></td></tr></table></figure>



<h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p><em>只有一条语句时可以省略华括号</em></p>
<p><code>if()</code></p>
<p><code>{</code><br><code>}</code></p>
<p><code>else if()</code></p>
<p><code>{</code><br><code>}</code></p>
<p><code>else</code></p>
<p><code>{</code><br><code>}</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前面讲过了浮点数在计算机中常常无法精确表示，并且计算可能出现误差，因此，判断浮点数相等用==判断不靠谱</span><br><span class="line">正确的方法是利用差值小于某个临界值来判断</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        double x = <span class="number">1</span> - <span class="number">9.0</span> / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(x - <span class="number">0.1</span>) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is 0.1"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is NOT 0.1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x <span class="keyword">is</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure>



<h3 id="判断引用类型数据是否相等"><a href="#判断引用类型数据是否相等" class="headerlink" title="判断引用类型数据是否相等"></a>判断引用类型数据是否相等</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Java中，判断值类型的变量是否相等，可以使用==运算符。但是，判断引用类型的变量是否相等，==表示“引用是否相等”，或者说，是否指向同一个对象。例如，下面的两个String类型，它们的内容是相同的，但是，分别指向不同的对象，用==判断，结果为false：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="string">"HELLO"</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">            System.out.println(<span class="string">"s1 == s2"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"s1 != s2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要判断引用类型的变量内容是否相等，必须使用equals()方法：</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="string">"HELLO"</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"s1 equals s2"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"s1 not equals s2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意：执行语句s1.equals(s2)时，如果变量s1为null，会报NullPointerException</span><br><span class="line"></span><br><span class="line">要避免NullPointerException错误，可以利用短路运算符&amp;&amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = null;</span><br><span class="line">        <span class="keyword">if</span> (s1 != null &amp;&amp; s1.equals(<span class="string">"hello"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">还可以把一定不是null的对象<span class="string">"hello"</span>放到前面：例如：<span class="keyword">if</span> (<span class="string">"hello"</span>.equals(s)) &#123; ... &#125;。</span><br></pre></td></tr></table></figure>



<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">switch(option)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">case <span class="number">1</span>:</span><br><span class="line">............;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case <span class="number">2</span>:</span><br><span class="line">............;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">default：(可以没有)</span><br><span class="line"></span><br><span class="line">.....;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新语法"><a href="#新语法" class="headerlink" title="新语法"></a>新语法</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">case没有花括号，可以合理的增减<span class="keyword">break</span>(具有 穿透性)；比较字符串时是比较内容</span><br><span class="line"></span><br><span class="line">switch新语法，可以不要break，没有穿透；case可以使用-&gt;</span><br><span class="line">注意新语法使用-&gt;，如果有多条语句，需要用&#123;&#125;括起来。不要写break语句，因为新语法只会执行匹配的语句，没有穿透效应</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/03/23/87fFp9.png" alt="87fFp9.png" border="0" width="400/">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用新的switch语法，不但不需要<span class="keyword">break</span>，还可以直接返回值。把上面的代码改写如下</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String fruit = <span class="string">"apple"</span>;</span><br><span class="line">        int opt = switch (fruit) &#123;</span><br><span class="line">            case "apple" -&gt; 1;</span><br><span class="line">            case "pear", "mango" -&gt; 2;</span><br><span class="line">            default -&gt; 0;</span><br><span class="line">        &#125;; // 注意赋值语句要以;结束</span><br><span class="line">        System.out.println(<span class="string">"opt = "</span> + opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="case语句执行的是同一组语句块"><a href="#case语句执行的是同一组语句块" class="headerlink" title="case语句执行的是同一组语句块"></a>case语句执行的是同一组语句块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果有几个case语句执行的是同一组语句块，可以这么写</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int option = <span class="number">2</span>;</span><br><span class="line">        switch (option) &#123;</span><br><span class="line">        case <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected 1"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">2</span>:</span><br><span class="line">        case <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected 2, 3"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            System.out.println(<span class="string">"Not selected"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">switch语句还可以匹配字符串。字符串匹配时，是比较“内容相等”。</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String fruit = <span class="string">"apple"</span>;</span><br><span class="line">        switch (fruit) &#123;</span><br><span class="line">        case <span class="string">"apple"</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected apple"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">"pear"</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected pear"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">"mango"</span>:</span><br><span class="line">            System.out.println(<span class="string">"Selected mango"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            System.out.println(<span class="string">"No fruit selected"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Selected apple</span><br></pre></td></tr></table></figure>

<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在switch表达式内部，我们会返回简单的值。</span><br><span class="line"></span><br><span class="line">但是，如果需要复杂的语句，我们也可以写很多语句，放到&#123;...&#125;里，然后，用<span class="keyword">yield</span>返回一个值作为switch语句的返回值</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/03/23/87fUAS.png" alt="87fUAS.png" border="0" width="400/">

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">switch语句可以做多重选择，然后执行匹配的case语句后续代码；</span><br><span class="line">switch的计算结果必须是整型、字符串或枚举类型；</span><br><span class="line">注意千万不要漏写<span class="keyword">break</span>，建议打开fall-through警告；</span><br><span class="line">总是写上default，建议打开missing default警告；</span><br><span class="line">从Java <span class="number">14</span>开始，switch语句正式升级为表达式，不再需要<span class="keyword">break</span>，并且允许使用<span class="keyword">yield</span>返回值。</span><br></pre></td></tr></table></figure>



<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(xxx)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="do…-while"><a href="#do…-while" class="headerlink" title="do….while"></a>do….while</h2><p><em>至少执行一次</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(xxx);</span><br></pre></td></tr></table></figure>



<h2 id="for-初始条件，循环条件，更新计数器"><a href="#for-初始条件，循环条件，更新计数器" class="headerlink" title="for(初始条件，循环条件，更新计数器)"></a>for(初始条件，循环条件，更新计数器)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">除了<span class="keyword">while</span>和do <span class="keyword">while</span>循环，Java使用最广泛的是<span class="keyword">for</span>循环。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环的功能非常强大，它使用计数器实现循环。<span class="keyword">for</span>循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (初始条件; 循环检测条件; 循环后更新计数器) &#123;</span><br><span class="line">    // 执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用<span class="keyword">for</span>循环时，计数器变量i要尽量定义在<span class="keyword">for</span>循环中：</span><br><span class="line"></span><br><span class="line">int[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span>; i&lt;ns.length; i++) &#123;</span><br><span class="line">    System.out.println(ns[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 无法访问i</span><br><span class="line">int n = i; // compile error!</span><br><span class="line">如果变量i定义在<span class="keyword">for</span>循环外：</span><br><span class="line"></span><br><span class="line">int[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;ns.length; i++) &#123;</span><br><span class="line">    System.out.println(ns[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 仍然可以使用i</span><br><span class="line">int n = i;</span><br><span class="line">那么，退出<span class="keyword">for</span>循环后，变量i仍然可以被访问，这就破坏了变量应该把访问范围缩到最小的原则</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>循环还可以缺少初始化语句、循环条件和每次循环更新语句，例如：</span><br><span class="line"></span><br><span class="line">// 不设置结束条件:</span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span>; ; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">// 不设置结束条件和更新语句:</span><br><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span>; ;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">// 什么都不设置:</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">通常不推荐这样写，但是，某些情况下，是可以省略<span class="keyword">for</span>循环的某些语句的</span><br></pre></td></tr></table></figure>

<h2 id="for-each"><a href="#for-each" class="headerlink" title="for each"></a>for each</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量类型  变量名: 可迭代数据类型(list,map....))</span><br><span class="line">可以直接遍历数组每个元素，计数器在<span class="keyword">for</span>循环内部</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (int n : ns) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">但是，<span class="keyword">for</span> each循环无法指定遍历顺序，也无法获取数组的索引。</span><br><span class="line"></span><br><span class="line">除了数组外，<span class="keyword">for</span> each循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的List、Map等</span><br></pre></td></tr></table></figure>

<h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p><em>break跳出所在的那层循环;continue结束当前循环，进入下一次循环</em></p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>语句可以跳出当前循环；</span><br><span class="line"><span class="keyword">break</span>语句通常配合<span class="keyword">if</span>，在满足条件时提前结束整个循环；</span><br><span class="line"><span class="keyword">break</span>语句总是跳出最近的一层循环；</span><br><span class="line"><span class="keyword">continue</span>语句可以提前结束本次循环；</span><br><span class="line"><span class="keyword">continue</span>语句通常配合<span class="keyword">if</span>，在满足条件时提前结束本次循环</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>廖雪峰java笔记</category>
      </categories>
  </entry>
  <entry>
    <title>廖雪峰java教程笔记-java程序基础</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="java程序基础"><a href="#java程序基础" class="headerlink" title="java程序基础"></a>java程序基础</h1><h2 id="java程序基本结构"><a href="#java程序基本结构" class="headerlink" title="java程序基本结构"></a>java程序基本结构</h2><h3 id="类名规范"><a href="#类名规范" class="headerlink" title="类名规范"></a>类名规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 首字母大写</span><br><span class="line">+ 字母开头，数字，下划线组合</span><br></pre></td></tr></table></figure>

<h3 id="方法名规范"><a href="#方法名规范" class="headerlink" title="方法名规范"></a>方法名规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命名和class一样，但是首字母小写</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里的方法名是main，返回值是void，表示没有任何返回值。</span><br><span class="line"></span><br><span class="line">我们注意到public除了可以修饰class外，也可以修饰方法。而关键字static是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为main，括号内的参数必须是String数组。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 注释方法</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">+ &#x2F;&#x2F;</span><br><span class="line">+ &#x2F;*... *&#x2F;</span><br><span class="line">+ &#x2F;**... *&#x2F;  这是一种特殊注释方法，用在类和方法的定义出，用于自动创建文档</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">Java程序对格式没有明确的要求，多几个空格或者回车不影响程序的正确性，但是我们要养成良好的编程习惯</span><br><span class="line">*对于eclipse可以用快捷键ctrl+shift+f，快速格式化代码*</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">## 变量和数据类型</span><br><span class="line"></span><br><span class="line">### 变量</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">在Java中，变量分为两种：基本类型的变量和引用类型的变量。</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">*先定义再应用*</span><br><span class="line">*可以一次性多个定义和赋值*</span><br><span class="line">*没有赋值，将自动赋默认值(基本数据类型)*</span><br><span class="line">*可以将一个基本数据类型变量赋值给另一个基本类型变量。不是指向同一个地址*</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 基本数据类型有</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;基本数据类型是CPU可以直接进行运算的类型</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 整型 byte,short,int,long</span><br><span class="line">+ 浮点型 float,double</span><br><span class="line">   float要加上f或F，double可以省略</span><br><span class="line">+ 字符型 char</span><br><span class="line">  用单引号</span><br><span class="line">+ 布尔型 false,true</span><br></pre></td></tr></table></figure>

<p><code>不同的数据类型占用的字节数不一样。我们看一下Java基本数据类型占用的字节数</code></p>
<p><a href="https://imgtu.com/i/HtXtqe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/10/HtXtqe.png" alt="HtXtqe.png"></a></p>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（<span class="number">0</span>表示正数，<span class="number">1</span>表示负数）。各种整型能表示的最大范围如下</span><br><span class="line"></span><br><span class="line">byte：<span class="number">-128</span> ~ <span class="number">127</span></span><br><span class="line">short: <span class="number">-32768</span> ~ <span class="number">32767</span></span><br><span class="line">int: <span class="number">-2147483648</span> ~ <span class="number">2147483647</span></span><br><span class="line">long: <span class="number">-9223372036854775808</span> ~ <span class="number">9223372036854775807</span></span><br><span class="line"></span><br><span class="line">对于float类型，需要加上f后缀。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i = <span class="number">2147483647</span>;</span><br><span class="line">        int i2 = <span class="number">-2147483648</span>;</span><br><span class="line">        int i3 = <span class="number">2</span>_000_000_000; // 加下划线更容易识别</span><br><span class="line">        int i4 = <span class="number">0xff0000</span>; // 十六进制表示的<span class="number">16711680</span></span><br><span class="line">        int i5 = <span class="number">0b1000000000</span>; // 二进制表示的<span class="number">512</span></span><br><span class="line">        long l = <span class="number">9000000000000000000L</span>; // long型的结尾需要加L</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">特别注意：同一个数的不同进制的表示是完全相同的，例如<span class="number">15</span>=<span class="number">0xf</span>＝<span class="number">0b1111</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p><code>因为小数用科学计数法表示的时候，小数点是可以“浮动”的,所以称为浮点数</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">float f1 = <span class="number">3.14</span>f;</span><br><span class="line">float f2 = <span class="number">3.14e38</span>f; // 科学计数法表示的<span class="number">3.14</span>x10^<span class="number">38</span></span><br><span class="line">double d = <span class="number">1.79e308</span>;</span><br><span class="line">double d2 = <span class="number">-1.79e308</span>;</span><br><span class="line">double d3 = <span class="number">4.9e-324</span>; // 科学计数法表示的<span class="number">4.9</span>x10^<span class="number">-324</span></span><br></pre></td></tr></table></figure>



<h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">布尔类型boolean只有true和false两个值，布尔类型总是关系运算的计算结果</span><br><span class="line"></span><br><span class="line">Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把boolean表示为4字节整数</span><br></pre></td></tr></table></figure>

<h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符类型char表示一个字符。Java的char类型除了可表示标准的ASCII外，还可以表示一个Unicode字符：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        char a = <span class="string">'A'</span>;</span><br><span class="line">        char zh = <span class="string">'中'</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(zh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意char类型使用单引号&#39;，且仅有一个字符，要和双引号&quot;的字符串类型区分开。</span><br></pre></td></tr></table></figure>

<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><em>除了上述基本类型的变量，剩下的都是引用类型</em></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引用类型最常用的就是String字符串：</span><br><span class="line"></span><br><span class="line">String s &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置，后续我们介绍类的概念时会详细讨论。</span><br></pre></td></tr></table></figure>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义变量的时候，如果加上final修饰符，这个变量就变成了常量</span><br><span class="line"></span><br><span class="line">final double PI = <span class="number">3.14</span>; // PI是一个常量</span><br><span class="line">double r = <span class="number">5.0</span>;</span><br><span class="line">double area = PI * r * r;</span><br><span class="line">PI = <span class="number">300</span>; // compile error!</span><br><span class="line"></span><br><span class="line">常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</span><br><span class="line">根据习惯，常量名通常全部大写。</span><br></pre></td></tr></table></figure>

<h4 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义变量时，变量类型太长，可以用var</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line"></span><br><span class="line">这个时候，如果想省略变量类型，可以使用var关键字:</span><br><span class="line">var sb = new StringBuilder();</span><br><span class="line">编译器会根据赋值语句自动推断出变量sb的类型是StringBuilder</span><br></pre></td></tr></table></figure>

<h3 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义变量时，要遵循作用域最小化原则，尽量将变量定义在尽可能小的作用域，并且，不要重复使用变量名。</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java提供了两种变量类型：基本类型和引用类型</span><br><span class="line">基本类型包括整型，浮点型，布尔型，字符型。</span><br><span class="line">变量可重新赋值，等号是赋值语句，不是数学意义的等号。</span><br><span class="line">常量在初始化后不可重新赋值，使用常量便于理解程序意图。</span><br></pre></td></tr></table></figure>



<h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">整数的数值表示不但是精确的，而且整数运算永远是精确的，即使是除法也是精确的，因为两个整数相除只能得到结果的整数部分</span><br><span class="line"></span><br><span class="line">int x = <span class="number">12345</span> / <span class="number">67</span>; // <span class="number">184</span></span><br><span class="line">求余运算使用%：</span><br><span class="line"></span><br><span class="line">int y = <span class="number">12345</span> % <span class="number">67</span>; // <span class="number">12345</span>÷<span class="number">67</span>的余数是<span class="number">17</span></span><br><span class="line">特别注意：整数的除法对于除数为<span class="number">0</span>时运行时将报错，但编译不会报错</span><br></pre></td></tr></table></figure>

<h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要特别注意，整数由于存在范围限制，如果计算结果超出了范围，就会产生溢出，而溢出不会出错，却会得到一个奇怪的结果</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int x = <span class="number">2147483640</span>;</span><br><span class="line">        int y = <span class="number">15</span>;</span><br><span class="line">        int sum = x + y;</span><br><span class="line">        System.out.println(sum); // <span class="number">-2147483641</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">+ <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">-----------------------------------------</span><br><span class="line">  <span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span></span><br><span class="line">由于最高位计算结果为<span class="number">1</span>，因此，加法结果变成了一个负数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">还有一种简写的运算符，即+=，-=，*=，/=，它们的使用方法如下：</span><br><span class="line"></span><br><span class="line">n += <span class="number">100</span>; // <span class="number">3409</span>, 相当于 n = n + <span class="number">100</span>;</span><br><span class="line">n -= <span class="number">100</span>; // <span class="number">3309</span>, 相当于 n = n - <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增/自减"></a>自增/自减</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">++</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">*写在变量前面和后面是不同的，前面(先加减在运算)，后面(先运算再加减)*</span><br></pre></td></tr></table></figure>

<h3 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*数值的最高位是一个符号位*</span><br><span class="line">1.</span><br><span class="line">&gt;&gt;: 右位移</span><br><span class="line">int n &#x3D; 7;       &#x2F;&#x2F; 00000000 00000000 00000000 00000111 &#x3D; 7</span><br><span class="line">int a &#x3D; n &gt;&gt; 1;  &#x2F;&#x2F; 00000000 00000000 00000000 00000011 &#x3D; 3</span><br><span class="line">int b &#x3D; n &gt;&gt; 2;  &#x2F;&#x2F; 00000000 00000000 00000000 00000001 &#x3D; 1</span><br><span class="line">int c &#x3D; n &gt;&gt; 3;  &#x2F;&#x2F; 00000000 00000000 00000000 00000000 &#x3D; 0</span><br><span class="line">如果对一个负数进行右移，最高位的1不动，结果仍然是一个负数：</span><br><span class="line">int n &#x3D; -536870912;</span><br><span class="line">int a &#x3D; n &gt;&gt; 1;  &#x2F;&#x2F; 11110000 00000000 00000000 00000000 &#x3D; -268435456</span><br><span class="line">int b &#x3D; n &gt;&gt; 2;  &#x2F;&#x2F; 11111000 00000000 00000000 00000000 &#x3D; -134217728</span><br><span class="line">int c &#x3D; n &gt;&gt; 28; &#x2F;&#x2F; 11111111 11111111 11111111 11111110 &#x3D; -2</span><br><span class="line">int d &#x3D; n &gt;&gt; 29; &#x2F;&#x2F; 11111111 11111111 11111111 11111111 &#x3D; -1</span><br><span class="line"></span><br><span class="line">2. </span><br><span class="line">&lt;&lt;: 左位移</span><br><span class="line">int n &#x3D; 7;       &#x2F;&#x2F; 00000000 00000000 00000000 00000111 &#x3D; 7</span><br><span class="line">int a &#x3D; n &lt;&lt; 1;  &#x2F;&#x2F; 00000000 00000000 00000000 00001110 &#x3D; 14</span><br><span class="line">int b &#x3D; n &lt;&lt; 2;  &#x2F;&#x2F; 00000000 00000000 00000000 00011100 &#x3D; 28</span><br><span class="line">int c &#x3D; n &lt;&lt; 28; &#x2F;&#x2F; 01110000 00000000 00000000 00000000 &#x3D; 1879048192</span><br><span class="line">int d &#x3D; n &lt;&lt; 29; &#x2F;&#x2F; 11100000 00000000 00000000 00000000 &#x3D; -536870912</span><br><span class="line"></span><br><span class="line">*上面两种不会改变符号位*</span><br><span class="line"></span><br><span class="line">3.无符号的右移运算</span><br><span class="line">使用&gt;&gt;&gt;，它的特点是不管符号位，右移后高位总是补0，因此，对一个负数进行&gt;&gt;&gt;右移，它会变成正数，原因是最高位的1变成了0</span><br><span class="line">int n &#x3D; -536870912;</span><br><span class="line">int a &#x3D; n &gt;&gt;&gt; 1;  &#x2F;&#x2F; 01110000 00000000 00000000 00000000 &#x3D; 1879048192</span><br><span class="line">int b &#x3D; n &gt;&gt;&gt; 2;  &#x2F;&#x2F; 00111000 00000000 00000000 00000000 &#x3D; 939524096</span><br><span class="line">int c &#x3D; n &gt;&gt;&gt; 29; &#x2F;&#x2F; 00000000 00000000 00000000 00000111 &#x3D; 7</span><br><span class="line">int d &#x3D; n &gt;&gt;&gt; 31; &#x2F;&#x2F; 00000000 00000000 00000000 00000001 &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对byte和short类型进行移位时，会首先转换为int再进行位移。</span><br><span class="line">仔细观察可发现，左移实际上就是不断地×2，右移实际上就是不断地÷2</span><br></pre></td></tr></table></figure>

<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位运算是按位进行与、或、非和异或的运算</span><br><span class="line"></span><br><span class="line">&amp;(与): 同1才为1</span><br><span class="line"></span><br><span class="line">|(或): 有1则为0</span><br><span class="line"></span><br><span class="line">~(非)： 01互换</span><br><span class="line"></span><br><span class="line">^(异或): 不同才为1</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对两个整数进行位运算，实际上就是按位对齐，然后依次对每一位进行运算。</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i = <span class="number">167776589</span>; // <span class="number">00001010</span> <span class="number">00000000</span> <span class="number">00010001</span> <span class="number">01001101</span></span><br><span class="line">        int n = <span class="number">167776512</span>; // <span class="number">00001010</span> <span class="number">00000000</span> <span class="number">00010001</span> <span class="number">00000000</span></span><br><span class="line">        System.out.println(i &amp; n); // <span class="number">167776512</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Java的计算表达式中，运算优先级从高到低依次是：</span><br><span class="line"></span><br><span class="line">()</span><br><span class="line">! ~ ++ --</span><br><span class="line">* / %</span><br><span class="line">+ -</span><br><span class="line">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</span><br><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">+= -= *= /=</span><br><span class="line"></span><br><span class="line">记不住也没关系，只需要加括号就可以保证运算的优先级正确</span><br></pre></td></tr></table></figure>

<h3 id="类型自动提升-整与整"><a href="#类型自动提升-整与整" class="headerlink" title="类型自动提升(整与整)"></a>类型自动提升(整与整)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在运算过程中，如果参与运算的两个数类型不一致，那么计算结果为较大类型的整型。例如，short和int计算，结果总是int，原因是short首先自动被转型为int</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        short s = <span class="number">1234</span>;</span><br><span class="line">        int i = <span class="number">123456</span>;</span><br><span class="line">        int x = s + i; // s自动转型为int</span><br><span class="line">        short y = s + i; // 编译错误!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="强制转换-整与整"><a href="#强制转换-整与整" class="headerlink" title="强制转换(整与整)"></a>强制转换(整与整)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">也可以将结果强制转型，即将大范围的整数转型为小范围的整数。强制转型使用(类型)，例如，将int强制转型为short：</span><br><span class="line"></span><br><span class="line">int i &#x3D; 12345;</span><br><span class="line">short s &#x3D; (short) i; &#x2F;&#x2F; 12345</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要注意，超出范围的强制转型会得到错误的结果，原因是转型时，int的两个高位字节直接被扔掉，仅保留了低位的两个字节</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i1 = <span class="number">1234567</span>;</span><br><span class="line">        short s1 = (short) i1; // <span class="number">-10617</span></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        int i2 = <span class="number">12345678</span>; //short <span class="number">32767</span></span><br><span class="line">        short s2 = (short) i2; // <span class="number">24910</span></span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">-10617</span></span><br><span class="line"><span class="number">24910</span></span><br><span class="line"></span><br><span class="line">// 因此，强制转型的结果很可能是错的</span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整数运算的结果永远是精确的；</span><br><span class="line">运算结果会自动提升；</span><br><span class="line">可以强制转型，但超出范围的强制转型会得到错误的结果；</span><br><span class="line">应该选择合适范围的整型（int或long），没有必要为了节省内存而使用byte和short进行整数运算。</span><br></pre></td></tr></table></figure>



<h2 id="浮点数计算"><a href="#浮点数计算" class="headerlink" title="浮点数计算"></a>浮点数计算</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*无法精确表示数值，不能做移位和位运算*</span><br><span class="line">由于浮点数存在运算误差，所以比较两个浮点数是否相等常常会出现错误的结果。正确的比较方法是判断两个浮点数之差的绝对值是否小于一个很小的数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 比较x和y是否相等，先计算其差的绝对值:</span><br><span class="line">double r = Math.abs(x - y);</span><br><span class="line">// 再判断绝对值是否足够小:</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">    // 可以认为相等</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    // 不相等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型提升"><a href="#类型提升" class="headerlink" title="类型提升"></a>类型提升</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果参与运算的两个数其中一个是整型，那么整型可以自动提升到浮点型</span><br></pre></td></tr></table></figure>

<h3 id="溢出-1"><a href="#溢出-1" class="headerlink" title="溢出"></a>溢出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*整数在除零时编译时不出错，运行时出错*</span><br><span class="line">*浮点数除零不会报错，会返回特殊值：*</span><br><span class="line"></span><br><span class="line">NaN:<span class="keyword">not</span> a number</span><br><span class="line">Infinity:无穷大</span><br><span class="line">-Infinity:负无穷大</span><br><span class="line"></span><br><span class="line">double d1 = <span class="number">0.0</span> / <span class="number">0</span>; // NaN</span><br><span class="line">double d2 = <span class="number">1.0</span> / <span class="number">0</span>; // Infinity</span><br><span class="line">double d3 = <span class="number">-1.0</span> / <span class="number">0</span>; // -Infinity</span><br><span class="line"></span><br><span class="line">这三种特殊值在实际运算中很少碰到，我们只需要了解即可</span><br></pre></td></tr></table></figure>

<h3 id="强制转换-整与浮"><a href="#强制转换-整与浮" class="headerlink" title="强制转换(整与浮)"></a>强制转换(整与浮)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以将浮点数强制转型为整数。在转型时，浮点数的小数部分会被丢掉。如果转型后超过了整型能表示的最大范围，将返回整型的最大值。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int n1 = (int) <span class="number">12.3</span>; // <span class="number">12</span></span><br><span class="line">int n2 = (int) <span class="number">12.7</span>; // <span class="number">12</span></span><br><span class="line">int n2 = (int) <span class="number">-12.7</span>; // <span class="number">-12</span></span><br><span class="line">int n3 = (int) (<span class="number">12.7</span> + <span class="number">0.5</span>); // <span class="number">13</span></span><br><span class="line">int n4 = (int) <span class="number">1.2e20</span>; // <span class="number">2147483647</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果要进行四舍五入，可以对浮点数加上<span class="number">0.5</span>再强制转型</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        double d = <span class="number">2.6</span>;</span><br><span class="line">        int n = (int) (d + <span class="number">0.5</span>);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浮点数常常无法精确表示，并且浮点数的运算结果可能有误差；</span><br><span class="line">比较两个浮点数通常比较它们的差的绝对值是否小于一个特定值；</span><br><span class="line">整型和浮点型运算时，整型会自动提升为浮点型；</span><br><span class="line">可以将浮点型强制转为整型，但超出范围后将始终返回整型的最大值。</span><br></pre></td></tr></table></figure>



<h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于布尔类型boolean，永远只有true和false两个值。</span><br><span class="line">布尔运算是一种关系运算，包括以下几类：</span><br><span class="line"></span><br><span class="line">比较运算符：&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;</span><br><span class="line">与运算 &amp;&amp;</span><br><span class="line">或运算 ||</span><br><span class="line">非运算 !</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">boolean isGreater = <span class="number">5</span> &gt; <span class="number">3</span>; // true</span><br><span class="line">int age = <span class="number">12</span>;</span><br><span class="line">boolean isZero = age == <span class="number">0</span>; // false</span><br><span class="line">boolean isNonZero = !isZero; // true</span><br><span class="line">boolean isAdult = age &gt;= <span class="number">18</span>; // false</span><br><span class="line">boolean isTeenager = age &gt;<span class="number">6</span> &amp;&amp; age &lt;<span class="number">18</span>; // true</span><br></pre></td></tr></table></figure>

<h3 id="关系运算符的优先级"><a href="#关系运算符的优先级" class="headerlink" title="关系运算符的优先级"></a>关系运算符的优先级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!</span><br><span class="line">&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;</span><br><span class="line">&#x3D;&#x3D;，!&#x3D;</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br></pre></td></tr></table></figure>



<h3 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h3><h4 id="true-amp-amp-任意"><a href="#true-amp-amp-任意" class="headerlink" title="true&amp;&amp;任意"></a>true&amp;&amp;任意</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">布尔运算的一个重要特点是短路运算。如果一个布尔运算的表达式能提前确定结果，则后续的计算不再执行，直接返回结果。</span><br><span class="line"></span><br><span class="line">因为false &amp;&amp; x的结果总是false，无论x是true还是false，因此，与运算在确定第一个值为false后，不再继续计算，而是直接返回false</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        boolean b &#x3D; 5 &lt; 3;</span><br><span class="line">        boolean result &#x3D; b &amp;&amp; (5 &#x2F; 0 &gt; 0);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">如果没有短路运算，&amp;&amp;后面的表达式会由于除数为0而报错，但实际上该语句并未报错，原因在于与运算是短路运算符，提前计算出了结果false</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HNRoOx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/10/HNRoOx.png" alt="HNRoOx.png"></a></p>
<h4 id="true-任意"><a href="#true-任意" class="headerlink" title="true || 任意"></a>true || 任意</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类似的，对于||运算，只要能确定第一个值为true，后续计算也不再进行，而是直接返回true：</span><br><span class="line"></span><br><span class="line">boolean result &#x3D; true || (5 &#x2F; 0 &gt; 0); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java还提供一个三元运算符b ? x : y，它根据第一个布尔表达式的结果，分别返回后续两个表达式之一的计算结果</span><br><span class="line"></span><br><span class="line">b为true返回x; b为false返回y</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意到三元运算b ? x : y会首先计算b，如果b为true，则只计算x，否则，只计算y。此外，x和y的类型必须相同，因为返回值不是boolean，而是x和y之一。</span><br></pre></td></tr></table></figure>

<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与运算和或运算是短路运算；</span><br><span class="line">三元运算b ? x : y后面的类型必须相同，三元运算也是“短路运算”，只计算x或y。</span><br></pre></td></tr></table></figure>

<h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Java中，字符和字符串是两个不同的类型</span><br></pre></td></tr></table></figure>

<h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符类型char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符</span><br><span class="line"></span><br><span class="line">因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个char类型表示，它们都占用两个字节。要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可：</span><br><span class="line"></span><br><span class="line">int n1 &#x3D; &#39;A&#39;; &#x2F;&#x2F; 字母“A”的Unicodde编码是65</span><br><span class="line">int n2 &#x3D; &#39;中&#39;; &#x2F;&#x2F; 汉字“中”的Unicode编码是20013</span><br><span class="line">还可以直接用转义字符\u+Unicode编码来表示一个字符：</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意是十六进制:</span><br><span class="line">char c3 &#x3D; &#39;\u0041&#39;; &#x2F;&#x2F; &#39;A&#39;，因为十六进制0041 &#x3D; 十进制65</span><br><span class="line">char c4 &#x3D; &#39;\u4e2d&#39;; &#x2F;&#x2F; &#39;中&#39;，因为十六进制4e2d &#x3D; 十进制20013</span><br></pre></td></tr></table></figure>



<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">和char类型不同，字符串类型String是引用类型，我们用双引号<span class="string">"..."</span>表示字符串。一个字符串可以存储<span class="number">0</span>个到任意个字符：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">""</span>; // 空字符串，包含<span class="number">0</span>个字符</span><br><span class="line">String s1 = <span class="string">"A"</span>; // 包含一个字符</span><br><span class="line">String s2 = <span class="string">"ABC"</span>; // 包含<span class="number">3</span>个字符</span><br><span class="line">String s3 = <span class="string">"中文 ABC"</span>; // 包含<span class="number">6</span>个字符，其中有一个空格</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因为字符串使用双引号<span class="string">"..."</span>表示开始和结束，那如果字符串本身恰好包含一个<span class="string">"字符怎么表示？例如，"</span>abc<span class="string">"xyz"</span>，编译器就无法判断中间的引号究竟是字符串的一部分还是表示字符串结束。这个时候，我们需要借助转义字符\：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"abc\"xyz"</span>; // 包含<span class="number">7</span>个字符: a, b, c, <span class="string">", x, y, z</span></span><br><span class="line"><span class="string">因为\是转义字符，所以，两个\\表示一个\字符：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">String s = "</span>abc\\xyz<span class="string">"; // 包含7个字符: a, b, c, \, x, y, z</span></span><br><span class="line"><span class="string">常见的转义字符包括：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\" 表示字符"</span></span><br><span class="line">\<span class="string">' 表示字符'</span></span><br><span class="line">\\ 表示字符\</span><br><span class="line">\n 表示换行符</span><br><span class="line">\r 表示回车符</span><br><span class="line">\t 表示Tab</span><br><span class="line">\u<span class="comment">#### 表示一个Unicode编码的字符</span></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"ABC\n\u4e2d\u6587"</span>; // 包含<span class="number">6</span>个字符: A, B, C, 换行符, 中, 文</span><br></pre></td></tr></table></figure>

<h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java的编译器对字符串做了特殊照顾，可以使用+连接任意字符串和其他数据类型，这样极大地方便了字符串的处理。例如：</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">        String s2 = <span class="string">"world"</span>;</span><br><span class="line">        String s = s1 + <span class="string">" "</span> + s2 + <span class="string">"!"</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接：</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int age = <span class="number">25</span>;</span><br><span class="line">        String s = <span class="string">"age is "</span> + age;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 请将下面一组int值视为字符的Unicode码，把它们拼成一个字符串：</span><br><span class="line">        int a = <span class="number">72</span>;</span><br><span class="line">        int b = <span class="number">105</span>;</span><br><span class="line">        int c = <span class="number">65281</span>;</span><br><span class="line">        // FIXME</span><br><span class="line"> String s = <span class="string">""</span>+<span class="string">'\u0048'</span> +<span class="string">'\u0069'</span>  + <span class="string">'\uff01'</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public class array &#123;    </span><br><span class="line">  public static void main(String[] args)&#123;        </span><br><span class="line">    int a = <span class="number">72</span>;        </span><br><span class="line">    int b = <span class="number">105</span>;        </span><br><span class="line">    int c = <span class="number">65281</span>;        </span><br><span class="line">    // FIXME:        </span><br><span class="line">    String s = <span class="string">""</span>+(char)a + (char)b + (char)c;        </span><br><span class="line">    System.out.println(s);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果我们要表示多行字符串，使用+号连接会非常不方便：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"first line \n"</span></span><br><span class="line">         + <span class="string">"second line \n"</span></span><br><span class="line">         + <span class="string">"end"</span>;</span><br><span class="line">从Java <span class="number">13</span>开始，字符串可以用<span class="string">"""..."""</span>表示多行字符串（Text Blocks）了</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s = <span class="string">"""</span></span><br><span class="line"><span class="string">                   SELECT * FROM</span></span><br><span class="line"><span class="string">                     users</span></span><br><span class="line"><span class="string">                   WHERE id &gt; 100</span></span><br><span class="line"><span class="string">                   ORDER BY name DESC</span></span><br><span class="line"><span class="string">                   """</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">上述多行字符串实际上是<span class="number">5</span>行，在最后一个DESC后面还有一个\n。如果我们不想在字符串末尾加一个\n，就需要这么写：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">""" </span></span><br><span class="line"><span class="string">           SELECT * FROM</span></span><br><span class="line"><span class="string">             users</span></span><br><span class="line"><span class="string">           WHERE id &gt; 100</span></span><br><span class="line"><span class="string">           ORDER BY name DESC"""</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">还需要注意到，多行字符串前面共同的空格会被去掉，即：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"""</span></span><br><span class="line"><span class="string">...........SELECT * FROM</span></span><br><span class="line"><span class="string">...........  users</span></span><br><span class="line"><span class="string">...........WHERE id &gt; 100</span></span><br><span class="line"><span class="string">...........ORDER BY name DESC</span></span><br><span class="line"><span class="string">..........."""</span>;</span><br><span class="line">用.标注的空格都会被去掉。</span><br><span class="line"></span><br><span class="line">如果多行字符串的排版不规则，那么，去掉的空格就会变成这样：</span><br><span class="line"></span><br><span class="line">String s = <span class="string">"""</span></span><br><span class="line"><span class="string">.........  SELECT * FROM</span></span><br><span class="line"><span class="string">.........    users</span></span><br><span class="line"><span class="string">.........WHERE id &gt; 100</span></span><br><span class="line"><span class="string">.........  ORDER BY name DESC</span></span><br><span class="line"><span class="string">.........  """</span>;</span><br><span class="line">即总是以最短的行首空格为基准。</span><br></pre></td></tr></table></figure>

<h3 id="不可变特性"><a href="#不可变特性" class="headerlink" title="不可变特性"></a>不可变特性</h3><p><a href="https://imgtu.com/i/HUnuM8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HUnuM8.md.png" alt="HUnuM8.md.png"></a></p>
<h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象。例如：</span><br><span class="line"></span><br><span class="line">String s1 = null; // s1是null</span><br><span class="line">String s2; // 没有赋初值值，s2也是null</span><br><span class="line">String s3 = s1; // s3也是null</span><br><span class="line">String s4 = <span class="string">""</span>; // s4指向空字符串，不是null</span><br><span class="line">注意要区分空值null和空字符串<span class="string">""</span>，空字符串是一个有效的字符串对象，它不等于null</span><br></pre></td></tr></table></figure>

<h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Java的字符类型char是基本类型，字符串类型String是引用类型；</span><br><span class="line">基本类型的变量是“持有”某个数值，引用类型的变量是“指向”某个对象；</span><br><span class="line">引用类型的变量可以是空值null；</span><br><span class="line">要区分空值null和空字符串<span class="string">""</span></span><br></pre></td></tr></table></figure>

<h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用数组来表示“一组”int类型。代码如下：</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // <span class="number">5</span>位同学的成绩:</span><br><span class="line">        int[] ns = new int[<span class="number">5</span>];</span><br><span class="line">        ns[<span class="number">0</span>] = <span class="number">68</span>;</span><br><span class="line">        ns[<span class="number">1</span>] = <span class="number">79</span>;</span><br><span class="line">        ns[<span class="number">2</span>] = <span class="number">91</span>;</span><br><span class="line">        ns[<span class="number">3</span>] = <span class="number">85</span>;</span><br><span class="line">        ns[<span class="number">4</span>] = <span class="number">62</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义一个数组类型的变量，使用数组类型“类型[]”，例如，int[]。和单个基本类型变量不同，数组变量初始化必须使用new int[<span class="number">5</span>]表示创建一个可容纳<span class="number">5</span>个int元素的数组。</span><br><span class="line">Java的数组有几个特点：</span><br><span class="line">数组所有元素初始化为默认值，整型都是<span class="number">0</span>，浮点型是<span class="number">0.0</span>，布尔型是false；</span><br><span class="line">数组一旦创建后，大小就不可改变。</span><br><span class="line">要访问数组中的某一个元素，需要使用索引。数组索引从<span class="number">0</span>开始，例如，<span class="number">5</span>个元素的数组，索引范围是<span class="number">0</span>~<span class="number">4</span>。</span><br><span class="line">可以修改数组中的某一个元素，使用赋值语句，例如，ns[<span class="number">1</span>] = <span class="number">79</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以用数组变量.length获取数组大小</span><br><span class="line">数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错</span><br></pre></td></tr></table></figure>

<h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">也可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。例如：</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // <span class="number">5</span>位同学的成绩:</span><br><span class="line">        int[] ns = new int[] &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br><span class="line">        System.out.println(ns.length); // 编译器自动推算数组大小为<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">还可以进一步简写为：</span><br><span class="line">int[] ns = &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意数组是引用类型，并且数组大小不可变。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HUNHEt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HUNHEt.md.png" alt="HUNHEt.md.png"></a></p>
<h4 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？</span><br><span class="line">字符串是引用类型，因此我们先定义一个字符串数组：</span><br><span class="line"></span><br><span class="line">String[] names = &#123;</span><br><span class="line">    <span class="string">"ABC"</span>, <span class="string">"XYZ"</span>, <span class="string">"zoo"</span></span><br><span class="line">&#125;;xxxxxxxxxx 如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？字符串是引用类型，因此我们先定义一个字符串数组：String[] names = &#123;    <span class="string">"ABC"</span>, <span class="string">"XYZ"</span>, <span class="string">"zoo"</span>&#125;;[![HUNHEt.md.png](https://s4.ax1x.com/<span class="number">2022</span>/<span class="number">02</span>/<span class="number">11</span>/HUNHEt.md.png)](https://imgtu.com/i/HUNHEt)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HUUBPf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HUUBPf.md.png" alt="HUUBPf.md.png"></a></p>
<h4 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数组是同一数据类型的集合，数组一旦创建后，大小就不可变；</span><br><span class="line"></span><br><span class="line">可以通过索引访问数组元素，但索引超出范围将报错；</span><br><span class="line"></span><br><span class="line">数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型；</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>廖雪峰java笔记</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第五周 第四章 精讲Shuffle执行过程及源码分析输入输出</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%BA%94%E5%91%A8-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%B2%BE%E8%AE%B2Shuffle%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第五周-第四章-精讲Shuffle执行过程及源码分析输入输出"><a href="#第五周-第四章-精讲Shuffle执行过程及源码分析输入输出" class="headerlink" title="第五周 第四章 精讲Shuffle执行过程及源码分析输入输出"></a>第五周 第四章 精讲Shuffle执行过程及源码分析输入输出</h1><h2 id="Shuffle过程详解"><a href="#Shuffle过程详解" class="headerlink" title="Shuffle过程详解"></a>Shuffle过程详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们前面简单说过，shuffer是一个网络拷贝的过程，是指通过网络把数据从map端拷贝到reduce端的过</span><br><span class="line">程，下面我们来详细分析一下这个过程</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HwABhq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HwABhq.png" alt="HwABhq.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们来根据这张图分析一下shuffle的一些细节信息，</span><br><span class="line">  首先看map阶段，最左边有一个inputsplit，最终会产生一个map任务，map任务在执行的时候会把k1,v1转化为k2,v2，这些数据会先临时存储到一个内存缓冲区中，这个内存缓冲区的大小默认是100M（io.sort.mb属性），当达到内存缓冲区大小的80%（io.sort.spill.percent）也就是80M的时候，会把内存中的数据溢写到本地磁盘中（mapred.local.dir），一直到map把所有的数据都计算完，最后会把内存缓冲区中的数据一次性全部刷新到本地磁盘文件中，在这个图里面表示产生了3个临时文件，每个临时文件中有3个分区，这是由于map阶段中对数据做了分区，所以数据在存储的时候，在每个临时文件中也划分为了3块，最后需要对这些临时文件进行合并，合并为一个大文件，因为一个map任务最终只会产生一个文件，这个合并之后的文件也是有3个分区的，这3个分区的数据会被shuffle线程分别拷贝到三个不同的reduce节点，图里面只显示了一个reduce节点，下面还有两个没有显示。不同map任务中的相同分区的数据会在同一个reduce节点进行合并，合并以后会执行reduce的功能，最终产生结果数据。</span><br><span class="line">  在这里shuffle其实是横跨map端和reduce端的，它主要是负责把map端产生的数据通过网络拷贝到reduce阶段进行统一聚合计算</span><br></pre></td></tr></table></figure>

<h2 id="Hadoop中序列化机制"><a href="#Hadoop中序列化机制" class="headerlink" title="Hadoop中序列化机制"></a>Hadoop中序列化机制</h2><p><a href="https://imgtu.com/i/HwA0Nn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HwA0Nn.png" alt="HwA0Nn.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  我们的map阶段在读取数据的是需要从hdfs中读取的，这里面需要经过磁盘IO和网络IO，不过正常情况下map任务会执行本地计算，也就是map任务会被分发到数据所在的节点进行计算，这个时候，网络io几乎就没有了，就剩下了磁盘io，再往后面看，map阶段执行完了以后，数据会被写入到本地磁盘文件，这个时候也需要经过磁盘io，后面的shuffle拷贝数据其实也需要先经过磁盘io把数据从本地磁盘读出来再通过网络发送到reduce节点，再写入reduce节点的本地磁盘，然后reduce阶段在执行的时候会经过磁盘io读取本地文件中的数据，计算完成以后还会经过磁盘io和网络io把数据写入到hdfs中。</span><br><span class="line">  经过我们刚才的分析，其实在这里面占得比重最高的是磁盘io，所以说影响mapreduce任务执行效率的主要原因就是磁盘io，如果想要提高任务执行效率，就需要从这方面着手分析。</span><br><span class="line">当程序在向磁盘中写数据以及从磁盘中读取数据的时候会对数据进行序列化和反序列化，磁盘io这些步骤我们省略不了，但是我们可以从序列化和反序列化这一块来着手做一些优化，</span><br><span class="line">首先我们分析一下序列化和反序列化，看这个图，当我们想把内存中的数据写入到文件中的时候，会对数据序列化，然后再写入，这个序列化其实就是把内存中的对象信息转成二进制的形式，方便存储到文件中，默认java中的序列化会把对象及其父类、超类的整个继承体系信息都保存下来，这样存储的信息太大了，就会导致写入文件的信息过大，这样写入是会额外消耗性能的。</span><br><span class="line">反序列化也是一样，reduce端想把文件中的对象信息加载到内存中，如果文件很大，在加载的时候也会额外消耗很多性能，所以如果我们把对象存储的信息尽量精简，那么就可以提高数据写入和读取消耗的性能。</span><br><span class="line">  基于此，hadoop官方实现了自己的序列化和反序列化机制，没有使用java中的序列化机制，所以</span><br><span class="line">hadoop中的数据类型没有沿用java中的数据类型，而是自己单独设计了一些writable的实现了，例如、</span><br><span class="line">longwritable、text等</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们来看一下Hadoop中提供的常用的基本数据类型的序列化类</span><br><span class="line"></span><br><span class="line">Java基本类型 		Writable 	序列化大小(字节)</span><br><span class="line">布尔型（boolean） 	BooleanWritable	 1</span><br><span class="line">字节型（byte） 		ByteWritable 		1</span><br><span class="line">整型（int） 		IntWritable 		4</span><br><span class="line">					VIntWritable 		1~5</span><br><span class="line">浮点型（float） 			FloatWritable 	4</span><br><span class="line">长整型（long） 			LongWritable 	8</span><br><span class="line">						VLongWritable 	1~9</span><br><span class="line">双精度浮点型（double） 		DoubleWritable 	8</span><br><span class="line"></span><br><span class="line">在这需要注意一下</span><br><span class="line">Text等价于java.lang.String的Writable，针对UTF-8序列</span><br><span class="line">NullWritable是单例，获取实例使用NullWritable.get()</span><br></pre></td></tr></table></figure>

<h3 id="hadoop自己实现的序列化的特点"><a href="#hadoop自己实现的序列化的特点" class="headerlink" title="hadoop自己实现的序列化的特点"></a>hadoop自己实现的序列化的特点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 紧凑: 高效使用存储空间</span><br><span class="line">2. 快速: 读写数据的额外开销小</span><br><span class="line">3. 可扩展: 可透明地读取老格式的数据</span><br><span class="line">4. 互操作: 支持多语言的交互</span><br></pre></td></tr></table></figure>

<h3 id="java中序列化的不足"><a href="#java中序列化的不足" class="headerlink" title="java中序列化的不足"></a>java中序列化的不足</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 不精简，附加信息多，不太适合随机访问</span><br><span class="line">2. 存储空间大，递归地输出类的超类描述直到不再有超类</span><br></pre></td></tr></table></figure>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们分析了Java中的序列化和Hadoop中的序列化，其实最主要的区别就是针对相同的数据，Java中的序列化会占用较大的存储空间，而Hadoop中的序列化可以节省很多存储空间，这样在海量数据计算的场景下，可以减少数据传输的大小，极大的提高计算效率</span><br></pre></td></tr></table></figure>

<h4 id="java序列化对象"><a href="#java序列化对象" class="headerlink" title="java序列化对象"></a>java序列化对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中的序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javaSerialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建student对象，并设置id和name属性</span></span><br><span class="line">        StudentJava studentJava = <span class="keyword">new</span> StudentJava();</span><br><span class="line">        studentJava.setId(<span class="number">1L</span>);</span><br><span class="line">        studentJava.setName(<span class="string">"Hadoop"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将student当前状态写入本地文件中</span></span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\student_java.txt"</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(studentJava);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentJava</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123; <span class="comment">// 一个文件只能有一个主类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> Id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="hadoop序列化对象"><a href="#hadoop序列化对象" class="headerlink" title="hadoop序列化对象"></a>hadoop序列化对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hadoop序列化机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HadoopSerialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建student对象并设置name,id属性</span></span><br><span class="line">        StudentWritable studentWritable = <span class="keyword">new</span> StudentWritable();</span><br><span class="line">        studentWritable.setId(<span class="number">1L</span>);</span><br><span class="line">        studentWritable.setName(<span class="string">"Hadoop"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将student对象当前状态写入到本地文件中</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\student_hadoop.txt"</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        studentWritable.write(oos); <span class="comment">// 与java序列化不同的地方</span></span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentWritable</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> Id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 多的部分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeLong(<span class="keyword">this</span>.Id);</span><br><span class="line">        out.writeUTF(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 多的部分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Id=in.readLong();</span><br><span class="line">        <span class="keyword">this</span>.name=in.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行这两个代码，最终会在D盘下产生两个文件，查看这两个文件的大小，最终发现Java序列化的文件大小是Hadoop序列化文件大小的10倍左右。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HwGZge" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HwGZge.png" alt="HwGZge.png"></a></p>
<p><a href="https://imgtu.com/i/HwGV3D" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HwGV3D.png" alt="HwGV3D.png"></a></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.IDEA快速编写属性对应的方法</span><br><span class="line">2.IDEA快速覆盖继承类的方法的方法</span><br></pre></td></tr></table></figure>

<h2 id="InputFormat分析"><a href="#InputFormat分析" class="headerlink" title="InputFormat分析"></a>InputFormat分析</h2><p><a href="https://imgtu.com/i/HwhRpT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HwhRpT.md.png" alt="HwhRpT.md.png"></a></p>
<h3 id="InputFormat"><a href="#InputFormat" class="headerlink" title="InputFormat"></a>InputFormat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop中有一个抽象类是InputFormat，InputFormat抽象类是MapReduce输入数据的顶层基类，这个抽象类中只定义了两个方法:</span><br><span class="line">  一个是getSplits方法</span><br><span class="line">  另一个是createRecordReader方法</span><br></pre></td></tr></table></figure>

<h3 id="InputFormat的子类"><a href="#InputFormat的子类" class="headerlink" title="InputFormat的子类"></a>InputFormat的子类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个抽象类下面有三个子继承类，</span><br><span class="line">DBInputFormat是操作数据库的，</span><br><span class="line">FileInputFormat是操作文件类型数据的，</span><br><span class="line">DelegatingInputFormat是用在处理多个输入时使用的</span><br><span class="line">这里面比较常见的也就是FileInputFormat了，FileInputFormat是所有以文件作为数据源的基类，</span><br><span class="line">FileInputFormat保存job输入的所有文件，并实现了对输入文件计算splits的方法，至于获得文件中数据</span><br><span class="line">的方法是由子类实现的。</span><br></pre></td></tr></table></figure>

<h4 id="FileInputFormat的子类"><a href="#FileInputFormat的子类" class="headerlink" title="FileInputFormat的子类"></a>FileInputFormat的子类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputFormat下面还有一些子类：</span><br><span class="line">CombineFileInputFormat：处理小文件问题的，后面我们再详细分析</span><br><span class="line"> TextInputFormat：是默认的处理类，处理普通文本文件，他会把文件中每一行作为一个记录，将每一行的起始偏移量作为key，每一行的内容作为value，这里的key和value就是我们之前所说的k1,v1 它默认以换行符或回车键作为一行记录</span><br><span class="line">NLineInputFormat：可以动态指定一次读取多少行数据</span><br><span class="line">这 里 面 的 TextInputFormat 是 我 们 处 理 文 本 数 据 的 默 认 处 理 类 ， TextInputFormat 的 顶 层 基 类 是</span><br><span class="line">InputFormat，下面我们先来看一下这个抽象类的源码</span><br></pre></td></tr></table></figure>

<h4 id="详细分析一下getSplits方法的具体实现代码"><a href="#详细分析一下getSplits方法的具体实现代码" class="headerlink" title="详细分析一下getSplits方法的具体实现代码"></a>详细分析一下getSplits方法的具体实现代码</h4><h5 id="下载源码-hadoop-3-2-2-src-tar-gz"><a href="#下载源码-hadoop-3-2-2-src-tar-gz" class="headerlink" title="下载源码 hadoop-3.2.2-src.tar.gz"></a>下载源码 hadoop-3.2.2-src.tar.gz</h5><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将D:\code\IDEA\hadoop-3.2.2-src\hadoop-mapreduce-project\hadoop-mapreduce-client\hadoop-mapreduce-client-core作为IDEA的项目</span><br></pre></td></tr></table></figure>

<h5 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.将maven的配置文件里加上镜像，这样下载依赖会快些</span><br><span class="line">2.可以就用idea自动下载，但容易卡死，且过程可视性差；建议用cmd(打开路径D:\code\IDEA\hadoop-3.2.2-src\hadoop-mapreduce-project\hadoop-mapreduce-client\hadoop-mapreduce-client-core)</span><br><span class="line">3.执行mvn clean package&#x2F;compile -DskipTests</span><br><span class="line">4.由于用国内镜像下载依赖可能会漏下依赖(已遇到);改回maven的配置文件里的镜像设置</span><br><span class="line">5.可能会遇到IDEA Cannot Resolve Symbol 问题的解决方法汇总(博客里有解决方法)</span><br></pre></td></tr></table></figure>

<h5 id="getsplits源码剖析"><a href="#getsplits源码剖析" class="headerlink" title="getsplits源码剖析"></a>getsplits源码剖析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要将项目里的java文件夹设置为root source(选中后右键mark as),这样设置后查看源码ctrl 左键 才会快速关联</span><br><span class="line">1.找到项目里的InputFormat</span><br><span class="line">2.选中getsplits方法后 ctrl 左 ，选继承类FileInputFormat,再看方法的具体实现细节</span><br></pre></td></tr></table></figure>



<h6 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SPLIT_SLOP=<span class="number">1.1</span></span><br><span class="line">文件剩余字节大小/<span class="number">1134217728</span>[<span class="number">128</span>M] &gt; <span class="number">1.1</span></span><br><span class="line">意思就是当文件剩余大小bytesRemaining与splitSize的比值大于<span class="number">1.1</span>的时候，就继续切分</span><br><span class="line">否则，剩下的直接作为一个InputSplit</span><br><span class="line"></span><br><span class="line">敲黑板，划重点：只要bytesRemaining/splitSize&lt;=<span class="number">1.1</span>就会停止划分，将剩下的作为一个InputSplit</span><br><span class="line"></span><br><span class="line">也就是说当默认splitsize=<span class="number">128</span>M时，inputsplit可能：</span><br><span class="line">	&lt;<span class="number">128</span>M</span><br><span class="line">	=<span class="number">128</span>M</span><br><span class="line">	&gt;<span class="number">128</span>M</span><br></pre></td></tr></table></figure>

<h6 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 一个1G的文件，会产生多少个map任务？ 8</span><br><span class="line">Block块默认是128M，所以1G的文件会产生8个Block块</span><br><span class="line">默认情况下InputSplit的大小和Block块的大小一致，每一个InputSplit会产生一个map任务</span><br><span class="line">所以：1024&#x2F;128&#x3D;8个map任务</span><br><span class="line">2. 1000个文件，每个文件100KB，会产生多少个map任务？</span><br><span class="line">一个文件，不管再小，都会占用一个block，所以这1000个小文件会产生1000个Block，那最终会产生1000个InputSplit，也就对应着会产生1000个map任务</span><br><span class="line">3. 一个140M的文件，会产生多少个map任务？</span><br><span class="line">根据前面的分析</span><br><span class="line">140M的文件会产生2个Block，那对应的就会产生2个InputSplit了？</span><br><span class="line">注意：这个有点特殊，140M&#x2F;128M&#x3D;1.09375&lt;1.1</span><br><span class="line">所以，这个文件只会产生一个InputSplit，也最终也就只会产生1个map 任务。</span><br><span class="line"></span><br><span class="line">这个文件其实再稍微大1M就可以产生2个map 任务了</span><br></pre></td></tr></table></figure>

<h6 id="实战140-141"><a href="#实战140-141" class="headerlink" title="实战140 141"></a>实战140 141</h6><h6 id="生成140-141大小的文件"><a href="#生成140-141大小的文件" class="headerlink" title="生成140 141大小的文件"></a>生成140 141大小的文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateDat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        generate_140M();</span><br><span class="line">        generate_141M();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate_140M</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"D:\\s_name_140.dat"</span>;</span><br><span class="line">        System.out.println(<span class="string">"start: 开始生成140M文件-&gt;"</span> + fileName);</span><br><span class="line">        BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(fileName));</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; <span class="number">8201592</span>) &#123;</span><br><span class="line">            bfw.write(<span class="string">"zhangsan beijing"</span>);</span><br><span class="line">            bfw.newLine();</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">10000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                bfw.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end: 140M文件已生成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate_141M</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"D:\\s_name_141.dat"</span>;</span><br><span class="line">        System.out.println(<span class="string">"start: 开始生成141M文件-&gt;"</span> + fileName);</span><br><span class="line">        BufferedWriter bfw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(fileName));</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; <span class="number">8221592</span>) &#123;</span><br><span class="line">            bfw.write(<span class="string">"zhangsan beijing"</span>);</span><br><span class="line">            bfw.newLine();</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">10000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                bfw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="打jar包，上传数据到hdfs，提交任务到集群"><a href="#打jar包，上传数据到hdfs，提交任务到集群" class="headerlink" title="打jar包，上传数据到hdfs，提交任务到集群"></a>打jar包，上传数据到hdfs，提交任务到集群</h6><h6 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h6><p> <strong>141</strong></p>
<p><a href="https://imgtu.com/i/HBnBCQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HBnBCQ.md.png" alt="HBnBCQ.md.png"></a></p>
<p><strong>140</strong></p>
<p><a href="https://imgtu.com/i/HBnD3j" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/12/HBnD3j.md.png" alt="HBnD3j.md.png"></a></p>
<h5 id="createRecordReader方法"><a href="#createRecordReader方法" class="headerlink" title="createRecordReader方法"></a>createRecordReader方法</h5><h6 id="看TextInputFormat对这个方法的实现"><a href="#看TextInputFormat对这个方法的实现" class="headerlink" title="看TextInputFormat对这个方法的实现"></a>看TextInputFormat对这个方法的实现</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">注意：如果这个InputSplit不是第一个InputSplit，我们将会丢掉读取出来的第一行</span><br><span class="line">因为我们总是通过next()方法多读取一行(会多读取下一个InputSplit的第一行)</span><br><span class="line">这就解释了这个问题：如果一行数据被拆分到了两个InputSplit中，会不会有问题？PPT中通过一个例子详细分析了这个问题</span><br></pre></td></tr></table></figure>



<p><a href="https://imgtu.com/i/HD1cmd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/13/HD1cmd.md.png" alt="HD1cmd.md.png"></a></p>
<h2 id="OutputFormat分析"><a href="#OutputFormat分析" class="headerlink" title="OutputFormat分析"></a>OutputFormat分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">前 面 我 们 分 析 了 InputFormat ， 下 面 我 们 来 分 析 一 下 OutputFormat ， 顾 名 思 义 ， 这 个 是 控 制MapReduce输出的</span><br><span class="line"></span><br><span class="line">OutputFormat是输出数据的顶层基类</span><br><span class="line">FileOutputFormat：文件数据处理基类</span><br><span class="line">TextOutputFormat：默认文本文件处理类</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这几个其实和InputFormat中的那几个文本处理类是对应着的，当然了针对输出数据还有其它类型的处理</span><br><span class="line">类，我们在这先分析最常见的文本文件处理类，其他类型的等我们遇到具体场景再具体分析。</span><br><span class="line">我们来看一下OutputFormat的源码，这个类主要由三个方法:</span><br><span class="line">getRecordWriter</span><br><span class="line">checkOutputSpecs <span class="comment">//检测输出路径是否存在</span></span><br><span class="line">getOutputCommitter</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第五周 第三章 深入 MapReduce</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%BA%94%E5%91%A8-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%B7%B1%E5%85%A5-MapReduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第五周-第三章-深入-MapReduce"><a href="#第五周-第三章-深入-MapReduce" class="headerlink" title="第五周 第三章 深入 MapReduce"></a>第五周 第三章 深入 MapReduce</h1><h2 id="MapReduce任务日志查看"><a href="#MapReduce任务日志查看" class="headerlink" title="MapReduce任务日志查看"></a>MapReduce任务日志查看</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果想要查看mapreduce任务执行过程产生的日志信息怎么办呢？</span><br><span class="line">是不是在提交任务的时候直接在这个控制台上就能看到了？先不要着急，我们先在代码中增加一些日志信息，在实际工作中做调试的时候这个也是很有必要的</span><br><span class="line">在自定义mapper类的map函数中增加一个输出，将k1,v1的值打印出来</span><br><span class="line"></span><br><span class="line">在自定义reducer类中的reduce方法中增加一个输出，将k2,v2和k3,v3的值打印出来</span><br></pre></td></tr></table></figure>

<h3 id="开启yarn的日志聚合功能方式"><a href="#开启yarn的日志聚合功能方式" class="headerlink" title="开启yarn的日志聚合功能方式"></a>开启yarn的日志聚合功能方式</h3><h4 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h4><h5 id="map函数修改"><a href="#map函数修改" class="headerlink" title="map函数修改"></a>map函数修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            System.out.println("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;"); # 增加处</span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words)&#123;</span><br><span class="line">                <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">                Text k2 = <span class="keyword">new</span> Text(word);</span><br><span class="line">                LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">                context.write(k2,v2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="reduce函数修改"><a href="#reduce函数修改" class="headerlink" title="reduce函数修改"></a>reduce函数修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k2, Iterable&lt;LongWritable&gt; v2s, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LongWritable v2:v2s)&#123;</span><br><span class="line">                System.out.println("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;"); # 增加处</span><br><span class="line">                sum += v2.get();</span><br><span class="line">            &#125;</span><br><span class="line">            Text k3 = k2;</span><br><span class="line">            LongWritable v3 = <span class="keyword">new</span> LongWritable(sum);</span><br><span class="line">            System.out.println("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;"); # 增加处</span><br><span class="line">            context.write(k3, v3);</span><br><span class="line">            <span class="comment">// super.reduce(key, values, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="打包，上传，提交任务到集群"><a href="#打包，上传，提交任务到集群" class="headerlink" title="打包，上传，提交任务到集群"></a>打包，上传，提交任务到集群</h5><h5 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">等待任务执行结束，我们发现在控制台上是看不到任务中的日志信息的，为什么呢？因为我们在这相当于是通过一个客户端把任务提交到集群里面去执行了，所以日志是存在在集群里面的。想要查看需要需要到一个特殊的地方查看这些日志信息</span><br><span class="line">由于程序是提交到集群执行，所以在linux的终端上是看不到的</span><br><span class="line"></span><br><span class="line">先进入到yarn的web界面，访问<span class="number">8088</span>端口，点击对应任务的history链接(在此之前先把bigdata02,bigdata03与ip的映射在windows的hosts文件上配置好)</span><br><span class="line">http://bigdata01:<span class="number">8088</span>/</span><br><span class="line">        </span><br><span class="line">注意了，在这里我们发现这个链接是打不来的，</span><br><span class="line">这里有两个原因:</span><br><span class="line">  第一个原因是没有windows的hosts文件中没有配置bigdata02和bigdata03这两个主机名和ip的映射关系，先去把这两个主机名配置到hosts文件里面，之前的bigdata01已经配置进去了</span><br><span class="line">  第二个原因就是这里必须要启动historyserver进程才可以，并且还要开启日志聚合功能，才能在web界面上直接查看任务对应的日志信息，因为默认情况下任务的日志是散落在nodemanager节点上的，想要查看需要找到对应的nodemanager节点上去查看，这样就很不方便，通过日志聚合功能我们可以把之前本来散落在nodemanager节点上的日志统一收集到hdfs上的指定目录中，这样就可以在yarn的web界面中直接查看了</span><br></pre></td></tr></table></figure>

<h6 id="打开日志聚合功能"><a href="#打开日志聚合功能" class="headerlink" title="打开日志聚合功能"></a>打开日志聚合功能</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们就来开启日志聚合功能。开启日志聚合功能需要修改yarn-site.xml的配置，增加</span><br><span class="line">yarn.log-aggregation-enable和yarn.log.server.url这两个参数</span><br><span class="line"></span><br><span class="line">注意：修改这个配置想要生效需要重启集群，每个节点都要修改</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加部分</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log-aggregation-enable&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log.server.url&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;http:&#x2F;&#x2F;bigdata01:19888&#x2F;jobhistory&#x2F;logs&#x2F;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动historyserver进程，需要在集群的所有节点上都启动这个进程</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# bin&#x2F;mapred --daemon start historyserver</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# jps</span><br><span class="line">4232 SecondaryNameNode</span><br><span class="line">5192 JobHistoryServer</span><br><span class="line">4473 ResourceManager</span><br><span class="line">3966 NameNode</span><br><span class="line">5231 Jps</span><br><span class="line"></span><br><span class="line">其它节点也需执行</span><br><span class="line"></span><br><span class="line">重新再提交mapreduce任务</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  此时再进入yarn的8088界面，点击任务对应的history链接就可以打开了。</span><br><span class="line">  此时，点击对应map和reduce后面的链接就可以点进去查看日志信息了，点击map后面的数字1，可以</span><br><span class="line">  点击这个界面中的logs文字链接，可以查看详细的日志信息 </span><br><span class="line">  </span><br><span class="line">  最终可以在界面中看到很多日志信息，我们刚才使用sout输出的日志信息需要到Log Type: stdout这里来</span><br><span class="line">查看，在这里可以看到，k1和v1的值</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HdADit" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdADit.png" alt="HdADit.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  想要查看reduce输出的日志信息需要到reduce里面查看，操作流程是一样的，可以看到k2,v2和k3,v3的</span><br><span class="line">值</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HdA0II" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdA0II.png" alt="HdA0II.png"></a></p>
<h4 id="使用logger"><a href="#使用logger" class="headerlink" title="使用logger"></a>使用logger</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们刚才的输出是使用syout输出的，这个其实是不正规的，标准的日志写法是需要使用logger进行输出的</span><br></pre></td></tr></table></figure>

<h5 id="修改map函数"><a href="#修改map函数" class="headerlink" title="修改map函数"></a>修改map函数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要实现map函数</span></span><br><span class="line"><span class="comment">         * 这个函数就是可以接受&lt;k1,v1&gt;, 产生&lt;k2,v2&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            logger.info(<span class="string">"&lt;k1, v1&gt;: &lt;"</span>+k1.get()+<span class="string">", "</span>+v1.toString()+<span class="string">"&gt;"</span>);</span><br><span class="line">            <span class="comment">//System.out.println("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;");</span></span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words)&#123;</span><br><span class="line">                <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">                Text k2 = <span class="keyword">new</span> Text(word);</span><br><span class="line">                LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">                context.write(k2,v2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="修改reduce函数"><a href="#修改reduce函数" class="headerlink" title="修改reduce函数"></a>修改reduce函数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(myReducer.class); #！！！</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对&lt;k2, &#123;v2...&#125;&gt;的数据进行累加求和，生成&lt;k3,v3&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k2</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v2s</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k2, Iterable&lt;LongWritable&gt; v2s, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LongWritable v2:v2s)&#123;</span><br><span class="line">                logger.info("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;"); #！！！</span><br><span class="line">                <span class="comment">//System.out.println("&lt;k2, v2&gt;: &lt;"+k2.toString()+", "+v2.get()+"&gt;");</span></span><br><span class="line">                sum += v2.get();</span><br><span class="line">            &#125;</span><br><span class="line">            Text k3 = k2;</span><br><span class="line">            LongWritable v3 = <span class="keyword">new</span> LongWritable(sum);</span><br><span class="line">            logger.info("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;"); #！！！</span><br><span class="line">            <span class="comment">//System.out.println("&lt;k3, v3&gt;: &lt;"+k3.toString()+", "+v3.get()+"&gt;");</span></span><br><span class="line">            context.write(k3, v3);</span><br><span class="line">            <span class="comment">// super.reduce(key, values, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="打包，上传，提交任务到集群-1"><a href="#打包，上传，提交任务到集群-1" class="headerlink" title="打包，上传，提交任务到集群"></a>打包，上传，提交任务到集群</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重新编译打包上传，重新提交最新的jar包，这个时候再查看日志就需要到Log Type: syslog中查看日志了。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HdeR10" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdeR10.md.png" alt="HdeR10.md.png"></a></p>
<p><a href="https://imgtu.com/i/Hde2pq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/Hde2pq.md.png" alt="Hde2pq.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是工作中比较常用的查看日志的方式，但是还有一种使用命令查看的方式，这种方式面试的时候一般喜欢问</span><br></pre></td></tr></table></figure>

<h3 id="面试爱问的日志查看方式-面试"><a href="#面试爱问的日志查看方式-面试" class="headerlink" title="面试爱问的日志查看方式(面试)"></a>面试爱问的日志查看方式(面试)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> yarn logs -applicationId application_158771356 | grep k1,v1</span><br><span class="line">     </span><br><span class="line">注意:后面指定的是任务id，任务id可以到yarn的web界面上查看。</span><br><span class="line">执行这个命令可以看到很多的日志信息，我们通过grep筛选一下日志</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这种方式也需要大家能够记住并且掌握住，首先是面试的时候可能会问到，还有就是针对某一些艰难的场景下，无法使用yarn的web界面查看日志，就需要使用yarn logs命令了</span><br></pre></td></tr></table></figure>

<h2 id="停止Hadoop集群中的任务"><a href="#停止Hadoop集群中的任务" class="headerlink" title="停止Hadoop集群中的任务"></a>停止Hadoop集群中的任务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  如果一个mapreduce任务处理的数据量比较大的话，这个任务会执行很长时间，可能几十分钟或者几个小时都有可能，假设一个场景，任务执行了一半了我们发现我们的代码写的有问题，需要修改代码重新提交执行，这个时候之前的任务就没有必要再执行了，没有任何意义了，最终的结果肯定是错误的，所以我们就想把它停掉，要不然会额外浪费集群的资源，如何停止呢？</span><br><span class="line">我在提交任务的窗口中按ctrl+c是不是就可以停止？</span><br><span class="line">注意了，不是这样的，我们前面说过，这个任务是提交到集群执行的，你在提交任务的窗口中执行ctrl+c对已经提交到集群中的任务是没有任何影响的。</span><br><span class="line">  我们可以验证一下，执行ctrl+c之后你再到yarn的8088界面查看，会发现任务依然存在。</span><br><span class="line">所以需要使用hadoop集群的命令去停止正在运行的任务</span><br><span class="line">使用yarn application -kill命令，后面指定任务id即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 hadoop-3.2.0]# yarn application -kill application_15877135678</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HdGYSe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdGYSe.md.png" alt="HdGYSe.md.png"></a></p>
<p><a href="https://imgtu.com/i/HdlgVf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdlgVf.md.png" alt="HdlgVf.md.png"></a></p>
<h2 id="MapReduce程序扩展"><a href="#MapReduce程序扩展" class="headerlink" title="MapReduce程序扩展"></a>MapReduce程序扩展</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  咱们前面说过MapReduce任务是由map阶段和reduce阶段组成的但是我们也说过，reduce阶段不是必须的，那也就意味着MapReduce程序可以只包含map阶段。</span><br><span class="line">  什么场景下会只需要map阶段呢？</span><br><span class="line">当数据只需要进行普通的过滤、解析等操作，不需要进行聚合，这个时候就不需要使用reduce阶段了，在代码层面该如何设置呢？</span><br><span class="line">  很简单，在组装Job的时候设置reduce的task数目为0就可以了。并且Reduce代码也不需要写了。</span><br></pre></td></tr></table></figure>



<h3 id="map阶段编写"><a href="#map阶段编写" class="headerlink" title="map阶段编写"></a>map阶段编写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要实现map函数</span></span><br><span class="line"><span class="comment">         * 这个函数就是可以接受&lt;k1,v1&gt;, 产生&lt;k2,v2&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            logger.info(<span class="string">"&lt;k1, v1&gt;: &lt;"</span>+k1.get()+<span class="string">", "</span>+v1.toString()+<span class="string">"&gt;"</span>);</span><br><span class="line">            <span class="comment">//System.out.println("&lt;k1, v1&gt;: &lt;"+k1.get()+", "+v1.toString()+"&gt;");</span></span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words)&#123;</span><br><span class="line">                <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">                Text k2 = <span class="keyword">new</span> Text(word);</span><br><span class="line">                LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">                context.write(k2,v2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="main编写"><a href="#main编写" class="headerlink" title="main编写"></a>main编写</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(args.length!=<span class="number">2</span>)&#123;</span><br><span class="line">               System.exit(<span class="number">100</span>);</span><br><span class="line">               System.out.println(<span class="string">"缺少路径参数！！！"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 指定Job需要的配置参数</span></span><br><span class="line">           Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">           <span class="comment">// 创建一个Job</span></span><br><span class="line">           Job job = Job.getInstance(conf);</span><br><span class="line">           <span class="comment">// 注意：这一行必须设置，否者在集群中执行时找不到WordCountJob这个类</span></span><br><span class="line">           job.setJarByClass(WordCountJobNoReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">           <span class="comment">// 指定输入路径，可以是文件也可以是目录(目录里只有一个文件时可以); 注意FileInputFormat别选成hadoop1.x的了</span></span><br><span class="line">           FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">           <span class="comment">// 指定输出路径(只能是hdfs上一个不存在的目录); 注意FileOutFormat别选成hadoop1.x的了</span></span><br><span class="line">           FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"> </span><br><span class="line">           <span class="comment">// 指定map相关代码</span></span><br><span class="line">           job.setMapperClass(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           <span class="comment">// 指定k2类型</span></span><br><span class="line">           job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           <span class="comment">// 指定v2类型</span></span><br><span class="line">           job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">           <span class="comment">// 禁用reduce</span></span><br><span class="line">           job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">           <span class="comment">// 提交job</span></span><br><span class="line">           job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="打包，上传，提交到集群，结果查看"><a href="#打包，上传，提交到集群，结果查看" class="headerlink" title="打包，上传，提交到集群，结果查看"></a>打包，上传，提交到集群，结果查看</h3><p><a href="https://imgtu.com/i/HdtUOJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdtUOJ.png" alt="HdtUOJ.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里发现map执行到100%以后任务就执行成功了，reduce还是0%，因为就没有reduce阶段了。</span><br><span class="line">查看输出结果，注意，这里的文件名就是part-m-00000了</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HdtNy4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdtNy4.png" alt="HdtNy4.png"></a></p>
<p><a href="https://imgtu.com/i/HdttlF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/11/HdttlF.png" alt="HdttlF.png"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第五周 第二章 实战 WordCount</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%BA%94%E5%91%A8-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AE%9E%E6%88%98-WordCount.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第五周-第二章-实战-WordCount"><a href="#第五周-第二章-实战-WordCount" class="headerlink" title="第五周 第二章 实战 WordCount"></a>第五周 第二章 实战 WordCount</h1><h2 id="WordCount案例图解"><a href="#WordCount案例图解" class="headerlink" title="WordCount案例图解"></a>WordCount案例图解</h2><p><a href="https://imgtu.com/i/HYGTED" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/10/HYGTED.md.png" alt="HYGTED.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;下面我们来看一个两个文件的执行流程</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HYGIHO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/10/HYGIHO.md.png" alt="HYGIHO.md.png"></a></p>
<p><a href="https://imgtu.com/i/HYJC5Q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/10/HYJC5Q.md.png" alt="HYJC5Q.md.png"></a></p>
<h2 id="WordCount案例开发"><a href="#WordCount案例开发" class="headerlink" title="WordCount案例开发"></a>WordCount案例开发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们通过理论层面详细分析了单词计数的执行流程，下面我们就来实际上手操作一下。</span><br><span class="line">大致流程如下：</span><br><span class="line">第一步：开发Map阶段代码</span><br><span class="line">第二步：开发Reduce阶段代码</span><br><span class="line">第三步：组装Job</span><br></pre></td></tr></table></figure>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：读取hdfs上的hello.txt文件，计算文件中各个单词出现次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 原始文件内容如下：</span></span><br><span class="line"><span class="comment"> * hello you</span></span><br><span class="line"><span class="comment"> * hello me</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最终需要的结果形式：</span></span><br><span class="line"><span class="comment"> * hello 2</span></span><br><span class="line"><span class="comment"> * me 1</span></span><br><span class="line"><span class="comment"> * you 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountJob</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="comment">// map阶段</span></span><br><span class="line">    <span class="comment">// 注意：myMapper和myReducer类可以提到外面去写，这里只是为了方便学习</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要实现map函数</span></span><br><span class="line"><span class="comment">         * 这个函数就是可以接受&lt;k1,v1&gt;, 产生&lt;k2,v2&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v1</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// k1代表每一行数据的行首偏移量，v1代表的是每一行的数据</span></span><br><span class="line">            <span class="comment">// 需要做的是：把每一行数据的单词切割出来</span></span><br><span class="line">            String[] words = v1.toString().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words)&#123;</span><br><span class="line">                <span class="comment">// 把切割出来的单词，封装成&lt;k2, 1&gt;</span></span><br><span class="line">                Text k2 = <span class="keyword">new</span> Text(word);</span><br><span class="line">                LongWritable v2 = <span class="keyword">new</span> LongWritable(<span class="number">1L</span>);</span><br><span class="line">                context.write(k2,v2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//super.map(key, value, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reduce阶段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">myReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对&lt;k2, &#123;v2...&#125;&gt;的数据进行累加求和，生成&lt;k3,v3&gt;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> k2</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> v2s</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k2, Iterable&lt;LongWritable&gt; v2s, Context context)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LongWritable v2:v2s)&#123;</span><br><span class="line">                sum += v2.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Text k3 = k2</span></span><br><span class="line">            context.write(k2, <span class="keyword">new</span> LongWritable(sum));</span><br><span class="line">            <span class="comment">// super.reduce(key, values, context);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组装job=map+reduce</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(args.length!=<span class="number">2</span>)&#123;</span><br><span class="line">                System.exit(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="string">"缺少路径参数！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指定Job需要的配置参数</span></span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="comment">// 创建一个Job</span></span><br><span class="line">            Job job = Job.getInstance(conf);</span><br><span class="line">            <span class="comment">// 注意：这一行必须设置，否者在集群中执行时找不到WordCountJob这个类</span></span><br><span class="line">            job.setJarByClass(WordCountJob<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定输入路径，可以是文件也可以是目录(目录里只有一个文件时可以); 注意FileInputFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 指定输出路径(只能是hdfs上一个不存在的目录); 注意FileOutFormat别选成hadoop1.x的了</span></span><br><span class="line">            FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定map相关代码</span></span><br><span class="line">            job.setMapperClass(myMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k2类型</span></span><br><span class="line">            job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v2类型</span></span><br><span class="line">            job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//指定reduce相关代码</span></span><br><span class="line">            job.setReducerClass(myReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定k3类型</span></span><br><span class="line">            job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 指定v3类型</span></span><br><span class="line">            job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交job</span></span><br><span class="line">            job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在代码开发完毕了，现在我们是把自定义的mapper类和reducer类都放到了这个WordCountJob类中，主要是为了在学习阶段看起来清晰一些，所有的代码都在一个类中，好找，其实我们完全可以把自定义的mapper类和reducer类单独提出去，定义为单独的类，是没有什么区别的。</span><br></pre></td></tr></table></figure>

<h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok，那代码开发好了以后想要执行，我们需要打jar包上传到集群上去执行，这个时候需要在pom文件中</span><br><span class="line">添加maven的编译打包插件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;!-- compiler插件, 设定JDK版本 --&gt;</span><br><span class="line">    &lt;!--编译插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class="line">        &lt;showWarnings&gt;true&lt;&#x2F;showWarnings&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--打包插件，可以打带依赖的jar包--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;descriptorRefs&gt;</span><br><span class="line">        &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</span><br><span class="line">    &lt;&#x2F;descriptorRefs&gt;</span><br><span class="line">    &lt;archive&gt;</span><br><span class="line">        &lt;manifest&gt;</span><br><span class="line">            &lt;!--这里可以不写入口类，可以动态指定--&gt;</span><br><span class="line">            &lt;mainClass&gt;&lt;&#x2F;mainClass&gt;</span><br><span class="line">        &lt;&#x2F;manifest&gt;</span><br><span class="line">    &lt;&#x2F;archive&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">&lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">    &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">    &lt;&#x2F;goals&gt;</span><br><span class="line">&lt;&#x2F;execution&gt;</span><br><span class="line">&lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，这些添加完以后还有一个地方需要修改，需要在pom中的hadoop-client和log4j依赖中增加</span><br><span class="line">scope属性，值为provided，表示只在编译的时候使用这个依赖，在执行以及打包的时候都不使用，因为</span><br><span class="line">hadoop-client和log4j依赖在集群中都是有的，所以在打jar包的时候就不需要打进去了，如果我们使用到 了集群中没有的第三方依赖包就不需要增加这个provided属性了，不增加provided就可以把对应的第三方依赖打进jar包里面了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整的pom文件</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bigdata_hadoop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--hadoop的依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.2&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;!-- provided表示这个依赖只在编译的时候，执行或者打jar的时候都不使用; 执行其它需要这些以来的程序时，要去掉--&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--log4j的依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.10&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;!-- provided表示这个依赖只在编译的时候，执行或者打jar的时候都不使用; 执行其它需要这些以来的程序时，要去掉--&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.10&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;!-- provided表示这个依赖只在编译的时候，执行或者打jar的时候都不使用; 执行其它需要这些以来的程序时，要去掉--&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">    &lt;!-- compiler插件, 设定JDK版本 --&gt;</span><br><span class="line">        &lt;!--编译插件--&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">            &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class="line">            &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class="line">            &lt;showWarnings&gt;true&lt;&#x2F;showWarnings&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--打包插件，可以打带依赖的jar包--&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-with-dependencies&lt;&#x2F;descriptorRef&gt;</span><br><span class="line">        &lt;&#x2F;descriptorRefs&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;!--这里可以不写入口类，可以动态指定--&gt;</span><br><span class="line">                &lt;mainClass&gt;&lt;&#x2F;mainClass&gt;</span><br><span class="line">            &lt;&#x2F;manifest&gt;</span><br><span class="line">        &lt;&#x2F;archive&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">    &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">        &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">        &lt;&#x2F;goals&gt;</span><br><span class="line">    &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h3 id="打jar包"><a href="#打jar包" class="headerlink" title="打jar包"></a>打jar包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加好了以后就可以打包了，建议在windows的cmd命令行下cd到项目根目录，然后执行mvn编译打包</span><br><span class="line">命令，看到最后输出的BUILD SUCCESS就说明执行成功了</span><br><span class="line"></span><br><span class="line">D:\IdeaProjects\db_hadoop&gt;mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令执行成功之后，就可以到target目录下获取对应的jar包了，需要使用jar-with-dependencies结尾的那个jar包。</span><br><span class="line">D:\IdeaProjects\db_hadoop\target\db_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar 把这个jar包上传到集群的任意一台机器上面或者是hadoop客户端机器上都可以，只要这台机器可以和集群进行交互即可。</span><br><span class="line">注意，这个jar包不能使用java -jar的方式执行，需要使用集群特有的执行方式</span><br></pre></td></tr></table></figure>

<h3 id="向集群提交MapReduce任务"><a href="#向集群提交MapReduce任务" class="headerlink" title="向集群提交MapReduce任务"></a>向集群提交MapReduce任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在此之前需要做:</span><br><span class="line">1.需要把jar包上传到linux</span><br><span class="line">2.测试数据hello.txt上传到hdfs</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar bigdata_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar com.imooc.mc.WordCountJob &#x2F;test&#x2F;WordCount &#x2F;test&#x2F;WordCount&#x2F;outcome</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop：表示使用hadoop脚本提交任务，其实在这里使用yarn脚本也是可以的，从hadoop2开始支持使用yarn，不过也兼容hadoop1，也继续支持使用hadoop脚本，所以在这里使用哪个都可以，</span><br><span class="line">具体就看你个人的喜好了，我是习惯于使用hadoop脚本</span><br><span class="line">jar：表示执行jar包</span><br><span class="line">db_hadoop-1.0-SNAPSHOT-jar-with-dependencies.jar：指定具体的jar包路径信息</span><br><span class="line">com.imooc.mr.WordCountJob：指定要执行的mapreduce代码的全路径</span><br><span class="line">&#x2F;test&#x2F;hello.txt：指定mapreduce接收到的第一个参数，代表的是输入路径，这里的输入路径可以直</span><br><span class="line">接指定hello.txt的路径，也可以直接指定它的父目录，因为它的父目录里面也没有其它无关的文件，如果指定目录的话就意味着hdfs会读取这个目录下所有的文件，所以后期如果我们需要处理一批文件，那就可以把他们放到同一个目录里面，直接指定目录即可。</span><br><span class="line">&#x2F;out：指定mapreduce接收到的第二个参数，代表的是输出目录，这里的输出目录必须是不存在的，MapReduce程序在执行之前会检测这个输出目录，如果存在会报错，因为它每次执行任务都需要一个新的输出目录来存储结果数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出目录中，_SUCCESS是一个标记文件，有这个文件表示这个任务执行成功了。</span><br><span class="line">part-r-00000是具体的数据文件，如果有多个reduce任务会产生多个这种文件，多个文件的话会按照从0</span><br><span class="line">开始编号，00001,00002等等</span><br><span class="line"></span><br><span class="line">还要一点需要注意的,part后面的r表示这个结果文件是reduce步骤产生的，如果一个mapreduce只有</span><br><span class="line">map阶段没有reduce阶段，那么产生的结果文件是part-m-00000这样的</span><br></pre></td></tr></table></figure>

<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以在bigdata:8088里看一些此次提交任务的相关信息</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第五周 第一章 初识MapReduce</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%BA%94%E5%91%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86MapReduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第五周-第一章-初识MapReduce"><a href="#第五周-第一章-初识MapReduce" class="headerlink" title="第五周 第一章 初识MapReduce"></a>第五周 第一章 初识MapReduce</h1><h2 id="Hadoop之MapReduce详解"><a href="#Hadoop之MapReduce详解" class="headerlink" title="Hadoop之MapReduce详解"></a>Hadoop之MapReduce详解</h2><p><code>前面我们学习了Hadoop中的HDFS，HDFS主要是负责存储海量数据的，如果只是把数据存储起来，除了浪费磁盘空间，是没有任何意义的，我们把数据存储起来之后是希望能从这些海量数据中分析出来一些有价值的内容，这个时候就需要有一个比较厉害的计算框架，来快速计算这一批海量数据，所以MapReduce应运而生了，那MapReduce是如何实现对海量的快速计算的呢？它的底层原理是什么样的呢？不要着急，且听下面分解。</code></p>
<h3 id="MapReduce介绍"><a href="#MapReduce介绍" class="headerlink" title="MapReduce介绍"></a>MapReduce介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我们先举个例子来介绍一下MapReduce</span><br><span class="line">计算扑克牌中的黑桃个数</span><br><span class="line">就是我们平时打牌时用的扑克牌，现在呢，有一摞牌，我想知道这摞牌中有多少张黑桃</span><br><span class="line">最直接的方式是一张一张检查并且统计出有多少张是黑桃，但是这种方式的效率比较低，如果说这一摞牌</span><br><span class="line">只有几十张也就无所谓了，如果这一摞拍有上千张呢？你一张一张去检查还不疯了？</span><br><span class="line">这个时候我们可以使用MapReduce的计算方法</span><br><span class="line">第一步：把这摞牌分配给在座的所有玩家</span><br><span class="line">第二步：让每个玩家查一下自己手中的牌有多少张是黑桃，然后把这个数目汇报给你</span><br><span class="line">第三步：你把所有玩家告诉你的数字加起来，得到最终的结果</span><br><span class="line">之前是一张一张的串行计算，现在使用mapreduce是把数据分配给多个人，并行计算，每一个人获得一</span><br><span class="line">个局部聚合的临时结果，最终再统一汇总一下。</span><br><span class="line"></span><br><span class="line">这样就可以快速得到答案了，这其实就是MapReduce的计算思想。</span><br><span class="line">下面我们再通过具体的案例分析MapReduce的计算思想</span><br></pre></td></tr></table></figure>

<h3 id="分布式计算介绍"><a href="#分布式计算介绍" class="headerlink" title="分布式计算介绍"></a>分布式计算介绍</h3><h4 id="移动数据计算-传统计算"><a href="#移动数据计算-传统计算" class="headerlink" title="移动数据计算(传统计算)"></a>移动数据计算(传统计算)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再举一个例子，就拿我们平时使用比较多的JDBC代码执行的流程来说。</span><br><span class="line">我们自己写的JDBC代码是在一台机器上运行，mysql数据库是在另一台机器上运行。</span><br><span class="line">正常情况下，我们通过jdbc代码去mysql中获取一条数据，速度还是很快的，但是有一个极端情况，如果我们要获取的数据量很大，达到了几个G，甚至于几十G。</span><br><span class="line">这个时候我们使用jdbc代码去拉取数据的时候，就会变得非常慢，这个慢主要是由于两个方面造成的，</span><br><span class="line">一个是磁盘io(会进行磁盘读写操作)，</span><br><span class="line">一个是网络io(网络传输)。 这两个里面其实最耗时的还是网络io，我们平时在两台电脑之间传输一个几十G的文件也需要很长时间的，但是如果是使用U盘拷贝就很快了，所以可以看出来主要耗时的地方是在网络IO上面。</span><br><span class="line"></span><br><span class="line">这种计算方式我们称之为移动数据 ，就是把mysql数据库中的数据移动到计算程序所在的机器上面</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HJnPv4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HJnPv4.png" alt="HJnPv4.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们考虑把计算程序移动到mysql上面去执行，是不是就可以节省网络io了，是的！</span><br><span class="line">这种方式称之为移动计算，就是把计算程序移动到数据所在的节点上面</span><br></pre></td></tr></table></figure>

<h4 id="移动计算程序计算-新思路"><a href="#移动计算程序计算-新思路" class="headerlink" title="移动计算程序计算(新思路)"></a>移动计算程序计算(新思路)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们数据量很大的话，我们的数据肯定是由很多个节点存储的，这个时候我们就可以把我们的程序代码拷贝到对应的节点上面去执行，程序代码都是很小的，一般也就几十KB或者几百KB，加上外部依赖 包，最大也就几兆 ，甚至几十兆，但是我们需要计算的数据动辄都是几十G、几百G，他们两个之间的差距不是一星半点啊</span><br><span class="line">这样我们的代码就可以在每个数据节点上面执行了，但是这个代码只能计算当前节点上的数据的，如果我们想要统计数据的总行数，这里每个数据节点上的代码只能计算当前节点上数据的行数，所以还的有一个汇总程序，这样每个数据节点上面计算的临时结果就可以通过汇总程序得到最终的结果了。</span><br><span class="line">此时汇总程序需要传递的数据量就很小了，只需要接收一个数字即可。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HJnFKJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HJnFKJ.png" alt="HJnFKJ.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个计算过程就是分布式计算，这个步骤分为两步:</span><br><span class="line">第一步：对每个节点上面的数据进行局部计算</span><br><span class="line">第二步：对每个节点上面计算的局部结果进行最终全局汇总</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HJnkr9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HJnkr9.md.png" alt="HJnkr9.md.png"></a></p>
<h2 id="MapReduce原理剖析"><a href="#MapReduce原理剖析" class="headerlink" title="MapReduce原理剖析"></a>MapReduce原理剖析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MapReduce是一种分布式计算模型，是Google提出来的，主要用于搜索领域，解决海量数据的计算问</span><br><span class="line">题.</span><br><span class="line">MapReduce是分布式运行的，由两个阶段组成：Map和Reduce，</span><br><span class="line">Map阶段是一个独立的程序，在很多个节点同时运行，每个节点处理一部分数据。</span><br><span class="line">Reduce阶段也是一个独立的程序，可以在一个或者多个节点同时运行，每个节点处理一部分数据【在这</span><br><span class="line">我们先把reduce理解为一个单独的聚合程序即可】。</span><br><span class="line">在这map就是对数据进行局部汇总，reduce就是对局部数据进行最终汇总。</span><br><span class="line">结合到我们前面分析的统计黑桃的例子中，这里的map阶段就是指每个人统计自己手里的黑桃的个数，</span><br><span class="line">reduce就是对每个人统计的黑桃个数进行最终汇总</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/Hh1yz4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/16/Hh1yz4.md.png" alt="Hh1yz4.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个Hadoop集群，一共5个节点一个主节点，四个从节点</span><br><span class="line">这里面我们只列出来了HDFS相关的进程信息</span><br><span class="line">假设我们有一个512M的文件，这个文件会产生4个block块，假设这4个block块正好分别存储到了集群的4个节点上，我们的计算程序会被分发到每一个数据所在的节点，然后开始执行计算，在map阶段，针对每一个block块对应的数据都会产生一个map任务(这个map任务其实就是执行这个计算程序的)，在这里也就意味着会产生4个map任务并行执行，4个map阶段都执行完毕以后，会执行reduce阶段，在reduce阶段中会对这4个map任务的输出数据进行汇总统计，得到最终的结果</span><br></pre></td></tr></table></figure>



<p><a href="https://imgtu.com/i/HJ6YTA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HJ6YTA.md.png" alt="HJ6YTA.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  左下角是一个文件，文件最下面是几个block块，说明这个文件被切分成了这几个block块，文件上面是一些split，注意，咱们前面说的每个block产生一个map任务，其实这是不严谨的，其实严谨一点来说的话应该是一个split产生一个map任务。</span><br><span class="line">  那这里的block和split之间有什么关系吗？ 我们来分析一下</span><br><span class="line">block块是文件的物理切分，在磁盘上是真实存在的。是对文件的真正切分而split是逻辑划分，不是对文件真正的切分，默认情况下我们可以认为一个split的大小和一个block的大小是一样的，所以实际上是一个split会产生一个map task</span><br><span class="line">  这里面的map Task就是咱们前面说的map任务，看后面有一个reduce Task，reduce会把结果数据输出到hdfs上，有几个reduce任务就会产生几个文件，这里有三个reduce任务，就产生了3个文件，咱们前面分析的案例中只有一个reduce任务做全局汇总</span><br><span class="line">  注意看map的输入输出 reduce的输入输出</span><br><span class="line">map的输入是k1,v1 输出是k2,v2</span><br><span class="line">reduce的输入是k2,v2 输出是k3,v3 都是键值对的形式。</span><br><span class="line">  在这注意一下，为什么在这是1,2,3呢？ 这个主要是为了区分数据，方便理解，没有其它含义，这是我们人为定义的</span><br></pre></td></tr></table></figure>

<h3 id="MapReduce之Map阶段-六步"><a href="#MapReduce之Map阶段-六步" class="headerlink" title="MapReduce之Map阶段(六步)"></a>MapReduce之Map阶段(六步)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  mapreduce主要分为两大步骤 map和reduce，map和reduce在代码层面对应的就是两个类，map对应的是mapper类，reduce对应的是reducer类，下面我们就来根据一个案例具体分析一下这两个步骤</span><br><span class="line">假设我们有一个文件，文件里面有两行内容</span><br><span class="line">第一行是hello you</span><br><span class="line">第二行是hello me</span><br><span class="line">我们想统计文件中每个单词出现的总次数</span><br><span class="line"></span><br><span class="line">首先是map阶段</span><br><span class="line">第一步：框架会把输入文件(夹)划分为很多InputSplit，这里的inputsplit就是前面我们所说的split【对文件进行逻辑划分产生的】，默认情况下，每个HDFS的Block对应一个InputSplit。再通过RecordReader类，把每个InputSplit解析成一个一个的&lt;k1,v1&gt;。默认情况下，每一行数据，都会被解析成一个&lt;k1,v1&gt;</span><br><span class="line">这里的k1是指每一行的起始偏移量，v1代表的是那一行内容，</span><br><span class="line">所以，针对文件中的数据，经过map处理之后的结果是这样的</span><br><span class="line">&lt;0，hello you&gt;</span><br><span class="line">&lt;10，hello me&gt;</span><br><span class="line">注意：map第一次执行会产生&lt;0，hello you&gt;，第二次执行会产生&lt;10，hello me&gt;，并不是执行一次就获取到这两行结果了，因为每次只会读取一行数据，我在这里只是把这两行执行的最终结果都列出来了</span><br><span class="line"></span><br><span class="line">第二步：框架调用Mapper类中的map(…)函数，map函数的输入是&lt;k1,v1&gt;，输出是&lt;k2,v2&gt;。一个InputSplit对应一个map task。程序员需要自己覆盖Mapper类中的map函数，实现具体的业务逻辑。</span><br><span class="line">因为我们需要统计文件中每个单词出现的总次数，所以需要先把每一行内容中的单词切开，然后记录出现次数为1,这个逻辑就需要我们在map函数中实现了</span><br><span class="line">那针对&lt;0，hello you&gt;执行这个逻辑之后的结果就是</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">针对&lt;10，hello me&gt;执行这个逻辑之后的结果是</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line"></span><br><span class="line">第三步：框架对map函数输出的&lt;k2,v2&gt;进行分区。不同分区中的&lt;k2,v2&gt;由不同的reduce task处理，默认只有1个分区，所以所有的数据都在一个分区，最后只会产生一个reduce task。</span><br><span class="line">经过这个步骤之后，数据没什么变化，如果有多个分区的话，需要把这些数据根据分区规则分开，在这里默认只有1个分区。</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">咱们在这所说的单词计数，其实就是把每个单词出现的次数进行汇总即可，需要进行全局的汇总，不需要进行分区，所以一个redeuce任务就可以搞定，如果你的业务逻辑比较复杂，需要进行分区，那么就会产生多个reduce任务了，那么这个时候，map任务输出的数据到底给哪个reduce使用？这个就需要划分一下，要不然就乱套了。</span><br><span class="line">假设有两个reduce，map的输出到底给哪个reduce，如何分配，这是一个问题。</span><br><span class="line">这个问题，由分区来完成。map输出的那些数据到底给哪个reduce使用，这个就是分区干的事了。</span><br><span class="line"></span><br><span class="line">第四步：框架对每个分区中的数据，都会按照k2进行排序、分组。分组指的是相同k2的v2分成一个组。</span><br><span class="line">先按照k2排序</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">然后按照k2进行分组，把相同k2的v2分成一个组</span><br><span class="line">&lt;hello,&#123;1,1&#125;&gt;</span><br><span class="line">&lt;me,&#123;1&#125;&gt;</span><br><span class="line">&lt;you,&#123;1&#125;&gt;</span><br><span class="line"></span><br><span class="line">第五步：在map阶段，框架可以选择执行Combiner过程</span><br><span class="line">Combiner可以翻译为规约，规约是什么意思呢？ 在刚才的例子中，咱们最终是要在reduce端计算单词 出现的总次数的，所以其实是可以在map端提前执行reduce的计算逻辑，先对在map端对单词出现的次 数进行局部求和操作，这样就可以减少map端到reduce端数据传输的大小，这就是规约的好处，当然了，并不是所有场景都可以使用规约，针对求平均值之类的操作就不能使用规约了，否则最终计算的结果就不准确了。</span><br><span class="line">Combiner一个可选步骤，默认这个步骤是不执行的。</span><br><span class="line"></span><br><span class="line">第六步：框架会把map task输出的&lt;k2,v2&gt;写入到linux 的磁盘文件中</span><br><span class="line">&lt;hello,&#123;1,1&#125;&gt;</span><br><span class="line">&lt;me,&#123;1&#125;&gt;</span><br><span class="line">&lt;you,&#123;1&#125;&gt;</span><br><span class="line">至此，整个map阶段执行结束</span><br><span class="line">最后注意一点：</span><br><span class="line">MapReduce程序是由map和reduce这两个阶段组成的，但是reduce阶段不是必须的，也就是说有的mapreduce任务只有map阶段，为什么会有这种任务呢？</span><br><span class="line">是这样的，咱们前面说过，其实reduce主要是做最终聚合的，如果我们这个需求是不需要聚合操作，直接对数据做过滤处理就行了，那也就意味着数据经过map阶段处理完就结束了，所以如果reduce阶段不存在的话，map的结果是可以直接保存到HDFS中的</span><br><span class="line">注意，如果没有reduce阶段，其实map阶段只需要执行到第二步就可以，第二步执行完成以后，结果就可以直接输出到HDFS了。</span><br><span class="line">针对我们这个单词计数的需求是存在reduce阶段的，所以我们继续往下面分析。</span><br></pre></td></tr></table></figure>

<h3 id="MapReduce之Reduce阶段-十步"><a href="#MapReduce之Reduce阶段-十步" class="headerlink" title="MapReduce之Reduce阶段(十步)"></a>MapReduce之Reduce阶段(十步)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：框架对多个map任务的输出，按照不同的分区，通过网络copy到不同的reduce节点。这个过程称作shuffle</span><br><span class="line">针对我们这个需求，只有一个分区，所以把数据拷贝到reduce端之后还是老样子</span><br><span class="line">&lt;hello,&#123;1,1&#125;&gt;</span><br><span class="line">&lt;me,&#123;1&#125;&gt;</span><br><span class="line">&lt;you,&#123;1&#125;&gt;</span><br><span class="line">第二步：框架对reduce端接收的相同分区的&lt;k2,v2&gt;数据进行合并、排序、分组。</span><br><span class="line">reduce端接收到的是多个map的输出，对多个map任务中相同分区的数据进行合并 排序 分组</span><br><span class="line">注意，之前在map中已经做了排序 分组，这边也做这些操作 重复吗？</span><br><span class="line">不重复，因为map端是局部的操作 reduce端是全局的操作</span><br><span class="line">之前是每个map任务内进行排序，是有序的，但是多个map任务之间就是无序的了。</span><br><span class="line">不过针对我们这个需求只有一个map任务一个分区，所以最终的结果还是老样子</span><br><span class="line">&lt;hello,&#123;1,1&#125;&gt;</span><br><span class="line">&lt;me,&#123;1&#125;&gt;</span><br><span class="line">&lt;you,&#123;1&#125;&gt;</span><br><span class="line">第三步：框架调用Reducer类中的reduce方法，reduce方法的输入是&lt;k2,&#123;v2&#125;&gt;，输出是&lt;k3,v3&gt;。一个&lt;k2,&#123;v2&#125;&gt;调用一次reduce函数。程序员需要覆盖reduce函数，实现具体的业务逻辑。</span><br><span class="line">那我们在这里就需要在reduce函数中实现最终的聚合计算操作了，将相同k2的&#123;v2&#125;累加求和，然后再转化为k3,v3写出去，在这里最终会调用三次reduce函数</span><br><span class="line">&lt;hello,2&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">第四步：框架把reduce的输出结果保存到HDFS中。</span><br><span class="line">hello 2</span><br><span class="line">me 1</span><br><span class="line">you 1</span><br><span class="line">至此，整个reduce阶段结束。</span><br></pre></td></tr></table></figure>

<h2 id="wordcount实例简略过程"><a href="#wordcount实例简略过程" class="headerlink" title="wordcount实例简略过程"></a>wordcount实例简略过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map阶段:</span><br><span class="line">第一步:每个inputsplit，用recordreader类划分成&lt;k1,v1&gt;</span><br><span class="line">&lt;0，hello you&gt;</span><br><span class="line">&lt;10，hello me&gt;</span><br><span class="line">第二步:调用map()函数，得到&lt;k2,v2&gt;</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">第三步:分区</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">&lt;hello,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">第四步:排序分组</span><br><span class="line">&lt;hello,&#123;1,1&#125;&gt;</span><br><span class="line">&lt;you,1&gt;</span><br><span class="line">&lt;me,1&gt;</span><br><span class="line">第五步:combiner规约(可以无)</span><br><span class="line"></span><br><span class="line">reduce阶段</span><br><span class="line">第一步:</span><br><span class="line">根据分区的不同将&lt;k2,&#123;v2,v2...&#125;&gt; copy到不同的reduce task</span><br><span class="line">&lt;k2,&#123;v2,v2...&#125;&gt;</span><br><span class="line">第二步:</span><br><span class="line">对同一分区&lt;k2,&#123;v2,v2...&#125;&gt;进行合并排序分组，得&lt;k2,&#123;v2,v2...&#125;&gt;</span><br><span class="line">第三步:</span><br><span class="line">每个&lt;k2,&#123;v2,v2...&#125;&gt;调用reducer类的reduce方法，得&lt;k3,v3&gt;</span><br><span class="line">第四步:</span><br><span class="line">第四步框架把reduce的输出结果保存到HDFS中。</span><br><span class="line">hello 2</span><br><span class="line">me 1</span><br><span class="line">you 1</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
<p>:</p>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第四周 第三章 HDFS高级</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%9B%9B%E5%91%A8-%E7%AC%AC%E4%B8%89%E7%AB%A0-HDFS%E9%AB%98%E7%BA%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="大数据开发工程师-第四周-第三章-HDFS高级"><a href="#大数据开发工程师-第四周-第三章-HDFS高级" class="headerlink" title="大数据开发工程师-第四周 第三章 HDFS高级"></a>大数据开发工程师-第四周 第三章 HDFS高级</h1><h2 id="HDFS的回收站"><a href="#HDFS的回收站" class="headerlink" title="HDFS的回收站"></a>HDFS的回收站</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HDFS也有回收站。</span><br><span class="line"></span><br><span class="line">HDFS会为每一个用户创建一个回收站目录：&#x2F;user&#x2F;用户名&#x2F;.Trash&#x2F;，每一个被用户在Shell命令行删除的文件&#x2F;目录，会进入到对应的回收站目录中，在回收站中的数据都有一个生存周期，也就是当回收站中的文件&#x2F;目录在一段时间之内没有被用户恢复的话，HDFS就会自动的把这个文件&#x2F;目录彻底删除，之后，用户就永远也找不回这个文件&#x2F;目录了。</span><br><span class="line"></span><br><span class="line">默认情况下hdfs的回收站是没有开启的，需要通过一个配置来开启，在core-site.xml中添加如下配置，value的单位是分钟，1440分钟表示是一天的生存周期(为0代表不开启)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.trash.interval&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;1440&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改回收站配置，先在bigdata01上操作，然后再同步到其它两个节点，先停止集群</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# sbin&#x2F;stop-all.sh </span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# vi etc&#x2F;hadoop&#x2F;core-site.xml </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;bigdata01:9000&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;data&#x2F;hadoop_repo&lt;&#x2F;value&gt;</span><br><span class="line">   &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.trash.interval&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1440&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# scp -rq etc&#x2F;hadoop&#x2F;core-site.xml bigdata02:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;etc&#x2F;hadoop&#x2F;</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# scp -rq etc&#x2F;hadoop&#x2F;core-site.xml bigdata03:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;etc&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  回收站的文件也是可以下载到本地的。其实在这回收站只是一个具备了特殊含义的HDFS目录。</span><br><span class="line">  注意：如果删除的文件过大，超过回收站大小的话会提示删除失败 需要指定参数 -skipTrash ，指定这个参数表示删除的文件不会进回收站</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -rm -r -skipTrash &#x2F;user.txt</span><br><span class="line">Deleted &#x2F;user.txt</span><br></pre></td></tr></table></figure>

<h2 id="HDFS的安全模式"><a href="#HDFS的安全模式" class="headerlink" title="HDFS的安全模式"></a>HDFS的安全模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大家在平时操作HDFS的时候，有时候可能会遇到这个问题，特别是刚启动集群的时候去上传或者删除文件，会发现报错，提示NameNode处于safe mode。</span><br><span class="line"></span><br><span class="line">这个属于HDFS的安全模式，因为在集群每次重新启动的时候，HDFS都会检查集群中文件信息是否完整，例如副本是否缺少之类的信息，所以这个时间段内是不允许对集群有修改操作的，如果遇到了这个情况，可以稍微等一会，等HDFS自检完毕，就会自动退出安全模式。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -rm -r &#x2F;hadoop-3.2.0.tar.gz</span><br><span class="line">2020-04-09 12:00:36,646 WARN fs.TrashPolicyDefault: Can&#39;t create trash directory: hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;user&#x2F;root&#x2F;.Trash&#x2F;Current</span><br><span class="line">org.apache.hadoop.hdfs.server.namenode.SafeModeException: Cannot create directory &#x2F;user&#x2F;root&#x2F;.Trash&#x2F;Current. Name node is in safe mode.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此时访问HDFS的web ui界面，可以看到下面信息，on表示处于安全模式，off表示安全模式已结束</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H3SJcF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/08/H3SJcF.md.png" alt="H3SJcF.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">或者通过hdfs命令也可以查看当前的状态</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfsadmin -safemode get</span><br><span class="line">Safe mode is ON</span><br><span class="line"></span><br><span class="line">如果想快速离开安全模式，可以通过命令强制离开，正常情况下建议等HDFS自检完毕，自动退出</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfsadmin -safemode leave</span><br><span class="line">Safe mode is OFF</span><br><span class="line">此时，再操作HDFS中的文件就可以了。</span><br></pre></td></tr></table></figure>



<a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h2 id="实战：定时上传数据至HDFS"><a href="#实战：定时上传数据至HDFS" class="headerlink" title="实战：定时上传数据至HDFS"></a>实战：定时上传数据至HDFS</h2><p><code>需求分析： 在实际工作中会有定时上传数据到HDFS的需求，我们有一个web项目每天都会产生日志文件，日志文件的格式为access_2020_01_01.log这种格式的，每天产生一个，我们需要每天凌晨将昨天生成的日志文件上传至HDFS上，按天分目录存储，HDFS上的目录格式为20200101</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对这个需求，我们需要开发一个shell脚本，方便定时调度执行</span><br><span class="line"></span><br><span class="line">第一步：我们需要获取到昨天日志文件的名称</span><br><span class="line">第二步：在HDFS上面使用昨天的日期创建目录</span><br><span class="line">第三步：将昨天的日志文件上传到刚创建的HDFS目录中</span><br><span class="line">第四步：要考虑到脚本重跑，补数据的情况</span><br><span class="line">第五步：配置crontab任务</span><br><span class="line">开始开发shell脚本，脚本内容如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 shell]# vi uploadLogData.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 获取昨天日期字符串</span><br><span class="line">yesterday&#x3D;$1</span><br><span class="line">if [ &quot;$yesterday&quot; &#x3D; &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">        yesterday&#x3D;&#96;date +%Y_%m_%d --date&#x3D;&quot;1 days ago&quot;&#96;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 拼接日志文件路径信息</span><br><span class="line">logPath&#x3D;&#x2F;data&#x2F;log&#x2F;access_$&#123;yesterday&#125;.log</span><br><span class="line"></span><br><span class="line"># 将日期字符串中的_去掉</span><br><span class="line">hdfsPath&#x3D;&#x2F;log&#x2F;$&#123;yesterday&#x2F;&#x2F;_&#x2F;&#125;</span><br><span class="line"># 在hdfs上创建目录</span><br><span class="line">hdfs dfs -mkdir -p $&#123;hdfsPath&#125;</span><br><span class="line"># 将数据上传到hdfs的指定目录中</span><br><span class="line">hdfs dfs -put  $&#123;logPath&#125; $&#123;hdfsPath&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/wangym/articles/9121622.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成测试数据，注意，文件名称中的日期根据昨天的日期命名</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# mkdir -p &#x2F;data&#x2F;log</span><br><span class="line">[root@bigdata01 shell]# cd &#x2F;data&#x2F;log</span><br><span class="line">[root@bigdata01 log]# vi access_2020_04_08.log</span><br><span class="line">log1</span><br><span class="line">log2</span><br><span class="line">log3</span><br><span class="line"></span><br><span class="line">执行脚本</span><br><span class="line">[root@bigdata01 log]# cd &#x2F;data&#x2F;shell&#x2F;</span><br><span class="line">[root@bigdata01 shell]# sh -x uploadLogData.sh </span><br><span class="line">+ yesterday&#x3D;</span><br><span class="line">+ &#39;[&#39; &#39;&#39; &#x3D; &#39;&#39; &#39;]&#39;</span><br><span class="line">++ date +%Y_%m_%d &#39;--date&#x3D;1 days ago&#39;</span><br><span class="line">+ yesterday&#x3D;2020_04_08</span><br><span class="line">+ logPath&#x3D;&#x2F;data&#x2F;log&#x2F;access_2020_04_08.log</span><br><span class="line">+ hdfsPath&#x3D;&#x2F;log&#x2F;20200408</span><br><span class="line">+ hdfs dfs -mkdir -p &#x2F;log&#x2F;20200408</span><br><span class="line">+ hdfs dfs -put &#x2F;data&#x2F;log&#x2F;access_2020_04_08.log &#x2F;log&#x2F;20200408</span><br><span class="line">[root@bigdata01 shell]# hdfs dfs -ls &#x2F;log&#x2F;20200408</span><br><span class="line">Found 1 items</span><br><span class="line">-rw-r--r--   2 root supergroup         15 2020-04-09 16:05 &#x2F;log&#x2F;20200408&#x2F;access_2020_04_08.log</span><br><span class="line">注</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：如果想要指定日期上传数据，可以通过在脚本后面传递参数实现</span><br><span class="line"></span><br><span class="line">先创建一个日期的测试数据</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# cd &#x2F;data&#x2F;log&#x2F;</span><br><span class="line">[root@bigdata01 log]# cp access_2020_04_08.log  access_2020_01_01.log</span><br><span class="line">执行脚本</span><br><span class="line">[root@bigdata01 log]# cd &#x2F;data&#x2F;shell&#x2F;</span><br><span class="line">[root@bigdata01 shell]# sh -x uploadLogData.sh 2020_01_01</span><br></pre></td></tr></table></figure>

<h2 id="HDFS的高可用和高扩展"><a href="#HDFS的高可用和高扩展" class="headerlink" title="HDFS的高可用和高扩展"></a>HDFS的高可用和高扩展</h2><h3 id="HDFS高可用"><a href="#HDFS高可用" class="headerlink" title="HDFS高可用"></a>HDFS高可用</h3><p><a href="https://imgtu.com/i/HGqIfO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HGqIfO.md.png" alt="HGqIfO.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对目前这个一主两从的集群</span><br><span class="line"></span><br><span class="line">我们前面分析了NameNode负责接收用户的操作请求，所有的读写请求都会经过它，如果它挂了怎么办？</span><br><span class="line"></span><br><span class="line">这个时候集群是不是就无法正常提供服务了？是的，那现在我们这个集群就太不稳定了，因为NameNode只有一个，是存在单点故障的，咱们在现实生活中，例如，县长，是有正的和副的，这样就是为了解决当正县长遇到出差的时候，副县长可以顶上去。</span><br><span class="line"></span><br><span class="line">所以在HDFS的设计中，NameNode也是可以支持多个的，一个主的 多个备用的，，当主的挂掉了，备用的可以顶上去，这样就可以解决NameNode节点宕机导致的单点故障问题了，也就实现了HDFS的高可用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们首先来看一下HDFS的高可用，也可以称之为HA(High Available)</span><br><span class="line"></span><br><span class="line">HDFS的HA，指的是在一个集群中存在多个NameNode，分别运行在独立的物理节点上。在任何时间点，只有一个NameNode是处于Active状态，其它的是处于Standby状态。 Active NameNode（简写为Active NN）负责所有的客户端的操作，而Standby NameNode（简写为Standby NN）用来同步Active NameNode的状态信息，以提供快速的故障恢复能力。</span><br><span class="line"></span><br><span class="line">为了保证Active NN与Standby NN节点状态同步，即元数据保持一致。除了DataNode需要向这些NameNode发送block位置信息外，还构建了一组独立的守护进程”JournalNodes”（简写为JN）,用来同步Edits信息。当Active NN执行任何有关命名空间的修改，它需要持久化到一半以上的JNs上。而Standby NN负责观察JNs的变化，读取从Active NN发送过来的Edits信息，并更新自己内部的命名空间。一旦Active NN遇到错误，Standby NN需要保证从JNs中读出了全部的Edits，然后切换成Active状态，如果有多个Standby NN，还会涉及到选主的操作，选择一个切换为Active 状态。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要注意一点，为了保证Active NN与Standby NN节点状态同步，即元数据保持一致</span><br><span class="line">这里的元数据包含两块，一个是静态的，一个是动态的</span><br><span class="line">静态的是fsimage和edits，其实fsimage是由edits文件合并生成的，所以只需要保证edits文件内容的一致性。这个就是需要保证多个NameNode中edits文件内容的事务性同步。这块的工作是由JournalNodes集群进行同步的</span><br><span class="line">动态数据是指block和DataNode节点的信息，这个如何保证呢？ 当DataNode启动的时候，上报数据信息的时候需要向每个NameNode都上报一份。 这样就可以保证多个NameNode的元数据信息都一样了，当一个NameNode down掉以后，立刻从Standby NN中选择一个进行接管，没有影响，因为每个NameNode 的元数据时刻都是同步的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意:使用HA的时候，不能启动SecondaryNameNode，会出错。 之前是SecondaryNameNode负责合并edits到fsimage文件 那么现在这个工作被standby NN负责了。</span><br><span class="line">NameNode 切换可以自动切换，也可以手工切换，如果想要实现自动切换，需要使用到zookeeper集群。</span><br><span class="line">使用zookeeper集群自动切换的原理是这样的</span><br><span class="line">当多个NameNode 启动的时候会向zookeeper中注册一个临时节点，当NameNode挂掉的时候，这个临时节点也就消失了，这属于zookeeper的特性，这个时候，zookeeper就会有一个watcher监视器监视到，就知道这个节点down掉了，然后会选择一个节点转为Active，把down掉的节点转为Standby。</span><br></pre></td></tr></table></figure>



<h3 id="HDFS高扩展"><a href="#HDFS高扩展" class="headerlink" title="HDFS高扩展"></a>HDFS高扩展</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有一个问题是，前面我们说了NameNode节点的内存是有限的，只能存储有限的文件个数，那使用一个主NameNode，多个备用的NameNode能解决这个问题吗？</span><br><span class="line"></span><br><span class="line">不能！</span><br><span class="line"></span><br><span class="line">一个主NameNode，多个备用的NameNode的方案只能解决NameNode的单点故障问题，无法解决单个NameNode内存不够用的问题，那怎么办呢？不用担心，官方提供了Federation机制，可以翻译为联邦，它可以解决单节点内存不够用的情况，具体实现思路我们稍后分析，这个就是HDFS的高扩展</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HDFS Federation可以解决单一命名空间存在的问题，使用多个NameNode，每个NameNode负责一个命令空间</span><br><span class="line"></span><br><span class="line">这种设计可提供以下特性：</span><br><span class="line">1：HDFS集群扩展性。多个NameNode分管一部分目录，使得一个集群可以扩展到更多节点，不再因内存的限制制约文件存储数目。</span><br><span class="line">2：性能更高效。多个NameNode管理不同的数据，且同时对外提供服务，将为用户提供更高的读写吞吐率。</span><br><span class="line">3：良好的隔离性。用户可根据需要将不同业务数据交由不同NameNode管理，这样不同业务之间影响很小。</span><br></pre></td></tr></table></figure>

<h3 id="HA-Federation"><a href="#HA-Federation" class="headerlink" title="HA+Federation"></a>HA+Federation</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果真用到了Federation，一般也会和前面我们讲的HA结合起来使用，来看这个图</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HGXkF0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/09/HGXkF0.md.png" alt="HGXkF0.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面用到了4个NameNode和6个DataNode</span><br><span class="line"></span><br><span class="line">NN-1、NN-2、NN-3、NN-4</span><br><span class="line">DN-1、DN-2、DN-3、DN-4、DN-5、DN-6、</span><br><span class="line">  其中NN-1、和NN-3配置了HA，提供了一个命令空间，&#x2F;share，其实可理解为一个顶级目录</span><br><span class="line">  NN-2和NN-4配置了HA，提供了一个命名空间，&#x2F;user</span><br><span class="line">  这样后期我们存储数据的时候，就可以根据数据的业务类型来区分是存储到share目录下还是user目录下，此时HDFS的存储能力就是&#x2F;share和&#x2F;user两个命名空间的总和了。</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第四周 第二章NameNode进阶 </title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%9B%9B%E5%91%A8-%E7%AC%AC%E4%BA%8C%E7%AB%A0%20NameNode%E8%BF%9B%E9%98%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="大数据开发工程师-第四周-第二章NameNode进阶"><a href="#大数据开发工程师-第四周-第二章NameNode进阶" class="headerlink" title="大数据开发工程师-第四周 第二章NameNode进阶"></a>大数据开发工程师-第四周 第二章NameNode进阶</h1><h2 id="SecondaryNameNode介绍"><a href="#SecondaryNameNode介绍" class="headerlink" title="SecondaryNameNode介绍"></a>SecondaryNameNode介绍</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">刚才在分析edits日志文件的时候我们已经针对SecondaryNameNode做了介绍，在这里再做一个总结，以示重视。</span><br><span class="line">SecondaryNameNode主要负责定期的把edits文件中的内容合并到fsimage中</span><br><span class="line">这个合并操作称为checkpoint，在合并的时候会对edits中的内容进行转换，生成新的内容保存到fsimage文件中。</span><br><span class="line">注意：在NameNode的HA架构中没有SecondaryNameNode进程，文件合并操作会由standby NameNode负责实现(如有多个namenode时)</span><br><span class="line">所以在Hadoop集群中，SecondaryNameNode进程并不是必须的。</span><br></pre></td></tr></table></figure>

<h2 id="DataNode介绍"><a href="#DataNode介绍" class="headerlink" title="DataNode介绍"></a>DataNode介绍</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  DataNode是提供真实文件数据的存储服务</span><br><span class="line">  针对datanode主要掌握两个概念，一个是block，一个是replication</span><br><span class="line">首先是block</span><br><span class="line">  HDFS会按照固定的大小，顺序对文件进行划分并编号，划分好的每一个块称一个Block，HDFS默认Block大小是 128MB</span><br><span class="line">  Blokc块是HDFS读写数据的基本单位，不管你的文件是文本文件 还是视频 或者音频文件，针对hdfs而言 都是字节。</span><br><span class="line">  我们之前上传的一个user.txt文件，他的block信息可以在fsimage文件中看到，也可以在hdfs webui上面看到, 里面有block的id信息,并且也会显示这个数据在哪个节点上面</span><br></pre></td></tr></table></figure>

<h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">datanode中数据的具体存储位置是由dfs.datanode.data.dir来控制的，通过查询hdfs-default.xml可以知道，具体的位置在这里</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;file:&#x2F;&#x2F;$&#123;hadoop.tmp.dir&#125;&#x2F;dfs&#x2F;data&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们连接到bigdata02这个节点上去看一下   &#x2F;&#x2F;注意！！！</span><br><span class="line"></span><br><span class="line">[root@bigdata02 ~]# cd &#x2F;data&#x2F;hadoop_repo&#x2F;dfs&#x2F;data&#x2F;</span><br><span class="line">[root@bigdata02 data]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 3 root root 72 Apr  7 22:21 current</span><br><span class="line">-rw-r--r--. 1 root root 14 Apr  8 20:30 in_use.lock</span><br><span class="line">然后进入current目录，继续一路往下走</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H166OA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/08/H166OA.png" alt="H166OA.png"></a></p>
<p><a href="https://imgtu.com/i/H1cWu9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/08/H1cWu9.md.png" alt="H1cWu9.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面就有很多的block块了，</span><br><span class="line">注意: 这里面的.meta文件也是做校验用的</span><br><span class="line"></span><br><span class="line">根据前面看到的blockid信息到这对应的找到文件，可以直接查看，发现文件内容就是我们之前上传上去的内容。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：这个block中的内容可能只是文件的一部分，如果你的文件较大的话，就会分为多个block存储，默认 hadoop3中一个block的大小为128M。根据字节进行截取，截取到128M就是一个block。如果文件大小没有默认的block块大，那最终就只有一个block。</span><br><span class="line">HDFS中，如果一个文件小于一个数据块的大小，那么并不会占用整个数据块的存储空间</span><br><span class="line">注意；这个block块是hdfs产生的，如果我们直接把文件上传到这个block文件所在的目录，这个时候hdfs是不识别的，没有用的</span><br></pre></td></tr></table></figure>

<h3 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面看一下副本，副本表示数据有多少个备份</span><br><span class="line"></span><br><span class="line">我们现在的集群有两个从节点，所以最多可以有2个备份，这个是在hdfs-site.xml中进行配置的dfs.replication(在hdfs-default.xml里也有(默认为3)，根据网页bigdata01:9870查看，java代码(读取的配置为hdfs-default.xml)上传replcication为3，shell上传为2)</span><br><span class="line"></span><br><span class="line">默认这个参数的配置是3。表示会有3个副本。(但目前自己的部署只有两个从节点，就算replication&#x3D;3,实际也只有2个)</span><br><span class="line"></span><br><span class="line">副本只有一个作用就是保证数据安全。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H1bYOx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/08/H1bYOx.md.png" alt="H1bYOx.md.png"></a></p>
<h2 id="NameNode总结"><a href="#NameNode总结" class="headerlink" title="NameNode总结"></a>NameNode总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：block块存放在哪些datanode上，只有datanode自己知道，当集群启动的时候，datanode会扫描自己节点上面的所有block块信息，然后把节点和这个节点上的所有block块信息告诉给namenode。这个关系是每次重启集群都会动态加载的【这个其实就是集群为什么数据越多，启动越慢的原因】</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咱们之前说的fsimage(edits)文件中保存的有文件和block块之间的信息。</span><br><span class="line"></span><br><span class="line">这里说的是block块和节点之间的关系，这两块关联在一起之后，就可以根据文件找到对应的block块，再根据block块找到对应的datanode节点，这样就真正找到了数据。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以说 其实namenode中不仅维护了文件和block块的信息 还维护了block块和所在的datanode节点的信息。</span><br><span class="line">可以理解为namenode维护了两份关系：</span><br><span class="line">第一份关系：file 与block list的关系，对应的关系信息存储在fsimage和edits文件中,当NameNode启动的时候会把文件中的元数据信息加载到内存中</span><br><span class="line">第二份关系：datanode与block的关系，对应的关系主要在集群启动的时候保存在内存中,当DataNode启动时会把当前节点上的Block信息和节点信息上报给NameNode</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，刚才我们说了NameNode启动的时候会把文件中的元数据信息加载到内存中，然后每一个文件的元数据信息会占用150字节的内存空间，这个是恒定的，和文件大小没有关系，咱们前面在介绍HDFS的时候说过，HDFS不适合存储小文件，其实主要原因就在这里，不管是大文件还是小文件，一个文件的元数据信息在NameNode中都会占用150字节，NameNode节点的内存是有限的，所以它的存储能力也是有限的，如果我们存储了一堆都是几KB的小文件，最后发现NameNode的内存占满了，确实存储了很多文件，但是文件的总体大小却很小，这样就失去了HDFS存在的价值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后，在datanode的数据目录下面的current目录中也有一个VERSION文件</span><br><span class="line">这个VERSION和namenode的VERSION文件是有一些相似之处的，我们来具体对比一下两个文件的内容。</span><br><span class="line">namenode的VERSION文件</span><br><span class="line"></span><br><span class="line">root@bigdata01 current]# cat VERSION </span><br><span class="line">#Wed Apr 08 20:30:00 CST 2020</span><br><span class="line">namespaceID&#x3D;498554338</span><br><span class="line">clusterID&#x3D;CID-cc0792dd-a861-4a3f-9151-b0695e4c7e70</span><br><span class="line">cTime&#x3D;1586268855170</span><br><span class="line">storageType&#x3D;NAME_NODE</span><br><span class="line">blockpoolID&#x3D;BP-1517789416-192.168.182.100-1586268855170</span><br><span class="line">layoutVersion&#x3D;-65</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">datanode的VERSION文件</span><br><span class="line"></span><br><span class="line">[root@bigdata02 current]# cat VERSION </span><br><span class="line">#Wed Apr 08 20:30:04 CST 2020</span><br><span class="line">storageID&#x3D;DS-0e86cd27-4961-4526-bacb-3b692a90b1b0</span><br><span class="line">clusterID&#x3D;CID-cc0792dd-a861-4a3f-9151-b0695e4c7e70</span><br><span class="line">cTime&#x3D;0</span><br><span class="line">datanodeUuid&#x3D;0b09f3d7-442d-4e28-b3cc-2edb0991bae3</span><br><span class="line">storageType&#x3D;DATA_NODE</span><br><span class="line">layoutVersion&#x3D;-57</span><br><span class="line"></span><br><span class="line">我们前面说了namenode不要随便格式化，因为格式化了以后VERSION里面的clusterID会变，但是datanode的VERSION中的clusterID并没有变，所以就对应不上了。</span><br><span class="line">咱们之前说过如果确实要重新格式化的话需要把&#x2F;data&#x2F;hadoop_repo数据目录下的内容都清空，全部都重新生成是可以的。</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第四周 第一章 初识NameNode</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E5%9B%9B%E5%91%A8%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%88%9D%E8%AF%86NameNode.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h4 id="NameNode介绍"><a href="#NameNode介绍" class="headerlink" title="NameNode介绍"></a>NameNode介绍</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  首先是NameNode，NameNode是整个文件系统的管理节点</span><br><span class="line">它主要维护着整个文件系统的文件目录树，文件&#x2F;目录的信息 和 每个文件对应的数据块列表，并且还负责接收用户的操作请求</span><br><span class="line"></span><br><span class="line">  目录树：表示目录之间的层级关系，就是我们在hdfs上执行ls命令可以看到的那个目录结构信息。</span><br><span class="line">  文件&#x2F;目录的信息：表示文件&#x2F;目录的的一些基本信息，所有者 属组 修改时间 文件大小等信息</span><br><span class="line">  每个文件对应的数据块列表：如果一个文件太大，那么在集群中存储的时候会对文件进行切割，这个时候就类似于会给文件分成一块一块的，存储到不同机器上面。所以HDFS还要记录一下一个文件到底被分了多少块，每一块都在什么地方存储着</span><br><span class="line">  接收用户的操作请求：其实我们在命令行使用hdfs操作的时候，是需要先和namenode通信 才能开始去操作数据的。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HQPVwn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/07/HQPVwn.md.png" alt="HQPVwn.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这些文件所在的路径是由hdfs-default.xml的dfs.namenode.name.dir属性控制的</span><br><span class="line">hdfs-default.xml文件在哪呢？</span><br><span class="line"></span><br><span class="line">它在hadoop-3.2.0\share\hadoop\hdfs\hadoop-hdfs-3.2.0.jar中，这个文件中包含了HDFS相关的所有默认参数，咱们在配置集群的时候会修改一个hdfs-site.xml文件，hdfs-site.xml文件属于hdfs-default.xml的一个扩展，它可以覆盖掉hdfs-default.xml中同名的参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们来看一下这个文件中的dfs.namenode.name.dir属性</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;file:&#x2F;&#x2F;$&#123;hadoop.tmp.dir&#125;&#x2F;dfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;Determines where on the local filesystem the DFS name node</span><br><span class="line">      should store the name table(fsimage).  If this is a comma-delimited list</span><br><span class="line">      of directories then the name table is replicated in all of the</span><br><span class="line">      directories, for redundancy. &lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">这个属性的值是由hadoop.tmp.dir属性控制的，这个属性的值默认在core-default.xml文件中。大家还有没有印象，我们在修改core-site.xml的时候设置的有hadoop.tmp.dir属性的值，值是&#x2F;data&#x2F;hadoop_repo，所以说core-site.xml中的hadoop.tmp.dir属性会覆盖掉core-default.xml中的值</span><br><span class="line"></span><br><span class="line">最终dfs.namenode.name.dir属性的值就是：&#x2F;data&#x2F;hadoop_repo&#x2F;dfs&#x2F;name</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入到&#x2F;data&#x2F;hadoop_repo&#x2F;dfs&#x2F;name目录下</span><br><span class="line"></span><br><span class="line">发现这个下面会有一个current 目录，表示当前的意思，还有一个in_use.lock 这个只是一个普通文件，但是它其实有特殊的含义，你看他的文件名后缀值lock 表示是锁的意思，文件名是in_use 表示这个文件现在正在使用，不允许你再启动namenode。</span><br><span class="line"></span><br><span class="line">当我们启动namonde的时候 会判断这个目录下是否有in_use.lock 这个相当于一把锁，如果没有的话，才可以启动成功，启动成功之后就会加一把锁， 停止的时候会把这个锁去掉</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HQZeu8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/07/HQZeu8.md.png" alt="HQZeu8.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">current里面有edits文件 和fsimage文件</span><br><span class="line"></span><br><span class="line">fsimage文件有两个文件名相同的，有一个后缀是md5 md5是一种加密算法，这个其实主要是为了做md5校验的，为了保证文件传输的过程中不出问题，相同内容的md5是一样的，所以后期如果我把这个fsimage和对应的fsimage.md5发给你 然后你根据md5对fsimage的内容进行加密，获取一个值 和fsimage.md5中的内容进行比较，如果一样，说明你接收到的文件就是完整的。</span><br><span class="line"></span><br><span class="line">我们在网站下载一些软件的时候 也会有一些md5文件，方便验证下载的文件是否完整。</span><br><span class="line"></span><br><span class="line">在这里可以把fsimage 拆开 fs 是文件系统 filesystem image是镜像</span><br><span class="line">说明是文件系统镜像，就是给文件照了一个像，把文件的当前信息记录下来</span><br><span class="line">我们可以看一下这个文件，这个文件需要使用特殊的命令进行查看</span><br></pre></td></tr></table></figure>

<h5 id="fsimage文件"><a href="#fsimage文件" class="headerlink" title="fsimage文件"></a>fsimage文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i 输入文件 -o 输出文件</span><br><span class="line"></span><br><span class="line">[root@bigdata01 current]# hdfs oiv -p XML -i fsimage_0000000000000000056 -o fsimage56.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>16393<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">type</span>&gt;</span>FILE<span class="tag">&lt;/<span class="name">type</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>LICENSE.txt<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">replication</span>&gt;</span>2<span class="tag">&lt;/<span class="name">replication</span>&gt;</span><span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1586332513657<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span><span class="tag">&lt;<span class="name">atime</span>&gt;</span>1586332513485<span class="tag">&lt;/<span class="name">atime</span>&gt;</span><span class="tag">&lt;<span class="name">preferredBlockSize</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">preferredBlockSize</span>&gt;</span><span class="tag">&lt;<span class="name">permission</span>&gt;</span>root:supergroup:0644<span class="tag">&lt;/<span class="name">permission</span>&gt;</span><span class="tag">&lt;<span class="name">blocks</span>&gt;</span><span class="tag">&lt;<span class="name">block</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>1073741827<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">genstamp</span>&gt;</span>1003<span class="tag">&lt;/<span class="name">genstamp</span>&gt;</span><span class="tag">&lt;<span class="name">numBytes</span>&gt;</span>150569<span class="tag">&lt;/<span class="name">numBytes</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blocks</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">storagePolicyId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">storagePolicyId</span>&gt;</span><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>16394<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">type</span>&gt;</span>FILE<span class="tag">&lt;/<span class="name">type</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>NOTICE.txt<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">replication</span>&gt;</span>2<span class="tag">&lt;/<span class="name">replication</span>&gt;</span><span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1586332522962<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span><span class="tag">&lt;<span class="name">atime</span>&gt;</span>1586332522814<span class="tag">&lt;/<span class="name">atime</span>&gt;</span><span class="tag">&lt;<span class="name">preferredBlockSize</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">preferredBlockSize</span>&gt;</span><span class="tag">&lt;<span class="name">permission</span>&gt;</span>root:supergroup:0644<span class="tag">&lt;/<span class="name">permission</span>&gt;</span><span class="tag">&lt;<span class="name">blocks</span>&gt;</span><span class="tag">&lt;<span class="name">block</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>1073741828<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">genstamp</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">genstamp</span>&gt;</span><span class="tag">&lt;<span class="name">numBytes</span>&gt;</span>22125<span class="tag">&lt;/<span class="name">numBytes</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blocks</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">storagePolicyId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">storagePolicyId</span>&gt;</span><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>16395<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">type</span>&gt;</span>FILE<span class="tag">&lt;/<span class="name">type</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>README.txt<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">replication</span>&gt;</span>2<span class="tag">&lt;/<span class="name">replication</span>&gt;</span><span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1586332531932<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span><span class="tag">&lt;<span class="name">atime</span>&gt;</span>1586332531689<span class="tag">&lt;/<span class="name">atime</span>&gt;</span><span class="tag">&lt;<span class="name">preferredBlockSize</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">preferredBlockSize</span>&gt;</span><span class="tag">&lt;<span class="name">permission</span>&gt;</span>root:supergroup:0644<span class="tag">&lt;/<span class="name">permission</span>&gt;</span><span class="tag">&lt;<span class="name">blocks</span>&gt;</span><span class="tag">&lt;<span class="name">block</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>1073741829<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">genstamp</span>&gt;</span>1005<span class="tag">&lt;/<span class="name">genstamp</span>&gt;</span><span class="tag">&lt;<span class="name">numBytes</span>&gt;</span>1361<span class="tag">&lt;/<span class="name">numBytes</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blocks</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">storagePolicyId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">storagePolicyId</span>&gt;</span><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">INodeSection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">INodeReferenceSection</span>&gt;</span><span class="tag">&lt;/<span class="name">INodeReferenceSection</span>&gt;</span><span class="tag">&lt;<span class="name">SnapshotSection</span>&gt;</span><span class="tag">&lt;<span class="name">snapshotCounter</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snapshotCounter</span>&gt;</span><span class="tag">&lt;<span class="name">numSnapshots</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numSnapshots</span>&gt;</span><span class="tag">&lt;/<span class="name">SnapshotSection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">INodeDirectorySection</span>&gt;</span><span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;<span class="name">parent</span>&gt;</span>16385<span class="tag">&lt;/<span class="name">parent</span>&gt;</span><span class="tag">&lt;<span class="name">child</span>&gt;</span>16393<span class="tag">&lt;/<span class="name">child</span>&gt;</span><span class="tag">&lt;<span class="name">child</span>&gt;</span>16394<span class="tag">&lt;/<span class="name">child</span>&gt;</span><span class="tag">&lt;<span class="name">child</span>&gt;</span>16395<span class="tag">&lt;/<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">INodeDirectorySection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FileUnderConstructionSection</span>&gt;</span><span class="tag">&lt;/<span class="name">FileUnderConstructionSection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SecretManagerSection</span>&gt;</span><span class="tag">&lt;<span class="name">currentId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">currentId</span>&gt;</span><span class="tag">&lt;<span class="name">tokenSequenceNumber</span>&gt;</span>0<span class="tag">&lt;/<span class="name">tokenSequenceNumber</span>&gt;</span><span class="tag">&lt;<span class="name">numDelegationKeys</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numDelegationKeys</span>&gt;</span><span class="tag">&lt;<span class="name">numTokens</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numTokens</span>&gt;</span><span class="tag">&lt;/<span class="name">SecretManagerSection</span>&gt;</span><span class="tag">&lt;<span class="name">CacheManagerSection</span>&gt;</span><span class="tag">&lt;<span class="name">nextDirectiveId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">nextDirectiveId</span>&gt;</span><span class="tag">&lt;<span class="name">numDirectives</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numDirectives</span>&gt;</span><span class="tag">&lt;<span class="name">numPools</span>&gt;</span>0<span class="tag">&lt;/<span class="name">numPools</span>&gt;</span><span class="tag">&lt;/<span class="name">CacheManagerSection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fsimage</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">里面最外层是一个fsimage标签，看里面的inode标签，</span><br><span class="line">这个inode表示是hdfs中的每一个目录或者文件信息</span><br><span class="line"></span><br><span class="line">id：唯一编号</span><br><span class="line">type：文件类型</span><br><span class="line">name：文件名称</span><br><span class="line">replication：文件的副本数量</span><br><span class="line">mtime：修改时间</span><br><span class="line">atime：访问时间</span><br><span class="line">preferredBlockSize：推荐每一个数据块的大小</span><br><span class="line">permission：权限信息</span><br><span class="line">blocks：包含多少数据块【文件被切成数据块】</span><br><span class="line">block：内部的id表示是块id，genstamp是一个唯一编号，numBytes表示当前数据块的实际大小，storagePolicyId表示是数据的存储策略</span><br><span class="line"></span><br><span class="line">这个文件中其实就维护了整个文件系统的文件目录树，文件&#x2F;目录的元信息和每个文件对应的数据块列表，所以说fsimage中存放了hdfs最核心的数据。</span><br></pre></td></tr></table></figure>

<h5 id="edits文件"><a href="#edits文件" class="headerlink" title="edits文件"></a>edits文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们来看一下edits文件，这些文件在这称之为事务文件，为什么呢？</span><br><span class="line"></span><br><span class="line">hdfs oev -i  edits_0000000000000000057-0000000000000000065  -o edits.xml</span><br><span class="line"></span><br><span class="line">  当我们上传一个文件的时候，上传一个10G的文件，假设传到9G的时候上传失败了，这个时候就需要重新传，那hdfs怎么知道这个文件失败了呢？这个是在edits文件中记录的。</span><br><span class="line">  当我们上传大文件的时候，一个大文件会分为多个block，那么edits文件中就会记录这些block的上传状态，只有当全部block都上传成功了以后，这个时候edits中才会记录这个文件上传成功了，那么我们执行hdfs dfs -ls 的时候就能查到这个文件了，</span><br><span class="line">  所以当我们在hdfs中执行ls命令的时候，其实会查询fsimage和edits中的内容</span><br><span class="line">为什么会有这两个文件呢？</span><br><span class="line">  首先,我们固化的一些文件内容是存储在fsimage文件中，当前正在上传的文件信息是存储在edits文件中。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个edits.xml中可以大致看一下，里面有很多record。每一个record代表不同的操作，</span><br><span class="line"></span><br><span class="line">例如 OP_ADD,OP_CLOSE 等等，具体挑一个实例进行分析。</span><br><span class="line">OP_ADD：执行上传操作</span><br><span class="line">OP_ALLOCATE_BLOCK_ID：申请block块id</span><br><span class="line">OP_SET_GENSTAMP_V2：设置GENSTAMP</span><br><span class="line">OP_ADD_BLOCK：添加block块</span><br><span class="line">OP_CLOSE：关闭上传操作</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_ADD<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>58<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LENGTH</span>&gt;</span>0<span class="tag">&lt;/<span class="name">LENGTH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">INODEID</span>&gt;</span>16396<span class="tag">&lt;/<span class="name">INODEID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/user.txt<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">REPLICATION</span>&gt;</span>3<span class="tag">&lt;/<span class="name">REPLICATION</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MTIME</span>&gt;</span>1586349095694<span class="tag">&lt;/<span class="name">MTIME</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ATIME</span>&gt;</span>1586349095694<span class="tag">&lt;/<span class="name">ATIME</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BLOCKSIZE</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">BLOCKSIZE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CLIENT_NAME</span>&gt;</span>DFSClient_NONMAPREDUCE_-1768454371_1<span class="tag">&lt;/<span class="name">CLIENT_NAME</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CLIENT_MACHINE</span>&gt;</span>192.168.182.1<span class="tag">&lt;/<span class="name">CLIENT_MACHINE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">OVERWRITE</span>&gt;</span>true<span class="tag">&lt;/<span class="name">OVERWRITE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">USERNAME</span>&gt;</span>yehua<span class="tag">&lt;/<span class="name">USERNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GROUPNAME</span>&gt;</span>supergroup<span class="tag">&lt;/<span class="name">GROUPNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MODE</span>&gt;</span>420<span class="tag">&lt;/<span class="name">MODE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ERASURE_CODING_POLICY_ID</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ERASURE_CODING_POLICY_ID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CLIENTID</span>&gt;</span>1722b83a-2dc7-4c46-baa9-9fa956b755cd<span class="tag">&lt;/<span class="name">RPC_CLIENTID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CALLID</span>&gt;</span>0<span class="tag">&lt;/<span class="name">RPC_CALLID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_ALLOCATE_BLOCK_ID<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>59<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BLOCK_ID</span>&gt;</span>1073741830<span class="tag">&lt;/<span class="name">BLOCK_ID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_SET_GENSTAMP_V2<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>60<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">GENSTAMPV2</span>&gt;</span>1006<span class="tag">&lt;/<span class="name">GENSTAMPV2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_ADD_BLOCK<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>61<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/user.txt<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BLOCK</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BLOCK_ID</span>&gt;</span>1073741830<span class="tag">&lt;/<span class="name">BLOCK_ID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NUM_BYTES</span>&gt;</span>0<span class="tag">&lt;/<span class="name">NUM_BYTES</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GENSTAMP</span>&gt;</span>1006<span class="tag">&lt;/<span class="name">GENSTAMP</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">BLOCK</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CLIENTID</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RPC_CALLID</span>&gt;</span>-2<span class="tag">&lt;/<span class="name">RPC_CALLID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_CLOSE<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>62<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LENGTH</span>&gt;</span>0<span class="tag">&lt;/<span class="name">LENGTH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">INODEID</span>&gt;</span>0<span class="tag">&lt;/<span class="name">INODEID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/user.txt<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">REPLICATION</span>&gt;</span>3<span class="tag">&lt;/<span class="name">REPLICATION</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MTIME</span>&gt;</span>1586349096480<span class="tag">&lt;/<span class="name">MTIME</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ATIME</span>&gt;</span>1586349095694<span class="tag">&lt;/<span class="name">ATIME</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BLOCKSIZE</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">BLOCKSIZE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CLIENT_NAME</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CLIENT_MACHINE</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">OVERWRITE</span>&gt;</span>false<span class="tag">&lt;/<span class="name">OVERWRITE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">BLOCK</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BLOCK_ID</span>&gt;</span>1073741830<span class="tag">&lt;/<span class="name">BLOCK_ID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NUM_BYTES</span>&gt;</span>17<span class="tag">&lt;/<span class="name">NUM_BYTES</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GENSTAMP</span>&gt;</span>1006<span class="tag">&lt;/<span class="name">GENSTAMP</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">BLOCK</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">USERNAME</span>&gt;</span>yehua<span class="tag">&lt;/<span class="name">USERNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GROUPNAME</span>&gt;</span>supergroup<span class="tag">&lt;/<span class="name">GROUPNAME</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MODE</span>&gt;</span>420<span class="tag">&lt;/<span class="name">MODE</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里面的每一个record都有一个事务id，txid，事务id是连续的，其实一个put操作会在edits文件中产生很多的record，对应的就是很多步骤，这些步骤对我们是屏蔽的。</span><br><span class="line">注意了，根据我们刚才的分析，我们所有对hdfs的增删改操作都会在edits文件中留下信息，那么fsimage文件中的内容是从哪来的？</span><br><span class="line">其实是这样的，edits文件会定期合并到fsimage文件中。</span><br><span class="line">有同学可能有疑问了，edits文件和fsimage文件中的内容是不一样的，这怎么能是合并出来的呢？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，这个其实是框架去做的，在合并的时候会对edits中的内容进行转换，生成新的内容，其实edits中保存的内容是不是太细了，单单一个上传操作就分为了好几步，其实上传成功之后，我们只需要保存文件具体存储的block信息就行了把，所以在合并的时候其实是对edits中的内容进行了精简。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">他们具体合并的代码我们不用太过关注，但是我们要知道是那个进程去做的这个事情，</span><br><span class="line">其实就是我们之前提到的secondarynamenode</span><br><span class="line">这个进程就是负责定期的把edits中的内容合并到fsimage中。他只做一件事，这是一个单独的进程，在实际工作中部署的时候，也需要部署到一个单独的节点上面。</span><br></pre></td></tr></table></figure>

<h5 id="seentxid文件"><a href="#seentxid文件" class="headerlink" title="seentxid文件"></a>seentxid文件</h5><p><a href="https://imgtu.com/i/HQ3eWF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/07/HQ3eWF.md.png" alt="HQ3eWF.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">current目录中还有一个seentxid文件，HDFS format之后是0，它代表的是namenode里面的edits*文件的尾数,namenode重启的时候，会按照seen_txid的数字，顺序从头跑edits_0000001~到seen_txid的数字。如果根据对应的seen_txid无法加载到对应的文件，NameNode进程将不会完成启动以保护数据一致性。</span><br></pre></td></tr></table></figure>

<h5 id="VERSION文件"><a href="#VERSION文件" class="headerlink" title="VERSION文件"></a>VERSION文件</h5><p><a href="https://imgtu.com/i/HQ3Ky9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/07/HQ3Ky9.md.png" alt="HQ3Ky9.md.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">current目录中还有一个seentxid文件，HDFS format之后是0，它代表的是namenode里面的edits*文件的尾数,namenode重启的时候，会按照seen_txid的数字，顺序从头跑edits_0000001~到seen_txid的数字。如果根据对应的seen_txid无法加载到对应的文件，NameNode进程将不会完成启动以保护数据一致性。</span><br><span class="line"></span><br><span class="line">  之前我们说过 在使用hdfs的时候只格式化一次，不要格式化多次，为什么呢？</span><br><span class="line">一会在讲datanode的时候会详细解释、</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fsimage: 元数据镜像文件，存储某一时刻NameNode内存中的元数据信息，就类似是定时做了一个快照操作。【这里的元数据信息是指文件目录树、文件&#x2F;目录的信息、每个文件对应的数据块列表】</span><br><span class="line"></span><br><span class="line">edits: 操作日志文件【事务文件】，这里面会实时记录用户的所有操作</span><br><span class="line"></span><br><span class="line">seentxid: 是存放transactionId的文件，format之后是0，它代表的是namenode里面的edits*文件的尾数,namenode重启的时候，会按照seen_txid的数字，顺序从头跑edits_0000001~到seen_txid的数字。如果根据对应的seen_txid无法加载到对应的文件，NameNode进程将不会完成启动以保护数据一致性。</span><br><span class="line"></span><br><span class="line">VERSION:保存了集群的版本信息</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>github相关</title>
    <url>/github%E7%9B%B8%E5%85%B3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="github相关"><a href="#github相关" class="headerlink" title="github相关"></a>github相关</h1><h2 id="github打不开"><a href="#github打不开" class="headerlink" title="github打不开"></a>github打不开</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前更推荐大家去使用 【dev-sidecar】，这款软件可以解决99%的GitHub打不开的情况</span><br><span class="line">软件链接：https:&#x2F;&#x2F;gitee.com&#x2F;docmirror&#x2F;dev-sidecar&#x2F;releases</span><br><span class="line">软件安装：按照他的指示一步步坐就可以了，经常逛GitHub的建议设置为开机自启</span><br></pre></td></tr></table></figure>

<p><code>有用是有用，但是有时不稳定</code></p>
<h2 id="github下载慢"><a href="#github下载慢" class="headerlink" title="github下载慢"></a>github下载慢</h2><h3 id="GitHub-文件加速"><a href="#GitHub-文件加速" class="headerlink" title="GitHub 文件加速"></a>GitHub 文件加速</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.https:&#x2F;&#x2F;gh.api.99988866.xyz&#x2F;</span><br><span class="line">2.https:&#x2F;&#x2F;ghproxy.com&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="仓库加速"><a href="#仓库加速" class="headerlink" title="仓库加速"></a>仓库加速</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.http:&#x2F;&#x2F;toolwa.com&#x2F;github&#x2F;</span><br><span class="line">2.https:&#x2F;&#x2F;github.zhlh6.cn</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/chendasheng/article/details/108373555" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/112697807" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h2 id="github仓库如何克隆"><a href="#github仓库如何克隆" class="headerlink" title="github仓库如何克隆"></a>github仓库如何克隆</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装有git shell这个软件</span><br><span class="line">2.右键进入git bash  &#x2F;&#x2F;可以用cd切换保存地址；cmd同样可以</span><br><span class="line">3.clone 仓库地址 &#x2F;&#x2F;仓库地址可以用https:&#x2F;&#x2F;github.zhlh6.cn&#x2F;生成加速链接后再使用克隆命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</span><br><span class="line"></span><br><span class="line">$ git clone git:&#x2F;&#x2F;github.com&#x2F;schacon&#x2F;grit.git</span><br><span class="line">执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</span><br><span class="line"></span><br><span class="line">如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</span><br><span class="line">$ git clone git:&#x2F;&#x2F;github.com&#x2F;schacon&#x2F;grit.git mygrit</span><br></pre></td></tr></table></figure>



<h2 id="github操作"><a href="#github操作" class="headerlink" title="github操作"></a>github操作</h2><p><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程</a></p>
<h3 id="git工作区、暂存区、版本库"><a href="#git工作区、暂存区、版本库" class="headerlink" title="git工作区、暂存区、版本库"></a>git工作区、暂存区、版本库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</span><br><span class="line"></span><br><span class="line">当执行 git rm --cached &lt;file&gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。</span><br><span class="line"></span><br><span class="line">当执行 git checkout . 或者 git checkout -- &lt;file&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区中的改动。</span><br><span class="line"></span><br><span class="line">当执行 git checkout HEAD . 或者 git checkout HEAD &lt;file&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</span><br></pre></td></tr></table></figure>

<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用当前目录作为 Git 仓库，我们只需使它初始化。</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">该命令执行完后会在当前目录生成一个 .git 目录。</span><br><span class="line"></span><br><span class="line">使用我们指定目录作为Git仓库。</span><br><span class="line"></span><br><span class="line">git init newrepo</span><br><span class="line">初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_44098452/article/details/115317258" target="_blank" rel="external nofollow noopener noreferrer">项目编写参考</a></p>
<h3 id="显示git配置"><a href="#显示git配置" class="headerlink" title="显示git配置"></a>显示git配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"></span><br><span class="line">git config -e    # 针对当前仓库 </span><br><span class="line"></span><br><span class="line">git config -e --global   # 针对系统上所有仓库</span><br></pre></td></tr></table></figure>

<h3 id="git-fetch和git-pull"><a href="#git-fetch和git-pull" class="headerlink" title="git fetch和git pull"></a>git fetch和git pull</h3><p><a href="https://www.cnblogs.com/jeremylee/p/5564776.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch 和git pull 都会把代码从远程库更新到本地，区别是git fetch不会自动merge，git pull 会自动merge</span><br></pre></td></tr></table></figure>

<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add 命令可将该文件添加到暂存区。</span><br><span class="line"></span><br><span class="line">添加一个或多个文件到暂存区：</span><br><span class="line"></span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line">添加指定目录到暂存区，包括子目录：</span><br><span class="line"></span><br><span class="line">git add [dir]</span><br><span class="line">添加当前目录下的所有文件到暂存区：</span><br><span class="line"></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 命令用于查看项目的当前状态</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line"></span><br><span class="line">此时再修改刚刚的README文件，会出现：</span><br><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.php</span><br><span class="line"></span><br><span class="line">AM 状态的意思是这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 git add . 命令将其添加到缓存中：</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">文件修改后，我们一般都需要进行 git add 操作，从而保存历史版本。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</span><br><span class="line"></span><br><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#39;初始化项目版本&#39;</span><br><span class="line">以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</span><br><span class="line"></span><br><span class="line">注： 在 Linux 系统中，commit 信息使用单引号 &#39;，Windows 系统，commit 信息使用双引号 &quot;。</span><br><span class="line"></span><br><span class="line">所以在 git bash 中 git commit -m &#39;提交说明&#39; 这样是可以的，在 Windows 命令行中就要使用双引号 git commit -m &quot;提交说明&quot;。</span><br></pre></td></tr></table></figure>

<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 命令用于查看在你上次提交之后(提交到暂存区)是否有对文件进行再次修改。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通常我们使用 -s 参数来获得简短的输出结果：</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure>

<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较文件的不同，即暂存区和工作区的差异。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示暂存区和工作区的差异:</span><br><span class="line"></span><br><span class="line">$ git diff [file]</span><br><span class="line">显示暂存区和上一次提交(commit)的差异:</span><br><span class="line"></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line">或</span><br><span class="line">$ git diff --staged [file]</span><br><span class="line">显示两次提交之间的差异:</span><br><span class="line"></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面章节我们使用 git add 命令将内容写入暂存区。</span><br><span class="line"></span><br><span class="line">git commit 命令将暂存区内容添加到本地仓库中。</span><br><span class="line"></span><br><span class="line">提交暂存区到本地仓库中:</span><br><span class="line"></span><br><span class="line">git commit -m [message]</span><br><span class="line">[message] 可以是一些备注信息。</span><br><span class="line"></span><br><span class="line">提交暂存区的指定文件到仓库区：</span><br><span class="line"></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line">-a 参数设置修改文件后不需要执行 git add 命令，直接来提交</span><br><span class="line"></span><br><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure>

<h4 id="设置提交代码时的用户"><a href="#设置提交代码时的用户" class="headerlink" title="设置提交代码时的用户"></a>设置提交代码时的用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置提交代码时的用户信息：</span><br><span class="line"></span><br><span class="line">$ git config --global user.name &quot;runoob&quot;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br><span class="line">如果去掉 --global 参数只对当前仓库有效。</span><br></pre></td></tr></table></figure>

<h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来我们就可以对 hello.php 的所有改动从暂存区内容添加到本地仓库中。</span><br><span class="line"></span><br><span class="line">以下实例，我们使用 -m 选项以在命令行中提供提交注释。</span><br><span class="line"></span><br><span class="line">$ git add hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git commit -m &#39;第一次版本提交&#39;</span><br><span class="line">[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在我们已经记录了快照。如果我们再执行 git status:</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean)</span><br><span class="line">以上输出说明我们在最近一次提交之后，没有做任何改动，是一个 &quot;working directory clean&quot;，翻译过来就是干净的工作目录。</span><br><span class="line"></span><br><span class="line">如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</span><br><span class="line"></span><br><span class="line">git commit -a</span><br><span class="line">我们先修改 hello.php 文件为以下内容：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &#39;菜鸟教程：www.runoob.com&#39;;</span><br><span class="line">echo &#39;菜鸟教程：www.runoob.com&#39;;</span><br><span class="line">?&gt;</span><br><span class="line">再执行以下命令：</span><br><span class="line"></span><br><span class="line">$ git commit -am &#39;修改 hello.php 文件&#39;</span><br><span class="line">[master 71ee2cb] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>



<h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="显示远程仓库信息"><a href="#显示远程仓库信息" class="headerlink" title="显示远程仓库信息"></a>显示远程仓库信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote show [remote]</span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">$ git remote show https:&#x2F;&#x2F;github.com&#x2F;tianqixin&#x2F;runoob-git-test</span><br></pre></td></tr></table></figure>

<h4 id="添加远程版本库"><a href="#添加远程版本库" class="headerlink" title="添加远程版本库"></a>添加远程版本库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交到 Github</span><br><span class="line">$ git remote add origin git@github.com:tianqixin&#x2F;runoob-git-test.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<h4 id="删除和修改远程仓库"><a href="#删除和修改远程仓库" class="headerlink" title="删除和修改远程仓库"></a>删除和修改远程仓库</h4><p><a href="https://blog.csdn.net/David_jiahuan/article/details/120289538" target="_blank" rel="external nofollow noopener noreferrer">优质参考链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm name  # 删除远程仓库</span><br><span class="line">git remote rename old_name new_name  # 修改仓库名</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>github</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/IDEA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="使用IDEA遇到的问题"><a href="#使用IDEA遇到的问题" class="headerlink" title="使用IDEA遇到的问题"></a>使用IDEA遇到的问题</h2><h3 id="idea解决项目右键没有【maven】菜单选项"><a href="#idea解决项目右键没有【maven】菜单选项" class="headerlink" title="idea解决项目右键没有【maven】菜单选项"></a>idea解决项目右键没有【maven】菜单选项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题展示 并且在maven窗口项目为灰色 原因是因为项目忽略了maven模块。 解决方法： file-&gt;Settings-&gt;Build,Execution,Deployment–&gt;Build Tools-&gt;Maven–&gt;Ignored Files 将被勾上的项目去掉就可了..</span><br></pre></td></tr></table></figure>

<h3 id="使用maven依赖包不能导入"><a href="#使用maven依赖包不能导入" class="headerlink" title="使用maven依赖包不能导入"></a>使用maven依赖包不能导入</h3><p><a href="https://www.bbsmax.com/A/o75N3oaPdW/" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h3 id="SLF4J-Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder“-SLF4J-Defaulting-to-no-operation"><a href="#SLF4J-Failed-to-load-class-“org-slf4j-impl-StaticLoggerBinder“-SLF4J-Defaulting-to-no-operation" class="headerlink" title="SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder“. SLF4J: Defaulting to no-operation"></a>SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder“. SLF4J: Defaulting to no-operation</h3><p><a href="https://blog.csdn.net/weixin_46389691/article/details/121772383" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h3 id="本地主机java操作hadoop报错Permission-denied-user-Ty-access-WRITE-inode-”-“-root-supergroup-drwxr"><a href="#本地主机java操作hadoop报错Permission-denied-user-Ty-access-WRITE-inode-”-“-root-supergroup-drwxr" class="headerlink" title="本地主机java操作hadoop报错Permission denied: user=Ty, access=WRITE, inode=”/“:root:supergroup:drwxr-"></a>本地主机java操作hadoop报错Permission denied: user=Ty, access=WRITE, inode=”/“:root:supergroup:drwxr-</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">法一：权限问题，修改后即可正常创建</span><br><span class="line">hadoop fs -chmod 777 &#x2F;上传的目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">法二：修改hdfs-site.xml，追加dfs.permissions配置。如果是true，则打开权限检查系统；如果是false，权限检查就是关闭的。</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.permissions&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">同步到另外两个节点中</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# scp -rq etc&#x2F;hadoop&#x2F;hdfs-site.xml  bigdata02:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;etc&#x2F;hadoop&#x2F;</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# scp -rq etc&#x2F;hadoop&#x2F;hdfs-site.xml  bigdata03:&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;etc&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">法三：在系统的环境变量或java JVM变量里面添加HADOOP_USER_NAME，这个值具体等于多少看自己的情况，以后会运行HADOOP上的Linux的用户名。（修改完重启eclipse，不然可能不生效）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">法四：</span><br><span class="line">将当前系统的帐号修改为linux上有权限的账户名</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">法五：因为本地的用户名跟远程的不一样，需要手动指定用户</span><br><span class="line">System.setProperty(&quot;HADOOP_USER_NAME&quot;, &quot;hadoop&quot;);</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/xiaoshunzi111/article/details/52062640" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<h3 id="log4j-WARN-No-appenders-could-be-found-for-logger"><a href="#log4j-WARN-No-appenders-could-be-found-for-logger" class="headerlink" title="log4j:WARN No appenders could be found for logger"></a>log4j:WARN No appenders could be found for logger</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.这个只是 警告，不是错误。你只是没有配置 log4j.properties文件。不用管他。我的服务器启动就有这个，一直没管它，运行了半年了，也没事儿</span><br><span class="line">2.</span><br></pre></td></tr></table></figure>



<h3 id="java-io-FileNotFoundException-HADOOP-HOME-and-hadoop-home-dir"><a href="#java-io-FileNotFoundException-HADOOP-HOME-and-hadoop-home-dir" class="headerlink" title="java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir"></a>java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir</h3><p><a href="https://www.freesion.com/article/5997398294/" target="_blank" rel="external nofollow noopener noreferrer">解决方法</a></p>
<h3 id="mvn-clean-package-、mvn-clean-install、mvn-clean-deploy的区别与联系"><a href="#mvn-clean-package-、mvn-clean-install、mvn-clean-deploy的区别与联系" class="headerlink" title="mvn clean package 、mvn clean install、mvn clean deploy的区别与联系"></a>mvn clean package 、mvn clean install、mvn clean deploy的区别与联系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)等７个阶段。</span><br><span class="line">mvn clean install依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install等8个阶段。</span><br><span class="line">mvn clean deploy依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。</span><br><span class="line"></span><br><span class="line">分析解释如下：</span><br><span class="line">package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</span><br><span class="line">install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</span><br><span class="line">deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</span><br></pre></td></tr></table></figure>

<h3 id="IDEA-Cannot-Resolve-Symbol-问题的解决方法汇总"><a href="#IDEA-Cannot-Resolve-Symbol-问题的解决方法汇总" class="headerlink" title="IDEA Cannot Resolve Symbol 问题的解决方法汇总"></a>IDEA Cannot Resolve Symbol 问题的解决方法汇总</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、检查项目的pom文件，是否必要的依赖都写清楚了；</span><br><span class="line">2、是否使用自己的私有库</span><br><span class="line">3、依赖添加正确后，检查本地的类有没有下载下来，一般是找“C:\Users\Administrator\.m2\repository”这个路径下有没有相应的jar包，如果没有的话，就在编译器中打开”Maven Projects “标签，先进行clean一下，在执行install</span><br><span class="line">4、File - Project Structure - Project SDK，看看SDK有没有选，重选一个本地的自己安装的jdk。</span><br><span class="line">5、编译器中的maven有没有设置成功，File - Settings - 搜索maven，Maven home directory，设置为自己安装的maven路径</span><br><span class="line">6、如果还是报错找不到，试试右侧Maven Projects - Report ，刷新样式的按钮，清除下编译器的缓存就好了</span><br></pre></td></tr></table></figure>



<h2 id="IDEA的快捷使用方法"><a href="#IDEA的快捷使用方法" class="headerlink" title="IDEA的快捷使用方法"></a>IDEA的快捷使用方法</h2><h3 id="快速类属性创建set和get方法"><a href="#快速类属性创建set和get方法" class="headerlink" title="快速类属性创建set和get方法"></a>快速类属性创建set和get方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.选中属性</span><br><span class="line">2.右键--&gt;generate</span><br></pre></td></tr></table></figure>

<h3 id="快速覆写被继承类的方法"><a href="#快速覆写被继承类的方法" class="headerlink" title="快速覆写被继承类的方法"></a>快速覆写被继承类的方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右键--&gt;generate</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>IDEA</category>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据开发工程师-第三周</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%89%E5%91%A8%20Hadoop%E4%B9%8BHDFS%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="大数据开发工程师-第三周"><a href="#大数据开发工程师-第三周" class="headerlink" title="大数据开发工程师-第三周"></a>大数据开发工程师-第三周</h1><h2 id="第1章-HDFS介绍"><a href="#第1章-HDFS介绍" class="headerlink" title="第1章 HDFS介绍"></a>第1章 HDFS介绍</h2><p><code>假设让我们来设计一个分布式的文件系统，我们该如何设计呢？</code></p>
<p><a href="https://imgtu.com/i/Hm1DTe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/05/Hm1DTe.png" alt="Hm1DTe.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这种设计架构会存在一个问题，假设同时过来很多人都需要租房子，那么一个二房东是忙不过来的，就会造成阻塞。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/Hm3i11" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/05/Hm3i11.png" alt="Hm3i11.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在这种设计是，我们去找一个中介公司，这里的主节点就可以理解为一个中介公司</span><br><span class="line">这里的从节点就可以理解为是房源，中介公司会在每块房源都安排一个工作人员，当我们找房子的时候，先联系中介公司，中介公司会告诉我们哪里有房子，并且把对应工作人员的信息告诉我们，我们就可以直接去找对应的工作人员去租房子。这样对于中介公司而言，就没什么压力了。</span><br><span class="line">中介公司只负责管理房源和工作人员信息，具体干活的是工作人员。</span><br><span class="line">这样就算同时过来很多人，中介公司也是可以扛得住的，因为具体看房租房的流程是我们直接和工作人员联系的，不会造成阻塞。</span><br></pre></td></tr></table></figure>

<h3 id="HDFS设计思想"><a href="#HDFS设计思想" class="headerlink" title="HDFS设计思想"></a>HDFS设计思想</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  用户请求查看数据时候会请求主节点，主节点上面会维护所有数据的存储信息，</span><br><span class="line">主节点会把对应数据所在的节点信息返回给用户，</span><br><span class="line">  然后用户根据数据所在的节点信息去对应的节点去读取数据，这样压力就不会全部在主节点上面。</span><br></pre></td></tr></table></figure>

<h3 id="HDFS-Hadoop-Distributed-File-System"><a href="#HDFS-Hadoop-Distributed-File-System" class="headerlink" title="HDFS(Hadoop Distributed File System)"></a>HDFS(Hadoop Distributed File System)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop的 分布式文件系统</span><br><span class="line">  它是一种允许文件通过网络在多台主机上分享的文件系统，可以让多台机器上的多个用户分享文件和存储空间</span><br><span class="line">其实分布式文件管理系统有很多，HDFS只是其中一种实现而已</span><br><span class="line">  HDFS是一种适合大文件存储的分布式文件系统，不适合小文件存储，什么叫小文件，例如，几KB，几M的文件都可以认为是小文件</span><br></pre></td></tr></table></figure>

<h3 id="HDFS的Shell介绍"><a href="#HDFS的Shell介绍" class="headerlink" title="HDFS的Shell介绍"></a>HDFS的Shell介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  针对HDFS，我们可以在shell命令行下进行操作，就类似于我们操作linux中的文件系统一样，但是具体命令的操作格式是有一些区别的</span><br><span class="line">格式如下：</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/Hm8WdS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/05/Hm8WdS.png" alt="Hm8WdS.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  使用hadoop bin目录的hdfs命令，后面指定dfs，表示是操作分布式文件系统的，这些属于固定格式。</span><br><span class="line">  如果在PATH中配置了hadoop的bin目录，那么这里可以直接使用hdfs就可以了</span><br><span class="line">  这里的xxx是一个占位符，具体我们想对hdfs做什么操作，就可以在这里指定对应的命令了</span><br><span class="line">大多数hdfs 的命令和对应的Linux命令类似</span><br><span class="line"></span><br><span class="line">  HDFS的schema是hdfs，authority是集群中namenode所在节点的ip和对应的端口号，把ip换成主机名也是一样的，path是我们要操作的文件路径信息</span><br><span class="line">  其实后面这一长串内容就是core-site.xml配置文件中fs.defaultFS属性的值，这个代表的是HDFS的地址。</span><br></pre></td></tr></table></figure>

<h2 id="第2章-HDFS基础操作"><a href="#第2章-HDFS基础操作" class="headerlink" title="第2章 HDFS基础操作"></a>第2章 HDFS基础操作</h2><h3 id="HDFS的常见Shell操作"><a href="#HDFS的常见Shell操作" class="headerlink" title="HDFS的常见Shell操作"></a>HDFS的常见Shell操作</h3><h4 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.-ls [-R]：查询指定路径信息</span><br><span class="line"></span><br><span class="line">首先看第一个ls命令</span><br><span class="line">查看hdfs根目录下的内容，什么都不显示，因为默认情况下hdfs中什么都没有</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -ls hdfs:&#x2F;&#x2F;bigdata01:9000&#x2F;</span><br><span class="line">其实后面hdfs的url这一串内容在使用时默认是可以省略的，因为hdfs在执行的时候会根据HDOOP_HOME自动识别配置文件中的fs.defaultFS属性</span><br><span class="line">所以这样简写也是可以的</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -ls &#x2F;</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]#</span><br><span class="line"></span><br><span class="line">想要递归显示所有目录的信息，可以在ls后面添加-R参数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.-put：从本地上传文件</span><br><span class="line">直接上传到hdfs的根目录即可</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -put README.txt  &#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.-cat：查看HDFS文件内容</span><br><span class="line"></span><br><span class="line">4.-get：下载文件到本地</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -get &#x2F;README.txt .</span><br><span class="line">注意：这样执行报错了，提示文件已存在，我这条命令的意思是要把HDFS中的README.txt下载当前目录中，但是当前目录中已经有这个文件了，要么换到其它目录，要么给文件重命名</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -get &#x2F;README.txt README.txt.bak</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.-mkdir [-p]：创建文件夹</span><br><span class="line">如果要递归创建多级目录，还需要再指定-p参数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.-rm [-r]：删除文件&#x2F;文件夹</span><br><span class="line">删除目录，注意，删除目录需要指定-r参数</span><br><span class="line">如果是多级目录，可以递归删除吗？可以</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -rm -r &#x2F;abc</span><br><span class="line">Deleted &#x2F;abc</span><br></pre></td></tr></table></figure>

<h3 id="HDFS案例实操"><a href="#HDFS案例实操" class="headerlink" title="HDFS案例实操"></a>HDFS案例实操</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需求：统计HDFS中文件的个数和每个文件的大小</span><br><span class="line">1：统计根目录下文件的个数</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -ls &#x2F; |grep &#x2F;| wc -l    </span><br><span class="line">注：wc -l 是打印换行符</span><br><span class="line">2：统计根目录下每个文件的大小，最终把文件名称和大小打印出来</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# hdfs dfs -ls &#x2F; |grep &#x2F; |  awk &#39;&#123;print $8,$5&#125;&#39;</span><br><span class="line">&#x2F;LICENSE.txt 150569</span><br><span class="line">&#x2F;NOTICE.txt 22125</span><br><span class="line">&#x2F;README.txt 1361</span><br><span class="line"></span><br><span class="line">[root@bigdata01 my_shell]# hdfs dfs -ls &#x2F; | grep ^- | awk &#39;&#123;print $8,$5&#125;&#39;</span><br><span class="line">&#x2F;for1.sh 48</span><br><span class="line">&#x2F;hello.txt 59</span><br><span class="line">&#x2F;if1.sh 108</span><br></pre></td></tr></table></figure>



<h2 id="第3章-java操作HDFS"><a href="#第3章-java操作HDFS" class="headerlink" title="第3章 java操作HDFS"></a>第3章 java操作HDFS</h2><h3 id="Java代码操作HDFS"><a href="#Java代码操作HDFS" class="headerlink" title="Java代码操作HDFS"></a>Java代码操作HDFS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面我们学习了在shell命令行下操作hdfs，shell中操作hdfs是比较常见的操作，但是在工作中也会遇到一些需求是需要通过代码操作hdfs的，下面我们就来看一下如何使用java代码操作hdfs</span><br><span class="line">在具体操作之前需要先明确一下开发环境，代码编辑器使用idea，当然了eclipse也可以</span><br><span class="line">在创建项目的时候我们会创建maven项目，使用maven来管理依赖，是比较方便的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.imooc.hdfs;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line">import org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line">import org.apache.hadoop.fs.FileSystem;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Java代码操作HDFS</span><br><span class="line"> * 文件操作：上传文件、下载文件、删除文件</span><br><span class="line"> * Created by xuwei</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HdfsOp &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        System.setProperty(&quot;HADOOP_USER_NAME&quot;, &quot;root&quot;);</span><br><span class="line">        &#x2F;&#x2F;创建一个配置对象</span><br><span class="line">        Configuration conf &#x3D; new Configuration();</span><br><span class="line">        &#x2F;&#x2F;指定HDFS的地址</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs:&#x2F;&#x2F;bigdata01:9000&quot;);</span><br><span class="line">        &#x2F;&#x2F;获取操作HDFS的对象</span><br><span class="line">        FileSystem fileSystem &#x3D; FileSystem.get(conf);</span><br><span class="line">        &#x2F;&#x2F;上传文件</span><br><span class="line">        &#x2F;&#x2F;put(fileSystem);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;下载文件</span><br><span class="line">        &#x2F;&#x2F;get(fileSystem);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;删除操作</span><br><span class="line">        delete(fileSystem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 文件和文件夹都可以删除，true代表递归删除多层文件夹</span><br><span class="line">     * @param fileSystem</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void delete(FileSystem fileSystem) throws IOException &#123;</span><br><span class="line">        boolean flag &#x3D; fileSystem.delete(new Path(&quot;&#x2F;user&quot;));</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            System.out.println(&quot;删除成功！&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;删除失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void get(FileSystem fileSystem) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;HDFS输入流</span><br><span class="line">        FSDataInputStream fis &#x3D; fileSystem.open(new Path(&quot;&#x2F;user2.txt&quot;));</span><br><span class="line">        &#x2F;&#x2F;本地输出流</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(&quot;D:\\user3.txt&quot;);</span><br><span class="line">        &#x2F;&#x2F;下载文件</span><br><span class="line">        IOUtils.copyBytes(fis,fos,1024,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void put(FileSystem fileSystem) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;获取HDFS文件系统的输出流</span><br><span class="line">        FSDataOutputStream fos &#x3D; fileSystem.create(new Path(&quot;&#x2F;user2.txt&quot;));</span><br><span class="line">        &#x2F;&#x2F;获取本地文件的输入流</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(&quot;D:\\user.txt&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;上传文件：通过工具类把输入流拷贝到输出流里面，实现本地文件上传到HDFS</span><br><span class="line">        IOUtils.copyBytes(fis,fos,1024,true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="HDFS体系结构"><a href="#HDFS体系结构" class="headerlink" title="HDFS体系结构"></a>HDFS体系结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  前面我们掌握了HDFS的基本使用，下面我们来详细分析一下HDFS深层次的内容</span><br><span class="line">HDFS支持主从结构，主节点称为 NameNode ，是因为主节点上运行的NameNode进程，NameNode支持多个，目前我们的集群中只配置了一个</span><br><span class="line">  从节点称为 DataNode ，是因为从节点上面运行的有DataNode进程，DataNode支持多个，目前我们的集群中有两个</span><br><span class="line">  HDFS中还包含一个 SecondaryNameNode 进程，这个进程从字面意思上看像是第二个NameNode的意思，其实不是，一会我们会详细分析。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HMxWSH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/07/HMxWSH.png" alt="HMxWSH.png"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第5章 Linux总结与走进大数据</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8-%E7%AC%AC5%E7%AB%A0-Linux%E6%80%BB%E7%BB%93%E4%B8%8E%E8%B5%B0%E8%BF%9B%E5%A4%A7%E6%95%B0%E6%8D%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第一周-第5章-走进大数据"><a href="#第一周-第5章-走进大数据" class="headerlink" title="第一周 第5章 走进大数据"></a>第一周 第5章 走进大数据</h1><h2 id="什么是大数据？"><a href="#什么是大数据？" class="headerlink" title="什么是大数据？"></a>什么是大数据？</h2><h3 id="百度地图实时路况"><a href="#百度地图实时路况" class="headerlink" title="百度地图实时路况"></a>百度地图实时路况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">百度地图软件实时上传每个人的位置信息，根据这些大量数据进行路况分析</span><br><span class="line">精准路况信息要求：大量数据，相当快的计算速度</span><br></pre></td></tr></table></figure>

<h3 id="今日头条为你推荐"><a href="#今日头条为你推荐" class="headerlink" title="今日头条为你推荐"></a>今日头条为你推荐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户画像-&gt;用户划分-&gt;根据同类型用户喜好相互推荐</span><br></pre></td></tr></table></figure>

<h3 id="买披萨的故事"><a href="#买披萨的故事" class="headerlink" title="买披萨的故事"></a>买披萨的故事</h3><h2 id="大数据的产生背景"><a href="#大数据的产生背景" class="headerlink" title="大数据的产生背景"></a>大数据的产生背景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">信息技术的进步</span><br><span class="line">云计算技术的兴起：可以将分散的数据集中在数据中心，使处理和分析海量数据成为可能；云计算技术为海量数据存储和访问提供了必要的空间和途径</span><br><span class="line">数据资源化的趋势</span><br></pre></td></tr></table></figure>

<h2 id="大数据的4v特征"><a href="#大数据的4v特征" class="headerlink" title="大数据的4v特征"></a>大数据的4v特征</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">volume(量大)：存储量大，计算  量大   #包括：采集，存储和计算的数据量大</span><br><span class="line">variety(多样):来源多，格式多   #数据的种类和来源多样化 结构化，半结构化，非结构化数据</span><br><span class="line">velocity(快速):数据增长速度快，处理速度要求快</span><br><span class="line">value:价值密度低，和数据总量的大小成反比</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H9XGwD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/30/H9XGwD.png" alt="H9XGwD.png"></a></p>
<h2 id="大数据的行业应用"><a href="#大数据的行业应用" class="headerlink" title="大数据的行业应用"></a>大数据的行业应用</h2><p><a href="https://imgtu.com/i/H9XgYj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/30/H9XgYj.png" alt="H9XgYj.png"></a></p>
<h3 id="天猫双十一实时动态大屏"><a href="#天猫双十一实时动态大屏" class="headerlink" title="天猫双十一实时动态大屏"></a>天猫双十一实时动态大屏</h3><h3 id="公共出行与运营车辆调度"><a href="#公共出行与运营车辆调度" class="headerlink" title="公共出行与运营车辆调度"></a>公共出行与运营车辆调度</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>学习 从零开始学大数据和大数据开发工程师 linux上创建的文件</title>
    <url>/%E5%AD%A6%E4%B9%A0-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-linux%E4%B8%8A%E5%88%9B%E5%BB%BA%E7%9A%84%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="linux上创建的文件或文件夹"><a href="#linux上创建的文件或文件夹" class="headerlink" title="linux上创建的文件或文件夹"></a>linux上创建的文件或文件夹</h1><h2 id="大数据开发工程师"><a href="#大数据开发工程师" class="headerlink" title="大数据开发工程师"></a>大数据开发工程师</h2><h3 id="home-ttyong-my-shell"><a href="#home-ttyong-my-shell" class="headerlink" title="/home/ttyong/my_shell"></a>/home/ttyong/my_shell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该文件夹包含自己创建的shell脚本</span><br></pre></td></tr></table></figure>



<h3 id="data-soft"><a href="#data-soft" class="headerlink" title="/data/soft"></a>/data/soft</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装的软件</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据开发工程师</category>
      </categories>
  </entry>
  <entry>
    <title>linux相关文件信息</title>
    <url>/linux%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="linux相关文件信息"><a href="#linux相关文件信息" class="headerlink" title="linux相关文件信息"></a>linux相关文件信息</h1><h2 id="etc-crontab"><a href="#etc-crontab" class="headerlink" title="/etc/crontab"></a>/etc/crontab</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab定时器的配置文件</span><br></pre></td></tr></table></figure>

<h2 id="var-log-cron"><a href="#var-log-cron" class="headerlink" title="/var/log/cron"></a>/var/log/cron</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于使用crontab执行的脚本且脚本无输出信息时(因为有输出信息，可以使用重定向标准信息或标准错误信息到某文件)，可以通过这个文件查看crontab是否正常执行</span><br></pre></td></tr></table></figure>

<h2 id="etc-profile"><a href="#etc-profile" class="headerlink" title="/etc/profile"></a>/etc/profile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置信息及环境变量</span><br><span class="line"></span><br><span class="line">刷新 source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h2 id="etc-sudoers"><a href="#etc-sudoers" class="headerlink" title="/etc/sudoers"></a>/etc/sudoers</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo权限相关，给非root用户赋权配置过这个文件</span><br></pre></td></tr></table></figure>

<h2 id="etc-sysconfig-network-scripts-ifcfg-ens33"><a href="#etc-sysconfig-network-scripts-ifcfg-ens33" class="headerlink" title="/etc/sysconfig/network-scripts/ifcfg-ens33"></a>/etc/sysconfig/network-scripts/ifcfg-ens33</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网络配置相关文件</span><br></pre></td></tr></table></figure>

<h2 id="etc-hostname"><a href="#etc-hostname" class="headerlink" title="/etc/hostname"></a>/etc/hostname</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置永久主机名需要这个文件</span><br></pre></td></tr></table></figure>

<h2 id="etc-hosts"><a href="#etc-hosts" class="headerlink" title="/etc/hosts"></a>/etc/hosts</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip和主机名的映射</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第5章 Linux总结与走进大数据</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%BA%8C%E5%91%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%B7%E6%BA%90%E4%B9%8B%E5%88%9D%E8%AF%86Hadoop.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第二周-大数据起源之初识Hadoop"><a href="#第二周-大数据起源之初识Hadoop" class="headerlink" title="第二周 大数据起源之初识Hadoop"></a>第二周 大数据起源之初识Hadoop</h1><h2 id="第一章初识Hadoop"><a href="#第一章初识Hadoop" class="headerlink" title="第一章初识Hadoop"></a>第一章初识Hadoop</h2><h3 id="什么是Hadoop"><a href="#什么是Hadoop" class="headerlink" title="什么是Hadoop"></a>什么是Hadoop</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop是一个适合海量数据的分布式存储和分布式计算的框架。</span><br></pre></td></tr></table></figure>



<h3 id="Hadoop发行版介绍"><a href="#Hadoop发行版介绍" class="headerlink" title="Hadoop发行版介绍"></a>Hadoop发行版介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我们挑几个重点的分析一下：</span><br><span class="line">  首先是官方原生版本：Apache Hadoop</span><br><span class="line">  那接着往下面看 Cloudera Hadoop(CDH)</span><br><span class="line">  还有一个比较常用的是HortonWorks(HDP)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我们会学习原生的Hadoop，只要掌握了原生Hadoop使用，后期想要操作其它发行版的Hadoop也是很简单的，其它发行版都是会兼容原生Hadoop的，这一点大家不同担心。 原生Hadoop的缺点是没有技术支持，遇到问题需要自己解决，或者通过官网的社区提问，但是回复一般比较慢，也不保证能解决问题， 还有一点就是原生Hadoop搭建集群的时候比较麻烦，需要修改很多配置文件，如果集群机器过多的话，针对运维人员的压力是比较大的，这块等后面我们自己在搭建集群的时候大家就可以感受到了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最终的建议：建议在实际工作中搭建大数据平台时选择 CDH或者HDP，方便运维管理，要不然，管理上千台机器的原生Hadoop集群，运维同学是会哭的。</span><br></pre></td></tr></table></figure>

<h3 id="Hadoop版本演变历史"><a href="#Hadoop版本演变历史" class="headerlink" title="Hadoop版本演变历史"></a>Hadoop版本演变历史</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop1.x：HDFS+MapReduce</span><br><span class="line">hadoop2.x：HDFS+YARN+MapReduce</span><br><span class="line">hadoop3.x：HDFS+YARN+MapReduce</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/H9TvdA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/30/H9TvdA.png" alt="H9TvdA.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Hadoop1.x中，分布式计算和资源管理都是MapReduce负责的，从Hadoop2.x开始把资源管理单独拆分出来了，拆分出来的好处就是，YARN变成了一个公共的资源管理平台，在它上面不仅仅可以跑MapReduce程序，还可以跑很多其他的程序，只要你的程序满足YARN的规则即可</span><br><span class="line"></span><br><span class="line">Hadoop的这一步棋走的是最好的，这样自己摇身一变就变成了一个公共的平台，由于它起步早，占有的市场份额也多，后期其它新兴起的计算框架一般都会支持在YARN上面运行，这样Hadoop就保证了自己的地位。</span><br><span class="line">咱们后面要学的Spark、Flink等计算框架都是支持在YARN上面执行的，并且在实际工作中也都是在YARN上面执行。</span><br></pre></td></tr></table></figure>

<h3 id="Hadoop3-x的细节优化"><a href="#Hadoop3-x的细节优化" class="headerlink" title="Hadoop3.x的细节优化"></a>Hadoop3.x的细节优化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里我挑几个常见点说一下：</span><br><span class="line"></span><br><span class="line">1：最低Java版本要求从Java7变为Java8</span><br><span class="line"></span><br><span class="line">2：在Hadoop 3中，HDFS支持纠删码，纠删码是一种比副本存储更节省存储空间的数据持久化存储方法，使用这种方法，相同容错的情况下可以比之前节省一半的存储空间</span><br><span class="line">详细介绍在这里： https:&#x2F;&#x2F;hadoop.apache.org&#x2F;docs&#x2F;r3.0.0&#x2F;hadoop-project-dist&#x2F;hadoop-hdfs&#x2F;HDFSErasureCoding.html</span><br><span class="line"></span><br><span class="line">3： Hadoop 2中的HDFS最多支持两个NameNode，一主一备，而Hadoop 3中的HDFS支持多个NameNode，一主多备</span><br><span class="line">详细介绍在这里： https:&#x2F;&#x2F;hadoop.apache.org&#x2F;docs&#x2F;r3.0.0&#x2F;hadoop-project-dist&#x2F;hadoop-hdfs&#x2F;HDFSErasureCoding.html</span><br><span class="line"></span><br><span class="line">4：MapReduce任务级本地优化，MapReduce添加了映射输出收集器的本地化实现的支持。对于密集型的洗牌操作（shuffle-intensive）jobs，可以带来30%的性能提升，</span><br><span class="line">详细介绍在这里： https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;browse&#x2F;MAPREDUCE-2841</span><br><span class="line"></span><br><span class="line">5：修改了多重服务的默认端口，Hadoop2中一些服务的端口和Hadoop3中是不一样的</span><br><span class="line">总结： Hadoop 3和2之间的主要区别在于新版本提供了更好的优化和可用性</span><br></pre></td></tr></table></figure>

<h3 id="Hadoop三大核心组件介绍"><a href="#Hadoop三大核心组件介绍" class="headerlink" title="Hadoop三大核心组件介绍"></a>Hadoop三大核心组件介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HDFS负责海量数据的分布式存储</span><br><span class="line">MapReduce是一个计算模型，负责海量数据的分布式计算</span><br><span class="line">YARN主要负责集群资源的管理和调度</span><br></pre></td></tr></table></figure>

<h2 id="第二章Hadoop的两种安装方式"><a href="#第二章Hadoop的两种安装方式" class="headerlink" title="第二章Hadoop的两种安装方式"></a>第二章Hadoop的两种安装方式</h2><h3 id="伪分布集群安装"><a href="#伪分布集群安装" class="headerlink" title="伪分布集群安装"></a>伪分布集群安装</h3><p><a href="https://imgtu.com/i/HCnzRI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/30/HCnzRI.png" alt="HCnzRI.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪分布集群部署:仅需要一台虚拟机</span><br><span class="line"> 这张图代表是一台Linux机器，也可以称为是一个节点，上面安装的有JDK环境</span><br><span class="line">最上面的是Hadoop集群会启动的进程，其中NameNode、SecondaryNameNode、DataNode是HDFS服务的进程，ResourceManager、NodeManager是YARN服务的进程，MapRedcue在这里没有进程，因为它是一个计算框架，等Hadoop集群安装好了以后MapReduce程序可以在上面执行。</span><br></pre></td></tr></table></figure>

<h4 id="配置基础环境"><a href="#配置基础环境" class="headerlink" title="配置基础环境"></a>配置基础环境</h4><h5 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br></pre></td></tr></table></figure>

<h5 id="设置临时和永久hostname"><a href="#设置临时和永久hostname" class="headerlink" title="设置临时和永久hostname"></a>设置临时和永久hostname</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname xxx</span><br><span class="line">&#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<h5 id="关闭firewalld"><a href="#关闭firewalld" class="headerlink" title="关闭firewalld"></a>关闭firewalld</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld 临时关闭</span><br><span class="line">systemctl disable firewalld  永久关闭</span><br></pre></td></tr></table></figure>

<h5 id="ssh免密码登录"><a href="#ssh免密码登录" class="headerlink" title="ssh免密码登录"></a>ssh免密码登录</h5><p><code>我们下面要讲的hadoop集群就会使用到ssh，我们在启动集群的时候只需要在一台机器上启动就行，然后hadoop会通过ssh连到其它机器，把其它机器上面对应的程序也启动起来。但是现在有一个问题，就是我们使用ssh连接其它机器的时候会发现需要输入密码，所以现在需要实现ssh免密码登录。</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  那有同学可能有疑问了，你这里说的多台机器需要配置免密码登录，但是我们现在是伪分布集群啊，只有一台机器</span><br><span class="line">注意了，不管是几台机器的集群，启动集群中程序的步骤都是一样的，都是通过ssh远程连接去操作，就算是一台机器，它也会使用ssh自己连自己，我们现在使用ssh自己连自己也是需要密码的。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HCMKVU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/30/HCMKVU.png" alt="HCMKVU.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  下面详细讲一下ssh免密码登录 ssh这种安全&#x2F;加密的shell，使用的是非对称加密，加密有两种，对称加密和非对称加密。非对称加密的解密过程是不可逆的，所以这种加密方式比较安全。</span><br><span class="line">  非对称加密会产生秘钥，秘钥分为公钥和私钥，在这里公钥是对外公开的，私钥是自己持有的。</span><br><span class="line">  那么ssh通信的这个过程是，第一台机器会把自己的公钥给到第二台机器，</span><br><span class="line">当第一台机器要给第二台机器通信的时候，第一台机器会给第二台机器发送一个随机的字符串，第二台机器会使用公钥对这个字符串加密，同时第一台机器会使用自己的私钥也对这个字符串进行加密，然后也传给第二台机器这个时候，第二台机器就有了两份加密的内容，一份是自己使用公钥加密的，一份是第一台机器使用私钥加密传过来的，公钥和私钥是通过一定的算法计算出来的，这个时候，第二台机器就会对比这两份加密之后的内容是否匹配。如果匹配，第二台机器就会认为第一台机器是可信的，就允许登录。如果不相等 就认为是非法的机器。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面就开始正式配置一下ssh免密码登录，由于我们这里要配置自己免密码登录自己，所以第一台机器和第二台机器都是同一台</span><br><span class="line"></span><br><span class="line">首先在bigdata01上执行 ssh-keygen -t rsa</span><br><span class="line">rsa表示的是一种加密算法</span><br><span class="line">注意：执行这个命令以后，需要连续按 4 次回车键回到 linux 命令行才表示这个操作执行 结束，在按回车的时候不需要输入任何内容。</span><br><span class="line"></span><br><span class="line">执行以后会在~&#x2F;.ssh目录下生产对应的公钥和秘钥文件</span><br><span class="line">[root@bigdata01 ~]# ll ~&#x2F;.ssh&#x2F;</span><br><span class="line">total 12</span><br><span class="line">-rw-------. 1 root root 1679 Apr  7 16:39 id_rsa</span><br><span class="line">-rw-r--r--. 1 root root  396 Apr  7 16:39 id_rsa.pub</span><br><span class="line">-rw-r--r--. 1 root root  203 Apr  7 16:21 known_hosts</span><br><span class="line"></span><br><span class="line">下一步是把公钥拷贝到需要免密码登录的机器(这里是自己)上面</span><br><span class="line">[root@bigdata01 ~]# cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">然后就可以通过ssh 免密码登录到bigdata01机器了</span><br><span class="line">[root@bigdata01 ~]# ssh bigdata01</span><br><span class="line">Last login: Tue Apr  7 15:05:55 2020 from 192.168.182.1</span><br><span class="line">[root@bigdata01 ~]#e</span><br></pre></td></tr></table></figure>

<h5 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h5 id="hadoop安装"><a href="#hadoop安装" class="headerlink" title="hadoop安装"></a>hadoop安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.将文件解压到创建的&#x2F;data&#x2F;soft&#x2F;下</span><br><span class="line">  hadoop目录下面有两个重要的目录，一个是bin目录，一个是sbin目录：</span><br><span class="line">bin目录，这里面有hdfs，yarn等脚本，这些脚本后期主要是为了操作hadoop集群中的hdfs和yarn组件的</span><br><span class="line">sbin目录，这里面有很多start stop开头的脚本，这些脚本是负责启动 或者停止集群中的组件的。</span><br><span class="line">2.配置环境变量</span><br><span class="line">   因为我们会用到bin目录和sbin目录下面的一些脚本，为了方便使用，我们需要配置一下环境变量。</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# vi &#x2F;etc&#x2F;profile</span><br><span class="line">.......</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0</span><br><span class="line">export PATH&#x3D;.:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$HADOOP_HOME&#x2F;bin:$PATH</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3：修改Hadoop相关配置文件</span><br><span class="line">主要修改下面这几个文件：</span><br><span class="line">hadoop-env.sh</span><br><span class="line">core-site.xml</span><br><span class="line">hdfs-site.xml</span><br><span class="line">mapred-site.xml</span><br><span class="line">yarn-site.xml </span><br><span class="line">workers</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先修改 hadoop-env.sh 文件，增加环境变量信息，添加到hadoop-env.sh 文件末尾即可。</span><br><span class="line">JAVA_HOME：指定java的安装位置</span><br><span class="line">HADOOP_LOG_DIR：hadoop的日志的存放目录</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi hadoop-env.sh</span><br><span class="line">.......</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HADOOP_LOG_DIR&#x3D;&#x2F;data&#x2F;hadoop_repo&#x2F;logs&#x2F;hadoop</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改 core-site.xml 文件</span><br><span class="line">注意 fs.defaultFS 属性中的主机名需要和你配置的主机名保持一致</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi core-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;bigdata01:9000&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;data&#x2F;hadoop_repo&lt;&#x2F;value&gt;</span><br><span class="line">   &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改hdfs-site.xml文件，把hdfs中文件副本的数量设置为1，因为现在伪分布集群只有一个节点</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi hdfs-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改mapred-site.xml，设置mapreduce使用的资源调度框架</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi mapred-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改yarn-site.xml，设置yarn上支持运行的服务和环境变量白名单</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi yarn-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.env-whitelist&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改workers，设置集群中从节点的主机名信息，在这里就一台集群，所以就填写bigdata01即可</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi workers</span><br><span class="line">bigdata01</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件到这就修改好了，但是还不能直接启动，因为Hadoop中的HDFS是一个分布式的文件系统，文件系统在使用之前是需要先格式化的，就类似我们买一块新的磁盘，在安装系统之前需要先格式化才可以使用。</span><br><span class="line"></span><br><span class="line">4：格式化HDFS</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# cd &#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# bin&#x2F;hdfs namenode -format</span><br><span class="line"></span><br><span class="line">注意：格式化操作只能执行一次，如果格式化的时候失败了，可以修改配置文件后再执行格式化，如果格式化成功了就不能再重复执行了，否则集群就会出现问题。</span><br><span class="line">如果确实需要重复执行，那么需要把&#x2F;data&#x2F;hadoop_repo目录中的内容全部删除，再执行格式化</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5：启动伪分布集群</span><br><span class="line"></span><br><span class="line">使用sbin目录下的start-all.sh脚本</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# sbin&#x2F;start-all.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行的时候发现有很多ERROR信息，提示缺少HDFS和YARN的一些用户信息。</span><br><span class="line"></span><br><span class="line">解决方案如下：</span><br><span class="line">修改sbin目录下的start-dfs.sh，stop-dfs.sh这两个脚本文件，在文件前面增加如下内容</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# cd sbin&#x2F;</span><br><span class="line">[root@bigdata01 sbin]# vi start-dfs.sh</span><br><span class="line">HDFS_DATANODE_USER&#x3D;root</span><br><span class="line">HDFS_DATANODE_SECURE_USER&#x3D;hdfs</span><br><span class="line">HDFS_NAMENODE_USER&#x3D;root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER&#x3D;root</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi stop-dfs.sh</span><br><span class="line">HDFS_DATANODE_USER&#x3D;root</span><br><span class="line">HDFS_DATANODE_SECURE_USER&#x3D;hdfs</span><br><span class="line">HDFS_NAMENODE_USER&#x3D;root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER&#x3D;root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改sbin目录下的start-yarn.sh，stop-yarn.sh这两个脚本文件，在文件前面增加如下内容</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi start-yarn.sh</span><br><span class="line">YARN_RESOURCEMANAGER_USER&#x3D;root</span><br><span class="line">HADOOP_SECURE_DN_USER&#x3D;yarn</span><br><span class="line">YARN_NODEMANAGER_USER&#x3D;root</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi stop-yarn.sh</span><br><span class="line">YARN_RESOURCEMANAGER_USER&#x3D;root</span><br><span class="line">HADOOP_SECURE_DN_USER&#x3D;yarn</span><br><span class="line">YARN_NODEMANAGER_USER&#x3D;root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再启动集群</span><br><span class="line">6：验证集群进程信息</span><br><span class="line"></span><br><span class="line">执行jps命令可以查看集群的进程信息，去掉Jps这个进程之外还需要有5个进程才说明集群是正常启动的</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# jps</span><br><span class="line">3267 NameNode</span><br><span class="line">3859 ResourceManager</span><br><span class="line">3397 DataNode</span><br><span class="line">3623 SecondaryNameNode</span><br><span class="line">3996 NodeManager</span><br><span class="line">4319 Jps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  还可以通过webui界面来验证集群服务是否正常</span><br><span class="line">HDFS webui界面：http:&#x2F;&#x2F;192.168.182.100:9870</span><br><span class="line">YARN webui界面：http:&#x2F;&#x2F;192.168.182.100:8088</span><br><span class="line">  如果想通过主机名访问，则需要修改windows机器中的hosts文件</span><br><span class="line">文件所在位置为：C:\Windows\System32\drivers\etc\HOSTS</span><br><span class="line"></span><br><span class="line">在文件中增加下面内容，这个其实就是Linux虚拟机的ip和主机名，在这里做一个映射之后，就可以在Windows机器中通过主机名访问这个Linux虚拟机了。</span><br><span class="line"></span><br><span class="line">192.168.182.100 bigdata01</span><br><span class="line">注意：如果遇到这个文件无法修改，一般是由于权限问题，在打开的时候可以选择使用管理员模式打开。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7：停止集群</span><br><span class="line"></span><br><span class="line">如果修改了集群的配置文件或者是其它原因要停止集群，可以使用下面命令</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# sbin&#x2F;stop-all.sh</span><br></pre></td></tr></table></figure>

<h3 id="分布式集群安装"><a href="#分布式集群安装" class="headerlink" title="分布式集群安装"></a>分布式集群安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪分布集群搞定了以后我们来看一下真正的分布式集群是什么样的</span><br><span class="line"></span><br><span class="line">看一下这张图，图里面表示是三个节点，左边这一个是主节点，右边的两个是从节点，hadoop集群是支持主从架构的。</span><br><span class="line"></span><br><span class="line">不同节点上面启动的进程默认是不一样的</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HmeG0s" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/05/HmeG0s.png" alt="HmeG0s.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们就根据图中的规划实现一个一主两从的hadoop集群</span><br><span class="line">环境准备：三个节点</span><br><span class="line">bigdata01 192.168.182.100</span><br><span class="line">bigdata02 192.168.182.101</span><br><span class="line">bigdata03 192.168.182.102</span><br><span class="line"></span><br><span class="line">注意：每个节点的基础环境都要先配置好，先把ip、hostname、firewalld、ssh免密码登录、JDK这些基础环境配置好</span><br><span class="line"></span><br><span class="line">目前的节点数量是不够的，按照第一周学习的内容，通过克隆的方式创建多个节点，具体克隆的步骤在这就不再赘述了。</span><br><span class="line">先把bigdata01中之前按照的hadoop删掉，删除解压的目录，修改环境变量即可。</span><br><span class="line"></span><br><span class="line">注意：我们需要把bigdata01节点中&#x2F;data目录下的hadoop_repo目录和&#x2F;data&#x2F;soft下的hadoop-3.2.0目录删掉，恢复此节点的环境，这里面记录的有之前伪分布集群的一些信息。</span><br><span class="line"></span><br><span class="line">注意：针对这三台机器的ip、hostname、firewalld、ssh免密码登录、JDK这些基础环境的配置步骤在这里就不再记录了，具体步骤参考2.1中的步骤。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这些基础环境配置好以后还没完，还有一些配置需要完善。</span><br><span class="line"></span><br><span class="line">配置&#x2F;etc&#x2F;hosts</span><br><span class="line">因为需要在主节点远程连接两个从节点，所以需要让主节点能够识别从节点的主机名，使用主机名远程访问，默认情况下只能使用ip远程访问，想要使用主机名远程访问的话需要在节点的&#x2F;etc&#x2F;hosts文件中配置对应机器的ip和主机名信息。</span><br><span class="line"></span><br><span class="line">所以在这里我们就需要在bigdata01的&#x2F;etc&#x2F;hosts文件中配置下面信息，最好把当前节点信息也配置到里面，这样这个文件中的内容就通用了，可以直接拷贝到另外两个从节点</span><br><span class="line"></span><br><span class="line">[root@bigdata01 ~]# vi &#x2F;etc&#x2F;hosts</span><br><span class="line">192.168.182.100 bigdata01</span><br><span class="line">192.168.182.101 bigdata02</span><br><span class="line">192.168.182.102 bigdata03</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">集群节点之间时间同步</span><br><span class="line">集群只要涉及到多个节点的就需要对这些节点做时间同步，如果节点之间时间不同步相差太多，会应该集群的稳定性，甚至导致集群出问题。</span><br><span class="line"></span><br><span class="line">首先在bigdata01节点上操作</span><br><span class="line"></span><br><span class="line">使用ntpdate -u ntp.sjtu.edu.cn实现时间同步，但是执行的时候提示找不到ntpdata命令</span><br><span class="line">[root@bigdata01 ~]# ntpdate -u ntp.sjtu.edu.cn</span><br><span class="line">-bash: ntpdate: command not found</span><br><span class="line">默认是没有ntpdate命令的，需要使用yum在线安装，执行命令 yum install -y ntpdate</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后手动执行ntpdate -u ntp.sjtu.edu.cn 确认是否可以正常执行</span><br><span class="line"></span><br><span class="line">[root@bigdata01 ~]# ntpdate -u ntp.sjtu.edu.cn</span><br><span class="line"> 7 Apr 21:21:01 ntpdate[5447]: step time server 185.255.55.20 offset 6.252298 sec</span><br><span class="line"> </span><br><span class="line">建议把这个同步时间的操作添加到linux的crontab定时器中，每分钟执行一次</span><br><span class="line">[root@bigdata01 ~]# vi &#x2F;etc&#x2F;crontab</span><br><span class="line">* * * * * root &#x2F;usr&#x2F;sbin&#x2F;ntpdate -u ntp.sjtu.edu.cn</span><br><span class="line">然后在bigdata02和bigdata03节点上配置时间同步</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSH免密码登录完善</span><br><span class="line">注意：针对免密码登录，目前只实现了自己免密码登录自己(前面的伪分布式配置好的)，最终需要实现主机点可以免密码登录到所有节点，所以还需要完善免密码登录操作。</span><br><span class="line"></span><br><span class="line">首先在bigdata01机器上执行下面命令，将公钥信息拷贝到两个从节点</span><br><span class="line"></span><br><span class="line">[root@bigdata01 ~]# scp ~&#x2F;.ssh&#x2F;authorized_keys bigdata02:~&#x2F;</span><br><span class="line"></span><br><span class="line">[root@bigdata01 ~]# scp ~&#x2F;.ssh&#x2F;authorized_keys bigdata03:~&#x2F;</span><br><span class="line"></span><br><span class="line">然后在bigdata02和bigdata03上执行</span><br><span class="line">bigdata02：</span><br><span class="line">[root@bigdata02 ~]# cat ~&#x2F;authorized_keys  &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">bigdata03:</span><br><span class="line">[root@bigdata03 ~]# cat ~&#x2F;authorized_keys  &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">验证一下效果，在bigdata01节点上使用ssh远程连接两个从节点，如果不需要输入密码就表示是成功的，此时主机点可以免密码登录到所有节点。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  有没有必要实现从节点之间互相免密码登录呢？</span><br><span class="line">这个就没有必要了，因为在启动集群的时候只有主节点需要远程连接其它节点。</span><br><span class="line">  OK，那到这为止，集群中三个节点的基础环境就都配置完毕了，接下来就需要在这三个节点中安装Hadoop了。</span><br><span class="line">  首先在bigdata01节点上安装。</span><br><span class="line"></span><br><span class="line">1：把hadoop-3.2.0.tar.gz安装包上传到linux机器的&#x2F;data&#x2F;soft目录下</span><br><span class="line">2：解压hadoop安装包</span><br><span class="line">3：修改hadoop相关配置文件</span><br><span class="line">进入配置文件所在目录</span><br><span class="line">[root@bigdata01 soft]# cd hadoop-3.2.0&#x2F;etc&#x2F;hadoop&#x2F;</span><br><span class="line"></span><br><span class="line">首先修改hadoop-env.sh文件，在文件末尾增加环境变量信息</span><br><span class="line">[root@bigdata01 hadoop]# vi hadoop-env.sh </span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;data&#x2F;soft&#x2F;jdk1.8</span><br><span class="line">export HADOOP_LOG_DIR&#x3D;&#x2F;data&#x2F;hadoop_repo&#x2F;logs&#x2F;hadoop</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改core-site.xml文件，注意fs.defaultFS属性中的主机名需要和主节点的主机名保持一致</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi core-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;bigdata01:9000&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;data&#x2F;hadoop_repo&lt;&#x2F;value&gt;</span><br><span class="line">   &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改hdfs-site.xml文件，把hdfs中文件副本的数量设置为2，最多为2，因为现在集群中有两个从节点，还有secondaryNamenode进程所在的节点信息</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi hdfs-site.xml </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;bigdata01:50090&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改mapred-site.xml，设置mapreduce使用的资源调度框架</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi mapred-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改yarn-site.xml，设置yarn上支持运行的服务和环境变量白名单</span><br><span class="line"></span><br><span class="line">注意，针对分布式集群在这个配置文件中还需要设置resourcemanager的hostname，否则nodemanager找不到resourcemanager节点。</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi yarn-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.env-whitelist&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;bigdata01&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改workers文件，增加所有从节点的主机名，一个一行</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# vi workers</span><br><span class="line">bigdata02</span><br><span class="line">bigdata03</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改启动脚本</span><br><span class="line"></span><br><span class="line">修改start-dfs.sh，stop-dfs.sh这两个脚本文件，在文件前面(一定要注意位置,license后面)增加如下内容</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop]# cd &#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0&#x2F;sbin</span><br><span class="line">[root@bigdata01 sbin]# vi start-dfs.sh</span><br><span class="line">HDFS_DATANODE_USER&#x3D;root</span><br><span class="line">HDFS_DATANODE_SECURE_USER&#x3D;hdfs</span><br><span class="line">HDFS_NAMENODE_USER&#x3D;root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER&#x3D;root</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi stop-dfs.sh</span><br><span class="line">HDFS_DATANODE_USER&#x3D;root</span><br><span class="line">HDFS_DATANODE_SECURE_USER&#x3D;hdfs</span><br><span class="line">HDFS_NAMENODE_USER&#x3D;root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER&#x3D;root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改start-yarn.sh，stop-yarn.sh这两个脚本文件，在文件前面(一定要注意位置,license后面)增加如下内容</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi start-yarn.sh</span><br><span class="line">YARN_RESOURCEMANAGER_USER&#x3D;root</span><br><span class="line">HADOOP_SECURE_DN_USER&#x3D;yarn</span><br><span class="line">YARN_NODEMANAGER_USER&#x3D;root</span><br><span class="line"></span><br><span class="line">[root@bigdata01 sbin]# vi stop-yarn.sh</span><br><span class="line">YARN_RESOURCEMANAGER_USER&#x3D;root</span><br><span class="line">HADOOP_SECURE_DN_USER&#x3D;yarn</span><br><span class="line">YARN_NODEMANAGER_USER&#x3D;root</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4：把bigdata01节点上将修改好配置的安装包拷贝到其他两个从节点</span><br><span class="line">[root@bigdata01 sbin]# cd &#x2F;data&#x2F;soft&#x2F;</span><br><span class="line">[root@bigdata01 soft]# scp -rq hadoop-3.2.0 bigdata02:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line">[root@bigdata01 soft]# scp -rq hadoop-3.2.0 bigdata03:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">5：在bigdata01节点上格式化HDFS(再次格式化时，一定要注意将配置的数据目录删除)</span><br><span class="line">[root@bigdata01 soft]# cd &#x2F;data&#x2F;soft&#x2F;hadoop-3.2.0</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# bin&#x2F;hdfs namenode -format</span><br><span class="line">如果在后面的日志信息中能看到这一行，则说明namenode格式化成功。</span><br><span class="line">common.Storage: Storage directory &#x2F;data&#x2F;hadoop_repo&#x2F;dfs&#x2F;name has been successfully formatted.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6：启动集群，在bigdata01节点上执行下面命令</span><br><span class="line"></span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# sbin&#x2F;start-all.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7：验证集群</span><br><span class="line">分别在3台机器上执行jps命令，进程信息如下所示：</span><br><span class="line">在bigdata01节点执行</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# jps</span><br><span class="line">6128 NameNode</span><br><span class="line">6621 ResourceManager</span><br><span class="line">6382 SecondaryNameNode</span><br><span class="line"></span><br><span class="line">在bigdata02节点执行</span><br><span class="line">[root@bigdata02 ~]# jps</span><br><span class="line">2385 NodeManager</span><br><span class="line">2276 DataNode</span><br><span class="line"></span><br><span class="line">在bigdata03节点执行</span><br><span class="line">[root@bigdata03 ~]# jps</span><br><span class="line">2326 NodeManager</span><br><span class="line">2217 DataNode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8：停止集群</span><br><span class="line">在bigdata01节点上执行停止命令</span><br><span class="line">[root@bigdata01 hadoop-3.2.0]# sbin&#x2F;stop-all.sh</span><br></pre></td></tr></table></figure>



<h3 id="Hadoop的客户端节点"><a href="#Hadoop的客户端节点" class="headerlink" title="Hadoop的客户端节点"></a>Hadoop的客户端节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  在实际工作中不建议直接连接集群中的节点来操作集群，直接把集群中的节点暴露给普通开发人员是不安全的</span><br><span class="line">  建议在业务机器上安装Hadoop，只需要保证业务机器上的Hadoop的配置和集群中的配置保持一致即可，这样就可以在业务机器上操作Hadoop集群了，此机器就称为是Hadoop的客户端节点</span><br><span class="line">Hadoop的客户端节点可能会有多个，理论上是我们想要在哪台机器上操作hadoop集群就可以把这台机器配置为hadoop集群的客户端节点。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/HmuO9x" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/02/05/HmuO9x.png" alt="HmuO9x.png"></a></p>
<p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external nofollow noopener noreferrer">hadoop官方文档</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第4章 Linux试炼之配置与shell实战</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8%20%E7%AC%AC4%E7%AB%A0%20Linux%E8%AF%95%E7%82%BC%E4%B9%8B%E9%85%8D%E7%BD%AE%E4%B8%8Eshell%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="第一周-第4章-Linux试炼之配置与shell实战"><a href="#第一周-第4章-Linux试炼之配置与shell实战" class="headerlink" title="第一周 第4章 Linux试炼之配置与shell实战"></a>第一周 第4章 Linux试炼之配置与shell实战</h1><h2 id="linux高级配置"><a href="#linux高级配置" class="headerlink" title="linux高级配置"></a>linux高级配置</h2><h3 id="给linux设置静态ip地址"><a href="#给linux设置静态ip地址" class="headerlink" title="给linux设置静态ip地址"></a>给linux设置静态ip地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个简单的方法：</span><br><span class="line"> 1.在虚拟机和主机互通的条件下</span><br><span class="line"> 2.如果之前设置的vmnet8是自动获取，可以根据cmd里的vmnet8来设置ip,网关，掩码；如果之前已经是设置的固定信息那就不管</span><br><span class="line"> 3.修改虚拟机文件&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br><span class="line">   dhcp修改为static</span><br><span class="line">   onboot的值修改为yes</span><br><span class="line">   尾外加：</span><br><span class="line">   IPADDR&#x3D;&quot;根据虚拟机ipaddr 或 ipconfig获得的值来设置&quot;</span><br><span class="line">   GATEWAY&#x3D;&quot;根据vmnet8的值来设置&quot;</span><br><span class="line">   ENS1&#x3D;&quot;与上一个相同&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改好以后还有最重要的一步，重启网卡。如果结果显示的是OK，就说明是没有问题的。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br></pre></td></tr></table></figure>

<h3 id="Linux起名字-hostname"><a href="#Linux起名字-hostname" class="headerlink" title="Linux起名字(hostname)"></a>Linux起名字(hostname)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  那针对linux机器也是一样的，ip不好记，所以针对每一台linux机器还有一个主机名，hostname，我们可以给hostname设置一个通俗易懂、方便记忆的名字。</span><br><span class="line">针对hostname的设置分为两种:</span><br><span class="line">  一种是临时设置，立刻生效，但是机器重启之后就失效了。</span><br><span class="line">  还有一种是永久设置，但需要重启之后才生效。</span><br><span class="line">所以在实际工作中这两个要结合起来使用，临时+永久设置就可以实现立刻生效、永久有效。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname &#x2F;&#x2F;获取主机名</span><br><span class="line"></span><br><span class="line">hostname bigdata01  &#x2F;&#x2F;设置临时名</span><br><span class="line"></span><br><span class="line">设置&#x2F;etc&#x2F;hostname文件   &#x2F;&#x2F; 永久修改</span><br></pre></td></tr></table></figure>

<h3 id="Linux的金钟罩铁布衫-防火墙"><a href="#Linux的金钟罩铁布衫-防火墙" class="headerlink" title="Linux的金钟罩铁布衫(防火墙)"></a>Linux的金钟罩铁布衫(防火墙)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  我们在学习阶段，建议关闭防火墙，因为在后面我们会使用到多台机器，如果不关闭防火墙，会遇到机器之间无法通信的场景，比较麻烦，在实际工作中这块工作是由运维负责管理的，我们不需要关注这块。</span><br><span class="line">注意：在实际工作中一般是不需要关闭防火墙的，大家可千万别到时候，上去就把防火墙给关闭了，那样的话针对线上的服务器是有很大安全风险的，我们现在学习阶段是使用的自己本地搭建的虚拟机，不会出现任何安全风险，你们现在遇到的风险都是来源于你们自己。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对防火墙的关闭也分为两种方式，临时关闭和永久关闭，</span><br><span class="line">  临时关闭的特性是立刻生效，重启失效</span><br><span class="line">  永久关闭的特性是重启生效，永久有效</span><br><span class="line">那在这里使用的时候还是要结合这两种方式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos7:</span><br><span class="line">首先实现临时关闭</span><br><span class="line">  systemctl stop firewalld</span><br><span class="line">执行临时关闭以后可以通过status确认当前防火墙的状态</span><br><span class="line">  systemctl status firewalld</span><br><span class="line">  </span><br><span class="line">然后再实现永久关闭，防止重启后生效</span><br><span class="line">  systemctl disable firewalld</span><br><span class="line">关闭以后我们可以通过这个list-unit-files来确认一下是否从开机启动项中关闭了</span><br><span class="line">  systemctl list-unit-files | grep firewalld</span><br><span class="line">firewalld.service                             disabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">centos6:</span><br><span class="line">首先实现临时关闭</span><br><span class="line">  service iptables stop</span><br><span class="line">然后再实现永久关闭，防止重启后生效</span><br><span class="line">  chkconfig iptables off</span><br></pre></td></tr></table></figure>

<h2 id="linux之shell编程"><a href="#linux之shell编程" class="headerlink" title="linux之shell编程"></a>linux之shell编程</h2><h3 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> shell编程其实就是把之前在shell中执行的单个命令按照一定的逻辑和规则，组装到一个文件中，后面执行的时候就可以直接执行这个文件了，这个文件我们称之为shell脚本。</span><br><span class="line">所以shell编程，最终其实就是要开发一个shell脚本。</span><br></pre></td></tr></table></figure>

<h3 id="我的第一个shell脚本"><a href="#我的第一个shell脚本" class="headerlink" title="我的第一个shell脚本"></a>我的第一个shell脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  shell脚本的后缀倒没有那么严格的要求，只是建议大家以.sh结尾，这算是一个约定，大家都遵守这个约定，后期只要看到.sh结尾的文件就知道这个是shell脚本了。</span><br><span class="line">  shell脚本的第一行内容是： #!&#x2F;bin&#x2F;bash</span><br><span class="line">  </span><br><span class="line">  这句话相当于是一个导包语句，将shell的执行环境引入进去了。</span><br><span class="line">注意了，第一行的#号可不是注释，其它行的#号才是注释</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; vi hello.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># first command</span><br><span class="line">echo hello world!</span><br></pre></td></tr></table></figure>

<h3 id="执行我的shell脚本"><a href="#执行我的shell脚本" class="headerlink" title="执行我的shell脚本"></a>执行我的shell脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; bash hello.sh </span><br><span class="line">hello world!</span><br><span class="line">还有一种写法是sh hello.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其实这里不管是bash 还是sh 都是一样的</span><br><span class="line">bash对应的是&#x2F;bin目录下面的bash文件</span><br><span class="line"></span><br><span class="line">sh是一个链接文件，指向的也是&#x2F;bin目录下面的bash文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实bash和sh在之前对应的是两种类型的shell，不过后来统一了，我们在这也就不区分了，所以在shell脚本中的第一行引入&#x2F;bin&#x2F;bash，或者&#x2F;bin&#x2F;sh都是一样的，这块大家知道就行了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意了，大家在看其它资料的时候，资料中一般都会说需要先给脚本添加执行权限，然后才能执行，为什么我们在这里没有给脚本增加执行权限就能执行呢？</span><br><span class="line"></span><br><span class="line">在这里可以看到这个脚本确实只有读写权限</span><br><span class="line">[root@bigdata01 shell]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 45 Apr  2 16:11 hello.sh</span><br><span class="line"></span><br><span class="line">  主要原因是这样的，我们现在执行的时候前面指定bash或者sh，表示把hello.sh这个脚本中的内容作为参数直接传给了bash或者sh命令来执行，所以这个脚本有没有执行权限都无所谓了。</span><br><span class="line">  那下面我们就来给这个脚本添加执行权限</span><br><span class="line">chmod u+x hello.sh</span><br><span class="line"></span><br><span class="line">添加完执行权限之后，再执行的时候就可以使用简化形式了</span><br><span class="line"></span><br><span class="line">.&#x2F;hello.sh</span><br><span class="line">这里的.表示是当前目录，表示在当前目录下执行这个脚本</span><br><span class="line"></span><br><span class="line">这里指定全路径也可以执行</span><br><span class="line">[root@bigdata01 shell]# &#x2F;root&#x2F;shell&#x2F;hello.sh </span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# hello.sh</span><br><span class="line">-bash: hello.sh: command not found</span><br><span class="line">这样直接执行却提示命令没找到？有没有感到疑惑？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  主要原因是这样的，因为在这里我们直接指定的文件名称，前面没有带任何路径信息，那么按照linux的查找规则，它会到PATH这个环境变量中指定的路径里面查找，这个时候PATH环境变量中都有哪些路径呢，我们来看一下</span><br><span class="line">[root@bigdata01 shell]# echo $PATH</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</span><br><span class="line">  所以说到这些路径里面去找肯定是找不到的，那怎么办呢？如果大家在windows中配置过JAVA的PATH环境变量的话就比较容易理解了，在这里我们只需要在PATH中加一个.即可，.表示当前目录，这样在执行的时候会自动到当前目录查找。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开&#x2F;etc&#x2F;profile文件，在最后一行添加export PATH&#x3D;.:$PATH,保存文件即可</span><br><span class="line">vi &#x2F;etc&#x2F;profile</span><br><span class="line">........</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">export PATH&#x3D;.:$PATH</span><br><span class="line"></span><br><span class="line">然后执行source &#x2F;etc&#x2F;profile 重新加载环境变量配置文件，这样才会立刻生效</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后再讲一个小命令，shell脚本的单步执行，可以方便脚本调试</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# bash -x hello.sh </span><br><span class="line">+ echo hello &#39;world!&#39;</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">+号开头的内容表示是脚本中将要执行的命令，下面的内容是执行的结果，这样如果脚本中的命令比较多的话，看起来是比较清晰的。</span><br></pre></td></tr></table></figure>

<h3 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学习任何编程语言都需要先学习变量，shell也不例外，但是要注意，shell中的变量不需要声明，初始化也不需要指定类型，shell是一门弱类型的语言，JAVA则是强类型的语言，需要提前声明变量，并且指定变量类型。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  shell中变量的命名要求：</span><br><span class="line">只能使用数字、字母和下划线，且不能以数字开头</span><br><span class="line">变量赋值是通过&quot;&#x3D;&quot;进行赋值，在变量、等号和值之间不能出现空格！</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一些变量，执行之后提示-bash: name: command not found的都表示是错误的，执行成功的话是没有任何输出的，没有反馈就是最好的结果</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打印变量的值，通过echo命令</span><br><span class="line">[root@bigdata01 shell]# echo $name</span><br><span class="line">zs</span><br><span class="line">[root@bigdata01 shell]# echo $&#123;name&#125;</span><br><span class="line">zs</span><br><span class="line">这两种形式都可以，一个是完整写法，一个是简化写法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有什么区别吗？</span><br><span class="line">  如果我们想在变量的结果后面直接无缝拼接其它字符串，那就只能使用带花括号的形式</span><br><span class="line">[root@bigdata01 shell]# echo $namehehe</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# echo $&#123;name&#125;hehe</span><br><span class="line">zshehe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果带空格的话就无所谓了</span><br><span class="line">[root@bigdata01 shell]# echo $name hehe </span><br><span class="line">zs hehe</span><br></pre></td></tr></table></figure>

<h4 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell中的变量可以分为四种：</span><br><span class="line"></span><br><span class="line">本地变量</span><br><span class="line">环境变量</span><br><span class="line">位置变量</span><br><span class="line">特殊变量</span><br></pre></td></tr></table></figure>

<h5 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地变量的格式是VAR_NAME&#x3D;VALUE</span><br><span class="line"></span><br><span class="line">这种变量一般用于在shell脚本中定义一些临时变量，只对当前shell进程有效，关闭shell进程之后就消失了，对当前shell进程的子进程和其它shell进程无效，</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前shell的子进程进入方法：</span><br><span class="line">直接bash</span><br><span class="line"></span><br><span class="line">退出exit</span><br><span class="line"></span><br><span class="line">可以用pstree查看，但用不来</span><br></pre></td></tr></table></figure>



<h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它的格式为：export VAR_NAME&#x3D;VALUE</span><br><span class="line"></span><br><span class="line">  它的格式是在本地变量格式的基础上添加一个export参数</span><br><span class="line">  环境变量的这种格式主要用于设置临时环境变量，当你关闭当前shell进程之后环境变量就消失了，还有就是对子shell进程有效，对其它shell进程无效</span><br><span class="line">注意了，环境变量的生效范围和本地变量是不一样的，环境变量对子shell进程是有效的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  注意了，在实际工作中我们设置环境变量一般都是需要让它永久生效，这种临时的并不适用，如何设置为永久的呢？</span><br><span class="line">  其实就是把这个临时的设置添加到指定配置文件中，以后每次开启shell进程的时候，都会去加载那个指定的配置文件中的命令，这样就可以实现永久生效了</span><br><span class="line"></span><br><span class="line">在这里我们一般添加到&#x2F;etc&#x2F;profile文件中，这样可以保证对所有用户都生效</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; vim &#x2F;etc&#x2F;profile</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">export az&#x3D;4</span><br><span class="line"></span><br><span class="line">设置完后，当前shell窗口需要执行 source &#x2F;etc&#x2F;profile</span><br><span class="line">其它新打开的shell不需要</span><br></pre></td></tr></table></figure>



<h5 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在进行shell编程的时候，有时候我们想给shell脚本动态的传递一些参数，这个时候就需要用到位置变量，类似于$0 $1 $2这样的，$后面的数字理论上没有什么限制，</span><br><span class="line"></span><br><span class="line">它的格式是：location.sh abc xyz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个脚本文件，location.sh 在里面打印一下这些位置变量看看到底是什么内容</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# vi location.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $3</span><br><span class="line"></span><br><span class="line">执行脚本sh location.sh abc xyz</span><br><span class="line">[root@bigdata01 shell]# sh location.sh abc xyz</span><br><span class="line">location.sh</span><br><span class="line">abc</span><br><span class="line">xyz</span><br><span class="line"></span><br><span class="line">结果发现 $0的值是这个脚本的名称</span><br><span class="line">$1 是脚本后面的第一个参数</span><br><span class="line">$2是脚本后面的第二个参数</span><br><span class="line">$3为空，是因为脚本后面就只有两个参数</span><br><span class="line">理论上来说，脚本后面有多少个参数，在脚本中就可以通过$和角标获取对应参数的值。</span><br><span class="line">多个参数中间使用空格分隔。</span><br></pre></td></tr></table></figure>

<h5 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后来看一下shell中的特殊变量，针对特殊变量我们主要学习下面列出来的两个</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先是$?</span><br><span class="line">它表示是上一条命令的返回状态码，状态码在0~255之间</span><br><span class="line">如果命令执行成功，这个返回状态码是0，如果失败，则是在1~255之间，不同的状态码代表着不同的错误信息，也就是说，正确的道路只有一条，失败的道路有很多。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; echo $?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">状态码    描述</span><br><span class="line">0    命令成功结束</span><br><span class="line">1    通用未知错误　　</span><br><span class="line">2    误用Shell命令</span><br><span class="line">126    命令不可执行</span><br><span class="line">127    没找到命令</span><br><span class="line">128    无效退出参数</span><br><span class="line">128+x    Linux信号x的严重错误</span><br><span class="line">130    命令通过Ctrl+C控制码越界</span><br><span class="line">255    退出码越界</span><br><span class="line"></span><br><span class="line">这个状态码在工作中的应用场景是这样的，我们有时候会根据上一条命令的执行结果来执行后面不同的业务逻辑</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第二个特殊变量是$#，它表示的是shell脚本所有参数的个数</span><br><span class="line"></span><br><span class="line">  我们来演示一下，先创建paramnum.sh</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# vi paramnum.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo $#</span><br><span class="line">然后执行</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh paramnum.sh a b c</span><br><span class="line">3</span><br><span class="line">[root@bigdata01 shell]# sh paramnum.sh a b c d</span><br><span class="line">4</span><br><span class="line">  这个特殊变量的应用场景是这样的，假设我们的脚本在运行的时候需要从外面动态获取三个参数，那么在执行脚本之前就需要先判断一下脚本后面有没有指定三个参数，如果就指定了1个参数，那这个脚本就没有必要执行了，直接停止就可以了，参数个数都不够，执行是没有意义的。</span><br></pre></td></tr></table></figure>

<h5 id="变量和引号的特殊使用"><a href="#变量和引号的特殊使用" class="headerlink" title="变量和引号的特殊使用"></a>变量和引号的特殊使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  前面我们学习了shell中的变量，那针对变量和引号在工作中有一些特殊的使用场景</span><br><span class="line">单引号  首先是单引号不解析变量</span><br><span class="line">&gt;&gt;&gt; name&#x3D;jack</span><br><span class="line">&gt;&gt;&gt; echo &#39;$name&#39;</span><br><span class="line">&#39;$name&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">双引号解析变量</span><br><span class="line">&gt;&gt;&gt; name&#x3D;jack</span><br><span class="line">&gt;&gt;&gt; echo &#39;&#39;$name&#39;&#39;</span><br><span class="line">jack</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反引号   执行并引用命令的执行结果</span><br><span class="line">&gt;&gt;&gt; name&#x3D;pwd</span><br><span class="line">&gt;&gt;&gt; echo &#96;$name&#96;</span><br><span class="line">&#x2F;root&#x2F;shell</span><br><span class="line"></span><br><span class="line">反引号还有另一种写法，$() 他们的效果一致</span><br><span class="line">[root@bigdata01 shell]# echo $($name)</span><br><span class="line">&#x2F;root&#x2F;shell</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  最后还有一个大招 大家注意一下</span><br><span class="line">有时候我们想在变量的值外面套一层引号，该怎么写呢？</span><br><span class="line">echo &quot;$name&quot;是不行的，最终的值是不带引号的</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# echo &quot;$name&quot;</span><br><span class="line">pwd</span><br><span class="line">那我在外面套一层单引号呢？这样虽然值里面带双引号了，但是这个变量却没有解析</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# echo &#39;&quot;$name&quot;&#39;  </span><br><span class="line">&quot;$name&quot;</span><br><span class="line">还能怎么办呢？</span><br><span class="line">看一下这个骚操作，先套一个单引号，再套一个双引号，这样就可以了。</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# echo &quot;&#39;$name&#39;&quot;</span><br><span class="line">&#39;pwd&#39;</span><br><span class="line">什么时候需要在结果里面带引号呢？在后面课程中我们在脚本中动态拼接sql的时候会用到。</span><br></pre></td></tr></table></figure>

<h4 id="linux-shell-字符串中指定字符替换"><a href="#linux-shell-字符串中指定字符替换" class="headerlink" title="linux shell 字符串中指定字符替换"></a>linux shell 字符串中指定字符替换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;string&#x2F;23&#x2F;bb&#125;  &#x2F;&#x2F;abc1bb42341 替换一次  </span><br><span class="line"></span><br><span class="line">echo $&#123;string&#x2F;&#x2F;23&#x2F;bb&#125; &#x2F;&#x2F;abc1bb4bb41 双斜杠替换所有匹配  </span><br><span class="line">2. echo $&#123;string&#x2F;#abc&#x2F;bb&#125; &#x2F;&#x2F;bb12342341  #以什么开头来匹配，根php中的^有点像  </span><br><span class="line">3. echo $&#123;string&#x2F;%41&#x2F;bb&#125; &#x2F;&#x2F;abc123423bb %以什么结尾来匹配，根php中的$有点像</span><br></pre></td></tr></table></figure>



<h2 id="shell中的循环和判断"><a href="#shell中的循环和判断" class="headerlink" title="shell中的循环和判断"></a>shell中的循环和判断</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种格式：和java中的for循环格式有点类似，但是也不一样</span><br><span class="line">for((i&#x3D;0;i&lt;10;i++))</span><br><span class="line">do</span><br><span class="line">循环体...</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# vi for1.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for((i&#x3D;0;i&lt;10;i++))</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">注意了，这里的do也可以和for写在一行，只是需要加一个分号;</span><br><span class="line">[root@bigdata01 shell]# vi for1.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for((i&#x3D;0;i&lt;10;i++));do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh for1.sh </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这一种格式适合用在迭代多次，步长一致的情况</span><br><span class="line"></span><br><span class="line">接下来看第二种格式，这种格式针对没有规律的列表，或者是有限的几种情况进行迭代是比较方便的</span><br><span class="line">for i in 1 2 3</span><br><span class="line">do</span><br><span class="line">循环体...</span><br><span class="line">done</span><br><span class="line">演示一下，</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# vi for2.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for i in 1 2 3</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">执行，看结果</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh for2.sh </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  while循环主要适用于循环次数未知，或不便于使用for直接生成较大列表时</span><br><span class="line">  while循环的格式为：</span><br><span class="line">while 测试条件</span><br><span class="line">do</span><br><span class="line">循环体...</span><br><span class="line">done</span><br><span class="line">  注意这里面的测试条件，测试条件为&quot;真&quot;，则进入循环，测试条件为&quot;假&quot;，则退出循环</span><br><span class="line">那这个测试条件该如何定义呢？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  test EXPR 或者 [ EXPR ] ，第二种形式里面中括号和表达式之间的空格不能少</span><br><span class="line">这个EXPR表达式里面写的就是具体的比较逻辑，shell中的比较有一些不同之处，针对整型数据和字符串数据是不一样的，来看一下</span><br><span class="line"></span><br><span class="line">  整型测试：-gt(大于)、-lt(小于)、-ge(大于等于)、-le(小于等于)、-eq(等于)、-ne(不等于)</span><br><span class="line"></span><br><span class="line">  针对整型数据，需要使用-gt、-lt这样的写法，而不是大于号或小于号，这个需要注意一下</span><br><span class="line">  还有就是字符串数据，如果判断两个字符串相等，使用&#x3D;号，这里的&#x3D;号不是赋值的意思，不等于就使用!&#x3D;就可以了</span><br><span class="line">字符串测试：&#x3D;(等于)、!&#x3D;(不等于)</span><br><span class="line"></span><br><span class="line">下面来演示一下，创建 while1.sh，注意，这里面需要使用sleep实现休眠操作，否则程序会一直连续的打印内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 shell]# vi while1.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">while test 2 -gt 1</span><br><span class="line">do</span><br><span class="line">echo yes</span><br><span class="line">sleep 1</span><br><span class="line">done</span><br><span class="line">执行脚本，按ctrl+c可强制退出程序</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh while1.sh </span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">中括号这种，看起来比较清晰</span><br><span class="line">只是这种一定要注意，中括号和里面的表达式之间一定要有空格，否则就报错</span><br><span class="line">[root@bigdata01 shell]# cp while1.sh  while2.sh  </span><br><span class="line">[root@bigdata01 shell]# vi while2.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">while [ 2 -gt 1 ]</span><br><span class="line">do</span><br><span class="line">echo yes</span><br><span class="line">sleep 1</span><br><span class="line">done</span><br><span class="line">[root@bigdata01 shell]# sh while2.sh </span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if判断分为三种形式</span><br><span class="line"></span><br><span class="line">单分支</span><br><span class="line">双分支</span><br><span class="line">多分支</span><br></pre></td></tr></table></figure>

<h6 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单分支</span><br><span class="line">先看一下单分支，它的格式是这样的</span><br><span class="line">if 测试条件</span><br><span class="line">then</span><br><span class="line">    选择分支</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 shell]# vi if1.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">flag&#x3D;$1</span><br><span class="line">if [ $flag -eq 1 ]</span><br><span class="line">then</span><br><span class="line">echo one</span><br><span class="line">fi</span><br><span class="line">执行脚本</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh if1.sh 1</span><br><span class="line">one</span><br><span class="line">[root@bigdata01 shell]# sh if1.sh</span><br><span class="line">if1.sh: line 3: [: -eq: unary operator expected</span><br><span class="line">在这里发现，如果脚本后面没有传参数的话，执行程序会抱错</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">改进</span><br><span class="line">[root@bigdata01 shell]# vi if1.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">if [ $# -lt 1 ] #判断脚本后面参数的个数</span><br><span class="line">then</span><br><span class="line">echo &quot;not found param&quot;</span><br><span class="line">exit 100    # 这个状态码其实就是我们之前使用$?获取到的状态码，如果这个程</span><br><span class="line">#序不传任何参数，就会执行exit 100，结束程序，并且返回状态码100</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">flag&#x3D;$1</span><br><span class="line">if [ $flag -eq 1 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;one&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# sh if1.sh </span><br><span class="line">not found param</span><br><span class="line">[root@bigdata01 shell]# echo $?</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h6 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式如下：</span><br><span class="line">if 测试条件</span><br><span class="line">then</span><br><span class="line">    选择分支1</span><br><span class="line">else</span><br><span class="line">    选择分支2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h6 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式如下：</span><br><span class="line"></span><br><span class="line">if 测试条件1</span><br><span class="line">then</span><br><span class="line">    选择分支1</span><br><span class="line">elif 测试条件2</span><br><span class="line">then</span><br><span class="line">    选择分支2</span><br><span class="line">  ...</span><br><span class="line">else</span><br><span class="line">    选择分支n</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<h2 id="shell扩展"><a href="#shell扩展" class="headerlink" title="shell扩展"></a>shell扩展</h2><h3 id="shell后台运行"><a href="#shell后台运行" class="headerlink" title="shell后台运行"></a>shell后台运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  在实际工作中会遇到这种情况，针对带有while无限循环的shell脚本，我们希望它能够一直运行，不影响我在这个窗口执行其它操作</span><br><span class="line"></span><br><span class="line">  但是现在它会一直占用这个shell窗口，我们称这个脚本现在是在前台执行，不想让它一直占用shell窗口的话，需要把它放到后台执行，如何放到后台呢？很简单，在脚本后面添加一个&amp;即可</span><br><span class="line">  </span><br><span class="line">[root@bigdata01 shell]# sh while2.sh &amp;</span><br><span class="line">[1]2228</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是当我们把这个窗口关闭以后会发现之前放到后台运行的shell脚本也停止了，我们是希望这个脚本能够一直在后台运行的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  如何保证关闭shell窗口而不影响放到后台的shell脚本执行呢？</span><br><span class="line">也很简单，在命令前面加上nohup 即可</span><br><span class="line">  原理就是，默认情况下，当我们关闭shell窗口时，shell窗口会向之前通过它启动的所有shell脚本发送停止信号，当我们加上nohup之后，就会阻断这个停止信号的发送，所以已经放到后台的shell脚本就不会停止了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bigdata01 shell]# nohup sh while2.sh &amp;</span><br><span class="line">[1]2326</span><br><span class="line">nohup: ignoring input and appending output to ‘nohup.out’</span><br><span class="line">注意：使用nohup之后，脚本输出的信息默认都会存储到当前目录下的一个nohup.out日志文件中，后期想要排查脚本的执行情况的话就可以看这个日志文件。</span><br><span class="line"></span><br><span class="line">此时如果想要停止这个shell脚本的话就只能使用kill了</span><br></pre></td></tr></table></figure>

<h3 id="标准输出、标准错误输出、和重定向的用法"><a href="#标准输出、标准错误输出、和重定向的用法" class="headerlink" title="标准输出、标准错误输出、和重定向的用法"></a>标准输出、标准错误输出、和重定向的用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标准输出：表示是命令或者程序输出的正常信息</span><br><span class="line">标准错误输出：表示是命令或者程序输出的错误信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标准输出可以使用文件描述符1来表示，标准错误输出可以使用文件描述符2来表示</span><br><span class="line">针对标准输出和标准错误输出，可以使用重定向操作将这些输出信息保存到文件中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演示一下重定向 &gt;，这里的1表示把标准输出重定向到文件中</span><br><span class="line">[root@bigdata01 shell]# ll 1&gt; a.txt</span><br><span class="line">[root@bigdata01 shell]# more a.txt </span><br><span class="line">total 52</span><br><span class="line">-rw-r--r--. 1 root root    0 Apr  3 21:39 a.txt</span><br><span class="line">-rw-r--r--. 1 root root   48 Apr  3 17:32 for1.sh</span><br><span class="line">-rw-r--r--. 1 root root   43 Apr  3 17:40 for2.sh</span><br><span class="line">-rwxr--r--. 1 root root   45 Apr  2 16:11 hello.sh</span><br><span class="line">-rw-r--r--. 1 root root  121 Apr  3 18:30 if1.sh</span><br><span class="line">-rw-r--r--. 1 root root  147 Apr  3 18:30 if2.sh</span><br><span class="line">-rw-r--r--. 1 root root  227 Apr  3 18:34 if3.sh</span><br><span class="line">-rw-r--r--. 1 root root   44 Apr  3 16:23 location.sh</span><br><span class="line">-rw-------. 1 root root 4692 Apr  3 21:11 nohup.out</span><br><span class="line">-rw-r--r--. 1 root root   20 Apr  3 16:48 paramnum.sh</span><br><span class="line">-rw-r--r--. 1 root root   56 Apr  3 17:59 while1.sh</span><br><span class="line">-rw-r--r--. 1 root root   55 Apr  3 18:01 while2.sh</span><br><span class="line">-rw-r--r--. 1 root root   61 Apr  3 18:03 while3.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重复执行此命令会发现文件内的内容没有变化，这是因为 &gt; 会覆盖掉之前的内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果想要追加的话需要使用 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# ll 1&gt;&gt; a.txt</span><br><span class="line">[root@bigdata01 shell]# more a.txt  </span><br><span class="line">total 52</span><br><span class="line">-rw-r--r--. 1 root root    0 Apr  3 21:39 a.txt</span><br><span class="line">-rw-r--r--. 1 root root   48 Apr  3 17:32 for1.sh</span><br><span class="line">-rw-r--r--. 1 root root   43 Apr  3 17:40 for2.sh</span><br><span class="line">-rwxr--r--. 1 root root   45 Apr  2 16:11 hello.sh</span><br><span class="line">-rw-r--r--. 1 root root  121 Apr  3 18:30 if1.sh</span><br><span class="line">-rw-r--r--. 1 root root  147 Apr  3 18:30 if2.sh</span><br><span class="line">-rw-r--r--. 1 root root  227 Apr  3 18:34 if3.sh</span><br><span class="line">-rw-r--r--. 1 root root   44 Apr  3 16:23 location.sh</span><br><span class="line">-rw-------. 1 root root 4692 Apr  3 21:11 nohup.out</span><br><span class="line">-rw-r--r--. 1 root root   20 Apr  3 16:48 paramnum.sh</span><br><span class="line">-rw-r--r--. 1 root root   56 Apr  3 17:59 while1.sh</span><br><span class="line">-rw-r--r--. 1 root root   55 Apr  3 18:01 while2.sh</span><br><span class="line">-rw-r--r--. 1 root root   61 Apr  3 18:03 while3.sh</span><br><span class="line">total 56</span><br><span class="line">-rw-r--r--. 1 root root  671 Apr  3 21:39 a.txt</span><br><span class="line">-rw-r--r--. 1 root root   48 Apr  3 17:32 for1.sh</span><br><span class="line">-rw-r--r--. 1 root root   43 Apr  3 17:40 for2.sh</span><br><span class="line">-rwxr--r--. 1 root root   45 Apr  2 16:11 hello.sh</span><br><span class="line">-rw-r--r--. 1 root root  121 Apr  3 18:30 if1.sh</span><br><span class="line">-rw-r--r--. 1 root root  147 Apr  3 18:30 if2.sh</span><br><span class="line">-rw-r--r--. 1 root root  227 Apr  3 18:34 if3.sh</span><br><span class="line">-rw-r--r--. 1 root root   44 Apr  3 16:23 location.sh</span><br><span class="line">-rw-------. 1 root root 4692 Apr  3 21:11 nohup.out</span><br><span class="line">-rw-r--r--. 1 root root   20 Apr  3 16:48 paramnum.sh</span><br><span class="line">-rw-r--r--. 1 root root   56 Apr  3 17:59 while1.sh</span><br><span class="line">-rw-r--r--. 1 root root   55 Apr  3 18:01 while2.sh</span><br><span class="line">-rw-r--r--. 1 root root   61 Apr  3 18:03 while3.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，这里的1可以省略，因为默认情况下不写也是1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标准错误输出的用法和这个一样，标准错误输出需要使用2，使用1是无法把这个错误输出信息重定向到文件中的</span><br><span class="line"></span><br><span class="line">下面这个写法是错误的。</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# lk 1&gt; b.txt</span><br><span class="line">-bash: lk: command not found</span><br><span class="line">正确的写法是这样的。</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# lk 2&gt; b.txt</span><br><span class="line">[root@bigdata01 shell]# more b.txt </span><br><span class="line">-bash: lk: command not found</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注意 1和2与&gt;之间不能有空格</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后来看一个综合案例</span><br><span class="line">nohup hello.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">我们来解释一下</span><br><span class="line">nohup和&amp;：可以让程序一直在后台运行</span><br><span class="line">&#x2F;dev&#x2F;null：是linux中的黑洞，任何数据扔进去都找不到了</span><br><span class="line">&gt;&#x2F;dev&#x2F;null：把标准输出重定向到黑洞中，表示脚本的输出信息不需要存储</span><br><span class="line">2&gt;&amp;1 ：表示是把标准错误输出重定向到标准输出中</span><br><span class="line">最终这条命令的意思就是把脚本放在后台一直运行，并且把脚本的所有输出都扔到黑洞里面</span><br></pre></td></tr></table></figure>



<h2 id="Linux中的定时器crontab"><a href="#Linux中的定时器crontab" class="headerlink" title="Linux中的定时器crontab"></a>Linux中的定时器crontab</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab的格式是这样的：* * * * * user-name command</span><br><span class="line"></span><br><span class="line">*：分钟(0-59)</span><br><span class="line">*：小时(0-23)</span><br><span class="line">*：一个月中的第几天(1-31)</span><br><span class="line">*：月份(1-12)</span><br><span class="line">*：星期几(0-7) (星期天为0)</span><br><span class="line">user-name：用户名，用哪个用户执行</span><br><span class="line">command：具体需要指定的命令</span><br><span class="line"></span><br><span class="line">这条配置需要添加到crontab服务对应的文件中，在配置之前，需要先确认crontab的服务是否正常</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看crontab服务状态：systemctl status crond</span><br><span class="line">如果服务没有启动可以使用systemctl start crond 来启动</span><br><span class="line">如果想要停止 可以使用systemctl stop crond</span><br><span class="line"></span><br><span class="line">确认这个服务是ok的之后，我们就可以操作这个服务对应的配置文件了，&#x2F;etc&#x2F;crontab</span><br><span class="line">可以先打开看一下这个配置文件</span><br><span class="line">[root@bigdata01 shell]# vi &#x2F;etc&#x2F;crontab          </span><br><span class="line"></span><br><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line">MAILTO&#x3D;root</span><br><span class="line"></span><br><span class="line"># For details see man 4 crontabs</span><br><span class="line"></span><br><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name  command to be executed</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面我们就来配置一个。</span><br><span class="line">假设我们有一个需求，每隔1分钟打印一次当前时间，时间格式为年月日 时分秒</span><br><span class="line">这个需求需要写到脚本中，然后在crontab中直接调用脚本即可。</span><br><span class="line">其实我们只需要在脚本中实现打印当前时间的操作即可，每隔1分钟执行一次这个操作让crontab实现即可</span><br><span class="line"></span><br><span class="line">创建脚本文件 vi showTime.sh</span><br><span class="line">[root@bigdata01 shell]# vi showTime.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">showTime&#x3D;&#96;date &quot;+%Y-%m-%d %H:%M:%S&quot;&#96;  #有空格所以要加引号</span><br><span class="line">echo $showTime</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">然后在&#x2F;etc&#x2F;crontab文件中配置</span><br><span class="line">每1分钟执行一次，其实是最简单的写法，前面都是*号就行，表示都匹配</span><br><span class="line">最终的效果就是这样的</span><br><span class="line"></span><br><span class="line">* * * * * root sh &#x2F;root&#x2F;shell&#x2F;showTime.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：这里建议指定脚本的全路径，这样不容易出问题，还有就是执行命令在这里写好了以后建议拿出来单独执行一下，确认能不能正常执行，这样可以避免出现一些低级别的问题</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在这种情况脚本执行之后的结果我们是没有保存的，如果让crontab定时去调度执行，我们压根就看不到执行的结果信息，所以需要把脚本执行的结果重定向到一个文件中，</span><br><span class="line">需要使用追加重定向</span><br><span class="line"></span><br><span class="line">* * * * * root sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log</span><br><span class="line"></span><br><span class="line">保存配置文件即可，等待执行。</span><br><span class="line">我们来看查看一下结果文件，确认一下是否正常执行，可以使用tail -f 监控一会</span><br><span class="line">[root@bigdata01 shell]# tail -f &#x2F;root&#x2F;shell&#x2F;showTime.log </span><br><span class="line">2026-04-06 21:14:01</span><br><span class="line">2026-04-06 21:15:01</span><br><span class="line">2026-04-06 21:16:01</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们执行的脚本确实不会产生任何输出信息，那么我们如何确认脚本是否被成功调度了呢？</span><br><span class="line">这个时候可以通过查看crontab的日志来确认</span><br><span class="line">crontab的日志在&#x2F;var&#x2F;log&#x2F;cron文件中，使用tail -f命令实时监控</span><br><span class="line"></span><br><span class="line">[root@bigdata01 shell]# tail -f &#x2F;var&#x2F;log&#x2F;cron</span><br><span class="line">.........</span><br><span class="line">Apr  6 21:14:01 bigdata01 CROND[1577]: (root) CMD (sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log)</span><br><span class="line">Apr  6 21:15:01 bigdata01 CROND[1584]: (root) CMD (sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log)</span><br><span class="line">Apr  6 21:16:01 bigdata01 CROND[1591]: (root) CMD (sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log)</span><br><span class="line">Apr  6 21:17:01 bigdata01 CROND[1597]: (root) CMD (sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log)</span><br><span class="line">Apr  6 21:18:01 bigdata01 CROND[1603]: (root) CMD (sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果这个任务暂时不想调度了，想临时停止一段时间，可以修改配置文件，在这一行配置前面加上#号就可以了，这样这一行配置就被注释了，后期想使用的时候把#号去掉就可以了。</span><br><span class="line"></span><br><span class="line">下面大家思考一个问题，如果设置任务每7分钟执行一次，那么任务分别会在什么时间点执行？</span><br><span class="line">  任务会在我们配置好之后7分钟执行吗？ 不会的，</span><br><span class="line">  注意了，crontab中任务是这样执行的，我们这里设置的7分钟执行一次，那么就会在每个小时的第0、7、14、21、28.....分钟执行，而不是根据你配置好的时候往后推，这个一定要注意了</span><br><span class="line"></span><br><span class="line">我们来验证一下，修改配置文件</span><br><span class="line"></span><br><span class="line">*&#x2F;7 * * * * root sh &#x2F;root&#x2F;shell&#x2F;showTime.sh &gt;&gt; &#x2F;root&#x2F;shell&#x2F;showTime.log</span><br><span class="line"></span><br><span class="line">还有就是这里的间隔时间是7分钟，7分钟无法被60整除，那执行到这个小时的最后一次以后会怎么办呢？它最后会在第56分钟执行一次，再往后的话继续往后面顺延7分钟吗？不是的，下一次执行就是下一个小时的0分开始执行了，所以针对这种除不尽的到下一小时就开始重新计算了，不累计。</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_30670103/article/details/116923246" target="_blank" rel="external nofollow noopener noreferrer">crontab运维必会面试题</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-07讲为什么说MapReduce既是编程模型又是计算框架</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-07%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4MapReduce%E6%97%A2%E6%98%AF%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%8F%88%E6%98%AF%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="07讲为什么说MapReduce既是编程模型又是计算框架"><a href="#07讲为什么说MapReduce既是编程模型又是计算框架" class="headerlink" title="07讲为什么说MapReduce既是编程模型又是计算框架"></a>07讲为什么说MapReduce既是编程模型又是计算框架</h1><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第3章 Linux极速上手</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8%20%E7%AC%AC3%E7%AB%A0%20Linux%E6%9E%81%E9%80%9F%E4%B8%8A%E6%89%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<a href="/linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%92%8C%E5%BC%82%E5%B8%B8.html" title="linux相关命令和异常">linux相关命令和异常</a>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第2章 Linux虚拟机安装配置</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8%20%E7%AC%AC2%E7%AB%A0-Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第一周-第2章-Linux虚拟机安装配置"><a href="#第一周-第2章-Linux虚拟机安装配置" class="headerlink" title="第一周 第2章 Linux虚拟机安装配置"></a>第一周 第2章 Linux虚拟机安装配置</h1><p>首先确认“虚拟化”是否启动？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务栏---&gt;右键---&gt;任务管理器---&gt;性能---&gt;cpu</span><br></pre></td></tr></table></figure>



<h2 id="vmWare安装"><a href="#vmWare安装" class="headerlink" title="vmWare安装"></a>vmWare安装</h2><p>略</p>
<h2 id="vmWare安装linux虚拟机"><a href="#vmWare安装linux虚拟机" class="headerlink" title="vmWare安装linux虚拟机"></a>vmWare安装linux虚拟机</h2><p>略</p>
<h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>略</p>
<h2 id="xshell或secueCRT连接虚拟机"><a href="#xshell或secueCRT连接虚拟机" class="headerlink" title="xshell或secueCRT连接虚拟机"></a>xshell或secueCRT连接虚拟机</h2><h3 id="secueCRT连接"><a href="#secueCRT连接" class="headerlink" title="secueCRT连接"></a>secueCRT连接</h3><p>略</p>
<h3 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h3><p>略</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-06讲新技术层出不穷，HDFS依然是存储的王者</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-06%E8%AE%B2%E6%96%B0%E6%8A%80%E6%9C%AF%E5%B1%82%E5%87%BA%E4%B8%8D%E7%A9%B7%EF%BC%8CHDFS%E4%BE%9D%E7%84%B6%E6%98%AF%E5%AD%98%E5%82%A8%E7%9A%84%E7%8E%8B%E8%80%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="06讲新技术层出不穷，HDFS依然是存储的王者"><a href="#06讲新技术层出不穷，HDFS依然是存储的王者" class="headerlink" title="06讲新技术层出不穷，HDFS依然是存储的王者"></a>06讲新技术层出不穷，HDFS依然是存储的王者</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们知道，Google大数据“三驾马车”的第一驾是GFS（Google 文件系统），而Hadoop的第一个产品是HDFS，可以说分布式文件存储是分布式计算的基础，也可见分布式文件存储的重要性。如果我们将大数据计算比作烹饪，那么数据就是食材，而Hadoop分布式文件系统HDFS就是烧菜的那口大锅。</span><br><span class="line">这些年来，各种计算框架、各种算法、各种应用场景不断推陈出新，让人眼花缭乱，但是大数据存储的王者依然是HDFS。</span><br></pre></td></tr></table></figure>

<h2 id="为什么HDFS的地位如此稳固呢？"><a href="#为什么HDFS的地位如此稳固呢？" class="headerlink" title="为什么HDFS的地位如此稳固呢？"></a>为什么HDFS的地位如此稳固呢？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在整个大数据体系里面，最宝贵、最难以代替的资产就是数据，大数据所有的一切都要围绕数据展开。HDFS作为最早的大数据存储系统，存储着宝贵的数据资产，各种新的算法、框架要想得到人们的广泛使用，必须支持HDFS才能获取已经存储在里面的数据。所以大数据技术越发展，新技术越多，HDFS得到的支持越多，我们越离不开HDFS。HDFS也许不是最好的大数据存储技术，但依然最重要的大数据存储技术。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那我们就从HDFS的原理说起，今天我们来聊聊HDFS是如何实现大数据高速、可靠的存储和访问的。</span><br><span class="line">Hadoop分布式文件系统HDFS的设计目标是管理数以千计的服务器、数以万计的磁盘，将这么大规模的服务器计算资源当作一个单一的存储系统进行管理，对应用程序提供数以PB计的存储容量，让应用程序像使用普通文件系统一样存储大规模的文件数据。</span><br><span class="line">如何设计这样一个分布式文件系统？其实思路很简单。</span><br><span class="line">我们先复习一下专栏上一期，我讲了RAID磁盘阵列存储，RAID将数据分片后在多块磁盘上并发进行读写访问，从而提高了存储容量、加快了访问速度，并通过数据的冗余校验提高了数据的可靠性，即使某块磁盘损坏也不会丢失数据。将RAID的设计理念扩大到整个分布式服务器集群，就产生了分布式文件系统，Hadoop分布式文件系统的核心原理就是如此。</span><br><span class="line">和RAID在多个磁盘上进行文件存储及并行读写的思路一样，HDFS是在一个大规模分布式服务器集群上，对数据分片后进行并行读写及冗余存储。因为HDFS可以部署在一个比较大的服务器集群上，集群中所有服务器的磁盘都可供HDFS使用，所以整个HDFS的存储空间可以达到PB级容量。</span><br></pre></td></tr></table></figure>

<h2 id="HDFS的架构图"><a href="#HDFS的架构图" class="headerlink" title="HDFS的架构图"></a>HDFS的架构图</h2><p><a href="https://imgtu.com/i/73hClR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/14/73hClR.png" alt="73hClR.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上图是HDFS的架构图，从图中你可以看到HDFS的关键组件有两个，一个是DataNode，一个是NameNode。</span><br><span class="line">DataNode负责文件数据的存储和读写操作，HDFS将文件数据分割成若干数据块（Block），每个DataNode存储一部分数据块，这样文件就分布存储在整个HDFS服务器集群中。应用程序客户端（Client）可以并行对这些数据块进行访问，从而使得HDFS可以在服务器集群规模上实现数据并行访问，极大地提高了访问速度。</span><br><span class="line">在实践中，HDFS集群的DataNode服务器会有很多台，一般在几百台到几千台这样的规模，每台服务器配有数块磁盘，整个集群的存储容量大概在几PB到数百PB。</span><br><span class="line">NameNode负责整个分布式文件系统的元数据（MetaData）管理，也就是文件路径名、数据块的ID以及存储位置等信息，相当于操作系统中文件分配表（FAT）的角色。HDFS为了保证数据的高可用，会将一个数据块复制为多份（缺省情况为3份），并将多份相同的数据块存储在不同的服务器上，甚至不同的机架上。这样当有磁盘损坏，或者某个DataNode服务器宕机，甚至某个交换机宕机，导致其存储的数据块不能访问的时候，客户端会查找其备份的数据块进行访问。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面这张图是数据块多份复制存储的示意，图中对于文件&#x2F;users&#x2F;sameerp&#x2F;data&#x2F;part-0，其复制备份数设置为2，存储的BlockID分别为1、3。Block1的两个备份存储在DataNode0和DataNode2两个服务器上，Block3的两个备份存储DataNode4和DataNode6两个服务器上，上述任何一台服务器宕机后，每个数据块都至少还有一个备份存在，不会影响对文件&#x2F;users&#x2F;sameerp&#x2F;data&#x2F;part-0的访问。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/73IvuR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/14/73IvuR.png" alt="73IvuR.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和RAID一样，数据分成若干数据块后存储到不同服务器上，可以实现数据大容量存储，并且不同分片的数据可以并行进行读&#x2F;写操作，进而实现数据的高速访问。你可以看到，HDFS的大容量存储和高速访问相对比较容易实现</span><br></pre></td></tr></table></figure>

<h2 id="但是HDFS是如何保证存储的高可用性呢？"><a href="#但是HDFS是如何保证存储的高可用性呢？" class="headerlink" title="但是HDFS是如何保证存储的高可用性呢？"></a>但是HDFS是如何保证存储的高可用性呢？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  我们尝试从不同层面来讨论一下HDFS的高可用设计。</span><br><span class="line">  1.数据存储故障容错</span><br><span class="line">磁盘介质在存储过程中受环境或者老化影响，其存储的数据可能会出现错乱。HDFS的应对措施是，对于存储在DataNode上的数据块，计算并存储校验和（CheckSum）。在读取数据的时候，重新计算读取出来的数据的校验和，如果校验不正确就抛出异常，应用程序捕获异常后就到其他DataNode上读取备份数据。</span><br><span class="line">  2.磁盘故障容错</span><br><span class="line">如果DataNode监测到本机的某块磁盘损坏，就将该块磁盘上存储的所有BlockID报告给NameNode，NameNode检查这些数据块还在哪些DataNode上有备份，通知相应的DataNode服务器将对应的数据块复制到其他服务器上，以保证数据块的备份数满足要求。</span><br><span class="line">  3.DataNode故障容错</span><br><span class="line">DataNode会通过心跳和NameNode保持通信，如果DataNode超时未发送心跳，NameNode就会认为这个DataNode已经宕机失效，立即查找这个DataNode上存储的数据块有哪些，以及这些数据块还存储在哪些服务器上，随后通知这些服务器再复制一份数据块到其他服务器上，保证HDFS存储的数据块备份数符合用户设置的数目，即使再出现服务器宕机，也不会丢失数据。</span><br><span class="line">  4.NameNode故障容错</span><br><span class="line">NameNode是整个HDFS的核心，记录着HDFS文件分配表信息，所有的文件路径和数据块存储信息都保存在NameNode，如果NameNode故障，整个HDFS系统集群都无法使用；如果NameNode上记录的数据丢失，整个集群所有DataNode存储的数据也就没用了。所以，NameNode高可用容错能力非常重要。NameNode采用主从热备的方式提供高可用服务，请看下图。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/73THl4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/14/73THl4.png" alt="73THl4.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">集群部署两台NameNode服务器，一台作为主服务器提供服务，一台作为从服务器进行热备，两台服务器通过ZooKeeper选举，主要是通过争夺znode锁资源，决定谁是主服务器。而DataNode则会向两个NameNode同时发送心跳数据，但是只有主NameNode才能向DataNode返回控制信息。</span><br><span class="line">正常运行期间，主从NameNode之间通过一个共享存储系统shared edits来同步文件系统的元数据信息。当主NameNode服务器宕机，从NameNode会通过ZooKeeper升级成为主服务器，并保证HDFS集群的元数据信息，也就是文件分配表信息完整一致。</span><br><span class="line">对于一个软件系统而言，性能差一点，用户也许可以接受；使用体验差，也许也能忍受。但是如果可用性差，经常出故障导致不可用，那就比较麻烦了；如果出现重要数据丢失，那开发工程师绝对是摊上大事了。</span><br><span class="line">而分布式系统可能出故障地方又非常多，内存、CPU、主板、磁盘会损坏，服务器会宕机，网络会中断，机房会停电，所有这些都可能会引起软件系统的不可用，甚至数据永久丢失。所以在设计分布式系统的时候，软件工程师一定要绷紧可用性这根弦，思考在各种可能的故障情况下，如何保证整个软件系统依然是可用的。</span><br><span class="line">根据我的经验，一般说来，常用的保证系统可用性的策略有冗余备份、失效转移和降级限流。虽然这3种策略你可能早已耳熟能详，但还是有一些容易被忽略的地方。</span><br><span class="line">比如冗余备份，任何程序、任何数据，都至少要有一个备份，也就是说程序至少要部署到两台服务器，数据至少要备份到另一台服务器上。此外，稍有规模的互联网企业都会建设多个数据中心，数据中心之间互相进行备份，用户请求可能会被分发到任何一个数据中心，即所谓的异地多活，在遭遇地域性的重大故障和自然灾害的时候，依然保证应用的高可用。</span><br><span class="line">当要访问的程序或者数据无法访问时，需要将访问请求转移到备份的程序或者数据所在的服务器上，这也就是失效转移。失效转移你应该注意的是失效的鉴定，像NameNode这样主从服务器管理同一份数据的场景，如果从服务器错误地以为主服务器宕机而接管集群管理，会出现主从服务器一起对DataNode发送指令，进而导致集群混乱，也就是所谓的“脑裂”。这也是这类场景选举主服务器时，引入ZooKeeper的原因。ZooKeeper的工作原理，我将会在后面专门分析。</span><br><span class="line">当大量的用户请求或者数据处理请求到达的时候，由于计算资源有限，可能无法处理如此大量的请求，进而导致资源耗尽，系统崩溃。这种情况下，可以拒绝部分请求，即进行限流；也可以关闭部分功能，降低资源消耗，即进行降级。限流是互联网应用的常备功能，因为超出负载能力的访问流量在何时会突然到来，你根本无法预料，所以必须提前做好准备，当遇到突发高峰流量时，就可以立即启动限流。而降级通常是为可预知的场景准备的，比如电商的“双十一”促销，为了保障促销活动期间应用的核心功能能够正常运行，比如下单功能，可以对系统进行降级处理，关闭部分非重要功能，比如商品评价功能。</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="我们小结一下，看看HDFS是如何通过大规模分布式服务器集群实现数据的大容量、高速、可靠存储、访问的。"><a href="#我们小结一下，看看HDFS是如何通过大规模分布式服务器集群实现数据的大容量、高速、可靠存储、访问的。" class="headerlink" title="我们小结一下，看看HDFS是如何通过大规模分布式服务器集群实现数据的大容量、高速、可靠存储、访问的。"></a>我们小结一下，看看HDFS是如何通过大规模分布式服务器集群实现数据的大容量、高速、可靠存储、访问的。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.文件数据以数据块的方式进行切分，数据块可以存储在集群任意DataNode服务器上，所以HDFS存储的文件可以非常大，一个文件理论上可以占据整个HDFS服务器集群上的所有磁盘，实现了大容量存储。</span><br><span class="line">2.HDFS一般的访问模式是通过MapReduce程序在计算时读取，MapReduce对输入数据进行分片读取，通常一个分片就是一个数据块，每个数据块分配一个计算进程，这样就可以同时启动很多进程对一个HDFS文件的多个数据块进行并发访问，从而实现数据的高速访问。关于MapReduce的具体处理过程，我们会在专栏后面详细讨论。</span><br><span class="line">3.DataNode存储的数据块会进行复制，使每个数据块在集群里有多个备份，保证了数据的可靠性，并通过一系列的故障容错手段实现HDFS系统中主要组件的高可用，进而保证数据和整个系统的高可用。</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-05讲从RAID看垂直伸缩到水平伸缩的演化</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-05%E8%AE%B2%E4%BB%8ERAID%E7%9C%8B%E5%9E%82%E7%9B%B4%E4%BC%B8%E7%BC%A9%E5%88%B0%E6%B0%B4%E5%B9%B3%E4%BC%B8%E7%BC%A9%E7%9A%84%E6%BC%94%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="05讲从RAID看垂直伸缩到水平伸缩的演化"><a href="#05讲从RAID看垂直伸缩到水平伸缩的演化" class="headerlink" title="05讲从RAID看垂直伸缩到水平伸缩的演化"></a>05讲从RAID看垂直伸缩到水平伸缩的演化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据技术主要是要解决大规模数据的计算处理问题，但是我们要想对数据进行计算，首先要解决的其实是大规模数据的存储问题。</span><br></pre></td></tr></table></figure>

<h2 id="如果一个文件的大小超过了一张磁盘的大小，你该如何存储？"><a href="#如果一个文件的大小超过了一张磁盘的大小，你该如何存储？" class="headerlink" title="如果一个文件的大小超过了一张磁盘的大小，你该如何存储？"></a>如果一个文件的大小超过了一张磁盘的大小，你该如何存储？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的答案是，单机时代，主要的解决方案是RAID；分布式时代，主要解决方案是分布式文件系统。</span><br></pre></td></tr></table></figure>

<h2 id="其实不论是在单机时代还是分布式时代，大规模数据存储都需要解决几个核心问题，这些问题都是什么呢？总结一下，主要有以下三个方面。"><a href="#其实不论是在单机时代还是分布式时代，大规模数据存储都需要解决几个核心问题，这些问题都是什么呢？总结一下，主要有以下三个方面。" class="headerlink" title="其实不论是在单机时代还是分布式时代，大规模数据存储都需要解决几个核心问题，这些问题都是什么呢？总结一下，主要有以下三个方面。"></a>其实不论是在单机时代还是分布式时代，大规模数据存储都需要解决几个核心问题，这些问题都是什么呢？总结一下，主要有以下三个方面。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据存储容量的问题。既然大数据要解决的是数以PB计的数据计算问题，而一般的服务器磁盘容量通常1～2TB，那么如何存储这么大规模的数据呢？</span><br><span class="line">2.数据读写速度的问题。一般磁盘的连续读写速度为几十MB，以这样的速度，几十PB的数据恐怕要读写到天荒地老。</span><br><span class="line">3.数据可靠性的问题。磁盘大约是计算机设备中最易损坏的硬件了，通常情况一块磁盘使用寿命大概是一年，如果磁盘损坏了，数据怎么办？</span><br><span class="line"></span><br><span class="line">   在大数据技术出现之前，我们就需要面对这些关于存储的问题，对应的解决方案就是RAID技术。今天我们就先从RAID开始，一起看看大规模数据存储方式的演化过程。</span><br><span class="line">   RAID（独立磁盘冗余阵列）技术是将多块普通磁盘组成一个阵列，共同对外提供服务。主要是为了改善磁盘的存储容量、读写速度，增强磁盘的可用性和容错能力。在RAID之前，要使用大容量、高可用、高速访问的存储系统需要专门的存储设备，这类设备价格要比RAID的几块普通磁盘贵几十倍。RAID刚出来的时候给我们的感觉像是一种黑科技，但其原理却不复杂。</span><br><span class="line">   目前服务器级别的计算机都支持插入多块磁盘（8块或者更多），通过使用RAID技术，实现数据在多块磁盘上的并发读写和数据备份。常用RAID技术有图中下面这几种，光看图片你可能觉得它们都差不多，下面我给你讲讲它们之间的区别。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/71IVVf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/14/71IVVf.png" alt="71IVVf.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先，我们先假设服务器有N块磁盘，RAID 0是数据在从内存缓冲区写入磁盘时，根据磁盘数量将数据分成N份，这些数据同时并发写入N块磁盘，使得数据整体写入速度是一块磁盘的N倍；读取的时候也一样，因此RAID 0具有极快的数据读写速度。但是RAID 0不做数据备份，N块磁盘中只要有一块损坏，数据完整性就被破坏，其他磁盘的数据也都无法使用了。</span><br><span class="line">RAID 1是数据在写入磁盘时，将一份数据同时写入两块磁盘，这样任何一块磁盘损坏都不会导致数据丢失，插入一块新磁盘就可以通过复制数据的方式自动修复，具有极高的可靠性。</span><br><span class="line">结合RAID 0和RAID 1两种方案构成了RAID 10，它是将所有磁盘N平均分成两份，数据同时在两份磁盘写入，相当于RAID 1；但是平分成两份，在每一份磁盘（也就是N&#x2F;2块磁盘）里面，利用RAID 0技术并发读写，这样既提高可靠性又改善性能。不过RAID 10的磁盘利用率较低，有一半的磁盘用来写备份数据。</span><br><span class="line">一般情况下，一台服务器上很少出现同时损坏两块磁盘的情况，在只损坏一块磁盘的情况下，如果能利用其他磁盘的数据恢复损坏磁盘的数据，这样在保证可靠性和性能的同时，磁盘利用率也得到大幅提升。</span><br><span class="line">顺着这个思路，RAID 3可以在数据写入磁盘的时候，将数据分成N-1份，并发写入N-1块磁盘，并在第N块磁盘记录校验数据，这样任何一块磁盘损坏（包括校验数据磁盘），都可以利用其他N-1块磁盘的数据修复。</span><br><span class="line">但是在数据修改较多的场景中，任何磁盘数据的修改，都会导致第N块磁盘重写校验数据。频繁写入的后果是第N块磁盘比其他磁盘更容易损坏，需要频繁更换，所以RAID 3很少在实践中使用，因此在上面图中也就没有单独列出。</span><br><span class="line">相比RAID 3，RAID 5是使用更多的方案。RAID 5和RAID 3很相似，但是校验数据不是写入第N块磁盘，而是螺旋式地写入所有磁盘中。这样校验数据的修改也被平均到所有磁盘上，避免RAID 3频繁写坏一块磁盘的情况。</span><br><span class="line">如果数据需要很高的可靠性，在出现同时损坏两块磁盘的情况下（或者运维管理水平比较落后，坏了一块磁盘但是迟迟没有更换，导致又坏了一块磁盘），仍然需要修复数据，这时候可以使用RAID 6。</span><br><span class="line">RAID 6和RAID 5类似，但是数据只写入N-2块磁盘，并螺旋式地在两块磁盘中写入校验信息（使用不同算法生成）。</span><br><span class="line">从下面表格中你可以看到在相同磁盘数目（N）的情况下，各种RAID技术的比较。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/71Lx9f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/14/71Lx9f.png" alt="71Lx9f.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   RAID技术有硬件实现，比如专用的RAID卡或者主板直接支持；也可以通过软件实现，在操作系统层面将多块磁盘组成RAID，从逻辑上视作一个访问目录。RAID技术在传统关系数据库及文件系统中应用比较广泛，是改善计算机存储特性的重要手段。</span><br><span class="line">现在我来总结一下，看看RAID是如何解决我一开始提出的，关于存储的三个关键问题。</span><br><span class="line">  1.数据存储容量的问题。RAID使用了N块磁盘构成一个存储阵列，如果使用RAID 5，数据就可以存储在N-1块磁盘上，这样将存储空间扩大了N-1倍。</span><br><span class="line">  2.数据读写速度的问题。RAID根据可以使用的磁盘数量，将待写入的数据分成多片，并发同时向多块磁盘进行写入，显然写入的速度可以得到明显提高；同理，读取速度也可以得到明显提高。不过，需要注意的是，由于传统机械磁盘的访问延迟主要来自于寻址时间，数据真正进行读写的时间可能只占据整个数据访问时间的一小部分，所以数据分片后对N块磁盘进行并发读写操作并不能将访问速度提高N倍。</span><br><span class="line">  3.数据可靠性的问题。使用RAID 10、RAID 5或者RAID 6方案的时候，由于数据有冗余存储，或者存储校验信息，所以当某块磁盘损坏的时候，可以通过其他磁盘上的数据和校验数据将丢失磁盘上的数据还原。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们对更强计算能力和更大规模数据存储的追求几乎是没有止境的，这似乎是源于人类的天性。神话里人类试图建立一座通天塔到神居住的地方，就是这种追求的体现。</span><br><span class="line">我在上一期提到过，在计算机领域，实现更强的计算能力和更大规模的数据存储有两种思路，一种是升级计算机，一种是用分布式系统。前一种也被称作“垂直伸缩”（scaling up），通过升级CPU、内存、磁盘等将一台计算机变得更强大；后一种是“水平伸缩”（scaling out），添加更多的计算机到系统中，从而实现更强大的计算能力。</span><br></pre></td></tr></table></figure>

<h2 id="垂直伸缩VS水平伸缩"><a href="#垂直伸缩VS水平伸缩" class="headerlink" title="垂直伸缩VS水平伸缩"></a>垂直伸缩VS水平伸缩</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在计算机发展的早期，我们获得更强大计算能力的手段主要依靠垂直伸缩。一方面拜摩尔定律所赐，每18个月计算机的处理能力提升一倍；另一方面由于不断研究新的计算机体系结构，小型机、中型机、大型机、超级计算机，不断刷新我们的认知。</span><br><span class="line">但是到了互联网时代，这种垂直伸缩的路子走不通了，一方面是成本问题，互联网公司面对巨大的不确定性市场，无法为一个潜在的需要巨大计算资源的产品一下投入很多钱去购买大型计算机；另一方面，对于Google这样的公司和产品而言，即使是世界上最强大的超级计算机也无法满足其对计算资源的需求。</span><br><span class="line">所以互联网公司走向了一条新的道路：水平伸缩，在一个系统中不断添加计算机，以满足不断增长的用户和数据对计算资源的需求。这就是最近十几年引导技术潮流的分布式与大数据技术。</span><br><span class="line">RAID可以看作是一种垂直伸缩，一台计算机集成更多的磁盘实现数据更大规模、更安全可靠的存储以及更快的访问速度。而HDFS则是水平伸缩，通过添加更多的服务器实现数据更大、更快、更安全存储与访问。</span><br><span class="line">RAID技术只是在单台服务器的多块磁盘上组成阵列，大数据需要更大规模的存储空间和更快的访问速度。将RAID思想原理应用到分布式服务器集群上，就形成了Hadoop分布式文件系统HDFS的架构思想。</span><br><span class="line">垂直伸缩总有尽头，水平伸缩理论上是没有止境的，在实践中，数万台服务器的HDFS集群已经出现，我会在下一期谈谈HDFS的架构。</span><br></pre></td></tr></table></figure>

<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传统机械磁盘进行数据连续写入的时候，比如磁盘以日志格式连续写入操作，其写入速度远远大于磁盘随机写入的速度，比如关系数据库连续更新若干条数据记录，你知道这是为什么吗？</span><br><span class="line">  1.磁盘的读写过程，最消耗时间的地方就是在磁盘中磁道寻址的过程，而一旦寻址完成，写入数据的速度很快。</span><br><span class="line">顺序写入只要一次寻址操作，而随机写入要多次寻址操作。所以顺序写入速度明显高于随机写入。</span><br><span class="line">  2.连续写入：写入只寻址一次 存储位置与逻辑位置相邻 不用多次寻址</span><br><span class="line">    随机写入：每写一次 便寻址一次 增加了磁盘的寻址时间</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-04讲移动计算比移动数据更划算</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-04%E8%AE%B2%E7%A7%BB%E5%8A%A8%E8%AE%A1%E7%AE%97%E6%AF%94%E7%A7%BB%E5%8A%A8%E6%95%B0%E6%8D%AE%E6%9B%B4%E5%88%92%E7%AE%97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="04讲移动计算比移动数据更划算"><a href="#04讲移动计算比移动数据更划算" class="headerlink" title="04讲移动计算比移动数据更划算"></a>04讲移动计算比移动数据更划算</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据技术和传统的软件开发技术在架构思路上有很大不同，大数据技术更为关注数据，所以相关的架构设计也围绕数据展开，如何存储、计算、传输大规模的数据是要考虑的核心要素。</span><br><span class="line">传统的软件计算处理模型，都是“输入 -&gt; 计算 -&gt; 输出”模型。也就是说，一个程序给它传入一些数据也好，它自己从某个地方读取一些数据也好，总是先有一些输入数据，然后对这些数据进行计算处理，最后得到输出结果。</span><br><span class="line">但是在互联网大数据时代，需要计算处理的数据量急速膨胀。一来是因为互联网用户数远远超过传统企业的用户，相应产生了更大量的数据；二来很多以往被忽视的数据重新被发掘利用，比如用户在一个页面的停留时长、鼠标在屏幕移动的轨迹都会被记录下来进行分析。在稍微大一点的互联网企业，需要计算处理的数据量常常以PB计（10^15 Byte）。</span><br><span class="line">正因为如此，传统的计算处理模型不能适用于大数据时代的计算要求。你能想象一个程序读取PB级的数据进行计算是怎样一个场景吗？一个程序所能调度的网络带宽（通常数百MB）、内存容量（通常几十GB ）、磁盘大小（通常数TB）、CPU运算速度是不可能满足这种计算要求的。</span><br></pre></td></tr></table></figure>

<h2 id="那么如何解决PB级数据进行计算的问题呢？"><a href="#那么如何解决PB级数据进行计算的问题呢？" class="headerlink" title="那么如何解决PB级数据进行计算的问题呢？"></a>那么如何解决PB级数据进行计算的问题呢？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个问题的解决思路其实跟大型网站的分布式架构思路是一样的，采用分布式集群的解决方案，用数千台甚至上万台计算机构建一个大数据计算处理集群，利用更多的网络带宽、内存空间、磁盘容量、CPU核心数去进行计算处理。关于分布式架构，你可以参考我写的《大型网站技术架构：核心原理与案例分析》这本书，但是大数据计算处理的场景跟网站的实时请求处理场景又有很大不同。</span><br><span class="line">网站实时处理通常针对单个用户的请求操作，虽然大型网站面临大量的高并发请求，比如天猫的“双十一”活动。但是每个用户之间的请求是独立的，只要网站的分布式系统能将不同用户的不同业务请求分配到不同的服务器上，只要这些分布式的服务器之间耦合关系(事物之间存在的相互作用、相互影响的关系)足够小，就可以通过添加更多的服务器去处理更多的用户请求及由此产生的用户数据。这也正是网站系统架构的核心原理。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据计算处理通常针对的是网站的存量数据，也就是刚才我提到的全部用户在一段时间内请求产生的数据，这些数据之间是有大量关联的，比如购买同一个商品用户之间的关系，这是使用协同过滤进行商品推荐；比如同一件商品的历史销量走势，这是对历史数据进行统计分析。网站大数据系统要做的就是将这些统计规律和关联关系计算出来，并由此进一步改善网站的用户体验和运营决策。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了解决这种计算场景的问题，技术专家们设计了一套相应的技术架构方案。最早的时候由Google实现并通过论文的方式发表出来，随后根据这些论文，开源社区开发出对应的开源产品，并得到业界的普遍支持和应用。</span><br><span class="line">这套方案的核心思路是，既然数据是庞大的，而程序要比数据小得多，将数据输入给程序是不划算的，那么就反其道而行之，将程序分发到数据所在的地方进行计算，也就是所谓的移动计算比移动数据更划算。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一句古老的谚语，说的是“当一匹马拉不动车的时候，用两匹马拉”。听起来是如此简单的道理，但是在计算机这个最年轻的科技领域，在很长一段时间里却并没有这样做。当一台计算机的处理能力不能满足计算要求的时候，我们并没有想办法用两台计算机去处理，而是换更强大的计算机。商业级的服务器不够用，就升级小型机；小型机不够用，就升级中型机；还不够，升级大型机，升级超级计算机。</span><br><span class="line">在互联网时代之前，这种不断升级计算机硬件的办法还是行得通的，凭借摩尔定律，计算机硬件的处理能力每18个月增强一倍，越来越强大的计算机被制造出来。传统企业虽然对计算机的处理需求越来越高，但是工程师和科学家总能制造出满足需求的计算机。</span><br><span class="line">但是这种思路并不适合互联网的技术要求。Google、Facebook、阿里巴巴这些网站每天需要处理数十亿次的用户请求、产生上百PB的数据，不可能有一台计算机能够支撑起这么大的计算需求。</span><br><span class="line">于是互联网公司不得不换一种思路解决问题，当一台计算机的计算能力不能满足需求的时候，就增加一台计算机，还不够的话，就再增加一台。就这样，由一台计算机起家的小网站，逐渐成长为百万台服务器的巨无霸。Google、Facebook、阿里巴巴这些公司的成长过程都是如此。</span><br><span class="line">但是买一台新计算机和一台老计算机放在一起，就能自己开始工作了吗？两台计算机要想合作构成一个系统，必须要在技术上重新架构。这就是现在互联网企业广泛使用的负载均衡、分布式缓存、分布式数据库、分布式服务等种种分布式系统。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当这些分布式技术满足互联网的日常业务需求时，对离线数据和存量数据的处理就被提了出来，当时这些分布式技术并不能满足要求，于是大数据技术就出现了。</span><br></pre></td></tr></table></figure>

<h2 id="现在我们来看，移动计算程序到数据所在位置进行计算是如何实现的呢？"><a href="#现在我们来看，移动计算程序到数据所在位置进行计算是如何实现的呢？" class="headerlink" title="现在我们来看，移动计算程序到数据所在位置进行计算是如何实现的呢？"></a>现在我们来看，移动计算程序到数据所在位置进行计算是如何实现的呢？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1.将待处理的大规模数据存储在服务器集群的所有服务器上，主要使用HDFS分布式文件存储系统，将文件分成很多块（Block），以块为单位存储在集群的服务器上。</span><br><span class="line"> 2.大数据引擎根据集群里不同服务器的计算能力，在每台服务器上启动若干分布式任务执行进程，这些进程会等待给它们分配执行任务。</span><br><span class="line"> 3.使用大数据计算框架支持的编程模型进行编程，比如Hadoop的MapReduce编程模型，或者Spark的RDD编程模型。应用程序编写好以后，将其打包，MapReduce和Spark都是在JVM环境中运行，所以打包出来的是一个Java的JAR包。</span><br><span class="line"> 4.用Hadoop或者Spark的启动命令执行这个应用程序的JAR包，首先执行引擎会解析程序要处理的数据输入路径，根据输入数据量的大小，将数据分成若干片（Split），每一个数据片都分配给一个任务执行进程去处理。</span><br><span class="line"> 5.任务执行进程收到分配的任务后，检查自己是否有任务对应的程序包，如果没有就去下载程序包，下载以后通过反射的方式加载程序。走到这里，最重要的一步，也就是移动计算就完成了。</span><br><span class="line"> 6.加载程序后，任务执行进程根据分配的数据片的文件地址和数据在文件内的偏移量读取数据，并把数据输入给应用程序相应的方法去执行，从而实现在分布式服务器集群中移动计算程序，对大规模数据进行并行处理的计算目标。</span><br><span class="line"></span><br><span class="line">这只是大数据计算实现过程的简单描述，具体过程我们会在讲到HDFS、MapReduce和Spark的时候详细讨论。</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">移动程序到数据所在的地方去执行，这种技术方案其实我们并不陌生。从事Java开发的同学可能有过用反射的方式热加载代码执行的经验，如果这个代码是从网络其他地方传输过来的，那就是在移动计算。杀毒软件从服务器更新病毒库，然后在Windows内查杀病毒，也是一种移动计算（病毒库）比移动数据（Windows可能感染病毒的程序）更划算的例子。</span><br><span class="line">大数据技术将移动计算这一编程技巧上升到编程模型的高度，并开发了相应的编程框架，使得开发人员只需要关注大数据的算法实现，而不必关注如何将这个算法在分布式的环境中执行，这极大地简化了大数据的开发难度，并统一了大数据的开发方式，从而使大数据从原来的高高在上，变成了今天的人人参与。</span><br></pre></td></tr></table></figure>

<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">互联网应用系统架构中有一种重要架构原则(分布式架构的原则)是尽量使用无状态的服务，不同服务实例之间不共享状态，也就是不持有数据，用户请求交给任何一个服务实例计算，处理的结果都是一样的，为什么要这样设计？这种架构有什么好处？</span><br><span class="line">1.这个应该是分布式架构的设计者在考虑架构的可扩展行（伸缩性）的时候设计出来的这样一个针对于服务的一个要求或者是标准（也就是原则）</span><br><span class="line">2.无状态服务的主要好处是服务间无需同步状态或者数据，便于扩缩容。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-03讲大数据应用领域：数据驱动一切</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-03%E8%AE%B2%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E4%B8%80%E5%88%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="03讲大数据应用领域：数据驱动一切"><a href="#03讲大数据应用领域：数据驱动一切" class="headerlink" title="03讲大数据应用领域：数据驱动一切"></a>03讲大数据应用领域：数据驱动一切</h1><h2 id="大数据在医疗健康领域的应用"><a href="#大数据在医疗健康领域的应用" class="headerlink" title="大数据在医疗健康领域的应用"></a>大数据在医疗健康领域的应用</h2><h3 id="医学影像智能识别"><a href="#医学影像智能识别" class="headerlink" title="医学影像智能识别"></a>医学影像智能识别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图像识别是机器学习获得的重大突破之一，使用大量的图片数据进行深度机器学习训练，机器可以识别出特定的图像元素，比如猫或者人脸，当然也可以识别出病理特征。</span><br><span class="line">可以说医学影像智能识别在某些方面已经比一般医生拥有更高的读图和识别能力，但是鉴于医疗的严肃性，现在还很少有临床方面的实践。</span><br><span class="line">虽然在临床实践方面应用有限，但是医疗影像AI还是在一些领域取得一定的进展。医学影像智能识别，一方面可以帮助医生进行辅助诊疗，另一方面对于皮肤病等有外部表现的病症，病人可以自己拍照然后使用AI智能识别做一个初步诊断。</span><br></pre></td></tr></table></figure>

<h3 id="病历大数据智能诊疗"><a href="#病历大数据智能诊疗" class="headerlink" title="病历大数据智能诊疗"></a>病历大数据智能诊疗</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">病历，特别是专家写的病历，本身就是一笔巨大的知识财富，利用大数据技术将这些知识进行处理、分析、统计、 挖掘，可以构成一个病历知识库，可以分享给更多人，即构成一个智能辅助诊疗系统。</span><br></pre></td></tr></table></figure>

<h2 id="大数据在教育领域的应用"><a href="#大数据在教育领域的应用" class="headerlink" title="大数据在教育领域的应用"></a>大数据在教育领域的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">教育倡导“因人施教”，但是在传统教育过程中要做到因人施教，需要老师本身能力很强才能把握好。但是大数据在线教育利用大数据技术进行分析统计，完全可以做到根据学生能力和学习节奏，及时调整学习大纲和学习进度，提供个性化和自适应的学习体验。除此之外，人工智能在教育的其他方面也取得很好的进展。</span><br></pre></td></tr></table></figure>

<h3 id="AI外语老师"><a href="#AI外语老师" class="headerlink" title="AI外语老师"></a>AI外语老师</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">得益于语音识别和语音合成技术的成熟（语音识别与合成技术同样是利用大数据技术进行机器学习与训练），一些在线教育网站尝试用人工智能外语老师进行外语教学。这里面的原理其实并不复杂，聊天机器人技术已经普遍应用，只要将学习的知识点设计进聊天的过程中，就可以实现一个简单的AI外语老师了。</span><br></pre></td></tr></table></figure>

<h3 id="智能解题"><a href="#智能解题" class="headerlink" title="智能解题"></a>智能解题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较简单的智能解题系统其实是利用搜索引擎技术，在收集大量的试题以及答案的基础上，进行试题匹配，将匹配成功的答案返回。这个过程看起来就像智能做题一样，表面看给个题目就能解出答案，而实际上只是找到答案。</span><br><span class="line">进阶一点的智能解题系统，通过图像识别与自然语言处理（这两项技术依然使用大数据技术实现），进行相似性匹配。更改试题的部分数字、文字表述，但是不影响实质性解答思路，依然可以解答。</span><br><span class="line">高阶的智能解题系统，利用神经网络机器学习技术，将试题的自然语言描述转化成形式语言，然后分析知识点和解题策略，进行自动推导，从而完成实质性的解题。</span><br></pre></td></tr></table></figure>

<h2 id="大数据在社交媒体领域的应用"><a href="#大数据在社交媒体领域的应用" class="headerlink" title="大数据在社交媒体领域的应用"></a>大数据在社交媒体领域的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据有一个重要的、和我们大多数人密切相关，但是又不太引人注目的一个应用领域是舆情监控与分析。我们日常在各种互联网应用和社交媒体上发表各种言论，这些言论事实上反映了最准确的民情舆论。一个个体的言论基本没有意义，但是大量的、全国乃至全球的言论数据表现出的统计特性，就有了非常重要的意义。</span><br><span class="line">编写数据爬虫，实时爬取各个社交新媒体上的各种用户内容和媒体信息，然后通过自然语言处理，就可以进行情感分析、热点事件追踪等。舆情实时监控可用于商业领域，引导智能广告投放；可用于金融领域，辅助执行自动化股票、期权、数字货币交易；可用于社会管理，及时发现可能引发社会问题的舆论倾向。</span><br><span class="line">在美国总统大选期间，候选人就曾雇佣大数据公司利用社交媒体的数据进行分析，发现选票可能摇摆的地区，有针对性前去进行竞选演讲。并利用大数据分析选民关注的话题，包装自己的竞选主张。</span><br></pre></td></tr></table></figure>

<h2 id="大数据在金融领域的应用"><a href="#大数据在金融领域的应用" class="headerlink" title="大数据在金融领域的应用"></a>大数据在金融领域的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据在金融领域应用比较成熟的是大数据风控。在金融借贷中，如何识别出高风险用户，要求其提供更多抵押、支付更高利息、调整更低的额度，甚至拒绝贷款，从而降低金融机构的风险？事实上，金融行业已经沉淀了大量的历史数据，利用这些数据进行计算，可以得到用户特征和风险指数的曲线（即风控模型）。当新用户申请贷款的时候，将该用户特征带入曲线进行计算，就可以得到该用户的风险指数，进而自动给出该用户的贷款策略。</span><br><span class="line">利用股票、外汇等历史交易记录，分析交易规律，结合当前的新闻热点、舆论倾向、财经数据构建交易模型，进行自动化交易，这就是金融领域的量化交易。这些数据量特别巨大，交易涉及金额也同样巨大，所以金融机构在大数据领域常常不惜血本，大手笔投入。</span><br></pre></td></tr></table></figure>

<h2 id="大数据在新零售领域的应用"><a href="#大数据在新零售领域的应用" class="headerlink" title="大数据在新零售领域的应用"></a>大数据在新零售领域的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">区别于传统零售，新零售使用大数据进行全链路管理。从生产、物流、购物体验，使用大数据进行分析和预判，实现精准生产、零库存、全新的购物体验。</span><br><span class="line">亚马逊Go无人店使用大量的摄像头，实时捕捉用户行为，判断用户取出还是放回商品、取了何种商品等。这实际上是大数据流计算与机器学习的结合，最终实现的购物效果是，无需排队买单，进去就拿东西，拿好了就走，超级科幻有没有。</span><br><span class="line">虽然无人店现在看起来噱头的意味更多一点，但是利用大数据技术提升购物体验、节省商家人力成本一定是正确的方向。</span><br></pre></td></tr></table></figure>

<h2 id="大数据在交通领域的应用"><a href="#大数据在交通领域的应用" class="headerlink" title="大数据在交通领域的应用"></a>大数据在交通领域的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">交通也是一个对大数据实时采集与处理应用比较广的领域。现在几乎所有的城市路段、交通要点都有不止一个监控摄像头在实时监控，一线城市大约有百万计的摄像头在不停地采集数据。这些数据一方面可以用于公共安全，比如近年来一些警匪片里会有一些场景：犯罪嫌疑人驾车出逃，警方只要定位了车辆，不管它到哪里，系统都可以自动调出相应的摄像头，实时看到现场画面。应该说这项技术已经成熟，大数据流计算可以对百万计的流数据实时处理计算，电影里的场景计算其实并不复杂。</span><br><span class="line">此外，各种导航软件也在不停采集数据，通过分析用户当前位置和移动速度，判断道路拥堵状态，并实时修改推荐的导航路径。</span><br><span class="line">还有就是无人驾驶技术，无人驾驶就是在人的驾驶过程中实时采集车辆周边数据和驾驶控制信息，然后通过机器学习，获得周边信息与驾驶方式的对应关系（自动驾驶模型）。然后将这个模型应用到无人驾驶汽车上，传感器获得车辆周边数据后，就可以通过自动驾驶模型计算出车辆控制信息（转向、刹车等）。计算自动驾驶模型需要大量的数据，所以我们看到，这些无人驾驶创业公司都在不断攀比自己的训练数据有几十万公里、几百万公里，因为训练数据的量意味着模型的完善程度。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用大数据和机器学习，发掘数据中的规律，进而对当前的事情做出预测和判断，使机器表现出智能的特性，正变得越来越普及。</span><br><span class="line">大数据主要来自企业自身所产生，还有一些数据来自互联网，通过网络爬虫可以获取；再有就是公共数据，比如气象数据等。所有这些数据汇聚在一起，计算其内在的关系，可以发现很多肉眼和思维无法得到的知识。然后进一步计算其内在的模型，可以使系统获得智能的特性。当系统具备智能的特性，可以使机器对当前的事情做出预测和判断，正如我今天和你聊的，大数据技术应用正变得越来越普及。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>从零开始学大数据-02 大数据应用发展史: 从搜索引擎到人工智能</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-02-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E5%8F%91%E5%B1%95%E5%8F%B2-%E4%BB%8E%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%88%B0%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="02-大数据应用发展史-从搜索引擎到人工智能"><a href="#02-大数据应用发展史-从搜索引擎到人工智能" class="headerlink" title="02 大数据应用发展史: 从搜索引擎到人工智能"></a>02 大数据应用发展史: 从搜索引擎到人工智能</h1><h2 id="大数据应用的搜索引擎时代"><a href="#大数据应用的搜索引擎时代" class="headerlink" title="大数据应用的搜索引擎时代"></a>大数据应用的搜索引擎时代</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Google公认的大数据鼻祖，存储着全世界大量的网页，大约需要数万块磁盘----&gt;GFS，将数千台服务器上的数万块磁盘统一管理起来，然后当作一个文件系统，统一存储所有这些网页文件。----&gt;构建搜索引擎，需要对这数万块磁盘上的文件中的单词进行词频统计，然后根据PageRank算法计算网页排名。这中间Google需要对磁盘上的文件进行计算处理----&gt;MapReduce大数据计算框架应运而生</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Google之前，世界闻名的搜索引擎是yahoo。Google凭借自己的大数据技术和pagerank算法，使搜索引擎体验得到质的飞跃，yahoo没落。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Doug cutting率先根据论文做了Hadoop。yahoo挖Doug Cutting----&gt;Doug Cutting跳槽到专职做Hadoop的商业化公司Cloudera.</span><br></pre></td></tr></table></figure>

<h2 id="大数据应用的数据仓库时代"><a href="#大数据应用的数据仓库时代" class="headerlink" title="大数据应用的数据仓库时代"></a>大数据应用的数据仓库时代</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当Facebook推出Hive的时候，嗅觉敏感的科技公司都不淡定了，他们开始意识到，大数据的时代真正开启了。</span><br><span class="line">曾经进行数据分析和统计，仅仅局限于数据库，在数据库的计算环境中对数据库中的数据表进行统计分析。受数据量和计算能力的限制，只能对最重要的数据进行统计和分析(这里所谓最重要的数据，通常指的都是给老板看的数据和财务相关的数据)。</span><br><span class="line">而HIve可以在Hadoop上进行SQL操作，实现数据统计和分析。可以用更低廉的价格获得比以往多更多的数据存储和计算能力。我们可以把运行日志、应用采集数据、数据库数据放到一起进行计算分析，获得以前无法得到的数据结果，企业的数据仓库也随之呈指数级膨胀。</span><br><span class="line">不仅是老板，公司中每个普通员工比如产品经理、运营人员、工程师，只要有数据访问权限，都可以提出分析需求，从大数据仓库中获得自己想要了解的数据分析结果。</span><br><span class="line">在数据仓库时代，只要有数据，几乎就一定要进行统计分析，如果数据规模比较大，我们就会想到要用Hadoop大数据技术，这也是Hadoop在这个时期发展特别快的一个原因。技术的发展同时又促进了技术应用，这也为接下来大数据应用走进数据挖掘时代埋下伏笔。</span><br></pre></td></tr></table></figure>

<h2 id="大数据应用的数据挖掘时代"><a href="#大数据应用的数据挖掘时代" class="headerlink" title="大数据应用的数据挖掘时代"></a>大数据应用的数据挖掘时代</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据一旦进入更多的企业，我们就会对大数据提出更多期望，除了数据统计，我们还希望发掘出更多数据的价值，大数据随之进入数据挖掘时代</span><br><span class="line">真实的案例，很早以前商家就通过数据发现，买尿不湿的人通常也会买啤酒，于是精明的商家就把这两样商品放在一起，以促进销售。啤酒和尿不湿的关系，你可以有各种解读，但是如果不是通过数据挖掘，可能打破脑袋也想不出它们之间会有关系。在商业环境中，如何解读这种关系并不重要，重要的是它们之间只要存在关联，就可以进行关联分析，最终目的是让用户尽可能看到想购买的商品。</span><br><span class="line">除了商品和商品有关系，还可以利用人和人之间的关系推荐商品。如果两个人购买的商品有很多都是类似甚至相同的，不管这两个人天南海北相隔多远，他们一定有某种关系，比如可能有差不多的教育背景、经济收入、兴趣爱好。根据这种关系，可以进行关联推荐，让他们看到自己感兴趣的商品。</span><br><span class="line">更进一步，大数据还可以将每个人身上的不同特性挖掘出来，打上各种各样的标签：90后、生活在一线城市、月收入1～2万、宅……这些标签组成了用户画像，并且只要这样的标签足够多，就可以完整描绘出一个人，甚至比你最亲近的人对你的描述还要完整、准确。</span><br><span class="line">除了商品销售，数据挖掘还可以用于人际关系挖掘。你听过“六度分隔理论”吗，它认为世界上两个互不认识的人，只需要很少的中间人就能把他们联系起来。这个理论在美国的实验结果是，通过六步就能联系上两个不认识的美国人。也是基于这个理论，Facebook研究了十几亿用户的数据，试图找到关联两个陌生人之间的数字，答案是惊人的3.57。你可以看到，各种各样的社交软件记录着我们的好友关系，通过关系图谱挖掘，几乎可以把世界上所有的人际关系网都描绘出来。</span><br></pre></td></tr></table></figure>

<h2 id="大数据应用的机器学习时代"><a href="#大数据应用的机器学习时代" class="headerlink" title="大数据应用的机器学习时代"></a>大数据应用的机器学习时代</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们很早就发现，数据中蕴藏着规律，这个规律是所有数据都遵循的，过去发生的事情遵循这个规律，将来要发生的事情也遵循这个规律。一旦找到了这个规律，对于正在发生的事情，就可以按照这个规律进行预测。</span><br><span class="line">在过去，我们受数据采集、存储、计算能力的限制，只能通过抽样的方式获取小部分数据，无法得到完整的、全局的、细节的规律。而现在有了大数据，可以把全部的历史数据都收集起来，统计其规律，进而预测正在发生的事情。-----这就是机器学习。</span><br><span class="line">把历史上人类围棋对弈的棋谱数据都存储起来，针对每一种盘面记录如何落子可以得到更高的赢面。得到这个统计规律以后，就可以利用这个规律用机器和人下棋，每一步都计算落在何处将得到更大的赢面，于是我们就得到了一个会下棋的机器人，这就是前两年轰动一时的AlphaGo，以压倒性优势下赢了人类的顶尖棋手。</span><br><span class="line">把人聊天的对话数据都收集起来，记录每一次对话的上下文，如果上一句是问今天过得怎么样，那么下一句该如何应对，通过机器学习可以统计出来。将来有人再问今天过得怎么样，就可以自动回复下一句话，于是我们就得到一个会聊天的机器人。Siri、天猫精灵、小爱同学，这样的语音聊天机器人在机器学习时代已经满大街都是了。</span><br><span class="line">将人类活动产生的数据，通过机器学习得到统计规律，进而可以模拟人的行为，使机器表现出人类特有的智能，这就是人工智能AI。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据从搜索引擎到机器学习，发展思路其实是一脉相承的，就是想发现数据中的规律并为我们所用。所以很多人把数据称作金矿，大数据应用就是从这座蕴含知识宝藏的金矿中发掘中有商业价值的真金白银出来。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据中蕴藏着价值已经是众所周知的事情了，那么如何从这些庞大的数据中发掘出我们想要的知识价值，这正是大数据技术目前正在解决的事情，包括大数据存储与计算，也包括大数据分析、挖掘、机器学习等应用。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们不曾生活在美国西部淘金的繁荣时代，错过了那个光荣与梦想、自由与激情的个人英雄主义时代。但是现在，一个更具划时代意义的大数据淘金时代已经到来，而你我正身处其中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计人的驾驶行为进行机器学习，就是无人驾驶；统计股票的历史交易数据进行机器学习，就得到量化交易系统。统计大家p图的参数进行智能美颜。统计过去在网上的商品浏览进行机器学习，就有了亚马逊的智能推荐物品；蚂蚁金服上统计过去的消费能力和信贷进行机器学习，来预测可在借呗上借多少钱，这是一个大数据和机器智能的时代，我们身处其中，需要的是适应并不断学习前行才不会在一段接一段的浪潮中被退去。推荐系统、广告系统、估价系统、风控系统都是现在广泛使用了机器学习的。微软识花</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始学大数据-01 大数据的前世今生</title>
    <url>/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE-01-%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="大数据的前世今生"><a href="#大数据的前世今生" class="headerlink" title="大数据的前世今生"></a>大数据的前世今生</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大多数公司还专注于提升单机性能，寻找更贵更好的服务器，google的思路是部署一个大规模服务器集群，通过分布式的方式将海量数据存储在这个集群上，然后利用集群上所有服务器进行数据计算。这样不需要昂贵的服务器，却可以更好实现目的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lucene:全文检索引擎工具包</span><br><span class="line">nutch:开源搜索引擎</span><br><span class="line">Doug Cutting:lucene的创始人，nutch的开发者，hadoop之父</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2004前后google三篇论文(三驾马车: 分布式文件系统GFS、大数据分布式计算框架MapReduce和NoSQL数据库系统BigTable)——————&gt;doug cutting实现了类似GFS和mapreduce的功能————————&gt;2006年 doug cutting将nutch的大数据相关功能分离，形成独立的项目专门维护大数据技术也就是hadoop,主要包括hadoop分布式文件系统hdfs,大数据计算引擎mapreduce。------&gt;yahoo,baidu,alibaba使用Hadoop进行大数据存储和计算-----&gt;2008年Hadoop正式成为Apache的顶级项目。同年专门运营Hadoop的商业公司Cloudera成立。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop纯用java编写的软件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yahoo开发pig脚本语言(由于使用mapreduce进行大数据编程太麻烦)，类似于sql语法，开发者可以使用pig脚本描述要对大数据集上进行的操作，pig进行编译后会生成mapreduce程序，然后在hadoop上运行。缺点:虽然比直接mapredue编程容易，但需学习新的脚本语法。-----&gt;facebook发布Hive,支持sql语法来进行大数据计算，hive会将sql语句转换成mapreduce程序。这样熟悉数据库的数据分析师和工程师便可以无门槛的进行大数据分析和处理了。极大的降低了hadoop的使用难度。----&gt;随后众多hadoop的周边产品开始出现，大数据生态体系开始形成(包括sqoop:专门将关系数据库中的数据导入导出到hadoop平台; Flume:聚合和传输; Oozie:MapReduce工作流调度引擎)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在hadoop早期，mapreduce既是执行引擎，又是资源调度框架，服务器集群的资源调度由MapReduce自己完成。但这样不利于资源复用，也使得mapreduce非常的臃肿。yarn应运而生，将mapreduce资源调度和执行引擎分离开来。2012年，yarn成为一个独立项目开始运营，随后被各大大数据产品支持，成为大数据平台上最主流的资源调度系统。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于MapReduce进行机器学习计算时性能非常差因为机器学习算法通常需要很多次迭代计算，而mapreduce每执行一次map和reduce计算都需要重新启动一次作业，带来了大量的无谓消耗。还有一点就是mapreduce使用磁盘作为存储介质，而2012年，内存已经突破容量和成本限制，成为数据运行过程中的主要存储介质。spark一经推出，立即受到业界的追捧，并逐步替代MapReduce在企业应用中的地位。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">批处理计算：像mapreduce，spark这类计算框架处理的业务场景，因为它们通常针对以&#39;天&#39;为单位产生的数据进行一次计算，得到所需的结果，这中间计算需要花费的时间大概是几十分钟或更长的时间。</span><br><span class="line">大数据离线计算：计算的数据是非在线得到的实时数据，而是历史数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在典型的大数据业务场景下，数据业务最通常的做法是，采用批处理的技术处理历史全量数据，采用流式计算处理实时新增数据。flink计算引擎，同时支持流式计算和批处理计算。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NoSql系统处理的也是大规模海量数据的存储和访问，所以也被归为大数据技术。曾在2011年左右非常火爆，涌现了Hbase,Cassandra等许多优秀的产品。其中Hbase是从Hadoop中分离出来的，基于HDFS的NoSql系统。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大数据处理的主要应用场景包括数据分析，数据挖掘，机器学习。</span><br><span class="line">大数据分析：主要用hive,spark sql等sql引擎来完成</span><br><span class="line">数据挖掘和机器学习：有专门的机器学习框架TensorFlow,Mahout以及MLlib等，内置了主要的机器学习和数据挖掘算法。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/7uqqHK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/12/7uqqHK.jpg" alt="7uqqHK.jpg"></a></p>
<hr>
<blockquote>
<p>在历史前进逻辑中前进，在时代发展的潮流中发展。</p>
<p>在风口中飞翔。</p>
</blockquote>
]]></content>
      <categories>
        <category>从零开始学大数据</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas-基础操作</title>
    <url>/pandas-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="DataFrame基础操作"><a href="#DataFrame基础操作" class="headerlink" title="DataFrame基础操作"></a>DataFrame基础操作</h1><h2 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index=[<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>],columns=[<span class="string">'a'</span>])</span><br></pre></td></tr></table></figure>

<h3 id="多维列表"><a href="#多维列表" class="headerlink" title="多维列表"></a>多维列表</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df1=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">2</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>],[<span class="number">8</span>,<span class="number">8</span>,<span class="literal">None</span>]])</span><br></pre></td></tr></table></figure>



<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df2=pd.DataFrame(&#123;<span class="string">'b'</span>:[<span class="number">4</span>,<span class="number">7</span>,<span class="number">-3</span>,<span class="number">2</span>],<span class="string">'a'</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df4=pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],columns=[<span class="string">'oh'</span>,<span class="string">'te'</span>,<span class="string">'ca'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="排序DataFrame"><a href="#排序DataFrame" class="headerlink" title="排序DataFrame"></a>排序DataFrame</h2><h3 id="sort-index"><a href="#sort-index" class="headerlink" title="sort_index()"></a>sort_index()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df1=pd.DataFrame([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],index=[<span class="number">10</span>,<span class="number">52</span>,<span class="number">24</span>,<span class="number">158</span>,<span class="number">112</span>],columns=[<span class="string">'s'</span>])</span><br><span class="line">df1.sort_index()</span><br></pre></td></tr></table></figure>

<h3 id="sort-values"><a href="#sort-values" class="headerlink" title="sort_values()"></a>sort_values()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df2&#x3D;pd.DataFrame(&#123;&#39;b&#39;:[4,7,-3,2],&#39;a&#39;:[0,1,0,1]&#125;)</span><br><span class="line">df2.sort_values(by&#x3D;&#39;b&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="drop"><a href="#drop" class="headerlink" title="drop()"></a>drop()</h3><h4 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df4=pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],columns=[<span class="string">'oh'</span>,<span class="string">'te'</span>,<span class="string">'ca'</span>])</span><br><span class="line">df4.drop(<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df4=pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>),index=[<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>],columns=[<span class="string">'oh'</span>,<span class="string">'te'</span>,<span class="string">'ca'</span>])</span><br><span class="line">df4.drop([<span class="string">'oh'</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除None值"><a href="#删除None值" class="headerlink" title="删除None值"></a>删除None值</h3><h4 id="dropna"><a href="#dropna" class="headerlink" title="dropna()"></a>dropna()</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df1=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">2</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>],[<span class="number">8</span>,<span class="number">8</span>,<span class="literal">None</span>]])</span><br><span class="line"> df1.dropna()</span><br></pre></td></tr></table></figure>

<h4 id="dropna-how-’all’"><a href="#dropna-how-’all’" class="headerlink" title="dropna(how=’all’)"></a>dropna(how=’all’)</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">df1=pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">2</span>],[<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>],[<span class="number">8</span>,<span class="number">8</span>,<span class="literal">None</span>]])</span><br><span class="line">df1.dropna(how=<span class="string">'all'</span>)</span><br></pre></td></tr></table></figure>









<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>python廖雪峰-基础</title>
    <url>/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><h3 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><p><em>Python可以处理任意大小的整数，当然包括负整数</em></p>
<p><em>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等</em></p>
<p><em>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code></em></p>
<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><p><em>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）</em></p>
<p><em>之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，<code>1.23x10**9</code>和<code>12.3x10**8</code>是完全相等的</em></p>
<p><em>但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等</em></p>
<p><em>整数和浮点数在计算机内部存储的方式是不同的，<strong>整数运算永远是精确的</strong>（除法难道也是精确的？是的！），而<strong>浮点数运算</strong>则可能会有<strong>四舍五入的</strong>误差</em></p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p><em>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本</em></p>
<p><em>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符</em></p>
<p><em>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'I\'m \"OK\"!'</span> <span class="comment"># I'm "OK"!</span></span><br></pre></td></tr></table></figure>

<p><em>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</span><br><span class="line">\       \</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure>

<p><em>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3'''</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure>

<h5 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h5><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><p><em>None</em></p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><em>可以将一个类型的变量赋值为另一种类型</em></p>
<p><em>这种变量本身类型不固定的语言称之为<strong>动态语言</strong>，与之对应的是<strong>静态语言</strong>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</em></p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p><em>常量就是不能变的变量</em></p>
<p><em>在Python中，通常用全部大写的变量名表示常量</em></p>
<h3 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p><em>计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</em></p>
<p><em>最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码</em></p>
<p><em>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去</em></p>
<p><em>各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</em></p>
<p><strong>Unicode</strong>把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>
<p><strong>ASCII编码和Unicode编码的区别</strong>：<em>ASCII编码是1个字节，而Unicode编码通常是2个字节</em></p>
<p><em>如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code></em></p>
<p><em>新<strong>的问题又出现了</strong>：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算</em></p>
<p><em>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码，<strong>UTF-8编码</strong>把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</em></p>
<p><em>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</em></p>
<p><em>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</em></p>
<p><em>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器</em></p>
<h4 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h4><p><em>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言</em></p>
<p><strong>对于单个字符的编码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(ord(<span class="string">'a'</span>)) <span class="comment"># 97</span></span><br><span class="line">print(chr(<span class="number">66</span>))  <span class="comment"># 'B'</span></span><br></pre></td></tr></table></figure>

<p><strong>知道字符的整数编码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'\u4e2d\u6587'</span></span><br><span class="line"><span class="comment"># 中文</span></span><br></pre></td></tr></table></figure>

<h5 id="str-replace-‘x’-‘b’"><a href="#str-replace-‘x’-‘b’" class="headerlink" title="str.replace(‘x’, ‘b’)"></a>str.replace(‘x’, ‘b’)</h5><h4 id="x-encode-and-b’xx’-decode"><a href="#x-encode-and-b’xx’-decode" class="headerlink" title="x.encode() and b’xx’.decode()"></a>x.encode() and b’xx’.decode()</h4><h5 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h5><p><em>一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code></em></p>
<p><em>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">b'ABC'</span></span><br></pre></td></tr></table></figure>

<p><strong>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>) <span class="comment"># b'ABC'</span></span><br><span class="line"><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>) <span class="comment"># b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="comment"># 含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错</span></span><br></pre></td></tr></table></figure>

<h5 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p><em><code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc %s'</span>%<span class="string">'dhkhs'</span></span><br><span class="line"><span class="string">'hdhi %s %d'</span>%(<span class="string">'kjkd'</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%d</span><br><span class="line">%s  <span class="comment"># 不清楚就直接用它，%s永远起作用，它会把任何数据类型转换为字符串</span></span><br><span class="line">%f</span><br><span class="line">%x  十六进制整数</span><br></pre></td></tr></table></figure>

<p><strong>字符串里面的<code>%</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'a%%b'</span> <span class="comment"># a%b</span></span><br></pre></td></tr></table></figure>

<h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>)</span><br><span class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure>

<h5 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h5><p><em>它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'The area of a circle with radius <span class="subst">&#123;r&#125;</span> is <span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>'</span>)</span><br><span class="line">The area of a circle <span class="keyword">with</span> radius <span class="number">2.5</span> <span class="keyword">is</span> <span class="number">19.62</span></span><br></pre></td></tr></table></figure>

<h3 id="tuple和list"><a href="#tuple和list" class="headerlink" title="tuple和list"></a>tuple和list</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p><em>list是一种有序的集合</em></p>
<h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><h5 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">l.insert(<span class="number">1</span>, <span class="string">'x'</span>)</span><br></pre></td></tr></table></figure>



<h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l.pop() <span class="comment"># 删除末尾</span></span><br><span class="line">l.pop(i) <span class="comment"># 删除指定位置</span></span><br></pre></td></tr></table></figure>

<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><p><em>有序列表叫元组，tuple一旦初始化就不能修改</em></p>
<p><em>但如果元组里的某元素是列表时，列表里的元素可以改变</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>) <span class="comment"># 定义一个元素的元组不能这样定义，解释器默认为是数学中的小空号，可以在后面加‘，’</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><em>if-elif…..else只要某条件满足，后续的不再判断</em></p>
<p><em>if-if-if-else</em>:<em>每步都会判断，除了else</em></p>
<h3 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h3><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><p><em>dict内部存放的顺序和key放入的顺序是没有关系的</em></p>
<p><em>dict的key必须是<strong>不可变对象</strong>.在Python中，字符串、整数等都是不可变的</em></p>
<h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><h5 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line">d[<span class="string">'c'</span>] <span class="comment"># 会报错，避免报错用下面的方法</span></span><br><span class="line"><span class="string">'c'</span> <span class="keyword">in</span> d</span><br><span class="line">d.get(<span class="string">'c'</span>) <span class="comment"># 返回None</span></span><br><span class="line">d.get(<span class="string">'c'</span>, <span class="number">1</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h5 id="删除键"><a href="#删除键" class="headerlink" title="删除键"></a>删除键</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.pop(<span class="string">'a'</span>) <span class="comment"># 值也会随之删除</span></span><br></pre></td></tr></table></figure>

<h5 id="dict和list比较"><a href="#dict和list比较" class="headerlink" title="dict和list比较"></a>dict和list比较</h5><p>1.查找和插入的速度极快，不会随着key的增加而变慢；</p>
<p>2.需要占用大量的内存，内存浪费多</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p><em>在set中，没有重复的key，无序</em></p>
<p><em>要创建一个set，需要提供一个list作为输入集合</em>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.remove(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>python廖雪峰-IO编程</title>
    <url>/python%E5%BB%96%E9%9B%AA%E5%B3%B0-IO%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h1><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</span><br><span class="line"></span><br><span class="line">读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）</span><br></pre></td></tr></table></figure>

<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="try…-finally方式"><a href="#try…-finally方式" class="headerlink" title="try….finally方式"></a>try….finally方式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符</span><br><span class="line">f = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示</span><br><span class="line">f.read()</span><br><span class="line"><span class="string">'Hello, world!'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<span class="keyword">try</span> ... <span class="keyword">finally</span>来实现</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>

<h4 id="with-open-…-as-f"><a href="#with-open-…-as-f" class="headerlink" title="with open(…) as f"></a>with open(…) as f</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是每次都这么写实在太繁琐，所以，Python引入了<span class="keyword">with</span>语句来自动帮我们调用close()方法</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br><span class="line">    </span><br><span class="line">这和前面的<span class="keyword">try</span> ... <span class="keyword">finally</span>是一样的，但是代码更佳简洁，并且不必调用f.close()方法</span><br></pre></td></tr></table></figure>

<h4 id="读入大小问题"><a href="#读入大小问题" class="headerlink" title="读入大小问题"></a>读入大小问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">调用read()会一次性读取文件的全部内容，如果文件有<span class="number">10</span>G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</span><br><span class="line"></span><br><span class="line">如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    print(line.strip()) <span class="comment"># 把末尾的'\n'删掉</span></span><br></pre></td></tr></table></figure>

<h2 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</span><br><span class="line"></span><br><span class="line">StringIO就是在内存中创建的file-like Object，常用作临时缓冲</span><br></pre></td></tr></table></figure>

<h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前面讲的默认都是读取文本文件，并且是UTF<span class="number">-8</span>编码的文本文件。要读取二进制文件，比如图片、视频等等，用<span class="string">'rb'</span>模式打开文件即可：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/michael/test.jpg'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...'</span> <span class="comment"># 十六进制表示的字节</span></span><br></pre></td></tr></table></figure>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要读取非UTF<span class="number">-8</span>编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/michael/gbk.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'测试'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/michael/gbk.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>, errors=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符<span class="string">'w'</span>或者<span class="string">'wb'</span>表示写文本文件或写二进制文件：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'Hello, world!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line">你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<span class="keyword">with</span>语句来得保险：</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要写入特定编码的文本文件，请给open()函数传入encoding参数，将字符串自动转换成指定编码。</span><br><span class="line"></span><br><span class="line">细心的童鞋会发现，以<span class="string">'w'</span>模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入<span class="string">'a'</span>以追加（append）模式写入。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>python廖雪峰-简介</title>
    <url>/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>python廖雪峰-异步IO</title>
    <url>/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E5%BC%82%E6%AD%A5IO.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在学习异步IO模型前，我们先来了解协程。</span><br><span class="line">协程，又称微线程，纤程。英文名Coroutine。</span><br><span class="line">协程的概念很早就提出来了，但直到最近几年才在某些语言（如Lua）中得到广泛应用。</span><br><span class="line">子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。</span><br><span class="line">所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。</span><br><span class="line">子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。</span><br><span class="line">协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  但是在A中是没有调用B的，所以协程的调用比函数调用理解起来要难一些。</span><br><span class="line">  看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？</span><br><span class="line">  最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</span><br><span class="line">  第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</span><br><span class="line"></span><br><span class="line">因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python对协程的支持是通过generator实现的。</span><br><span class="line">  在generator中，我们不但可以通过for循环来迭代，还可以不断调用next()函数获取由yield语句返回的下一个值。</span><br><span class="line">  但是Python的yield不但可以返回一个值，它还可以接收调用者发出的参数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。</span><br><span class="line">如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    r = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">'[CONSUMER] Consuming %s...'</span> % n)</span><br><span class="line">        r = <span class="string">'200 OK'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(c)</span>:</span></span><br><span class="line">    c.send(<span class="literal">None</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'[PRODUCER] Producing %s...'</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(<span class="string">'[PRODUCER] Consumer return: %s'</span> % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">c = consumer()</span><br><span class="line">produce(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[PRODUCER] Producing <span class="number">1.</span>..</span><br><span class="line">[CONSUMER] Consuming <span class="number">1.</span>..</span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[PRODUCER] Producing <span class="number">2.</span>..</span><br><span class="line">[CONSUMER] Consuming <span class="number">2.</span>..</span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[PRODUCER] Producing <span class="number">3.</span>..</span><br><span class="line">[CONSUMER] Consuming <span class="number">3.</span>..</span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[PRODUCER] Producing <span class="number">4.</span>..</span><br><span class="line">[CONSUMER] Consuming <span class="number">4.</span>..</span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[PRODUCER] Producing <span class="number">5.</span>..</span><br><span class="line">[CONSUMER] Consuming <span class="number">5.</span>..</span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意到consumer函数是一个generator，把一个consumer传入produce后：</span><br><span class="line">首先调用c.send(<span class="literal">None</span>)启动生成器；</span><br><span class="line">然后，一旦生产了东西，通过c.send(n)切换到consumer执行；</span><br><span class="line">consumer通过<span class="keyword">yield</span>拿到消息，处理，又通过<span class="keyword">yield</span>把结果传回；</span><br><span class="line">produce拿到consumer处理的结果，继续生产下一条消息；</span><br><span class="line">produce决定不生产了，通过c.close()关闭consumer，整个过程结束。</span><br><span class="line">整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</span><br><span class="line">最后套用Donald Knuth的一句话总结协程的特点：“子程序就是协程的一种特例。”</span><br></pre></td></tr></table></figure>

<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asyncio是Python <span class="number">3.4</span>版本引入的标准库，直接内置了对异步IO的支持。</span><br><span class="line"></span><br><span class="line">asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。</span><br><span class="line"></span><br><span class="line">用asyncio实现Hello world代码如下</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    <span class="comment"># 异步调用asyncio.sleep(1):</span></span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取EventLoop:</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 执行coroutine</span></span><br><span class="line">loop.run_until_complete(hello())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@asyncio.coroutine把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。</span></span><br><span class="line"></span><br><span class="line">hello()会首先打印出Hello world!，然后，<span class="keyword">yield</span> <span class="keyword">from</span>语法可以让我们方便地调用另一个generator。由于asyncio.sleep()也是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环。当asyncio.sleep()返回时，线程就可以从<span class="keyword">yield</span> <span class="keyword">from</span>拿到返回值（此处是<span class="literal">None</span>），然后接着执行下一行语句。</span><br><span class="line"></span><br><span class="line">把asyncio.sleep(<span class="number">1</span>)看成是一个耗时<span class="number">1</span>秒的IO操作，在此期间，主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</span><br><span class="line"></span><br><span class="line">我们用Task封装两个coroutine试试</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello world! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</span><br><span class="line">Hello world! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</span><br><span class="line">(暂停约<span class="number">1</span>秒)</span><br><span class="line">Hello again! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</span><br><span class="line">Hello again! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">由打印的当前线程名称可以看出，两个coroutine是由同一个线程并发执行的。</span><br><span class="line">如果把asyncio.sleep()换成真正的IO操作，则多个coroutine就可以由一个线程并发执行。</span><br><span class="line">我们用asyncio的异步网络连接来获取sina、sohu和<span class="number">163</span>的网站首页</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wget</span><span class="params">(host)</span>:</span></span><br><span class="line">    print(<span class="string">'wget %s...'</span> % host)</span><br><span class="line">    connect = asyncio.open_connection(host, <span class="number">80</span>)</span><br><span class="line">    reader, writer = <span class="keyword">yield</span> <span class="keyword">from</span> connect</span><br><span class="line">    header = <span class="string">'GET / HTTP/1.0\r\nHost: %s\r\n\r\n'</span> % host</span><br><span class="line">    writer.write(header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> writer.drain()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = <span class="keyword">yield</span> <span class="keyword">from</span> reader.readline()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">b'\r\n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'%s header &gt; %s'</span> % (host, line.decode(<span class="string">'utf-8'</span>).rstrip()))</span><br><span class="line">    <span class="comment"># Ignore the body, close the socket</span></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [wget(host) <span class="keyword">for</span> host <span class="keyword">in</span> [<span class="string">'www.sina.com.cn'</span>, <span class="string">'www.sohu.com'</span>, <span class="string">'www.163.com'</span>]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget www.sohu.com...</span><br><span class="line">wget www.sina.com.cn...</span><br><span class="line">wget www<span class="number">.163</span>.com...</span><br><span class="line">(等待一段时间)</span><br><span class="line">(打印出sohu的header)</span><br><span class="line">www.sohu.com header &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www.sohu.com header &gt; Content-Type: text/html</span><br><span class="line">...</span><br><span class="line">(打印出sina的header)</span><br><span class="line">www.sina.com.cn header &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www.sina.com.cn header &gt; Date: Wed, <span class="number">20</span> May <span class="number">2015</span> <span class="number">04</span>:<span class="number">56</span>:<span class="number">33</span> GMT</span><br><span class="line">...</span><br><span class="line">(打印出<span class="number">163</span>的header)</span><br><span class="line">www<span class="number">.163</span>.com header &gt; HTTP/<span class="number">1.0</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line">www<span class="number">.163</span>.com header &gt; Server: Cdn Cache Server V2<span class="number">.0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可见<span class="number">3</span>个连接由一个线程通过coroutine并发完成</span><br><span class="line"></span><br><span class="line">asyncio提供了完善的异步IO支持；</span><br><span class="line">异步操作需要在coroutine中通过<span class="keyword">yield</span> <span class="keyword">from</span>完成；</span><br><span class="line">多个coroutine可以封装成一组Task然后并发执行</span><br></pre></td></tr></table></figure>



<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用asyncio提供的@asyncio.coroutine可以把一个generator标记为coroutine类型，然后在coroutine内部用<span class="keyword">yield</span> <span class="keyword">from</span>调用另一个coroutine实现异步操作。</span><br><span class="line"></span><br><span class="line">为了简化并更好地标识异步IO，从Python <span class="number">3.5</span>开始引入了新的语法<span class="keyword">async</span>和<span class="keyword">await</span>，可以让coroutine的代码更简洁易读。</span><br><span class="line">请注意，<span class="keyword">async</span>和<span class="keyword">await</span>是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换:</span><br><span class="line">    把@asyncio.coroutine替换为<span class="keyword">async</span>；</span><br><span class="line">	把<span class="keyword">yield</span> <span class="keyword">from</span>替换为<span class="keyword">await</span>。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用新语法重新编写如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    r = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asyncio可以实现单线程并发IO操作。如果仅用在客户端，发挥的威力不大。如果把asyncio用在服务器端，例如Web服务器，由于HTTP连接就是IO操作，因此可以用单线程+coroutine实现多用户的高并发支持。</span><br><span class="line"></span><br><span class="line">asyncio实现了TCP、UDP、SSL等协议，aiohttp则是基于asyncio实现的HTTP框架</span><br></pre></td></tr></table></figure>

<pre><code class="python"></code></pre>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python廖雪峰</tag>
        <tag>async</tag>
      </tags>
  </entry>
  <entry>
    <title>jsDeliver+github打造属于自己的图床</title>
    <url>/jsDeliver-github%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><h2 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h2><p><em>“图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。”<br>注意：<code>github 支持的就是cdn加速</code></em></p>
<h2 id="jsDeliver-github打造属于自己的图床"><a href="#jsDeliver-github打造属于自己的图床" class="headerlink" title="jsDeliver+github打造属于自己的图床"></a>jsDeliver+github打造属于自己的图床</h2><p><a href="https://blog.csdn.net/weixin_45631738/article/details/104731332" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h3 id="什么是jsDelive"><a href="#什么是jsDelive" class="headerlink" title="什么是jsDelive"></a>什么是jsDelive</h3><p><em>jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。</em></p>
<h3 id="jsDelive加载资源"><a href="#jsDelive加载资源" class="headerlink" title="jsDelive加载资源"></a>jsDelive加载资源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的用户名&#x2F;你的仓库名@发布的版本号&#x2F;文件路径</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;加载js</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;yremp&#x2F;cdn@1.0&#x2F;js&#x2F;jquery.js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;加载图片</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;yremp&#x2F;cdn@1.0&#x2F;images&#x2F;hb.png</span><br></pre></td></tr></table></figure>

<h2 id="gitee搭建图床"><a href="#gitee搭建图床" class="headerlink" title="gitee搭建图床"></a>gitee搭建图床</h2><p><a href="https://blog.csdn.net/Mark_md/article/details/121443252" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h2 id="现有的图床"><a href="#现有的图床" class="headerlink" title="现有的图床"></a>现有的图床</h2><h3 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h3><p><a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">https://imgchr.com/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路过图床</span><br><span class="line">网站： https:&#x2F;&#x2F;imgchr.com&#x2F;</span><br><span class="line">简介：支持免注册上传图片，永久存储，支持HTTPS加密访 问和调用图片，提供多种图片链接格式，成立于2011年</span><br><span class="line">限制：最大10M</span><br></pre></td></tr></table></figure>

<h3 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h3><p><a href="https://sm.ms/" target="_blank" rel="external nofollow noopener noreferrer">https://sm.ms/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网站:https:&#x2F;&#x2F;sm.ms&#x2F;</span><br><span class="line">特点：永久存储免注册，图片链接支持https，可以删除上传 的图片，提供多种图片链接格式，建立于2015年，速度比路过图床慢</span><br><span class="line">图片上传限制：每个图片最大5M，每次最多上传10张</span><br></pre></td></tr></table></figure>

<h3 id="小贱贱图床"><a href="#小贱贱图床" class="headerlink" title="小贱贱图床"></a>小贱贱图床</h3><p><a href="http://pic.xiaojianjian.net" target="_blank" rel="external nofollow noopener noreferrer">http://pic.xiaojianjian.net</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网站：http:&#x2F;&#x2F;pic.xiaojianjian.net</span><br><span class="line">需要注册，每日可以上传图片30张，上传后可以获取一个简单的外链，速度很快，但是图片清晰度会变低</span><br></pre></td></tr></table></figure>

<h3 id="聚合图床"><a href="#聚合图床" class="headerlink" title="聚合图床"></a>聚合图床</h3><p><a href="https://www.superbed.cn/" target="_blank" rel="external nofollow noopener noreferrer">https://www.superbed.cn</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网站：https:&#x2F;&#x2F;www.superbed.cn</span><br><span class="line">简介：将图片分发到多处备份，借助其本身的CDN加速功能，节省服务器流量，并且不用担心图片被删除，即便其中某几个图床上的图片被删除了，还有其他备份，保证万无一失，支持匿名和注册管理</span><br><span class="line">图片上传限制：无</span><br></pre></td></tr></table></figure>

<h3 id="堆爱外链"><a href="#堆爱外链" class="headerlink" title="堆爱外链"></a>堆爱外链</h3><p><a href="http://pan.duiai.cc/" target="_blank" rel="external nofollow noopener noreferrer">http://pan.duiai.cc</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址：http:&#x2F;&#x2F;pan.duiai.cc</span><br><span class="line">简介：注册才可以上传，存在的时间比较久，除了图片还可以上传视频和音乐</span><br><span class="line">限制：视频体积过大不可，但具体限制不明</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em>搭建图床的方法很多，就像<strong>七牛云</strong>30天后会回收测试域名，因此你必须要绑定自己的已经备案的域名，又拍云也需要绑定域名才可以使用，所有我不推荐大家使用。</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-美化</title>
    <url>/hexo-%E7%BE%8E%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="hexo-美化"><a href="#hexo-美化" class="headerlink" title="hexo-美化"></a>hexo-美化</h1><h2 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h2><p><a href="https://www.zhihu.com/question/268140594" target="_blank" rel="external nofollow noopener noreferrer">透明度设置</a></p>
<h2 id="个性化回到首页"><a href="#个性化回到首页" class="headerlink" title="个性化回到首页"></a>个性化回到首页</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="external nofollow noopener noreferrer">个性化回到首页</a></p>
<h2 id="打字点击特效"><a href="#打字点击特效" class="headerlink" title="打字点击特效"></a>打字点击特效</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="external nofollow noopener noreferrer">打字点击特效</a></p>
<h2 id="卡通人物"><a href="#卡通人物" class="headerlink" title="卡通人物"></a>卡通人物</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="external nofollow noopener noreferrer">个性化回到首页</a></p>
<h2 id="随机彩带"><a href="#随机彩带" class="headerlink" title="随机彩带"></a>随机彩带</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="external nofollow noopener noreferrer">随机彩带</a></p>
<p><a href>动态彩带</a></p>
<h2 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a>页面加载进度条</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="external nofollow noopener noreferrer">页面加载进度条</a></p>
<p>##</p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>大数据开发工程师-第一周 第一章</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8%20%E7%AC%AC1%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第一周-第一章"><a href="#第一周-第一章" class="headerlink" title="第一周-第一章"></a>第一周-第一章</h1><h2 id="群里问答"><a href="#群里问答" class="headerlink" title="群里问答"></a>群里问答</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即系查询框架哪个用的多?</span><br><span class="line">	impala，Elasticsearch、Druid、Presto、ClickHouse等都可以</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你们写好的SparkStreaming测试是怎么测试?在本地测试还是扔到Yarn测试?</span><br><span class="line">	一般是在测试环境里面测</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先IDEA 本地跑一下自测,然后放到测试环境的HDFS上 让yarn调度一下么?</span><br><span class="line">	是的，在本地验证代码的正确性，在测试集群中验证代码业务流程层面的正确性</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对实时计算所涉及的事务、容错性、可靠性有深入的理解</span><br><span class="line"></span><br><span class="line">这种问题，面试的时候  一般怎么回答？</span><br><span class="line">	分析下一下实时计算中的几种语义级别，能讲清楚就差不多了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实时计算事务也应该是弱事务吧</span><br><span class="line">	是的，大数据的高性能和事务其实是有点矛盾的</span><br><span class="line">	事务很少问，容错性会问到，这个课程里面有讲到，就是那几种语义级别，至少一次，仅一次等</span><br></pre></td></tr></table></figure>

<h2 id="群里配置问答"><a href="#群里配置问答" class="headerlink" title="群里配置问答"></a>群里配置问答</h2><h3 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h3><p><a href="https://imgchr.com/i/sWu1zQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWu1zQ.md.jpg" alt="sWu1zQ.jpg" border="0"></a></p>
<p><em>解决：没有配置flume的日志，缺少log4j的配置，在flume的conf目录下</em></p>
<h2 id="虚拟机网络问题"><a href="#虚拟机网络问题" class="headerlink" title="虚拟机网络问题"></a>虚拟机网络问题</h2><h3 id="为什么我这样配置ping不通外网-本机也Ping不了？"><a href="#为什么我这样配置ping不通外网-本机也Ping不了？" class="headerlink" title="为什么我这样配置ping不通外网 本机也Ping不了？"></a>为什么我这样配置ping不通外网 本机也Ping不了？</h3><p><a href="https://imgchr.com/i/sWuXY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuXY8.jpg" alt="sWuXY8.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWuOFf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuOFf.md.jpg" alt="sWuOFf.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWuqTP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuqTP.md.jpg" alt="sWuqTP.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWujfS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWujfS.md.jpg" alt="sWujfS.md.jpg" border="0"></a></p>
<p><em>解决：虚拟机防火墙需要关闭，虚拟机网卡为nat模式，配置后要重启</em></p>
<p><a href="https://imgchr.com/i/sWY4EQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWY4EQ.md.jpg" alt="sWY4EQ.jpg" border="0"></a></p>
<h3 id="vmnet8"><a href="#vmnet8" class="headerlink" title="vmnet8"></a>vmnet8</h3><p><em>我虚拟机和主机不在同一个网段 可能就靠这个vmnet8来做nat网络地址转换</em></p>
<p><em>解答：vmnet8是你的一块网卡，让你的虚拟机和你的物理机处于同一个网络，这样你的物理机和虚拟机可以互联互通，而你的虚拟机访问外网，就通过nat映射，使用你的物理机ip对外访问，NAT对应的还有PAT技术</em></p>
<h3 id="虚拟机ping得通本机，本机ping不通虚拟机"><a href="#虚拟机ping得通本机，本机ping不通虚拟机" class="headerlink" title="虚拟机ping得通本机，本机ping不通虚拟机"></a>虚拟机ping得通本机，本机ping不通虚拟机</h3><p><code>主要看vmnet8，简单的方式是让它自动获取ip。也可以根据虚拟机ip,掩码，默认网关来配置ip</code></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>第六章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="构建数据仓库"><a href="#构建数据仓库" class="headerlink" title="构建数据仓库"></a>构建数据仓库</h1><p><strong>数组仓库的组成</strong>：维度表+事实表<br><strong>维度表</strong>：主要存放基础属性。<br><strong>事实表</strong>：主要存放各种业务数据</p>
<h2 id="构建维度表"><a href="#构建维度表" class="headerlink" title="构建维度表"></a>构建维度表</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第五章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Kettle作业设计"><a href="#Kettle作业设计" class="headerlink" title="Kettle作业设计"></a>Kettle作业设计</h1><h2 id="作业的概念及组成"><a href="#作业的概念及组成" class="headerlink" title="作业的概念及组成"></a>作业的概念及组成</h2><p><em>一个作业包含一个或多个作业项，这些作业项以某种顺序来执行。作业执行顺序由作业项之间的跳和每个作业项的执行结果来决定。</em></p>
<p><strong>组成</strong>：作业项、作业跳(跳)、注释</p>
<h3 id="作业项"><a href="#作业项" class="headerlink" title="作业项"></a>作业项</h3><p><strong>与转换的步骤相比</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有影子复制</span><br><span class="line">作业项之间传递一个结果对象</span><br><span class="line">可以并行执行</span><br><span class="line">后缀名：转换（ktr),作业（kjb)</span><br></pre></td></tr></table></figure>

<h3 id="跳"><a href="#跳" class="headerlink" title="跳"></a>跳</h3><p><strong>三种判断方式:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>两种状态</strong>：Enabled(可用)、Disabled(不可用)</p>
<h2 id="作业的创建及常用作业项"><a href="#作业的创建及常用作业项" class="headerlink" title="作业的创建及常用作业项"></a>作业的创建及常用作业项</h2><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><p>回溯<br>多路径和回溯：作业运行的结果不是唯一的；<br>并行执行</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>定义</strong>：任意长度的字符串值，有自己的作用范围；<br><strong>定义变量的两种方式</strong>：系统设置和用户自定义；<br>系统设置：Java虚拟机、Kettle的内部变量；<br>用户自定义：使用kettle.properties文件。在“设置变量”中设置作业项的属性、获取属性文件中的变量</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>监控</strong>包括<strong>日志和邮件</strong>两种方式<br><em>日志包含的级别及其对应内容：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nothing:</span><br><span class="line">Error:</span><br><span class="line">Basic:</span><br><span class="line">Detailed:</span><br><span class="line">Debug:</span><br><span class="line">Rowlevel:</span><br><span class="line">Minimal:</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第四章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>







<h1 id="第四章-数据清理"><a href="#第四章-数据清理" class="headerlink" title="第四章-数据清理"></a>第四章-数据清理</h1><h2 id="数据清理概述"><a href="#数据清理概述" class="headerlink" title="数据清理概述"></a>数据清理概述</h2><p><em>无论数据清理是在加载到数据仓库之前，还是在从数据仓库抽取数据时，都不可能跳过数据清理这个过程</em></p>
<h3 id="常用的数据清理步骤"><a href="#常用的数据清理步骤" class="headerlink" title="常用的数据清理步骤"></a>常用的数据清理步骤</h3><p><strong>kettle中几个常用数据清理步骤：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算器；</span><br><span class="line">字符串替换；</span><br><span class="line">字符串操作；</span><br><span class="line">字符串剪切：对字符串做剪切的功能；</span><br><span class="line">拆分字段；</span><br><span class="line">值映射；</span><br><span class="line">字段选择：可以对字段进行选择、删除、重命名等操作；</span><br><span class="line">去除重复记录和去除重复记录(哈希值)的两个步骤。</span><br></pre></td></tr></table></figure>

<h3 id="字符串清理"><a href="#字符串清理" class="headerlink" title="字符串清理"></a>字符串清理</h3><h3 id="字段清理"><a href="#字段清理" class="headerlink" title="字段清理"></a>字段清理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拆分字段成多行(列拆分为多行)：支持正则表达式；</span><br><span class="line">拆分字段；</span><br><span class="line">合并字段；</span><br><span class="line">字段选择： “选择和修改”、“移除”和“元数据”三个分类</span><br></pre></td></tr></table></figure>

<h4 id="列拆分为多行"><a href="#列拆分为多行" class="headerlink" title="列拆分为多行"></a>列拆分为多行</h4><p><a href="https://imgchr.com/i/sBjjIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/16/sBjjIA.png" alt="sBjjIA.png" border="0"></a></p>
<h4 id="拆分字段"><a href="#拆分字段" class="headerlink" title="拆分字段"></a>拆分字段</h4><img src="https://s3.ax1x.com/2021/01/16/sBvwLD.png" alt="sBvwLD.png" border="0">

<h2 id="数据排重"><a href="#数据排重" class="headerlink" title="数据排重"></a>数据排重</h2><h3 id="如何识别重复数据"><a href="#如何识别重复数据" class="headerlink" title="如何识别重复数据"></a>如何识别重复数据</h3><p><em>数据是否指的同一客观实体</em></p>
<p><strong>重复数据分为两类：</strong>完全重复数据，不完全重复数据</p>
<p><strong>完全重复数据</strong>：两个数据行的数据完全一致</p>
<p><strong>不完全重复数据：</strong>客观上表示现实世界的同一实体，但由于表达方式不同或拼写错误等原因，导致数据存在多条重复</p>
<h3 id="去除完全重复数据"><a href="#去除完全重复数据" class="headerlink" title="去除完全重复数据"></a>去除完全重复数据</h3><h4 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h4><p><em>只能处理事先排好序的数据</em></p>
<h4 id="去除重复记录-哈希值"><a href="#去除重复记录-哈希值" class="headerlink" title="去除重复记录(哈希值)"></a>去除重复记录(哈希值)</h4><h3 id="去除不完全重复数据"><a href="#去除不完全重复数据" class="headerlink" title="去除不完全重复数据"></a>去除不完全重复数据</h3><h2 id="使用脚本组件进行数据清理"><a href="#使用脚本组件进行数据清理" class="headerlink" title="使用脚本组件进行数据清理"></a>使用脚本组件进行数据清理</h2><h3 id="使用JavaScript代码组件清理数据"><a href="#使用JavaScript代码组件清理数据" class="headerlink" title="使用JavaScript代码组件清理数据"></a>使用JavaScript代码组件清理数据</h3><h3 id="使用正则表达式组件清理数据"><a href="#使用正则表达式组件清理数据" class="headerlink" title="使用正则表达式组件清理数据"></a>使用正则表达式组件清理数据</h3><h3 id="使用其它脚本组件清理数据"><a href="#使用其它脚本组件清理数据" class="headerlink" title="使用其它脚本组件清理数据"></a>使用其它脚本组件清理数据</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第三章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第三章-基于kettle的数据导入与导出"><a href="#第三章-基于kettle的数据导入与导出" class="headerlink" title="第三章-基于kettle的数据导入与导出"></a>第三章-基于kettle的数据导入与导出</h1><h2 id="基于文件的数据导入与导出"><a href="#基于文件的数据导入与导出" class="headerlink" title="基于文件的数据导入与导出"></a>基于文件的数据导入与导出</h2><h3 id="文本文件的导入与导出"><a href="#文本文件的导入与导出" class="headerlink" title="文本文件的导入与导出"></a>文本文件的导入与导出</h3><p><strong>文本文件分类</strong>：分隔符文件；固定宽度文件</p>
<h3 id="文本文件的导入与导出案例"><a href="#文本文件的导入与导出案例" class="headerlink" title="文本文件的导入与导出案例"></a>文本文件的导入与导出案例</h3><h3 id="Excel文件的导入与导出"><a href="#Excel文件的导入与导出" class="headerlink" title="Excel文件的导入与导出"></a>Excel文件的导入与导出</h3><p><em>Excel文件：分为<strong>结构化的表格数据</strong>和<strong>非结构化的表格数据</strong>；对于非结构化表格数据，可能表里包含有多个字段值的列或者有重复的一组字段等</em></p>
<h3 id="Excel文件的导入与导出案例"><a href="#Excel文件的导入与导出案例" class="headerlink" title="Excel文件的导入与导出案例"></a>Excel文件的导入与导出案例</h3><h3 id="XML文件的导入与导出"><a href="#XML文件的导入与导出" class="headerlink" title="XML文件的导入与导出"></a>XML文件的导入与导出</h3><h3 id="XML文件的导入与导出案例"><a href="#XML文件的导入与导出案例" class="headerlink" title="XML文件的导入与导出案例"></a>XML文件的导入与导出案例</h3><h3 id="JSON文件的导入与导出"><a href="#JSON文件的导入与导出" class="headerlink" title="JSON文件的导入与导出"></a>JSON文件的导入与导出</h3><h3 id="JSON文件的导入与导出案例"><a href="#JSON文件的导入与导出案例" class="headerlink" title="JSON文件的导入与导出案例"></a>JSON文件的导入与导出案例</h3><h2 id="基于数据库的数据导入与导出"><a href="#基于数据库的数据导入与导出" class="headerlink" title="基于数据库的数据导入与导出"></a>基于数据库的数据导入与导出</h2><h3 id="关系型数据库的数据导入与导出"><a href="#关系型数据库的数据导入与导出" class="headerlink" title="关系型数据库的数据导入与导出"></a>关系型数据库的数据导入与导出</h3><p><em>面对关系型数据库，Kettle可以利用“表输入”、“表输出”步骤完成导入和导出</em></p>
<h3 id="MySQL数据库的数据导入与导出"><a href="#MySQL数据库的数据导入与导出" class="headerlink" title="MySQL数据库的数据导入与导出"></a>MySQL数据库的数据导入与导出</h3><p><em>“一般”选项卡常用的连接参数含义(主机名、数据库名称、端口号、用户名和密码)</em></p>
<h2 id="基于CDC变更数据的导入与导出"><a href="#基于CDC变更数据的导入与导出" class="headerlink" title="基于CDC变更数据的导入与导出"></a>基于CDC变更数据的导入与导出</h2><p><em>识别出变化的数据并只导入这部分数据被称为变化捕获数据(CDC)</em></p>
<h3 id="基于源数据的CDC"><a href="#基于源数据的CDC" class="headerlink" title="基于源数据的CDC"></a>基于源数据的CDC</h3><p><em>基于源数据的CDC：最常见的两个属性(时间戳、自增序列)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 缺点</span><br><span class="line">1.只有源数据中包含了插入时间和更新时间两个属性列，才能区分插入时间和更新时间</span><br><span class="line">2.不能捕获物理删除，只能捕获逻辑删除</span><br><span class="line">3.如果同一个时间周期内，数据被更新多次，那么只能同步最后一次更新操作，中间的更新操作都无法导入</span><br><span class="line">4.时间戳和基于序列的CDC操作不适合用于实时场景下数据导入，一般用于批量操作</span><br></pre></td></tr></table></figure>



<h3 id="基于源数据的CDC案例"><a href="#基于源数据的CDC案例" class="headerlink" title="基于源数据的CDC案例"></a>基于源数据的CDC案例</h3><h3 id="基于自增序列的源数据CDC案例"><a href="#基于自增序列的源数据CDC案例" class="headerlink" title="基于自增序列的源数据CDC案例"></a>基于自增序列的源数据CDC案例</h3><h3 id="基于触发器的CDC"><a href="#基于触发器的CDC" class="headerlink" title="基于触发器的CDC"></a>基于触发器的CDC</h3><h3 id="基于触发器的CDC的案例"><a href="#基于触发器的CDC的案例" class="headerlink" title="基于触发器的CDC的案例"></a>基于触发器的CDC的案例</h3><h3 id="基于快照的CDC"><a href="#基于快照的CDC" class="headerlink" title="基于快照的CDC"></a>基于快照的CDC</h3><h3 id="基于快照的CDC案例"><a href="#基于快照的CDC案例" class="headerlink" title="基于快照的CDC案例"></a>基于快照的CDC案例</h3><h3 id="基于日志的CDC"><a href="#基于日志的CDC" class="headerlink" title="基于日志的CDC"></a>基于日志的CDC</h3><h3 id="基于日志的CDC案例"><a href="#基于日志的CDC案例" class="headerlink" title="基于日志的CDC案例"></a>基于日志的CDC案例</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第二章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第二章-kettle的初步使用"><a href="#第二章-kettle的初步使用" class="headerlink" title="第二章-kettle的初步使用"></a>第二章-kettle的初步使用</h1><h2 id="kettle安装"><a href="#kettle安装" class="headerlink" title="kettle安装"></a>kettle安装</h2><h3 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h3><h3 id="kettle的下载安装与spoon的启动"><a href="#kettle的下载安装与spoon的启动" class="headerlink" title="kettle的下载安装与spoon的启动"></a>kettle的下载安装与spoon的启动</h3><h2 id="kettle的使用"><a href="#kettle的使用" class="headerlink" title="kettle的使用"></a>kettle的使用</h2><h3 id="转换的基本概念"><a href="#转换的基本概念" class="headerlink" title="转换的基本概念"></a>转换的基本概念</h3><p><strong>转换</strong>是ETL解决方案中最主要的部分，它负责处理抽取、转换、加载各阶段对数据行的各种操作</p>
<p><strong>组成</strong>：步骤、跳、注释</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><strong>步骤</strong>是转换中的基本组成部分，是一个图形化的组件</p>
<p><em>关键特性：(四点)，最主要的一点是步骤的名字唯一</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 步骤的四个主要特性</span><br><span class="line">1.步骤的名字唯一</span><br><span class="line">2.每个步骤都会读，写数据行（生成步骤是例外，他只能写数据行）</span><br><span class="line">3.步骤之间通过跳进行数据行的单向传输</span><br><span class="line">4.大多数步骤都可以有多个输出跳</span><br><span class="line">5.在运行转换时，一个线程运行一个步骤，所有步骤的线程几乎同时进行</span><br></pre></td></tr></table></figure>



<h4 id="转换的跳"><a href="#转换的跳" class="headerlink" title="转换的跳"></a>转换的跳</h4><p><em>跳定义了步骤之间进行数据传输的单向通道</em></p>
<p><strong>从执行角度看</strong>：不可能定义执行的顺序和起点步骤、终点步骤；<br><strong>从功能角度看</strong>：有明确的起点步骤和终点步骤</p>
<h4 id="数据行"><a href="#数据行" class="headerlink" title="数据行"></a>数据行</h4><p><em>在kettle里数据的单位是<strong>行</strong>.</em></p>
<p>一个数据行是<strong>零</strong>到<strong>多个字段</strong>的结合，是kettle的数据单位，简称行。</p>
<p><strong>字段</strong>包括的<strong>数据类型</strong>：<strong>7大类</strong>(String、Number、Integer、Date、Boolean、Binary)</p>
<h3 id="第一个转换案例"><a href="#第一个转换案例" class="headerlink" title="第一个转换案例"></a>第一个转换案例</h3><h4 id="创建转换"><a href="#创建转换" class="headerlink" title="创建转换"></a>创建转换</h4><h4 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h4><h4 id="可视化编程"><a href="#可视化编程" class="headerlink" title="可视化编程"></a>可视化编程</h4><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><h4 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h4><h4 id="主对象树"><a href="#主对象树" class="headerlink" title="主对象树"></a>主对象树</h4><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p><strong>环境变量</strong>：全局的，对所有转换和作业有效</p>
<h5 id="命名参数配置"><a href="#命名参数配置" class="headerlink" title="命名参数配置"></a>命名参数配置</h5><p><strong>命名参数</strong>：局部的，仅对当前转换和作业有效</p>
<h5 id="定时启动转换"><a href="#定时启动转换" class="headerlink" title="定时启动转换"></a>定时启动转换</h5><p><em>在windows下，可以使用控制面板中的计划任务执行批处理</em></p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;d d:\data-integration</span><br><span class="line">pan &#x2F;file&#x3D;xxxxx.ktr &#x2F;level&#x3D;Dtailed &#x2F;logfile&#x3D;xxx.log0</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数描述表</span><br><span class="line">参数名   	  参数值   		          作用</span><br><span class="line">file		文件名					指定转换或作业的文件名</span><br><span class="line">level		Error, Nothing,		  指定日志级别</span><br><span class="line">			Detail,Debug,Rowlevel	</span><br><span class="line">logfile		日志文件名	指定转换或作业的日志文件名</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第一章-数据预处理概述"><a href="#第一章-数据预处理概述" class="headerlink" title="第一章-数据预处理概述"></a>第一章-数据预处理概述</h1><h2 id="数据与处理的背景与目的"><a href="#数据与处理的背景与目的" class="headerlink" title="数据与处理的背景与目的"></a>数据与处理的背景与目的</h2><h3 id="数据预处理背景：数据质量"><a href="#数据预处理背景：数据质量" class="headerlink" title="数据预处理背景：数据质量"></a>数据预处理背景：数据质量</h3><p><em>高质量数据：能满足应用要求</em></p>
<p><em>数据质量涉及的因素：<strong>准确性，完整性，一致性，时效性，相关性，可信性，可解释性</strong>.</em></p>
<h4 id="数据库和数据仓库的角度"><a href="#数据库和数据仓库的角度" class="headerlink" title="数据库和数据仓库的角度"></a>数据库和数据仓库的角度</h4><p><em>当今世界大型数据库和数据仓库的共同缺点是存在<strong>不正确</strong>，<strong>不完整</strong>，<strong>不一致</strong>.</em></p>
<h4 id="应用角度"><a href="#应用角度" class="headerlink" title="应用角度"></a>应用角度</h4><p><em>时效性，相关性</em></p>
<h4 id="用户角度"><a href="#用户角度" class="headerlink" title="用户角度"></a>用户角度</h4><p><em>可信性，可解释性</em></p>
<h3 id="数据预处理目的"><a href="#数据预处理目的" class="headerlink" title="数据预处理目的"></a>数据预处理目的</h3><p><em>在数据挖掘之前，必须对收集的原始数据进行预处理，达到改善数据的质量，提高数据挖掘过程的准确率和效率的目的</em></p>
<h2 id="数据预处理流程"><a href="#数据预处理流程" class="headerlink" title="数据预处理流程"></a>数据预处理流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始数据采集&#x3D;&gt;数据清理&#x3D;&gt;数据集成&#x3D;》数据转换&#x3D;&gt;数据规约</span><br></pre></td></tr></table></figure>

<p><em>这里的流程顺序不用必须严格按照1/2/3/4顺序进行</em></p>
<h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><p><strong>脏数据</strong>：由于重复录入，并发处理等不规范的操作，导致产生不完整，不准确的，无效的数据。<br><strong>脏数据</strong>划分为<strong>缺省值</strong>和<strong>噪声</strong>(噪声是被测量变量的随机误差或方差）</p>
<p><em>数据清理：填充缺失值、光滑噪声和识别离群点</em></p>
<h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><h4 id="噪声数据"><a href="#噪声数据" class="headerlink" title="噪声数据"></a>噪声数据</h4><h4 id="不一致数据"><a href="#不一致数据" class="headerlink" title="不一致数据"></a>不一致数据</h4><h3 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h3><p><em>合并来自多个数据源的数据</em></p>
<h4 id="实体识别问题"><a href="#实体识别问题" class="headerlink" title="实体识别问题"></a>实体识别问题</h4><h4 id="冗余和相关分析"><a href="#冗余和相关分析" class="headerlink" title="冗余和相关分析"></a>冗余和相关分析</h4><h4 id="元组重复"><a href="#元组重复" class="headerlink" title="元组重复"></a>元组重复</h4><h4 id="数据值冲突的检测与处理"><a href="#数据值冲突的检测与处理" class="headerlink" title="数据值冲突的检测与处理"></a>数据值冲突的检测与处理</h4><h3 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h3><p><em>在数据预处理阶段，<strong>数据被变换或统一</strong>，使挖掘过程可能更有效，挖掘的模式可能更容易理解</em></p>
<h4 id="数据变换策略"><a href="#数据变换策略" class="headerlink" title="数据变换策略"></a>数据变换策略</h4><h4 id="通过规范化变换数据"><a href="#通过规范化变换数据" class="headerlink" title="通过规范化变换数据"></a>通过规范化变换数据</h4><h4 id="通过分箱离散化"><a href="#通过分箱离散化" class="headerlink" title="通过分箱离散化"></a>通过分箱离散化</h4><h4 id="通过直方图分析离散化"><a href="#通过直方图分析离散化" class="headerlink" title="通过直方图分析离散化"></a>通过直方图分析离散化</h4><h4 id="通过聚类，决策树和相关分析离散化"><a href="#通过聚类，决策树和相关分析离散化" class="headerlink" title="通过聚类，决策树和相关分析离散化"></a>通过聚类，决策树和相关分析离散化</h4><h4 id="标称数据的概念分层产生"><a href="#标称数据的概念分层产生" class="headerlink" title="标称数据的概念分层产生"></a>标称数据的概念分层产生</h4><h3 id="数据规约"><a href="#数据规约" class="headerlink" title="数据规约"></a>数据规约</h3><p><em>尽可能保持数据原貌的前提下，最大限度地精简数据量</em></p>
<p><strong>数据规约的策略</strong>：维规约、数量规约、数据压缩</p>
<h2 id="数据预处理的工具"><a href="#数据预处理的工具" class="headerlink" title="数据预处理的工具"></a>数据预处理的工具</h2><p><strong>工具类手段</strong>：Kettle<br><strong>编程类手段</strong>：Python语言</p>
<hr>
<blockquote>
<p>死并非生的对立面，是生的一部分永存。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第五章-MongoDB基础</title>
    <url>/%E7%AC%AC%E4%BA%94%E7%AB%A0-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B8%8E%E5%BA%94%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第五章-MongoDB基础"><a href="#第五章-MongoDB基础" class="headerlink" title="第五章-MongoDB基础"></a>第五章-MongoDB基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><em>开源数据库，是目前NoSQL数据库中使用最广泛的数据库之一</em></p>
<p><em>是一个开源文档数据库，是用C++语言编写的非关系型数据库</em></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h3><p><em>传统的关系型数据库需要对表结构进行预先定义和严格的要求，而这样的严格要求，导致了处理数据的过程更加繁琐，甚至降低了执行效率。在数据量达到一定规模的情况下，传统关系型数据库反应迟钝。</em></p>
<p><em>文档存储支持对结构化数据的访问，与关系模型不同的是，文档存储没有强制的架构。文档存储以封包键值对的方式进行存储，文档存储模型支持嵌套结构</em></p>
<p><em>文档数据库无需事先定义数据存储结构</em>、</p>
<h3 id="文档存储结构"><a href="#文档存储结构" class="headerlink" title="文档存储结构"></a>文档存储结构</h3><p><em>文档存储结构可分为四个层次：键值对，文档，集合，数据库</em></p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p><em>文档型数据库存储结构的基本单位，具体包含了数据和类型</em></p>
<p><em>键为字符串类型，值为五种基本类型，数组，日期，嵌套</em></p>
<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><em>文档是MongoDB的核心概念，是数据的基本单元</em></p>
<p><em>是一组有序的键值对集合</em></p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><em>MongoDB将文档存储在集合中，一个集合是一些文档构成的集合</em></p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><em>在MongoDB中，数据库有集合组成</em></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><em>MongoDB所采用的数据格式称为BSON，是一种基于JSON的二进制序列化格式</em></p>
<p><em>MongoDB改进的主要特性有下面三点：</em></p>
<p><em>(1) 更快的遍历速度</em></p>
<p><em>(2) 操作更加简单</em></p>
<p><em>(3) 支持更多的数据类型</em></p>
<h3 id="MongoDB的安装与测试"><a href="#MongoDB的安装与测试" class="headerlink" title="MongoDB的安装与测试"></a>MongoDB的安装与测试</h3><h2 id="数据库与集合的基本操作"><a href="#数据库与集合的基本操作" class="headerlink" title="数据库与集合的基本操作"></a>数据库与集合的基本操作</h2><h3 id="数据库命名规则"><a href="#数据库命名规则" class="headerlink" title="数据库命名规则"></a>数据库命名规则</h3><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="创建自定义数据库"><a href="#创建自定义数据库" class="headerlink" title="创建自定义数据库"></a>创建自定义数据库</h4><p><em>没有则创建该数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDB</span><br></pre></td></tr></table></figure>

<h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h4 id="统计数据库信息"><a href="#统计数据库信息" class="headerlink" title="统计数据库信息"></a>统计数据库信息</h4><p><em>操作之前，要先切到该数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test</span><br><span class="line">db.stats()</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<h4 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h4><p><em>查看当前数据库下的所有集合</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure>



<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="集合名称的命名规则"><a href="#集合名称的命名规则" class="headerlink" title="集合名称的命名规则"></a>集合名称的命名规则</h4><h4 id="集合操作-1"><a href="#集合操作-1" class="headerlink" title="集合操作"></a>集合操作</h4><p><em>有显示和隐式创建集合两种方法</em></p>
<h5 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h5><p><em>capped</em>:<em>上限集合，是否限制大小</em></p>
<p><em>max<em>：</em>最大文档数，可选</em></p>
<p><em>size<em>：</em>具体集合大小，如果capped为True，则它必须命名</em></p>
<h5 id="显示创建"><a href="#显示创建" class="headerlink" title="显示创建"></a>显示创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDatabase</span><br><span class="line">db.createCollection(&quot;mycl&quot;,&#123;capped:true, size:6142800, max:10000&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="隐式创建"><a href="#隐式创建" class="headerlink" title="隐式创建"></a>隐式创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.mycl.insert(&#123;&quot;name&quot;:&quot;tom&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="集合的其它操作"><a href="#集合的其它操作" class="headerlink" title="集合的其它操作"></a>集合的其它操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="文档的基本操作"><a href="#文档的基本操作" class="headerlink" title="文档的基本操作"></a>文档的基本操作</h2><h3 id="文档的键定义规则"><a href="#文档的键定义规则" class="headerlink" title="文档的键定义规则"></a>文档的键定义规则</h3><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>NoSQL数据库原理与与应用</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-NoSQL数据库原理与应用</title>
    <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0NoSQL%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B8%8E%E5%BA%94%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第一章-NoSQL数据库原理与应用"><a href="#第一章-NoSQL数据库原理与应用" class="headerlink" title="第一章-NoSQL数据库原理与应用"></a>第一章-NoSQL数据库原理与应用</h1><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><p><em>由数据库，数据库管理系统，应用程序，用户组成</em></p>
<h3 id="数据库系统的基本概念"><a href="#数据库系统的基本概念" class="headerlink" title="数据库系统的基本概念"></a>数据库系统的基本概念</h3><h4 id="数据库DBS"><a href="#数据库DBS" class="headerlink" title="数据库DBS"></a>数据库DBS</h4><p><em>是长期存储在计算机内，<strong>有组织</strong>，<strong>统一管理的</strong>，可以<strong>表现为多种形式的</strong>，<strong>可共享</strong>的数据集合</em></p>
<p><em>数据库根据不同的逻辑模型可以分为三种：层次型，网状型，关系型</em></p>
<p><em>层次型：简单，冗余度过高</em></p>
<p><em>网状型：随着应用范围的扩展，数据库的结构变得越来越复杂</em></p>
<p><em>关系型：二维表格来表示实体集合以及数据间的联系的一种模型</em></p>
<h4 id="数据库管理系统DBMS"><a href="#数据库管理系统DBMS" class="headerlink" title="数据库管理系统DBMS"></a>数据库管理系统DBMS</h4><p><em>是一种操作和管理数据库的大型软件，用于建立，使用和维护数据库</em></p>
<h5 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h5><p><em>DBMS提供数据定义语言DDL，供用户定义，创建和修改数据库的结构</em></p>
<h5 id="数据操纵"><a href="#数据操纵" class="headerlink" title="数据操纵"></a>数据操纵</h5><p><em>DBMS提供数据操纵语言DML，实现用户对数据的操纵功能，包括对数据库数据的插入，删除，更新等操作</em></p>
<h5 id="数据库的运行管理"><a href="#数据库的运行管理" class="headerlink" title="数据库的运行管理"></a>数据库的运行管理</h5><h5 id="数据组织，存储与管理"><a href="#数据组织，存储与管理" class="headerlink" title="数据组织，存储与管理"></a>数据组织，存储与管理</h5><h5 id="数据库的维护"><a href="#数据库的维护" class="headerlink" title="数据库的维护"></a>数据库的维护</h5><h5 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h5><h4 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h4><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><h4 id="关系型数据库的基本概念"><a href="#关系型数据库的基本概念" class="headerlink" title="关系型数据库的基本概念"></a>关系型数据库的基本概念</h4><p><em>在关系型数据库中，实体以及实体间的联系均由单一的结构类型表示，这种逻辑结构是一张二维表</em></p>
<h4 id="结构化查询语言"><a href="#结构化查询语言" class="headerlink" title="结构化查询语言"></a>结构化查询语言</h4><p><em>关系型数据库的核心是其结构化查询语言SQL，SQL涵盖数据的定义，操纵，查询，控制，是一个综合的，通用的且简单易懂的数据库管理语言</em></p>
<h5 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h5><p><em>CREATE，DROP，ALTER</em></p>
<h5 id="数据查询语言DQL"><a href="#数据查询语言DQL" class="headerlink" title="数据查询语言DQL"></a>数据查询语言DQL</h5><p><em>SELECT</em></p>
<h5 id="数据操纵语言"><a href="#数据操纵语言" class="headerlink" title="数据操纵语言"></a>数据操纵语言</h5><p><em>INSERT，DELETE，UPDATE</em></p>
<h5 id="数据控制语言DCL"><a href="#数据控制语言DCL" class="headerlink" title="数据控制语言DCL"></a>数据控制语言DCL</h5><p><em>是对数据访问权进行控制的指令</em></p>
<h4 id="关系型数据库的优缺点"><a href="#关系型数据库的优缺点" class="headerlink" title="关系型数据库的优缺点"></a>关系型数据库的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p><em>易于理解，使用方便，易于维护</em></p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p><em>高并发读写能力差，对海量数据的读写效率低，扩展性差</em></p>
<h3 id="NoSQL数据库的特点"><a href="#NoSQL数据库的特点" class="headerlink" title="NoSQL数据库的特点"></a>NoSQL数据库的特点</h3><p><em>最初为满足互联网时代的业务需求而产生。互联网时代具有大量化，多样化，快速化等特点。数据不仅仅是传统的结构化数据，还包含大量非结构化和半结构化数据，关系型数据库无法存储此类数据</em></p>
<h4 id="灵活的数据模型"><a href="#灵活的数据模型" class="headerlink" title="灵活的数据模型"></a>灵活的数据模型</h4><h4 id="可伸缩性强"><a href="#可伸缩性强" class="headerlink" title="可伸缩性强"></a>可伸缩性强</h4><p><em>关系型数据库：中心化，是纵向扩展而不是横向扩展的。这使得它们不适合那些需要简单且动态可伸缩性的应用</em></p>
<p><em>NoSQL数据库从一开始就是分布式，横向扩展的，因此非常适合互联网应用分布式的特性</em></p>
<h4 id="自动分片"><a href="#自动分片" class="headerlink" title="自动分片"></a>自动分片</h4><h4 id="自动复制"><a href="#自动复制" class="headerlink" title="自动复制"></a>自动复制</h4><h2 id="分布式数据库的数据管理"><a href="#分布式数据库的数据管理" class="headerlink" title="分布式数据库的数据管理"></a>分布式数据库的数据管理</h2><h3 id="分布式数据处理"><a href="#分布式数据处理" class="headerlink" title="分布式数据处理"></a>分布式数据处理</h3><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p><em>CAP理论是指在一个分布式系统中，一致性C，可用性A，分区容错性P，三者不可兼得</em></p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="一致性C"><a href="#一致性C" class="headerlink" title="一致性C"></a>一致性C</h5><p><em>是指更新操作成功后，所有节点在同一时间的数据完全一致</em></p>
<p><em>一致性在并发读写时才会出现的问题</em></p>
<h5 id="可用性A"><a href="#可用性A" class="headerlink" title="可用性A"></a>可用性A</h5><p><em>即用户访问数据时，系统能否在正常响应时间返回结果</em></p>
<p><em>在通常情况下，可用性与分布式数据冗余，负载均衡等有很大的关联</em></p>
<h5 id="分区容错性P"><a href="#分区容错性P" class="headerlink" title="分区容错性P"></a>分区容错性P</h5><p><em>即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务</em></p>
<h4 id="相互关联"><a href="#相互关联" class="headerlink" title="相互关联"></a>相互关联</h4><h5 id="CA-without-P"><a href="#CA-without-P" class="headerlink" title="CA without P"></a>CA without P</h5><h5 id="CP-without-A"><a href="#CP-without-A" class="headerlink" title="CP without A"></a>CP without A</h5><h5 id="PA-without-C"><a href="#PA-without-C" class="headerlink" title="PA without C"></a>PA without C</h5><h3 id="ACID与BASE"><a href="#ACID与BASE" class="headerlink" title="ACID与BASE"></a>ACID与BASE</h3><h4 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h4><h4 id="BASE原理"><a href="#BASE原理" class="headerlink" title="BASE原理"></a>BASE原理</h4><h3 id="NoSQL数据库分类"><a href="#NoSQL数据库分类" class="headerlink" title="NoSQL数据库分类"></a>NoSQL数据库分类</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>NoSQL数据库原理与应用</category>
      </categories>
  </entry>
  <entry>
    <title>第八章-基于python的数据整理</title>
    <url>/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第八章-基于python的数据整理"><a href="#第八章-基于python的数据整理" class="headerlink" title="第八章-基于python的数据整理"></a>第八章-基于python的数据整理</h1><h2 id="合并多个数据集"><a href="#合并多个数据集" class="headerlink" title="合并多个数据集"></a>合并多个数据集</h2><p><em>pandas提供以下几种方法合并多个数据集：</em></p>
<p><strong>pandas.merge</strong>:<em>基于一个键或多个键连接多个DataFrame的行</em></p>
<p><strong>pandas.concat</strong>:<em>按行或按列将不同的对象叠加到一起</em></p>
<p><strong>combine_first</strong>:<em>使用一个对象中的数据填充另一个对象中对应位置的缺失值</em></p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><em>默认连接为类似sql的inner join操作</em></p>
<p><em>利用how参数，实现其它连接方式，left join, right join, outer join</em></p>
<h4 id="不指明使用某一列作为连接键"><a href="#不指明使用某一列作为连接键" class="headerlink" title="不指明使用某一列作为连接键"></a>不指明使用某一列作为连接键</h4><p><em>在这种情况下使用重叠列作为键进行连接</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data2'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df2 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1, df2)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9SNY6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9SNY6.png" alt="s9SNY6.png" border="0"></a></p>
<h4 id="指明连接键"><a href="#指明连接键" class="headerlink" title="指明连接键"></a>指明连接键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 等同于上例</span><br><span class="line">pd.merge(df1,df2, on=<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用不同名的键连接"><a href="#使用不同名的键连接" class="headerlink" title="使用不同名的键连接"></a>使用不同名的键连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = DataFrame(&#123;<span class="string">'lkey'</span>:[<span class="string">'b'</span>,<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>,<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df4 = DaraFrame(&#123;<span class="string">'rkey'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1,df2, left_on=<span class="string">'lkey'</span>, right_on=<span class="string">'rkey'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9pOUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9pOUI.png" alt="s9pOUI.png" border="0"></a></p>
<h4 id="how参数"><a href="#how参数" class="headerlink" title="how参数"></a>how参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df1, df2, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s99YRK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s99YRK.png" alt="s99YRK.png" border="0"></a></p>
<h4 id="使用多个键连接"><a href="#使用多个键连接" class="headerlink" title="使用多个键连接"></a>使用多个键连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">                 <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line">                 <span class="string">'lval'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">right = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,<span class="string">'bar'</span>],</span><br><span class="line">                  <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>],</span><br><span class="line">                  <span class="string">'rval'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9FQl6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9FQl6.png" alt="s9FQl6.png" border="0"></a></p>
<h3 id="使用index进行DataFrame合并"><a href="#使用index进行DataFrame合并" class="headerlink" title="使用index进行DataFrame合并"></a>使用index进行DataFrame合并</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left1=DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">                <span class="string">'value'</span>:range(<span class="number">6</span>)&#125;)</span><br><span class="line">right1=DataFrame(&#123;<span class="string">'group_val'</span>:[<span class="number">3.5</span>, <span class="number">7</span>]&#125;,</span><br><span class="line">                 index=[<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">pd.merge(left1, right1, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCQuGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQuGT.png" alt="sCQuGT.png" border="0"></a></p>
<h3 id="沿着横轴或纵轴串接"><a href="#沿着横轴或纵轴串接" class="headerlink" title="沿着横轴或纵轴串接"></a>沿着横轴或纵轴串接</h3><h4 id="numpy的concatenate函数"><a href="#numpy的concatenate函数" class="headerlink" title="numpy的concatenate函数"></a>numpy的concatenate函数</h4><p><em>NumPy库的concatenate函数用于串接起NumPy的原生数组</em></p>
<p><em>axis参数默认为0，沿着竖轴连接</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">np.concatenate([arr, arr], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCQ7oq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQ7oq.png" alt="sCQ7oq.png" border="0"></a></p>
<h4 id="pandas的concat函数"><a href="#pandas的concat函数" class="headerlink" title="pandas的concat函数"></a>pandas的concat函数</h4><h5 id="用于Series数据类型"><a href="#用于Series数据类型" class="headerlink" title="用于Series数据类型"></a>用于Series数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s2 = Series([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">pd.concat([s1, s2])</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">	a <span class="number">0</span></span><br><span class="line">    b <span class="number">1</span></span><br><span class="line">    c <span class="number">2</span></span><br><span class="line">    d <span class="number">3</span></span><br><span class="line">    e <span class="number">4</span></span><br><span class="line">pd.concat([s1, s2], axis=<span class="number">1</span>) // 此时得到DataFrame对象，连接方式为outer join</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sC1JC6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC1JC6.png" alt="sC1JC6.png" border="0"></a></p>
<p><em>可以通过join参数修改连接方式</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s3= Series([<span class="number">5</span>,<span class="number">6</span>], index=[<span class="string">'f'</span>,<span class="string">'g'</span>])</span><br><span class="line">s4 = pd.concat([s1*<span class="number">5</span>,s3])</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>)</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sC8qHJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC8qHJ.png" alt="sC8qHJ.png" border="0"></a></p>
<h5 id="用于DataFrame数据类型"><a href="#用于DataFrame数据类型" class="headerlink" title="用于DataFrame数据类型"></a>用于DataFrame数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df2 = DataFrame(<span class="number">5</span>+np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'c'</span>], columns=[<span class="string">'three'</span>,<span class="string">'four'</span>])</span><br><span class="line">pd.concat([df1, df2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCbLlj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCbLlj.png" alt="sCbLlj.png" border="0"></a></p>
<h2 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h2><p><em>数据重塑：是指转换输入的数据结构，使其适合后续的分析</em></p>
<p><em>pandas提供了数据重塑的基本操作，这些操作被用于二维度表格数据</em></p>
<h3 id="多级索引数据的重塑"><a href="#多级索引数据的重塑" class="headerlink" title="多级索引数据的重塑"></a>多级索引数据的重塑</h3><p><em>DataFrame可以设置多级索引。对于多级索引的数据，pandas的stack方法将数据集的列旋转为行</em></p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=DataFrame(np.arange(<span class="number">6.</span>reshape((<span class="number">2</span>,<span class="number">3</span>)),index=pd.Index([<span class="string">'ohio'</span>,<span class="string">'colorado'</span>], name=<span class="string">'state'</span>), columns=pd.Index([<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>], name=<span class="string">'number'</span>))</span><br><span class="line">&gt;&gt;&gt;data.stack()</span><br></pre></td></tr></table></figure>

<h4 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a>unstack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = data.stack()</span><br><span class="line">result = data.unstack()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCXL5V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCXL5V.png" alt="sCXL5V.png" border="0"></a></p>
<p><em>默认情况下转换内层级别索引，通过传递一个级别的标号或级别的别称，可以指定要转换的级别，以下两种操作方式：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.unstack(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.unstack(<span class="string">'state'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCxoKe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCxoKe.png" alt="sCxoKe.png" border="0"></a></p>
<h3 id="应用pivot方法重塑数据"><a href="#应用pivot方法重塑数据" class="headerlink" title="应用pivot方法重塑数据"></a>应用pivot方法重塑数据</h3><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="移除重复数据"><a href="#移除重复数据" class="headerlink" title="移除重复数据"></a>移除重复数据</h3><p><em>这两个方法默认以整行判断，也可以指定进行部分列判断重复</em></p>
<h4 id="duplicated"><a href="#duplicated" class="headerlink" title="duplicated()"></a>duplicated()</h4><p><em>判断是否重复，返回一个bool型series</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = DataFrame(&#123;<span class="string">'k1'</span>:[<span class="string">'zhongxing'</span>,<span class="string">'Huawei'</span>]*<span class="number">3</span>+[<span class="string">'Huawei'</span>], <span class="string">'k2'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data.duplicated()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCzXw9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCzXw9.png" alt="sCzXw9.png" border="0"></a></p>
<h4 id="drop-duplicates"><a href="#drop-duplicates" class="headerlink" title="drop_duplicates()"></a>drop_duplicates()</h4><p><em>删除重复行</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.drop_duplicates()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sPSCQO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sPSCQO.png" alt="sPSCQO.png" border="0"></a></p>
<h3 id="利用函数或隐射进行数据转换"><a href="#利用函数或隐射进行数据转换" class="headerlink" title="利用函数或隐射进行数据转换"></a>利用函数或隐射进行数据转换</h3><h3 id="值转换"><a href="#值转换" class="headerlink" title="值转换"></a>值转换</h3><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><h3 id="离散化和面元划分"><a href="#离散化和面元划分" class="headerlink" title="离散化和面元划分"></a>离散化和面元划分</h3><h3 id="检测或过滤异常值"><a href="#检测或过滤异常值" class="headerlink" title="检测或过滤异常值"></a>检测或过滤异常值</h3><h3 id="排列和随机采样"><a href="#排列和随机采样" class="headerlink" title="排列和随机采样"></a>排列和随机采样</h3><h3 id="计算指标-哑变量"><a href="#计算指标-哑变量" class="headerlink" title="计算指标/哑变量"></a>计算指标/哑变量</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第七章-基于python的数据导入与导出</title>
    <url>/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第七章-基于python的数据导入与导出"><a href="#第七章-基于python的数据导入与导出" class="headerlink" title="第七章-基于python的数据导入与导出"></a>第七章-基于python的数据导入与导出</h1><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p><em>pandas是python的一个开源库，提供了高性能且易于使用的数据结构及数据分析工具</em></p>
<p><a href="https://www.pypandas.cn/" target="_blank" rel="external nofollow noopener noreferrer">pandas中文文档</a></p>
<p><a href="https://pandas.pydata.org/docs/" target="_blank" rel="external nofollow noopener noreferrer">pandas官方文档</a></p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><em>处理一维数据</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<h4 id="index和values属性"><a href="#index和values属性" class="headerlink" title="index和values属性"></a>index和values属性</h4><p><em>通过Series的index和values属性获取元素值和index值</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.index</span><br><span class="line">&gt;&gt;&gt;RangeIndex(start=<span class="number">0</span>, stop=<span class="number">3</span>, step=<span class="number">1</span>)</span><br><span class="line">s.values</span><br><span class="line">&gt;&gt;&gt;array([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<h4 id="使用自己提供的index"><a href="#使用自己提供的index" class="headerlink" title="使用自己提供的index"></a>使用自己提供的index</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = Series([<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>], index = [<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line">&gt;&gt;&gt;s2</span><br><span class="line">&gt;&gt;&gt;a <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;d <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;dtype:int64</span><br><span class="line">&gt;&gt;&gt;s2.index</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><h5 id="访问单个"><a href="#访问单个" class="headerlink" title="访问单个"></a>访问单个</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[<span class="string">'a'</span>] // <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h5 id="访问多个"><a href="#访问多个" class="headerlink" title="访问多个"></a>访问多个</h5><p><em>返回新的Series对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]] </span><br><span class="line">a <span class="number">2</span></span><br><span class="line">b <span class="number">8</span></span><br><span class="line">d <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="Series和实数做算数运算"><a href="#Series和实数做算数运算" class="headerlink" title="Series和实数做算数运算"></a>Series和实数做算数运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s*<span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">16</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>



<h4 id="Series和实数做逻辑运算"><a href="#Series和实数做逻辑运算" class="headerlink" title="Series和实数做逻辑运算"></a>Series和实数做逻辑运算</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s&gt;<span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="literal">False</span></span><br><span class="line"><span class="number">1</span> <span class="literal">False</span></span><br><span class="line"><span class="number">2</span> <span class="literal">True</span></span><br><span class="line"><span class="number">3</span> <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>

<h4 id="bool序列来过滤Series对象"><a href="#bool序列来过滤Series对象" class="headerlink" title="bool序列来过滤Series对象"></a>bool序列来过滤Series对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s[s&gt;<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><em>除了可以将Series看成类似数组的结构，也可以看成定长且有序的map</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = Series(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;<span class="string">'a'</span> <span class="keyword">in</span> s3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="修改值和index"><a href="#修改值和index" class="headerlink" title="修改值和index"></a>修改值和index</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line">s.index = [<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h2 id="文本文件的导入与导出"><a href="#文本文件的导入与导出" class="headerlink" title="文本文件的导入与导出"></a>文本文件的导入与导出</h2><h3 id="导入CSV文件"><a href="#导入CSV文件" class="headerlink" title="导入CSV文件"></a>导入CSV文件</h3><p><em>CSV文件：一种简单的文本，广泛用于存储表格格式的行列数据</em></p>
<p><em>pandas提供read_csv()，read_table()两种方式导入csv文件，返回结果为DataFrame类型</em></p>
<h4 id="read-csv"><a href="#read-csv" class="headerlink" title="read_csv()"></a>read_csv()</h4><p><em>默认分隔符为’,’，且只能读入这种分隔符的csv文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!type mycsv.csv</span><br><span class="line">df = pd.read_csv(<span class="string">'mycsv.csv'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="read-table"><a href="#read-table" class="headerlink" title="read_table()"></a>read_table()</h4><p><em>默认分隔符为’\t’，可以读入其它分隔符CSV文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">'mycsv.csv'</span>, sep=<span class="string">','</span>)</span><br></pre></td></tr></table></figure>

<h5 id="待读取文件没属性列名称"><a href="#待读取文件没属性列名称" class="headerlink" title="待读取文件没属性列名称"></a>待读取文件没属性列名称</h5><p><em>自动以数字零开始，取名属性列</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'....csv'</span>, header=<span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> ....</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>....</span><br></pre></td></tr></table></figure>

<h5 id="自己取名列名"><a href="#自己取名列名" class="headerlink" title="自己取名列名"></a>自己取名列名</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names = [.....])</span><br></pre></td></tr></table></figure>

<h5 id="以某一列为index"><a href="#以某一列为index" class="headerlink" title="以某一列为index"></a>以某一列为index</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names=[....], index_col=<span class="string">'某一列的名字'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, sep=<span class="string">'/s+'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="当第一行比后续行少一个"><a href="#当第一行比后续行少一个" class="headerlink" title="当第一行比后续行少一个"></a>当第一行比后续行少一个</h5><p><em>则相当于已有了index和属性名</em></p>
<h4 id="read-csv和read-table的其它参数"><a href="#read-csv和read-table的其它参数" class="headerlink" title="read_csv和read_table的其它参数"></a>read_csv和read_table的其它参数</h4><h5 id="skiprows"><a href="#skiprows" class="headerlink" title="skiprows"></a>skiprows</h5><p><em>用于文件中的一些无用行</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, skiprows=[<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>



<h5 id="nrows"><a href="#nrows" class="headerlink" title="nrows"></a>nrows</h5><p><em>只显示前n行</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, nrows=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p><em>默认用NaN填写缺失值</em></p>
<h5 id="isnull"><a href="#isnull" class="headerlink" title="isnull()"></a>isnull()</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.isnull(dataframe对象)</span><br></pre></td></tr></table></figure>



<h3 id="导出CSV文件"><a href="#导出CSV文件" class="headerlink" title="导出CSV文件"></a>导出CSV文件</h3><h3 id="JSON格式数据的导入与导出"><a href="#JSON格式数据的导入与导出" class="headerlink" title="JSON格式数据的导入与导出"></a>JSON格式数据的导入与导出</h3><h2 id="二进制文件的导入与导出"><a href="#二进制文件的导入与导出" class="headerlink" title="二进制文件的导入与导出"></a>二进制文件的导入与导出</h2><p><em>ASCII文件也称为<strong>文本文件</strong>，这du种文件在磁盘中存放时每个字符对应一个字节，用于存放对应的ASCII码。例如，数5678的存储形式为：5 6 7 8<br><strong>二进制文件</strong>是按二进制的编码方式来存放文件的。 例如， 数5678的存储形式为： 00010110 00101110只占二个字节。二进制文件虽然也可在屏幕上显示， 但其内容无法读懂。C系统在处理这些文件时，并不区分类型，都看成是字符流，按字节进行处理。 输入输出字符流的开始和结束只由程序控制而不受物理符号(如回车符)的控制。 因此也把这种文件称作“流式文件”。</em></p>
<p><strong>二进制文件类型很多，都有自己独特的存储方式。处理这些文件可能涉及非常复杂的过程。由于二进制文件格式复杂且不通用，数据导入工作应尽可能避免使用程序直接处理二进制格式文件</strong></p>
<h3 id="ExcelFile类型"><a href="#ExcelFile类型" class="headerlink" title="ExcelFile类型"></a>ExcelFile类型</h3><p><em>pandas通过<strong>ExcelFile类型</strong>提供对Excel文件的基本支持</em></p>
<p><em>ExcelFile类在内部使用<strong>xlrd</strong>和<strong>openpyxl包</strong>来操作Excel文件，需要提前安装</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">xls = pd.ExcelFile(<span class="string">'mydata.xls'</span>) // 首先导入excel文件，需要创建ExcelFile实例</span><br><span class="line">df = xls.parse(<span class="string">'mysheet'</span>) // 加入mydata.xls存在一个mysheet的表格，使用parse来解析它，获得一个dataframe对象</span><br></pre></td></tr></table></figure>

<h2 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(pf).to_excel(<span class="string">'out.xlsx'</span>, sheet_name=<span class="string">'mydata'</span>,index=<span class="literal">False</span>,header=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



<h2 id="数据库的导入与导出"><a href="#数据库的导入与导出" class="headerlink" title="数据库的导入与导出"></a>数据库的导入与导出</h2><h3 id="关系型数据库的导入和导出"><a href="#关系型数据库的导入和导出" class="headerlink" title="关系型数据库的导入和导出"></a>关系型数据库的导入和导出</h3><h3 id="非关系型数据库的导入和导出"><a href="#非关系型数据库的导入和导出" class="headerlink" title="非关系型数据库的导入和导出"></a>非关系型数据库的导入和导出</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>账单金额P图</title>
    <url>/%E8%B4%A6%E5%8D%95%E9%87%91%E9%A2%9DP%E5%9B%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="账单金额P图"><a href="#账单金额P图" class="headerlink" title="账单金额P图"></a>账单金额P图</h1><p><a href="https://jingyan.baidu.com/article/066074d6497b38c3c21cb028.html" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>PS</category>
      </categories>
  </entry>
  <entry>
    <title>排序算法-直接插入排序</title>
    <url>/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><p><a href="https://imgchr.com/i/0T6DFf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6DFf.png" alt="0T6DFf.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/0T6sfS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6sfS.png" alt="0T6sfS.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/0T6jTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6jTx.md.png" alt="0T6jTx.png" border="0"></a></p>
<h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(l, new)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">        <span class="keyword">if</span> l[i] &gt;= new:</span><br><span class="line">            l.insert(i, new)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l.append(new)  <span class="comment"># 新知识当for循环正常退出，没有遇到break的前提下，会执行else；如果遇到了就不执行else</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = list(range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line">    print(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        l = insert_sort(l, random.randint(<span class="number">1</span>, <span class="number">200</span>))</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	insert_sort(a, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, tmp;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line">		tmp = a[i];</span><br><span class="line">		<span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp&lt;a[j])&#123;</span><br><span class="line">				a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">		a[j+<span class="number">1</span>]=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    length = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="keyword">if</span> i!=minIndex:</span><br><span class="line">            arr[minIndex], arr[i] = arr[i], arr[minIndex]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    print(arr)</span><br><span class="line">    selectSort(arr)</span><br><span class="line">    print(arr)</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>直接插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-高级计算机语言和编译器</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%AB%98%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="高级计算机语言和编译器"><a href="#高级计算机语言和编译器" class="headerlink" title="高级计算机语言和编译器"></a>高级计算机语言和编译器</h1><h2 id="高级计算机语言"><a href="#高级计算机语言" class="headerlink" title="高级计算机语言"></a>高级计算机语言</h2><p><em>高级计算机语言编程，在更抽象地层面贴近编程者思维，不用考虑计算机机器指令，使编程变得更加容易</em></p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><em>高级计算机语言编写的程序在计算机看来，是一堆没用的指令，需要编译器将程序编译成机器码</em></p>
<p><em>而且不同cpu厂商生产的处理器的指令系统和编码格式不同；其它机型编译后的机器码不能在另一个机型上使用；所以有对应不同处理器的编译器</em></p>
<blockquote>
<p>The more endeavor you make, the more luck you will gain !</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-实验一</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E9%AA%8C%E4%B8%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据挖掘与机器学习-实验一"><a href="#数据挖掘与机器学习-实验一" class="headerlink" title="数据挖掘与机器学习-实验一"></a>数据挖掘与机器学习-实验一</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="三种数据类型"><a href="#三种数据类型" class="headerlink" title="三种数据类型"></a>三种数据类型</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="date-range"><a href="#date-range" class="headerlink" title="date_range"></a>date_range</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, periods=<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(periods=<span class="number">4</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="loadtxt"><a href="#loadtxt" class="headerlink" title="loadtxt"></a>loadtxt</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_file = <span class="string">r"xxx.txt"</span></span><br><span class="line">data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br></pre></td></tr></table></figure>



<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP2###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_data_to_timeseries</span><span class="params">(input_file, column, verbose=False)</span>:</span></span><br><span class="line">    <span class="comment"># 导入数据</span></span><br><span class="line">    data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># 确定索引的开始与结束时间</span></span><br><span class="line">    start_date = str(int(data[<span class="number">0</span>,<span class="number">0</span>])) + <span class="string">'-'</span> + str(int(data[<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line">    end_date = str(int(data[<span class="number">-1</span>,<span class="number">0</span>] + <span class="number">1</span>)) + <span class="string">'-'</span> + str(int(data[<span class="number">-1</span>,<span class="number">1</span>] % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">    <span class="comment">###问题一：完善函数###</span></span><br><span class="line">    <span class="comment">###提示：通过pandas的date_range函数获取索引###</span></span><br><span class="line"></span><br><span class="line">    date_time_index = pd.date_range(start=start_date, end=end_date, freq=<span class="string">'M'</span>)</span><br><span class="line">    data_timeseries = pd.Series(data[:,column], index=date_time_index)</span><br><span class="line">    <span class="keyword">return</span> data_timeseries</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP3###</span></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">input_file = <span class="string">r'C:\Users\Ty\Desktop\实验手册-实验二pandas\实验手册-实验二pandas\data.txt'</span></span><br><span class="line">column_num = <span class="number">2</span></span><br><span class="line">data_timeseries = convert_data_to_timeseries(input_file, column_num)</span><br><span class="line"><span class="comment"># Plot方法成图</span></span><br><span class="line">data_timeseries.plot()</span><br><span class="line">plt.title(<span class="string">'Input data'</span>)</span><br><span class="line"><span class="comment"># # 图像太密集了，我们换一个时间范围</span></span><br><span class="line">start = <span class="string">'2007-2'</span></span><br><span class="line">end = <span class="string">'2007-11'</span></span><br><span class="line">plt.figure()</span><br><span class="line">data_timeseries[start:end].plot()</span><br><span class="line">plt.title(<span class="string">'Data from '</span> + start + <span class="string">' to '</span> + end)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP4###</span></span><br><span class="line"><span class="comment"># ###问题二：将数据的第三,四列转换为二维数据结构dataframe,索引为时间###</span></span><br><span class="line">data1 = convert_data_to_timeseries(input_file, <span class="number">2</span>)</span><br><span class="line">data2 = convert_data_to_timeseries(input_file, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 将两组数据同时成图</span></span><br><span class="line">pd.dataframe[<span class="string">'1955'</span>:<span class="string">'1960'</span>].plot()</span><br><span class="line">plt.title(<span class="string">'Data overlapped on top of each other'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP5###</span></span><br><span class="line"><span class="comment"># # 查看两组数据是否有线性关联</span></span><br><span class="line">plt.figure()</span><br><span class="line">difference = pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'first'</span>] - pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'second'</span>]</span><br><span class="line">difference.plot()</span><br><span class="line">plt.title(<span class="string">'Difference (first - second)'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP6###</span></span><br><span class="line"><span class="comment">###问题三：请统计两组数组的最大最小值和均值###</span></span><br><span class="line"><span class="comment">###问题三：计算数据的相关系数，调用corr函数###</span></span><br><span class="line">print(<span class="string">'\nMaximum:\n'</span>, pd.dataframe.max())</span><br><span class="line">print(<span class="string">'\nMinimum:\n'</span>, pd.dataframe.min())</span><br><span class="line">print(<span class="string">'\nMean:\n'</span>, pd.dataframe.mean())</span><br><span class="line">print(<span class="string">'\nCorrelation coefficients:\n'</span>, pd.dataframe.corr())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP7###</span></span><br><span class="line"><span class="comment"># 打印两组数据相关性</span></span><br><span class="line">plt.figure()</span><br><span class="line">pd.rolling_corr(pd.dataframe[<span class="string">'first'</span>], pd.dataframe[<span class="string">'second'</span>], window=<span class="number">60</span>).plot()</span><br><span class="line">pd.dataframe[<span class="string">'first'</span>].rolling(<span class="number">60</span>).corr(pd.dataframe[<span class="string">'second'</span>]).plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-数学函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-地址</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>数据库原理与应用-hbase</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-hbase.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h1><h2 id="hbase安装"><a href="#hbase安装" class="headerlink" title="hbase安装"></a>hbase安装</h2><h2 id="hbase命令"><a href="#hbase命令" class="headerlink" title="hbase命令"></a>hbase命令</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create &#39;user&#39;, &#39;info1&#39;, &#39;info2&#39;</span><br></pre></td></tr></table></figure>



<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><em>put ‘表名’, ‘rowKey’, ‘列族 : 列’  ,  ‘值’</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">put &#39;user&#39;, &#39;1234&#39;, &#39;info1:Name&#39;, &#39;ttyong&#39;</span><br></pre></td></tr></table></figure>



<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p><em>delete ‘表名’,‘行名’,‘列族：列’ 来删除某个记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>deleteall ‘表名’,’rowkey’来删除整行记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>truncate ‘表名’来清空表所有的记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><em>put就是重写一遍，进行覆盖，hbase没有修改，都是追加，即对相同rowKey、列族和列名的数据再次添加即为数据的更新</em></p>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p><em>scan ‘表名’来查看表的所有记录</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get  ‘表名’ , ‘rowKey’ 来查看某个rowKey下的所有记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get ‘表名’,’rowkey’,’列族’来查看某个rowKey列族的记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get ‘表名’,’rowkey’,’列族：列’来查看rowKey列族的某个列记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="查看存在的表"><a href="#查看存在的表" class="headerlink" title="查看存在的表"></a>查看存在的表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list &#39;user&#39;</span><br></pre></td></tr></table></figure>



<h3 id="查看表的具体结构"><a href="#查看表的具体结构" class="headerlink" title="查看表的具体结构"></a>查看表的具体结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe &#39;user&#39;</span><br></pre></td></tr></table></figure>



<h2 id="hbase遇到的问题"><a href="#hbase遇到的问题" class="headerlink" title="hbase遇到的问题"></a>hbase遇到的问题</h2><p><a href="https://imgchr.com/i/wTZSzQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/20/wTZSzQ.md.png" alt="wTZSzQ.md.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/09/20/wTZ0eI.png" alt="wTZ0eI.png" border="0">

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><img src="https://s1.ax1x.com/2020/09/20/wTVzRg.png" alt="wTVzRg.png" border="0">

<p><em>1.将regionservers里的localhost改为虚拟机名字</em></p>
<p><em>2.将hadoop的namenode的tmp文件删除(有更改为固定路径，就删除更改后的文件)，然后重新格式化</em></p>
<p><em>3.hbase的hbase-site.xml里的端口改为hadoop端口一致的8020</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库原理与应用</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-strcpy</title>
    <url>/C%E8%AF%AD%E8%A8%80-strcpy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-strcmp</title>
    <url>/C%E8%AF%AD%E8%A8%80-strcmp.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-文件输入输出常用函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="文件输入输出常用函数"><a href="#文件输入输出常用函数" class="headerlink" title="文件输入输出常用函数"></a>文件输入输出常用函数</h1><h2 id="getc，gets，getchar"><a href="#getc，gets，getchar" class="headerlink" title="getc，gets，getchar"></a>getc，gets，getchar</h2><h3 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h3><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p><em>1）baigets()用于从标准输入流stdin读入一个du整行（以’\n’或EOF）结束，写入ptr指向的字符数组，并返回这个指针；出错或遇到文件结束时则返回NULL。行末的’\n’从流中取出，但不写入数组。gets()不检查被写入的数组大小</em></p>
<h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h3><p><em>getchar()用于从标准输入流stdin读入一个字符，并返回这个字符。如果读到文件结尾，则返回EOF。注意到EOF不能用char类型表示，所以getchar()函数返回的是一个int型的数。使用时也应该注意这一点</em></p>
<p><em>读取一个字符，包括dao车键也会被读成一个字符</em></p>
<h3 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h3><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><h3 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h3><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-二进制I/O:write函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-fwrite%E5%92%8Cfread%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="fwrite和fread"><a href="#fwrite和fread" class="headerlink" title="fwrite和fread"></a>fwrite和fread</h1><p><em>文件中以二进制形式存储，可以保证数值的精确</em></p>
<p><em>这两个函数以二进制形式处理数据</em></p>
<p><em>正常情况下返回的值，就是设置模块的值；如果出错返回值会比nmemb的值小</em></p>
<h2 id="fwrite函数"><a href="#fwrite函数" class="headerlink" title="fwrite函数"></a>fwrite函数</h2><p><em>二进制数据写入文件</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fwrite(ptr, size, nmemb, fp) // ptr读取数据的地址;size 单位是字节，可以用sizeof的返回值; nmemb 待写入数据块的数量;fp待写入文件地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写入字符串</span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">256</span>];</span><br><span class="line">fwrite(<span class="built_in">buffer</span>, <span class="number">256</span>, <span class="number">1</span>, fp) <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写入数字</span></span><br><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp)</span><br></pre></td></tr></table></figure>

<p><em>以上调用把earnings数组中的数据写入文件，数据被分成10块，每块都是double的大小</em></p>
<p><a href="https://imgchr.com/i/wjMMhF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wjMMhF.md.png" alt="wjMMhF.png" border="0"></a></p>
<h2 id="fread函数"><a href="#fread函数" class="headerlink" title="fread函数"></a>fread函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fread(ptr, <span class="built_in">size</span>, nmemb, fp);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fread(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp); <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-feof函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-feof%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="feof和ferror函数"><a href="#feof和ferror函数" class="headerlink" title="feof和ferror函数"></a>feof和ferror函数</h1><h2 id="feof"><a href="#feof" class="headerlink" title="feof"></a>feof</h2><p><em>其功能是检测流上的文件结束符，如果文件结束，则返回非0值，否则返回0（即，文件结束：返回非0值；文件未结束：返回0值)</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ferror"><a href="#ferror" class="headerlink" title="ferror"></a>ferror</h2><p><em>读写错误，ferror返回一个非零值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构-图的深度优先和广度优先访问</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E8%AE%BF%E9%97%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="图的深度优先和广度优先访问"><a href="#图的深度优先和广度优先访问" class="headerlink" title="图的深度优先和广度优先访问"></a>图的深度优先和广度优先访问</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/fkyyly/article/details/83313843" target="_blank" rel="external nofollow noopener noreferrer">url1</a></p>
<p><a href>url2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-exit和return</title>
    <url>/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-getc和getchar和putc和putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="getc和getchar和putc和putchar"><a href="#getc和getchar和putc和putchar" class="headerlink" title="getc和getchar和putc和putchar"></a>getc和getchar和putc和putchar</h1><h2 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h2><p><em>从fp指针处获取一个字符</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ch = getc(fp);</span><br></pre></td></tr></table></figure>

<h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p><em>从输入缓存中读取个字符</em></p>
<a href="/C%E8%AF%AD%E8%A8%80-getchar%E5%92%8Cputchar.html" title="C语言-getchar和putchar">C语言-getchar和putchar</a>

<h2 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h2><p><em>将字符写入到FILE指针fpout指向的文件中</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">putc(ch, fpout);</span><br></pre></td></tr></table></figure>

<h2 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(ch);</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-文件输入输出</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="文件输入-输出"><a href="#文件输入-输出" class="headerlink" title="文件输入\输出"></a>文件输入\输出</h1><p><em>判断文件结束feof函数，移动文件指针位置fseek函数，获得文件位置ftell函数，文件位置移到开头rewind函数，文件字符输入输出fgetc函数和fputc函数，文件输入输出fscanf函数和fprintf函数，文件字符串输入输出fgets函数和fputs函数，读写二进制文件fread函数和fwrite函数</em></p>
<h2 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen()函数"></a>fopen()函数</h2><p><em>打开一个文件，返回文件指针，并不是真的指向文件，而是缓冲区信息, 也有可能返回NULL和空指针</em></p>
<p><em>文件指针是一种指向FILE的指针，在stdlib.h中定义了</em></p>
<h3 id="fopen的模式字符串"><a href="#fopen的模式字符串" class="headerlink" title="fopen的模式字符串"></a>fopen的模式字符串</h3><p><a href="https://imgchr.com/i/dLomOf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dLomOf.md.jpg" alt="dLomOf.jpg" border="0"></a></p>
<h2 id="getc函数和putc函数"><a href="#getc函数和putc函数" class="headerlink" title="getc函数和putc函数"></a>getc函数和putc函数</h2><p><em>getc获得的是字符地址，putc第一个参数为字符地址</em></p>
<h3 id="getc-函数"><a href="#getc-函数" class="headerlink" title="getc()函数"></a>getc()函数</h3><p><em>是一种用来检查文件是否读完的函数，超过时，会返回EOF</em><br><em>EOF是一个特殊的数值</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">ch = getc(fp);</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    ch = getc(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上面等价于</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(ch=getc(fp)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="putc函数"><a href="#putc函数" class="headerlink" title="putc函数"></a>putc函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// putc(ch, fpout)</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">ch = getc(fp)</span><br><span class="line">putc(ch, <span class="built_in">stdout</span>) <span class="comment">// 相当于putchar(ch)</span></span><br></pre></td></tr></table></figure>

<h2 id="标准文件指针"><a href="#标准文件指针" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dzEjV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/01/dzEjV1.md.jpg" alt="dzEjV1.jpg" border="0"></a></p>
<h2 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose()函数"></a>fclose()函数</h2><p><em>关闭fp指针指向的文件，成功关闭文件返回0，失败返回EOF</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"xxxx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    FILE * in, *out;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">char</span> name[LEN];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:	%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(in=fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))==<span class="literal">NULL</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"I couldn't open the file: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">      	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(name, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcat</span>(name, <span class="string">".red"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(out=fopen(name, <span class="string">"w"</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cant create output file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getc(in)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count++%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">			putc(ch, out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(in)!=<span class="number">0</span>||fclose(out)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Errot in closing files\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>使用stderr指针把错误消息发送到标准错误文件，这是一个标准的C惯例</em></p>
<h2 id="标准文件指针-1"><a href="#标准文件指针-1" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dXP02t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dXP02t.md.jpg" alt="dXP02t.jpg" border="0"></a></p>
<h2 id="fprintf，fscanf"><a href="#fprintf，fscanf" class="headerlink" title="fprintf，fscanf"></a>fprintf，fscanf</h2><p><em>第一个参数为指针；putc为最后一个为指针</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">10</span>] = <span class="string">"good morning"</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> words[MAX];</span><br><span class="line">	FILE * fp;</span><br><span class="line">	<span class="keyword">if</span>(fp=fopen(<span class="string">"words.txt"</span>, <span class="string">"a+"</span>))&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Can not open \"words\" file\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(gets(words)!=<span class="literal">NULL</span>&amp;&amp;words[<span class="number">0</span>]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br><span class="line">	&#125;</span><br><span class="line">	rewind(fp);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words)==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(words);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error closing file\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p><em>使光标回到文件开头</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rewind(fp);</span><br></pre></td></tr></table></figure>



<h2 id="fgets-fputs"><a href="#fgets-fputs" class="headerlink" title="fgets(), fputs()"></a>fgets(), fputs()</h2><h3 id="fgets和gets"><a href="#fgets和gets" class="headerlink" title="fgets和gets"></a>fgets和gets</h3><p><em>gets只能提供一个参数</em></p>
<p><em>fgets可以提供三个参数，第一个：用于存储输入的地址；第二个：是整数，控制输入的最大字符串长度；第三个：文件指针，要读取的文件</em></p>
<p><em>gets从输入读取赋值后把换行符删除；fgets从文件读入并赋值，换行符也会读取</em></p>
<p><em>fgets读取到它所遇到的第一个换行符，或者最大长度前一个字符，或者文件结尾</em></p>
<p><em>如果fgets在达到最大字符长度之前读完了一行，它会在字符串空字符前添加一个换行符</em></p>
<p><em>fgets和gets在遇到EOF时都会返回NULL，因此可以用来检查文件结束</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fgets(buf, MAX, fp) buf是一个字符数组名称</span></span><br></pre></td></tr></table></figure>

<h3 id="puts和fputs"><a href="#puts和fputs" class="headerlink" title="puts和fputs"></a>puts和fputs</h3><p><em>puts自动换行</em></p>
<p><em>fputs接受两个参数，第一个是字符串地址，第二个文件指针</em></p>
<p><em>由于fgets保留换行符，fputs不添加换行符，所以它们可以配合得很好</em></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAX];</span><br><span class="line">    <span class="keyword">while</span>(fgets(arr, MAX, <span class="built_in">stdin</span>)!=<span class="literal">NULL</span>&amp;&amp;arr[<span class="number">0</span>]!=<span class="string">'\n'</span>)&#123;</span><br><span class="line">		<span class="built_in">fputs</span>(arr, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br></pre></td></tr></table></figure>

<p><em>如果输入的超过了最大长度减1，则一次只读取19个，循环下一次再读取</em></p>
<h2 id="fseek和ftell"><a href="#fseek和ftell" class="headerlink" title="fseek和ftell"></a>fseek和ftell</h2><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek()"></a>fseek()</h3><p><em>fseek可以将fopen打开的文件的光标移到任意位置</em></p>
<p><em>如果正常返回0；试图超过文件范围-1</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fseek(FILE指针，偏移量，起点位置) 偏移量必须为long类型，可以是正负零</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">fseek(fp, <span class="number">-1L</span>, SEEK_END); <span class="comment">// 从文件末尾退回1个字节</span></span><br><span class="line">fseek(fp, <span class="number">5L</span>, SEEK_CUR);</span><br></pre></td></tr></table></figure>

<h4 id="文件的起点模式"><a href="#文件的起点模式" class="headerlink" title="文件的起点模式"></a>文件的起点模式</h4><p><a href="https://imgchr.com/i/wPeMYd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/03/wPeMYd.md.jpg" alt="wPeMYd.jpg" border="0"></a></p>
<h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell()"></a>ftell()</h3><p><em>ftell以一个long值类型返回文件的当前位置</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> last;</span><br><span class="line">last = ftell(fp);</span><br></pre></td></tr></table></figure>

<h3 id="配合使用"><a href="#配合使用" class="headerlink" title="配合使用"></a>配合使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 50</span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">long</span> last, count;</span><br><span class="line">    FILE*fp;</span><br><span class="line">    <span class="keyword">char</span> file[LEN];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the file name:	"</span>);</span><br><span class="line">    gets(file)</span><br><span class="line">    <span class="keyword">if</span>(fopen(file, <span class="string">"rb"</span>))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Can't open %s"</span>, file);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(fp, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    last = ftell(fp);</span><br><span class="line">    <span class="keyword">for</span>(count=<span class="number">1L</span>, count&lt;last, count++)&#123;</span><br><span class="line">		fseek(fp, -count, SEEK_END);</span><br><span class="line">        ch = getc(fp);</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fread-和fwrite"><a href="#fread-和fwrite" class="headerlink" title="fread()和fwrite()"></a>fread()和fwrite()</h2><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-typedef</title>
    <url>/C%E8%AF%AD%E8%A8%80-typedef.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-指针</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><em>指针是一个值为地址的变量</em></p>
<p><em>被调函数虽然只是用它自己的局部变量，不可以对调用函数的变量的值进行修改；但使用指针时，可以被修改</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br></pre></td></tr></table></figure>



<h2 id="int-p-中-p和p的差别"><a href="#int-p-中-p和p的差别" class="headerlink" title="int *p 中 *p和p的差别"></a>int *p 中 *p和p的差别</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*p可以当做变量来用;*的作用是取后面地址p里面的数值</span><br><span class="line">p是当作地址来使用</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*p++ 和 (*p)++的之间的差别</span><br><span class="line">    *p++是 地址会变化。</span><br><span class="line"></span><br><span class="line">	(*p)++ 是数值会要变化</span><br></pre></td></tr></table></figure>

<h2 id="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"><a href="#数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。" class="headerlink" title="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"></a>数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。</h2><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-间接运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%97%B4%E6%8E%A5%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="间接运算符"><a href="#间接运算符" class="headerlink" title="间接运算符"></a>间接运算符</h1><p><em>获得地址所指向的值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-地址运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="地址运算符-amp"><a href="#地址运算符-amp" class="headerlink" title="地址运算符&amp;"></a>地址运算符&amp;</h1><p><em>可以使用&amp;获得变量的内存地址</em></p>
<p><em>%p是地址输出说明符</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-递归</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%80%92%E5%BD%92.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line">    fun(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">    <span class="keyword">if</span> (n&lt;<span class="number">5</span>)</span><br><span class="line">    	fun(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p><em>调用语句在函数最后，return之前</em></p>
<p><em>最简单的递归形式</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="使用函数的必要性"><a href="#使用函数的必要性" class="headerlink" title="使用函数的必要性"></a>使用函数的必要性</h2><p><em>一次编写，多出使用，避免重复编写</em></p>
<p><em>模块化，已阅读，修改，编写</em></p>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h2 id="声明函数原型"><a href="#声明函数原型" class="headerlink" title="声明函数原型"></a>声明函数原型</h2><p><em>在调用自定义函数时，都必须在main外面或里面声明函数原型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 声明函数原型</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	fun1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h2><p><em>定义函数是，有多个参数，用逗号隔开；参数名前要带变量类型；不能像声明同类型变量时，一次声明多个变量</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure>



<h2 id="带参数的函数原型声明"><a href="#带参数的函数原型声明" class="headerlink" title="带参数的函数原型声明"></a>带参数的函数原型声明</h2><p><em>可以省略原型中的参数名，只带类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p><em>函数原型中参数的名字</em></p>
<h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p><em>调用时赋给形参的具体值</em></p>
<h2 id="调用函数和被调用函数"><a href="#调用函数和被调用函数" class="headerlink" title="调用函数和被调用函数"></a>调用函数和被调用函数</h2><p><em>因为被调函数使用的值是从调用函数复制来的值，所以在被调函数中修改值，外层的值不会改变</em></p>
<h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p><em>可以在函数执行中返回值，然后该语句块结束</em></p>
<h2 id="不确定参数的函数"><a href="#不确定参数的函数" class="headerlink" title="不确定参数的函数"></a>不确定参数的函数</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-结构数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-嵌套结构</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h1><p><em>一个结构不能包含它自己；但可以包含它自己结构的指针；也可以包含另一个结构</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> first[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> second[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span></span><br><span class="line">    <span class="keyword">char</span> favfood[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> job[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-putchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-某些程序编程技巧</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%9F%90%E4%BA%9B%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="某些程序编程技巧"><a href="#某些程序编程技巧" class="headerlink" title="某些程序编程技巧"></a>某些程序编程技巧</h1><h2 id="循环用gets赋值时退出循环"><a href="#循环用gets赋值时退出循环" class="headerlink" title="循环用gets赋值时退出循环"></a>循环用gets赋值时退出循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(gets(arr1)!=<span class="literal">NULL</span>&amp;&amp;arr1!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">x</span><br><span class="line">x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>第一个条件当gets试图超出文件读取时返会NULL；第二个条件，避免用户没有输入直接回车</em></p>
<h2 id="gets-和scanf一起使用时"><a href="#gets-和scanf一起使用时" class="headerlink" title="gets()和scanf一起使用时"></a>gets()和scanf一起使用时</h2><p><em>由于scanf不会对缓冲输入区中删除最后的回车；如果此时再使用gets，就会导致gets不会读取用户输入，直接停止。所以在使用gets()前要对缓冲区中的\n删除，如下操作：</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>， arr)</span><br><span class="line"><span class="keyword">while</span>(getchar()!=<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">gets(xxx)</span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-getchar和putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-getchar%E5%92%8Cputchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h1><p><em>可以从输入缓冲区读取一个字符，并作为返回值</em></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar(); <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">putchar</span>(ch); <span class="comment">// a</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch); </span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; <span class="meta">#agd</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&gt;&gt;&gt; <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;      <span class="comment">// 5输完回车，光标应该在这一行，但getchar读取缓冲区scanf执行后未删除的‘/n’,跳到下一行，缓冲区空，输入进入后面的循环</span></span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;fgsh#</span><br><span class="line">&gt;&gt;&gt;fgsh</span><br></pre></td></tr></table></figure>

<h2 id="getchar和缓冲区链接"><a href="#getchar和缓冲区链接" class="headerlink" title="getchar和缓冲区链接"></a>getchar和缓冲区链接</h2><p><a href="https://blog.csdn.net/gxyqn626/article/details/79253238" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://blog.csdn.net/lws123253/article/details/79848373" target="_blank" rel="external nofollow noopener noreferrer">URL2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-C语言中分配了动态内存后一定要释放吗？</title>
    <url>/C%E8%AF%AD%E8%A8%80-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%88%86%E9%85%8D%E4%BA%86%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%90%8E%E4%B8%80%E5%AE%9A%E8%A6%81%E9%87%8A%E6%94%BE%E5%90%97%EF%BC%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="C语言中分配了动态内存后一定要释放吗？"><a href="#C语言中分配了动态内存后一定要释放吗？" class="headerlink" title="C语言中分配了动态内存后一定要释放吗？"></a>C语言中分配了动态内存后一定要释放吗？</h1><p><em>好的开发习惯是使用后就释放</em></p>
<h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><em>运行过程中手动分配很少的内存，这样的程序不使用free()也不会太影响系统性能；程序结束后操作系统会自动释放内存</em></p>
<h2 id="开发大项目"><a href="#开发大项目" class="headerlink" title="开发大项目"></a>开发大项目</h2><p><em>程序中需要分配大量的内存，如果使用后不释放，可能会造成系统崩溃</em></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/lyw736632087/article/details/80346536" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-sizeof</title>
    <url>/C%E8%AF%AD%E8%A8%80-sizeof.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p><em>以字节为单位给出对象的大小</em></p>
<p><strong>测类型必须要括号；测具体量可有可无；但最好所有都带括号</strong></p>
<h2 id="有括号"><a href="#有括号" class="headerlink" title="有括号"></a>有括号</h2><p><em>测类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">siezeof (<span class="keyword">char</span>);</span><br><span class="line">siezeof (<span class="keyword">float</span>);</span><br></pre></td></tr></table></figure>



<h2 id="无括号"><a href="#无括号" class="headerlink" title="无括号"></a>无括号</h2><p><em>测具体量；也可以有括号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">sizeof</span> a <span class="comment">// sizeof (a)</span></span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-字符串</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><em>和java语言一样，严格用双引号代表字符串，单引号代表字符</em></p>
<p><em>在C语言中没有专门为字符串定义变量类型；用字符数组存储字符串，字符数组实际存储的元素个数要比字符串元素个数多一，因为字符数组最后会存储一个空字符\0</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"xfssef"</span>;</span><br></pre></td></tr></table></figure>



<h2 id="strlen和sizeof"><a href="#strlen和sizeof" class="headerlink" title="strlen和sizeof"></a>strlen和sizeof</h2><p><em>都可以用来计算字符串的长度，但是差异却很大</em></p>
<h3 id="当定义字符串时没有明确说明字符串多长"><a href="#当定义字符串时没有明确说明字符串多长" class="headerlink" title="当定义字符串时没有明确说明字符串多长"></a>当定义字符串时没有明确说明字符串多长</h3><p><em>strlen会给出准确答案，但sizeof会比strlen大1，这是因为它算上了空白符</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="当定义字符串时明确说明字符串多长"><a href="#当定义字符串时明确说明字符串多长" class="headerlink" title="当定义字符串时明确说明字符串多长"></a>当定义字符串时明确说明字符串多长</h3><p><em>sizeof会给出字符数组的大小，strlen给出准确值</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">40</span>] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure>

<h2 id="strcpy和strcat"><a href="#strcpy和strcat" class="headerlink" title="strcpy和strcat"></a>strcpy和strcat</h2><p><em>strcpy是为字符串赋值；strcat字符串后面添加字符串</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(arr, <span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">strcat</span>(arr, <span class="string">".red"</span>);</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-malloc</title>
    <url>/C%E8%AF%AD%E8%A8%80-malloc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-gets和scanf</title>
    <url>/C%E8%AF%AD%E8%A8%80-gets%E5%92%8Cscanf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="gets-get-string"><a href="#gets-get-string" class="headerlink" title="gets(get string)"></a>gets(get string)</h1><h2 id="gets和scanf的区别"><a href="#gets和scanf的区别" class="headerlink" title="gets和scanf的区别"></a>gets和scanf的区别</h2><h3 id="字符串的读入"><a href="#字符串的读入" class="headerlink" title="字符串的读入"></a>字符串的读入</h3><p><em>gets可以直接读取包含空格的字符串；而scanf当读到空格等就停止读取</em></p>
<h3 id="给字符变量赋值"><a href="#给字符变量赋值" class="headerlink" title="给字符变量赋值"></a>给字符变量赋值</h3><p><em>gets可以传参的类型为：字符指针变量；字符数组</em></p>
<p><em>gets从输入缓冲区读入字符串存储到字符指针变量或字符数组所指向的内存空间</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为字符指针</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> * fp = str;</span><br><span class="line">gets(fp)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为字符数组</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">10</span>];</span><br><span class="line">gets(arr)</span><br></pre></td></tr></table></figure>

<h2 id="是否清空本次输入的回车"><a href="#是否清空本次输入的回车" class="headerlink" title="是否清空本次输入的回车"></a>是否清空本次输入的回车</h2><p><strong>gets</strong>：<em>会自动清除输入缓冲区的回车</em></p>
<p><strong>scanf</strong>：<em>不会</em></p>
<p><strong>案例:</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1);  </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br></pre></td></tr></table></figure>

<h3 id="使用getchar清除缓冲区的回车"><a href="#使用getchar清除缓冲区的回车" class="headerlink" title="使用getchar清除缓冲区的回车"></a>使用getchar清除缓冲区的回车</h3>

<h2 id="scanf博客链接"><a href="#scanf博客链接" class="headerlink" title="scanf博客链接"></a>scanf博客链接</h2><a href="/C%E8%AF%AD%E8%A8%80-printf%E5%92%8Cscanf.html" title="C语言-printf和scanf">C语言-printf和scanf</a>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-puts</title>
    <url>/C%E8%AF%AD%E8%A8%80-puts.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h1><p><em>其实和printf差不多；但printf比puts更强大，更加灵活</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"abcdef"</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"abcdef\n"</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<em>注意puts输出时会自动换行</em></p>
<p><strong>注意当puts的参数为字符指针或字符数组时，只能有字符指针名或字符数组名</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">char</span> * str2 = <span class="string">"efg"</span>;</span><br><span class="line"><span class="built_in">puts</span>(str1); <span class="comment">// "abcd"</span></span><br><span class="line"><span class="built_in">puts</span>(str2); <span class="comment">// "efg"</span></span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-链表</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><em>案例：当有很多结构对象时，我们可以选择用数组来存储  ,可以用数组存储结构指针，在一定程度上减小了内存浪费；再进一步可以用链表来完成</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">library</span>[<span class="title">MAXLEN</span>];</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAXLEN; i++)&#123;</span><br><span class="line">		library[i] = (struct book *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct book));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TSIZE  30</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">film</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">int</span> rating; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="comment">// 输入创建链表</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter movie title:	"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">current</span>, *<span class="title">head</span>, *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="keyword">char</span> input[TSIZE];</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(gets(input) != <span class="literal">NULL</span> &amp;&amp; input[<span class="number">0</span>] != <span class="string">'\0'</span>)&#123;</span><br><span class="line">        current = (struct film *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(struct film));</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">            head = current;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev -&gt; next = current;</span><br><span class="line">    	current -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(current-&gt;title, input);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter your rating &lt;0-10&gt;:	"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;current-&gt;rating);</span><br><span class="line">        <span class="comment">// / scanf不会自动清除输入缓冲区的换行符 </span></span><br><span class="line">        <span class="keyword">while</span>(getchar()!=<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter next moive title(empty line to stop):	"</span>);</span><br><span class="line">        prev = current;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示链表</span></span><br><span class="line">    <span class="keyword">if</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Here is the movie list:	\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"No data Entered.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"moive: %s Rating: %d\n"</span>, current-&gt;title, current-&gt;rating);</span><br><span class="line">        current= current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任务完成，释放分配空间</span></span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Bye\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Here is the movie list:	\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"No data Entered.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"moive: %s Rating: %d\n"</span>, current-&gt;title, current-&gt;rating);</span><br><span class="line">        current= current-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><em>元素个数确定；所有元素类型相同</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int numbers[10];</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><em>不初始化，元素值为无意义值；部分赋值，其它的为0</em></p>
<p><em>不允许用一个数组赋值另一个数组</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">int numbers[5] &#x3D; &#123;1,2,3,4,5&#125;;</span><br><span class="line">numbers[0]&#x3D; 5;</span><br><span class="line">2.</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define months 12</span><br><span class="line"></span><br><span class="line">int days[months]&#x3D;&#123;31, 29, 31, 30, 31,30,31,31,30,31,30,31&#125;; &#x2F;&#x2F; 用标识符常量来代表大小，修改时很方便</span><br><span class="line">3.</span><br><span class="line">int months[] &#x3D; &#123;1, 2, 3&#125;; &#x2F;&#x2F; 数组大小由括号类个数确定</span><br></pre></td></tr></table></figure>

<h2 id="指定初始化项目-C99"><a href="#指定初始化项目-C99" class="headerlink" title="指定初始化项目(C99)"></a>指定初始化项目(C99)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int months[5] &#x3D; &#123;[4]&#x3D;30&#125;;</span><br><span class="line"></span><br><span class="line">int days[10] &#x3D; &#123;1, 2 ,[1]&#x3D;1,2,3,4,[6]&#x3D;5,6,7,8,9&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="设置为只读"><a href="#设置为只读" class="headerlink" title="设置为只读"></a>设置为只读</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const int months[5] &#x3D; &#123;31, 29, 31,30,31&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p><em>当定义时是没有给出数组明确大小；可以用sizeof</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int months[] &#x3D; &#123;1, 2, 3, 4&#125;;</span><br><span class="line">int i;</span><br><span class="line">&#x2F;&#x2F; sizeof后跟对象后字节大小，下例用总大小&#x2F;单个大小</span><br><span class="line">for(i&#x3D;0; i&lt;sizeof months&#x2F;sizeof months[0]; i++)&#123;</span><br><span class="line">xxx</span><br><span class="line">    xx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><em>采用索引对应每一个元素</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numbers[0];</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<em>索引不能超过正确范围；超过编译器不能检查出错误，有时可能程序能够正常运行，但会结果会出错，最糟糕会导致计算机锁死或重启</em></p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[2][2]&#x3D;&#123;&#123;1,2&#125;,&#123;1,2&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">(*(a+<span class="number">1</span>))[<span class="number">2</span>]; <span class="comment">// *(a+1)[2]  中括号的优先级比*高</span></span><br><span class="line">*(*(a+<span class="number">1</span>)+<span class="number">2</span>); </span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>]变成*(a+<span class="number">2</span>); a[<span class="number">2</span>][<span class="number">3</span>]变成 (*(a+<span class="number">2</span>))[<span class="number">3</span>]再可以变成 *(*(a+<span class="number">2</span>)+<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h2 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>[5];</span></span><br></pre></td></tr></table></figure>



<h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p><em>在没学链表之前可以这么做</em></p>
<p><em>可以避免一次malloc申请一片连续的存储空间</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">fp</span>;</span></span><br><span class="line">fp = (struct book *) <span class="built_in">malloc</span>(<span class="number">5</span>*<span class="keyword">sizeof</span>(struct book));</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">fp</span>[<span class="title">MAX</span>];</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">    fp[i]=(struct book *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct book));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-结构</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><em>感觉跟其它语言的类拥有很多属性一样</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTITLE 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AUTHOR 12</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[maxtitle];</span><br><span class="line">    <span class="keyword">char</span> author[author];</span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>;</span> <span class="comment">//声明单个</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library1</span>，<span class="title">library2</span>;</span> <span class="comment">//声明多个</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">ptbook</span>;</span><span class="comment">// 声明一个指针指向该结构</span></span><br></pre></td></tr></table></figure>

<h2 id="定义和声明放一起"><a href="#定义和声明放一起" class="headerlink" title="定义和声明放一起"></a>定义和声明放一起</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[maxtitle];</span><br><span class="line">    <span class="keyword">char</span> author[author];</span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line">&#125; library; <span class="comment">//这时省略book标记也可以</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><em>可以和初始化数组类似的方法初始化</em></p>
<p><strong>注意</strong>：<em>初始化的每一条项目必须与成员类型相同；赋值顺序要和定义的一样</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span> = &#123;</span></span><br><span class="line">    <span class="string">"the pirate and the deious damsel"</span>,</span><br><span class="line">    <span class="string">"renee vivote"</span>,</span><br><span class="line">    <span class="number">1.95</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line">gets(library.title); <span class="comment">//将输入的值赋给title</span></span><br></pre></td></tr></table></figure>



<h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构变量.成员名称</span></span><br><span class="line">library.title;</span><br></pre></td></tr></table></figure>



<h2 id="结构的指定初始化项目"><a href="#结构的指定初始化项目" class="headerlink" title="结构的指定初始化项目"></a>结构的指定初始化项目</h2><p><em>跟数组的初始化项目类似</em></p>
<p><strong>赋值顺序不一定要和定义的一样</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span> = &#123;</span></span><br><span class="line">    .title = <span class="string">"fxxx"</span>,</span><br><span class="line">    .value = <span class="number">12.5</span>,</span><br><span class="line">    .author = <span class="string">"xxx"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h2><a href="/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html" title="C语言-嵌套结构">C语言-嵌套结构</a>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>结构</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-指针和数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p><em>指针提供一种用来使用地址的符号方法</em></p>
<p><strong>数组的名称就是该数组首元素的地址</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line">arr = &amp;arr[<span class="number">0</span>]; <span class="comment">//&amp;:地址运算符</span></span><br></pre></td></tr></table></figure>

<p><em>arr和&amp;arr[0]都表示该数组的首元素内存地址</em></p>
<p><strong>声明指针时前面必须写对象类型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>*pti;</span><br><span class="line">pti=arr;<span class="comment">//数组地址赋给指针</span></span><br></pre></td></tr></table></figure>

<p><em>对一个指针加1，是对该指针增加一个存储单元；对于数组来说是对应到下一个元素地址；所以声明指针时要指明类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> nu[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> * pti;</span><br><span class="line">  pti = nu;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, pti); <span class="comment">//000000000062FE00</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p"</span>, pti+<span class="number">1</span>); <span class="comment">//000000000062FE04</span></span><br><span class="line">  &#125;					<span class="comment">//刚好一个int类型的数据是4个字节</span></span><br></pre></td></tr></table></figure>

<p><strong>对指针加1等价于对指针的值加上它指向的对象的字节大小</strong></p>
<p><strong>在指针前使用’星号‘可以得到它指向的值</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">*(arr+<span class="number">2</span>) = arr[<span class="number">2</span>]; <span class="comment">//这里的arr的地址就是指针</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-预处理指令</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h1><h2 id="include-lt-stdio-h-gt"><a href="#include-lt-stdio-h-gt" class="headerlink" title="#include &lt;stdio.h&gt;"></a>#include &lt;stdio.h&gt;</h2><h2 id="define-MONTHS-12"><a href="#define-MONTHS-12" class="headerlink" title="#define MONTHS 12"></a>#define MONTHS 12</h2><p><em>标识符常量</em></p>
<p><strong>必须大写</strong></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>火车订票系统-主函数设计</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E4%B8%BB%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>火车订票系统-具备的功能</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E5%85%B7%E5%A4%87%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="具备的功能"><a href="#具备的功能" class="headerlink" title="具备的功能"></a>具备的功能</h1><h2 id="插入火车信息"><a href="#插入火车信息" class="headerlink" title="插入火车信息"></a>插入火车信息</h2><h2 id="修改火车信息"><a href="#修改火车信息" class="headerlink" title="修改火车信息"></a>修改火车信息</h2><h2 id="查询火车信息"><a href="#查询火车信息" class="headerlink" title="查询火车信息"></a>查询火车信息</h2><h2 id="显示车次信息"><a href="#显示车次信息" class="headerlink" title="显示车次信息"></a>显示车次信息</h2><h2 id="订票功能"><a href="#订票功能" class="headerlink" title="订票功能"></a>订票功能</h2><h2 id="保存火车和订票信息"><a href="#保存火车和订票信息" class="headerlink" title="保存火车和订票信息"></a>保存火车和订票信息</h2><p><a href="https://imgchr.com/i/dfCwDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/26/dfCwDS.md.jpg" alt="dfCwDS.jpg" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>火车订票系统</tag>
      </tags>
  </entry>
  <entry>
    <title>火车订票系统-预处理模块设计</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E9%A2%84%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="预处理模块设计"><a href="#预处理模块设计" class="headerlink" title="预处理模块设计"></a>预处理模块设计</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><h2 id="火车和订票人结构体链表"><a href="#火车和订票人结构体链表" class="headerlink" title="火车和订票人结构体链表"></a>火车和订票人结构体链表</h2><h2 id="火车和订票人信息链表"><a href="#火车和订票人信息链表" class="headerlink" title="火车和订票人信息链表"></a>火车和订票人信息链表</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>火车订票系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-基本常识</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%AF%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="C语言基本常识"><a href="#C语言基本常识" class="headerlink" title="C语言基本常识"></a>C语言基本常识</h1><h2 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h2><h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="在数值变量前加-amp-得到它的地址，在指针变量前加-得到值"><a href="#在数值变量前加-amp-得到它的地址，在指针变量前加-得到值" class="headerlink" title="在数值变量前加&amp;得到它的地址，在指针变量前加*得到值"></a>在数值变量前加&amp;得到它的地址，在指针变量前加*得到值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * c, <span class="keyword">int</span> * a, <span class="keyword">int</span> * b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>, b=<span class="number">0</span>;</span><br><span class="line">	gets(str);</span><br><span class="line">	fun(str, &amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"upper %d lower %d"</span>, a, b);</span><br><span class="line">	getch();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * c, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(*c)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">'A'</span>&lt;=*c &amp;&amp; *c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">			(*a)++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">'a'</span>&lt;=*c &amp;&amp; *c&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">			(*b)++;</span><br><span class="line">		&#125;</span><br><span class="line">		c++;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="字符串变量就是第一个字符的地址，等价于在变量前加-amp"><a href="#字符串变量就是第一个字符的地址，等价于在变量前加-amp" class="headerlink" title="字符串变量就是第一个字符的地址，等价于在变量前加&amp;"></a>字符串变量就是第一个字符的地址，等价于在变量前加&amp;</h3><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环当中必须是两个分号，千万不要忘记"><a href="#for循环当中必须是两个分号，千万不要忘记" class="headerlink" title="for循环当中必须是两个分号，千万不要忘记"></a>for循环当中必须是两个分号，千万不要忘记</h3><h3 id="do-while-循环的后一个while-的分号一定不能够丢"><a href="#do-while-循环的后一个while-的分号一定不能够丢" class="headerlink" title="do-while()循环的后一个while();的分号一定不能够丢"></a>do-while()循环的后一个while();的分号一定不能够丢</h3><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="while-c-getchar-’-n’-和-while-c-getchar-’-n’-的差别"><a href="#while-c-getchar-’-n’-和-while-c-getchar-’-n’-的差别" class="headerlink" title="while((c=getchar())!=’\n’)和 while(c=getchar() !=’\n’)的差别"></a>while((c=getchar())!=’\n’)和 while(c=getchar() !=’\n’)的差别</h3><p><em>先看a = 3 != 2 和(a=3)!=2 的区别：(!=号的级别高于=号 所以个先计算 3!=2) 个a的数值是得到的1;第二个a的数值是3</em></p>
<h3 id="“-int-f“表示将f中的值强制类型转换为整型，即将13-8的小数部分舍掉，转换为13"><a href="#“-int-f“表示将f中的值强制类型转换为整型，即将13-8的小数部分舍掉，转换为13" class="headerlink" title="“(int)f“表示将f中的值强制类型转换为整型，即将13.8的小数部分舍掉，转换为13"></a>“(int)f“表示将f中的值强制类型转换为整型，即将13.8的小数部分舍掉，转换为13</h3><h3 id="文件操作中的W"><a href="#文件操作中的W" class="headerlink" title="文件操作中的W"></a>文件操作中的W</h3><p><em>是指如果文件存在时且有内容，则清零；没有则创建</em></p>
<p><em>只是在打开文件时这样操作，打开后的连续写入，并不会清零</em></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组的中括号中不能为变量，可以是整型常量"><a href="#定义数组的中括号中不能为变量，可以是整型常量" class="headerlink" title="定义数组的中括号中不能为变量，可以是整型常量"></a>定义数组的中括号中不能为变量，可以是整型常量</h3><h3 id="定义数组是如果没有指明元素个数，则必须在初始化时赋值"><a href="#定义数组是如果没有指明元素个数，则必须在初始化时赋值" class="headerlink" title="定义数组是如果没有指明元素个数，则必须在初始化时赋值"></a>定义数组是如果没有指明元素个数，则必须在初始化时赋值</h3><h3 id="数组名为数组第一个元素的地址"><a href="#数组名为数组第一个元素的地址" class="headerlink" title="数组名为数组第一个元素的地址"></a>数组名为数组第一个元素的地址</h3><h3 id="对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定"><a href="#对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定" class="headerlink" title="对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定"></a>对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定</h3><p><em>二维数组的定义方式。第一维的大小由以下方法判断： ①当初值的个数能被第二维的常量表达式的值除尽时，所得商数就是第一维的大小； ②当初值的个数不能被第二维的常量表达式的值除尽时，则第一维的大小：所得的商数+1</em></p>
<p><em>二维数组的一维大小，即指二维数组的行数</em></p>
<p><em>二维数组初始化时可以省略行数，但不能省略列数</em></p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="结构定义后可以直接在尾括号的后面加要定义的变量"><a href="#结构定义后可以直接在尾括号的后面加要定义的变量" class="headerlink" title="结构定义后可以直接在尾括号的后面加要定义的变量"></a>结构定义后可以直接在尾括号的后面加要定义的变量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">xxxx</span><br><span class="line">&#125;stu;</span><br></pre></td></tr></table></figure>

<h3 id="对结构成员变量的引用"><a href="#对结构成员变量的引用" class="headerlink" title="对结构成员变量的引用"></a>对结构成员变量的引用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;stu, *p;</span><br><span class="line">p=&amp;stu;</span><br><span class="line">&gt;&gt;&gt;stu.age</span><br><span class="line">&gt;&gt;&gt;p-&gt;age</span><br><span class="line">&gt;&gt;&gt;(*p).age</span><br></pre></td></tr></table></figure>

<h3 id="结构的实例变量不是地址"><a href="#结构的实例变量不是地址" class="headerlink" title="结构的实例变量不是地址"></a>结构的实例变量不是地址</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>, *<span class="title">p</span>;</span></span><br><span class="line">	p=&amp;stu;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,(*p).age);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><h3 id="的优先级高于"><a href="#的优先级高于" class="headerlink" title="!=的优先级高于=="></a>!=的优先级高于==</h3><h3 id="的优先级低于-’-’"><a href="#的优先级低于-’-’" class="headerlink" title="*的优先级低于[],’.’"></a>*的优先级低于[],’.’</h3><h3 id="java优先级"><a href="#java优先级" class="headerlink" title="java优先级"></a>java优先级</h3><p><a href="https://imgchr.com/i/wj13cQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj13cQ.md.jpg" alt="wj13cQ.jpg" border="0"></a></p>
<h3 id="c语言优先级"><a href="#c语言优先级" class="headerlink" title="c语言优先级"></a>c语言优先级</h3><p><a href="https://imgchr.com/i/wj3QV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3QV1.png" alt="wj3QV1.png" border="0"></a><br><a href="https://imgchr.com/i/wj3KbR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3KbR.md.png" alt="wj3KbR.md.png" border="0"></a></p>
<h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><h3 id="用单引号表示字符，双引号表示字符串"><a href="#用单引号表示字符，双引号表示字符串" class="headerlink" title="用单引号表示字符，双引号表示字符串"></a>用单引号表示字符，双引号表示字符串</h3><h3 id="char-x-”hello”-y-‘h’-’e’-’a’-’b’-’e’"><a href="#char-x-”hello”-y-‘h’-’e’-’a’-’b’-’e’" class="headerlink" title="char x[]=”hello”, y[]={‘h’,’e’,’a’,’b’,’e’}"></a>char x[]=”hello”, y[]={‘h’,’e’,’a’,’b’,’e’}</h3><p><em>x的长度为6，y的长度为5</em></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数形参类型为数组时"><a href="#函数形参类型为数组时" class="headerlink" title="函数形参类型为数组时"></a>函数形参类型为数组时</h3><p><em>可以像声明数组那样定义形参，也可以用数组元素类型的指针</em></p>
<h3 id="形参赋值"><a href="#形参赋值" class="headerlink" title="形参赋值"></a>形参赋值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">float</span> *p1,<span class="keyword">float</span> *p2,<span class="keyword">float</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123; s = (<span class="keyword">float</span> *)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>)); <span class="comment">//s此时已经不bai再指向a了</span></span><br><span class="line">*s = *p1 + *p2 ++; <span class="comment">// 这句话相当du于 *s=*p1+*p2;*p2=*p2+1;</span></span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123; <span class="keyword">float</span> a[<span class="number">2</span>] = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>&#125;,b[<span class="number">2</span>] = &#123;<span class="number">10.0</span>,<span class="number">20.0</span>&#125;,*s = a;</span><br><span class="line">fun(a,b,s); <span class="built_in">printf</span>(<span class="string">"%5.2f\n"</span>,*s); <span class="comment">//函数中s被指向另一个地址，所以a的内容zhi没变化，此处daos仍是指向a, 此处*s等价于a[0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>关键在这一句<br>s = (float <em>)calloc(1,sizeof(float));<br>给s新分配空间了<br>而主函数中s指向的还是数组a<br>你如果把这句话去掉结果就是11.10了</em></em></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><em>其实就是为变量开辟存储空间，标记存储地址，并赋初值的过程</em></p>
<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><em>不同进制只是为了方便使用，但最终落实到计算机上都是以二进制存储</em></p>
<h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><p><em>用0x或0X表示</em></p>
<h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p><em>%x</em></p>
<h4 id="显示前缀"><a href="#显示前缀" class="headerlink" title="显示前缀"></a>显示前缀</h4><p><em>%#X或%#x</em></p>
<h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><p><em>用0表示</em></p>
<h4 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h4><p><em>%o</em></p>
<h4 id="显示前缀-1"><a href="#显示前缀-1" class="headerlink" title="显示前缀"></a>显示前缀</h4><p><em>%#o</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %x %o"</span>, a); <span class="comment">// 100 144 64</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %#x %#o"</span>, a); <span class="comment">// 100 0144 0x64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C基本常识</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-头文件</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%A4%B4%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="用过的头文件"><a href="#用过的头文件" class="headerlink" title="用过的头文件"></a>用过的头文件</h1><h2 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a>stdio.h</h2><p><em>包含c语言标准库函数</em></p>
<p><em>FILE指针</em></p>
<h2 id="math-h"><a href="#math-h" class="headerlink" title="math.h"></a>math.h</h2><p><em>数学函数</em></p>
<h2 id="conio-h-consoel-input-output"><a href="#conio-h-consoel-input-output" class="headerlink" title="conio.h(consoel input/output)"></a>conio.h(consoel input/output)</h2><p><em>与控制台交互相关；显示，输入输出</em></p>
<h2 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a>stdlib.h</h2><p><em>malloc在这里面</em></p>
<h2 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h2><h2 id="头文件的使用"><a href="#头文件的使用" class="headerlink" title="头文件的使用"></a>头文件的使用</h2><p><em>如果程序分为很多文件，这样可能不同文件都会用到其它文件的函数，这时就需要对每个调用函数的文件进行函数原型声明；可以把所有的函数原型声明写在头文件里，然后在include导入就可以了；定义的常量也可以这样操作</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxx</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxx</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xxx.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> test.h</span></span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-犯得错误</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="犯的错误"><a href="#犯的错误" class="headerlink" title="犯的错误"></a>犯的错误</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p><em>括号里是分号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i; i&lt;<span class="number">100</span>; i++)</span><br></pre></td></tr></table></figure>



<h2 id="一次定义多个变量"><a href="#一次定义多个变量" class="headerlink" title="一次定义多个变量"></a>一次定义多个变量</h2><p><em>变量间用逗号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br></pre></td></tr></table></figure>



<h2 id="scanf赋值"><a href="#scanf赋值" class="headerlink" title="scanf赋值"></a>scanf赋值</h2><p><em>赋值得用&amp;</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a)</span><br></pre></td></tr></table></figure>



<h2 id="define-MONTHS-12"><a href="#define-MONTHS-12" class="headerlink" title="#define MONTHS 12"></a>#define MONTHS 12</h2><p><em>标识符常量必须大写</em></p>
<h1 id="gets-arr1-NULL"><a href="#gets-arr1-NULL" class="headerlink" title="gets(arr1) !=NULL"></a>gets(arr1) !=NULL</h1><p><em>gets()试图超过文件结尾读取字符，这个表达式的值为NULL</em></p>
<h2 id="使用scanf对字符数组赋值时，不用-amp"><a href="#使用scanf对字符数组赋值时，不用-amp" class="headerlink" title="使用scanf对字符数组赋值时，不用&amp;"></a>使用scanf对字符数组赋值时，不用&amp;</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, arr)</span><br></pre></td></tr></table></figure>

<h2 id="指针和结构体变量"><a href="#指针和结构体变量" class="headerlink" title="指针和结构体变量"></a>指针和结构体变量</h2><p><a href="https://imgchr.com/i/0SBlJU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/24/0SBlJU.md.png" alt="0SBlJU.png" border="0"></a></p>
<h2 id="main函数参数"><a href="#main函数参数" class="headerlink" title="main函数参数"></a>main函数参数</h2><p><em>当有参数是，第一个参数是整数，第二个是字符串数组指针</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C犯的错误</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-求负数数的二进制</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%B1%82%E8%B4%9F%E6%95%B0%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="负数和二进制"><a href="#负数和二进制" class="headerlink" title="负数和二进制"></a>负数和二进制</h1><h2 id="求负数的二进制"><a href="#求负数的二进制" class="headerlink" title="求负数的二进制"></a>求负数的二进制</h2><p><a href="https://zhinan.sogou.com/guide/detail/?id=316513311050" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><em>先求绝对值的二进制，取反，加1</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5</span><br><span class="line">00000101</span><br><span class="line"></span><br><span class="line">11111010</span><br><span class="line"></span><br><span class="line">11111011</span><br></pre></td></tr></table></figure>

<h2 id="知道负数的二进制求十进制"><a href="#知道负数的二进制求十进制" class="headerlink" title="知道负数的二进制求十进制"></a>知道负数的二进制求十进制</h2><p><em>相反操作；先减1；再取反；在算</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-求一个十进制数的二进制</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%B1%82%E4%B8%80%E4%B8%AA%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="求一个十进制数的二进制"><a href="#求一个十进制数的二进制" class="headerlink" title="求一个十进制数的二进制"></a>求一个十进制数的二进制</h2><p><a href="https://zhinan.sogou.com/guide/detail/?id=316513311050" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-位运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><h2 id="位逻辑运算符"><a href="#位逻辑运算符" class="headerlink" title="位逻辑运算符"></a>位逻辑运算符</h2><h3 id="amp-位与运算符"><a href="#amp-位与运算符" class="headerlink" title="&amp; 位与运算符"></a>&amp; 位与运算符</h3><p><em>同一为1</em></p>
<h3 id="位或运算符"><a href="#位或运算符" class="headerlink" title="| 位或运算符"></a>| 位或运算符</h3><p><em>有1为1</em></p>
<h3 id="位非运算符"><a href="#位非运算符" class="headerlink" title="~ 位非运算符"></a>~ 位非运算符</h3><p><em>取反</em></p>
<h3 id="位异或运算符"><a href="#位异或运算符" class="headerlink" title="^ 位异或运算符"></a>^ 位异或运算符</h3><p><em>不同为1</em></p>
<h2 id="位位移运算符"><a href="#位位移运算符" class="headerlink" title="位位移运算符"></a>位位移运算符</h2><h3 id="lt-lt-位左移运算符"><a href="#lt-lt-位左移运算符" class="headerlink" title="&lt;&lt; 位左移运算符"></a>&lt;&lt; 位左移运算符</h3><p><em>对应的二进制数左去掉对应位数，右加对应位数0</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">12</span>; <span class="comment">//00001100</span></span><br><span class="line"><span class="keyword">int</span> result = value &lt;&lt; <span class="number">3</span> <span class="comment">// 01100000</span></span><br></pre></td></tr></table></figure>



<h3 id="gt-gt-位右移运算符"><a href="#gt-gt-位右移运算符" class="headerlink" title="&gt;&gt; 位右移运算符"></a>&gt;&gt; 位右移运算符</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-goto语句</title>
    <url>/c%E8%AF%AD%E8%A8%80-goto%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> there; <span class="comment">// 跳转到there标签</span></span><br><span class="line">xxx</span><br><span class="line">there: x = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x==<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">goto</span> w;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">goto</span> j;</span><br><span class="line"></span><br><span class="line">w:</span><br><span class="line">	xxx</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-switch语句</title>
    <url>/C%E8%AF%AD%E8%A8%80-switch%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p><em>没有匹配项，执行default；number要为整数，或表达式结果为整数的表达式</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">35</span>:</span><br><span class="line">        <span class="built_in">printf</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="built_in">printf</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-条件运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">condition ? expression : expression2</span><br></pre></td></tr></table></figure>

<p><em>条件为True，执行表达式1；条件为false，执行表达式2</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x = y &gt; <span class="number">7</span> ? <span class="number">50</span> : <span class="number">70</span> <span class="comment">// y大于7，x的值设置为50；否则x等于70</span></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-逻辑运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><h2 id><a href="#" class="headerlink" title="||"></a>||</h2><h2 id="！"><a href="#！" class="headerlink" title="！"></a>！</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-布尔值</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%B8%83%E5%B0%94%E5%80%BC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h1><p><em>任何非零数值赋给_Bool类型变量时，都是true；否则为false</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-强制类型转换</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-printf和scanf</title>
    <url>/C%E8%AF%AD%E8%A8%80-printf%E5%92%8Cscanf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="printf和scanf"><a href="#printf和scanf" class="headerlink" title="printf和scanf"></a>printf和scanf</h1><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%dkdjkfsj%f.2"</span>, <span class="number">20</span>, <span class="number">2.235</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"djfkjsl\n"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示一个数的十六进制，八进制</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%0, %X"</span>, <span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 小写x也可以</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#0, %#X"</span>, <span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 显示进制前缀</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%8d"</span>, <span class="number">15</span>) <span class="comment">// 8表示以8个固定位宽输出，没符号采用右对齐;若%-3d，采用左对齐</span></span><br><span class="line">    				<span class="comment">//15占两位，所以左边填6个空格</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%6.2f"</span>, <span class="number">1.123</span>) <span class="comment">// 空格空格空格1.12</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3f"</span>, <span class="number">1.1236</span>) <span class="comment">// 1.123</span></span><br></pre></td></tr></table></figure>

<p><em>打印字符，字符串可以不要第一个参数；但数值类型必须要第一个参数；打印字符也要第一个参数；最好是打印所有都带上第一个参数</em></p>
<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">float</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%.2f"</span>,&amp;b);</span><br></pre></td></tr></table></figure>

<p><strong>注意对字符数组赋值不需要&amp;</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, a)</span><br></pre></td></tr></table></figure>

<p><strong>scanf</strong>：<em>读入数据时，遇到空白符，制表符，换行符；就会停止读取，可以用gets替代</em></p>
<h2 id="gets链接"><a href="#gets链接" class="headerlink" title="gets链接"></a>gets链接</h2>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-数据类型</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><em>K&amp;R给出了7个数据类型关键字；C90新增2个；C99有添加3个</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K&amp;R        C90       C99</span><br><span class="line">int		  signed	_Bool</span><br><span class="line">long 	  void		_Complex(复数)</span><br><span class="line">short %hd			_Imaginary(虚数)</span><br><span class="line">unsigned</span><br><span class="line">char</span><br><span class="line">float</span><br><span class="line">double</span><br></pre></td></tr></table></figure>

<p><em>short, long, unsigned, signed是整数类型的变式</em></p>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p><em>之所以存在这么多种整型类型的原因是，整型可以有正负号和取值范围，再者满足不同情况选择不同类型</em></p>
<p><em>以二进制数存储</em></p>
<p><em>int(正负都可以), long, long long, unsigned(非负), signed(可以和有符号的其它类型搭用)</em></p>
<p><em>long的实际数据后要加L，unsigned long要加UL</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> b; %ld</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line"><span class="keyword">unsigned</span> c; <span class="comment">//用%u表示</span></span><br><span class="line"><span class="keyword">signed</span> short d;</span><br></pre></td></tr></table></figure>

<p><em>int类型溢出时，会从int能表示的最小负值开始重新赋值；unsigned无符号类型溢出从0开始</em></p>
<p><em>由于存储unsigned时没有符号位，所以unsigned要比int所能表示的范围大</em></p>
<h3 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span></span><br><span class="line">short</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="keyword">long</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span></span><br></pre></td></tr></table></figure>

<h3 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span></span><br><span class="line"><span class="keyword">unsigned</span> short</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br></pre></td></tr></table></figure>



<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p><em>拆分为小数和指数部分，分别存储</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">3200.0</span>  <span class="comment">// 0.32E4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %e"</span>) <span class="comment">// %f用十进制形式打印； %e用指数形式打印</span></span><br></pre></td></tr></table></figure>



<h2 id="字符char"><a href="#字符char" class="headerlink" title="字符char"></a>字符char</h2><p><em>用一个字节存储</em></p>
<p><em>用单引号；%c</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'C'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %d"</span>, a, a);</span><br></pre></td></tr></table></figure>



<h2 id="二进制，十进制，八进制，十六进制"><a href="#二进制，十进制，八进制，十六进制" class="headerlink" title="二进制，十进制，八进制，十六进制"></a>二进制，十进制，八进制，十六进制</h2><p><em>十六进制：0x，0X，%x</em></p>
<p><em>八进制：0，%o</em></p>
<p><em>需要显示前缀用：%#x，%#o</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %x %o"</span>, a, a, a ); <span class="comment">// 100 144 64</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %#x %#o"</span>, a, a, a ); <span class="comment">// 100 0144 0x64</span></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-多个函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h1><p><em>main()的位置可以是程序任意位置，但执行时总是它开始</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*说明*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 声明函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">butler</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	butler();</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">butler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	xxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>易混淆单词</title>
    <url>/%E6%98%93%E6%B7%B7%E6%B7%86%E5%8D%95%E8%AF%8D.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="2020-8-12"><a href="#2020-8-12" class="headerlink" title="2020.8.12"></a>2020.8.12</h2><h3 id="superior-amp-senior-amp-junior"><a href="#superior-amp-senior-amp-junior" class="headerlink" title="superior&amp;senior&amp;junior"></a>superior&amp;senior&amp;junior</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">superior</span><br><span class="line">adj.</span><br><span class="line">	高级的；上级的；高质的</span><br><span class="line">n.</span><br><span class="line">	上级；上司</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="inhibit-amp-prohibit-amp-refrain-amp-inhabit"><a href="#inhibit-amp-prohibit-amp-refrain-amp-inhabit" class="headerlink" title="inhibit&amp;prohibit&amp;refrain&amp;inhabit"></a>inhibit&amp;prohibit&amp;refrain&amp;inhabit</h3><h3 id="trend-amp-tend-amp-tendency"><a href="#trend-amp-tend-amp-tendency" class="headerlink" title="trend&amp;tend&amp;tendency"></a>trend&amp;tend&amp;tendency</h3><h3 id="implicit-amp-explicit"><a href="#implicit-amp-explicit" class="headerlink" title="implicit&amp;explicit"></a>implicit&amp;explicit</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-第三章</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><em>==等等</em></p>
<p><em>关系运算结果为0或1</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">5</span>&gt;<span class="number">3</span>);  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">3</span>==<span class="number">5</span>);  <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>所有关系运算符的优先级比算术运算的优先级低，但比赋值高</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a = <span class="number">5</span>&gt;<span class="number">4</span>+<span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (xxxxx)&#123;</span><br><span class="line">	pass;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xxx)&#123;</span><br><span class="line">	pass</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-第二章</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="C程序的基本结构"><a href="#C程序的基本结构" class="headerlink" title="C程序的基本结构"></a>C程序的基本结构</h2><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p><strong>main()函数</strong>：<em>可以有其它函数，但必须以它开头</em></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="comment">/*xxxx*/</span></span><br><span class="line"><span class="comment">/*xxx</span></span><br><span class="line"><span class="comment">xxx*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xxxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>

<h4 id="花括号，程序体，代码块"><a href="#花括号，程序体，代码块" class="headerlink" title="花括号，程序体，代码块"></a>花括号，程序体，代码块</h4><p><em>必须用花括号</em></p>
<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p><em>名字是由数字，下划线，大小写字母，但开头必须以下划线或字母</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="声明变量-1"><a href="#声明变量-1" class="headerlink" title="声明变量"></a>声明变量</h3><p><em>可以一次性定义多个</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入金额(元)："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> change = <span class="number">100</span> - price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"找您%d元\n"</span>, change);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c, b</span><br></pre></td></tr></table></figure>



<h4 id="赋值和初始化"><a href="#赋值和初始化" class="headerlink" title="赋值和初始化"></a>赋值和初始化</h4><p><em>初始化不一定要在声明的地方赋值</em></p>
<p><em>不对变量初始化，它的值为地址</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">c, b = <span class="number">1</span>, <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<h4 id="变量输入"><a href="#变量输入" class="headerlink" title="变量输入"></a>变量输入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%a %b"</span>, &amp;a, &amp;b)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, a+b)</span><br></pre></td></tr></table></figure>

<p><em>这里的scanf会读入下一个整数，把值赋给price，注意有个&amp;</em></p>
<p><em>如果输入的不是一个数，则不会读取，输入的是浮点数取整数部分</em></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> amount = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p><em>const是一个修饰符；常量一旦初始化则不能再赋值</em></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p><em>整数运算的结果为整数如：9/3=3</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入你身高的尺数："</span>);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入你身高的寸数："</span>);</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你的身高为(米)：%f"</span>, (a+b/<span class="number">12.0</span>)*<span class="number">0.3048</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//double(双精度)和float(单精度)</span></span><br></pre></td></tr></table></figure>

<h3 id="整数和浮点数输入输出"><a href="#整数和浮点数输入输出" class="headerlink" title="整数和浮点数输入输出"></a>整数和浮点数输入输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">double</span> b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>, b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;b); <span class="comment">// 注意</span></span><br></pre></td></tr></table></figure>

<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// + - * / %</span></span><br></pre></td></tr></table></figure>

<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 乘除取余，大于加减，单目运算大于乘除(如取负)，赋值优先级最低</span></span><br><span class="line">a*-b 包含单目运算</span><br><span class="line">a*+b</span><br><span class="line"><span class="comment">// 赋值从右向左，</span></span><br></pre></td></tr></table></figure>

<h3 id="java优先级"><a href="#java优先级" class="headerlink" title="java优先级"></a>java优先级</h3><p><a href="https://imgchr.com/i/wj13cQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj13cQ.md.jpg" alt="wj13cQ.jpg" border="0"></a></p>
<h3 id="c语言优先级"><a href="#c语言优先级" class="headerlink" title="c语言优先级"></a>c语言优先级</h3><p><a href="https://imgchr.com/i/wj3QV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3QV1.png" alt="wj3QV1.png" border="0"></a><br><a href="https://imgchr.com/i/wj3KbR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3KbR.md.png" alt="wj3KbR.md.png" border="0"></a></p>
<h4 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// += , -=, *=, /=, %=</span></span><br></pre></td></tr></table></figure>

<h4 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ++, --</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count++; <span class="comment">// 1</span></span><br><span class="line">count--; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p><em>它们无论在变量的前面的后面，变量的值都加一或减一</em></p>
<p><strong>注意</strong>：<em>++，–在变量后面，表示用变量之前的值去运算，但最后变量要变化1；在前面表示先变化1，再用新的值去运算</em></p>
<hr>
<blockquote>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-计算机和编程语言</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="计算机和编程语言"><a href="#计算机和编程语言" class="headerlink" title="计算机和编程语言"></a>计算机和编程语言</h2><h3 id="计算机工作的基本原理原理"><a href="#计算机工作的基本原理原理" class="headerlink" title="计算机工作的基本原理原理"></a>计算机工作的基本原理原理</h3><p><em>现代计算机可以分为几个部分：中央处理单元(CPU)；随机访问存储器(RAM)；永久存储器；外围设备</em></p>
<p><em>Cpu从内存中获取指令并执行</em></p>
<p><em>Cpu有很多寄存器作为工作区，一个寄存器可以保存一个数，保存了下一条指令的内存地址</em></p>
<p><em>计算机中存储的一切都是数字</em></p>
<h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p><em>机器语言-&gt;汇编语言-&gt;高级编程语言</em></p>
<h3 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h3><p><strong>解释</strong>：<em>借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行</em></p>
<p><strong>编译</strong>：<em>借助一个程序，就像一个翻译，把你的程序翻译成计算机能真正懂的语言–机器语言，写程序，然后，这个机器语言写的程序就能直接执行</em></p>
<p><strong>总的来说</strong>：<em>解释器解释编写的程序后，之后执行编写的程序还是要再解释；而编译则会生成一个新的程序，可以反复使用</em></p>
<p><strong>注意</strong>：<em>语言本身没有解释和编译之分</em></p>
<p><em>常说的解释\编译型语言只是它的常用执行方式</em></p>
<p><em>解释型语言具有特殊的计算能力</em></p>
<p><em>编译型语言有确定的运算性能</em></p>
<p><em>随着计算机的发展这两种类型的执行方式已经没有太大的区别</em></p>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="使用C语言的步骤"><a href="#使用C语言的步骤" class="headerlink" title="使用C语言的步骤"></a>使用C语言的步骤</h3><p><em>定义程序目标-&gt;设计程序-&gt;编写代码-&gt;编译-&gt;运行程序-&gt;测试和调试-&gt;维护和修改程序</em></p>
<p><strong>注意</strong>：<em>编译分为两步：编译和链接</em></p>
<p><em>编译器将程序生成目标代码(中间文件)，然后链接器将源代码所需的启动代码和库代码的机器码添加到中间文件，最终生成可执行文件</em></p>
<p><strong>源代码</strong>：</p>
<p><strong>目标代码</strong>：<em>缺少启动代码和库代码，不能执行</em></p>
<p><strong>可执行代码</strong>：<em>源代码对应的完整的机器码</em></p>
<img src="https://s1.ax1x.com/2020/08/01/a3gFjs.jpg" alt="a3gFjs.jpg" border="0">

<h3 id="C语言的特性"><a href="#C语言的特性" class="headerlink" title="C语言的特性"></a>C语言的特性</h3><h4 id="高效性"><a href="#高效性" class="headerlink" title="高效性"></a>高效性</h4><p><em>C语言表现出通常汇编语言才具有的精细控制能力</em></p>
<h4 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h4><p><em>可以不加修改或少量修改，然后在其它系统上运行</em></p>
<h4 id="强大的功能和灵活性"><a href="#强大的功能和灵活性" class="headerlink" title="强大的功能和灵活性"></a>强大的功能和灵活性</h4><p><em>很多系统上的编译器是由C语言编写，所以最终都是以C程序负责生成最后的可执行文件</em></p>
<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><p><em>现代的编程语言语法相差不大，可以说是C-like语言</em></p>
<p><em>Fortran(第一个高级编程语言)-&gt;BCPL-&gt;B-&gt;C</em></p>
<p><em>BCPL和B都支持指针间接方式，所以C也支持</em></p>
<p><em>C还受PL/I和PDP-11的影响</em></p>
<p><em>工业语言：底层开发工作者常使用</em></p>
<h3 id="C的发展与标准"><a href="#C的发展与标准" class="headerlink" title="C的发展与标准"></a>C的发展与标准</h3><p><em>1989年ANSI发布第一个标准-ANSI C</em></p>
<p><em>1990年ISO接受ANSI的标准-C89</em></p>
<p><em>C89-C95-C99</em></p>
<h3 id="C语言的作用"><a href="#C语言的作用" class="headerlink" title="C语言的作用"></a>C语言的作用</h3><p><em>在某些方面具有不可替代的地位，如操作系统</em></p>
<p><em>嵌入式系统</em></p>
<p><em>驱动程序</em></p>
<p><em>底层驱动，图像引擎，图像处理，声音效果</em></p>
<h3 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h3><p><em>1.编辑器+编译器</em></p>
<p><em>2.IDE</em></p>
<p><strong>推荐</strong>：<em>MS Visual studio Express</em></p>
<p><em>Dev C++</em></p>
<p><em>Xcode</em></p>
<p><em>Eclipse-CDT</em></p>
<p><em>geany(和MinGW一起)</em></p>
<p><em>Sublime(和MinGW一起)</em></p>
<p><em>vim/emacs(和MinGW一起)</em></p>
<h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; /*stdio.h是C编译包的一部分内容*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;  <span class="comment">/*void在较新的语法里支持，表示无参数; int为返回类型；main为函数名*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"2+5=%d"</span>, <span class="number">2</span>+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>/n为将光标移到输出的下一行</em></p>
<p><strong>#include</strong>：<em>C预处理指令(编译器编译之前需要预处理)</em><br><strong>stdio.h</strong>：<em>C编译包的一部分，是头文件(指引编译器把你的程序正确结合在一起)</em></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-2二十四点</title>
    <url>/CSP-2%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%82%B9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="二十四点"><a href="#二十四点" class="headerlink" title="二十四点"></a>二十四点</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><em>三十分错误代码</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOut</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'x'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'x'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] * li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'/'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'/'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] // li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'+'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'+'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] + li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'-'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'-'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] - li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">    <span class="keyword">return</span> li[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li), <span class="number">2</span>):</span><br><span class="line">        li[i] = int(li[i])</span><br><span class="line">    outcome = getOut(li)</span><br><span class="line">    <span class="keyword">if</span> outcome == <span class="number">24</span>:</span><br><span class="line">        print(<span class="string">'Yes'</span>)</span><br><span class="line">    <span class="keyword">if</span> outcome != <span class="number">24</span>:</span><br><span class="line">        print(<span class="string">'No'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    li = list(input())</span><br><span class="line">    judge(li)</span><br></pre></td></tr></table></figure>

<h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><p><em>使用eval函数</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    str=input().replace(<span class="string">'x'</span>, <span class="string">'*'</span>).replace(<span class="string">'/'</span>, <span class="string">'//'</span>)</span><br><span class="line">    <span class="keyword">if</span> eval(str)==<span class="number">24</span>:</span><br><span class="line">        print(<span class="string">"Yes"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"No"</span>)</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CSP-1小中大</title>
    <url>/CSP-1%E5%B0%8F%E4%B8%AD%E5%A4%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="小中大"><a href="#小中大" class="headerlink" title="小中大"></a>小中大</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n = int(input())</span><br><span class="line">out_li = []</span><br><span class="line">li = list(map(int, input().split()))</span><br><span class="line">li.sort()</span><br><span class="line">max = li[<span class="number">-1</span>]</span><br><span class="line">min = li[<span class="number">0</span>]</span><br><span class="line">out_li.append(max)</span><br><span class="line">out_li.append(min)</span><br><span class="line"><span class="keyword">if</span> len(li)%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    median = li[(len(li)+<span class="number">1</span>)//<span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line">    out_li.append(median)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    median = (li[len(li) // <span class="number">2</span> - <span class="number">1</span>] + li[len(li) // <span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">    string = str(median)</span><br><span class="line">    <span class="keyword">if</span> string[<span class="number">-1</span>] != <span class="string">'0'</span>:</span><br><span class="line">        out_li.append(median)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out_li.append(int(median))</span><br><span class="line">out_li.sort(reverse=<span class="number">1</span>)</span><br><span class="line">print(*out_li)</span><br></pre></td></tr></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="python中-和"><a href="#python中-和" class="headerlink" title="python中/和//"></a>python中/和//</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中用’/‘做除号结果为负</span></span><br><span class="line"><span class="number">5</span> / <span class="number">2</span>  <span class="comment"># 2.5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># // 整除</span></span><br><span class="line"><span class="number">5</span> // <span class="number">2</span> <span class="comment"># 等于2</span></span><br><span class="line">但其中一个为float时结果为float</span><br></pre></td></tr></table></figure>

<h3 id="round四舍五入"><a href="#round四舍五入" class="headerlink" title="round四舍五入"></a>round四舍五入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">round(5.021, 1) # 参数2为保留的位数</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为整数"><a href="#判断是否为整数" class="headerlink" title="判断是否为整数"></a>判断是否为整数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> <span class="keyword">is</span> int:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="数值排序sort"><a href="#数值排序sort" class="headerlink" title="数值排序sort"></a>数值排序sort</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = []</span><br><span class="line">li.sort() <span class="comment"># 默认为升序</span></span><br><span class="line">li.sort(reverse=<span class="number">0</span>) <span class="comment"># 升序</span></span><br><span class="line">li.sort(reverse=<span class="number">1</span>) <span class="comment"># 为大于零的整数为降序</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-2回收站选址</title>
    <url>/CSP-2%E5%9B%9E%E6%94%B6%E7%AB%99%E9%80%89%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="回收站选址"><a href="#回收站选址" class="headerlink" title="回收站选址"></a>回收站选址</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">trashDict=[]</span><br><span class="line">listKeys=[]</span><br><span class="line">listScoreCount=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toStr</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(x)+<span class="string">' '</span>+str(y)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toFind</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> toStr(x+<span class="number">1</span>,y) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x<span class="number">-1</span>,y) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getScore</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> toStr(x+<span class="number">1</span>,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x+<span class="number">1</span>,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x<span class="number">-1</span>,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x<span class="number">-1</span>,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        listScoreCount[score]+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    temp_a,temp_b=map(int,input().split(<span class="string">' '</span>))</span><br><span class="line">    listKeys.append(temp_a)</span><br><span class="line">    listKeys.append(temp_b)</span><br><span class="line">    trashDict.append(toStr(temp_a,temp_b))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>*n,<span class="number">2</span>):</span><br><span class="line">    x,y=listKeys[j],listKeys[j+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> toFind(x,y):</span><br><span class="line">        getScore(x,y)</span><br><span class="line"> </span><br><span class="line">print(*listScoreCount,sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><p><em>两个例子都通过但只有40分，不知道怎么回事</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">li_out = [<span class="number">0</span>]*<span class="number">5</span></span><br><span class="line">li_point = []</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    p = list(map(int, input().split()))</span><br><span class="line">    li_point.append(p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_point:</span><br><span class="line">    <span class="keyword">if</span> [i[<span class="number">0</span>], i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>], i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]] <span class="keyword">in</span> li_point:</span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m &gt; <span class="number">0</span>:</span><br><span class="line">            li_out[m] += <span class="number">1</span></span><br><span class="line">            m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_out:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速打印列表里的值并换行输出</span></span><br><span class="line">print(*list, sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-1报数</title>
    <url>/CSP-1%E6%8A%A5%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="报数"><a href="#报数" class="headerlink" title="报数"></a>报数</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (n + m):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) <span class="keyword">or</span> (str(<span class="number">7</span>) <span class="keyword">in</span> list(str(i))):</span><br><span class="line">        a[i % <span class="number">4</span> - <span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">rec_num = <span class="number">0</span></span><br><span class="line">rec_n = <span class="number">0</span></span><br><span class="line">li = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> rec_n == n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> index &gt; <span class="number">3</span>:</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">    rec_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> rec_num % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> str(<span class="number">7</span>) <span class="keyword">in</span> list(str(rec_num)):</span><br><span class="line">        li[index] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rec_n += <span class="number">1</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p><em>数字中包含7理解成就是数字7</em></p>
<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">0</span>]*<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><em>用报出的数加跳过的数，作为循环条件</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>现在完成时</title>
    <url>/%E8%8B%B1%E8%AF%AD-%E7%8E%B0%E5%9C%A8%E5%AE%8C%E6%88%90%E6%97%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h1><p><a href="https://www.mofangge.xin/html/qDetail/03/c2/201206/0dbsc203116202.html" target="_blank" rel="external nofollow noopener noreferrer">完成时</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>过去式</title>
    <url>/%E8%8B%B1%E8%AF%AD-%E8%BF%87%E5%8E%BB%E5%BC%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="过去式"><a href="#过去式" class="headerlink" title="过去式"></a>过去式</h1><p><a href="https://www.mofangge.xin/html/qDetail/03/c2/201206/0dbsc203116202.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CPS-稀疏向量</title>
    <url>/CSP-2%E7%A8%80%E7%96%8F%E5%90%91%E9%87%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h1><p><em>用python用了几种方法都只有60分，原因是超时，可能是python本身慢的原因，网上有用C做满分的</em></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">n, us, vs = map(int, input().split())</span><br><span class="line">u1 = []</span><br><span class="line">u2 = []</span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(us + vs):</span><br><span class="line">    inp = map(int, input().split())</span><br><span class="line">    a, b = inp</span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &lt;= us:</span><br><span class="line">        u1.append(a)</span><br><span class="line">        u2.append(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">in</span> u1:</span><br><span class="line">            out += u2[u1.index(a)]*b</span><br><span class="line"></span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, us, vs = map(int, input().split())</span><br><span class="line">u = list(<span class="number">0</span> <span class="keyword">for</span> m <span class="keyword">in</span> range(n))</span><br><span class="line">v = u.copy()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(us + vs):</span><br><span class="line">    inp = list(map(int, input().split()))</span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &lt;= us:</span><br><span class="line">        u[inp[<span class="number">0</span>]<span class="number">-1</span>] = inp[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v[inp[<span class="number">0</span>]<span class="number">-1</span>] = inp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    out += u[i]*v[i]</span><br><span class="line"></span><br><span class="line">out = sum(a*b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(u, v))</span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>



<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = [x,x,x]</span><br><span class="line">v = [x,x,x]</span><br><span class="line">out = sum(a*b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(u,v))</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>稀疏向量</tag>
      </tags>
  </entry>
  <entry>
    <title>FSP-线性分类器</title>
    <url>/CSP-1%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># θ0 +θ1x +θ2y =0</span></span><br><span class="line"><span class="comment"># y=(-θ0-θ1x)/θ2</span></span><br><span class="line"></span><br><span class="line">p_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qurey</span><span class="params">(in_list)</span>:</span></span><br><span class="line">    flag_gt = <span class="number">-1</span></span><br><span class="line">    flag_lt = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p_list:</span><br><span class="line">        <span class="keyword">if</span> (in_list[<span class="number">0</span>] + in_list[<span class="number">1</span>] * int(i[<span class="number">0</span>]) + in_list[<span class="number">2</span>] * int(i[<span class="number">1</span>])) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flag_gt == <span class="number">-1</span>:</span><br><span class="line">                flag_gt = i[<span class="number">2</span>]</span><br><span class="line">                flag_lt = <span class="string">'B'</span> <span class="keyword">if</span> i[<span class="number">2</span>] == <span class="string">'A'</span> <span class="keyword">else</span> <span class="string">'A'</span></span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">2</span>] != flag_gt:</span><br><span class="line">                print(<span class="string">'No'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (in_list[<span class="number">0</span>] + in_list[<span class="number">1</span>] * int(i[<span class="number">0</span>]) + in_list[<span class="number">2</span>] * int(i[<span class="number">1</span>])) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flag_lt == <span class="number">-1</span>:</span><br><span class="line">                flag_lt = i[<span class="number">2</span>]</span><br><span class="line">                flag_gt = <span class="string">'B'</span> <span class="keyword">if</span> i[<span class="number">2</span>] == <span class="string">'A'</span> <span class="keyword">else</span> <span class="string">'A'</span></span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">2</span>] != flag_lt:</span><br><span class="line">                print(<span class="string">'No'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Yes'</span>)</span><br><span class="line"></span><br><span class="line">n,m = map(int,input().split())</span><br><span class="line"><span class="comment"># ilist=list(map(int,input().split()))</span></span><br><span class="line"><span class="comment"># n=ilist[0]</span></span><br><span class="line"><span class="comment"># m=ilist[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    p_list.append(list(input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    qurey(list(map(int, input().split())))</span><br></pre></td></tr></table></figure>

<h2 id="参考和多次修改后的自己的代码"><a href="#参考和多次修改后的自己的代码" class="headerlink" title="参考和多次修改后的自己的代码"></a>参考和多次修改后的自己的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0 = $0 + $1x + $2y</span></span><br><span class="line">n, m = map(int, input().split(<span class="string">" "</span>))</span><br><span class="line">list_p = []</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= n:</span><br><span class="line">    list_p.append(input().split(<span class="string">" "</span>))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a_list = []</span><br><span class="line">b_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(erg)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> list_p[:n]:</span><br><span class="line">        <span class="keyword">if</span> erg[<span class="number">0</span>] + erg[<span class="number">1</span>]*int(element[<span class="number">0</span>]) + erg[<span class="number">2</span>]*int(element[<span class="number">1</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">            a_list.append(element[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> erg[<span class="number">0</span>] + erg[<span class="number">1</span>]*int(element[<span class="number">0</span>]) + erg[<span class="number">2</span>]*int(element[<span class="number">1</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">            b_list.append(element[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> len(set(a_list)) &gt; <span class="number">1</span> <span class="keyword">or</span> len(set(b_list)) &gt; <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'No'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Yes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    func(list(map(int, input().split())))</span><br><span class="line">    a_list.clear()</span><br><span class="line">    b_list.clear()</span><br></pre></td></tr></table></figure>

<h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><h3 id="list-not-callable"><a href="#list-not-callable" class="headerlink" title="list not callable"></a>list not callable</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = xxxx</span><br><span class="line">erg = list(map(int, input().split()))</span><br></pre></td></tr></table></figure>

<p><em>这里犯的错误是变量名称list和python的list重名了</em></p>
<h3 id="其它错误"><a href="#其它错误" class="headerlink" title="其它错误"></a>其它错误</h3><p><em>在用a_list和b_list存储每一次参数条件下的点的类型A或者B时；当到下一个参数时，忘记将它们清空</em></p>
<p><em>最开始用break替代的return，导致在某次参数条件下不能完全切割，会出现两个结果；break虽然导致循环结束，但后面的代码还会执行；return在一个函数中，一旦执行函数结束</em></p>
<p><em>有时做的过程中对if条件造成的后果没有想全</em></p>
<p><em>一定要想清楚正确的逻辑后，再在代码中实现正确逻辑</em></p>
<p><em>一定要调试</em></p>
<h2 id="学会的python知识"><a href="#学会的python知识" class="headerlink" title="学会的python知识"></a>学会的python知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, m = map(int, input.split()) <span class="comment"># 右边为一个map对象</span></span><br><span class="line">input.split() <span class="comment"># 以一个或多个空格分割，得到结果为列表</span></span><br><span class="line"><span class="string">' a   11 2 '</span>.split() <span class="comment"># a 11 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中的三元运算符</span></span><br><span class="line">a = <span class="number">60</span></span><br><span class="line">b = <span class="number">60</span> <span class="keyword">if</span> a == <span class="number">60</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>We are love life, not because we are used to lifing, but because we are used to loving.</p>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>线性分类器</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第三章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h1><h2 id="动词的种类"><a href="#动词的种类" class="headerlink" title="动词的种类"></a>动词的种类</h2><h3 id="主语-完全不及物动词"><a href="#主语-完全不及物动词" class="headerlink" title="主语 + 完全不及物动词"></a>主语 + 完全不及物动词</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He fainted</span><br></pre></td></tr></table></figure>

<h3 id="主语-不完全不及物动词-表语"><a href="#主语-不完全不及物动词-表语" class="headerlink" title="主语 + 不完全不及物动词 + 表语"></a>主语 + 不完全不及物动词 + 表语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is a gentleman</span><br></pre></td></tr></table></figure>

<h3 id="主语-完全及物动词-宾语"><a href="#主语-完全及物动词-宾语" class="headerlink" title="主语 + 完全及物动词 + 宾语"></a>主语 + 完全及物动词 + 宾语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love her</span><br></pre></td></tr></table></figure>

<h3 id="主语-不完全及物动词-宾语-宾语补语"><a href="#主语-不完全及物动词-宾语-宾语补语" class="headerlink" title="主语 + 不完全及物动词 + 宾语 + 宾语补语"></a>主语 + 不完全及物动词 + 宾语 + 宾语补语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He made me angery</span><br></pre></td></tr></table></figure>

<h3 id="主语-授予动词-间接宾语-直接宾语"><a href="#主语-授予动词-间接宾语-直接宾语" class="headerlink" title="主语 + 授予动词 + 间接宾语 + 直接宾语"></a>主语 + 授予动词 + 间接宾语 + 直接宾语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He gave me a book</span><br></pre></td></tr></table></figure>

<h3 id="判断动词为及物或不及物"><a href="#判断动词为及物或不及物" class="headerlink" title="判断动词为及物或不及物"></a>判断动词为及物或不及物</h3><p><em>我__他</em></p>
<p><em>他被我__</em></p>
<h2 id="完全不及物动词vi"><a href="#完全不及物动词vi" class="headerlink" title="完全不及物动词vi."></a>完全不及物动词vi.</h2><h3 id="主语-vi"><a href="#主语-vi" class="headerlink" title="主语 + vi."></a>主语 + vi.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">something happened</span><br><span class="line">something will happen</span><br><span class="line">something has happened</span><br></pre></td></tr></table></figure>

<h3 id="主语-be-vi-的现在分词-即V-ing"><a href="#主语-be-vi-的现在分词-即V-ing" class="headerlink" title="主语 + be + vi.的现在分词(即V-ing)"></a>主语 + be + vi.的现在分词(即V-ing)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">something was happening 对</span><br><span class="line">something was happened 错</span><br></pre></td></tr></table></figure>

<p><em>由上可知，不及物动词，没有被动形式</em></p>
<h2 id="完全及物动词vt"><a href="#完全及物动词vt" class="headerlink" title="完全及物动词vt."></a>完全及物动词vt.</h2><p><em>加了宾语意思很完整的动词</em></p>
<h3 id="完全及物动词出现的形态有四种"><a href="#完全及物动词出现的形态有四种" class="headerlink" title="完全及物动词出现的形态有四种"></a>完全及物动词出现的形态有四种</h3><h4 id="a-主语-vt-宾语"><a href="#a-主语-vt-宾语" class="headerlink" title="a. 主语 + vt. + 宾语"></a>a. 主语 + vt. + 宾语</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I wrote a book</span><br></pre></td></tr></table></figure>

<h4 id="b-主语-be-vt-的现在分词-宾语-正在…"><a href="#b-主语-be-vt-的现在分词-宾语-正在…" class="headerlink" title="b. 主语 + be + vt.的现在分词 + 宾语(正在….)"></a>b. 主语 + be + vt.的现在分词 + 宾语(正在….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was writing a book</span><br></pre></td></tr></table></figure>

<h4 id="c-主语-be-vt-的过去分词-被…"><a href="#c-主语-be-vt-的过去分词-被…" class="headerlink" title="c. 主语 + be + vt.的过去分词(被….)"></a>c. 主语 + be + vt.的过去分词(被….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The book was written by me</span><br></pre></td></tr></table></figure>

<h4 id="d-主语-be-being-vt-的过去分词-正在被…"><a href="#d-主语-be-being-vt-的过去分词-正在被…" class="headerlink" title="d. 主语 + be + being + vt.的过去分词(正在被….)"></a>d. 主语 + be + being + vt.的过去分词(正在被….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The book was being written by me</span><br></pre></td></tr></table></figure>

<h3 id="表意愿的动词应以不定式短语作宾语"><a href="#表意愿的动词应以不定式短语作宾语" class="headerlink" title="表意愿的动词应以不定式短语作宾语"></a>表意愿的动词应以不定式短语作宾语</h3><p><strong>常用的表‘意愿’的动词如下:</strong></p>
<p><em>want, hope希望, wish希望, expect期望, long渴望, aspire渴望, desire渴望, refuse拒绝</em></p>
<p><strong>三个一，两个希望，三个渴望</strong></p>
<p><strong>注意</strong>：<em>anticipate亦表‘期待’，但仅可用动名词作其宾语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I except to see him again</span><br><span class="line">&#x3D; I anticipate seeing him again</span><br><span class="line">&#x3D; I&#39;m looking forward to seeing him again</span><br></pre></td></tr></table></figure>

<h3 id="下列完全及物动词一律以动名词作宾语"><a href="#下列完全及物动词一律以动名词作宾语" class="headerlink" title="下列完全及物动词一律以动名词作宾语"></a>下列完全及物动词一律以动名词作宾语</h3><p><em>consider考虑，imagine想象，enjoy喜欢，dislike不喜欢，resent痛恨，suggest建议，recommend建议，avoid避免，escape逃避，risk冒险，deny否认，admit承认，mind在乎，practice练习，finish完成，quit停止，戒除</em></p>
<p><a href="https://imgchr.com/i/UgbGcT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/18/UgbGcT.md.png" alt="UgbGcT.png" border="0"></a></p>
<h3 id="下列动词可接不定式和动名词作宾语，但意义有别"><a href="#下列动词可接不定式和动名词作宾语，但意义有别" class="headerlink" title="下列动词可接不定式和动名词作宾语，但意义有别"></a>下列动词可接不定式和动名词作宾语，但意义有别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forget to V 忘了要...</span><br><span class="line">forget V-ing 忘了曾...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remember to V 记得要...</span><br><span class="line">remember V-ing 记得曾...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regret to V 抱歉要</span><br><span class="line">regret V-ing 后悔曾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop to v 停下原有的工作以便从事...</span><br><span class="line">stop v-ing 停止做...</span><br></pre></td></tr></table></figure>

<h3 id="下列动词可用不定式或动名词作宾语，意思不变"><a href="#下列动词可用不定式或动名词作宾语，意思不变" class="headerlink" title="下列动词可用不定式或动名词作宾语，意思不变"></a>下列动词可用不定式或动名词作宾语，意思不变</h3><p><em>continue继续，start开始，begin开始，like喜欢，love爱，hate恨</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;ll continue to do it</span><br><span class="line">&#x3D; I&#39;ll continue doing it</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love to sing</span><br><span class="line">&#x3D; I love singing</span><br></pre></td></tr></table></figure>

<h2 id="不完全不及物动词"><a href="#不完全不及物动词" class="headerlink" title="不完全不及物动词"></a>不完全不及物动词</h2><p><em>不完全不及物动词仍是不及物动词，唯意思不完全，因而不能单独存在</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He become happy</span><br><span class="line">He become a good student</span><br></pre></td></tr></table></figure>

<h3 id="不完全不及物动词可分为四种"><a href="#不完全不及物动词可分为四种" class="headerlink" title="不完全不及物动词可分为四种"></a>不完全不及物动词可分为四种</h3><h4 id="a-be动词"><a href="#a-be动词" class="headerlink" title="a. be动词"></a>a. be动词</h4><p><em>1）是：以名词，动名词，不定式，名词性从句，名词短语作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is a great hero</span><br><span class="line">The problem with him is that he has no courage</span><br><span class="line">My hobby is singing</span><br><span class="line">The question is when to set off</span><br><span class="line">My goal is to be an English teacher</span><br></pre></td></tr></table></figure>

<p><em>2）无意义：以形容词或形容词用的分词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is clever, while I am stupid</span><br><span class="line">I was tired out after all the work</span><br><span class="line">That girl is charming</span><br></pre></td></tr></table></figure>

<p><em>3）正在…：与现在分词形成进行时</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">when he come, I was writing a letter</span><br><span class="line">I am studying now, please don&#39;t bother me</span><br></pre></td></tr></table></figure>

<p><em>4）正在被…：与现在分词的被动语态(即being + 过去分词)形成被动进行时</em></p>
<h4 id="b-表‘变成’-become-turn-get-fall-go-的动词"><a href="#b-表‘变成’-become-turn-get-fall-go-的动词" class="headerlink" title="b. 表‘变成’(become, turn, get,fall, go)的动词"></a>b. 表‘变成’(become, turn, get,fall, go)的动词</h4><p><em>become可用任何名词，形容词，或可作形容词用的分词(可译为…的)作表语</em></p>
<p><em>turn亦可表’变成’，通常只表‘颜色’或‘生气’的形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Autumn is around the corner, and leaves are turn yellow</span><br><span class="line">His face turned pale at the sight of his father</span><br></pre></td></tr></table></figure>

<p><em>get也可以表‘变成’，通常只用表‘生气’的形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">she got mad&#x2F;angery when he learned that Mary was about to ditch him</span><br></pre></td></tr></table></figure>

<p><em>get之后亦可以置过去分词，表‘受到/被…’</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He got&#x2F;was hurt in the traffic accident.</span><br></pre></td></tr></table></figure>

<p><em>get用于进行时的结构中时，可用任何形容词的比较级作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Under Mr. Wang&#39;s guidance, John&#39;s English is getting better</span><br></pre></td></tr></table></figure>

<p><em>fall表‘变成’时，仅限于与ill, sick, prey, victim等少数形容词或名词连用</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fall ill &#x3D; fall sick 生病</span><br><span class="line">fall prey to ... &#x3D; fall victim to ... 饱受...之害</span><br></pre></td></tr></table></figure>

<p><em>go表‘变成’时，多与表‘生气’，食物‘坏掉’或‘破产’等形容词连用</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mad 变生气起来</span><br><span class="line">go bad 食物馊了</span><br><span class="line">go bankrupt 破产了</span><br></pre></td></tr></table></figure>



<h4 id="c-表‘似乎’-seem-的动词"><a href="#c-表‘似乎’-seem-的动词" class="headerlink" title="c. 表‘似乎’(seem)的动词"></a>c. 表‘似乎’(seem)的动词</h4><p><em>此类动词乃指seem或appear，均表’似乎‘，用法相同</em></p>
<p><em>1）seem之后用不定式短语作表语，由下列句型变化而成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it seems that he works hard</span><br><span class="line">&#x3D;he seems to work hard</span><br></pre></td></tr></table></figure>

<p><em>2）seem之后有to be时，to be可省略</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it seems that they are nice people</span><br><span class="line">&#x3D; they seem (to be) nice people</span><br></pre></td></tr></table></figure>



<h4 id="d-感官动词"><a href="#d-感官动词" class="headerlink" title="d. 感官动词"></a>d. 感官动词</h4><p><em>感官动词一共有五个，一律译为’…起来‘，后面接形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">look 看起来</span><br><span class="line">sound 听起来</span><br><span class="line">smell 闻起来</span><br><span class="line">taste 尝起来</span><br><span class="line">feel 感觉起来</span><br></pre></td></tr></table></figure>

<p><em>在以上感官动词后加like方可接名词</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The cloth feels like silk</span><br><span class="line">it sounds like a good idea</span><br></pre></td></tr></table></figure>

<p><em>注意feel like之后也可接动名词，表’想要….‘</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I feel like dancing</span><br></pre></td></tr></table></figure>

<h2 id="不完全及物动词"><a href="#不完全及物动词" class="headerlink" title="不完全及物动词"></a>不完全及物动词</h2><p><em>仍然是及物动词，但加了宾语后意思不完整，还需要加宾语补语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make 制造时是完全及物动词</span><br><span class="line">He made a chair</span><br><span class="line">make ‘使’或‘叫’时为不完全及物动词</span><br><span class="line">He made Mary happy</span><br></pre></td></tr></table></figure>

<h3 id="不完全及物动词的种类"><a href="#不完全及物动词的种类" class="headerlink" title="不完全及物动词的种类"></a>不完全及物动词的种类</h3><h4 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h4><p><em>1）叫…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make&#x2F;have + 宾语 + 原形动词</span><br><span class="line">&#x3D; get + 宾语 + to v</span><br></pre></td></tr></table></figure>

<p><em>2）让…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let + 宾语 + 原形动词</span><br><span class="line">&#x3D; allow&#x2F;permit + 宾语 + to v</span><br></pre></td></tr></table></figure>

<p><em>3）强迫/要求…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">force&#x2F;compel&#x2F;require&#x2F;ask&#x2F;urge&#x2F;encourage&#x2F;want&#x2F;tell&#x2F;expect&#x2F;wish... + 宾语 + to v</span><br></pre></td></tr></table></figure>



<h4 id="知觉动词"><a href="#知觉动词" class="headerlink" title="知觉动词"></a>知觉动词</h4><h4 id="任命动词"><a href="#任命动词" class="headerlink" title="任命动词"></a>任命动词</h4><h4 id="认定动词"><a href="#认定动词" class="headerlink" title="认定动词"></a>认定动词</h4><h4 id="转变动词"><a href="#转变动词" class="headerlink" title="转变动词"></a>转变动词</h4><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第二章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="主语"><a href="#主语" class="headerlink" title="主语"></a>主语</h1><h2 id="主语的类别"><a href="#主语的类别" class="headerlink" title="主语的类别"></a>主语的类别</h2><p><em>可做主语的词类具有名词的特征，包括名词，代词，动名词，不定式短语，名词性从句，名词短语等</em></p>
<h3 id="名词作主语"><a href="#名词作主语" class="headerlink" title="名词作主语"></a>名词作主语</h3><h3 id="代词作主语"><a href="#代词作主语" class="headerlink" title="代词作主语"></a>代词作主语</h3><p><em>he, she, I, they, you, we等</em></p>
<h3 id="动名词或不定式短语作主语"><a href="#动名词或不定式短语作主语" class="headerlink" title="动名词或不定式短语作主语"></a>动名词或不定式短语作主语</h3><p><em>在英文中动词不能直接作主语，需要将它转换成<strong>不定式</strong>(表示未做过的事(如理想，梦想，目的，计划等))或<strong>动名词</strong>(表示已经做过的事或经验)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Working with him is fun</span><br><span class="line"></span><br><span class="line">To kiss her is my dream</span><br></pre></td></tr></table></figure>

<h4 id="防止动名词或不定式短语作主语导致主语过长"><a href="#防止动名词或不定式短语作主语导致主语过长" class="headerlink" title="防止动名词或不定式短语作主语导致主语过长"></a>防止动名词或不定式短语作主语导致主语过长</h4><p><em>用<strong>it</strong>代替它，将真正的主语放到句子最后；动名词移到句尾时，要改为不定式短语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listening to music is my hobby.</span><br><span class="line">&#x3D; It is my hobby to listen to music</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To buy a house for my patents is one of my plans</span><br><span class="line">&#x3D; It is one of my plans to buy a house for parents.</span><br></pre></td></tr></table></figure>

<h3 id="名词性从句作主语"><a href="#名词性从句作主语" class="headerlink" title="名词性从句作主语"></a>名词性从句作主语</h3><p><em>英语中句子不能直接作主语，需要写成名词性从句</em></p>
<h4 id="名词性从句的种类"><a href="#名词性从句的种类" class="headerlink" title="名词性从句的种类"></a>名词性从句的种类</h4><h5 id="that从句"><a href="#that从句" class="headerlink" title="that从句"></a>that从句</h5><p><em>在陈述句前直接加上<strong>that</strong>。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He doesn&#39;t study -&gt; that he doesn&#39;t study</span><br></pre></td></tr></table></figure>



<h5 id="whether从句"><a href="#whether从句" class="headerlink" title="whether从句"></a>whether从句</h5><p><em>由一般疑问句变成，当一be动词开头时，be动词还原，再在句首加whether；当由一般助动词(may，will, mus, have, should, can)开头，助动词还原，前面冠以whether；当以do，does,  did助动词开头时，去掉它，动词写为应有的时态和人称变化，再加whether</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="特殊疑问词引导的名词性从句"><a href="#特殊疑问词引导的名词性从句" class="headerlink" title="特殊疑问词引导的名词性从句"></a>特殊疑问词引导的名词性从句</h5><p><em>特殊疑问词(what, which, who, where, when, how, why)</em></p>
<p><em>问句有be动词时，be动词还原，保留疑问词</em></p>
<p><em>问句有一般助动词时，还原助动词，保留疑问词</em></p>
<p><em>问句有do, does, did等助动词时，删除，再还原动词时态和人称变化</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">when will they do it? -&gt; when they will do it</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is there a man there? -&gt; whether there is a man there</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">he never tells lies -&gt; that he never tells lies</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">how did it happen? -&gt; how it happened</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">has he finished the work? -&gt; he has finished the work</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong>：<em>当who, what, which为疑问代词，若在句中作主语，则变成名词性从句时，结构不变</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">who did it? -&gt; who did it?</span><br></pre></td></tr></table></figure>

<h4 id="名词性从句作主语时应该注意的事项"><a href="#名词性从句作主语时应该注意的事项" class="headerlink" title="名词性从句作主语时应该注意的事项"></a>名词性从句作主语时应该注意的事项</h4><p><em>导致主语过长，可以用it代替，真正的主语置于句末</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">that he never lies is true</span><br><span class="line">&#x3D; it is true that he never lies.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whether he can do it remains to be seen</span><br><span class="line">&#x3D; it remains to be seen whether he can do it</span><br></pre></td></tr></table></figure>

<h3 id="名词短语作主语"><a href="#名词短语作主语" class="headerlink" title="名词短语作主语"></a>名词短语作主语</h3><p><em>名词短语由：疑问词+不定式短语。由名词性从句简写而成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">where to live is not dicided yet.</span><br><span class="line">&#x3D; where we will live is not decided ye.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whether to go depends on how much money we have</span><br><span class="line">&#x3D; whether we will go depends on how much money we have</span><br></pre></td></tr></table></figure>

<h3 id="表距离的地方副词短语亦可作主语"><a href="#表距离的地方副词短语亦可作主语" class="headerlink" title="表距离的地方副词短语亦可作主语"></a>表距离的地方副词短语亦可作主语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Shanghai to Beijing is about 1000 kilometers.</span><br><span class="line">&#x3D; it is about 1000 kilometers from Shanghai to Beijing</span><br></pre></td></tr></table></figure>

<h2 id="细谈名词性从句的功能"><a href="#细谈名词性从句的功能" class="headerlink" title="细谈名词性从句的功能"></a>细谈名词性从句的功能</h2><h3 id="名词性从句都可以作主语"><a href="#名词性从句都可以作主语" class="headerlink" title="名词性从句都可以作主语"></a>名词性从句都可以作主语</h3><h3 id="名词性从句都可以作动词宾语"><a href="#名词性从句都可以作动词宾语" class="headerlink" title="名词性从句都可以作动词宾语"></a>名词性从句都可以作动词宾语</h3><h3 id="名词性从句作介词宾语仅’慧怡’可以"><a href="#名词性从句作介词宾语仅’慧怡’可以" class="headerlink" title="名词性从句作介词宾语仅’慧怡’可以"></a>名词性从句作介词宾语仅’慧怡’可以</h3><p><em>若that从句要作介词宾语，那么要对作适当改变, 有如下几种方法：</em></p>
<p><em>a. 介词 + the fact + that从句(that从句作the fact 的同位语)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m worried about the fact that he doesn&#39;t study.</span><br></pre></td></tr></table></figure>

<p><em>b. 删除that，从句主语变所有格，动词变动名词</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was surprised at that he sang so well 错</span><br><span class="line">I was surprised at his singing so well 对</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m worried about that he doesn&#39;t study 错</span><br><span class="line">I’m worried about his not studing 对</span><br><span class="line">-- that从句若有don&#39;t, doesn&#39;t, didn&#39;t时， 只保留not即可</span><br></pre></td></tr></table></figure>

<p><em>be + 形容词 + that从句</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was surprised at that he sang so well </span><br><span class="line">I was surprised that he sang so well</span><br></pre></td></tr></table></figure>

<h3 id="名词性从句都可以置于be动词之后"><a href="#名词性从句都可以置于be动词之后" class="headerlink" title="名词性从句都可以置于be动词之后"></a>名词性从句都可以置于be动词之后</h3><h3 id="whether从句使用注意事项"><a href="#whether从句使用注意事项" class="headerlink" title="whether从句使用注意事项"></a>whether从句使用注意事项</h3><p><em>whether可与or not连用，也可以将or not省略；作宾语时可以将whether换成if，作主语或介词宾语时不可以替换</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I don&#39;t know whether he&#39;ll come</span><br><span class="line">&#x3D; I don&#39;t know whether or not he&#39;ll come</span><br><span class="line">&#x3D; I don&#39;t know whether he&#39;ll come or not</span><br><span class="line">&#x3D; I don&#39;t know if he&#39;ll come</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第一章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="构成句子的基本要素"><a href="#构成句子的基本要素" class="headerlink" title="构成句子的基本要素"></a>构成句子的基本要素</h1><h2 id="任何句子均由主语-Subject-S-及动词-Verb-V-形成"><a href="#任何句子均由主语-Subject-S-及动词-Verb-V-形成" class="headerlink" title="任何句子均由主语(Subject, S)及动词(Verb, V)形成"></a>任何句子均由主语(Subject, S)及动词(Verb, V)形成</h2><h2 id="句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句"><a href="#句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句" class="headerlink" title="句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句"></a>句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You should come here &#x3D; Come here!</span><br><span class="line">You should be happy &#x3D; Be happy!</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>考研-常识</title>
    <url>/%E8%80%83%E7%A0%94-%E5%B8%B8%E8%AF%86.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="80960d200f671f95177a009e4ee97ce4f786fe051c73abeeea8612a921be02b8">fa929287840647684748c734b7149d312e0cf37d67749bd985e8a8965305f66bb7fa1399852268cdd999649177dbd07cf2adede30efc2ba2b9a70b42cb9536001c4f5c87083db9e5c61effb84c2058042750f63ecb870ca94d9f0bc650706862019d12464ceea2a5fb2a07cc939b21dbc1ec43a7a77018d1c61d361dd1c7c97bc2ad31c0dfb6845538f84357dfadf99f1a0310b3a9baba2c7a664f407f9a9fe2e1c97094e061bd5e00f95a2afc80abff04cd5774c8363aefd937ad05197a64576246a181c719f28d2158fd8a6f28afb43497f37719138faa90b2d620386535d76ae35df928c90da2b116c3dbb7b103cd8f0bffae1838ed8a47c85d247faef20eaea6c20d6a3ec3053acc9cb3003f9cbf4e7e2fbe1202b2bcf64c538c9730187a0eae51e38cff7f246c71b9c575bfb80c8ac79f1b16a22c0d35e1494594988d387c4d8d745797b69d485e5d0ea892702c5a44b2398c2bfdfbc323866e4ba2a35fd65c288f88aaa9b08df6998b6dac8d91a3fa041de810044d92e621bc9b3ee771813d9790b5777456fdf7a8403eecbb6dc24f495e27dae7372ac03887407c65d2bf06283c067f16cf92e43d2f93138a7969cb57b2dfe446b8b32781f433bbc1686a8b7704f1a126c6e9c0a170cf909e5fe823d452cc8a3126659b902bbe7728cc824334fdd53f7c60b5cde1ec02fdbc8ab9f7da91cd0d9b85db15862312c518eab7314f0a51be4f11aeed34ecc1754a6b63e40ddc0bff2a3e0613ea4299035f6ae838f199433a21912e7394a2cd2e6a5d1a08c10824cf75f16ec6612842c2181ed710c6fceb13664119dd8ac3f7ade093b1937c21d7e1e0031524da0d33b6a156f29ddafed72170f9dd14edb32ab309f74933d4913be3d41d32c067afe421fc506e649ef5af37cae582821036d409f125e41c19ad7caec77ef54ef9b7ddedac72c45aa5afcc4365cd284cc8bc9d8db8f3b1ca09c31fae3332d5913cfdd9b10dccba62e299841d00d41652291911b1ef59218a06b0b7d96dfc780e74a7ebd8bd6b0a2e6d257be4329d007f7365e3c57e6b97a3a2179324468c77371257b1767d88dc1f8cc718717a558bf119b49c614a3bf2e203cd61a041a1b3349424c196abf293b61213cdbb1cdaae0ae27a4904c511382907d110d3dbb20e27380c8d6cb03fdfef98824dd0fc8da636147dfae281a055fe9770fa8912f14fa47fcf9a779efad565b62d8ab2ea766c7777f2b88c8e55b8f68705ad1fb7b05e8dee425f420c32052c775884a0e0f568c6daa2d38154c50a4ba68c20731914098f02a3d406832f9b9f8cdaf520297dc64fd78c88eaa8c269471550a5febde30cc3a87f13fbe43a4d5e203ed886cc1e67b77149ea144e48b2265593f23e6953164e6be57059a525b0f2259951ff461fb0dafd9566ff8582b8adcbd52843c02b9c93b08faccce166cd115ffc2e962b9a61516e6755d840cc4ce26064e2f263fb8e7cb3602850e96a3e14ef02bd88de8a1ad2ed6f66dcd3367c0745114f4edf41ad587644865aec549d7e6da30d18321e137b75b13dc0b40849d9e03552b2cb902bf6ed5194cf10967cbab64a45e6b86c0fb3807277e65559664df74378698c4ed0b376d6946b581fb2eccdd9793f9621745594f2e343901c140771833bad66bff1136668d449cd4bb4be6a4734b540b1c62c8c58413074777c3c4a7b400040aa948cabc3702988c80cbe9b64c8a50e811a9618caa153f487edec31ca099e0cb0172d03f5bb94c6c56f96805d3aac60d306098ef69e4555c4c0cdb1ee431cfa461736ac16c7e2c08e5351141e327ad8c8ca959494ed8f66b2e3a98763cdee25d10bf07557ed9469c5329cafcd016e0da98bd0c0a54d249d854c526fd310aa4557f1e867701e3bb7d352d68371321bfc5f04c760b20ebcf0af597d13759fa57030e6d119295d425d16d2630a265d1342709cc9ed1ad7b5c0becdb5767116741a561fef4d2909219de4c7a008fc0cb68e193fa3c9f7b039e10f5265f73b18635dc321266888bc8902c375b5e42a36629d39f961f4eaa4f4ffbc135deb7e6d83ffeacadd82bc38d8b47adb5648fb3beda8d1f9f4840a6af48ee44009bf7e00c68fdc0c9742c02a9a3d797f6d467224ca81e8289c0372a40c3cbc04f160f57c53f7b1ace961ba1edc962fece32a3294a0bc065a46e6423501b01c1bfc634dbc812395f0ce8c1aa63a2ed0ebdfd5e8698e27d8b5d126fbec9c1b3d5b851efedfd8b1f34e5a951e4be426d59b2f535087ba416e14cb50f578d0b2743c69d47c42021e751262a5637e1709499e7b7d053677ec9fe02b46c296a48963f2ee715565ce2d4ddffa1400fd7bcc3697552b09dfc482bdc66583f383f00f95d332cf9ccc17e920c693992334d7e6a5fc04f3cc04201f122f8c26271065d6a6aca08ff2714bb49e1c2477f5c7a833eca6d990033a8d244e95c41eb6896c5a97b240e557a621c9eb2dd0b8fbc340cc570ce799311db3c1dea3f029ccab7fd6fd4bda3e117fe52a6027823ac947d0c0362d2d6b9814f3bc4835f61f6a770b51fa99ce425f017c415f5133c9e2d22c6deb101349bbe735ce70ba88978a04b997dc916348e37d2da0e6f876d5b752377062a6962e194b29b2c1abcfd767eaab4672713ff9dd74f195d9089a74d1a9a1ca4782491e644e4f975896c301f1bee5b230def3246ce7efce6d3e99987acdec0b9cdf3b519b94b875c49a495b8098ddebf972301cd639e9bf7e1b083174d3e11af7873f10485c260f5fd327e17acfc446d3196733b13b49b0728f9bb03e17ac6a59</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>电脑常用快捷键</title>
    <url>/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- CTRL + SHIFT + ESC</span><br><span class="line"></span><br><span class="line">-- 电脑任务栏 + 右键 -&gt; 任务管理器</span><br><span class="line"></span><br><span class="line">-- CTRL + ALT + DEL</span><br></pre></td></tr></table></figure>

<h2 id="Google浏览器恢复被关闭的选项卡"><a href="#Google浏览器恢复被关闭的选项卡" class="headerlink" title="Google浏览器恢复被关闭的选项卡"></a>Google浏览器恢复被关闭的选项卡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTRL + SHIFT + T</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机设置固定IP地址</title>
    <url>/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="为虚拟机设置固定IP地址"><a href="#为虚拟机设置固定IP地址" class="headerlink" title="为虚拟机设置固定IP地址"></a>为虚拟机设置固定IP地址</h2><p><a href="https://blog.csdn.net/ys_230014/article/details/80311121" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop大数据技术-第二章</title>
    <url>/hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Hadoop环境配置"><a href="#Hadoop环境配置" class="headerlink" title="Hadoop环境配置"></a>Hadoop环境配置</h1><h3 id="三种安装方式"><a href="#三种安装方式" class="headerlink" title="三种安装方式"></a>三种安装方式</h3><h3 id="单击模式"><a href="#单击模式" class="headerlink" title="单击模式"></a>单击模式</h3><p><em>使用一个独立java进程</em></p>
<p><em>hadoop运行在一个主机上。没有分布式文件系统，直接对本地操作系统文件进行读写</em></p>
<p><em>默认安装模式</em></p>
<p><em>一般用于本地mapreduce程序调试</em></p>
<h3 id="伪分布模式"><a href="#伪分布模式" class="headerlink" title="伪分布模式"></a>伪分布模式</h3><p><em>运行在一台主机上；使用多个java进程</em></p>
<p><em>模仿完全分布式的各个节点；具有完全分布式的所有功能；常用于调试程序</em></p>
<h3 id="完全分布式模式"><a href="#完全分布式模式" class="headerlink" title="完全分布式模式"></a>完全分布式模式</h3><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><h3 id="Unbuntu安装"><a href="#Unbuntu安装" class="headerlink" title="Unbuntu安装"></a>Unbuntu安装</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure>



<h4 id="SSH安装"><a href="#SSH安装" class="headerlink" title="SSH安装"></a>SSH安装</h4><p><em>SSH 是 Secure Shell 的缩写，它是一种建立在应用层基础上的安全协议。 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。 利用 SSH 协议可以有效防止远程管理过程中的信息泄露。</em></p>
<h5 id="安装SSH客户端软件"><a href="#安装SSH客户端软件" class="headerlink" title="安装SSH客户端软件"></a>安装SSH客户端软件</h5><p><em>Ubuntu 操作系统默认安装有 SSH 客户端软件，通过以下命令查看是否已安装，如果返回包含“openssh-client”的字样，说明已经安装 SSH 客户端软件</em></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l | grep ssh // 查看</span><br><span class="line">sudo apt-get install openssh-client</span><br></pre></td></tr></table></figure>



<h5 id="安装SSH服务端软件"><a href="#安装SSH服务端软件" class="headerlink" title="安装SSH服务端软件"></a>安装SSH服务端软件</h5><p><em>Ubuntu 操作系统默认没有安装 SSH 服务端软件</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo /etc/init.d/ssh restart // 重启ssh服务</span><br></pre></td></tr></table></figure>

<h4 id="安装Xshell及Xftp-secureCRT"><a href="#安装Xshell及Xftp-secureCRT" class="headerlink" title="安装Xshell及Xftp/secureCRT"></a>安装Xshell及Xftp/secureCRT</h4><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p><em>Hadoop 是基于 Java 语言开发的，运行 Hadoop 需要安装 JDK</em></p>
<p><em>本地系统下载jdk，通过secureCRT上传至Uubuntu</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 解压</span><br><span class="line">tar -zxvf jdk-xxxxx.tar.gz  // 不同压缩格式，解压命名不同</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 建立软链接，便于后续使用</span><br><span class="line">ln -s jdkxxxx jdk</span><br></pre></td></tr></table></figure>

<h5 id="配置jdk环境变量"><a href="#配置jdk环境变量" class="headerlink" title="配置jdk环境变量"></a>配置jdk环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">// 内容</span><br><span class="line">export JAVA_HOME=~/jdk</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:.</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>

<h5 id="使配置生效并检验"><a href="#使配置生效并检验" class="headerlink" title="使配置生效并检验"></a>使配置生效并检验</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第一章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p><em>21世纪的重要特征：<strong>数字化</strong>，<strong>信息化</strong>，<strong>网络化</strong>。网络为核心的信息时代</em></p>
<p><em>三种熟悉的网络：*</em>电信网，有线电视，计算机网络***</p>
<p><strong>电信网</strong>：<em>电报，电话，传真</em></p>
<p><strong>计算机网络</strong>：<em>使用户能够在计算机之间传送数据文件</em></p>
<p><strong>Internet的译名</strong>：<em>互联网(使用得更广泛，各种计算机网络互连起来)，因特网</em></p>
<p><em>计算机能够为用户提供连通服务，其重要的两个特征：<strong>连通性和共享性</strong>.</em></p>
<h2 id="互联网概述"><a href="#互联网概述" class="headerlink" title="互联网概述"></a>互联网概述</h2><h3 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h3><p><em>计算机网络由若干<strong>结点</strong>和<strong>连接这些结点的链路</strong>组成</em></p>
<p><em>结点可以是计算机，服务器，集线器，交换机，路由器等</em></p>
<p><em>网络还可以用*</em>路由器<strong>连接起来，形成更大的网络，称为</strong>互连网***</p>
<p><em>网络把许多计算机连接在一起，而互联网把许多网络通过路由器连接起来。网络中的计算机又叫做主机</em></p>
<h3 id="互联网基础结构发展的三个阶段"><a href="#互联网基础结构发展的三个阶段" class="headerlink" title="互联网基础结构发展的三个阶段"></a>互联网基础结构发展的三个阶段</h3><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><p><em>1969年，美国，ARPANET产生</em></p>
<p><em>单个网络ARPANET向互联网发展的的阶段</em></p>
<p><em>1983年，使用TCP/IP协议将使用协议了的网络连接起来，这就是互联网的诞生时间</em></p>
<p><strong>internet和Internet的区别</strong>：<em>小写的是由多个计算机网络互连而成的计算机网络；大写的是世界范围内众多网络连接而成的，它采用TCP/IP协议作为通信规则，且前身是ARPANET</em></p>
<h4 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h4><p><em>这个阶段的特点是建成了<strong>三级结构的互联网</strong>，NSFNET</em></p>
<p><em>NSFNET分为：主干网，地区网，校园网(或企业网)</em></p>
<h4 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h4><p><em>这个阶段的特点是逐渐形成了*</em>多层次ISP结构的互联网***</p>
<p><strong>ISP</strong>:<em>互联网服务提供商或互联网服务提供商(Internet services provider)</em></p>
<p><em>ISP可以向互联网管理机构申请很多IP地址</em></p>
<p><em>ISP根据服务面积大小和拥有的IP数量可以分为：主干ISP，地区ISP，本地ISP(企业，非盈利机构)</em></p>
<p><em>本地ISP直接服务用户，本地ISP可以连接到地区ISP，也可以连接到主干ISP</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-zookeeper</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-zookeeper.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><h2 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h2><p><em>HDFS、 YARN、 HBase 等，从架构上看，它们有相似点，即一个 Master（主）节点，多个 Slave（从）节点。这样的架构存在严重的缺陷——<strong>单点故障问题</strong>。单点即一个主节点，单点故障是指当只有一个主节点，若主节点宕机，整个集群将无法使用</em>  </p>
<p><em>对于 Hadoop 1.x， Apache Hadoop 官方没有较好的方案解决单点故障问题。 Hadoop 2.x 则有了 *</em>HDFS HA（ High Availability），即 HDFS 高可用性<strong>。</strong>其基本思想是：<strong>多个主节点，一个节点Active（活动），其他节点 Standby（备用）。一旦处于活动状态的节点宕机，会通过一个叫 Failover（故障切换）的机制，实现一个主节点失效而无法运作时，另一个节点可自动接手原失效系统所执行的工作。</strong>实现故障切换的一个核心角色就是 ZooKeeper***  </p>
<p><em>ZooKeeper 是一个高可用的<strong>分布式数据管理和协调框架</strong>，并且能够很好地保证分布式环境中数据的一致性</em></p>
<p><em>根据google chubby论文开发</em></p>
<h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><h2 id="zookeeper的基本原理"><a href="#zookeeper的基本原理" class="headerlink" title="zookeeper的基本原理"></a>zookeeper的基本原理</h2><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-hive</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p><em>命令后要加‘；‘</em></p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int,deptno int) row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="从hdfs导入数据到hive表"><a href="#从hdfs导入数据到hive表" class="headerlink" title="从hdfs导入数据到hive表"></a>从hdfs导入数据到hive表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data inpath &#39;&#x2F;001&#x2F;hive&#x2F;emp.csv&#39; into table emp001;</span><br></pre></td></tr></table></figure>

<h2 id="建立分区"><a href="#建立分区" class="headerlink" title="建立分区"></a>建立分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_part001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int) partitioned by (deptno int)row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="向分区中导入数据"><a href="#向分区中导入数据" class="headerlink" title="向分区中导入数据"></a>向分区中导入数据</h2><p><em>建立分区的作用：建立分区可以理解为给hive表建立了一个索引，查询hive表时可以以分区作为条件，而不需要遍历整张表</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table emp_part001 partition(deptno&#x3D;10) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;10;</span><br><span class="line">insert into table emp_part001 partition(deptno&#x3D;20) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;20;</span><br><span class="line">insert into table emp_part001 partition(deptno&#x3D;30) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;30;</span><br></pre></td></tr></table></figure>

<h2 id="建立桶表"><a href="#建立桶表" class="headerlink" title="建立桶表"></a>建立桶表</h2><p><em>建立桶表的作用：对于每一个表（table）或者分区， Hive可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。Hive也是针对某一列进行桶的组织。Hive采用对列值哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中。所谓Hive中的分桶，实际就是指的MapReduce中的分区。根据Reduce的数量，分成不同个数的文件</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_bucket001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int,deptno int)clustered by (job) into 4 buckets row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查看hive表的设计"><a href="#查看hive表的设计" class="headerlink" title="查看hive表的设计"></a>查看hive表的设计</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe tablename;</span><br></pre></td></tr></table></figure>

<h2 id="查看hive中的所有数据库"><a href="#查看hive中的所有数据库" class="headerlink" title="查看hive中的所有数据库"></a>查看hive中的所有数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h3 id="查看hive中的所有表"><a href="#查看hive中的所有表" class="headerlink" title="查看hive中的所有表"></a>查看hive中的所有表</h3><p><em>先要使用具体某一个数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use databaseName;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>python库-re库</title>
    <url>/python%E5%BA%93-re%E5%BA%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><em>在字符串中查找符合正则表达式的，返回第一位置的结果；结果为match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, String, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern正则表达式 </span></span><br><span class="line"><span class="comment"># String 字符串 </span></span><br><span class="line"><span class="comment"># flags正则表达式的控制情况</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flag常用标记</span></span><br><span class="line">re.I  <span class="comment"># re.IGNORECASE 忽略正则表达式中的大小写</span></span><br><span class="line">re.M  <span class="comment"># RE.MUTILINE 正则中^操作符能够将字符串的每行当作匹配开始</span></span><br><span class="line">re.S  <span class="comment"># RE.DOTALL 正则表达式中‘.’可以表示任意单个字符，默认除换行符</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match = re.search(<span class="string">r'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT 234567'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><em>从字符串开始位置匹配正则表达式，匹配则返回match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, String, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match=re.match(<span class="string">r'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT  100085'</span>)</span><br><span class="line"><span class="comment"># 报错没有得到匹配结果</span></span><br></pre></td></tr></table></figure>

<h3 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LS = re.findall(<span class="string">'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT 12345 BIT 23567'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'12345'</span>, <span class="string">'23567'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p><em>返回所有匹配结果，以列表形式返回</em></p>
<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p><em>以正则表达式分割字符串，返回列表</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># maxsplit最大切割数，剩下部分按整体输出</span></span><br></pre></td></tr></table></figure>

<h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer()"></a>finditer()</h3><p><em>搜索字符串，返回一个匹配结果的迭代类型；match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]/d&#123;5&#125;, '</span>BIT100081 TSU100084<span class="string">'):</span></span><br><span class="line"><span class="string">	print(m.group(0))</span></span><br></pre></td></tr></table></figure>

<h3 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h3><p><em>替换所有匹配结果的字符串，返回替换后字符串</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># repl 替换的字符串</span></span><br><span class="line"><span class="comment"># count 最大替换次数</span></span><br></pre></td></tr></table></figure>



<h2 id="面向对象的方法"><a href="#面向对象的方法" class="headerlink" title="面向对象的方法"></a>面向对象的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regex = re.compile(pattern, flag=<span class="number">0</span>)</span><br><span class="line">rst = regex.search(String)</span><br></pre></td></tr></table></figure>

<h2 id="match对象"><a href="#match对象" class="headerlink" title="match对象"></a>match对象</h2><h3 id="match对象的属性"><a href="#match对象的属性" class="headerlink" title="match对象的属性"></a>match对象的属性</h3><ul>
<li>String  待匹配的字符串</li>
<li>re  匹配时使用的pattern对象</li>
<li>pos  正则表达式搜索文本的开始位置</li>
<li>endpos  正则表达式搜索文本的结束位置</li>
</ul>
<h2 id="match对象的方法"><a href="#match对象的方法" class="headerlink" title="match对象的方法"></a>match对象的方法</h2><ul>
<li>group() 返回匹配的字符串</li>
<li>start()  匹配字符串的开始位置</li>
<li>end()  匹配字符串的结束位置</li>
<li>span() 返回(start(), end())</li>
</ul>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>re库</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫 动态渲染页面爬取-Splash负载均衡配置</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-7%E7%AB%A0(7.3)%20%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%88%AC%E5%8F%96-Splash%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="动态渲染页面爬取-Splash负载均衡配置"><a href="#动态渲染页面爬取-Splash负载均衡配置" class="headerlink" title="动态渲染页面爬取-Splash负载均衡配置"></a>动态渲染页面爬取-Splash负载均衡配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用 Splash做页面抓取时，如果爬取的量非常大，任务非常多，用一个Splash服务来处理的话，未</span><br><span class="line">免压力太大了，此时可以考虑搭建一个负载均衡器来把压力分散到各个服务器上。这相当于多台机器</span><br><span class="line">多个服务共同参与任务的处理，可以减小单个Splash服务的压力。</span><br></pre></td></tr></table></figure>

<h2 id="配置Splash服务"><a href="#配置Splash服务" class="headerlink" title="配置Splash服务"></a>配置Splash服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要搭建Splash负载均衡，首先要有多个Splash服务。假如这里在4 台远程主机的8050端口上都开启了 Splash服务，它们的服务地址分别为 41.159.27.223:8050、41.159.27.221:8050、 41.159.27.9:8050和41.159.117.119:8050,这4个服务完全一致，都是通过Docker的 Splash镜像开启的。访问其中任何一个服务时，都可以使用Splash服务。</span><br></pre></td></tr></table></figure>

<h2 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来，可以选用任意一台带有公网IP的主机来配置负载均衡。首先，在这台主机上装好Nginx,然后修改Nginx的配置文件nginx.conf,添加如下内容：</span><br><span class="line">http &#123;</span><br><span class="line">	upstrearn splash &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server 41・159.27.223：8050；</span><br><span class="line">        server 41.159.27.221:8050;</span><br><span class="line">        server 41.159.27.9:8050;</span><br><span class="line">        server 41.159.117.119:8050;</span><br><span class="line">        &#125;</span><br><span class="line">        server&#123;</span><br><span class="line">            listen 8050;</span><br><span class="line">            location &#x2F; &#123;</span><br><span class="line">        		proxy_pass http:&#x2F;&#x2F;splash;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">这样我们通过upstream字段定义了一个名字叫作splash的服务集群配置。其中least_conn代表最少链接负载均衡，它适合处理请求处理时间长短不一造成服务器过载的情况。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当然，我们也可以不指定配置，具体如下:</span><br><span class="line">upstrearn splash &#123;</span><br><span class="line">    server 41.159.27.223:8050；</span><br><span class="line">    server 41.159.27.221:8050；</span><br><span class="line">    server 41.159.27.9:8050;</span><br><span class="line">    server 41.159.117.119:8050;</span><br><span class="line">&#125;</span><br><span class="line">这样默认以轮询策略实现负载均衡，每个服务器的压力相同。此策略适合服务器配置相当、无状态且短平快的服务使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">另外，我们还可以指定权重，配置如下：</span><br><span class="line">upstream splash &#123;</span><br><span class="line">    server 41.159.27.223:8050 weight&#x3D;4；</span><br><span class="line">    server 41.159.27.221:8050 weight&#x3D;2；</span><br><span class="line">    server 41.159.27.9:8050 weight&#x3D;2;</span><br><span class="line">    server 41.159.117.119:8050 weight&#x3D;l;</span><br><span class="line">&#125;</span><br><span class="line">这里 weight参数指定各个服务的权重，权重越高，分配到处理的请求越多。假如不同的服务器配置差别比较大的话，可以使用此种配置。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后，还有一种IP散列负载均衡，配置如下：</span><br><span class="line">upstream splash &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 42.159.27.223:8050;</span><br><span class="line">    server 41.159.27.221:8050;</span><br><span class="line">    server 41.159.27.9:8050;</span><br><span class="line">    server 41.159.117.119:8050;</span><br><span class="line">&#125;</span><br><span class="line">服务器根据请求客户端的IP地址进行散列计算，确保使用同一个服务器响应请求，这种策略适合有状态的服务，比如用户登录后访问某个页面的情形。对于Splash来说，不需要应用此设置。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们可以根据不同的情形选用不同的配置，配置完成后重启一下Nginx服务：</span><br><span class="line">sudo nginx -s reload</span><br><span class="line">这样直接访问Nginx所在服务器的8050端口，即可实现负载均衡了。</span><br></pre></td></tr></table></figure>

<h2 id="配置认证"><a href="#配置认证" class="headerlink" title="配置认证"></a>配置认证</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">现在Splash是可以公开访问的，如果不想让其公开访问，还可以配置认证，这仍然借助于Nginx。</span><br><span class="line">可以在server的location字段中添加auth_basic和 auth_basic_user_file字段，具体配置如下：</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="attribute">upstream</span> splash &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">41.159.27.223:8050</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">41.159.27.221:8050</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">41.159.27.9:8050</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">41.159.117.119:8050</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">liste</span> n <span class="number">8050</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">proxy_pass</span> h ttp ://s p la sh ;</span><br><span class="line">        <span class="attribute">auth_basic</span> <span class="string">"Restrieted"</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/conf.d/.htpasswd;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">这里使用的用户名和密码配置放置ft/etc/nginx/conf.d目录下，我们需要使用htpasswd命令创建。</span><br><span class="line"></span><br><span class="line">例如，创建一个用户名为mdmin的文件，相关命令如下：</span><br><span class="line"><span class="attribute">htpasswd</span> -c .htpasswd admin</span><br><span class="line">接下来就会提示我们输入密码，输入两次之后，就会生成密码文件，其内容如下：</span><br><span class="line">emt .htpasswd</span><br><span class="line">admin:SZBxQrOrCqwbc</span><br><span class="line"></span><br><span class="line">配置完成后，重启一下Nginx服务：</span><br><span class="line">sudo nginx -s reload</span><br><span class="line">这样访问认证就成功配置好了。</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最后，我们可以用代码来测试一下负载均衡的配置，看看到底是不是每次请求会切换IP。利用http://httpbin.org/get测试即可，实现代码如下：</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">function main(splash, args)</span></span><br><span class="line"><span class="string">    local treat = require("treat")</span></span><br><span class="line"><span class="string">    local response = splash:http_get("http://httpbin.org/get")</span></span><br><span class="line"><span class="string">    return treat.as_string(response.body)</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">url = <span class="string">'http://splash:8050/execute?lua_sou:rce='</span> + quote(lua)</span><br><span class="line">response = requests.get(uil, auth=(<span class="string">'admin'</span>, <span class="string">'admin'</span>))</span><br><span class="line">ip = re.search(<span class="string">' (\d+\.\d+\.\d+\.\d+)'</span>, response.text).group(<span class="number">1</span>)</span><br><span class="line">print(ip)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里URL中的splash字符串请自行替换成自己的Nginx服务器IP。 这里我修改了Hosts, 设置了splash为Nginx服务器IP</span><br><span class="line">多次运行代码之后，可以发现每次请求的IP都会变化，比如第一次的结果：</span><br><span class="line">41.159.27.223</span><br><span class="line">第二次的结果：</span><br><span class="line">41.159.27.9</span><br><span class="line"></span><br><span class="line">这就说明负载均衡已经成功实现了。</span><br><span class="line">本节中，我们成功实现了负载均衡的配置。配置负载均衡后，可以多个Splash服务共同合作，减轻单个服务的负载，这还是比较有用的。</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫 验证码的识别</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-8%E7%AB%A0%20%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%AF%86%E5%88%AB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="验证码的识别"><a href="#验证码的识别" class="headerlink" title="验证码的识别"></a>验证码的识别</h1><blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫 动态渲染页面爬取-使用Selenium爬取淘宝商品</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-7%E7%AB%A0(7.4)%20%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%88%AC%E5%8F%96-%E4%BD%BF%E7%94%A8Selenium%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="使用Selenium爬取淘宝商品"><a href="#使用Selenium爬取淘宝商品" class="headerlink" title="使用Selenium爬取淘宝商品"></a>使用Selenium爬取淘宝商品</h1><blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python解析库-bs4</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-python%E8%A7%A3%E6%9E%90%E5%BA%93-bs4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Beautiful-Soup库"><a href="#Beautiful-Soup库" class="headerlink" title="Beautiful Soup库"></a>Beautiful Soup库</h1><p><em>具有解析，遍历，维护“标签树”的功能的功能库</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>) <span class="comment"># 解析器可以是其它的</span></span><br></pre></td></tr></table></figure>

<h2 id="五种基本元素"><a href="#五种基本元素" class="headerlink" title="五种基本元素"></a>五种基本元素</h2><p><em>tag, name, attributes, navigableString, comment</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.标签名 <span class="comment"># 得到标签</span></span><br><span class="line">tag.name <span class="comment"># 得到标签名</span></span><br><span class="line">tag.attrs <span class="comment"># 得到标签属性</span></span><br><span class="line">comment <span class="comment"># 标签内的字符串，注释部分，一种特殊的comment类型</span></span><br></pre></td></tr></table></figure>

<h2 id="非find的常用方法"><a href="#非find的常用方法" class="headerlink" title="非find的常用方法"></a>非find的常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.title</span><br><span class="line">soup.标签名</span><br><span class="line">soup.标签名.name</span><br><span class="line">soup.标签名.parent.name</span><br><span class="line">tag.attris[<span class="string">'属性名'</span>] <span class="comment"># tag.attris['href'], tag.attris['.class']</span></span><br></pre></td></tr></table></figure>

<h2 id="标签树"><a href="#标签树" class="headerlink" title="标签树"></a>标签树</h2><h3 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.contents <span class="comment"># 得到子节点列表</span></span><br><span class="line">tag.children <span class="comment"># 得到子节点的迭代类型</span></span><br><span class="line">tag.descendents <span class="comment"># 子孙节点的迭代类型</span></span><br></pre></td></tr></table></figure>

<h3 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.parent <span class="comment"># 父亲标签</span></span><br><span class="line">tag.parents <span class="comment"># 先辈标签的迭代类型</span></span><br></pre></td></tr></table></figure>

<h3 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.next_sibling <span class="comment"># 下一个平行节点</span></span><br><span class="line">tag.next_siblings <span class="comment"># 得到所有下一个平行节点的迭代类型</span></span><br><span class="line">tag.previous_sibling <span class="comment"># 上一个平行节点</span></span><br><span class="line">tag.previous_siblings <span class="comment"># 得到所有上一个平行节点的迭代类型</span></span><br></pre></td></tr></table></figure>

<h2 id="使soup更加规则"><a href="#使soup更加规则" class="headerlink" title="使soup更加规则"></a>使soup更加规则</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.prettify()</span><br></pre></td></tr></table></figure>

<h2 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接口</span></span><br><span class="line">soup.find_all(name, attrs, recursive, String, kwarg**)</span><br><span class="line"><span class="comment"># recursive是否递归查询，默认为True</span></span><br><span class="line"><span class="comment"># String标签内的字符串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用正则表达式匹配符合对应名字的标签名</span></span><br><span class="line">tags = soup.find_all(re.compile(<span class="string">'xxx'</span>))</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    print(tag.name)</span><br><span class="line"><span class="comment"># 标签内字符串检索</span></span><br><span class="line">soup.find_all(String=re.compile(<span class="string">'python'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><h2 id="find-parents"><a href="#find-parents" class="headerlink" title="find_parents()"></a>find_parents()</h2><h2 id="find-parent"><a href="#find-parent" class="headerlink" title="find_parent()"></a>find_parent()</h2><h2 id="find-next-sibling"><a href="#find-next-sibling" class="headerlink" title="find_next_sibling()"></a>find_next_sibling()</h2><h2 id="find-next-siblings"><a href="#find-next-siblings" class="headerlink" title="find_next_siblings()"></a>find_next_siblings()</h2><h2 id="find-previous-sibling"><a href="#find-previous-sibling" class="headerlink" title="find_previous_sibling()"></a>find_previous_sibling()</h2><h2 id="find-previous-siblings"><a href="#find-previous-siblings" class="headerlink" title="find_previous_siblings()"></a>find_previous_siblings()</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-代理的使用</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-9%E7%AB%A0%20%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="代理的使用"><a href="#代理的使用" class="headerlink" title="代理的使用"></a>代理的使用</h1><h2 id="代理的设置"><a href="#代理的设置" class="headerlink" title="代理的设置"></a>代理的设置</h2><h3 id="获取代理"><a href="#获取代理" class="headerlink" title="获取代理"></a>获取代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">做测试之前，我们需要先获取一个可用代理。搜索引擎搜索“代理”关键字，就可以看到许多代</span><br><span class="line">理服务网站，网站上会有很多免费代理，比如西刺： http://www.xicidaili.eom/o但是这些免费代理大多</span><br><span class="line">数情况下都是不好用的，所以比较靠谱的方法是购买付费代理。付费代理在很多网站上都有售卖，数量不用多，稳定可用即可，我们可以自行选购。</span><br><span class="line">如果本机有相关代理软件的话，软件一般会在本机创建HTTP或 SOCKS代理服务，本机直接使用此代理也可以。</span><br><span class="line">在这里，我的本机安装了一部代理软件，它会在本地<span class="number">9743</span>端口上创建HTTP代理服务，即代理</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9743</span>,另外还会在<span class="number">9742</span>端口创建SOCKS代理服务，即代理为 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9742</span>。我只要设置了这个代理，就可以成功将本机IP 切换到代理软件连接的服务器的IP了</span><br><span class="line">本章下面的示例里，我使用上述代理来演示其设置方法，你也可以自行替换成自己的可用代理。</span><br><span class="line">设置代理后测试的网址是： http://httpbin.org/get,我们访问该网址可以得到请求的相关信息，其中 origin字段就是客户端的IP , 我们可以根据它来判断代理是否设置成功，即是否成功伪装了IP</span><br></pre></td></tr></table></figure>

<h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><h2 id="代理池的维护"><a href="#代理池的维护" class="headerlink" title="代理池的维护"></a>代理池的维护</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在网上有大量公开的免费代理，或者我们也可以购买付费的代理ip, 但是代理不论是免费的还是付费的，都不能保证都是可用的，因为可能此ip被其他人使用来爬取同样的目标站点而被封禁，或者代理服务器突然发生故障或网络繁忙。</span><br><span class="line">一旦我们选用了一个不可用的代理，这势必会影响爬虫的工作效率。</span><br><span class="line">所以，我们需要提前做筛选，将不可用的代理剔除掉，保留可用代理。接下来我们就搭建一个高效易用的代理池</span><br></pre></td></tr></table></figure>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先需要成功安装Redis数据库并启动服务，另外还需要安装aiohttp、 requests、 redis-py、 pyquery、</span><br><span class="line">Flask库 ，可以参考第1章的安装说明</span><br></pre></td></tr></table></figure>



<h3 id="代理池的目标"><a href="#代理池的目标" class="headerlink" title="代理池的目标"></a>代理池的目标</h3><h4 id="存储模块"><a href="#存储模块" class="headerlink" title="存储模块"></a>存储模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">负责存储抓取下来的代理。首先要保证代理不重复，要标识代理的可用情况，还要动态实时处理每个代理，所以一种比较高效和方便的存储方式就是使用R edis的 Sorted Set , 即有序集合</span><br></pre></td></tr></table></figure>

<h4 id="获取模块"><a href="#获取模块" class="headerlink" title="获取模块"></a>获取模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要定时在各大代理网站抓取代理。代理可以是免费公开代理也可以是付费代</span><br><span class="line">理 ，代理的形式都是IP 加端口，此模块尽量从不同来源获取，尽量抓取高匿代理，抓取成功之后将可用代理保存到数据库中</span><br></pre></td></tr></table></figure>

<h4 id="检测模块"><a href="#检测模块" class="headerlink" title="检测模块"></a>检测模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要定时检测数据库中的代理。这里需要设置一个检测链接，最好是爬取哪个网站就检测哪个网站，这样更加有针对性，如果要做一个通用型的代理，那可以设置百度等链接来检测。另外，我们需要标识每一个代理的状态，如设置分数标识， 1 0 0 分代表可用，分数越少代表越不可用。检测一次，如果代理可用，我们可以将分数标识立即设置为100满分，也可以在原基础上加1分 ；如果代理不可用，可以将分数标识减1分，当分数减到一定阈值后，代理就直接从数据库移除。通过这样的标识分数，我们就可以辨别代理的可用情况，选用的时候会更有针对性</span><br></pre></td></tr></table></figure>

<h4 id="接口模块"><a href="#接口模块" class="headerlink" title="接口模块"></a>接口模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需 要 用 A P I来提供对外服务的接口。其实我们可以直接连接数据库来取对应的数据 ，但是这样就需要知道数据库的连接信息，并且要配置连接，而比较安全和方便的方式就是提供一个Web A P I接口，我们通过访问接口即可拿到可用代理。另外，由于可用代理可能有多个，那么我们可以设置一个随机返回某个可用代理的接口，这样就能保证每个可用代理都可以取到，实现负载均衡</span><br></pre></td></tr></table></figure>

<h3 id="代理池的架构"><a href="#代理池的架构" class="headerlink" title="代理池的架构"></a>代理池的架构</h3><p><a href="https://imgtu.com/i/bDcfAO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/06/bDcfAO.png" alt="bDcfAO.png"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存储模块使用Redis的有序集合，用来做代理的去重和状态标识，同时它也是中心模块和基础模块，将其他模块串联起来。</span><br><span class="line">获取模块定时从代理网站获取代理，将获取的代理传递给存储模块，并保存到数据库。</span><br><span class="line">检测模块定时通过存储模块获取所有代理，并对代理进行检测，根据不同的检测结果对代理设置不同的标识</span><br><span class="line">接口模块通过Web API提供服务接口，接口通过连接数据库并通过Web形式返回可用的代理</span><br></pre></td></tr></table></figure>

<h3 id="代理池的实现"><a href="#代理池的实现" class="headerlink" title="代理池的实现"></a>代理池的实现</h3><h4 id="存储模块-1"><a href="#存储模块-1" class="headerlink" title="存储模块"></a>存储模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们使用Redis的有序集合，集合的每一个元素都是不重复的，对于代理池来说，集合的元素就变成了一个个代理，也 就 是 IP加端口的形式，如 <span class="number">60.207</span><span class="number">.237</span><span class="number">.111</span>:<span class="number">8888</span>,这样的一个代理就是集合的一个元素。 另外，有序集合的每一个元素都有一个分数字段，分数是可以重复的，可以是浮点数类型， 也可以是整数类型。 该集合会根据每一个元素的分数对集合进行排序，数值小的排在前面，数值大的排在后面，这样就可以实现集合元素的排序了。</span><br><span class="line">对于代理池来说，这个分数可以作为判断一个代理是否可用的标志， <span class="number">100</span>为最高分，代表最可用，<span class="number">0</span> 为最低分，代表最不可用。如果要获取可用代理，可以从代理池中随机获取分数最高的代理，注意是随机， 这样可以保证每个可用代理都会被调用到</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分数是我们判断代理稳定性的重要标准, 设置分数规则如下所示。</span><br><span class="line">□ 分 数 100为可用，检测器会定时循环检测每个代理可用情况，一旦检测到有可用的代理就立即置为100 ,检测到不可用就将分数减1 , 分数减至0 后代理移除。</span><br><span class="line">□新获取的代理的分数为1 0 , 如果测试可行，分数立即置为1 0 0 ,不可行则分数减1 , 分数减至0 后代理移除。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这只是一种解决方案，当然可能还有更合理的方案。之所以设置此方案有如下几个原因。</span><br><span class="line">□在检测到代理可用时，分 数 立 即 置 为 10 0 ,这样可以保证所有可用代理有更大的机会被获取到。你可能会问，为什么不将分数加1而是直接设为最高100呢？设想一下，有的代理是从各大免费公开代理网站获取的，常常一个代理并没有那么稳定，平 均 5 次请求可能有两次成功 ，3 次失 败 ，如果按照这种方式来设置分数，那么这个代理几乎不可能达到一个高的分数 ，也就是说即便它有时是可用的，但是筛选的分数最高，那这样的代理几乎不可能被取到。如果想追求代理稳定性，可以用上述方法，这种方法可确保分数最高的代理一定是最稳定可用的。所以，这里我们采取“可 用 即 设 置 100” 的方法，确保只要可用的代理都可以被获取到。</span><br><span class="line">□在检测到代理不可用时，分 数 减 1 , 分数减至0 后 ，代理移除。这样一个有效代理如果要被移除需要失败100次 ，也就是说当一个可用代理如果尝试了 100次都失败了，就一直减分直到移除 ，一旦成功就重新置回100。尝试机会越多，则这个代理拯救回来的机会越多，这样就不容易将曾经的一个可用代理丢弃，因为代理不可用的原因很可能是网络繁忙或者其他人用此代理请求太过频繁，所以在这里将分数为100。</span><br><span class="line">口新获取的代理的分数设置为10 , 代理如果不可用，分数就减1 ,分数减到0, 代理就移除，如果代理可用，分 数 就 置 为 100。由于很多代理是从免费网站获取的，所以新获取的代理无效的比例非常高，可能不足10%。所以在这里我们将分数设置为10, 检测的机会没有可用代理的 100次那么多，这也可以适当减少开销。</span><br></pre></td></tr></table></figure>



<h4 id="获取模块-1"><a href="#获取模块-1" class="headerlink" title="获取模块"></a>获取模块</h4><h4 id="检测模块-1"><a href="#检测模块-1" class="headerlink" title="检测模块"></a>检测模块</h4><h4 id="接口模块-1"><a href="#接口模块-1" class="headerlink" title="接口模块"></a>接口模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们怎样方便地获取可用代理呢？可以用 Redis Client类直接连接Redis,然后调用random()</span><br><span class="line">方法。这样做没问题，效率很高，但是会有几个弊端:</span><br><span class="line">如果其他人使用这个代理池，他需要知道Redis连接的用户名和密码信息，这样很不安全。</span><br><span class="line">	□ 如果代理池需要部署在远程服务器上运行，而远程服务器的Redis只允许本地连接，那么我</span><br><span class="line">们就不能远程直连Redis来获取代理。</span><br><span class="line">	□如果爬虫所在的主机没有连接Redis模块,或者爬虫不是由Python语言编写的，那么我们就</span><br><span class="line">无法使用Redis Client来获取代理。</span><br><span class="line">	□ 如果Redis Client类或者数据库结构有更新，那么爬虫端必须同步这些更新，这样非常麻烦。</span><br><span class="line">    </span><br><span class="line">综上考虑，为了使代理池可以作为一个独立服务运行，我们最好增加一个接口模块，并以Web API</span><br><span class="line">的形式暴露可用代理。</span><br><span class="line">这样一来，获取代理只需要请求接口即可，以上的几个缺点弊端也可以避免。</span><br><span class="line">我们使用一个比较轻量级的库Flask来实现这个接口模块</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> RedisClient</span><br><span class="line">_ all_ = [ <span class="string">'app'</span>]</span><br><span class="line">app = Flask(_ name_ )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(g, <span class="string">'redis'</span>):</span><br><span class="line">g.redis = RedisClient()</span><br><span class="line"><span class="keyword">return</span> g.redis</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;h2&gt;Welcome to Proxy Pool System&lt;/h2&gt;'</span></span><br><span class="line"><span class="meta">@app.route('/random')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">()</span>:</span></span><br><span class="line">获取随机可用代理</span><br><span class="line">:<span class="keyword">return</span>:随机代理</span><br><span class="line">conn = get_conn()</span><br><span class="line"><span class="keyword">return</span> conn.random()</span><br><span class="line"><span class="meta">@app.route('/count')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_counts</span><span class="params">()</span>:</span></span><br><span class="line">获取代理池总量</span><br><span class="line">:<span class="keyword">return</span>:代理池总量</span><br><span class="line">conn = get_conn()</span><br><span class="line"><span class="keyword">return</span> str(conn.count())</span><br><span class="line"><span class="keyword">if</span> _ name_ == <span class="string">'_ main_ '</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这里，我们声明了一个Flask对象，定义了3个接口，分别是首页、随机代理页、获取数量页。</span><br><span class="line">运行之后， Flask会启动一个Web服务，我们只需要访问对应的接口即可获取到可用代理</span><br></pre></td></tr></table></figure>

<h4 id="调度模块"><a href="#调度模块" class="headerlink" title="调度模块"></a>调度模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TESTER_CYCLE = <span class="number">20</span></span><br><span class="line">GETTER5YCLE = <span class="number">20</span></span><br><span class="line">TESTERJNABLED = <span class="literal">True</span></span><br><span class="line">GETTERJNABLED = <span class="literal">True</span></span><br><span class="line">API_ENABLED = <span class="literal">True</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> getter <span class="keyword">import</span> Getter</span><br><span class="line"><span class="keyword">from</span> tester <span class="keyword">import</span> Tester</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule_tester</span><span class="params">(self, cycle=TESTER_CYCLE)</span>:</span></span><br><span class="line">定时测试代理</span><br><span class="line">tester = Tester()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'测 试 器 开 始 运 行 '</span>)</span><br><span class="line">tester.run()</span><br><span class="line">time.sleep(cycle)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule_getter</span><span class="params">(self, cycle=GETTER_CYCLE)</span>:</span></span><br><span class="line">定时获取代理</span><br><span class="line">getter = Getter()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">print(<span class="string">'开 始 抓 取 代 理 '</span>)</span><br><span class="line">getter.run()</span><br><span class="line">time.sleep(cycle)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule_api</span><span class="params">(self)</span>:</span></span><br><span class="line">开 启 API</span><br><span class="line">app.run(API_HOST, API_PORT)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'代 理 池 开 始 运 行 '</span>)</span><br><span class="line"><span class="keyword">if</span> TESTER_ENABLED:</span><br><span class="line">tester_process = Process(target=self.schedule_teste:r)</span><br><span class="line">tester_process.start()</span><br><span class="line"><span class="keyword">if</span> GETTER_ENABLED:</span><br><span class="line">getter_process = Process(target=self.schedule_gette:r)</span><br><span class="line">getter_process.start()</span><br><span class="line"><span class="keyword">if</span> API_ENABLED:</span><br><span class="line">api_process = Process(target=self.schedule_api)</span><br><span class="line">api_process.start()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 个 常 量 TESTER_ENABLED、 GETTER_ENABLED、 API_ENABLED都是布尔类型，表示测试模块、获取模</span><br><span class="line">块 、接口模块的开关，如果都为T r u e ,则代表模块开启。</span><br><span class="line"></span><br><span class="line">启动入 口 是run()方法，这个方法分别判断3 个模块的开关。如果开关开启，启动时程序就新建</span><br><span class="line">-个Process进程，设置好启动目标，然后 调 用s ta r t()方法运行，这 样 3 个进程就可以并行执行，互</span><br><span class="line">不干扰。</span><br><span class="line">3 个调度方法结构也非常清晰。比如， schedule_tester()方法用来调度测试模块，首先声明一个</span><br><span class="line">T ester对象，然后进入死循环不断循环调用其run()方 法 ，执行完一轮之后就休眠一段时间，休眠结</span><br><span class="line">束之后重新再执行。在这里，休眠时间也定义为一个常量，如 20秒 ，即每隔20秒进行一次代理检测。</span><br><span class="line">最后，只需要调用Scheduler的 run()方法即可启动整个代理池</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫 动态渲染页面爬取-Selenium</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-7%E7%AB%A0(7.1)%20%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%88%AC%E5%8F%96-Selenium.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="动态渲染页面爬取-Selenium"><a href="#动态渲染页面爬取-Selenium" class="headerlink" title="动态渲染页面爬取-Selenium"></a>动态渲染页面爬取-Selenium</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在前一章中，我们了解了Ajax的分析和抓取方式，这其实也是JavaScript动态渲染的页面的一种情形，通过直接分析Ajax, 我们仍然可以借助requests或urllib来实现数据爬取。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  不过JavaScript动态渲染的页面不止Ajax这一种。比如中国青年网(详见http://news.youth.cn/gn/),它的分页部分是由JavaScript生成的，并非原始HTML代码，这其中并不包含Ajax请求。比如ECharts的官方实例(详见http://echarts.baidu.eom/demo.html<span class="comment">#bar-negative) , 其图形都是经过JavaScript 计算之后生成的。再有淘宝这种页面，它即使是Ajax获取的数据，但是其Ajax接口含有很多加密参数，我</span></span><br><span class="line">们难以直接找出其规律，也很难直接分析Ajax来抓取。</span><br><span class="line">  为了解决这些问题，我们可以直接使用模拟浏览器运行的方式来实现，这样就可以做到在浏览器中看到是什么样，抓取的源码就是什么样，也就是可见即可爬。这样我们就不用再去管网页内部的JavaScript用了什么算法渲染页面，不用管网页后台的Ajax接口到底有哪些参数。                                          Python提供了许多模拟浏览器运行的库，如Selenium, Splash、PyV8、Ghost等。本章中，我们就来介绍一下Selenium和 Splash的用法。有了它们，就不用再为动态渲染的页面发愁了。</span><br></pre></td></tr></table></figure>

<h2 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作,同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些JavaScript动态渲染的页面来说，此种抓取方式非常有效。本节中，就让我们来感受一下它的强大之处吧。</span><br></pre></td></tr></table></figure>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本节以Chrome为例来讲解Selenium的用法。在开始之前，请确保已经正确安装好了 Chrome浏览器并配置好了ChromeDriver。另外，还需要正确安装好Python的 Selenium库，详细的安装和配置过程可以参考第<span class="number">1</span>章。</span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">准备工作做好之后，首先来大体看一下Selenium有一些怎样的功能。示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.s叩port <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(，https://www.baidu.com<span class="string">')</span></span><br><span class="line"><span class="string">    input = browser.find_element_by_id('</span>kw<span class="string">')</span></span><br><span class="line"><span class="string">    input.send_keys('</span>Python<span class="string">')</span></span><br><span class="line"><span class="string">    input.send_keys(Keys.ENTER)</span></span><br><span class="line"><span class="string">    wait = WebDriverWait(browser, 10)</span></span><br><span class="line"><span class="string">        wait.unti1(EC.presence_of_element_located((By.ID, '</span>content_left<span class="string">')))</span></span><br><span class="line"><span class="string">    print (browser, curren</span></span><br><span class="line"><span class="string">    print(browser.get_cookies())</span></span><br><span class="line"><span class="string">    print(browser.page_source)</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">	browser.close()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行代码后发现，会自动弹出一个Chrome浏览器。浏览器首先会跳转到百度，然后在搜索框中输入Python ,接着跳转到搜索结果页</span><br><span class="line"></span><br><span class="line">搜索结果加载出来后，控制台分别会输出当前的URL,当前的Cookies和网页源代码</span><br><span class="line"></span><br><span class="line">可以看到，我们得到的当前URL、Cookies和源代码都是浏览器中的真</span><br><span class="line">实内容。</span><br><span class="line">所以说，如果用Selenium来驱动浏览器加载网页的话，就可以直接拿到JavaScript渲染的结果了，不用担心使用的是什么加密系统。</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>browser.get_cookies()</span><br><span class="line"><span class="number">2.</span>browser.page_source</span><br><span class="line"><span class="number">3.</span>input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">   input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">   input.send_keys(Keys.ENTER)</span><br><span class="line"><span class="number">4.</span>wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">  wait.unti1(EC.presence_of_element_located((By.ID, <span class="string">'content_left'</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selenium支持非常多的浏览器，如Chrome、Firefox、Edge等，还有Android, BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此外，我们可以用如下方式初始化：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line"></span><br><span class="line">这样就完成了浏览器对象的初始化并将其赋值为browser对象。接下来，我们要做的就是调用browser对象，让其执行各个动作以模拟浏览器操作。</span><br></pre></td></tr></table></figure>

<h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们可以用get()方法来请求网页，参数传入链接URL即可。比如，这里用get()方法访问淘宝，然后打印出源代码，代码如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br><span class="line">运行后发现，弹出了Chrome浏览器并且自动访问了淘宝，然后控制台输出了淘宝页面的源代码，随后浏览器关闭。</span><br><span class="line">通过这几行简单的代码，我们可以实现浏览器的驱动并获取网页源码，非常便捷。</span><br></pre></td></tr></table></figure>

<h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selenium可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。比如，我们想要完成向某个输入框输入文字的操作，总需要知道这个输入框在哪里吧？而 Selenium提供了一系列查找节点的方</span><br><span class="line">法 ，我们可以用这些方法来获取想要的节点，以便下一步执行一些动作或者提取信息。</span><br></pre></td></tr></table></figure>

<h4 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">比如，想要从淘宝页面中提取搜索框这个节点，首先要观察它的源代码</span><br><span class="line"></span><br><span class="line">可以发现，它的id是q, name也是q。此外，还有许多其他属性，此时我们就可以用多种方式获取它了。比如， find_element_by_name()是根据name值获取，find_element_by_id()是根据id获取。</span><br><span class="line"></span><br><span class="line">另外，还有根据XPath、CSS选择器等获取的方式。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们用代码实现一下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_eleme rrE_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first, input_second, input_third)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">这里我们使用<span class="number">3</span> 种方式获取输入框，分别是根据ID、CSS选择器和XPath获取，它们返回的结果完全一致。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里列出所有获取单个节点的方法：</span><br><span class="line">find_element_by_id</span><br><span class="line">find_element_by_n日me</span><br><span class="line">find_element_by_xpath</span><br><span class="line">find_element_by_link_text</span><br><span class="line">find_element_by_partial_link_text</span><br><span class="line">find_element_by_tag_name</span><br><span class="line">find_element_by_class_name</span><br><span class="line">find_element_by_css_selector</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外，Selenium还提供了通用方法find_element(), 它需要传入两个参数：查找方式By和值。</span><br><span class="line">实际上，它就是find_element_by_id() 这种方法的通用函数版本，比如find_element_by_id(id)就等价于find_elem ent(By.ID,id), 二者得到的结果完全一致。我们用代码实现一下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">实际上，这种查找方式的功能和上面列举的查找函数完全一致，不过参数更加灵活。</span><br></pre></td></tr></table></figure>

<h4 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果查找的目标在网页中只有一个，那么完全可以用find_elem ent()方法。但如果有多个节点，再用find_elem ent()方法查找，就只能得到第一个节点了。如果要查找所有满足条件的节点，需要用</span><br><span class="line">find_elements()这样的方法。注意，在这个方法的名称中， element多了一个s , 注意区分。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">[&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"c26290835d4457ebf7d96bfab3740dl9"</span>,</span><br><span class="line">element=<span class="string">"O.O9221O44O331256O3-1"</span>)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement</span><br><span class="line">(session=<span class="string">"c26290835d4457ebf7d96bfab3740dl9"</span>, element=<span class="string">"O.O9221O44O331256O3-2"</span>)&gt;,</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"c26290835d4457ebf7d96bfab3740dl9"</span>,</span><br><span class="line">element=<span class="string">"0.O9221O44O331256O3-3..&lt;selenium.webdriver.remote.webelement.WebElement</span></span><br><span class="line"><span class="string">(Session="</span>c26290835d4457ebf7d96bfab3740dl9<span class="string">", element="</span><span class="number">0.09221044033125603</span><span class="number">-16</span><span class="string">")&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                  这里简化了输出结果，中间部分省略。</span></span><br><span class="line"><span class="string">可以看到，得到的内容变成了列表类型，列表中的每个节点都是WebElement类型。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">也就是说，如果我们用find_element()方法，只能获取匹配的第一个节点，结果是WebElement类型。如果用 find_elements()方法，则结果是列表类型，列表中的每个节点是WebElement类型。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里列出所有获取多个节点的方法:</span><br><span class="line">find_elements_by_id</span><br><span class="line">find_elements_by_name</span><br><span class="line">find_elements_by_xpath</span><br><span class="line">find_elements_by_link_text</span><br><span class="line">find_elements_by_partial_link_text</span><br><span class="line">find_elements_by_tag_name</span><br><span class="line">find_elements_by_class_name</span><br><span class="line">find_elements_by_css_selector</span><br><span class="line"></span><br><span class="line">当然，我们也可以直接用find_elements()方法来选择，这时可以这样写：</span><br><span class="line">lis = browser.find_elements(By.CSS_SELECTOR, <span class="string">'.service-bd li'</span>)</span><br><span class="line"></span><br><span class="line">结果是完全一致的。</span><br></pre></td></tr></table></figure>

<h3 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selenium可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。比较常见</span><br><span class="line">的用法有：输入文字时用send_keys()方法，清空文字时用clear()方法，点击按钮时用click()方法。</span><br><span class="line">示例如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q‘)</span></span><br><span class="line"><span class="string">input.send_keys('</span>iPhone<span class="string">')</span></span><br><span class="line"><span class="string">time.sleep(l)</span></span><br><span class="line"><span class="string">input.clear()</span></span><br><span class="line"><span class="string">input.send_keys('</span>iPad<span class="string">')7.1 Selenium 的使用 255</span></span><br><span class="line"><span class="string">button = browser.find_element_by_class_name('</span>btn-search<span class="string">')</span></span><br><span class="line"><span class="string">button.click()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里首先驱动浏览器打开淘宝，然后用find_element_by_id()方法获取输入框，然后用 send_keys()方法输入iPhone文字，等待一秒后用clear()方法清空输入框，再次调用send_keys()方法输入 iPad文字，之后再用find_element_by_class_name()方法获取搜索按钮，最后调用click()方法完成搜索动作。</span><br><span class="line">通过上面的方法，我们就完成了一些常见节点的动作操作，更多的操作可以参见官方文档的交互动作介绍:http://selenium-python.readthedocs.io/api.html<span class="comment">#module-selenium.webdriver.remote.webelement。</span></span><br></pre></td></tr></table></figure>

<h3 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在上面的实例中，一些交互动作都是针对某个节点执行的。比如，对于输入框，我们就调用它的输入文字和清空文字方法；对于按钮，就调用它的点击方法。其实，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。</span><br><span class="line"></span><br><span class="line">比如，现在实现一个节点的拖曳操作，将某个节点从一处拖曳到另外一处，可以这样实现：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?f ilename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">首先，打开网页中的一个拖曳实例，然后依次选中要拖曳的节点和拖曳到的目标节点，接着声明Actionchains对象并将其赋值为actions变量，然后通过调用actions变量的drag_and_drop()方法，</span><br><span class="line">再调用perform()方法执行动作，此时就完成了拖曳操作</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">更 多 的 动 作 链 操 作 可 以 参 考 官 方 文 档 ： http://selenium-python.readthedocs.io/api.html<span class="comment">#moduleselenium.webdriver.common.actionchainso</span></span><br></pre></td></tr></table></figure>

<h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript,此时使用execute_script()方法即可实现，代码如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br><span class="line"></span><br><span class="line">这里就利用execute_script()方法将进度条下拉到最底部，然后弹出alert提示框。</span><br><span class="line">所以说有了这个方法，基本上API没有提供的所有功能都可以用执行JavaScript的方式来实现了。</span><br></pre></td></tr></table></figure>

<h3 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前面说过，通过page_source属性可以获取网页的源代码，接着就可以使用解析库(如正则表达式、Beautiful Soup、pyquery等)来提取信息了。</span><br><span class="line">不过，既然Selenium已经提供了选择节点的方法，返回的是 WebElement类型，那么它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样的话，我们就可以不用通过解析源代码来</span><br><span class="line">提取信息了，非常方便。</span><br><span class="line">接下来，就看看通过怎样的方式来获取节点信息吧。</span><br></pre></td></tr></table></figure>

<h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们可以使用g et_attribute()方法来获取节点的属性，但是其前提是先选中这个节点，示例如下:</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-1ink-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">p r i n t ( l o g o . g i b u t e ( <span class="string">'class'</span>))</span><br><span class="line">运行之后,程序便会驱动浏览器打开知乎页面，然后获取知乎的logo节点，最后打印出它的classo</span><br><span class="line">控制台的输出结果如下：</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (Session=<span class="string">"e08c0f28d7f44d75ccd50df6bb676104"</span>,</span><br><span class="line">element=<span class="string">"0.723639O66OO48155-1"</span>)&gt;</span><br><span class="line">zu-top-link-logo</span><br><span class="line">通 过 g et_ attribute()方法，然后传入想要获取的属性名，就可以得到它的值了。</span><br></pre></td></tr></table></figure>

<h4 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">每个WebElement节点都有text属性，直接调用这个属性就可以得到节点内部的文本信息，这相当于Beautiful Soup的get_text()方法、pyquery的text()方法，示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)<span class="number">7.1</span> Selenium 的使用 <span class="number">257</span></span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">prirrt(input.text)</span><br><span class="line"></span><br><span class="line">这里依然先打开知乎页面，然后获取“提问”按钮这个节点，再将其文本值打印出来。</span><br></pre></td></tr></table></figure>

<h4 id="获取id、位置、标签名和大小"><a href="#获取id、位置、标签名和大小" class="headerlink" title="获取id、位置、标签名和大小"></a>获取id、位置、标签名和大小</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外，WebElement节点还有一些其他属性，比如id属性可以获取节点id, location属性可以获取该节点在页面中的相对位置， tag_name属性可以获取标签名称，size属性可以获取节点的大小，也就是宽高，这些属性有时候还是很有用的。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>.selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">i叩ut = browser.find_element_by_class_name(<span class="string">'zu-top-mdd-question'</span>)</span><br><span class="line">print(i叩ut.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(i叩ut.tag_name)</span><br><span class="line">print(i叩ut.size)</span><br><span class="line">这里首先获得“提问”按钮这个节点，然后调用其id、location. tag_name、size属性来获取对应的属性值。</span><br></pre></td></tr></table></figure>

<h3 id="切换Frame"><a href="#切换Frame" class="headerlink" title="切换Frame"></a>切换Frame</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们知道网页中有一种节点叫作ifram e,也就是子 F ram e,相当于页面的子页面，它的结构和外</span><br><span class="line">部网页的结构完全一致。 Selenium打开页面后，它默认是在父级Frame里面操作，而此时如果页面中</span><br><span class="line">还有子Fram e,它是不能获取到子Frame里面的节点的。这时就需要使用switch_to.frame()方法来切</span><br><span class="line">换 Frame。 示例如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">	print(<span class="string">'NO LOGO'</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br><span class="line"></span><br><span class="line">控制台的输出如下：</span><br><span class="line">NO LOGO</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"4bb8ac03ced4ecbdefef03ffdc0e4ccd"</span>,element=<span class="string">"O.13792611320464965-2"</span>)&gt;</span><br><span class="line">RUN00B.C0M</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里还是以前面演示动作链操作的网页为实例，首先通过switch_to.frame()方法切换到子Frame</span><br><span class="line">里面，然后尝试获取父级Frame里的logo节点(这是不能找到的)，如果找不到的话，就会抛出</span><br><span class="line">NoSuchElementException异常，异常被捕捉之后，就会输出NO LOGO。 接下来，重新切换回父级Frame,然后再次重新获取节点，发现此时可以成功获取了。</span><br><span class="line">所以，当页面中包含子Frame时，如果想获取子Frame中的节点，需要先调用switch_to.frame()</span><br><span class="line">方法切换到对应的Frame,然后再进行操作。</span><br></pre></td></tr></table></figure>

<h3 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Selenium中，get()方法会在网页框架加载结束后结束执行，此时如果获取page_source,可能并不是浏览器完全加载完成的页面，如果某些页面有额外的Ajax请求 ，我们在网页源代码中也不一定能成功获取到。所以，这里需要延时等待一定时间，确保节点已经加载出来。</span><br><span class="line">这里等待的方式有两种：一种是隐式等待，一种是显式等待。</span><br></pre></td></tr></table></figure>

<h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当使用隐式等待执行测试的时候，如果Selenium没有在D0M中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。换句话说，当查找节点而节点并没有立即出现的时候，隐式等待将等待一段时间再查找DoM ,默认的时间是<span class="number">0</span>。示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">这里我们用implicitly_wait()方法实现了隐式等待。</span><br></pre></td></tr></table></figure>

<h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">隐式等待的效果其实并没有那么好，因为我们只规定了一个固定时间，而页面的加载时间会受到网络条件的影响。</span><br><span class="line">这里还有一种更合适的显式等待方法，它指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就返回查找的节点；如果到了规定时间依然没有加载出该节点，则抛出超时异常。示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input, button)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里首先引入WebDriverWait这个对象，指定最长等待时间，然后调用它的until()方法，传入要等待条件expected_conditionso比如，这里传入了 presence_of_element_located这个条件，代表节点出现的意思，其碁数是节点的定位元组，也就是ID为q的节点搜索框。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这样可以做到的效果就是，在<span class="number">10</span>秒内如果ID为q的节点(即搜索框)成功加载出来，就返回该节点；如果超过<span class="number">10</span>秒还没有加载出来，就抛出异常。</span><br><span class="line"></span><br><span class="line">对于按钮，可以更改一下等待条件，比如改为element_to_be_clickable, 也就是可点击，所以查找按钮时查找CSS选择器为.btn-search的按钮，如果<span class="number">10</span>秒内它是可点击的，也就是成功加载出来了，就返回这个按钮节点；如果超过<span class="number">10</span>秒还不可点击，也就是没有加载出来，就抛出异常。</span><br><span class="line"></span><br><span class="line">运行代码，在网速较佳的情况下是可以成功加载出来的。</span><br><span class="line"></span><br><span class="line">如果网络有问题，<span class="number">10</span>秒内没有成功加载，那就抛出Timeout Exception 异常</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关于等待条件，其实还有很多，比如判断标题内容，判断某个节点内是否出现了某文字等。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/qnDSCd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/21/qnDSCd.md.png" alt="qnDSCd.md.png"></a></p>
<p><a href="https://imgtu.com/i/qnDmCj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/21/qnDmCj.md.png" alt="qnDmCj.md.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关于更多等待条件的参数及用法，可以参考官方文档： http://selenium-python.readthedocs.io/</span><br><span class="line">api.html<span class="comment">#module-selenium.webdriver.support.expected_conditions</span></span><br></pre></td></tr></table></figure>

<h3 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">平常使用浏览器时都有前进和后退功能， Selenium也可以完成这个操作，它使用back()方法后退,</span><br><span class="line">使 用 forward()方法前进。示例如下：</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.org/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep⑴</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br><span class="line">这里我们连续访问<span class="number">3</span>个页面，然后调用 back()方法回到第二个页面，接下来再调用forward()方法又可以前进到第三个页面。</span><br></pre></td></tr></table></figure>

<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用Selenium,还可以方便地对Cookies进行操作，例如获取、添加、删除 Cookies等。示例如下:</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihii.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line"></span><br><span class="line">首先 ,我们访问了知乎。加载完成后,浏览器实际上已经生成Cookies 了。接着,调用get_cookies()方法获取所有的Cookieso然后，我们添加一个Cookie, 这里传入一个字典，有name、domain和 value等内容。接下来，再次获取所有的Cookieso 可以发现，结果就多了这一项新加的Cookieo最后，调用delete_all_cookies()方法删除所有的Cookies。再重新获取，发现结果就为空了。</span><br></pre></td></tr></table></figure>

<h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在访问网页的时候，会开启一个个选项卡。在 Selenium中，我们也可以对选项卡进行操作。示例如下：</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line"></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(l)</span><br><span class="line"></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://python.org'</span>)</span><br><span class="line"></span><br><span class="line">控制台的输出如下：</span><br><span class="line">[<span class="string">'CDwindow-4f58e3a7-7167-4587-bedf-9cd8c867f435'</span>, <span class="string">'CDwindow-6e05f076-6d77-453a-a36c-32baacc447df'</span>]</span><br><span class="line"></span><br><span class="line">首先访问了百度，然后调用了 execute_script()方法，这里传入window.open()这个JavaScript语句新开启一个选项卡。接下来，我们想切换到该选项卡。这里调用window_handles属性获取当前开启的所有选项卡，返回的是选项卡的代号列表。要想切换选项卡，只需要调用switch_to_window()方法即可，其中参数是选项卡的代号。</span><br><span class="line"></span><br><span class="line">这里我们将第二个选项卡代号传入，即跳转到第二个选项卡，接下</span><br><span class="line">来在第二个选项卡下打开一个新页面，然后切换回第一个选项卡重新调用switch_to_window()方法，</span><br><span class="line">再执行其他操作即可。</span><br></pre></td></tr></table></figure>

<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在使用Selenium的过程中，难免会遇到一些异常，例如超时、节点未找到等错误，一旦岀现此类错误，程序便不会继续运行了。这里我们可以使用<span class="keyword">try</span> <span class="keyword">except</span>语句来捕获各种异常。</span><br><span class="line">首先，演示一下节点未找到的异常，示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line">这里首先打开百度页面，然后尝试选择一个并不存在的节点，此时就会遇到异常。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以看到，这里抛出了NoSuchElementException异常，这通常是节点未找到的异常。为了防止程序遇到异常而中断，我们需要捕获这些异常，示例如下：</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException, NoSuchElementException</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">	print(<span class="string">'Time Out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'No Element'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	browser.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们使用<span class="keyword">try</span> <span class="keyword">except</span>来捕获各类异常。比如，我们对find_element_by_id( )查找节点的方法捕获 NoSuchElementException异常，这样一旦出现这样的错误，就进行异常处理，程序也不会中断了。</span><br><span class="line">控制台的输出如下：</span><br><span class="line">No Element</span><br><span class="line">关于更多的异常类，可以参考官方文档：http://selenium-python.readthedocs.io/api.html<span class="comment">#moduleselenium.common.exceptions。</span></span><br><span class="line">现在，我们基本对Selenium的常规用法有了大体的了解。使用S elenium ,处理JavaScript不再是难事。</span><br></pre></td></tr></table></figure>

<h2 id="Splash的使用"><a href="#Splash的使用" class="headerlink" title="Splash的使用"></a>Splash的使用</h2><h2 id="Splash负载均衡配置"><a href="#Splash负载均衡配置" class="headerlink" title="Splash负载均衡配置"></a>Splash负载均衡配置</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫 动态渲染页面爬取-Splash</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-7%E7%AB%A0(7.2)%20%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%88%AC%E5%8F%96-Splash.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="动态渲染页面爬取-Splash"><a href="#动态渲染页面爬取-Splash" class="headerlink" title="动态渲染页面爬取-Splash"></a>动态渲染页面爬取-Splash</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Splash是一个JavaScript渲染服务，是一个带有HTTPAPI的轻量级浏览器，同时它对接了Python中的Twisted和 Q T 库。利用它，我们同样可以实现动态渲染页面的抓取。</span><br></pre></td></tr></table></figure>

<h2 id="Splash启动命令"><a href="#Splash启动命令" class="headerlink" title="Splash启动命令"></a>Splash启动命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">8050</span>:<span class="number">8050</span> scrapinghub/splash</span><br></pre></td></tr></table></figure>

<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">利用Splash,我们可以实现如下功能：</span><br><span class="line">□ 异步方式处理多个网页渲染过程；</span><br><span class="line">□ 获取渲染后的页面的源代码或截图；</span><br><span class="line">□ 通过关闭图片渲染或者使用Adblock规则来加快页面渲染速度；</span><br><span class="line">□ 可执行特定的JavaScript脚本；</span><br><span class="line">□ 可通过Lua脚本来控制页面渲染过程；</span><br><span class="line">□ 获取渲染的详细过程并通过HAR (HTTP Archive)格式呈现。</span><br></pre></td></tr></table></figure>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在开始之前，请确保已经正确安装好了 Splash并可以正常运行服务。</span><br></pre></td></tr></table></figure>

<h2 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先，通过Splash提供的Web页面来测试其渲染过程。例如，我们在本机<span class="number">8050</span>端口上运行了 Splash服务，打开http://localhost:<span class="number">8050</span>/即可看到其Web页面</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在图<span class="number">7</span><span class="number">-6</span>右侧，呈现的是一个渲染示例。可以看到，上方有一个输入框，默认是http://google.com,这里换成百度测试一下，将内容更改为https://www.baidu.com, 然后点击Render me按钮开始渲染</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以看到，网页的返回结果呈现了渲染截图、 HAR加载统计数据、网页的源代码。</span><br><span class="line">通过HAR的结果可以看到，Splash执行了整个网页的渲染过程，包括 CSS、JavaScript的加载等过程，呈现的页面和我们在浏览器中得到的结果完全一致。</span><br><span class="line">那么，这个过程由什么来控制呢？重新返回首页，可以看到实际上是有一段脚本，内容如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line"><span class="keyword">assert</span>(splash:go(args.url))</span><br><span class="line"><span class="keyword">assert</span>(splash:wait(<span class="number">0.5</span>))</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">html = splash:html(),</span><br><span class="line">png = splash:png(),</span><br><span class="line">har = splash:har(),</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">这个脚本实际上是用Lua语言写的脚本。即使不懂这个语言的语法，但从脚本的表面意思，我们也可以大致了解到它首先调用go()方法去加载页面，然后调用wait()方法等待了一定时间，最后返回了页面的源码、截 图和HAR信息。</span><br><span class="line"></span><br><span class="line">到这里，我们大体了解了Splash是通过Lua脚本来控制了页面的加载过程的，加载过程完全模拟浏览器，最后可返回各种格式的结果，如网页源码和截图等。</span><br><span class="line"></span><br><span class="line">接下来，我们就来了解Lua脚本的写法以及相关API的用法。</span><br></pre></td></tr></table></figure>

<h2 id="Splash-Lua-脚本"><a href="#Splash-Lua-脚本" class="headerlink" title="Splash Lua 脚本"></a>Splash Lua 脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Splash可以通过Lua脚本执行一系列渲染操作，这样我们就可以用Splash来模拟类似Chrome、PhantomJS 的操作了。</span><br><span class="line">首先，我们来了解一下Splash Lua脚本的入口和执行方式。</span><br></pre></td></tr></table></figure>

<h3 id="入口及返回值"><a href="#入口及返回值" class="headerlink" title="入口及返回值"></a>入口及返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先，来看一个基本实例：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash:go(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">	splash:wait(<span class="number">0.5</span>)</span><br><span class="line">	local titie = splash:evaljs(<span class="string">"document.title"</span>)</span><br><span class="line">	<span class="keyword">return</span> &#123;title=title&#125;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">我们将代码粘贴到刚才打开的http://localhost:<span class="number">8050</span>/的代码编辑区域，然后点击Render me!按钮来测试一下。</span><br><span class="line">我们看到它返回了网页的标题，如图<span class="number">7</span><span class="number">-8</span>所示。这里我们通过evaljs()方法传入JavaScript脚本,而document.title的执行结果就是返回网页标题，执行完毕后将其赋值给一个title变量，随后将其返回。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意，我们在这里定义的方法名称叫作main()<span class="number">0</span> 这个名称必须是固定的， Splash会默认调用这个方法。</span><br><span class="line">该方法的返回值既可以是字典形式，也可以是字符串形式，最后都会转化为Splash HTTP Response, </span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">function main(splash)</span><br><span class="line"><span class="keyword">return</span> &#123;hello=<span class="string">"world!"</span>&#125;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">返回了一个字典形式的内容。例如：</span><br><span class="line">function main(splash)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">end</span><br><span class="line">返回了一个字符串形式的内容。</span><br></pre></td></tr></table></figure>

<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Splash支持异步处理，但是这里并没有显式指明回调方法，其回调的跳转是在Splash内部完成的。</span><br><span class="line">示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local example_urls = &#123;<span class="string">"www.baidu.com"</span>, <span class="string">"www.taobao.com"</span>, <span class="string">"www.zhihu.com"</span>&#125;</span><br><span class="line">	local urls = args.urls <span class="keyword">or</span> example_urls</span><br><span class="line">	local results = &#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> index, url <span class="keyword">in</span> ipairs(urls) do</span><br><span class="line">		local ok, reason = splash:go(<span class="string">"http://"</span> .. url)</span><br><span class="line">		<span class="keyword">if</span> ok then</span><br><span class="line">			splash:wait(<span class="number">2</span>)</span><br><span class="line">			results[url] = splash:png()</span><br><span class="line">		end</span><br><span class="line">	end</span><br><span class="line">	<span class="keyword">return</span> results</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行结果是<span class="number">3</span> 个站点的截图</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在脚本内调用的wait()方法类似于Python中的 sleep(), 其参数为等待的秒数。当 Splash执行到此方法时，它会转而去处理其他任务，然后在指定的时间过后再回来继续处理。</span><br><span class="line">这里值得注意的是，Lua脚本中的字符串拼接和Python不同，它使用的是..操作符，而不是+。</span><br><span class="line">如果有必要，可以简单了解一下Lua脚本的语法，详见 http://www.runoob.com/lua/lua-basic-syntax.htmL</span><br><span class="line">另外，这里做了加载时的异常检测。 go()方法会返回加载页面的结果状态，如果页面出现<span class="number">4</span>xx或<span class="number">5</span>xx状态码，ok变量就为空，就不会返回加载后的图片。</span><br></pre></td></tr></table></figure>

<h2 id="Splash对象属性"><a href="#Splash对象属性" class="headerlink" title="Splash对象属性"></a>Splash对象属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们注意到，前面例子中main()方法的第一个参数是 splash,这个对象非常重要，它类似于Selenium中的WebDriver对象，我们可以调用它的一些属性和方法来控制加载过程。接下来，先看下它的属性。</span><br></pre></td></tr></table></figure>

<h3 id="args"><a href="#args" class="headerlink" title="args"></a>args</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该属性可以获取加载时配置的参数，比如URL,如果为GET请求，它还可以获取GET请求参数;</span><br><span class="line">如果为POST请求，它可以获取表单提交的数据。Splash也支持使用第二个参数直接作为args ,例如:</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local url = args.url</span><br><span class="line">end</span><br><span class="line">这里第二个参数args就相当于splash.args属性，以上代码等价于:</span><br><span class="line">function main(splash)</span><br><span class="line">	local url = splash.args.url</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="js-enabled"><a href="#js-enabled" class="headerlink" title="js_enabled"></a>js_enabled</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  这个属性是Splash的JavaScript执行开关，可以将其配置为true或false来控制是否执行JavaScript代码，默 认 为tru eo 例如，这里禁止执行JavaScript代码：</span><br><span class="line">function main(splash, args)</span><br><span class="line">    splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    splash.js_enabled = false</span><br><span class="line">    local titie = splash:evaljs(<span class="string">"document.title"</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;title=title&#125;</span><br><span class="line">end</span><br><span class="line">接着我们重新调用了 ev aljs()方法执行JavaScript代 码 ，此时运行结果就会抛出异常</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不过一般来说，不用设置此属性，默认开启即可。</span><br></pre></td></tr></table></figure>

<h3 id="resource-timeout"><a href="#resource-timeout" class="headerlink" title="resource_timeout"></a>resource_timeout</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此属性可以设置加载的超时时间，单位是秒。如果设置为<span class="number">0</span>或nil(类似Python中的<span class="literal">None</span> ), 代表不检测超时。示例如下：</span><br><span class="line">function main(splmsh)</span><br><span class="line">	splash.resource_timeout = <span class="number">0.1</span></span><br><span class="line">	<span class="keyword">assert</span>(splash:go(<span class="string">'ht tps://www.taobao.corrT))</span></span><br><span class="line"><span class="string">	return splash:png()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">例如，这里将超时时间设置为0.1秒。如果在0.1秒之内没有得到响应，就会抛出异常，错误如下：</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"error": 400,</span></span><br><span class="line"><span class="string">"type": "ScriptError",</span></span><br><span class="line"><span class="string">"info": &#123;</span></span><br><span class="line"><span class="string">"error": "networks",</span></span><br><span class="line"><span class="string">"type": "LUA_ERROR",</span></span><br><span class="line"><span class="string">"line_number": 3,</span></span><br><span class="line"><span class="string">"source": "[string \"function main(splash)\r..A"]",</span></span><br><span class="line"><span class="string">"message": "Lua error: [string \"function main(splash)\r. . . : 3 ： networks"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"description": "Error happened while executing Lua script"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">此属性适合在网页加载速度较慢的情况下设置。如果超过了某个时间无响应，则直接抛出异常并忽略即可。</span></span><br></pre></td></tr></table></figure>

<h3 id="images-enabled"><a href="#images-enabled" class="headerlink" title="images_enabled"></a>images_enabled</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此属性可以设置图片是否加载，默认情况下是加载的。禁用该属性后，可以节省网络流量并提高网页加载速度。</span><br><span class="line">但是需要注意的是，禁用图片加载可能会影响JavaScript渲染。因为禁用图片之后，它的外层DOM节点的高度会受影响，进而影响DOM节点的位置。因此，如果 JavaScript对图片节点有操作的话，其执行就会受到影响。</span><br><span class="line">另外值得注意的是，Splash使用了缓存。如果一开始加载出来了网页图片，然后禁用了图片加载,再重新加载页面，之前加载好的图片可能还会显示出来，这时直接重启Splash即可。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">禁用图片加载的示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash.images_enabled = false</span><br><span class="line">	<span class="keyword">assert</span>(splash:go(<span class="string">'https://www.jd.com'</span>))</span><br><span class="line">	<span class="keyword">return</span> &#123;png=splash:png()&#125;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">这样返回的页面截图就不会带有任何图片，加载速度也会快很多</span><br></pre></td></tr></table></figure>

<h3 id="plugins-enabled"><a href="#plugins-enabled" class="headerlink" title="plugins_enabled"></a>plugins_enabled</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此属性可以控制浏览器插件(如Flash插件)是否开启。默认情况下，此属性是false, 表示不开启。可以使用如下代码控制其开启和关闭：</span><br><span class="line"></span><br><span class="line">splash.plugins_enabled = true/false</span><br></pre></td></tr></table></figure>

<h3 id="scroll-position"><a href="#scroll-position" class="headerlink" title="scroll_position"></a>scroll_position</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过设置此属性，我们可以控制页面上下或左右滚动。这是一个比较常用的属性，示例如下：</span><br><span class="line">function mmin(splash, args)</span><br><span class="line">	<span class="keyword">assert</span>(splash:go(<span class="string">'https://www.taobao.com'</span>))</span><br><span class="line">	splash.scroll_position = &#123;y=<span class="number">400</span>&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;png=splash:png()&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这样我们就可以控制页面向下滚动<span class="number">400</span>像素值</span><br><span class="line"></span><br><span class="line">如果要让页面左右滚动，可以传入x参数 ，代码如下：</span><br><span class="line">splash.scroll_position = &#123;x=<span class="number">100</span>, y=<span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Splash对象的方法"><a href="#Splash对象的方法" class="headerlink" title="Splash对象的方法"></a>Splash对象的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">除了前面介绍的属性外， Splash对象还有如下方法</span><br></pre></td></tr></table></figure>

<h3 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该方法用来请求某个链接，而且它可以模拟GET和POST请求，同时支持传入请求头、表单等数据，其用法如下：</span><br><span class="line">ok, reason = splash:go&#123;url, baseurl=nil, headers=nil, http_method=<span class="string">"GET"</span>, body=nil, formdata=nil&#125;</span><br><span class="line">其参数说明如下。</span><br><span class="line">□ url：请求的URL。</span><br><span class="line">□ baseurl：可选参数，默认为空，表示资源加载相对路径。</span><br><span class="line">□ headers：可选参数，默认为空，表示请求头。</span><br><span class="line">□ http_method：可选参数，默认为GET ,同时支持POST。</span><br><span class="line">□ body：可选参数，默认为空，发 POST请求时的表单数据，使用的Content-type为 application/json</span><br><span class="line">□ formdata：可选参数，默认为空， POST的时候的表单数据，使用的Content-type为application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该方法的返回结果是结果ok和原因reason的组合，如果ok为空，代表网页加载出现了错误，此时reason变量中包含了错误的原因，否则证明页面加载成功。示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local ok, reason = splash:go&#123;<span class="string">"http://httpbin.org/post"</span>, http_method=<span class="string">"POST"</span>, body=<span class="string">"name=Germey"</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> ok then</span><br><span class="line">		<span class="keyword">return</span> splash:html()</span><br><span class="line">	end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们模拟了一个POST请求，并传入了POST的表单数据，如果成功，则返回页面的源代码。</span><br></pre></td></tr></table></figure>

<h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以控制页面的等待时间，使用方法如下：</span><br><span class="line">ok, reason = splash:wait&#123;time, cancel_on_redirect=false, cancel_on_error=true&#125;</span><br><span class="line">参数说明如下。</span><br><span class="line">□ time：等待的秒数。</span><br><span class="line">□ cancel_on_redirect: 可选参数，默认为false, 表示如果发生了重定向就停止等待，并返回重定向结果。</span><br><span class="line">□ cancel_on_error：可选参数，默认为false, 表示如果发生了加载错误，就停止等待。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">返回结果同样是结果ok和原因reason的组合。</span><br><span class="line">我们用一个实例感受一下：</span><br><span class="line">function main(splash)</span><br><span class="line">	splash:go(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">	splash:wait(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">return</span> &#123;html=splash:html()&#125;</span><br><span class="line">end</span><br><span class="line">这可以实现访问淘宝并等待<span class="number">2</span>秒，随后返回页面源代码的功能</span><br></pre></td></tr></table></figure>

<h3 id="jsfunc"><a href="#jsfunc" class="headerlink" title="jsfunc()"></a>jsfunc()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以直接调用JavaScript定义的方法，但是所调用的方法需要用双中括号包围，这相当于实现了JavaScript方法到Lua脚本的转换。示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local get_div_count = splash:jsfunc([[</span><br><span class="line">	function () &#123;</span><br><span class="line">		var body = document.body;</span><br><span class="line">		var divs = body.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line">		<span class="keyword">return</span> divs.length;</span><br><span class="line">    &#125;</span><br><span class="line">	]])</span><br><span class="line">	splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">	<span class="keyword">return</span> (<span class="string">"There are %s DIVs"</span>):format(</span><br><span class="line">		get_div_count())</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行结果如下：</span><br><span class="line">There are <span class="number">21</span> DIVs</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先，我们声明了一个JavaScript定义的方法，然后在页面加载成功后调用了此方法计算出了页面中div节点的个数。</span><br><span class="line">关于JavaScript到 Lua脚本的更多转换细节，可以参考官方文档： https://splash.readthedocs.io/en/stable/scripting・ref.html<span class="comment">#splash-jsfunc</span></span><br></pre></td></tr></table></figure>

<h3 id="evaljs"><a href="#evaljs" class="headerlink" title="evaljs()"></a>evaljs()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以执行JavaScript代码并返回最后一条JavaScript语句的返回结果，使用方法如下：</span><br><span class="line">result = splash:evaljs(js)</span><br><span class="line">比如，可以用下面的代码来获取页面标题：</span><br><span class="line">local title = splash:evaljs(<span class="string">"document.title"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="runjs"><a href="#runjs" class="headerlink" title="runjs()"></a>runjs()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以执行JavaScript代码，它与evaljs()的功能类似，但是更偏向于执行某些动作或声明某些方法。例如：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">	splash:runjs(<span class="string">"foo = function() &#123; return 'bar' &#125;"</span>)</span><br><span class="line">	local result = splash:evaljs(<span class="string">"foo()H )</span></span><br><span class="line"><span class="string">	return result</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里我们用runjs()先声明了一个JavaScript定义的方法，然后通过evaljs()来调用得到的结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">运行结果如下：</span></span><br><span class="line"><span class="string">bar</span></span><br></pre></td></tr></table></figure>

<h3 id="autoload"><a href="#autoload" class="headerlink" title="autoload()"></a>autoload()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以设置每个页面访问时自动加载的对象，使用方法如下：</span><br><span class="line">ok, reason = splash:autoload&#123;source_or_url, source=nil, url=nil&#125;</span><br><span class="line">    </span><br><span class="line">参数说明如下。</span><br><span class="line">□ source_or_url: JavaScript代码或者 JavaScript库链接。</span><br><span class="line">□ source: JavaScript 代码。</span><br><span class="line">□ url：JavaScript 库链接</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是此方法只负责加载JavaScript代码或库，不执行任何操作。如果要执行操作，可以调用evaljs()或runjs()方法。示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash:autoload([[</span><br><span class="line">		function get_document_title()&#123;</span><br><span class="line">			<span class="keyword">return</span> document.title;</span><br><span class="line">		&#125;</span><br><span class="line">	]])</span><br><span class="line">	splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:evaljs(<span class="string">"get_document_title()"</span>)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们调用autoload()方法声明了一个JavaScript方法，然后通过 evaljs()方法来执行此JavaScript方法。</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">百度一下，你就知道</span><br><span class="line"></span><br><span class="line">另外，我们也可以使用autoload。方法加载某些方法库，如jQuery ,示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	<span class="keyword">assert</span>(splash:autoload(<span class="string">"https://code.jquery.eom/jquery-2.l.3.min.js"</span>))</span><br><span class="line">	<span class="keyword">assert</span>(splash:go(<span class="string">"https://www.taobao.com"</span>))</span><br><span class="line">	local version = splash:evaljs(<span class="string">"$.fn.jquery"</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'JOuery version: '</span> .. version</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">JQuery version: <span class="number">2.1</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<h3 id="call-later"><a href="#call-later" class="headerlink" title="call_ later()"></a>call_ later()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以通过设置定时任务和延迟时间来实现任务延时执行，并且可以在执行前通过cancel()方法重新执行定时任务。示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local snapshots = &#123;&#125;</span><br><span class="line">	local timer = splash:call_later(function()</span><br><span class="line">		snapshots[<span class="string">"a"</span>J = splash:png()</span><br><span class="line">		splash:wait(<span class="number">1.0</span>)</span><br><span class="line">		snapshots[<span class="string">"b"</span>] = splash:png()</span><br><span class="line">	end, <span class="number">0.2</span>)</span><br><span class="line">	splash:go(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">	splash:wait(<span class="number">3.0</span>)</span><br><span class="line">	<span class="keyword">return</span> snapshots</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们设置了一个定时任务，<span class="number">0.2</span>秒的时候获取网页截图，然后等待<span class="number">1</span>秒，<span class="number">1.2</span>秒时再次获取网页截图，访问的页面是淘宝，最后将截图结果返回。</span><br></pre></td></tr></table></figure>

<h3 id="http-get"><a href="#http-get" class="headerlink" title="http_get()"></a>http_get()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以模拟发送HTTP的GET请求，使用方法如下：</span><br><span class="line">response = splash:http_get&#123;url, headers=nil, follow_redirects=true&#125;</span><br><span class="line"></span><br><span class="line">参数说明如下。</span><br><span class="line">□ url：请求URL。</span><br><span class="line">□ headers: 可选参数，默认为空，请求头。</span><br><span class="line">□ follow_redirects ：可选参数，表示是否启动自动重定向，默认为true。</span><br><span class="line"></span><br><span class="line">示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	local treat = require(<span class="string">"treat"</span>)</span><br><span class="line">	local response = splash:http_get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			html=treat.as_string(response.body),</span><br><span class="line">			url=response.url,</span><br><span class="line">			status=response.status</span><br><span class="line">		&#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行结果如下： ’</span><br><span class="line">Splash Response: Object</span><br><span class="line">html: String (length <span class="number">355</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"args"</span>: &#123;&#125;,</span><br><span class="line"><span class="string">"headers"</span>: &#123;</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"en,*"</span>,</span><br><span class="line"><span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Xll; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) splash Version/9.0</span></span><br><span class="line"><span class="string">Safari/602.1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"origin"</span>: <span class="string">"60.207.237.85"</span>,</span><br><span class="line"><span class="string">"url"</span>: <span class="string">"http://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">status: <span class="number">200</span></span><br><span class="line">url: <span class="string">"http://httpbin.org/get"</span></span><br></pre></td></tr></table></figure>

<h3 id="http-post"><a href="#http-post" class="headerlink" title="http_post()"></a>http_post()</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">和http_get()方法类似，此方法用来模拟发送POST请求，不过多了一个参数bod y, 使用方法如下:</span><br><span class="line">response = splash:http_post&#123;url, headers=<span class="literal">nil</span>, follow_redirects=<span class="literal">true</span>, body=<span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">参数说明如下。</span><br><span class="line">□ url：请求URL</span><br><span class="line">□ headers: 可选参数，默认为空，请求头。</span><br><span class="line">□ follow_redirects : 可选参数，表示是否启动自动重定向，默认为<span class="literal">true</span></span><br><span class="line">□ body：可选参数，即表单数据，默认为空。</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">我们用实例感受一下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	<span class="keyword">local</span> treat = <span class="built_in">require</span>(<span class="string">"treat"</span>)</span><br><span class="line">	<span class="keyword">local</span> json = <span class="built_in">require</span>(<span class="string">"json"</span>)</span><br><span class="line">	<span class="keyword">local</span> response = 		splash:http_post&#123;<span class="string">"http://httpbin.org/post"</span>,</span><br><span class="line">body=json.encode(&#123;name=<span class="string">"Germey"</span>&#125;),</span><br><span class="line">headers=&#123;[<span class="string">"content-type"</span>]=<span class="string">"application/json"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">html=treat.as_string(response.body),</span><br><span class="line">url=response.url,</span><br><span class="line"><span class="built_in">status</span>=response.<span class="built_in">status</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">Splash Response: Object</span><br><span class="line">html: String (length <span class="number">533</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"args"</span>：&#123;&#125;,</span><br><span class="line"><span class="string">"data"</span>: <span class="string">"&#123;\"name\": \HGermeyX"</span>&#125;<span class="string">",</span></span><br><span class="line"><span class="string">"</span>files<span class="string">": &#123;&#125;,</span></span><br><span class="line"><span class="string">"</span>form1<span class="string">': &#123;&#125;,</span></span><br><span class="line"><span class="string">"headers": &#123;</span></span><br><span class="line"><span class="string">"Accept-Encoding": "gzip, deflate",</span></span><br><span class="line"><span class="string">"Accept-Language": "en,*",</span></span><br><span class="line"><span class="string">"Connection": "close",</span></span><br><span class="line"><span class="string">"Content-Length": "18",</span></span><br><span class="line"><span class="string">"Content-Type": "application/json",</span></span><br><span class="line"><span class="string">"Host": "httpbin.org",</span></span><br><span class="line"><span class="string">"User-Agent": "Mozilla/5.0 (Xll; Linux x86_64) AppleWebKit/602.1 (KHTML, like Gecko) splash Version/9.0</span></span><br><span class="line"><span class="string">Safari/602.1"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"json": &#123;</span></span><br><span class="line"><span class="string">"name": "Germey"</span></span><br><span class="line"><span class="string">"origin": "60.207.237.85",</span></span><br><span class="line"><span class="string">"url": "http://httpbin.org/post"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">status: 200</span></span><br><span class="line"><span class="string">url: "http://httpbin.org/post"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以看到，这里我们成功模拟提交了POST请求并发送了表单数据。</span></span><br></pre></td></tr></table></figure>

<h3 id="set-content"><a href="#set-content" class="headerlink" title="set_content()"></a>set_content()</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法用来设置页面的内容，示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">	<span class="built_in">assert</span> (splash:set_content(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;hl&gt;hello&lt;/hl&gt;&lt;/bodyx/html&gt;"</span>))</span><br><span class="line">	<span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法用来获取网页的源代码，它是非常简单又常用的方法。示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash:go(<span class="string">"https://httpbin.org/get"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:html()</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="png"><a href="#png" class="headerlink" title="png()"></a>png()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法用来获取PNG格式的网页截图，示例如下：</span><br><span class="line">function main(splash, args)</span><br><span class="line">	splash:go(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:png()</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="jpeg"><a href="#jpeg" class="headerlink" title="jpeg()"></a>jpeg()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法用来获取JPEG格式的网页截图，示例如下:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	splash:go(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:jpeg()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="har"><a href="#har" class="headerlink" title="har()"></a>har()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法用来获取页面加载过程描述，示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">	splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:har()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="url"><a href="#url" class="headerlink" title="url()"></a>url()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以获取当前正在访问的URL ,示例如下:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">return</span> splash:url()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">运行结果如下：</span><br><span class="line">https://www.baidu.com/</span><br></pre></td></tr></table></figure>

<h2 id="get-cookies"><a href="#get-cookies" class="headerlink" title="get_cookies()"></a>get_cookies()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以获取当前页面的Cookies,示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash, args)</span></span></span><br><span class="line">splash:go(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">return</span> splash:get_cookies()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="add-cookies"><a href="#add-cookies" class="headerlink" title="add_cookies()"></a>add_cookies()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以为当前页面添加C ookie,用法如下：</span><br><span class="line">cookies = splash:add_cookie&#123;name, value, <span class="built_in">path</span>=<span class="literal">nil</span>, domain=<span class="literal">nil</span>, expires=<span class="literal">nil</span>, httpOnly=<span class="literal">nil</span>, secure=<span class="literal">nil</span>&#125;</span><br><span class="line">该方法的各个参数代表Cookie的各个属性。</span><br><span class="line">示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">splash:add_cookie&#123;<span class="string">"sessionid"</span>, <span class="string">"237465ghgfsd"</span>, domain=<span class="string">"http://example.com"</span>&#125;</span><br><span class="line">splash:go(<span class="string">"http://example.com/"</span>)</span><br><span class="line"><span class="keyword">return</span> splash:html()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h2 id="clear-cookies"><a href="#clear-cookies" class="headerlink" title="clear_cookies()"></a>clear_cookies()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以清除所有的Cookies,示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">	splash:go(<span class="string">"https://www.baidu. com/'1)</span></span><br><span class="line"><span class="string">	splash:clear_cookies()</span></span><br><span class="line"><span class="string">	return splash:get_cookies()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里我们清除了所有的C ookies,然后调用get_cookies()将结果返回。</span></span><br><span class="line"><span class="string">运行结果如下：</span></span><br><span class="line"><span class="string">Splash Response: Array[O]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以看到，Cookies被全部清空，没有任何结果。</span></span><br></pre></td></tr></table></figure>

<h2 id="get-viewport-size"><a href="#get-viewport-size" class="headerlink" title="get_viewport_size()"></a>get_viewport_size()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此方法可以获取当前浏览器页面的大小，即宽高，示例如下：</span><br><span class="line">function main(splash)</span><br><span class="line">	splash:go(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">	<span class="keyword">return</span> splash:get_viewport_size()</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行结果如下：</span><br><span class="line">Splash Response: Array[<span class="number">2</span>]</span><br><span class="line"><span class="number">0</span>: <span class="number">1024</span></span><br><span class="line"><span class="number">1</span>: <span class="number">768</span></span><br></pre></td></tr></table></figure>

<h2 id="set-viewport-size"><a href="#set-viewport-size" class="headerlink" title="set_viewport_size()"></a>set_viewport_size()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以设置当前浏览器页面的大小，即宽高，用法如下:</span><br><span class="line">splash:set_viewport_size(width, height)</span><br><span class="line">例如，这里访问一个宽度自适应的页面：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">	splash:set_viewport_size(<span class="number">400</span>, <span class="number">700</span>)</span><br><span class="line">	<span class="built_in">assert</span>(splash:go(<span class="string">"https://cuiqingcai.com"</span>))</span><br><span class="line">	<span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="set-viewport-full"><a href="#set-viewport-full" class="headerlink" title="set_viewport_full()"></a>set_viewport_full()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以设置浏览器全屏显示，示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">splash:set_viewport_full()</span><br><span class="line"><span class="built_in">assert</span>(splash:go(<span class="string">"https://cuiqingcai.com"</span>))</span><br><span class="line"><span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="set-user-agent"><a href="#set-user-agent" class="headerlink" title="set_user_agent()"></a>set_user_agent()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以设置浏览器的User-Agent,示例如下：</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">		splash:set_user_agent(<span class="string">'Splash'</span> )</span><br><span class="line">		splash:go(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">    	<span class="keyword">return</span> splash:html()</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">这里我们将浏览器的User-Agent设置 为 S p la s</span><br></pre></td></tr></table></figure>

<h2 id="set-custom-headers"><a href="#set-custom-headers" class="headerlink" title="set_custom_headers()"></a>set_custom_headers()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以设置请求头，示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">splash:set_custom_headers(&#123;</span><br><span class="line">[<span class="string">"User-Agent"</span>] = <span class="string">"Splash"</span>,</span><br><span class="line">[<span class="string">"S ite "</span>] = <span class="string">"Splash"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">splash:go(<span class="string">"h ttp ://h ttp b in .org/get"</span> )</span><br><span class="line"><span class="keyword">return</span> splash:htm l()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">这里我们设置了请求头中的User-Agent和 S ite 属 性 ， 运行结果如下：</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;bodyxpre style=<span class="string">"word-wrap: break-word; white-space: pre-wrap;"</span>&gt;&#123;</span><br><span class="line"><span class="string">"args"</span>: &#123; &#125; ,</span><br><span class="line"><span class="string">"headers"</span>: &#123;</span><br><span class="line"><span class="string">"Accept"</span> : <span class="string">"text/htm l,application/xhtm l+xm l,application/xm l;q=0.9,*/*；q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, defla te "</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"en,*"</span>,</span><br><span class="line"><span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"h ttpbin.org"</span>,</span><br><span class="line"><span class="string">"S ite "</span>: <span class="string">"Splash"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Splash"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"o rig in "</span>: <span class="string">"60.207.237.85"</span>,</span><br><span class="line"><span class="string">" u r l"</span> : <span class="string">"h ttp ://h ttp b in .o rg /g e t"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/prex/bodyx/htm l&gt;</span><br></pre></td></tr></table></figure>

<h2 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">该方法可以选中符合条件的第一个节点，如果有多个节点符合条件，则只会返回一个，其参数是css选择器。示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">splash:go(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">i叩ut = splash:<span class="built_in">select</span>(<span class="string">"#kw"</span>)</span><br><span class="line"><span class="built_in">input</span>:send_text(<span class="string">'Splash'</span>)</span><br><span class="line">splash:wait(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">这里我们首先访问了百度，然后选中了搜索框，随后调用了 send_text()方法填写了文本，然后返回网页截图。</span><br></pre></td></tr></table></figure>

<h2 id="select-all"><a href="#select-all" class="headerlink" title="select_all()"></a>select_all()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以选中所有符合条件的节点，其参数是CSS选择器。示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line"><span class="keyword">local</span> treat = <span class="built_in">require</span>(<span class="string">'trea</span></span><br><span class="line"><span class="string">assert(splash:go("http://quotes.toscrape.com/"))</span></span><br><span class="line"><span class="string">assert(splash:wait(0.5))</span></span><br><span class="line"><span class="string">local texts = s p l a s h : s e l e c . q u o t e .text'</span>)</span><br><span class="line"><span class="keyword">local</span> results = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> index, text <span class="keyword">in</span> <span class="built_in">ipairs</span>(texts) <span class="keyword">do</span></span><br><span class="line">results[index] = text.node.innerHTML</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">:<span class="keyword">return</span> treat.as_array(resuIts)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">这里我们通过css选择器选中了节点的正文内容，随后遍历了所有节点,将其中的文本获取下来。</span><br><span class="line"></span><br><span class="line">Splash Response: Array[<span class="number">10</span>]</span><br><span class="line"><span class="number">0</span>: <span class="string">""</span>The world as we have created it is a process of our thinking. It cannot be changed without changing our</span><br><span class="line">thinking.”<span class="string">"</span></span><br><span class="line"><span class="string">1: "</span><span class="string">"It is our choices, Harry, that show what we truly are, far more than our abilities.w "</span></span><br><span class="line"><span class="number">2</span>: <span class="string">"There are only two ways to live your life. One is as though nothing is a miracle. The other is as though</span></span><br><span class="line"><span class="string">everything is a miracle.w</span></span><br><span class="line"><span class="string">3 ： "</span><span class="string">"The person, be it gentleman or lady, who has not pleasure in a good novel, must be intolerably stupid."</span><span class="string">"</span></span><br><span class="line"><span class="string">4 ： "</span>w Imperfection is beauty, madness is genius <span class="keyword">and</span> it<span class="string">'s better to be absolutely ridiculous than absolutely</span></span><br><span class="line"><span class="string">boring.w "</span></span><br><span class="line"><span class="string">5 ： ""Try not to become a man of success. Rather become a man of value/1"</span></span><br><span class="line"><span class="string">6: ""It is better to be hated for what you are than to be loved for what you are not.""</span></span><br><span class="line"><span class="string">7 ： "W I have not failed. I'</span>ve just found <span class="number">10</span>,<span class="number">000</span> ways that won<span class="string">'t work.""</span></span><br><span class="line"><span class="string">8: ""A woman is like a tea bag; you never know how strong it is until it'</span>s <span class="keyword">in</span> hot wmter.w <span class="string">"</span></span><br><span class="line"><span class="string">9 ： "</span><span class="string">"A day without sunshine is like, you know, night."</span><span class="string">"</span></span><br><span class="line"><span class="string">可以发现，我们成功地将10个节点的正文内容获取了下来。</span></span><br></pre></td></tr></table></figure>

<h2 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click()"></a>mouse_click()</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此方法可以模拟鼠标点击操作，传入的参数为坐标值x和y。此外，也可以直接选中某个节点，然后调用此方法，示例如下：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">    splash:go(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">    <span class="built_in">input</span> = splash:<span class="built_in">select</span>(<span class="string">"#kw"</span>)</span><br><span class="line">    <span class="built_in">input</span>:send_text(<span class="string">'Splash'</span>)</span><br><span class="line">    submit = splash:<span class="built_in">select</span>(<span class="string">'#su'</span>)</span><br><span class="line">    submit:mouse_click()</span><br><span class="line">    splash:wait(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> splash:png()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">这里我们首先选中页面的输入框，输入了文本，然后选中“提交”按钮 ，调用了 mouse_click()方法提交查询，然后页面等待三秒，返回截图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到，这里我们成功获取了查询后的页面内容，模拟了百度搜索操作。</span><br><span class="line">前面介绍了 Splash的常用API操作，还有一些API在这不再一一介绍，更加详细和权威的说明可以参见官方文档 https://splash.readthedocs.<span class="built_in">io</span>/en/stable/scripting-ref.html,此页面介绍了Splash对象的所有API操作 。另 外，还有针对页面元素的API操作，链接为 https://splash.readthedocs.<span class="built_in">io</span>/en/stable/</span><br><span class="line">scripting-element bject.html</span><br></pre></td></tr></table></figure>

<h2 id="Splash-API-调用"><a href="#Splash-API-调用" class="headerlink" title="Splash API 调用"></a>Splash API 调用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前面说明了Splash Lua脚本的用法，但这些脚本是在Splash页面中测试运行的，如何才能利用Splash渲染页面呢？怎样才能和Python程序结合使用并抓取JavaScript渲染的页面呢？</span><br><span class="line"></span><br><span class="line">其实 Splash给我们提供了一些HTTP API接口，我们只需要请求这些接口并传递相应的参数即可，下面简要介绍这些接口。</span><br></pre></td></tr></table></figure>

<h3 id="render-html"><a href="#render-html" class="headerlink" title="render.html"></a>render.html</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此接口用于获取JavaScript渲染的页面的HTML代码，接口地址就是Splash的运行地址加此接口名称，例如 http://localhost:<span class="number">8050</span>/render.htmlo 可以用 curl 来测试一下：</span><br><span class="line">curl http://localhost:8050/render.html?url=https://www.baidu.com</span><br><span class="line">我们给此接口传递了一个url参数来指定渲染的URL ,返回结果即页面渲染后的源代码</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果用Python实现的话, 代码如下：</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost:8050/render.html?url=https://www.baidu.com'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">这样就可以成功输出百度页面渲染后的源代码了。</span><br><span class="line">另外，此接口还可以指定其他参数，比如通过wait指定等待秒数。如果要确保页面完全加载出来，可以增加等待时间，例如：</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost:8050/render.html?url=https://www.taobao.com&amp;wait=5'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">此时得到响应的时间就会相应变长，比如这里会等待<span class="number">5</span> 秒多钟才能获取淘宝页面的源代码。</span><br><span class="line">另外，此接口还支持代理设置、图片加载设置、 Headers设 置 、请求方法设置，具体的用法可以参见官方文档 https://splash.readthedocs.io/en/stable/api.html<span class="comment">#render-htmlo</span></span><br></pre></td></tr></table></figure>

<h3 id="render-png"><a href="#render-png" class="headerlink" title="render.png"></a>render.png</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此接口可以获取网页截图，其参数比render.html多了几个，比如通过width和 height来控制宽高，</span><br><span class="line">它返回的是PNG格式的图片二进制数据。示例如下：</span><br><span class="line">curl http://localhost:<span class="number">8050</span>/render.png?url=https://www.taobao.com&amp;wait=<span class="number">5</span>&amp;width=<span class="number">1000</span>&amp;height=<span class="number">700</span></span><br><span class="line">这里我们传入了 w idth和 height来设置页面大小为<span class="number">1000</span>像素&gt;&lt;<span class="number">700</span>像素</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果用Python实现，可以将返回的二进制数据保存为PNG格式的图片，具体如下:</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost:8050/render.png?url=https://www.jd.com&amp;wait=5&amp;width=1000&amp;height=700</span></span><br><span class="line"><span class="string">response = requests.get(url)</span></span><br><span class="line"><span class="string">with open('</span>taobao.png<span class="string">', '</span>w<span class="string">b') as f :</span></span><br><span class="line"><span class="string">	f.write(response.content)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这样我们就成功获取了京东首页渲染完成后的页面截图，详细的参数设置可以参考官网文档</span><br><span class="line">https://splash.readthedocs.io/en/stable/api.html<span class="comment">#render-png</span></span><br></pre></td></tr></table></figure>

<h3 id="render-jpeg"><a href="#render-jpeg" class="headerlink" title="render.jpeg"></a>render.jpeg</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此接口和render.png类似，不过它返回的是JPEG格式的图片二进制数据。</span><br><span class="line">另外，此接口比render.png多了参数quality ,它用来设置图片质量</span><br></pre></td></tr></table></figure>

<h3 id="render-har"><a href="#render-har" class="headerlink" title="render.har"></a>render.har</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此接口用于获取页面加载的HAR数据，示例如下：</span><br><span class="line">curl http://localhost:8050/render.har?url=https://www.jd.com&amp;wait=5</span><br><span class="line">它的返回结果（如图<span class="number">7</span><span class="number">-18</span>所示）非常多，是一个JSON格式的数据，其中包含页面加载过程中的HAR数据</span><br></pre></td></tr></table></figure>

<h3 id="render-json"><a href="#render-json" class="headerlink" title="render.json"></a>render.json</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此接口包含了前面接口的所有功能，返回结果是JSON格式，示例如下：</span><br><span class="line">curl http://localhost:8050/render.json?url=https://httpbin.org</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">&#123;<span class="string">"title"</span>: <span class="string">"httpbin(l): HTTP Client Testing Service"</span>, <span class="string">"url"</span>: <span class="string">"https://httpbin.org/"</span>, <span class="string">"requestedUrl"</span>:</span><br><span class="line"><span class="string">"https://httpbin.org/"</span>, <span class="string">"geometry"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1024</span>, <span class="number">768</span>]&#125;</span><br><span class="line"></span><br><span class="line">可以看到，这里以JSON形式返回了相应的请求数据。</span><br><span class="line">我们可以通过传入不同参数控制其返回结果。比如，传入html= l,返回结果即会增加源代码数据;</span><br><span class="line">传入png =l,返回结果即会增加页面PNG截图数据；传入har= l ,则会获得页面HAR数据。例如：</span><br><span class="line">curl http://localhost:8050/render.json?url=https://httpbin.org&amp;html=l&amp;har=l</span><br><span class="line"></span><br><span class="line">这样返回的JSON结果会包含网页源代码和HAR数据。</span><br><span class="line">此外还有更多参数设置，具体可以参考官方文档： https://splash.readthedocs.io/en/stable/api.html<span class="comment">#render-json</span></span><br></pre></td></tr></table></figure>

<h3 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">此接口才是最为强大的接口。前面说了很多Splash Lua脚本的操作，用此接口便可实现与Lua脚本的对接。</span><br><span class="line"></span><br><span class="line">前面的render.html和render.png等接口对于一般的JavaScript渲染页面是足够了，但是如果要实现一些交互操作的话，它们还是无能为力，这里就需要使用<span class="built_in">execute</span>接口了。</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">我们先实现一个最简单的脚本，直接返回数据：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">然后将此脚本转化为URL编码后的字符串，拼 接 到 <span class="built_in">execute</span>接口后面，示例如下：</span><br><span class="line">curl http://localhost:<span class="number">8050</span>/<span class="built_in">execute</span>?lua_source=<span class="function"><span class="keyword">function</span>+<span class="title">main</span>%28<span class="title">splash</span>%29%0<span class="title">D</span>%0<span class="title">A</span>++<span class="title">return</span>+%27<span class="title">hello</span>%27%0<span class="title">D</span>%0<span class="title">Aend</span></span></span><br><span class="line"><span class="function">运行结果如下：</span></span><br><span class="line"><span class="function"><span class="title">hello</span></span></span><br><span class="line"><span class="function">这里我们通过<span class="title">lua_source</span>参数传递了转码后的<span class="title">Lua</span>脚本 ，通 过 <span class="title">execute</span>接口获取了最终脚本的执行结果。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们更加关心的肯定是如何用Python来实现，上例用 Python实现的话，代码如下：</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">function main(splash)</span></span><br><span class="line"><span class="string">	return 'hello'</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote(lua)</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">运行结果如下：</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">这里我们用Python中的三引号将Lua脚本包括起来，然 后 用 urllib.parse模 块 里 的 quote()方法将</span><br><span class="line">脚本进行URL转码，随后构造了 Splash请 求 U R L ,将 其 作 为 lua_source参数传递，这样运行结果就</span><br><span class="line">会显示Lua脚本执行后的结果。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们再通过实例看一下：</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">lua =<span class="string">'''</span></span><br><span class="line"><span class="string">function main(splash, args)</span></span><br><span class="line"><span class="string">    local treat = require("treat")</span></span><br><span class="line"><span class="string">    local response = splash:http_get("http://httpbin.org/get")</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">        html=treat.as_string(response.body),</span></span><br><span class="line"><span class="string">        url=response.url,</span></span><br><span class="line"><span class="string">        status=response.status</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote(lua)</span><br><span class="line">response = requests.get(url)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">运行结果如下：</span><br><span class="line">&#123;<span class="attr">"url"</span>: <span class="string">"http://httpbin.org/get"</span>, <span class="attr">"status"</span>: <span class="number">200</span>, <span class="attr">"html"</span>: <span class="string">"&#123;\n \"args\": &#123;&#125;, \n \"headers\": &#123;\n</span></span><br><span class="line">\"Accept-Encoding\": \"gzip, deflateX", \n \"Accept-Language\": \"en,*\", \n \"Connection\":</span><br><span class="line">\"close\", \n \"Host\": \"httpbin.org\", \n \"User-Agent\": \"Mozilla/5.O (Xll; Linux x86_64)</span><br><span class="line">AppleWebKit/602.1 (KHTML, lik e Gecko) splash Version/9.0 Safari/602.1\"\n &#125;, \n \"o rig in \":</span><br><span class="line">\"6O.2O7.237.85\", \n \ " u r l\" : \ " h ttp : //h ttp b in .org/get\"\n &#125;\n "&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以看到，返回结果是JSON形式，我们成功获取了请求的URL ,状态码和网页源代码。</span><br><span class="line">如此一来，我们之前所说的Lua脚本均可以用此方式与Python进行对接，所有网页的动态渲染、模拟点击、表单提交、页面滑动、延时等待后的一些结果均可以自由控制，获取页面源码和截图也都不在话下。</span><br><span class="line">到现在为止，我们可以用Python和 Splash实现JavaScript渲染的页面的抓取了。除了Selenium,本节所说的Splash同样可以做到非常强大的渲染功能，同时它也不需要浏览器即可渲染，使用非常方便。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python库-操作Excel</title>
    <url>/python%E5%BA%93-%E6%93%8D%E4%BD%9CExcel.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>


<h1 id="python库-操作Excel"><a href="#python库-操作Excel" class="headerlink" title="python库-操作Excel"></a>python库-操作Excel</h1><h2 id="openpyxl库"><a href="#openpyxl库" class="headerlink" title="openpyxl库"></a>openpyxl库</h2><p><em>三个基本概念：workbooks(工作簿)，sheets(表), cells(单元格)</em></p>
<p><em>不支持打开xls格式的EXECL文件</em></p>
<h3 id="打开EXCEL"><a href="#打开EXCEL" class="headerlink" title="打开EXCEL"></a>打开EXCEL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> WorkBook</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">'路径.xlsx'</span>) <span class="comment"># 得到workbook对象</span></span><br><span class="line">sheetnames = wb.sheetnames <span class="comment"># 得到workbook里面的表名</span></span><br><span class="line">ws = wb[sheetnames[index]] <span class="comment"># 得到sheet表</span></span><br><span class="line">ws.cell(row, column).value <span class="comment"># 得到某行某列单元格的值</span></span><br><span class="line">ws.cell(row, column).value = <span class="string">'xxxx'</span> <span class="comment"># 重赋值</span></span><br><span class="line"><span class="comment"># 以行迭代指定单元格</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">3</span>, max_row=<span class="number">5</span>, min_col=<span class="number">2</span>, max_col=<span class="number">5</span>):</span><br><span class="line">    print(*[r.values <span class="keyword">for</span> r <span class="keyword">in</span> row])</span><br><span class="line"><span class="comment"># 以列迭代指定单元格</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> ws.iter_cols(min_row=<span class="number">3</span>, max_row=<span class="number">5</span>, min_col=<span class="number">2</span>, max_col=<span class="number">5</span>):</span><br><span class="line">    print(*[c.values <span class="keyword">for</span> c <span class="keyword">in</span> col])</span><br><span class="line">wb.save(<span class="string">'xxx.xlsx'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="创建EXCEL"><a href="#创建EXCEL" class="headerlink" title="创建EXCEL"></a>创建EXCEL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = WorkBook()</span><br><span class="line">ws = wb.active</span><br><span class="line">ws.cell(<span class="number">1</span>,<span class="number">1</span>).value = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">6</span>):</span><br><span class="line">        ws.cell(i+<span class="number">1</span>, j+<span class="number">1</span>).value = i*j</span><br><span class="line">wb.save(<span class="string">'xxx.xlsx'</span>)</span><br></pre></td></tr></table></figure>





<h2 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop启动后jps没有namenode</title>
    <url>/hadoop%E5%90%AF%E5%8A%A8%E5%90%8Ejps%E6%B2%A1%E6%9C%89namenode.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="hadoop启动后jps没有namenode"><a href="#hadoop启动后jps没有namenode" class="headerlink" title="hadoop启动后jps没有namenode"></a>hadoop启动后jps没有namenode</h2><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/81265784" target="_blank" rel="external nofollow noopener noreferrer">解决链接</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-SQL_Server</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL-Server.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h1><p><a href="https://www.51zxw.net/List.aspx?cid=492" target="_blank" rel="external nofollow noopener noreferrer">https://www.51zxw.net/List.aspx?cid=492</a></p>
<p> SQL Server 是<a href="https://baike.baidu.com/item/Microsoft/125917" target="_blank" rel="external nofollow noopener noreferrer">Microsoft</a> 公司推出的<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="external nofollow noopener noreferrer">关系型数据库管理系统</a>。具有使用<a href="https://baike.baidu.com/item/方便" target="_blank" rel="external nofollow noopener noreferrer">方便</a>可伸缩性好与相关<a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="external nofollow noopener noreferrer">软件</a>集成<a href="https://baike.baidu.com/item/程度/70052" target="_blank" rel="external nofollow noopener noreferrer">程度</a>高等<a href="https://baike.baidu.com/item/优点/884953" target="_blank" rel="external nofollow noopener noreferrer">优点</a>，可跨越从<a href="https://baike.baidu.com/item/运行/5480697" target="_blank" rel="external nofollow noopener noreferrer">运行</a>Microsoft Windows 98 的膝上型<a href="https://baike.baidu.com/item/电脑/124859" target="_blank" rel="external nofollow noopener noreferrer">电脑</a>到运行Microsoft Windows 2012 的大型多处理器的服务器等多种平台使用。</p>
<h2 id="启动SQL-Server服务"><a href="#启动SQL-Server服务" class="headerlink" title="启动SQL Server服务"></a>启动SQL Server服务</h2><p>1.在控制面板服务中启动</p>
<p>2.开始中找到sql的服务配置文件</p>
<p>3.cmd命令启动 net start /stop mssqlserver</p>
<h2 id="SQL-Server身份验证"><a href="#SQL-Server身份验证" class="headerlink" title="SQL Server身份验证"></a>SQL Server身份验证</h2><p>1.local/./127.0.0.1/IP地址</p>
<p>2.</p>
<ul>
<li><p>windows</p>
</li>
<li><p>Sql   </p>
<p>18456 安装时验证选择的问题   18470 账户启动问题</p>
</li>
</ul>
<hr>
<blockquote>
<p>明智的放弃胜过盲目的执著。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机无法联网</title>
    <url>/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="虚拟机无法联网"><a href="#虚拟机无法联网" class="headerlink" title="虚拟机无法联网"></a>虚拟机无法联网</h2><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><a href="https://blog.csdn.net/wuhuimin521/article/details/80992530" target="_blank" rel="external nofollow noopener noreferrer">方案链接</a></p>
<p><a href="https://blog.csdn.net/wolf_soul/article/details/46409323" target="_blank" rel="external nofollow noopener noreferrer">url2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop大数据技术-第八章</title>
    <url>/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AB%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h1><h2 id="Sqoop简介"><a href="#Sqoop简介" class="headerlink" title="Sqoop简介"></a>Sqoop简介</h2><p><em>Sqoop是一个在关系型数据库与Hadoop数据存储和处理平台进行数据导入\导出的工具</em></p>
<p><em>Sqoop脚本最终会转换为mapreduce程序</em></p>
<h2 id="Sqoop基本原理"><a href="#Sqoop基本原理" class="headerlink" title="Sqoop基本原理"></a>Sqoop基本原理</h2><p><em>有sqoop1和sqoop2；sqoop1更加稳定</em></p>
<p><em>Sqoop1使用Sqoop客户端直接提交任务，通过CLI控制台或API方式访问数据时，在命令或脚本中需要指定用户数据库名及密码</em></p>
<p><strong>import原理</strong>：<em>从传统数据库获取元数据信息，把导入功能转换为只有Map的MapReduce作业，在map中有很多Map，每个Map读取一片数据，进而并行地复制到HDFS,HBSE或HIVE中的数据导入到关系型数据库</em></p>
<p><strong>Export原理</strong>：<em>获取导出表的schema,meta信息，与hadoop中的字段匹配，多个Map作业并行运行，将HDFS,HBASE或HIVE中的数据导出到关系型数据库</em></p>
<p><a href="https://imgchr.com/i/ttSV7d" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/02/ttSV7d.md.jpg" alt="ttSV7d.md.jpg" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/06/02/ttSeAA.md.jpg" alt="ttSeAA.md.jpg" border="0">



<h2 id="Sqoop的安装与部署"><a href="#Sqoop的安装与部署" class="headerlink" title="Sqoop的安装与部署"></a>Sqoop的安装与部署</h2><h2 id="Sqoop应用"><a href="#Sqoop应用" class="headerlink" title="Sqoop应用"></a>Sqoop应用</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-用SQL创建数据库</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%94%A8SQL%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<img src="https://s1.ax1x.com/2020/06/04/tBE71f.png" alt="tBE71f.png" border="0">

<p>​                                    <a href="https://imgchr.com/i/tBExNn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/04/tBExNn.png" alt="tBExNn.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/06/04/tBEQTs.png" alt="tBEQTs.png" border="0">





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库系统概述</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h1><h2 id="其他课程与本课程的关系"><a href="#其他课程与本课程的关系" class="headerlink" title="其他课程与本课程的关系"></a>其他课程与本课程的关系</h2><ul>
<li>离散数学</li>
<li>数据结构</li>
<li>编译原理</li>
<li>操作系统</li>
<li>软件工程</li>
</ul>
<h2 id="需要学习"><a href="#需要学习" class="headerlink" title="需要学习"></a>需要学习</h2><ul>
<li>数据库基础</li>
<li>数据库设计</li>
<li>数据库应用程序开发</li>
<li>数据库存储与控制</li>
</ul>
<h2 id="数据库的-4-个基本概念"><a href="#数据库的-4-个基本概念" class="headerlink" title="数据库的 4 个基本概念"></a>数据库的 4 个基本概念</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p><strong>数据是数据库存储的基本对象</strong></p>
<p><strong>信息与数据既有联系，又有区别。数据是信息的表现形式和载体</strong></p>
<p><strong>数据是数据库存储的基本对象</strong></p>
<p><strong>描述事物的符号记录称为数据</strong></p>
<p><strong>数据的含义称为数据的语义，数据与其语义密不可分</strong></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>什么是数据库</strong>：有相互关系和关联的数据的集合</p>
<p>表</p>
<p>行/元组/</p>
<p>列/属性/数据项</p>
<p><strong>数据库是长期存储在计算机内，有组织，可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织，描述和存储，具有较小的冗余度，较高的数据独立性和易扩展性，并可为各种用户共享</strong></p>
<p><strong>简单地说数据库具有可共享，有组织，永久存储的特点</strong></p>
<h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p><em>科学的组织和存储数据，如何高效底维护和获取数据</em></p>
<p><strong>数据库管理系统必须具有将数据库从错误状态恢复到某一已知的正确状态的功能，这就是数据库的恢复功能</strong></p>
<p><strong>数据库管理系统</strong>：操作和管理数据库的大型软件<br><strong>数据库管理系统的主要功能:</strong>  </p>
<ul>
<li>数据定义功能: 具有数据定义语言(Data Definition Language, DDL)</li>
<li>数据组织，存储和管理（提供了多种方法）</li>
<li>数据操纵功能（用户操纵数据， Data Manipulation Language, DML）</li>
<li>数据库的事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
<li>其它功能</li>
</ul>
<h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p><em>由数据库，数据库管理系统，应用程序和数据库管理员(DBA)组成的存储，管理，处理和维护数据的系统</em></p>
<p><em>在一般不引起混淆的情况下，一般把数据库系统叫做数据库</em></p>
<p><a href="https://imgchr.com/i/tBiPPK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/04/tBiPPK.md.png" alt="tBiPPK.png" border="0"></a></p>
<h4 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h4><ul>
<li>数据结构化(实现整体数据的结构化，这是数据库的主要特征，也是数据库系统与文件系统的本质区别)</li>
<li>数据冗余度低，高共享，独立，易扩充</li>
<li>数据由数据库管理系统统一管理和控制(数据的安全性的保护，完整性的检查，并发控制，数据库恢复)</li>
</ul>
<h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ul>
<li>数据库(有相互关系关联的数据的集合)  </li>
<li>数据库管理系统(DBMS管理数据的一种系统软件) </li>
<li>数据库应用(DBAP)  ·数据库管理员(DBA) </li>
<li>计算机基本系统</li>
</ul>
<h3 id="数据库管理技术及其发展"><a href="#数据库管理技术及其发展" class="headerlink" title="数据库管理技术及其发展"></a>数据库管理技术及其发展</h3><p><strong>人工管理阶段-》文件系统阶段-》数据库系统阶段</strong></p>
<p><em>从文件管理系统到数据库系统标志着数据管理技术的飞跃</em></p>
<h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><ul>
<li>数据不能长期存储</li>
<li>应用程序管理数据</li>
<li>数据不能共享</li>
<li>数据不具有独立性</li>
</ul>
<h4 id="文件系统管理阶段"><a href="#文件系统管理阶段" class="headerlink" title="文件系统管理阶段"></a>文件系统管理阶段</h4><ul>
<li>数据可以长期存储</li>
<li>有简单的数据管理功能</li>
<li>数据共享能力差</li>
<li>数据不具有独立性</li>
</ul>
<h4 id="数据库系统管理阶段"><a href="#数据库系统管理阶段" class="headerlink" title="数据库系统管理阶段"></a>数据库系统管理阶段</h4><ul>
<li>采用复杂的结构化的数据模型</li>
<li>数据独立性高</li>
<li>数据共享程度高，冗余度低</li>
<li>数据由DBMS统一管理和控制</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p><em>数 据 模 型 (data model)也是一种模型，它是对现实世界数据特征的抽象</em></p>
<p><strong>三大经典数据模型</strong>：表，树，图</p>
<h3 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h3><p><em>第一类是概念模型，第二类是逻辑模型和物理模型</em></p>
<p><em>首先将现实世界抽象为信息世界，然后将信息世界转换为机器世界</em></p>
<h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p><em>概念模型实际上是现实世界到机器世界的一个中间层次</em></p>
<h4 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h4><h5 id="实-体-entity"><a href="#实-体-entity" class="headerlink" title="实 体 (entity)"></a>实 体 (entity)</h5><p><em>客观存在并可相互区别的事物称为实体</em></p>
<h5 id="属-性-attribute"><a href="#属-性-attribute" class="headerlink" title="属 性 (attribute)"></a>属 性 (attribute)</h5><p><em>实体所具有的某一特性称为属性</em></p>
<h5 id="码-key"><a href="#码-key" class="headerlink" title="码 (key)"></a>码 (key)</h5><p><em>唯一标识实体的属性集称为码</em></p>
<h5 id="实-体-型-entitytype"><a href="#实-体-型-entitytype" class="headerlink" title="实 体 型 (entitytype)"></a>实 体 型 (entitytype)</h5><p><em>具有相同属性的实体必然具有共同的特征和性质。用实体名及其属性名集合来抽象和<br>刻画同类实体，称为实体型。</em></p>
<h5 id="实-体-集-entityset"><a href="#实-体-集-entityset" class="headerlink" title="实 体 集 (entityset)"></a>实 体 集 (entityset)</h5><h5 id="联-系-relationship"><a href="#联-系-relationship" class="headerlink" title="联 系 (relationship)"></a>联 系 (relationship)</h5><p><em>实体之间的联系通常是指不同实体集之间的联系</em></p>
<p><em>实体之间的联系有一对一、 一对多和多对多等多种类型</em></p>
<h4 id="概念模型的一种表示方法：实体-联系方法"><a href="#概念模型的一种表示方法：实体-联系方法" class="headerlink" title="概念模型的一种表示方法：实体-联系方法"></a>概念模型的一种表示方法：实体-联系方法</h4><p><em>概念模型的表示方法很多，其中最为常用的是P.P.S.Chen于 1976年提出的<br>*</em>实体 -联系方法** (Entity-Relationship approach 该方法用 E-R 图 (E-R diagram )来描述现实世界的概念模型， <strong>E -R 方法</strong>也称为<strong>E -R 模型*</strong> </p>
<h4 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h4><p><em>数据模型通常由数据结构、数据操作和数据的完整性约束条件三部分组成</em>  </p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><strong>E.F.Codd提出了”关系”及关系模型</strong></p>
<h3 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h3><ul>
<li>数据定义语言(DDL)：包括数据库模式定义和数据库存储结构与存取方法定义两方面</li>
<li>数据操作语言(DML): 嵌入式主语言和交互式命令语言</li>
</ul>
<p>例行程序语言翻译处理程序系统运行控制程序公用程序</p>
<h3 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h3><h4 id="内部体系结构"><a href="#内部体系结构" class="headerlink" title="内部体系结构"></a>内部体系结构</h4><ul>
<li>三层模式结构  </li>
</ul>
<h4 id="外部体系结构"><a href="#外部体系结构" class="headerlink" title="外部体系结构"></a>外部体系结构</h4><ul>
<li>集中式结构  </li>
<li>分布式结构  </li>
<li>客户端/服务器结构等</li>
</ul>
<h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p><strong>外部级</strong>: 最接近用户，是单个用户索能看到的数据特征  </p>
<p><strong>概念级</strong>: 涉及到所有用户的数据定义，也就是全局性的数据视图，全局数据视图称为概念模式  </p>
<p><strong>内部级</strong>: 最接近物理存储设备，涉及到物理数据存储的结构，物理存储数据视图的描述称为内模式</p>
<p>数据库的三级模式结构是对数据的三个抽象级别， 它把数据的具体组织留给DBMS去做，用户只要抽象地处理数据，而不必关心数据在计算机中的表示和存储</p>
<p>关系模型的三个要素:基本结构基本操作完整性约束</p>
<hr>
<blockquote>
<p>看似不起波澜的日复一日，会突然在某一天让人看到坚持的意义。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第六章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%85%AD%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><h3 id="域名系统概述"><a href="#域名系统概述" class="headerlink" title="域名系统概述"></a>域名系统概述</h3><p><strong>DNS</strong>是一个分布式系统(单个计算机出现错误，也不会妨碍整个系统的运行)</p>
<p><strong>域名系统</strong>是互联网使用的命名系统，用于<strong>把机器名字转换成IP地址</strong></p>
<p><strong>DNS</strong>使大多数名字都在本地进行<strong>解析</strong>，仅少量解析需要在互联网上通信，因此DNS效率很高</p>
<h3 id="互联网的域名结构"><a href="#互联网的域名结构" class="headerlink" title="互联网的域名结构"></a>互联网的域名结构</h3><p><em>级别最低的域名写在最左边，而最高级的域名写在最右边</em></p>
<p><strong>顶级域名分为三类:</strong>国家顶级域名nTLD；通用顶级域名gTLD；基础结构域名infrastructure domain</p>
<p><a href="https://imgchr.com/i/t83I2D" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t83I2D.md.jpg" alt="t83I2D.jpg" border="0"></a></p>
<h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p><strong>根域名服务器</strong></p>
<p><em>层次最高的域名服务器，也是最重要的域名服务器</em></p>
<p><em>所有根域名服务器都知道所有的顶级域名服务器的域名和IP地址</em></p>
<p><strong>顶级域名服务器</strong></p>
<p><strong>权限域名服务器</strong></p>
<p><strong>本地域名服务器</strong></p>
<p><em>当一台主机发出DNS查询请求时，这个请求报文就发给本地域名服务器</em></p>
<h4 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h4><h5 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h5><h5 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h5><p><a href="https://imgchr.com/i/t8Gw1U" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t8Gw1U.md.jpg" alt="t8Gw1U.jpg" border="0"></a></p>
<h4 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h4><p><em>为了提高DNS查询效率，并减轻根域名服务器的负担和减少互联网的DNS查询数量，在域名服务器中广泛使用<strong>高速缓存</strong>。</em></p>
<h2 id="文件传送协议-FTP"><a href="#文件传送协议-FTP" class="headerlink" title="文件传送协议 FTP"></a>文件传送协议 FTP</h2><h3 id="FTP概述"><a href="#FTP概述" class="headerlink" title="FTP概述"></a>FTP概述</h3><p><strong>文件传输协议</strong>FTP是互联网上使用得最广泛的文件传输协议</p>
<h3 id="FTP的基本工作原理"><a href="#FTP的基本工作原理" class="headerlink" title="FTP的基本工作原理"></a>FTP的基本工作原理</h3><p>服务器端有两个从属进程：<strong>控制进程</strong>和<strong>数据传输进程</strong></p>
<p>在进行文件传输时，FTP的客户和服务器之间要建立两个并行的<strong>TCP连接</strong>：<strong>控制连接和数据连接</strong>。<strong>控制进程会在整个进程保持打开</strong></p>
<p><a href="https://imgchr.com/i/t8JOaR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t8JOaR.md.jpg" alt="t8JOaR.jpg" border="0"></a></p>
<h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><h3 id="万维网概述"><a href="#万维网概述" class="headerlink" title="万维网概述"></a>万维网概述</h3><p><em>world wide web</em></p>
<p><strong>URL</strong>:统一资源定位符</p>
<p><strong>HTTP</strong>:超文本传输协议</p>
<h4 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL"></a>统一资源定位符URL</h4><h5 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用HTTP的URL"><a href="#使用HTTP的URL" class="headerlink" title="使用HTTP的URL"></a>使用HTTP的URL</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt; --端口默认是80可以省略</span><br></pre></td></tr></table></figure>

<h4 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h4><p><em>HTTP协议是无状态的</em></p>
<p><strong>HTTP/1.0的缺点</strong>是：非持续连接</p>
<p><strong>HTTP/1.1:</strong>持续连接</p>
<h4 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h4><h5 id="超文本标记语言HTML"><a href="#超文本标记语言HTML" class="headerlink" title="超文本标记语言HTML"></a>超文本标记语言HTML</h5><h4 id="万维网的信息检索系统"><a href="#万维网的信息检索系统" class="headerlink" title="万维网的信息检索系统"></a>万维网的信息检索系统</h4><h5 id="全文检索搜索"><a href="#全文检索搜索" class="headerlink" title="全文检索搜索"></a>全文检索搜索</h5><h5 id="分类目录搜索"><a href="#分类目录搜索" class="headerlink" title="分类目录搜索"></a>分类目录搜索</h5><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p><em>主要由三个主要组件组成：*</em>用户代理<strong>；</strong>邮件服务器<strong>；</strong>邮局协议***</p>
<h3 id="读取邮件协议POP3和IMAP"><a href="#读取邮件协议POP3和IMAP" class="headerlink" title="读取邮件协议POP3和IMAP"></a>读取邮件协议POP3和IMAP</h3><h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><p><em>是一个非常简单，功能非常有限的邮件读取协议</em></p>
<p><em>POP3协议的一个特点是只要用户从POP3服务器读取了邮件，POP3服务器就把该邮件删除</em></p>
<h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><p><strong>IMAP</strong>最大的好处就是用户可以在不同的地方使用不同的计算机随时阅读和处理自己在邮件服务器中的邮件</p>
<h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><p><em>这种机制允许一台计算机加入新的网络和获取IP地址而不需要手工参与</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>数值分析-插值与拟合</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="插值与拟合"><a href="#插值与拟合" class="headerlink" title="插值与拟合"></a>插值与拟合</h1><h2 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h2><h3 id="线性插值与抛物插值"><a href="#线性插值与抛物插值" class="headerlink" title="线性插值与抛物插值"></a>线性插值与抛物插值</h3><h3 id="n次插值基函数"><a href="#n次插值基函数" class="headerlink" title="n次插值基函数"></a>n次插值基函数</h3><p><a href="https://imgchr.com/i/tZgy38" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/tZgy38.md.jpg" alt="tZgy38.md.jpg" border="0"></a></p>
<h4 id="n次拉格朗日插值多项式"><a href="#n次拉格朗日插值多项式" class="headerlink" title="n次拉格朗日插值多项式"></a>n次拉格朗日插值多项式</h4><img src="https://s1.ax1x.com/2020/05/28/tZgs9f.md.jpg" alt="tZgs9f.md.jpg" border="0">

<h4 id="n次插值多项式"><a href="#n次插值多项式" class="headerlink" title="n次插值多项式"></a>n次插值多项式</h4><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/tASce1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASce1.md.png" alt="tASce1.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/tASWFK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASWFK.md.png" alt="tASWFK.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/tApiT0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApiT0.md.jpg" alt="tApiT0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/tApPwq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApPwq.md.jpg" alt="tApPwq.md.jpg" border="0"></a></p>
<p><a href="https://imgchr.com/i/teSKzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/teSKzT.md.jpg" alt="teSKzT.jpg" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库完整性</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h1><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p><strong>触 发 器</strong> (trig g er)<em>是用户定义在关系表上的一类由事件驱动的特殊过程</em></p>
<p><em>一旦定义，触发器将被保存在数据库服务器中</em></p>
<p> <em>任何用户对表的增、删 、改操作均由<strong>服务器自动激活相应的触发器</strong>，在关系数据库管理系统核心层进行集中的完整性控制</em>  </p>
<p><em>触发器类似于约束，但是比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</em>  </p>
<h3 id="定义触发器"><a href="#定义触发器" class="headerlink" title="定义触发器"></a>定义触发器</h3><p><strong>触发器又叫做事件-条件-动作(event-condition-action) 规则</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> &lt;触发器名&gt;</span><br><span class="line"><span class="keyword">ON</span> &#123;表名|视图名&#125;</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION]</span><br><span class="line">&#123;<span class="keyword">FOR</span>|<span class="keyword">AFTER</span>|INSTEAD <span class="keyword">OF</span>&#125;&#123;[<span class="keyword">INSERT</span>][,][<span class="keyword">UPDATE</span>][,][<span class="keyword">DELETE</span>]&#125;</span><br><span class="line">[<span class="keyword">NOT</span> <span class="keyword">FOR</span> <span class="keyword">REPLICATION</span>]</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">[<span class="keyword">SQL</span>语句]</span><br></pre></td></tr></table></figure>

<h4 id="INSERT触发器"><a href="#INSERT触发器" class="headerlink" title="INSERT触发器"></a>INSERT触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiijpD.png" alt="tiijpD.png" border="0">

<p>​                                                        <a href="https://imgchr.com/i/tiFfEt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiFfEt.md.png" alt="tiFfEt.png" border="0"></a></p>
<p><em>cast强制转换；print只能输出字符类型；@@rowcount返回影响条数</em></p>
<img src="https://s1.ax1x.com/2020/05/26/tiVcJP.png" alt="tiVcJP.png" border="0">

<p><em>ROLLBACK TRAN返回上一个版本</em></p>
<h4 id="DELETE触发器"><a href="#DELETE触发器" class="headerlink" title="DELETE触发器"></a>DELETE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiZIXD.png" alt="tiZIXD.png" border="0">

<img src="https://s1.ax1x.com/2020/05/26/timuxf.png" alt="timuxf.png" border="0">

<h4 id="UPDATE触发器"><a href="#UPDATE触发器" class="headerlink" title="UPDATE触发器"></a>UPDATE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tinqAJ.png" alt="tinqAJ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/27/tAmi7D.png" alt="tAmi7D.png" border="0">

<img src="https://s1.ax1x.com/2020/05/26/tiMOhj.png" alt="tiMOhj.png" border="0">

<h4 id="INSTEAD-OF触发器"><a href="#INSTEAD-OF触发器" class="headerlink" title="INSTEAD OF触发器"></a>INSTEAD OF触发器</h4><img src="https://s1.ax1x.com/2020/05/27/tAM2Je.png" alt="tAM2Je.png" border="0">

<h3 id="修改和删除触发器"><a href="#修改和删除触发器" class="headerlink" title="修改和删除触发器"></a>修改和删除触发器</h3><img src="https://s1.ax1x.com/2020/05/27/tAQFW4.png" alt="tAQFW4.png" border="0">

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库创建</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h1><h2 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h2><h2 id="SQl创建"><a href="#SQl创建" class="headerlink" title="SQl创建"></a>SQl创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> StudentInfo <span class="comment">--创建数据库名字</span></span><br><span class="line"><span class="keyword">on</span> primary <span class="comment">--主文件组</span></span><br><span class="line">(</span><br><span class="line">   <span class="keyword">name</span> = <span class="string">'StudentInfo'</span>, <span class="comment">--数据库文件的逻辑名字；</span></span><br><span class="line">   filename=<span class="string">'E:\mydata\ StudentInfo.mdf'</span>,</span><br><span class="line">   <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">   <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">   filegrowth=<span class="number">1</span>mb</span><br><span class="line">   ),</span><br><span class="line">   (</span><br><span class="line">       <span class="keyword">name</span>=<span class="string">'StudentInfo_log'</span>,  <span class="comment">-- 次要文件名字，不能和主文件名字相同</span></span><br><span class="line">       filename=<span class="string">' E:\mydata\StudentInfo_log.ldf'</span>,</span><br><span class="line">       <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">       <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">       filegrowth=<span class="number">1</span>mb</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第七章Flume</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%83%E7%AB%A0Flume.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Flume-了解"><a href="#Flume-了解" class="headerlink" title="Flume(了解)"></a>Flume(了解)</h1><p><em>用于采集数据</em></p>
<h2 id="Flume-产生的背景"><a href="#Flume-产生的背景" class="headerlink" title="Flume 产生的背景"></a>Flume 产生的背景</h2><p><em>通过中间系统，将数据推送到 HDFS 或类似的存储系统是很普遍的。这些系统能在数据生产者和最终目的地之间起缓冲作用，使得偶然突发写入 HDFS 和 HBase 集群的请求，变得可以持续而平稳</em>    </p>
<h2 id="Flume-简介"><a href="#Flume-简介" class="headerlink" title="Flume 简介"></a>Flume 简介</h2><p><em>Flume 是 Cloudera 提供的一个高可用、高可靠、分布式的海量日志采集、聚合和传输的系统</em></p>
<p><em>Apache Flume 是一个系统，用于从大量数据生产商那里移动海量数据到存储、索引或分析数据的系统</em>  </p>
<h2 id="Flume-安装"><a href="#Flume-安装" class="headerlink" title="Flume 安装"></a>Flume 安装</h2><p><em>不支持windows安装</em></p>
<p><em>需要配置环境变量</em></p>
<h2 id="Flume的架构"><a href="#Flume的架构" class="headerlink" title="Flume的架构"></a>Flume的架构</h2><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p><em>Flume 运行的核心是 Agent。 Agent 本身是一个 Java 进程，也是 Flume 中最小的独立运行单位，运行在日志收集节点。</em></p>
<p>  Flume核心Agent = source(采集) + channel(缓存数据) + sink(保存日志)</p>
<p><em>一般一个机器运行一个Agent， 但在一个Agent中可以包含多个Source，channel和sink</em></p>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><p><em>Flume 基于数据流进行设计，数据流由事件（ Event）贯穿始终。<strong>事件作为 Flume 的基本数据单位</strong>，携带日志数据（以字节数组形式）并且携带有头信息，由 Agent 外部的数据源（如图 7-2 中的 Web Server）生成</em> </p>
<h2 id="Flume-应用"><a href="#Flume-应用" class="headerlink" title="Flume 应用"></a>Flume 应用</h2><h3 id="Flume的组件类型及其配置"><a href="#Flume的组件类型及其配置" class="headerlink" title="Flume的组件类型及其配置"></a>Flume的组件类型及其配置</h3><h2 id="Flume的配置方法"><a href="#Flume的配置方法" class="headerlink" title="Flume的配置方法"></a>Flume的配置方法</h2><p><em>一定义，三配置</em></p>
<p><a href="https://imgchr.com/i/t9LHeJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9LHeJ.md.png" alt="t9LHeJ.png" border="0"></a></p>
<h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
  </entry>
  <entry>
    <title>maven安装</title>
    <url>/maven%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>linux相关命令和异常</title>
    <url>/linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%92%8C%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="linux相关问题"><a href="#linux相关问题" class="headerlink" title="linux相关问题"></a>linux相关问题</h1><h2 id="不同的子目录不同的含义"><a href="#不同的子目录不同的含义" class="headerlink" title="不同的子目录不同的含义"></a>不同的子目录不同的含义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不同的子目录具有不同的含义，存放不同类型的文件信息。</span><br><span class="line">bin 存放二进制可执行文件(ls,cat,mkdir等)</span><br><span class="line">boot 存放用于系统引导时使用的各种文件</span><br><span class="line">dev 存放设备文件</span><br><span class="line">etc 存放系统配置文件</span><br><span class="line">home 存放所有用户文件的根目录</span><br><span class="line">lib 存放跟文件系统中的程序运行所需要的共享库及内核模块</span><br><span class="line">proc 虚拟文件系统，存放当前内存的映射</span><br><span class="line">usr 存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 管理员软件安装目录</span><br><span class="line">var 存放运行时需要改变数据的文件</span><br><span class="line">mnt 挂载目录</span><br><span class="line">sbin 存储管理级别的二进制执行文件</span><br><span class="line">root 超级用户主目录</span><br><span class="line">opt 额外安装的可选应用程序包安装位置</span><br></pre></td></tr></table></figure>



<h2 id="centOS"><a href="#centOS" class="headerlink" title="centOS"></a>centOS</h2><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="XXXX-is-not-in-the-sudoers-file-This-incident-will-be-reported解决方法"><a href="#XXXX-is-not-in-the-sudoers-file-This-incident-will-be-reported解决方法" class="headerlink" title="XXXX is not in the sudoers file. This incident will be reported解决方法"></a>XXXX is not in the sudoers file. This incident will be reported解决方法</h4><p><a href="https://blog.csdn.net/qq_37964379/article/details/104193627" target="_blank" rel="external nofollow noopener noreferrer">解决方案1</a></p>
<p><a href="https://blog.csdn.net/zhanglu1236789/article/details/49073635" target="_blank" rel="external nofollow noopener noreferrer">解决方案2</a></p>
<h4 id="Mandatory-arguments-to-long-options-are-mandatory-for-short-options-too"><a href="#Mandatory-arguments-to-long-options-are-mandatory-for-short-options-too" class="headerlink" title="Mandatory arguments to long options are mandatory for short options too."></a>Mandatory arguments to long options are mandatory for short options too.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">长选项必须是必须的参数，对于短选项也是必须的。</span><br><span class="line">举例来说，如本例的--mode&#x3D;MODE中加短选项--m使用--mode</span><br><span class="line">的权限参数，如mkdir-- mode&#x3D;755 DIRECTORY 或mkdir --mode 755 DIRECTORY,这是长选项,对于短选项-m,其权限参数同样不可省略,如mkidr -m 755 DIRECTORY</span><br></pre></td></tr></table></figure>

<h4 id="Found-a-swap-file-by-the-name-“-hello-txt-swp”"><a href="#Found-a-swap-file-by-the-name-“-hello-txt-swp”" class="headerlink" title="Found a swap file by the name “.hello.txt.swp”"></a>Found a swap file by the name “.hello.txt.swp”</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vi hello.txt</span><br><span class="line">E325: ATTENTION</span><br><span class="line">Found a swap file by the name &quot;.hello.txt.swp&quot;</span><br><span class="line">          owned by: root   dated: Sun Mar 29 18:14:30 2020</span><br><span class="line">         file name: ~root&#x2F;hello.txt</span><br><span class="line">          modified: YES</span><br><span class="line">         user name: root   host name: localhost.localdomain</span><br><span class="line">        process ID: 2158</span><br><span class="line">While opening file &quot;hello.txt&quot;</span><br><span class="line">             dated: Sun Mar 29 18:02:43 2020</span><br><span class="line"></span><br><span class="line">(1) Another program may be editing the same file.  If this is the case,</span><br><span class="line">    be careful not to end up with two different instances of the same</span><br><span class="line">    file when making changes.  Quit, or continue with caution.</span><br><span class="line">(2) An edit session for this file crashed.</span><br><span class="line">    If this is the case, use &quot;:recover&quot; or &quot;vim -r hello.txt&quot;</span><br><span class="line">    to recover the changes (see &quot;:help recovery&quot;).</span><br><span class="line">    If you did this already, delete the swap file &quot;.hello.txt.swp&quot;</span><br><span class="line">    to avoid this message.</span><br><span class="line">&quot;hello.txt&quot; 6L, 78C</span><br><span class="line">Press ENTER or type command to continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这一大坨英文的大致意思其实就是之前你没有正确关闭文件，所以产生了临时文件，解决这个问题最直接最暴力的方式就是找到这个临时文件，把它干掉就可以一劳永逸了。</span><br><span class="line">默认和这个原始文件在一个目录下面，只不过它是一个隐藏文件，通过ll命令看不到，这个隐藏文件的后缀名为.swp，我们通过ll -a就可以看到了，找到以后 使用rm删除掉即可。</span><br></pre></td></tr></table></figure>

<h4 id="ttyong-is-not-in-the-sudoers-file-This-incident-will-be-reported"><a href="#ttyong-is-not-in-the-sudoers-file-This-incident-will-be-reported" class="headerlink" title="ttyong is not in the sudoers file.  This incident will be reported."></a>ttyong is not in the sudoers file.  This incident will be reported.</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在root账户条件下</span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"># 添加如下之一</span><br><span class="line">ttyong            ALL&#x3D;（ALL）                ALL </span><br><span class="line">%ttyong            ALL&#x3D;（ALL）                ALL</span><br><span class="line">ttyong               ALL&#x3D;（ALL）                 NOPASSWD：ALL(出于方便，推荐使用此设置) </span><br><span class="line">%ttyong            ALL&#x3D;（ALL）                NOPASSWD：ALL</span><br><span class="line"></span><br><span class="line">解释说明：</span><br><span class="line">第一行：允许用户ttyong执行sudo命令（需要输入密码）。 </span><br><span class="line">第二行：允许用户组ttyong里面的用户执行sudo命令（需要输入密码）。</span><br><span class="line">第三行：允许用户ttyong执行sudo命令，并且在执行的时候不输入密码。</span><br><span class="line">第四行：允许用户组ttyong里面的用户执行sudo命令，并且在执行的时候不输入密码。</span><br></pre></td></tr></table></figure>

<h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+w xxx.txt</span><br><span class="line">或者</span><br><span class="line">vim 退出时 wq!</span><br></pre></td></tr></table></figure>

<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#96;date &quot;+%Y-%m-%d %H:%M:%S&quot;&#96;  #双引号是因为第三个空格；date后面要有空格</span><br></pre></td></tr></table></figure>



<h4 id="使用克隆会话时一定要注意不要同时进行同一个操作"><a href="#使用克隆会话时一定要注意不要同时进行同一个操作" class="headerlink" title="使用克隆会话时一定要注意不要同时进行同一个操作"></a>使用克隆会话时一定要注意不要同时进行同一个操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在配置hadoop完全分布式部署时，同时scp -rq &#x2F;data&#x2F;soft&#x2F;hadoop-3xxx bigdata02:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line">scp -rq &#x2F;data&#x2F;soft&#x2F;hadoop-3xxx bigdata03:&#x2F;data&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">最后发现其中一个文件不完整</span><br></pre></td></tr></table></figure>

<h4 id="配置hadoop的五个配置文件时，一定要注意该粘贴到什么位置"><a href="#配置hadoop的五个配置文件时，一定要注意该粘贴到什么位置" class="headerlink" title="配置hadoop的五个配置文件时，一定要注意该粘贴到什么位置"></a>配置hadoop的五个配置文件时，一定要注意该粘贴到什么位置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置hadoop完全分布式部署时，也是好久才发现问题</span><br></pre></td></tr></table></figure>



<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><h5 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span><br><span class="line">ls</span><br><span class="line">ll(ls -l的缩写)   列出当前目录下的文件（带文件信息）</span><br><span class="line">ll -a     列出当前目录下的所有文件（包括隐藏文件）</span><br><span class="line">ll --help 查看ls用法，--help是一个帮助命令</span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<h5 id="创建，重命名文件-文件夹"><a href="#创建，重命名文件-文件夹" class="headerlink" title="创建，重命名文件\文件夹"></a>创建，重命名文件\文件夹</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建文件</span><br><span class="line">vim xxx.txt</span><br><span class="line">touch xxx.txt</span><br><span class="line"></span><br><span class="line">创建目录</span><br><span class="line">mkdir abc</span><br><span class="line">mkdir -p abc 存在也不会报错 </span><br><span class="line"></span><br><span class="line">重命名或移动文件\文件夹</span><br><span class="line">mv 重命名或移动文件\文件夹</span><br></pre></td></tr></table></figure>

<h5 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux有两种链接：硬链接、符号(软)链接</span><br><span class="line"> 软链接功能类似类似于windows的快捷方式，主要用于节省磁盘空间</span><br><span class="line">首先看硬链接：硬链接相当于对原始文件的一个复制，不能对目录使用硬链接。</span><br><span class="line"> ln hello.txt hlink</span><br><span class="line">再看符号(软)链接：</span><br><span class="line">如果想使用软连接，需要添加-s，相当于快捷方式，不能删除原文件</span><br><span class="line">命令如下：</span><br><span class="line">ln -s hello.txt vlink</span><br></pre></td></tr></table></figure>

<h5 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .</span><br><span class="line">cd ..</span><br><span class="line">cd ~</span><br><span class="line">cd &#x2F;</span><br><span class="line">cd directory</span><br></pre></td></tr></table></figure>

<h5 id="删除-文件夹-目录"><a href="#删除-文件夹-目录" class="headerlink" title="删除\文件夹(目录)"></a>删除\文件夹(目录)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  rm命令可以删除文件或者目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉</span><br><span class="line">对于链接文件，只是删除整个链接文件，而原有文件保持不变。</span><br><span class="line">rm 删除文件</span><br><span class="line">  删除文件，但是会有提示确认对话，输入y确认删除！</span><br><span class="line">rm -r 删除目录，需要确认</span><br><span class="line">  删除目录需要指定r参数，否则会提示不能删除</span><br><span class="line">  r是给rm加入递归(recursion)特性，也就是目标为文件夹时删除文件夹下所有数据</span><br><span class="line">rm -f 强制删除</span><br><span class="line">  f给rm加入强制(force)特性，也就是遇到删除时不需要询问即可直接删除</span><br><span class="line">  注意：这个操作还是比较危险的，建议慎用，因为删除之后就找不到了</span><br><span class="line">  Linux系统中没有回收站</span><br><span class="line">rm -rf 递归删除目录及其文件</span><br><span class="line">  Linux中最危险的操作，最具破坏性</span><br><span class="line">  rf参数可以强制递归删除任何数据，并且没有任何提示，慎用！慎用！慎用！</span><br></pre></td></tr></table></figure>

<h5 id="复制-粘贴-移动"><a href="#复制-粘贴-移动" class="headerlink" title="复制\粘贴\移动"></a>复制\粘贴\移动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp 复制&amp;粘贴文件</span><br><span class="line">  cp hello.txt  hello-bak.txt</span><br><span class="line">cp -r 复制&amp;粘贴文件或目录  复制目录，需要指定r参数</span><br><span class="line">  cp -r abc xyz</span><br><span class="line">mv 移动（剪切）文件或目录</span><br><span class="line">  mv xyz abc </span><br><span class="line">移动一个文件夹下的所有</span><br><span class="line">mv xxx&#x2F;* xxxx&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="远程复制"><a href="#远程复制" class="headerlink" title="远程复制"></a>远程复制</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~~~</span><br><span class="line">常见用法：</span><br><span class="line">从本地复制（192.168.182.131）到远程主机 （192.168.182.130）</span><br><span class="line">scp &#x2F;root&#x2F;hello.txt 192.168.182.130:&#x2F;root</span><br><span class="line">提示：</span><br><span class="line">显示进度在scp后添加-v</span><br><span class="line">复制目录在scp后添加-r</span><br><span class="line">静默复制模式在scp后添加-q</span><br><span class="line">scp -rq &#x2F;root&#x2F;abc 192.168.182.130:&#x2F;root</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  文件属性</span><br><span class="line"></span><br><span class="line">[![7tlJiD.png](https:&#x2F;&#x2F;s4.ax1x.com&#x2F;2022&#x2F;01&#x2F;16&#x2F;7tlJiD.png)](https:&#x2F;&#x2F;imgtu.com&#x2F;i&#x2F;7tlJiD)</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">黑带七段</span><br><span class="line">第一段：权限</span><br><span class="line">第一个字符代表文件（-）、目录（d），链接（l）</span><br><span class="line">其余字符每3个一组（rwx），读（r）、写（w）、执行（x）</span><br><span class="line">第一组：文件所有者的权限是读、写和执行</span><br><span class="line">第二组：与文件所有者同一组的用户的权限</span><br><span class="line">第三组：不与文件所有者同组的其他用户的权限</span><br><span class="line">也可用数字表示为：r&#x3D;4，w&#x3D;2，x&#x3D;1，如：权限6可以表示为r+w&#x3D;6</span><br><span class="line">第二段：目录&#x2F;链接个数</span><br><span class="line">对于目录文件，表示它的第一级子目录的个数</span><br><span class="line">注意：此处的值要减2才等于该目录下的子目录的实际个数(目录下默认包含.和..这两个目录)</span><br><span class="line">对于其他文件，默认是1</span><br><span class="line">第三段：所属用户</span><br><span class="line">第四段：所属组</span><br><span class="line">第五段：文件大小（字节）</span><br><span class="line">第六段：最后修改时间</span><br><span class="line">第七段：文件\文件夹名称</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### chmod 分配权限</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">常见用法：</span><br><span class="line">  chmod u+x xxx.txt 给当前所有者添加执行权限【x表示是执行权限】</span><br><span class="line"> 针对hello.txt文件，给当前用户添加执行权限</span><br><span class="line">  chmod 777 xxx.txt 添加rwxrwxrwx权限</span><br><span class="line">  给hello.txt添加777权限</span><br><span class="line">  chmod 777 hello.txt</span><br><span class="line">chmod -R 777 xxx 给指定目录递归添加rwxrwxrwx权限</span><br><span class="line">  给abc目录及其子目录中的所有内容添加777权限</span><br><span class="line">  chmod -R 777 abc</span><br><span class="line">  撤销权限</span><br><span class="line">  chmod u-w xxx.txt</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  内容查看</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">1.cat 显示文本内容，类似windows中的type(顺序输出)</span><br><span class="line">  cat anaconda-ks.cfg </span><br><span class="line">cat -b 显示行号输出</span><br><span class="line">  cat -b anaconda-ks.cfg </span><br><span class="line">2.分屏显示 more</span><br><span class="line">  用一次显示一屏，没有显示完时最后一行显示进度。回车显示下一行，按b显示上一页，空格显示下一页，q退出。</span><br><span class="line">  根据当前屏幕大小显示一屏内容</span><br><span class="line">  more anaconda-ks.cfg</span><br><span class="line">3.tail -f xxx 动态查看信息</span><br><span class="line">  tail -n xxx 打印最后n行</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### 压缩、解压</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">常见用法：压缩和解压</span><br><span class="line">参数：</span><br><span class="line">-z 是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</span><br><span class="line">-c 创建一个压缩文件的参数指令(create 的意思)；</span><br><span class="line">-x 解开一个压缩文件的参数指令！</span><br><span class="line">-v 压缩的过程中显示文件！</span><br><span class="line">-f 使用档案名字，这个参数是最后一个参数，后面只能接档案名！</span><br><span class="line">注意：特别注意，在参数的下达中， c&#x2F;x 仅能存在一个！不可同时存在！</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">**压缩**</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">tar -zcvf 打包及压缩（gzip方式）</span><br><span class="line">将abc目录的内容打包压缩为abc.tar.gz</span><br><span class="line">  [root@localhost ~]# ll</span><br><span class="line">  drwxrwxrwx. 3 root root   17 Mar 29 14:24 abc</span><br><span class="line">  [root@localhost ~]# tar -zcvf abc.tar.gz abc</span><br><span class="line">  [root@localhost ~]# ll</span><br><span class="line">  drwxrwxrwx. 3 root root   17 Mar 29 14:24 abc</span><br><span class="line">  -rw-r--r--. 1 root root  130 Mar 29 15:24 abc.tar.gz</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">**解压**</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">tar -zxvf 解压（gzip包）</span><br><span class="line">tar -zxvf abc.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ll</span><br><span class="line">drwxrwxrwx. 3 root root   17 Mar 29 14:24 abc</span><br><span class="line">-rw-r--r--. 1 root root  130 Mar 29 15:24 abc.tar.gz</span><br><span class="line">[root@localhost ~]# mkdir test</span><br><span class="line">[root@localhost ~]# cd test&#x2F;</span><br><span class="line">[root@localhost test]# mv ..&#x2F;abc.tar.gz  .</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 130 Mar 29 15:24 abc.tar.gz</span><br><span class="line">[root@localhost test]# tar -zxvf abc.tar.gz </span><br><span class="line">abc&#x2F;</span><br><span class="line">abc&#x2F;xyz&#x2F;</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxrwxrwx. 3 root root  17 Mar 29 14:24 abc</span><br><span class="line">-rw-r--r--. 1 root root 130 Mar 29 15:24 abc.tar.gz</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### which查找</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">which xxxx (应该是去path里查找命令)</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### find查找文件</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line"> find .&#x2F; -name guava*</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#####  输出及显示</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">echo：将内容输出到设备，类似java里面的system.out.println()</span><br><span class="line">常见用法：</span><br><span class="line">echo &quot;hello\t\t world！&quot; 不解析转义字符</span><br><span class="line">echo -e &quot;hello\t\t world！&quot; 解析转义字符</span><br><span class="line">echo $PATH 输出环境变量</span><br><span class="line">注意：在打印变量信息的时候，使用echo $&#123;PATH&#125; 也可以，效果是一样的</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# echo &quot;hello\t\t world！&quot;</span><br><span class="line">hello\t\t world！</span><br><span class="line">[root@localhost ~]# echo -e &quot;hello\t\t world！&quot;</span><br><span class="line">hello            world！</span><br><span class="line">[root@localhost ~]# echo $PATH</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</span><br><span class="line">[root@localhost ~]# echo $&#123;PATH&#125;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  软件安装和卸载</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;第一种：压缩包安装方式，直接解压，配置相应的环境变量即可使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yum集成了连接网络，软件安装，删除，更新等功能，yum在配置好repo后，机器只要连网，就能智能化安装软件，使用yum 安装的好处在于可以自动安装软件需要的依赖包</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">安装</span><br><span class="line">  yum install -y 安装</span><br><span class="line">升级</span><br><span class="line">  yum update 不跟则更新全部</span><br><span class="line">查找和显示</span><br><span class="line">  yum info 显示包信息</span><br><span class="line">  yum list 不跟则显示已安装或可安装包</span><br><span class="line">删除程序</span><br><span class="line">  yum remove</span><br><span class="line">清除缓存</span><br><span class="line">  yum clean all 清除所有缓存（包含文件、旧软件）</span><br><span class="line">在这里大家先了解yum的基本语法，等后面具体使用到的时候我们再演示。</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  查看操作历史</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">history保留了最近执行的命令记录，默认可以保留1000。</span><br><span class="line">历史清单从0开始编号到最大值。</span><br><span class="line">常见用法：</span><br><span class="line">  history N 显示最近N条命令</span><br><span class="line">  history -c 清除所有的历史记录</span><br><span class="line">  history -w xxx.txt 保存历史记录到文本xxx.txt</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  磁盘使用情况</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">使用df命令查看硬盘使用情况</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 898M     0  898M   0% &#x2F;dev</span><br><span class="line">tmpfs                    910M     0  910M   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs                    910M  9.5M  901M   2% &#x2F;run</span><br><span class="line">tmpfs                    910M     0  910M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos-root   17G  1.2G   16G   7% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1               1014M  150M  865M  15% &#x2F;boot</span><br><span class="line">tmpfs                    182M     0  182M   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####   清屏小命令</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">[root@localhost ~]# clear</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####   查看内存使用情况</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">free 查看内存和交换空间的使用情况</span><br><span class="line">常见用法：</span><br><span class="line">free -m：显示内存单位为MB</span><br><span class="line">free -h：根据值的大小，显示易于识别的单位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# free -m</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1819         169        1509           9         140        1501</span><br><span class="line">Swap:          2047           0        2047</span><br><span class="line">[root@localhost ~]# free -h</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1.8G        169M        1.5G        9.5M        140M        1.5G</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#####  关机重启快捷命令</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">shutdown -h now 关机</span><br><span class="line"></span><br><span class="line">reboot -h now 重启</span><br><span class="line"></span><br><span class="line">exit 退出当前登录状态</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### 查看linux的存储空间使用情况</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">df -h</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 高级命令</span><br><span class="line"></span><br><span class="line">##### Linux高级命令之文件相关</span><br><span class="line"></span><br><span class="line">###### vi文件编辑利器的使用</span><br><span class="line"></span><br><span class="line">**基础操作**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;文件不存在时，自动创建一个空文件，也可以用touch</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不可编辑模式</span><br><span class="line">可编辑模式</span><br></pre></td></tr></table></figure>

<p><strong>高级操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查找字符串  对文件中字符串的快速查找</span><br><span class="line">  vi里的命令模式：&#x2F;查找内容</span><br><span class="line">  有多个结果是n代表下一个查询结果</span><br><span class="line">  </span><br><span class="line">2.查找某一行内容  已经知道了需要修改的内容在文件的第几行</span><br><span class="line">  vi里的命令模式：shift+冒号+具体行号</span><br><span class="line">  </span><br><span class="line">3.使vi编辑里每行具有行号</span><br><span class="line">  shift+冒号+set nu</span><br><span class="line">  </span><br><span class="line">4.复制粘贴</span><br><span class="line">  使用vi命令打开hello.txt，把光标移动到希望复制的那一行内容上面，然后连按yy，这样就把这一行内容复制上了，然后按p就会把刚才复制的内容粘贴到下一行，按一次p粘贴一行，一直按到你喊停为止。</span><br><span class="line">最后按shift和: 输入wq保存退出即可。</span><br><span class="line">多行赋值：nyy</span><br><span class="line"></span><br><span class="line">命令行模式下输入</span><br><span class="line">6,9 co 12</span><br><span class="line">复制第6行到第9行之间的内容到第12行后面。</span><br><span class="line"></span><br><span class="line">有时候不想费劲看多少行或复制大量行时，可以使用标签来替代</span><br><span class="line">光标移到起始行，输入ma</span><br><span class="line">光标移到结束行，输入mb</span><br><span class="line">光标移到粘贴行，输入mc</span><br><span class="line">然后 :&#39;a,&#39;b co &#39;c   把 co 改成 m 就成剪切了</span><br><span class="line">要删除多行的话，可以用 ：5, 9 de</span><br><span class="line"></span><br><span class="line">5.快速删除</span><br><span class="line">  进入命令模式，把光标定位到想要删除的那一行内容上面，连按dd，就可以删除当前行的内容。</span><br><span class="line">  还有一个大招，如果想要清空当前行下的所有内容，先连按999，然后再连按dd，这样就可以清空光标所在行下的所有内容了。</span><br><span class="line">6.快速跳到文件首行和末行</span><br><span class="line">  在命令模式下，通过大写的G可以快速将光标移动到最后一行</span><br><span class="line">  在命令模式下输入小写的gg即可快速跳转到第一行</span><br></pre></td></tr></table></figure>



<h6 id="文件内容统计相关命令-wc-sort-uniq-管道-head"><a href="#文件内容统计相关命令-wc-sort-uniq-管道-head" class="headerlink" title="文件内容统计相关命令(wc;sort;uniq;管道;head)"></a>文件内容统计相关命令(wc;sort;uniq;管道;head)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. wc：统计字数相关信息</span><br><span class="line">  Usage: wc [OPTION]... [FILE]...</span><br><span class="line">  </span><br><span class="line">  -c, --bytes            print the byte counts      字节数(含换行符)</span><br><span class="line">  -m, --chars            print the character counts  字符数(含换行符)</span><br><span class="line">  -l, --lines            print the newline counts    行数</span><br><span class="line">      --files0-from&#x3D;F    read input from the files specified by</span><br><span class="line">                           NUL-terminated names in file F;</span><br><span class="line">                           If F is - then read names from standard input</span><br><span class="line">  -L, --max-line-length print the length of the longest line 最长行字符数（不含换行）</span><br><span class="line">  -w, --words      print the word counts   表示文件中单词的个数，默认使用空白符切割</span><br><span class="line">      --help     display this help and exit</span><br><span class="line">      --version  output version information and exit</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. sort：排序</span><br><span class="line">  sort命令是对数据进行排序的，它后面也支持很多个参数，我们在这里只讲三个</span><br><span class="line">  -n的意思是按照数据的数值大小排序</span><br><span class="line">  这个时候是正序排序，能不能倒序排序呢？当然可以，倒序需要使用-r</span><br><span class="line">  单纯使用-r是不行的，需要让n和r同时上场</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat num.txt </span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">[root@localhost ~]# sort num.txt </span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">9</span><br><span class="line">[root@localhost ~]# sort -n num.txt </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">[root@localhost ~]# sort -r num.txt </span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">[root@localhost ~]# sort -nr num.txt </span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~~~</span><br><span class="line">[root@localhost ~]# cat num2.txt </span><br><span class="line">bc 2</span><br><span class="line">ax 1</span><br><span class="line">aa 9</span><br><span class="line">dd 7</span><br><span class="line">xc 15</span><br><span class="line">[root@localhost ~]# sort -n num2.txt 对第一列字母排序</span><br><span class="line">aa 9</span><br><span class="line">ax 1</span><br><span class="line">bc 2</span><br><span class="line">dd 7</span><br><span class="line">xc 15</span><br><span class="line"> </span><br><span class="line">在-n的基础上增加-k 这个参数后面需要指定一个数字，这个数字表示是文件中的第几列，编号从1开始</span><br><span class="line">[root@localhost ~]# sort -k 2 -n num2.txt   </span><br><span class="line">ax 1</span><br><span class="line">bc 2</span><br><span class="line">dd 7</span><br><span class="line">aa 9</span><br><span class="line">xc 15</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">3. uniq：检查重复的行列</span><br><span class="line">什么参数都不带的</span><br><span class="line">[root@localhost ~]# cat hello.txt </span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">[root@localhost ~]# uniq  hello.txt 出现一次也是重复一次</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">-c参数，这个参数表示在输出行的前面加上数据在文件中重复出现的次数</span><br><span class="line">[root@localhost ~]# uniq -c hello.txt </span><br><span class="line">      6 hello world!</span><br><span class="line">      </span><br><span class="line">-u参数，表示返回文件中不重复的行</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">我重新创建一个文件，test.txt。我想要对这个文件中的内容进行去重，最后返回hello和abc</span><br><span class="line">[root@localhost ~]# cat test.txt </span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">abc</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">在这执行uniq test.txt 【对连续相同的数据行进行去重】</span><br><span class="line">[root@localhost ~]# uniq test.txt       </span><br><span class="line">hello</span><br><span class="line">abc</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">最终显示的结果并不是我想要的</span><br><span class="line">目前使用uniq test.txt这个命令最终获取的结果有问题是因为文件中的数据没有排序，相同的数据不是连续在一起的，uniq只能对连续在一起的重复内容进行去重，那我们想要利用这个特性的话就需要先对数据进行排序，再去重</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">4. 管道命令，管道命令很简单，就是一个 |</span><br><span class="line">通过管道可以把前面一个命令的输出结果传递给后面一个命令</span><br><span class="line">[root@localhost ~]# sort test.txt | uniq</span><br><span class="line">abc</span><br><span class="line">hello</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">5. head：取前N条数据，默认返回前10条，后面可以通过指定数字来控制返回的数据条数</span><br><span class="line"> head -number xxx</span><br><span class="line"> </span><br><span class="line"> 这样是没有什么意义的，我们想取前几条数据其实就是想取topN，这样直接获取的数据是没有排序的，所以可以把sort和head命令放在一块使用</span><br><span class="line">[root@localhost ~]# sort -nr num.txt  | head -3</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">其实我们前面学习的这些命令都可以处理管道传输过来的数据。</span><br><span class="line">例如 cat和sort命令</span><br><span class="line">[root@localhost ~]# cat num.txt  | sort -nr</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">##### Linux高级命令之日期相关(date)</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">1.date命令默认获取系统当前时间</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date</span><br><span class="line">Sun Mar 29 20:48:15 CST 2026</span><br><span class="line"></span><br><span class="line">date命令支持对时间进行格式化</span><br><span class="line">通过%Y，%m，%d这些参数可以对日期进行格式化</span><br><span class="line">date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">注意：date后面的这些参数中间如果没有空格，可以省略双引号。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2026-03-29 21:06:45</span><br><span class="line"></span><br><span class="line">2.时间戳</span><br><span class="line">这里面的%s表示获取自1970-01-01 00:00:00以来的秒数</span><br><span class="line">[root@localhost ~]# date +%s</span><br><span class="line">1585487600</span><br><span class="line"></span><br><span class="line">虽然date命令没有直接支持获取毫秒数，但是从秒换算为毫秒也很简单啊，最直接粗暴的方式就是在秒数后面加3个0</span><br><span class="line">[root@localhost ~]# date +%s&quot;000&quot;</span><br><span class="line">1585487796000</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">3.获取指定时间的时间戳</span><br><span class="line">date命令 提供的有--date这个参数，可以指定时间</span><br><span class="line">date --date&#x3D;&quot;2026-01-01 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date --date&#x3D;&quot;2026-01-01 00:00:00&quot;</span><br><span class="line">Wed Jan  1 00:00:00 CST 2026</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date --date&#x3D;&quot;2026-01-01 00:00:00&quot; +%s </span><br><span class="line">1577808000</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">4.获取昨天的日期，这个需求也需要使用--date参数实现</span><br><span class="line">[root@localhost ~]# date --date&#x3D;&quot;1 days ago&quot;</span><br><span class="line">Sat Mar 28 21:36:37 CST 2026</span><br><span class="line"></span><br><span class="line">再对返回的结果进行格式化，只获取年月日</span><br><span class="line">date --date&#x3D;&quot;1 days ago&quot; +%Y-%m-%d</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date --date&#x3D;&quot;1 days ago&quot; +%Y-%m-%d</span><br><span class="line">2026-03-28</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### Linux高级命令之进程相关</span><br><span class="line"></span><br><span class="line">###### ps：显示进程信息</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">一个典型应用就是在后面跟e和f参数，显示系统内的所有进程</span><br><span class="line">[root@localhost ~]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 20:46 ?        00:00:01 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd --sw</span><br><span class="line">root          2      0  0 20:46 ?        00:00:00 [kthreadd]</span><br><span class="line">root          4      2  0 20:46 ?        00:00:00 [kworker&#x2F;0:0H]</span><br><span class="line">........</span><br><span class="line"></span><br><span class="line">grep命令以后，就可以把这两个命令组合到一块使用</span><br><span class="line">ps -ef | grep java</span><br><span class="line"></span><br><span class="line">这是一个比较常用的操作，过滤出系统内的java进程信息</span><br><span class="line">[root@localhost ~]# ps -ef | grep java</span><br><span class="line">root       2239   1973  0 22:19 pts&#x2F;0    00:00:00 grep --color&#x3D;auto java</span><br><span class="line">注意：这里面返回的grep --color&#x3D;auto这一行信息表示是grep这个命令本身</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ps -ef | grep python</span><br><span class="line">root        736      1  0 20:46 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python2 -Es &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid</span><br><span class="line">root       1070      1  0 20:46 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python2 -Es &#x2F;usr&#x2F;sbin&#x2F;tuned -l -P</span><br><span class="line">root       2241   1973  0 22:19 pts&#x2F;0    00:00:00 grep --color&#x3D;auto python</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">###### netstat：显示端口信息</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;netstat也是显示进程相关信息的，只不过可以比ps命令额外显示端口相关的信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是这个命令默认是没有安装的，最方便的方式就是使用yum来在线安装</span><br><span class="line">yum install -y net-tools</span><br><span class="line">netstat的常见用法是</span><br><span class="line">netstat -anp</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# netstat -anp</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1312&#x2F;master         </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1071&#x2F;sshd           </span><br><span class="line">tcp        0     52 192.168.182.132:22      192.168.182.1:51472     ESTABLISHED 1969&#x2F;sshd: root@pts </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1312&#x2F;master         </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1071&#x2F;sshd       </span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里会显示很多的进程和端口信息，netstat也需要和grep命令结合使用</span><br><span class="line">假设我们想看一下ssh服务的端口使用情况，ssh服务的端口是22，如果ssh服务开启了，那么22这个端口就会被监听。</span><br><span class="line">netstat -anp | grep 22</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# netstat -anp | grep 22</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1071&#x2F;sshd           </span><br><span class="line">tcp        0     52 192.168.182.132:22      192.168.182.1:51472     ESTABLISHED 1969&#x2F;sshd: root@pts </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1071&#x2F;sshd</span><br></pre></td></tr></table></figure>

<h6 id="jps：显示Java进程信息"><a href="#jps：显示Java进程信息" class="headerlink" title="jps：显示Java进程信息"></a>jps：显示Java进程信息</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps：类似ps命令，不同的是ps是用来显示所有进程信息的，而jps只显示Java进程</span><br><span class="line">准确的说jps是显示当前用户已启动的Java进程信息，信息包括进程号和简短的进程command</span><br><span class="line">注意：jps是Java提供的命令，只有在安装配置好Java环境之后才能使用</span><br></pre></td></tr></table></figure>

<h6 id="top：动态监控进程信息"><a href="#top：动态监控进程信息" class="headerlink" title="top：动态监控进程信息"></a>top：动态监控进程信息</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  主要作用在于动态显示系统消耗资源最多的进程信息，包含进程ID、内存占用、CPU占用等</span><br><span class="line">和ps命令作用基本相同，唯一的区别是top命令能够动态显示进程信息</span><br><span class="line">  注意：这里的CPU使用情况是总体CPU的使用情况，如果是多核CPU，想查看具体每个CPU的使用情况的话可以在监控模式中按键盘上的1，就可以查看每一个CPU的情况了</span><br><span class="line">  按q可以退出此监控模式</span><br></pre></td></tr></table></figure>

<h6 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以使用前面学习的ps命令，找到程序对应的PID，然后使用kill命令杀掉这个进程，进程被杀掉了，对应的程序也就停止了</span><br><span class="line"></span><br><span class="line">如果遇到有一些进程使用kill命令杀不掉，那就可以使用kill -9 PID ,这样可以实现强制杀进程。</span><br></pre></td></tr></table></figure>

<h5 id="Linux三剑客"><a href="#Linux三剑客" class="headerlink" title="Linux三剑客"></a>Linux三剑客</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这三个命令合称Linux的三剑客，从三剑客这个名字上大家可想而知它们有多厉害，如果把它们的全部内容都讲完的话，至少讲三天三夜，最可怕的是讲了三天三夜，最后你会发现里面很多的知识点是我们搞大数据开发压根用不到的</span><br></pre></td></tr></table></figure>

<h6 id="grep：查找"><a href="#grep：查找" class="headerlink" title="grep：查找"></a>grep：查找</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用于查找文件里符合条件的字符串</span><br><span class="line">[root@localhost ~]# cat hello.txt        </span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line">[root@localhost ~]# grep abc hello.txt      </span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">grep后面跟的这个字符串是可以支持正则表达式的</span><br><span class="line">查询hello.txt中以字母a开头的内容，这样写也是可以的</span><br><span class="line">[root@localhost ~]# grep ^a hello.txt  </span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">忽略大小写功能</span><br><span class="line">[root@localhost ~]# grep ABC hello.txt   </span><br><span class="line">[root@localhost ~]# grep -i ABC hello.txt  </span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">查询出来对应字符串带行号</span><br><span class="line">[root@localhost ~]# grep -i ABC -n hello.txt </span><br><span class="line">7:abc</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef | grep java</span><br><span class="line">root       2497   2247  0 22:34 pts&#x2F;1    00:00:00 grep --color&#x3D;auto java</span><br><span class="line"></span><br><span class="line">显示出这个信息其实说明没有找到java进程信息，下面返回的这一行表示是grep进程本身，这样容易给我们造成错觉，想把它去掉，怎么去掉呢？</span><br><span class="line"></span><br><span class="line">很简单，使用grep加上-v参数再做一次过滤即可，表示忽略包含指定字符串的数据。</span><br><span class="line">[root@localhost ~]# ps -ef | grep java | grep -v grep</span><br></pre></td></tr></table></figure>

<h6 id="sed：编辑"><a href="#sed：编辑" class="headerlink" title="sed：编辑"></a>sed：编辑</h6><p><strong>增添数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">之前我们修改文件是使用vi命令，大家可以想象一个场景，如果让你同时去修改上千个文件里面的某一行内容，你再使用vi去操作，是不是有点手软，虽然这个上千个文件有点夸张，但是在实际工作中类似这样同时修改10几个文件的场景还是有的，大家不要想着，就10几个文件，我使用vi命令不到10分钟就搞完了，如果你这样想，那就完了，程序员一定要懒，这个懒是指能用程序去做的，千万不要动手。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat hello.txt </span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line">[root@localhost ~]# sed &#39;2a\haha&#39; hello.txt  （append）</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">haha</span><br><span class="line">abc</span><br><span class="line">注意了，sed 默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅限于缓冲区中的数据，最终把缓冲区内的数据输出到控制台</span><br><span class="line">sed &#39;1a\haha&#39; hello.txt 此操作会将数据添加到第一行下面(也就是第二行的位置)</span><br><span class="line">sed &#39;0a\haha&#39; hello.txt 此操作会报错，行号是从1开始的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i的意思表示在指定行的前面插入一行，它的使用方式和参数a一样</span><br><span class="line">我们来演示一下</span><br><span class="line">[root@localhost ~]# sed &#39;1i\haha&#39; hello.txt   （insert)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特殊参数 $ 它在这里表示是最后一行的意思</span><br><span class="line">[root@localhost ~]# sed &#39;$i\haha&#39; hello.txt</span><br></pre></td></tr></table></figure>

<p><strong>删除数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed &#39;7d&#39; hello.txt  </span><br><span class="line">[root@localhost ~]# sed &#39;$d&#39; hello.txt   $参数，删除最后一行，更加便捷</span><br></pre></td></tr></table></figure>

<p><strong>替换数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~~~</span><br><span class="line">修改一下文件内容中的l这个字符</span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;1&#39; hello.txt</span><br><span class="line">sed后面的参数格式为[address]s&#x2F;pattern&#x2F;replacement&#x2F;flags</span><br><span class="line"></span><br><span class="line">address 表示指定要操作的具体行，是一个可选项</span><br><span class="line">s 表示替换操作，pattern 指的是需要替换的内容，replacement 指的是要替换的新内容，flags有多种用法，我们挑两种说一下</span><br><span class="line">  第一种就是flags可以表示为1~512之间的任意一个数字，表示指定要替换的字符串在这一行中出现第几次时才进行替换</span><br><span class="line">  第二种就是flags可以直接表示为g，这样的意思就是对每一行数据中所有匹配到的内容全部进行替换</span><br><span class="line">  如果flags位置的值为空，则只会在第一次匹配成功时做替换操作</span><br><span class="line">  </span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;1&#39; hello.txt </span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;2&#39; hello.txt </span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;3&#39; hello.txt</span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;g&#39; hello.txt </span><br><span class="line">sed &#39;s&#x2F;l&#x2F;a&#x2F;&#39; hello.txt</span><br><span class="line">上述是每一行只要满足要求，都会替换</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">我们现在的替换操作都是会匹配文件中的所有行，如果我们只想替换指定行中的内容怎么办呢？只需要增加address 参数即可。</span><br><span class="line"> sed &#39;2s&#x2F;l&#x2F;a&#x2F;g&#39; hello.txt 对第二行进行这种操作</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">注意了，咱们前面所讲的sed命令的所有操作，在执行之后都不会修改源文件中的内容，这样只能作为测试，如果需要修改源文件的话，其实也很简单，只需要增加一个 -i 参数即可</span><br><span class="line">[root@localhost ~]# sed -i &#39;2s&#x2F;l&#x2F;a&#x2F;g&#39; hello.txt </span><br><span class="line">[root@localhost ~]# cat hello.txt </span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;注意：对空文件执行sed 插入没用</span><br></pre></td></tr></table></figure>

<h6 id="awk：分析"><a href="#awk：分析" class="headerlink" title="awk：分析"></a>awk：分析</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~~~</span><br><span class="line">awk的基本格式：awk [option] programe file</span><br><span class="line"></span><br><span class="line">这里的option是一个可选项，一般在这里来指定文件中数据的字段分隔符</span><br><span class="line">programe 是具体的处理逻辑</span><br><span class="line">file表示我们要操作的文件</span><br><span class="line"></span><br><span class="line">在具体使用awk之前我们还需要掌握awk的一个特性，就是awk在处理文本数据的时候，它会自动给每行中的每个字段分配一个变量</span><br><span class="line"></span><br><span class="line">变量从1开始，</span><br><span class="line">$1表示是文本中的第1个数据字段</span><br><span class="line">$2表示是文本中的第2个数据字段</span><br><span class="line">以此类推。</span><br><span class="line">还有一个特殊的 $0 它代表整个文本行的内容</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">[root@localhost ~]# cat hello.txt </span><br><span class="line">hello world!</span><br><span class="line">heaao worad!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line">[root@localhost ~]# awk &#39;&#123;print $1&#125;&#39; hello.txt </span><br><span class="line">hello</span><br><span class="line">heaao</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">abc</span><br><span class="line">[root@localhost ~]# awk &#39;&#123;print $2&#125;&#39; hello.txt  </span><br><span class="line">world!</span><br><span class="line">worad!</span><br><span class="line">world!</span><br><span class="line">world!</span><br><span class="line">world!</span><br><span class="line">world!</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# awk &#39;&#123;print $0&#125;&#39; hello.txt  </span><br><span class="line">hello world!</span><br><span class="line">heaao worad!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">~~~</span><br><span class="line">linux中还有一个文件 &#x2F;etc&#x2F;passwd 里面存储的是用户信息</span><br><span class="line">但是这个文件中的字段之间是使用:分割的，这个时候想要操作某列字段的话就需要我们手工指定字段分隔符了。</span><br><span class="line">咱们前面说了，可以在option里面指定字段分隔符，通过-F 参数</span><br><span class="line">awk -F: &#39;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">我们在处理数据的时候还可以对数据进行一些过滤操作，只获取满足条件的数据</span><br><span class="line">在programe中可以使用正则表达式进行过滤，</span><br><span class="line">awk &#39;&#x2F;world&#x2F; &#123;print $1&#125;&#39; hello.txt 这种写法表示对每次读取到的那一行数据进行匹配,然后输出匹配的每行第一个字段</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;如果我们只想对某一列数据进行匹配呢？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;($1 ~ &#x2F;world&#x2F;) &#123;print $1&#125;&#39; hello.txt 在这里面可以通过$来指定具体是哪一列，需要把具体的对比逻辑放到小括号里面</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# awk &#39;($1 ~ &#x2F;world&#x2F;) &#123;print $0&#125;&#39; hello.txt    </span><br><span class="line">[root@localhost ~]# awk &#39;($2 ~ &#x2F;world&#x2F;) &#123;print $0&#125;&#39; hello.txt  </span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# awk &#39;($2 ~ &#x2F;wor[a-z]d&#x2F;) &#123;print $1&#125;&#39; hello.txt  </span><br><span class="line">hello world!</span><br><span class="line">heaao worad!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">注意：这里如果是不匹配的意思的话需要使用 !~</span><br><span class="line"></span><br><span class="line">ok，针对awk的使用我们暂时先掌握这些就可以了</span><br></pre></td></tr></table></figure>

<h6 id="三剑客配合使用"><a href="#三剑客配合使用" class="headerlink" title="三剑客配合使用"></a>三剑客配合使用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -n 查找内容 &#x2F;etc&#x2F;sudoers 查找内容，以行号方式输出</span><br><span class="line">sed &#39;行号a\插入内容&#39; -i &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>

<p>‘</p>
<h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><h3 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h3><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><h2 id="不同VMware版本"><a href="#不同VMware版本" class="headerlink" title="不同VMware版本"></a>不同VMware版本</h2><h3 id="VMware-workstation-15-player"><a href="#VMware-workstation-15-player" class="headerlink" title="VMware workstation 15 player"></a>VMware workstation 15 player</h3><h4 id="VMware-workstation-15-player没有克隆虚拟机的功能，解决办法？"><a href="#VMware-workstation-15-player没有克隆虚拟机的功能，解决办法？" class="headerlink" title="VMware workstation 15 player没有克隆虚拟机的功能，解决办法？"></a>VMware workstation 15 player没有克隆虚拟机的功能，解决办法？</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VMware workstation有此功能</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_44763047/article/details/111772941" target="_blank" rel="external nofollow noopener noreferrer">方法url1</a></p>
<p><a href="https://blog.csdn.net/weixin_44324669/article/details/104740466" target="_blank" rel="external nofollow noopener noreferrer">方法url2</a></p>
<h3 id="VMware-workstation"><a href="#VMware-workstation" class="headerlink" title="VMware workstation"></a>VMware workstation</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>linux命令</category>
        <category>linux异常</category>
      </categories>
  </entry>
  <entry>
    <title>IDM破解</title>
    <url>/IDM%E7%A0%B4%E8%A7%A3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c3ef0d90e9668753b03184dba9152b88e6ab9dc08dda5f22d54c42d05f7d410c">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64a1d59c1284dd092db131f60ca15fd43a800f4bdb3c18f5d23ebc2112ac0b618dcd4f911f4730f9b33f62f7e9ecfdc11c40f360b63c1b8e7ab3a73a1ff9ee0249570b2a0e8539b47afc9a9a68ea748b47f07157c7bdda91ed044c7e52f10a72953e369a665131ef1bc7e69beeafba612807b1a951f7fc0a823be343e0fc92441470330495c08320ab53e0459713ddd945fa53450de67a4eca1c25f7ab3d3598d7a9c29f47c8727ba30eb0124add458d34fcb47b330ce962059e3134d1212e9bb0dd63d0486999ed46688b2836aaa87e642d673aca5df700dcf8357e472f25ae48e2b561e642de3b5f9ba6029dd151b5545bf2b7c999d411a514fe9c6242e5798679904f162359bb5dbe7ac8d1588d7237</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-sql执行过程遇到的异常</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="存储过程变量输出"><a href="#存储过程变量输出" class="headerlink" title="存储过程变量输出"></a>存储过程变量输出</h2><h2 id="1-格式转换"><a href="#1-格式转换" class="headerlink" title="1.格式转换"></a>1.格式转换</h2><p>CAST(XXX AS XXX)</p>
<h2 id="2-查看存在的存储过程"><a href="#2-查看存在的存储过程" class="headerlink" title="2.查看存在的存储过程"></a>2.查看存在的存储过程</h2><p><a href="https://www.cnblogs.com/sunliyuan/p/6625862.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="3-触发器中For-和-after等同"><a href="#3-触发器中For-和-after等同" class="headerlink" title="3.触发器中For 和 after等同"></a>3.触发器中For 和 after等同</h2><h2 id="4-当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"><a href="#4-当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除" class="headerlink" title="4.当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"></a>4.当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除</h2><p><em>选中要操作的表，右键-&gt;设计-&gt;顶部的关系按钮-&gt;insert和update规范-&gt;设置为级联操作</em></p>
<h2 id="5-关闭保存要求重新创建表的更改"><a href="#5-关闭保存要求重新创建表的更改" class="headerlink" title="5.关闭保存要求重新创建表的更改"></a>5.关闭保存要求重新创建表的更改</h2><p><em>工具-&gt;选项-&gt;designer-&gt;</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库编程</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h1><h2 id="SQL-Server编程结构"><a href="#SQL-Server编程结构" class="headerlink" title="SQL Server编程结构"></a>SQL Server编程结构</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="声明局部变量"><a href="#声明局部变量" class="headerlink" title="声明局部变量"></a>声明局部变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @局部变量名 数据类型</span><br><span class="line">[， @局部变量名 数据类型]</span><br></pre></td></tr></table></figure>

<p><em>可以同时定义多个变量，中间用逗号隔开</em></p>
<h4 id="赋值局部变量"><a href="#赋值局部变量" class="headerlink" title="赋值局部变量"></a>赋值局部变量</h4><p><em>为局部变量赋值可以用SET或SELECT语句</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @变量名=表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>,..,列n</span><br><span class="line">@变量名=表达式</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>

<p><em>注: 如果SELECT语句返回多个值，则局部变量取最后一个返回值。例：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @Sname = Sname </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex = <span class="string">'男'</span></span><br></pre></td></tr></table></figure>

<h4 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h4><h5 id="Print语句"><a href="#Print语句" class="headerlink" title="Print语句"></a>Print语句</h5><p><em>print语句只能显示字符数据类型</em></p>
<h5 id><a href="#" class="headerlink" title></a></h5><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注释文本*/</span></span><br><span class="line">或</span><br><span class="line"><span class="comment">-- 注释文本</span></span><br></pre></td></tr></table></figure>

<h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p><em>批处理是成组执行的一条或多条T-SQL指令</em></p>
<p><em>GO语句用于指定批处理语句的结束处，单独使用一行。本身不是T-SQL的部分</em></p>
<p><strong>注意</strong>：</p>
<p>不能在同一个批处理处，先删除，后使用</p>
<p>不在在同一个批处理处，先修改，后使用</p>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="BEGIN…END"><a href="#BEGIN…END" class="headerlink" title="BEGIN…END"></a>BEGIN…END</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">语句</span><br><span class="line">....</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h4 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h4><h5 id="IF-THEN语句"><a href="#IF-THEN语句" class="headerlink" title="IF-THEN语句"></a>IF-THEN语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">	Sequence_of_statements;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure>

<h5 id="IF-THEN-ELSE语句"><a href="#IF-THEN-ELSE语句" class="headerlink" title="IF-THEN-ELSE语句"></a>IF-THEN-ELSE语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">	Sequence_of_statements1;</span><br><span class="line">ELSE</span><br><span class="line">	Sequence_of_statements2;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure>

<h5 id="嵌套的IF语句"><a href="#嵌套的IF语句" class="headerlink" title="嵌套的IF语句"></a>嵌套的IF语句</h5><p><em>在THEN和ELSE子句中还可以包含IF语句</em></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Y5Mhaq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y5Mhaq.th.png" alt="Y5Mhaq.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/20/YTFdDP.png" alt="YTFdDP.png" border="0">

<h4 id="WHILE"><a href="#WHILE" class="headerlink" title="WHILE"></a>WHILE</h4><h4 id="GOTO"><a href="#GOTO" class="headerlink" title="GOTO"></a>GOTO</h4><h4 id="WAITFOR"><a href="#WAITFOR" class="headerlink" title="WAITFOR"></a>WAITFOR</h4><h4 id="RETURN"><a href="#RETURN" class="headerlink" title="RETURN"></a>RETURN</h4><h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><h2 id="存储过程-重点"><a href="#存储过程-重点" class="headerlink" title="存储过程(重点)"></a>存储过程(重点)</h2><p><em>过程化 SQ L块主要有两种类型，即命名块和匿名块</em></p>
<p><em>匿名块每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQ L块中调用</em></p>
<p>  <em>过程和函数是命名块，它们被编译后保存在数据库中，称 为持久性存储模块) ,可以被反复调用，运行速度较快</em></p>
<h3 id="存储过程的基本概念"><a href="#存储过程的基本概念" class="headerlink" title="存储过程的基本概念"></a>存储过程的基本概念</h3><p><em>存储过程是由过程化SQ L 语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，因此称它为存储过程，使用时只要调用即可</em>  </p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>存储过程降低了客户机和服务器之间的通信量  </p>
<p>运行效率高  </p>
<p>方便实施企业规则  </p>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名([@参数<span class="number">1</span> 类型,.., @参数n 类型)</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--参数不带括号也可以</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名</span><br><span class="line">@参数<span class="number">1</span> 类型,.., @参数n 类型</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure>



<p><em>可简写成PROC</em></p>
<h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> aa</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>



<h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><img src="https://s1.ax1x.com/2020/05/19/Y5Y8jf.png" alt="Y5Y8jf.png" border="0">

<img src="https://s1.ax1x.com/2020/05/20/YTuBVA.png" alt="YTuBVA.png" border="0">

<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><img src="https://s1.ax1x.com/2020/05/20/YTkJaT.png" alt="YTkJaT.png" border="0">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> exp4</span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'%...'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 @pno=<span class="string">'....'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'...'</span>, <span class="string">'...'</span></span><br></pre></td></tr></table></figure>



<h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><img src="https://s1.ax1x.com/2020/05/19/Y5dghQ.png" alt="Y5dghQ.png" border="0">

<p><em>可简写成EXEC</em></p>
<h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名<span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="重编译"><a href="#重编译" class="headerlink" title="重编译"></a>重编译</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名(参数)</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure>

<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 过程名;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><em>和存储过程一样都是持久性存储模块；不同的是函数要指定返回类型</em></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名([参数<span class="number">1</span>, ..., 参数n]) <span class="keyword">RETURNS</span>&lt;类型&gt;</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure>

<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span>/<span class="keyword">SELECT</span> 函数名([参数<span class="number">1</span>, ..., 参数n])</span><br></pre></td></tr></table></figure>



<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 过程名 <span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名 <span class="number">2</span>; <span class="comment">--重命名</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 函数名 COMPILE; <span class="comment">--重新编译一个函数</span></span><br></pre></td></tr></table></figure>

<h2 id="过程化SQL中的游标"><a href="#过程化SQL中的游标" class="headerlink" title="过程化SQL中的游标"></a>过程化SQL中的游标</h2><hr>
<blockquote>
<p>你未必万丈光芒，但始终温暖有光。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-好友推荐</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E5%92%8C%E5%AE%9E%E8%B7%B5-%E5%A5%BD%E5%8F%8B%E6%8E%A8%E8%8D%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="好友推荐"><a href="#好友推荐" class="headerlink" title="好友推荐"></a>好友推荐</h2><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><a href="https://imgchr.com/i/Y4YlJ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y4YlJ1.md.png" alt="Y4YlJ1.png" border="0"></a></p>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h4><p><em>以每个人为对象，统计直接关系</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tom cat hello hadoop</span><br><span class="line">cat tom hive</span><br><span class="line">hive cat hadoop world hello mr</span><br><span class="line">mr hive hello</span><br><span class="line">world hadoop hive hello mr</span><br><span class="line">hadoop hive tom world</span><br><span class="line">hello world tom hive mr</span><br></pre></td></tr></table></figure>



<h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><h5 id="map阶段输出数据"><a href="#map阶段输出数据" class="headerlink" title="map阶段输出数据"></a>map阶段输出数据</h5><p><em>以key-value的形式，表示两个人的直接或间接关系(0代表直接，1代表间接)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#39;tom_cat&#39;: 0&gt;, &lt;&#39;tom_hello&#39;: 0&gt;, &lt;&#39;tom_hadoop&#39;: 0&gt;, &lt;&#39;cat_hello&#39;: 1&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;, &lt;&#39;hello_hadoop&#39;: 1&gt;</span><br><span class="line">&lt;&#39;cat_tom&#39;: 0&gt;， &lt;&#39;cat_hive&#39;: 0&gt;， &lt;&#39;tom_hive&#39;: 1&gt;</span><br><span class="line">&lt;&#39;hive_cat&#39;: 0&gt;, &lt;&#39;hive_hadoop&#39;: 0&gt;, &lt;&#39;hive_world&#39;: 0&gt;, &lt;&#39;hive_hello&#39;: 0&gt;, &lt;&#39;hive_mr&#39;: 0&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;,&lt;&#39;cat_world&#39;: 1&gt; ,&lt;&#39;cat_hello&#39;: 1&gt; ,&lt;&#39;cat_mr&#39;: 1&gt; ,&lt;&#39;hadoop_world&#39;: 1&gt;, &lt;&#39;hadoop_hello&#39;: 1&gt;, &lt;&#39;hadoop_mr&#39;: 1&gt;, &lt;&#39;world_hello&#39;: 1&gt;, &lt;&#39;world_mr&#39;: 1&gt;, &lt;&#39;hello_mr&#39;: 1&gt;,</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><em>通过Map函数形成两个人的关系，要注意升序还是降序，确保一致性</em></p>
<h5 id="reduce阶段传入数据"><a href="#reduce阶段传入数据" class="headerlink" title="reduce阶段传入数据"></a>reduce阶段传入数据</h5><p><em>key中两个人的顺序不同，记为同一个关系</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tom_cat:（0,1,0,0,0）&gt;,&lt;tom_hadoop:(1,1,1)&gt;,&lt;tom_hive:(1,1,1,1,1,1)&gt;,&lt;tom_world:(1,1,1,1,1,1)&gt;，</span><br><span class="line">&lt;hadoop_world:(1,1,1,1)&gt;,&lt;hadoop_hello:(0,1,1)&gt;</span><br></pre></td></tr></table></figure>

<h5 id="reduce阶段传出数据"><a href="#reduce阶段传出数据" class="headerlink" title="reduce阶段传出数据"></a>reduce阶段传出数据</h5><p><em>传出间接关系拥有的共同好友</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat_hadoop	2</span><br><span class="line">cat_hello	2</span><br><span class="line">cat_mr	1</span><br><span class="line">cat_world	1</span><br><span class="line">hadoop_hello	3</span><br><span class="line">hadoop_mr	1</span><br><span class="line">hive_tom	3</span><br><span class="line">mr_tom	1</span><br><span class="line">mr_world	2</span><br><span class="line">tom_world	2</span><br></pre></td></tr></table></figure>

<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><h6 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	Text key2 = <span class="keyword">new</span> Text();</span><br><span class="line">	IntWritable value2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span>	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">		String data = value.toString();</span><br><span class="line">		String list[] = data.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; list.length-<span class="number">1</span>; m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> n = m + <span class="number">1</span>; n &lt; list.length; n++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(m == <span class="number">0</span>) &#123;</span><br><span class="line">					String outcome = linkStr(list[<span class="number">0</span>], list[n]);</span><br><span class="line">					key2.set(outcome);</span><br><span class="line">					value2.set(<span class="number">0</span>);</span><br><span class="line">					context.write(key2, value2);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					String outcome = linkStr(list[m], list[n]);</span><br><span class="line">					key2.set(outcome);</span><br><span class="line">					value2.set(<span class="number">1</span>);</span><br><span class="line">					context.write(key2, value2);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">linkStr</span><span class="params">(String a1, String a2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a1.compareTo(a2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> a1+<span class="string">"_"</span>+a2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a2+<span class="string">"_"</span>+a1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable v4 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k3, Iterable&lt;IntWritable&gt; v3, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(IntWritable value:v3) &#123;</span><br><span class="line">			<span class="keyword">if</span>(value.get() == <span class="number">1</span>)&#123;</span><br><span class="line">				total += <span class="number">1</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				flag = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			v4.set(total);</span><br><span class="line">			context.write(k3, v4);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountMain;</span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountMapper;</span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountReducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(recommendFriendMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setMapperClass(recommendFriendMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setReducerClass(recommendFriendReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><img src="https://s1.ax1x.com/2020/06/03/tdPuiF.md.png" alt="tdPuiF.md.png" border="0"></p>
<h4 id="对XX-XX后续处理"><a href="#对XX-XX后续处理" class="headerlink" title="对XX_XX后续处理"></a>对XX_XX后续处理</h4><p><em>不需要reduce阶段；对前阶段得到的数据xx_xx进行处理</em></p>
<h5 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RecommentResInfo-序列化，排序，人物类"><a href="#RecommentResInfo-序列化，排序，人物类" class="headerlink" title="RecommentResInfo(序列化，排序，人物类)"></a>RecommentResInfo(序列化，排序，人物类)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p><a href="https://imgchr.com/i/tdPKG4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/03/tdPKG4.png" alt="tdPKG4.png" border="0"></a></p>
<hr>
<blockquote>
<p>每个人心中都有一团火，不过路过的人只看到了烟。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>好友推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第五章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章-运输层"></a>第五章-运输层</h2><p><em>网络层是为主机之间提供逻辑通信，<br>运输层为应用进程之间提供端到端的逻辑通信</em></p>
<h3 id="运输层的作用"><a href="#运输层的作用" class="headerlink" title="运输层的作用"></a>运输层的作用</h3><p><em>运输层为应用进程之间提供端到端的逻辑通信</em></p>
<p><em>在一台主机中经常有多个应用进程同时分别和另一台主机中的多个应用进程通信。<br>这表明运输层有一个很重要的<strong>功能——复用</strong> (multiplexing)和分用</em></p>
<p><a href="https://imgchr.com/i/tp8cdg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tp8cdg.md.png" alt="tp8cdg.png" border="0"></a></p>
<h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3><p><em>运行在计算机中的进程是用进程<strong>标识符</strong>来标志的</em></p>
<p><em>但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符</em></p>
<p><em>必须用统一的方法对 TCP/IP 体系的应用进程进行标志</em></p>
<p><em>解决这个问题的方法就是在运输层使用<strong>协议端口号</strong> (protocol port number)，或通常简称为<strong>端口</strong> (port)</em></p>
<h4 id="软件端口与硬件端口"><a href="#软件端口与硬件端口" class="headerlink" title="软件端口与硬件端口"></a>软件端口与硬件端口</h4><p><em>在协议栈层间的抽象的协议端口是*</em>软件端口<strong>。<br>路由器或交换机上的端口是</strong>硬件端口***</p>
<h4 id="TCP-IP-运输层端口"><a href="#TCP-IP-运输层端口" class="headerlink" title="TCP/IP 运输层端口"></a>TCP/IP 运输层端口</h4><p><em>端口用一个 16 位端口号进行标志</em></p>
<p><em>端口号只具有<strong>本地意义</strong>，即端口号只是为了标志<strong>本计算机应用层中的各进程</strong>。<br>在互联网中，不同计算机的相同端口号是没有联系的</em></p>
<h4 id="两大类端口"><a href="#两大类端口" class="headerlink" title="两大类端口"></a>两大类端口</h4><h5 id="服务器端使用的端口号"><a href="#服务器端使用的端口号" class="headerlink" title="服务器端使用的端口号"></a>服务器端使用的端口号</h5><p>熟知端口，数值一般为 0<del>1023。<br>登记端口号，数值为 1024</del>49151</p>
<h5 id="客户端使用的端口号"><a href="#客户端使用的端口号" class="headerlink" title="客户端使用的端口号"></a>客户端使用的端口号</h5><p><em>又称为短暂端口号，数值为 49152~65535，留给客户进程选择暂时使用</em></p>
<h3 id="用户数据报协议-UDP-User-Datagram-Protocol"><a href="#用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="用户数据报协议 UDP (User Datagram Protocol)"></a>用户数据报协议 UDP (User Datagram Protocol)</h3><p><em>面向连接的 TCP 协议</em></p>
<p><em>采用无连接的 UDP 协议</em></p>
<p><em>传送的数据单位协议是 *</em>UDP 报文<strong>或</strong>用户数据报***</p>
<p><strong>UDP实时性更好</strong></p>
<h4 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h4><p>(1) UDP 是无连接的</p>
<p>(2) UDP 使用尽最大努力交付</p>
<p>(3) UDP 是面向报文的(UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。)</p>
<p>(4) UDP 没有拥塞控制</p>
<p>(5) UDP 支持一对一、一对多、多对一和多对多</p>
<p>的交互通信。<br>(6) UDP 的首部开销小</p>
<h4 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h4><p><em>用户数据报=首部+数据部分</em></p>
<p><em>首部<strong>8个字节</strong>：源端口，目的端口，长度，检验和</em></p>
<p><a href="https://imgchr.com/i/YWYcjg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYcjg.md.png" alt="YWYcjg.md.png" border="0"></a></p>
<h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><img src="https://s1.ax1x.com/2020/05/18/YWY2uQ.png" alt="YWY2uQ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/18/YWasaj.jpg" alt="YWasaj.jpg" border="0">

<p><a href="https://imgchr.com/i/YWYRBj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYRBj.png" alt="YWYRBj.png" border="0"></a></p>
<p><em>目的端口小的是服务器，大的是客户机</em></p>
<img src="https://s1.ax1x.com/2020/05/25/tp83M6.md.png" alt="tp83M6.png" border="0">

<h3 id="传输控制协议-TCP-Transmission-Control-Protocol-概述"><a href="#传输控制协议-TCP-Transmission-Control-Protocol-概述" class="headerlink" title="传输控制协议 TCP (Transmission Control Protocol)概述"></a>传输控制协议 TCP (Transmission Control Protocol)概述</h3><p><em>传送的数据单位协议是 TCP 报文段 (segment)</em></p>
<h4 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h4><p><em>TCP 是*</em>面向连接的<strong>运输层协议。<br>每一条 TCP 连接</strong>只能有两个端点** (endpoint)，每一条 TCP 连接<strong>只能是点对点</strong>的（一对一）。<br>TCP 提供<strong>可靠交付</strong>的服务。<br>TCP 提供<strong>全双工</strong>通信。<br><strong>面向字节流：*</strong></p>
<p><em>TCP 中的“流”(stream)指的是流入或流出进程的字节序列</em></p>
<p><em>“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流</em></p>
<h5 id="TCP-面向流的概念"><a href="#TCP-面向流的概念" class="headerlink" title="TCP 面向流的概念"></a>TCP 面向流的概念</h5><p><em>不保证发送方和接收方数据块具有对应大小的关系，但字节流完全一样</em></p>
<p><em>TCP 不关心应用进程一次把多长的报文发送到 TCP 缓存。<br>TCP 对连续的字节流进行分段，形成 TCP 报文段</em></p>
<h4 id="注-意"><a href="#注-意" class="headerlink" title="注 意"></a>注 意</h4><p><em>TCP 连接是一条虚连接</em></p>
<p><em>TCP 对应用进程一次把多长的报文发送到TCP 的缓存中是不关心的</em></p>
<p><em>TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）</em></p>
<p><em>TCP 可把太长的数据块划分短一些再传送</em></p>
<p><em>TCP 也可等待积累有足够多的字节后再构成报文段发送出去</em></p>
<h4 id="TCP-的连接"><a href="#TCP-的连接" class="headerlink" title="TCP 的连接"></a>TCP 的连接</h4><p><em>TCP 连接的端点叫做套接字 (socket) 或插口</em></p>
<p><em>端口号拼接到 (contatenated with) IP 地址即构成了套接字</em></p>
<h3 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h3><p><em>理想的传输条件有以下两个特点：<br>(1) 传输信道不产生差错。<br>(2) 不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据</em></p>
<p><strong>然而实际的网络都不具备以上两个理想条件</strong></p>
<h5 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h5><p><em>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组</em></p>
<p><em>全双工通信的双方既是发送方也是接收方</em></p>
<h6 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h6><img src="https://s1.ax1x.com/2020/05/25/t98ruV.png" alt="t98ruV.png" border="0">

<h6 id="出现差错"><a href="#出现差错" class="headerlink" title="出现差错"></a>出现差错</h6><p><em>当以某一方为接收方时，可能出现：*</em>收到，检查异常，丢弃<strong>；</strong>传输过程丢失<strong>。此时接收方不会做出相应，为了确保能够正确接收，使用</strong>超时重传***</p>
<h6 id="确认丢失和确认迟到"><a href="#确认丢失和确认迟到" class="headerlink" title="确认丢失和确认迟到"></a>确认丢失和确认迟到</h6><p><strong>确认丢失</strong></p>
<p><strong>确认迟到</strong></p>
<p><em>接收方发送的确认，接收方在规定时间没有收到</em></p>
<p><em>处理方法是：A 会收到重复的确认。对重复的确认的处理很简单：收下后就丢弃。<br>B 仍然会收到重复的 M1，并且同样要丢弃重复的 M1，并重传确认分组</em></p>
<h5 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h5><p><em>连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置</em></p>
<h5 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h5><p><em>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。*</em>因此 TCP 首部的最小长度是 20 字节。***</p>
<img src="https://s1.ax1x.com/2020/05/25/t9YQ39.png" alt="t9YQ39.png" border="0">

<p><strong>序号字段</strong>——<em>占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号</em></p>
<h6 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h6><p><strong>运输连接有三个阶段</strong>：<em>连接建立，数据传送，连接释放</em></p>
<p><em>TCP连接建立</em>：三报文握手机制</p>
<p><em>TCP连接释放：</em> 四报文握手机制</p>
<p><a href="https://imgchr.com/i/t9QSzV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9QSzV.md.jpg" alt="t9QSzV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MzR0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MzR0.md.jpg" alt="t9MzR0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MxGq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MxGq.md.jpg" alt="t9MxGq.md.jpg" border="0"></a></p>
<h3 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h3><h4 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h4><h4 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h4><h3 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h3><p><em>超时：初始门限减半，拥塞窗口变为1；3个ACK：拥塞窗口减半</em></p>
<p><em>轮次就是指发送一个数据出去，收到确认回来</em></p>
<p><em>有多少个拥塞窗口，就可以发送多少个报文段</em></p>
<p><em>指数增长时，超过门限，可以等于</em></p>
<p><a href="https://imgchr.com/i/tiTrxU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTrxU.md.png" alt="tiTrxU.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTD2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTD2T.md.png" alt="tiTD2T.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTBGV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTBGV.md.png" alt="tiTBGV.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiT0P0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiT0P0.md.png" alt="tiT0P0.md.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>线性代数-第一章</title>
    <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h2><h3 id="二阶与三阶行列式"><a href="#二阶与三阶行列式" class="headerlink" title="二阶与三阶行列式"></a>二阶与三阶行列式</h3><p><a href="https://imgchr.com/i/YyoAun" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoAun.png" alt="YyoAun.png" border="0"></a><br><a href="https://imgchr.com/i/YyoEBq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoEBq.md.png" alt="YyoEBq.md.png" border="0"></a></p>
<h3 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h3><p>*<em>性质 1 行列式与它的转置行列式相等.  *</em></p>
<p>*<em>性质 2 对换行列式的两行（列） ， 行列式变号  *</em></p>
<p><strong>推论 如果行列式两行(列)完全相同，则此行列式为0</strong></p>
<p><strong>性质3 行列式的某一行(列)中所有的元素都乘以同一数k,等于k乘以这个行列式</strong></p>
<p> <strong>推论 行列式中某一行(列)的所有元素的公因子可以提到行列式记号的外面</strong></p>
<p><strong>性质4 行列式中如果有两行（列） 元素成比例， 则此行列式等于零</strong></p>
<p><strong>性质5 若行列式的某一行（列） 的元素都是两数之和， 例如第 i 行的元素都是两数之和</strong></p>
<p><strong>性质 6 把行列式的某一行（列） 的各元素乘同一数然后加到另一行（列） 对<br>应的元素上去， 行列式不变</strong></p>
<h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><p><em>对于 n 个不同的元素， 先规定各元素之间有一个标准次序（例如 n 个不同的<br>自然数， 可规定由小到大为标准次序）， 于是在这 n 个元素的任一排列中， 当某一<br>对元素的先后次序与标准次序不同时， 就说它构成 1 个逆序.一个排列中所有逆<br>序的总数叫做这个排列的逆序数</em></p>
<h3 id="上三角法求矩阵"><a href="#上三角法求矩阵" class="headerlink" title="上三角法求矩阵"></a>上三角法求矩阵</h3><p><em>等于主对角线的乘积</em></p>
<h3 id="行列式按行-列-展开"><a href="#行列式按行-列-展开" class="headerlink" title="行列式按行(列)展开"></a>行列式按行(列)展开</h3><p><em>行列式等于它的任一行(列)的各元素与其对应的代数余子式乘积之和</em></p>
<p><em>行列式某一行（列） 的元素与另一行（列） 的对应元素的代数余子式<br>乘积之和等于零</em></p>
<img src="https://s1.ax1x.com/2020/05/16/Y6bih6.png" alt="Y6bih6.png" border="0">

<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><em>当常数项 b1， b2， …， bm 不全为零时， 线性方程组（1） 叫做<strong>n元非齐次线性方程组</strong>.</em></p>
<p><strong>n 元齐次线性方程组</strong></p>
<p><em>n 元齐次线性方程组一定有零解，可能有非零解</em></p>
<p><em>元素是实数的矩阵称为实矩阵， 元素是复数的矩阵称为复矩阵</em></p>
<p><em>只有一行的矩阵A =（a1，a2… an）称为<strong>行矩阵</strong>， 又称<strong>行向量</strong>.</em></p>
<p><em>只有一列的矩阵称为<strong>列矩阵</strong>， 又称<strong>列向量*</strong>.</em></p>
<p>  A 称为<strong>系数矩阵</strong>， x 称为<strong>未知数矩阵</strong>， b 称为<strong>常数项矩阵</strong>， B 称为<strong>增广矩阵</strong></p>
<p><strong>对角矩阵</strong>， <em>简称对角阵.对角阵也记作:</em><br>$$<br>A = diag（λ1， λ2， …， λn）<br>$$<br>   <em>位矩阵， 简称单位阵</em></p>
<h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h4><p>（i） A +B = B +A；<br>（ii） （A +B） + C = A +（B +C） </p>
<h4 id="数与矩阵相乘"><a href="#数与矩阵相乘" class="headerlink" title="数与矩阵相乘"></a>数与矩阵相乘</h4><p><a href="https://imgchr.com/i/YcBNOe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YcBNOe.png" alt="YcBNOe.png" border="0"></a></p>
<p>（i） （λμ)A =λ（μA） ；<br>（ii） （λ +μ） A =λA +μA；<br>（iii） λ（A +B） =λA +λ B.  </p>
<h4 id="矩阵乘矩阵"><a href="#矩阵乘矩阵" class="headerlink" title="矩阵乘矩阵"></a>矩阵乘矩阵</h4><p><em>定义4 设A=（ai）j 是一个m×s矩阵， B=（bi）j 是一个s×n矩阵， 那么规定矩<br>阵 A 与矩阵 B 的乘积是一个 m×n 矩阵 C =（cij）</em></p>
<p><strong>必须注意： 只有当第一个矩阵（左矩阵） 的列数等于第二个矩阵（右矩阵） 的<br>行数时， 两个矩阵才能相乘</strong></p>
<p>*<em>总之， 矩阵的乘法不满足交换律， 即在一般情形下， A B≠ BA *</em><br>$$<br>（i） （A B） C = A（B C） ；<br>$$</p>
<p>$$<br>（ii） λ（A B） =（λA） B = A（λB） （其中λ 为数） ；<br>$$</p>
<p>$$<br>（iii） A（B + C） = A B +A C， （B + C） A = BA + CA.<br>$$</p>
<p>$$<br>对于单位矩阵 E， 容易验证E m A m × n = A m × n， A m × n E n = A m × n，或简写成E A = A E = A .<br>$$</p>
<h4 id="矩阵的幂"><a href="#矩阵的幂" class="headerlink" title="矩阵的幂"></a>矩阵的幂</h4><p>$$<br>A kA l = A k+l， （A k） l = A kl<br>$$</p>
<p>$$<br>又因矩阵乘法一般不满足交换律， 所以对于两个 n 阶矩阵 A与 B， 一般说来（A B） k≠ A k B k， 只有当 A 与 B 可交换时， 才有（A B） k = A k B k<br>$$</p>
<p><em>例如（A +B） 2 = A 2 +2A B + B 2、 （A - B） （A + B） = A 2 - B 2 等公式， 也只有当 A与 B 可交换时才成立</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>sql语句异常</title>
    <url>/sql%E8%AF%AD%E5%8F%A5%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="CREATE-VIEW-不是在查询语句第一行"><a href="#CREATE-VIEW-不是在查询语句第一行" class="headerlink" title="CREATE VIEW 不是在查询语句第一行"></a>CREATE VIEW 不是在查询语句第一行</h2><p><em>前面加一个go</em></p>
<h2 id="CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用"><a href="#CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用" class="headerlink" title="CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用"></a>CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-空值</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%A9%BA%E5%80%BC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><em>所谓空值就是<strong>不知道</strong>或 <strong>不存在</strong>或 <strong>无意义</strong>的值。</em></p>
<p>SQ L语言中允许某些元组的某些属性在一定情况下取空值。 一般有以下几种情况：<br>•该属性应该有一个值，但目前不知道它的具体值。例如，某学生的年龄属性，因为<br>学生登记表漏填了，不知道该学生年龄，因此取空值。<br>•该属性不应该有值。例如，缺考学生的成绩为空，因为他没有参加考试。<br>. 由于某种原因不便于填写。例如， 一个人的电话号码不想让大家知道，则取空值。  </p>
<h3 id="空值的产生"><a href="#空值的产生" class="headerlink" title="空值的产生"></a>空值的产生</h3><h4 id="插入时默认空值"><a href="#插入时默认空值" class="headerlink" title="插入时默认空值"></a>插入时默认空值</h4><h4 id="显示写入空值"><a href="#显示写入空值" class="headerlink" title="显示写入空值"></a>显示写入空值</h4><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h4 id="空值的关系运算"><a href="#空值的关系运算" class="headerlink" title="空值的关系运算"></a>空值的关系运算</h4><h3 id="空值判断"><a href="#空值判断" class="headerlink" title="空值判断"></a>空值判断</h3><p><strong>IS NULL OR IS NOT NULL</strong></p>
<h3 id="空值的约束"><a href="#空值的约束" class="headerlink" title="空值的约束"></a>空值的约束</h3><p><em>有not null ，加了UNIQUE限制的属性</em></p>
<h3 id="空值的算数运算，比较运算和逻辑运算"><a href="#空值的算数运算，比较运算和逻辑运算" class="headerlink" title="空值的算数运算，比较运算和逻辑运算"></a>空值的算数运算，比较运算和逻辑运算</h3><p><em>空值与空值运算为空值；空值与另一个值为<strong>UNKNOWN</strong>.</em></p>
<p><em>有了<strong>UNKNOWN</strong>后常见的二值逻辑就由TRUE,FALSE变成了三值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-视图</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E8%A7%86%E5%9B%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><em>视图是从<strong>一个或几个基本表</strong>（或视图）导出的表</em></p>
<p><em>它与基本表不同，是一个<strong>虚表</strong>.</em></p>
<p><em>数据库中只<strong>*存放视图的定义</strong>，而<strong>不存放视图对应的数据</strong>，这些数据仍存放在原来的基本表中。所以一旦基本表中的数据发生变化，从视图中查询出的数据也就随之改变了</em></p>
<p><em>视图就像一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化</em></p>
<p><em>视图一经定义，就可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但对视图的更新（增 、删 、改）操作则有一定的限制</em></p>
<p><em>如果已有视图建立在基本表上，这时修改基本表属性，可能导致视图不能运作；可以先删除视图，建立新视图</em></p>
<h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;视图名&gt;[ （&lt;列名&gt; ［,&lt;列名&gt;］ …）]</span><br><span class="line"><span class="keyword">AS</span> &lt;子查询&gt;</span><br><span class="line">［<span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>］;</span><br></pre></td></tr></table></figure>

<p><em>子查询<strong>可以是任意的SELECT语句</strong>，是否可以含有ORDER B Y 子句和 DISTINCT<br>短语，则取决于具体系统的实现(<strong>通常不能用ODER BY 和 DISTINCT</strong>)</em></p>
<p><strong>WITH CHECK OPTION</strong>表<em>示对视图进行 UPDATE、 INSERT和 DELETE操作时要<br>保证更新、插入或删除的行<strong>满足视图定义中的谓词条件（即子查询中的条件表达式</strong>）</em></p>
<p><em>组成视图的属性列名或者全部省略或者全部指定，没有第三种选择</em></p>
<p>但在下列三种情况下<strong>必须明确指定组成视图的所有列名</strong>：<br>（1） 某个目标列不是单纯的属性名，而是聚集函数或列表达式<br>（2 ） 多表连接时选出了几个同名列作为视图的字段<br>（3 ） 需要在视图中为某个列启用新的更合适的名字  </p>
<h4 id="建立在一个基本表"><a href="#建立在一个基本表" class="headerlink" title="建立在一个基本表"></a>建立在一个基本表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="comment">/*由于在定义IS_Student视图时加上了 WITH CHECK OPT1ON子句，以后对该视图进</span></span><br><span class="line"><span class="comment">行插入、修改和删除操作时，关系数据库管理系统会自动加上Sdept='IS'的条件。*/</span></span><br></pre></td></tr></table></figure>

<p><em>关系数据库管理系统执行CREATE VIEW 语句的结果只是把视图的定义存入<strong>数据字<br>典</strong>，<strong>并不执行其中的SELECT语句。只是在</strong>对视图查询时，才按视图的定义从基本表中将数据査出</em>  </p>
<p><em>若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但<br>保留了主码，则称这类视图为<strong>行列子集视图</strong>。 IS_Student视图就是一个行列子集视图</em></p>
<h4 id="建立在多个基本表"><a href="#建立在多个基本表" class="headerlink" title="建立在多个基本表"></a>建立在多个基本表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Sl(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">Student.Sno=SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>

<p><em>由于视图IS_S1的属性列中包含了 Student表 与 SC 表的同名列Sno ,所以必须在视图名后面明确说明视图的各个属性列名。</em></p>
<p><em>由基本数据经过各种计算派生出的数据一般是不存储的。这些派生属性由于在基本表中并不实际存在，也称它们为虚拟列。带虚拟列的视图也称为<strong>带表达式的视图</strong>。</em>    </p>
<h4 id="建立在一个视图上"><a href="#建立在一个视图上" class="headerlink" title="建立在一个视图上"></a>建立在一个视图上</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade&gt;=<span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<h4 id="建立在多个视图上"><a href="#建立在多个视图上" class="headerlink" title="建立在多个视图上"></a>建立在多个视图上</h4><h4 id="分组视图"><a href="#分组视图" class="headerlink" title="分组视图"></a>分组视图</h4><p><em>GROUP BY 子句的查询来定义视图，这种视图称为分组视图</em></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*由于AS子句中SELECT语句的目标列平均成绩是通过作用聚集函数得到的，所CREATE VIEW 中必须明确定义组成S_G 视图的各个属性列名。 S_G 是一个分组视图*/</span></span><br></pre></td></tr></table></figure>

<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;视图名&gt; ［<span class="keyword">CASCADE</span>］ ;</span><br></pre></td></tr></table></figure>

<p><em>视图删除后<strong>视图的定义将从数据字典中删除</strong>。如果该视图上还导出了其他视图，则使用 <strong>CASCADE级联</strong>删除语句把该视图和由它导出的所有视图一起删除</em></p>
<p> <em>基本表删除后，由该基本表导出的所有视图均无法使用了，但是视图的定义没有从<br>字典中清除。删除这些视图定义需要显式地使用DROP VIEW 语句</em></p>
<h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p><em>与查询基本表差不多</em></p>
<p><em>关系数据库管理系统执行对视图的查询时，<strong>首先</strong>进行有效性检查，检查查询中涉及的表 、视图等是否存在。<strong>如果存在，则</strong>从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，<strong>转换成等价的对基本表的查询</strong>，然后再执行修正了的查询。这一转换过程称为<strong>视图消解</strong>(view resolution)</em> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="number">20</span>;</span><br><span class="line"><span class="comment">/*本例转换后的查询语句为*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'lS'</span> <span class="keyword">AND</span> Sage&lt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><strong>而有时候可能出现转换错误</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg&gt;=<span class="number">90</span>;</span><br><span class="line"><span class="comment">/*将本例中的查询语句与定义S_G 视图的子查询结合，形成下列查询语句：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">AVG</span>(Grade)&gt;=<span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>

<p><em>WHERE子句中是不能用聚集函数作为条件表达式的，因此执行此修正后的查询<br>将会出现语法错误</em></p>
<p><em>目前多数关系数据库系统对<strong>行列子集视图</strong>的查询均能进行正确转换。但对非行列<br>子 集 视 图 的 查 询  就 不 一 定 能 做 转 换 了 ，因此这类查询应该直接对<strong>基本表</strong>进行 。</em>  </p>
<p><em>定义视图并查询视图与基于派生表的查询是有区别的。视图一旦定义，其定义将永<br>久保存在数据字典中，之后的所有查询都可以直接引用该视图。而派生表只是在语句执行时临时定义，语句执行后该定义即被删除</em>  </p>
<h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span>;</span><br><span class="line">转换后的更新语句为</span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'201215129'</span>, <span class="string">'丁赵新'</span>,<span class="number">20</span>);</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Student(Sno,Sname,Sage,Sdept)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'2O1215129'</span>,<span class="string">'赵新'</span>,<span class="number">20</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span>；</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<p><em>在关系数据库中，<strong>并不是所有的视图都是可更新的</strong>，因为有些视图的更新不能唯一地有意义地转换成对相应基本表的更新</em></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G（Sno,Gavg）</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>（Grade）</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*如果想把视图S_G 中学号为“ 201215121 ” 的学生的平均成绩改成9 0 分 ， SQL语句如下：*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> S_G</span><br><span class="line"><span class="keyword">SET</span> Gavg=<span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'20121512'</span>；</span><br></pre></td></tr></table></figure>

<p><em>但这个对视图的更新是无法转换成对基本表S C 的更新的，因为系统无法修改各科成绩，以使平均成绩成为90。所 以 S_G 视图是不可更新的。</em></p>
<p><em>一般地，行列子集视图是可更新的</em>  </p>
<h4 id="受限更新"><a href="#受限更新" class="headerlink" title="受限更新"></a>受限更新</h4><p><strong>例如， DB2规定:</strong><br>（1 ） 若视图是由两个以上基本表导出的，则此视图不允许更新。<br>（2 ） 若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和 UPDATE操作，但允许执行DELETE操作。<br>（3 ） 若视图的字段来自<strong>聚集函数</strong>，则此视图不允许更新。<br>（4 ） 若视图定义中含有<strong>GROUP BY</strong>子句，则此视图不允许更新。<br>（5） 若视图定义中含有<strong>DISTINCT</strong>短语，则此视图不允许更新。<br>（6 ）若视图定义中<strong>有嵌套查询，并且内层查询的FROM 子句</strong>中涉及的表也是导出该视图的基本表，则此视图不允许更新。  </p>
<h3 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h3><ul>
<li>视图能够简化用户的操作  </li>
<li>视图使用户能以多种角度看待同一数据  </li>
<li>视图对重构数据库提供了一定程度的逻辑独立性  </li>
<li>视图能够对机密数据提供安全保护  </li>
<li>适当利用视图可以更清晰地表达查询  </li>
</ul>
<h3 id="视图查看"><a href="#视图查看" class="headerlink" title="视图查看"></a>视图查看</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_helptext 视图名</span><br></pre></td></tr></table></figure>

<h3 id="视图加密"><a href="#视图加密" class="headerlink" title="视图加密"></a>视图加密</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">.......</span><br><span class="line"><span class="keyword">WITH</span> ENCRYPTION <span class="comment">-- 加密</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sp_helptext 视图名 报错</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>即使慢，驰而不息，纵会落后，纵会失败，但一定可以达到他所向的目标。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第六章Hbase</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%85%AD%E7%AB%A0%20Hbase.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Hbase-Hive-Pig"><a href="#Hbase-Hive-Pig" class="headerlink" title="Hbase, Hive, Pig"></a>Hbase, Hive, Pig</h1><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p><em>采用列式存储</em></p>
<h3 id="Hbase简介"><a href="#Hbase简介" class="headerlink" title="Hbase简介"></a>Hbase简介</h3><p><em>HBase是一个分布式的、面向列的开源数据库，该技术来源于Google论文。HBase在Hadoop之上提供了类似于Bigtable的能力。</em></p>
<h4 id="HBase的特性"><a href="#HBase的特性" class="headerlink" title="HBase的特性"></a>HBase的特性</h4><p><strong>伸缩性</strong>：表可以很“高”（数十亿个数据行），可以很“宽”（数百万个列）。<br><strong>自动分区</strong>：当表增长时，表会自动分裂成Region，并分布到可用节点上。<br><strong>线性扩展和对于新节点的自动处理</strong>：增加节点，指它指向RegionServer，Region自动负载均衡。<br><strong>普通商用硬件支持</strong><br><strong>容错</strong>：HBase在Hadoop的文件系统之上，利用了Hadoop的文件系统（HDFS）提供的容错能力。<br><strong>检索性能</strong>：HBase是一个数据模型，类似于谷歌的大表设计，可以提供快速随机访问海量结构化数据。</p>
<h4 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h4><h5 id="关系型数据库和Hbase对比"><a href="#关系型数据库和Hbase对比" class="headerlink" title="关系型数据库和Hbase对比"></a>关系型数据库和Hbase对比</h5><p><a href="https://imgchr.com/i/YJQCZQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQCZQ.md.png" alt="YJQCZQ.png" border="0"></a></p>
<h5 id="列族存储的概念"><a href="#列族存储的概念" class="headerlink" title="列族存储的概念"></a>列族存储的概念</h5><p><a href="https://imgchr.com/i/YJQReg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQReg.md.png" alt="YJQReg.png" border="0"></a></p>
<h5 id="HBase的数据模型"><a href="#HBase的数据模型" class="headerlink" title="HBase的数据模型"></a>HBase的数据模型</h5><p><a href="https://imgchr.com/i/Yf6q8e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf6q8e.md.png" alt="Yf6q8e.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/11/YJ3xYj.png" alt="YJ3xYj.png" border="0">

<h6 id="列数据属性"><a href="#列数据属性" class="headerlink" title="列数据属性"></a>列数据属性</h6><img src="https://s1.ax1x.com/2020/05/11/YJ8Yhd.png" alt="YJ8Yhd.png" border="0">



<h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p><em>Hbase的Table中的所有行都按照row key的字典序排列</em></p>
<p><em>Table 在行的方向上分割为多个Region。Region是HBase中分布式存储和负载均衡的最小单元</em></p>
<p><em>不同Region分布到不同RegionServer上</em></p>
<h4 id="Region分裂-Split"><a href="#Region分裂-Split" class="headerlink" title="Region分裂(Split)"></a>Region分裂(Split)</h4><p><a href="https://imgchr.com/i/YfgIfO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfgIfO.png" alt="YfgIfO.png" border="0"></a></p>
<h3 id="行式存储和列式存储"><a href="#行式存储和列式存储" class="headerlink" title="行式存储和列式存储"></a>行式存储和列式存储</h3><img src="https://s1.ax1x.com/2020/05/11/YJmulD.png" alt="YJmulD.png" border="0">

<h4 id="OLTP-amp-OLAP"><a href="#OLTP-amp-OLAP" class="headerlink" title="OLTP &amp; OLAP"></a>OLTP &amp; OLAP</h4><h5 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h5><p><em>On-Line Transaction Processing（联机事务处理过程）。<br>也称为面向交易的处理过程，其基本特征是前台接收的用户数据可以立即传送到计算中心进行处理，并在很短的时间内给出处理结果，是对用户操作快速响应的方式之一。</em></p>
<p><em>典型案例：银行转账</em></p>
<p>（1）对于单列，获取频率较高，就使用列式存储。<br>（2）如果针对多列查询，使用并行处理查询效率也是很高，可采用列式存储。<br>（3）对于大数据的环境，利于数据压缩和线性扩展，也可以采用列式存储。<br>（4）事务使用率不高，数据量非常大。<br>（5）对于更新某些行的频率不高，也可以选择列式存储</p>
<h5 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h5><p><em>On-Line Analytic Processing（联机分析处理过程）。<br>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</em></p>
<p><em>典型案例：商品推荐</em></p>
<p>（1）关系之间的解决方案，表与表之关联大，可以采用行式存储。主键–外键<br>（2）强事务特性，如消费、资金的业务。<br>（3）如数据小于千万级，可考虑行式存储</p>
<p><strong>OLTP是用于事务和查询处理<br>OLAP用于数据分析</strong></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>Hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop理论课-第六章Hbase, Hive, Pig</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%85%AD%E7%AB%A0%20Hive.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Hive-重点"><a href="#Hive-重点" class="headerlink" title="Hive(重点)"></a>Hive(重点)</h1><h2 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h2><p><em>Hive是基于Hadoop的一个<strong>数据仓库工具</strong>，可以将<strong>结构化的</strong>数据文件映射为一张<strong>数据库表</strong>，并提供简单的<strong>sql</strong>查询功能，可以将sql语句转换为MapReduce任务进行运行</em></p>
<p><em>Hive是一个翻译器：SQL —&gt; Hive引擎  —&gt; MapReduce程序</em></p>
<p><em>Hive是构建在HDFS上的一个数据仓库（Data Warehouse）</em></p>
<h3 id="为什么要使用Hive？"><a href="#为什么要使用Hive？" class="headerlink" title="为什么要使用Hive？"></a>为什么要使用Hive？</h3><p>直接使用 MapReduce 所面临的问题：<br>　　1、人员学习成本太高<br>　　2、项目周期要求太短<br>　　3、MapReduce实现复杂查询逻辑开发难度太大<br>为什么要使用 Hive：<br>　    1、更友好的接口：操作接口采用类 SQL 的语法，提供快速开发的能力。<br>         2、更低的学习成本：避免了写 MapReduce，减少开发人员的学习成本，使<br>                DBA、运维人员可以通过SQL来实现操作大数据。<br>         3、更好的扩展性：可自由扩展集群规模而无需重启服务，还支持用户自定<br>               义函数。　　　　</p>
<h3 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h3><h4 id="Metastore三种运行模式"><a href="#Metastore三种运行模式" class="headerlink" title="Metastore三种运行模式"></a>Metastore三种运行模式</h4><img src="https://s1.ax1x.com/2020/05/18/Yf53HH.png" alt="Yf53HH.png" border="0">

<h4 id="了解Metastore配置属性"><a href="#了解Metastore配置属性" class="headerlink" title="了解Metastore配置属性"></a>了解Metastore配置属性</h4><img src="https://s1.ax1x.com/2020/05/18/YfIfJI.png" alt="YfIfJI.png" border="0">

<h4 id="安装Hive-1"><a href="#安装Hive-1" class="headerlink" title="安装Hive"></a>安装Hive</h4><img src="https://s1.ax1x.com/2020/05/18/YfoHc6.png" alt="YfoHc6.png" border="0">

<h2 id="Hive的架构与工作原理"><a href="#Hive的架构与工作原理" class="headerlink" title="Hive的架构与工作原理"></a>Hive的架构与工作原理</h2><h3 id="Hive体系结构"><a href="#Hive体系结构" class="headerlink" title="Hive体系结构"></a>Hive体系结构</h3><p><a href="https://imgchr.com/i/YfTbPs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfTbPs.md.png" alt="YfTbPs.png" border="0"></a></p>
<p><em>CLI(终端)：常采用这个</em></p>
<h3 id="Hive工作原理"><a href="#Hive工作原理" class="headerlink" title="Hive工作原理"></a>Hive工作原理</h3><p><a href="https://imgchr.com/i/Yf7rQ0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf7rQ0.md.png" alt="Yf7rQ0.png" border="0"></a></p>
<h3 id="Hive与传统数据库的比较"><a href="#Hive与传统数据库的比较" class="headerlink" title="Hive与传统数据库的比较"></a>Hive与传统数据库的比较</h3><img src="https://s1.ax1x.com/2020/05/18/YfHiTg.png" alt="YfHiTg.png" border="0">



<h3 id="HiveQL"><a href="#HiveQL" class="headerlink" title="HiveQL"></a>HiveQL</h3><h4 id="Hive支持的数据类型"><a href="#Hive支持的数据类型" class="headerlink" title="Hive支持的数据类型"></a>Hive支持的数据类型</h4><img src="https://s1.ax1x.com/2020/05/18/YfbJUg.md.png" alt="YfbJUg.png" border="0">

<h4 id="建表命令"><a href="#建表命令" class="headerlink" title="建表命令"></a>建表命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名（...）</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/YfL639" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfL639.md.png" alt="YfL639.png" border="0"></a></p>
<h4 id="数据加载命名"><a href="#数据加载命名" class="headerlink" title="数据加载命名"></a>数据加载命名</h4><h5 id="导入HDFS数据"><a href="#导入HDFS数据" class="headerlink" title="导入HDFS数据"></a>导入HDFS数据</h5><p><a href="https://imgchr.com/i/YfXdFU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfXdFU.png" alt="YfXdFU.png" border="0"></a></p>
<p><em>会把hdfs中对应文件移动到hive仓库中</em></p>
<h5 id="导入本地数据"><a href="#导入本地数据" class="headerlink" title="导入本地数据"></a>导入本地数据</h5><img src="https://s1.ax1x.com/2020/05/18/YfXUoT.png" alt="YfXUoT.png" border="0">

<p><em>复制</em></p>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><h5 id="内部表-托管表"><a href="#内部表-托管表" class="headerlink" title="内部表(托管表)"></a>内部表(托管表)</h5><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YfjLuR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfjLuR.md.png" alt="YfjLuR.md.png" border="0"></a></p>
<h6 id="创建内部表"><a href="#创建内部表" class="headerlink" title="创建内部表"></a>创建内部表</h6><img src="https://s1.ax1x.com/2020/05/18/Yfjbv9.md.png" alt="Yfjbv9.md.png" border="0">



<h5 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h5><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/Yfx0fS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yfx0fS.md.png" alt="Yfx0fS.md.png" border="0"></a></p>
<h6 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建外部表</h6><p><a href="https://imgchr.com/i/YfxwY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfxwY8.md.png" alt="YfxwY8.md.png" border="0"></a></p>
<h5 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h5><p><a href="https://imgchr.com/i/YfzCnA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzCnA.md.png" alt="YfzCnA.png" border="0"></a></p>
<h5 id="桶表"><a href="#桶表" class="headerlink" title="桶表"></a>桶表</h5><p><a href="https://imgchr.com/i/YfzQ7q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzQ7q.md.png" alt="YfzQ7q.png" border="0"></a></p>
<h5 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h5><p><a href="https://imgchr.com/i/YfzfHI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzfHI.md.png" alt="YfzfHI.png" border="0"></a></p>
<h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YhSlKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSlKH.md.png" alt="YhSlKH.md.png" border="0"></a></p>
<h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><p><a href="https://imgchr.com/i/YhSMxe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSMxe.md.png" alt="YhSMxe.md.png" border="0"></a></p>
<h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><h6 id><a href="#" class="headerlink" title></a><a href="https://imgchr.com/i/YhpZLj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpZLj.md.png" alt="YhpZLj.png" border="0"></a></h6><p><a href="https://imgchr.com/i/YhpWkt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpWkt.png" alt="YhpWkt.png" border="0"></a></p>
<h5 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h5><p><a href="https://imgchr.com/i/Yh9pX4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9pX4.png" alt="Yh9pX4.png" border="0"></a></p>
<p><strong>Hive不支持数据删除和修改</strong></p>
<h5 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h5><p><a href="https://imgchr.com/i/Yh9BEn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9BEn.md.png" alt="Yh9BEn.md.png" border="0"></a><br><a href="https://imgchr.com/i/Yh9r40" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9r40.md.png" alt="Yh9r40.md.png" border="0"></a></p>
<h3 id="Hive如何调优"><a href="#Hive如何调优" class="headerlink" title="Hive如何调优"></a>Hive如何调优</h3><p><img src="https://s1.ax1x.com/2020/05/18/Yh9DNq.md.png" alt="Yh9DNq.md.png" border="0"></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>Hive</tag>
        <tag>Hbase</tag>
        <tag>Pig</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-第二章</title>
    <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><em>在内存中需要分配连续的存储空间</em></p>
<p><em>支持顺序访问和随机访问</em></p>
<p><strong>数组擅长随机访问，链表擅长删除和插入</strong></p>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><em>链表中的元素可以存储在内存中任何地方</em></p>
<p><em>只支持顺序访问</em></p>
<p><em>每个元素存储了下一个元素的位置，将每个元素连接起来</em></p>
<p><em>对于需要直接定位到某个元素，链表比数组效率要低，因为需要上一个元素知道下一个元素的地址</em></p>
<p><em>删除和插入操作，链表比数组跟高效</em></p>
<p><em>删除一定会成功，插入不一定，因为可能内存不够</em></p>
<img src="https://s1.ax1x.com/2020/05/10/Y3zj9x.png" alt="Y3zj9x.png" border="0">

<p><em>链表和数组混合使用</em></p>
<h3 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>算法-第一章</title>
    <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p><em>算法是一组完成任务的指令。任何代码都可以叫做算法</em></p>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><em>二分查找时一种算法，其输入是一个<strong>有序</strong>的元素列表</em></p>
<h4 id="次数"><a href="#次数" class="headerlink" title="次数"></a>次数</h4><p><em>1到100的数字集，只需要<strong>7步</strong>就可以找到正确的数值</em></p>
<p><em>一般而言，对于包含n个元素的列表，用二分查找最多需：</em><br>$$<br>log2n<br>$$</p>
<h4 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, item)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        guess = list[mid]</span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h4 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h4><p>简单查询(线性时间)：O(n)</p>
<p>二分查找(对数时间)：O(log2n)</p>
<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p><em>大O表示法能够比较操作次数，它指出了算法运行时间的增速</em></p>
<p><em>表示的是最糟糕情况下的时间</em></p>
<p><strong>除最糟糕情况下的运行时间外，还应该考虑平均情况的运行时间，这是很重要的</strong></p>
<p><em>大O表示法并不考虑乘以，除以，加上，减去的数字</em></p>
<p><em>常见的五种大O运行时间：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(log2n)  对数时间  二分查找</span><br><span class="line"></span><br><span class="line">O(n)  线性时间，简单查找</span><br><span class="line"></span><br><span class="line">O(n*log2n)  快速排序</span><br><span class="line"></span><br><span class="line">O(n^2)  一种速度较慢的排序方法</span><br><span class="line"></span><br><span class="line">O(n!)  旅行商问题</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/Y17M6I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/10/Y17M6I.md.png" alt="Y17M6I.png" border="0"></a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><em>算法的速度并非指时间，而是操作数的增速</em></p>
<p><em>谈论算法的时间时，我们说的是输入的增加，其运行时间以什么样的速度增加</em></p>
<p><em>算法的时间并不以秒为单位</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter常用组件目录</title>
    <url>/tkinter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9B%AE%E5%BD%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<p><a href="https://www.cnblogs.com/kongzhagen/p/6145437.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/kongzhagen/p/6145437.html</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter之checkbutton</title>
    <url>/tkinter%E4%B9%8Bcheckbutton.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="checkbutton"><a href="#checkbutton" class="headerlink" title="checkbutton"></a>checkbutton</h2><h3 id="状态值"><a href="#状态值" class="headerlink" title="状态值"></a>状态值</h3><p><em>具有on和off两种状态</em></p>
<h4 id="设置状态值为0-1"><a href="#设置状态值为0-1" class="headerlink" title="设置状态值为0,1"></a>设置状态值为0,1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">on为<span class="number">1</span>， off为<span class="number">0</span></span><br><span class="line">intvar = IntVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=intvar, command=...)</span><br></pre></td></tr></table></figure>

<h4 id="设置状态值为设置的值"><a href="#设置状态值为设置的值" class="headerlink" title="设置状态值为设置的值"></a>设置状态值为设置的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stringVar = StringVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=stringVar, onvalue=<span class="string">'AA'</span>, offvalue=<span class="string">'BB'</span>, command=...)</span><br></pre></td></tr></table></figure>

<h3 id="获取复选框文本值"><a href="#获取复选框文本值" class="headerlink" title="获取复选框文本值"></a>获取复选框文本值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = checkbutton[<span class="string">'text'</span>]</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter之Text</title>
    <url>/tkinter%E4%B9%8BText.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Tkinter"><a href="#Tkinter" class="headerlink" title="Tkinter"></a>Tkinter</h1><p><em>Text（文本）组件用于显示和处理多行文本。在 Tkinter 的所有组件中，Text 组件显得异常强大和灵活，适用于多种任务。虽然该组件的主要目的是显示多行文本，但它常常也被用于作为简单的文本编辑器和网页浏览器使用</em></p>
<p><em>Text 组件用于显示文本文档，包含纯文本或格式化文本（使用不同字体，嵌入图片，显示链接，甚至是带 CSS 格式的 HTML 等）</em></p>
<h2 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"Python.com!"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>

<h4 id="指定标签"><a href="#指定标签" class="headerlink" title="指定标签"></a>指定标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 tag</span></span><br><span class="line">text.tag_config(<span class="string">"tag_1"</span>, backgroun=<span class="string">"yellow"</span>, foreground=<span class="string">"red"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"FishC.com!"</span>, <span class="string">"tag_1"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><em>在 Text 组件中插入对象，可以使用 window_create() 和 image_create() 方法</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love Python!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"哎呀，我被点了一下~"</span>)</span><br><span class="line">    </span><br><span class="line">b1 = tk.Button(text, text=<span class="string">"点我点我"</span>, command=show)</span><br><span class="line">text.window_create(<span class="string">"insert"</span>, window=b1)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h2><h3 id="全部内容"><a href="#全部内容" class="headerlink" title="全部内容"></a>全部内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.delete(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除一个对象"><a href="#删除一个对象" class="headerlink" title="删除一个对象"></a>删除一个对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.delete(object)</span><br></pre></td></tr></table></figure>



<h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contents = text.get(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><p><em>index() 方法用于将所有支持的“索引”格式（请参考下方【Indexes 用法】）转换为“行.列”格式的索引号</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="mark-set"><a href="#mark-set" class="headerlink" title="mark_set()"></a>mark_set()</h2><p><em>如果你需要跟踪一个位置，那么你可以将该位置“标记”下来</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">text.mark_set(<span class="string">"here"</span>, <span class="string">'1.8'</span>)</span><br><span class="line">text.insert(<span class="string">"here"</span>, <span class="string">"very "</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h2 id="文本换行输入"><a href="#文本换行输入" class="headerlink" title="文本换行输入"></a>文本换行输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.insert(END/INSERT, <span class="string">'..../n'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.insert(...)</span><br><span class="line">text.insert(INSERT, <span class="string">'/n'</span>)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>java笔记</title>
    <url>/java%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="eclipse代码快速排版"><a href="#eclipse代码快速排版" class="headerlink" title="eclipse代码快速排版"></a>eclipse代码快速排版</h2><p><em>ctrl+shif+f</em></p>
<h2 id><a href="#" class="headerlink" title></a></h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>排版</tag>
        <tag>对齐</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop笔记</title>
    <url>/hadoop%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="eclipse关联hadoop源码"><a href="#eclipse关联hadoop源码" class="headerlink" title="eclipse关联hadoop源码"></a>eclipse关联hadoop源码</h2><p><em>解压hadoop-2.7.1-src.tar.gz</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzf hadoop-2.7.1-src.tar.gz*</span><br></pre></td></tr></table></figure>

<p><em>eclipse选择解压后的文件</em></p>
<h2 id><a href="#" class="headerlink" title></a></h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>hadoop源码</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据更新</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入元组"><a href="#插入元组" class="headerlink" title="插入元组"></a>插入元组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*全部属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME</span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*必须和表的顺序相同*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*特定属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME(...) <span class="comment">/*属性顺序可以和表的顺序不同*/</span></span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*要和上面顺序相同;用单引号*/</span></span><br></pre></td></tr></table></figure>

<p><em>不赋值的话会默认赋空值；也可以显示的赋NULL</em></p>
<h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">INTO</span> ＜表名＞ ［(＜属性列<span class="number">1</span>＞ ［,＜属性列<span class="number">2</span>＞…］ )</span><br><span class="line">子査询；</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="keyword">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure>

<p><em>可以转换为连接操作</em></p>
<h4 id="SELECT…INTO"><a href="#SELECT…INTO" class="headerlink" title="SELECT…INTO"></a>SELECT…INTO</h4><p><em>将一个表中的数据插入到另一个表</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> newTable</span><br><span class="line"><span class="keyword">FROM</span> oldTable</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure>



<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> ＜表名＞</span><br><span class="line"><span class="keyword">SET</span>＜列名＞=＜表达式＞ ［,＜列名＞=＜表达式＞］ …</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure>

<h4 id="修改某一个元组的值"><a href="#修改某一个元组的值" class="headerlink" title="修改某一个元组的值"></a>修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage=<span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'2012J5121'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="修改多个元组的值"><a href="#修改多个元组的值" class="headerlink" title="修改多个元组的值"></a>修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student116</span><br><span class="line"><span class="keyword">SET</span> Sage=Sage+l;</span><br></pre></td></tr></table></figure>

<h4 id="带子查询的修改语句"><a href="#带子查询的修改语句" class="headerlink" title="带子查询的修改语句"></a>带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SC</span><br><span class="line"><span class="keyword">SET</span> Grade=O</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/05/06/YAbXIf.png" alt="YAbXIf.png" border="0">

<p><em>可以转换为连接操作</em></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> ＜表名＞</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure>

<h4 id="删除某一个元组的值"><a href="#删除某一个元组的值" class="headerlink" title="删除某一个元组的值"></a>删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215128'</span>；</span><br></pre></td></tr></table></figure>

<h4 id="删除多个元组"><a href="#删除多个元组" class="headerlink" title="删除多个元组"></a>删除多个元组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>

<h4 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure>

<p><em>注意：删除操作不可以用连接代替</em></p>
<img src="https://s1.ax1x.com/2020/05/06/YAOGxe.png" alt="YAOGxe.png" border="0">









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据更新</tag>
      </tags>
  </entry>
  <entry>
    <title>高数</title>
    <url>/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><h3 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h3><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p><em>定义：设X,Y是两个非空集合，如果存在一个法则，使得X中的每一个元素按照法则f,在Y中都有唯一的元素y与之对应，那么则称f为从X到Y的<strong>映射</strong>.</em></p>
<p><em>元素y称为x(在映射f下)的像；x称为元素y在(在映射f下)的<strong>原像</strong>.</em></p>
<p><em>可能是一对多</em></p>
<p><strong>满射</strong>：<em>Y中每一个元素都是X中某元素的像</em></p>
<p><strong>单射</strong>：<em>像只有唯一的原像</em></p>
<p><strong>一一映射</strong>：<em>既是单射又是满射</em></p>
<p><em>映射又叫算子</em></p>
<p><em>非空数集X到数集Y的映射又称为X上的泛函</em></p>
<p><em>非空数集X到数集X的映射称为X上的转换</em></p>
<p><em>非空实数集X到实数集Y的映射又称为X上的函数</em></p>
<h4 id="逆映射与复合映射"><a href="#逆映射与复合映射" class="headerlink" title="逆映射与复合映射"></a>逆映射与复合映射</h4><p><em>单射才存在逆映射</em></p>
<p><em>映射的值域作为逆映射的定义域</em></p>
<p><em>复合映射的条件是，g的值域必须包含在f的定义域内</em></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><em>实数到实数的映射</em></p>
<p><strong>构成函数的条件</strong>：<em>定义域和对应法则</em></p>
<p><em>两个函数相同的条件：定义域和法则都相同</em></p>
<h2 id="证明一个点左右的连续性"><a href="#证明一个点左右的连续性" class="headerlink" title="证明一个点左右的连续性"></a>证明一个点左右的连续性</h2><p><em>左右极限相等且等于该点函数值，则函数在该点连续</em></p>
<h2 id="三次方程求解方法"><a href="#三次方程求解方法" class="headerlink" title="三次方程求解方法"></a>三次方程求解方法</h2><h3 id="因式分解"><a href="#因式分解" class="headerlink" title="因式分解"></a>因式分解</h3><h3 id="先算出一个根"><a href="#先算出一个根" class="headerlink" title="先算出一个根"></a>先算出一个根</h3><p><a href="https://imgchr.com/i/YG0nTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0nTx.md.png" alt="YG0nTx.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><img src="https://s1.ax1x.com/2020/05/05/YkPeFs.png" alt="YkPeFs.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkPgfI.png" alt="YkPgfI.png" border="0">

<h3 id="三阶行列式的求法"><a href="#三阶行列式的求法" class="headerlink" title="三阶行列式的求法"></a>三阶行列式的求法</h3><img src="https://s1.ax1x.com/2020/05/11/YGUkq0.png" alt="YGUkq0.png" border="0">

<h3 id="按某一行某一列展开计算"><a href="#按某一行某一列展开计算" class="headerlink" title="按某一行某一列展开计算"></a>按某一行某一列展开计算</h3><p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.jpg" border="0"></a></p>
<h3 id="转换为上三角矩阵"><a href="#转换为上三角矩阵" class="headerlink" title="转换为上三角矩阵"></a>转换为上三角矩阵</h3><p><em>结果等于主对角线的乘积</em></p>
<h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h2><p><em>把矩阵元素aij放到aji的位置</em></p>
<img src="https://s1.ax1x.com/2020/05/06/YkOa01.png" alt="YkOa01.png" border="0">

<h2 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h2><p><em>二阶矩阵的伴随矩阵等于：主对角线对换，副对角线变号</em></p>
<img src="https://s1.ax1x.com/2020/05/05/Yki9AJ.png" alt="Yki9AJ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkFUsK.png" alt="YkFUsK.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkFXeU.png" alt="YkFXeU.png" border="0">

<h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em>设A为n阶矩阵，若存在n阶矩阵B使得:AB=BA=E(单位矩阵)，则称A是可逆的且矩阵B是矩阵A的逆矩阵</em></p>
<h3 id="逆矩阵唯一性证明"><a href="#逆矩阵唯一性证明" class="headerlink" title="逆矩阵唯一性证明"></a>逆矩阵唯一性证明</h3><p><strong>若A是可逆矩阵，则A的逆矩阵是唯一的。证明：</strong></p>
<img src="https://s1.ax1x.com/2020/05/05/YFxDm9.png" alt="YFxDm9.png" border="0">

<p><a href="https://imgchr.com/i/YkZSHK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/05/YkZeDP.png" alt="YkZeDP.png" border="0"></a></p>
<h3 id="求逆矩阵"><a href="#求逆矩阵" class="headerlink" title="求逆矩阵"></a>求逆矩阵</h3><h4 id="定义求"><a href="#定义求" class="headerlink" title="定义求"></a>定义求</h4><h4 id="初等变换法"><a href="#初等变换法" class="headerlink" title="初等变换法"></a>初等变换法</h4><p><a href="https://imgchr.com/i/Noo00A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/Noo00A.md.png" alt="Noo00A.md.png" border="0"></a><br><a href="https://imgchr.com/i/Noorkt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/Noorkt.md.png" alt="Noorkt.md.png" border="0"></a></p>
<h4 id="伴随阵法"><a href="#伴随阵法" class="headerlink" title="伴随阵法"></a>伴随阵法</h4><img src="https://s1.ax1x.com/2020/05/05/YkAlC9.png" alt="YkAlC9.png" border="0">



<p><a href="https://imgchr.com/i/NooBTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/NooBTI.md.png" alt="NooBTI.md.png" border="0"></a></p>
<h3 id="矩阵的特征值和特征向量"><a href="#矩阵的特征值和特征向量" class="headerlink" title="矩阵的特征值和特征向量"></a>矩阵的特征值和特征向量</h3><p><a href="https://imgchr.com/i/YGGEy6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGEy6.md.png" alt="YGGEy6.md.png" border="0"></a><br><a href="https://imgchr.com/i/YGGAQx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGAQx.png" alt="YGGAQx.png" border="0"></a><br><a href="https://imgchr.com/i/YGGeeO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGeeO.png" alt="YGGeeO.png" border="0"></a><br><a href="https://imgchr.com/i/YGGVOK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGVOK.png" alt="YGGVOK.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YGGOtH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGOtH.md.jpg" alt="YGGOtH.jpg" border="0"></a></p>
<h2 id="奇异方程和非奇异方程"><a href="#奇异方程和非奇异方程" class="headerlink" title="奇异方程和非奇异方程"></a>奇异方程和非奇异方程</h2><p><em>奇异方程的行列式为0</em></p>
<hr>
<blockquote>
<p>授人以鱼，不如授人以渔。</p>
</blockquote>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>成语</title>
    <url>/%E6%88%90%E8%AF%AD%E7%BE%8E%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="舌灿莲花"><a href="#舌灿莲花" class="headerlink" title="舌灿莲花"></a>舌灿莲花</h2><p><em>形容人口才好，口齿伶俐，能说善道，有如莲花般地美妙</em></p>
<h2 id="絮聒不休"><a href="#絮聒不休" class="headerlink" title="絮聒不休"></a>絮聒不休</h2><p><em>多形容，话多，不停歇，没完没了</em></p>
<h2 id="吐佳言如锯木屑，霏霏不绝"><a href="#吐佳言如锯木屑，霏霏不绝" class="headerlink" title="吐佳言如锯木屑，霏霏不绝"></a>吐佳言如锯木屑，霏霏不绝</h2><h2 id="谈霏玉屑"><a href="#谈霏玉屑" class="headerlink" title="谈霏玉屑"></a>谈霏玉屑</h2><p><em>谈话时美好的言辞像玉的碎末纷纷洒落一样。言谈美妙，滔滔不绝</em></p>
<h2 id="话如连珠"><a href="#话如连珠" class="headerlink" title="话如连珠"></a>话如连珠</h2><p>​p>
<h2 id="音容并茂"><a href="#音容并茂" class="headerlink" title="音容并茂"></a>音容并茂</h2><p><em>说话时语言和表情都十分丰富</em></p>
<h2 id="钳口结舌"><a href="#钳口结舌" class="headerlink" title="钳口结舌"></a>钳口结舌</h2><p><em>形容理屈词穷说不出话来。也指慑于淫威不敢讲话</em></p>
<h2 id="三缄其口"><a href="#三缄其口" class="headerlink" title="三缄其口"></a>三缄其口</h2><p><em>形容说话谨慎。现在也形容不肯或不敢开口</em></p>
<hr>
<blockquote>
<p>善谈和健谈不同，健谈者能使四座生春，但多少有点霸道，善谈者尽管舌灿莲花，但总还要给别人留些说话的机会。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>梗</title>
    <url>/%E6%A2%97.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="df3bed18e79639a00c58eaa8fa452a73c16ab9a76af713393f49259efaccb1a4">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64ed98635955ff914dfbe25cec259276237b1327efd81f383834728fef1e8afba3218913fdd54a9ca502f12266e02d96c73e4b1405909e55c355646e2e51b73b9f742bc5c4d026844017c1dc1abe0abe8bea7c41a7c76dc1afe6ba4195fec5c19a83645fb43d5557e4dbc1fd1daf4aa92eca4f845ab0e200d8842c98ee8844ba1cce4296a2e3a093b360e07ba70232606fb6d97b982797749578b7bff718a2c49a400505c02804fecf4852e59eb989047f7040747d993d76d2fccc2af366cb4554c3fb72670dc960c443d846d2c8b1da204fca1365e30c5e2a26801c953f464cd05868f15c5dc65a67c8481e2b8eb7d702c7450cd52879cac4a0f2aa8026d338a07c982410a69d0eb4b5a8b779a645d62f698658d57e334ef419c84191f548c90a2b785b903e75ee355f52536c7c98b0e6b4874dad713407673cbf63275982a776f59ca77e0618aa1658b11160ea1c31586b9d31ae9f45d7da7984b3730c0a42f0dfee8d97213a49244c24eb340e35153494038e474b470c6872b947ac0cdda064903e677795ce58803122c7b7f7f4374eb6dcb7ec352362a4812aff6859ef4f9e9cab3b79cdb46b2b804fa348fcf3d54d6fdf62836da2d062bc82a208fd05815a5ee69a58dd9eacbda59cd39df3762be0e5b9e0c9b86f91796c08ef78b370de14ef24f0ea62d46daccdfbaf952ea85a08ad1322aebfdd91fd22c538cd147f21efcacaabd8ca5a433696d0112154908a7845437cc6a25ca29b257bea477f7a0824121d98a7bb25cdd1c4d942b4c205ff3a5446a1504eb2b281dd4e7733c10324049ba6d86cede0ed85cd019a536f9998f23164cb102e5b5a93127bba2c7c7d5db00506a59adb8ff88cff518a9272c8508aa12c4fd0cf60ba6348f593c1c53b0b983080f599424fa593dbe7c963a9dce73d3ecc3ad43546644cbe19c781f86057636f31ca09c76dbf399308126d1be4669bc620d764b3ae69aa26f131a97bd72bcdd5c5eace8d17aa583d12f51c1c830d1e1836cf2c2859b548369b57db98c7c8d633d32811c17359366e2f9dc974f716c0453cbd100906ff8363f664135df0e8fca985e9fb8223d7134febb14720f4ee9023ea63174d1d7ee7a322c7df7b3f7b3b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>梗</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第一章</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%80%E7%AB%A0(%E5%88%9D%E8%AF%86%20Hadoop%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF).html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="初识-Hadoop-大数据技术"><a href="#初识-Hadoop-大数据技术" class="headerlink" title="初识 Hadoop 大数据技术"></a>初识 Hadoop 大数据技术</h2><h3 id="大数据技术概述"><a href="#大数据技术概述" class="headerlink" title="大数据技术概述"></a>大数据技术概述</h3><h4 id="大数据产生的背景"><a href="#大数据产生的背景" class="headerlink" title="大数据产生的背景"></a>大数据产生的背景</h4><p><em>计算机诞生; 互联网发展</em>  </p>
<h4 id="大数据的定义"><a href="#大数据的定义" class="headerlink" title="大数据的定义"></a>大数据的定义</h4><p>“大数据”是一个<strong>涵盖多种技术的概念</strong>，简单地说，是指无法在一定时间内用常规软件工具对<br>其内容进行抓取、管理和处理的数据集合。     </p>
<p>IBM 公司将“大数据”理念定义为 4 个 V，即<strong>大量化( Volume）、多样化（ Variety）、快速化（ Velocity）及由此产生的价值（ Value）</strong>。  </p>
<ul>
<li>数据体量大：大数据的数据量从 TB 级别跃升到 PB 级别。</li>
<li>数据类型多：大数据的数据类型包括前文提到的网络日志、视频、图片、地理位置信息等。</li>
<li>处理速度快： 1 秒定律。最后这一点是大数据技术与传统数据挖掘技术的本质区别。</li>
<li>价值密度低：以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒  </li>
</ul>
<h4 id="大数据技术的发展"><a href="#大数据技术的发展" class="headerlink" title="大数据技术的发展"></a>大数据技术的发展</h4><p><em>大数据技术要面对的基本问题，也是最核心的问题，就是海量数据<strong>如何可靠存储和如何高效计算的问题</strong>。</em>  </p>
<h3 id="Google-的“三驾马车”"><a href="#Google-的“三驾马车”" class="headerlink" title="Google 的“三驾马车”"></a>Google 的“三驾马车”</h3><h4 id="GFS-的思想"><a href="#GFS-的思想" class="headerlink" title="GFS 的思想"></a>GFS 的思想</h4><p><em>论文“The Google File System”描述了一个分布式文件系统的设计思路</em></p>
<p><em>从交互实体上划分，分布式文件系统有两个基本组成部分，一个是<strong>客户端（ Client）</strong>，一个是<strong>服务端（ Server）</strong>.</em>  </p>
<p><em>如果客户端把文件上传到服务端，但是服务端的硬盘不够大，怎么办？ 多加硬盘，或多增加主机</em> </p>
<p><em>数据的存储可靠性怎么保证？ 数据冗余存储</em> </p>
<p><em>主机或硬盘如何被管理起来?  管理节点</em></p>
<p><em>GFS 解决这些问题的思路是这样的，增加一个<strong>管理节点</strong>，去管理这些存放数据的主机。存放数据的主机称为<strong>数据节点</strong>。 而上传的文件会按<strong>固定的大小进行分块</strong>。 数据节点上保存的是<strong>数据块</strong>，而非独立的文件。数据块<strong>冗余度默认是 3</strong>。<strong>上传文件时</strong>，客户端先连接管理节点，管理节点生成数据块的信息，包括文件名、文件大小、上传时间、数据块的位置信息等。这些信息称为<strong>文件的元信息</strong>，它会保存在管理节点。客户端获取这些元信息之后，就开始把数据块一个个上传。客户端把数据块先上传到第一个数据节点，然后，在管理节点的管理下，通过水平复制，复制几份数据块到其他节点，最终达到冗余度的要求。<strong>水平复制需要考虑两个要求：可靠性、可用性</strong>.</em></p>
<p><a href="https://imgchr.com/i/YSnxw4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnxw4.md.png" alt="YSnxw4.md.png" border="0"></a><br><a href="https://imgchr.com/i/YSnvmF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnvmF.md.png" alt="YSnvmF.md.png" border="0"></a></p>
<h4 id="MapReduce-的思想"><a href="#MapReduce-的思想" class="headerlink" title="MapReduce 的思想"></a>MapReduce 的思想</h4><p><em>PageRank，即网页排名，又称网页级别</em>  </p>
<p><em>MapReduce 采用“分而治之”的思想，把对大规模数据集的操作，分发给一个主节点管理下的各个子节点共同完成，然后整合各个子节点的中间结果，得到最终的计算结果。简而言之， MapReduce 就是“分散任务，汇总结果”</em> </p>
<h4 id="BigTable的思想"><a href="#BigTable的思想" class="headerlink" title="BigTable的思想"></a>BigTable的思想</h4><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
  </entry>
  <entry>
    <title>vmware安装tools</title>
    <url>/vmware%E5%AE%89%E8%A3%85tools.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="安装vmware-tools"><a href="#安装vmware-tools" class="headerlink" title="安装vmware tools"></a>安装vmware tools</h2><h3 id="选择Linux-iso"><a href="#选择Linux-iso" class="headerlink" title="选择Linux.iso"></a>选择Linux.iso</h3><p><em>关闭vmware重新打开，编辑虚拟系统设置-&gt;CD/DVD-&gt;浏览-&gt;选择linux.iso(在vmware的安装路径下，可以复制到虚拟系统镜像文件iso处-&gt;确定)</em></p>
<p><a href="https://imgchr.com/i/J4YiTO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4YiTO.md.png" alt="J4YiTO.png" border="0"></a></p>
<h3 id="安装Tools"><a href="#安装Tools" class="headerlink" title="安装Tools"></a>安装Tools</h3><p><em>打开虚拟系统-&gt;桌面-&gt;左侧导航栏的CD/DVD-&gt;复制里面的tools压缩包到桌面-&gt;右键选择extract here-&gt;打开解压后文件-&gt;shift + 右键-&gt;open terminal -&gt; sudo ./vmware-install.pl-&gt;根据提示成功安装</em></p>
<p><a href="https://imgchr.com/i/J4tgPg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tgPg.md.png" alt="J4tgPg.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/J4tR2j" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tR2j.md.png" alt="J4tR2j.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/J4t2GQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4t2GQ.md.png" alt="J4t2GQ.md.png" border="0"></a></p>
<h3 id><a href="#" class="headerlink" title></a></h3><hr>
<blockquote>
<p>随意春芳歇，王孙自可留。</p>
</blockquote>
]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>vmware</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析-方程组</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%96%B9%E7%A8%8B%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h1><h2 id="高斯消去法"><a href="#高斯消去法" class="headerlink" title="高斯消去法"></a>高斯消去法</h2><p><em>难于求解或求高精度的解</em></p>
<h3 id="朴素的高斯消去法"><a href="#朴素的高斯消去法" class="headerlink" title="朴素的高斯消去法"></a>朴素的高斯消去法</h3><p><strong>主元</strong>：主对角线上的元素</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="消去步骤"><a href="#消去步骤" class="headerlink" title="消去步骤"></a>消去步骤</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><img src="https://s1.ax1x.com/2020/05/02/JjR2DO.png" alt="JjR2DO.png" border="0">

<p><em>没有在aij的位置放零是因为后续不会用到该值，提高效率</em></p>
<p><em>当遇到主元为零是程序会终止</em></p>
<h5 id="回代或向后求解"><a href="#回代或向后求解" class="headerlink" title="回代或向后求解"></a>回代或向后求解</h5><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><p><a href="https://imgchr.com/i/JjfqAg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0"></a></p>
<h4 id="操作次数"><a href="#操作次数" class="headerlink" title="操作次数"></a>操作次数</h4><p><em>对消去步骤和回代步骤的计算次数进行统计</em></p>
<h5 id="高斯消去法中消去步骤的操作次数"><a href="#高斯消去法中消去步骤的操作次数" class="headerlink" title="高斯消去法中消去步骤的操作次数"></a>高斯消去法中消去步骤的操作次数</h5><p><em>把第一列转化为0，需要(2n+1)(n-1)次计算：</em></p>
<p>（1+n+n)(n-1)</p>
<img src="https://s1.ax1x.com/2020/04/26/JcgErR.png" alt="JcgErR.png" border="0">

<p>n个方程n个未知数的消去计算，可以在2/3n^3+1/2n^2-7/6n次操作后完成</p>
<h6 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h6><p>O(n^3)</p>
<h5 id="高斯消去法中回代步骤的操作次数"><a href="#高斯消去法中回代步骤的操作次数" class="headerlink" title="高斯消去法中回代步骤的操作次数"></a>高斯消去法中回代步骤的操作次数</h5><p><a href="https://imgchr.com/i/JjfHHS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfHHS.png" alt="JjfHHS.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0">

<p><em>n个 方 程 n个 未 知 数 的 三 角 形 系 统 的 回 代 过 程 可 以 使 用 n^2次操作完成</em></p>
<p>*<em>当n很大时，消去步骤的低阶可以省略; 换 句 话 说 ， 对 于 “，在 复 杂 度 计 算 中 的 低 阶 项 对 于 算 法 运 行 时 间 的 估 计 没 有 大的 影 响 ，并可以忽略.  *</em></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Jj7rPU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/Jj7rPU.png" alt="Jj7rPU.png" border="0"></a></p>
<h2 id="高斯主元素消去法"><a href="#高斯主元素消去法" class="headerlink" title="高斯主元素消去法"></a>高斯主元素消去法</h2><p><em>由高斯消去法知道在消元过程中可能出现的情况主元素为0，这时消去法将无法进行；即使主元素但很小时，用其作除数，会导致其他元素数量级的严重增长和舍入误差的扩散，最后也使得计算解不可靠</em></p>
<h2 id="LU分解"><a href="#LU分解" class="headerlink" title="LU分解"></a>LU分解</h2><h3 id="LU分解过程"><a href="#LU分解过程" class="headerlink" title="LU分解过程"></a>LU分解过程</h3><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p><em>在高斯消去法的基础上把0的位置写上倍数</em></p>
<p><a href="https://imgchr.com/i/JorlBF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorlBF.md.png" alt="JorlBF.png" border="0"></a></p>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p><code>Amn = Lm1U1n + Lm2U2n + ...+ Umn</code></p>
<p><a href="https://imgchr.com/i/JorhDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorhDS.md.jpg" alt="JorhDS.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/Jorfu8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/Jorfu8.md.jpg" alt="Jorfu8.md.jpg" border="0"></a></p>
<h3 id="使用LU分解回代"><a href="#使用LU分解回代" class="headerlink" title="使用LU分解回代"></a>使用LU分解回代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ax &#x3D; b</span><br><span class="line">LUx &#x3D; b</span><br><span class="line">Ly &#x3D; b 法二可以直接最初把b也写上，最后b这一列就是y</span><br><span class="line">Ux &#x3D; y</span><br><span class="line">求出x</span><br></pre></td></tr></table></figure>

<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><h2 id="追赶法"><a href="#追赶法" class="headerlink" title="追赶法"></a>追赶法</h2><p><em>在一些实际问题中， 例如解常微分方程边值问题，热传导方程以及船体数学放样中建立三次样条函数等，都会要求解系数矩阵为<strong>对角占优的三对角线方程组</strong>.</em></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><img src="https://s1.ax1x.com/2020/05/06/YAFFk4.jpg" alt="YAFFk4.jpg" border="0">

<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><img src="https://s1.ax1x.com/2020/05/06/YAiQWn.jpg" alt="YAiQWn.jpg" border="0">



<img src="https://s1.ax1x.com/2020/05/06/YAVNGQ.jpg" alt="YAVNGQ.jpg" border="0">



<h2 id="向量与矩阵的范数"><a href="#向量与矩阵的范数" class="headerlink" title="向量与矩阵的范数"></a>向量与矩阵的范数</h2><h3 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h3><p><a href="https://imgchr.com/i/YWr0s0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWr0s0.png" alt="YWr0s0.png" border="0"></a></p>
<h3 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h3><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/YGw0y9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGw0y9.md.png" alt="YGw0y9.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwOSg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwOSg.md.jpg" alt="YGwOSg.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwbY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwbY8.jpg" alt="YGwbY8.jpg" border="0"></a></p>
<h3 id="条件数"><a href="#条件数" class="headerlink" title="条件数."></a>条件数.</h3><p><em>与矩阵的范数有关</em></p>
<img src="https://s1.ax1x.com/2020/05/11/YGsegO.md.jpg" alt="YGsegO.jpg" border="0">



<h2 id="线性方程组的迭代方法"><a href="#线性方程组的迭代方法" class="headerlink" title="线性方程组的迭代方法"></a>线性方程组的迭代方法</h2><h3 id="雅可比迭代法-Jacobi"><a href="#雅可比迭代法-Jacobi" class="headerlink" title="雅可比迭代法(Jacobi)"></a>雅可比迭代法(Jacobi)</h3><p><em>1.将线性方程组的第i个方程中的第i个变量用其它n-1个变量表示出来，生成迭代方程组</em></p>
<p><em>2.取定初始向量，依次迭代</em></p>
<p>3.</p>
<p><a href="https://imgchr.com/i/YWrfQ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWrfQ1.md.png" alt="YWrfQ1.png" border="0"></a></p>
<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p><a href="https://imgchr.com/i/YWHe2t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHe2t.md.jpg" alt="YWHe2t.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YWHZ8I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHZ8I.md.jpg" alt="YWHZ8I.md.jpg" border="0"></a></p>
<h3 id="Jacobi迭代格式矩阵形式"><a href="#Jacobi迭代格式矩阵形式" class="headerlink" title="Jacobi迭代格式矩阵形式"></a>Jacobi迭代格式矩阵形式</h3><p><a href="https://imgchr.com/i/tpx4OO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tpx4OO.md.jpg" alt="tpx4OO.jpg" border="0"></a></p>
<h3 id="高斯-赛德尔迭代法-Gauss-Seidel"><a href="#高斯-赛德尔迭代法-Gauss-Seidel" class="headerlink" title="高斯-赛德尔迭代法(Gauss-Seidel)"></a>高斯-赛德尔迭代法(Gauss-Seidel)</h3><p><em>对雅克比迭代法的改进，用以求出的新值代替旧值</em></p>
<h4 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/YWHCDO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHCDO.md.jpg" alt="YWHCDO.jpg" border="0"></a></p>
<h3 id="逐次超松弛迭代法-SOR"><a href="#逐次超松弛迭代法-SOR" class="headerlink" title="逐次超松弛迭代法(SOR)"></a>逐次超松弛迭代法(SOR)</h3><p><em>针对收敛速度慢的情况。逐次超松弛迭代法是高斯-赛德尔的特殊情况</em></p>
<p><a href="https://imgchr.com/i/YoZEgH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/20/YoZEgH.md.jpg" alt="YoZEgH.jpg" border="0"></a></p>


<h3 id="迭代法的收敛性"><a href="#迭代法的收敛性" class="headerlink" title="迭代法的收敛性"></a>迭代法的收敛性</h3><p><strong>定理3.11(迭代法的基本定理)：</strong> <em>对任意初值x(0)均收敛的充分必要条件是p(B) &lt; 1</em></p>
<p><strong>推论 2</strong>：</p>
<p><em>Jacobi迭代法收敛的充分必要条件是：</em></p>
<p><em>Gauss-Seidel迭代法收敛的充分必要条件是：</em></p>
<p><em>SOR</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第四章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p><em>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。<br>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？</em></p>
<h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><p><em>让网络负责可靠交付</em></p>
<p><em>使用面向连接的通信方式</em></p>
<p><em>通信之前先建立虚电路 (Virtual Circuit)，以保证双方通信所需的一切网络资源</em></p>
<p><em>H1 发送给 H2 的所有分组都沿着同一条虚电路传送</em></p>
<p><strong>分组，存储转发，虚拟连接</strong></p>
<h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><p><em>网络层向上只提供<strong>简单灵活的、无连接的、尽最大努力交付</strong>的数据报服务</em></p>
<p><em>网络层不提供服务质量的承诺</em></p>
<h4 id="尽最大努力交付"><a href="#尽最大努力交付" class="headerlink" title="尽最大努力交付"></a>尽最大努力交付</h4><p><em>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉</em></p>
<p><em>如果主机（即端系统）中的进程之间的<strong>通信需要是可靠的，那么就由网络的主机中的运输层</strong>负责可靠交付（包括差错处理、流量控制等）</em></p>
<p><em>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用</em></p>
<p><em>H1 发送给 H2</em>的<strong>分组可能沿着不同路径传送</strong></p>
<h3 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h3><p><a href="https://imgchr.com/i/JRyK1g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRyK1g.md.png" alt="JRyK1g.png" border="0"></a></p>
<h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><p><em>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一</em></p>
<p>与 IP 协议配套使用的还有三个协议：</p>
<ul>
<li>地址解析协议 ARP<pre><code>(Address Resolution Protocol)</code></pre></li>
<li>网际控制报文协议 ICMP<br>   (Internet Control Message Protocol)</li>
<li>网际组管理协议 IGMP<br>   (Internet Group Management Protocol)</li>
</ul>
<p><a href="https://imgchr.com/i/JR6GKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JR6GKH.png" alt="JR6GKH.png" border="0"></a></p>
<h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>将网络互相连接起来要使用一些中间设备。<br>中间设备又称为<strong>中间系统或中继 (relay)系统</strong>。<br>有以下五种不同的中间设备：</p>
<ul>
<li>物理层中继系统：转发器 (repeater)。 </li>
<li>数据链路层中继系统：网桥 或 桥接器 (bridge)。</li>
<li>网络层中继系统：路由器 (router)。</li>
<li>网桥和路由器的混合物：桥路器 (brouter)。</li>
<li>网络层以上的中继系统：网关 (gateway)。</li>
</ul>
<h4 id="网络互连使用路由器"><a href="#网络互连使用路由器" class="headerlink" title="网络互连使用路由器"></a>网络互连使用路由器</h4><p><em>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。<br>网关由于比较复杂，目前使用得较少。<br><strong>网络互连都是指用路由器进行网络互连和路由选择</strong>。<br>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关</em></p>
<h4 id="互连网络与虚拟互连网络"><a href="#互连网络与虚拟互连网络" class="headerlink" title="互连网络与虚拟互连网络"></a>互连网络与虚拟互连网络</h4><img src="https://s1.ax1x.com/2020/04/27/JRcqXQ.png" alt="JRcqXQ.png" border="0">

<h4 id="虚拟互连网络的意义"><a href="#虚拟互连网络的意义" class="headerlink" title="虚拟互连网络的意义"></a>虚拟互连网络的意义</h4><p><strong>所谓虚拟互连网络也就是逻辑互连网络，利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络</strong>。</p>
<p>使用 IP 协议的虚拟互连网络可简称为<strong>IP 网</strong></p>
<p><strong>使用虚拟互连网络的好处是</strong>：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节</p>
<p>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的互联网 (Internet)</p>
<h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3><h4 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="IP 地址及其表示方法"></a>IP 地址及其表示方法</h4><p><em>IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是<strong>唯一的32 位</strong> 的标识符</em></p>
<p><em>IP 地址现在由<strong>互联网名字和数字分配机构</strong>ICANN (Internet Corporation for Assigned Names and Numbers)进行分配</em></p>
<h4 id="IP-地址的编址方法"><a href="#IP-地址的编址方法" class="headerlink" title="IP 地址的编址方法"></a>IP 地址的编址方法</h4><ul>
<li>分类IP 地址。这是最基本的编址方法，在 1981 年就通过了相应的标准协议。</li>
<li>子网的划分。这是对最基本的编址方法的改进，其标准[RFC 950] 在 1985 年通过。</li>
<li>构成超网。这是比较新的无分类编址方法。1993 年提出后很快就得到推广应用</li>
</ul>
<h5 id="分类-IP-地址"><a href="#分类-IP-地址" class="headerlink" title="分类 IP 地址"></a>分类 IP 地址</h5><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）</p>
<img src="https://s1.ax1x.com/2020/04/27/JR24Rf.png" alt="JR24Rf.png" border="0">

<p><em>总位数是确定的，而网络号和主机号不是确定长度</em></p>
<p><a href="https://imgchr.com/i/JRo5rV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRo5rV.png" alt="JRo5rV.png" border="0"></a></p>
<p><em>主机号有多少位就有2^(n-m)-2个主机，网络号就有2^(32-n)-2个网段</em></p>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><a href="https://imgchr.com/i/JRoxr6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoxr6.png" alt="JRoxr6.png" border="0"></a><br><a href="https://imgchr.com/i/JRovKx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRovKx.png" alt="JRovKx.png" border="0"></a><br><a href="https://imgchr.com/i/JRoXx1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoXx1.png" alt="JRoXx1.png" border="0"></a></p>
<h3 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h3><p><em>IP 地址与硬件地址是不同的地址</em></p>
<p>从层次的角度看：</p>
<ul>
<li>硬件地址（或物理地址）是数据链路层和物理层使用的地址</li>
<li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址（称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的）</li>
</ul>
<p><a href="https://imgchr.com/i/J5Ni9g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5Ni9g.md.png" alt="J5Ni9g.png" border="0"></a></p>
<p><strong>对应abce类IP地址的默认子网掩码是把网络号全部写为1，主机号为0</strong></p>
<p><strong>路由器的 IP 地址并不出现在 IP 数据报的首部中</strong></p>
<p><strong>在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报</strong></p>
<img src="https://s1.ax1x.com/2020/05/17/YRV6xK.png" alt="YRV6xK.png" border="0">

<h3 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h3><p><em>已经知道了一个机器（主机或路由器）的IP地址，如何找出其相应的硬件地址？地址解析协议 ARP 就是用来解决这样的问题的</em></p>
<p><strong>ARP 作用：从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址</strong></p>
<p>ARP IP-&gt;MAC</p>
<p>RARP MAC-&gt;IP</p>
<p>ARP分组请求</p>
<h4 id="ARP-高速缓存的作用"><a href="#ARP-高速缓存的作用" class="headerlink" title="ARP 高速缓存的作用"></a>ARP 高速缓存的作用</h4><p><em>存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量</em></p>
<p>TTL:地址映射有效时间</p>
<p>发送广播：前面全为1，后面全为1</p>
<p>发送ARP为广播传输，响应为1对1</p>
<p><a href="https://imgchr.com/i/J5y8JI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5y8JI.md.png" alt="J5y8JI.png" border="0"></a></p>
<p>以太网1500字节  数据1480</p>
<p>生存时间：防止无限传输</p>
<h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3><p><a href="https://imgchr.com/i/J5HxAI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5HxAI.md.png" alt="J5HxAI.png" border="0"></a></p>
<p><em>IP数据报=首部+数据部分</em></p>
<p><em>首部=固定部分+可变部分</em></p>
<p><em>固定部分=20字节，是IP数据报必须有的部分；可选字段长度可变</em></p>
<p><strong>版本</strong>：<em>IP协议版本</em></p>
<p><strong>首部长度</strong>：<em>占四个位，最大15个单位，单位为4个字节；所以首部长度最多60个字节</em></p>
<p><strong>总长度</strong>：<em>16位；单位为字节；数据报最长长度为2^16 - 1=65535字节</em></p>
<p><strong>总长度必须不超过最大传送单元 MTU（我们规定不能超过1500字节）</strong></p>
<p><strong>标识</strong>：<em>同一数据包的切片相同</em></p>
<p><strong>标志</strong>：<em>占3位；目前只有前两位有意义。<br>标志字段的最低位是 <strong>MF</strong> (More Fragment)。MF =1 表示后面“还有分片”。MF =0 表示最后一个分片。<br>标志字段中间的一位是 <strong>DF</strong> (Don’t Fragment) 。只有当 DF = 0 时才允许分片</em></p>
<p><strong>片偏移</strong>：<em>占13 位，指出：较长的分组在分片后<br>某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位</em></p>
<p><strong>生存时间</strong>：<em>生存时间——占8 位，记为 TTL (Time To Live)，<br>指示数据报在网络中可通过的路由器数的最大值</em></p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/J5OPgK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OPgK.md.png" alt="J5OPgK.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5OC36" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OC36.md.png" alt="J5OC36.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5O99x" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5O99x.md.png" alt="J5O99x.md.png" border="0"></a></p>
<h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><h3 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h3><h3 id="无分类编址-CIDR-考点"><a href="#无分类编址-CIDR-考点" class="headerlink" title="无分类编址 CIDR(考点)"></a>无分类编址 CIDR(考点)</h3><img src="https://s1.ax1x.com/2020/05/11/YGuunJ.png" alt="1" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGumX4.png" alt="2" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGuKB9.png" alt="3" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGuVpT.png" alt="4" border="0">



<h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><h3 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h3><h4 id="RIP-协议的三个特点"><a href="#RIP-协议的三个特点" class="headerlink" title="RIP 协议的三个特点"></a>RIP 协议的三个特点</h4><p>(1) 仅和相邻路由器交换信息。<br>(2) 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。<br>(3) 按固定的时间间隔交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</p>
<h3 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h3><h4 id="三个要点"><a href="#三个要点" class="headerlink" title="三个要点"></a>三个要点</h4><ul>
<li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li>
<li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<br>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 </li>
<li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</li>
</ul>
<h3 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h3><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p><em>比IPv4地址数扩大2^96倍</em></p>
<h3 id="IPv6-的地址"><a href="#IPv6-的地址" class="headerlink" title="IPv6 的地址"></a>IPv6 的地址</h3><h4 id="冒号十六进制记法"><a href="#冒号十六进制记法" class="headerlink" title="冒号十六进制记法"></a>冒号十六进制记法</h4><h4 id="零省略"><a href="#零省略" class="headerlink" title="零省略"></a>零省略</h4><h4 id="零压缩"><a href="#零压缩" class="headerlink" title="零压缩"></a>零压缩</h4><p><em>只能零压缩一次</em></p>
<h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/YNGoHP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNGoHP.md.png" alt="YNGoHP.md.png" border="0"></a><br><a href="https://imgchr.com/i/YNG7Af" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNG7Af.md.png" alt="YNG7Af.md.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>网站点击流数据分析</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%8C%E4%B8%9A%E9%83%A8%E7%BD%B2-%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E6%B5%81%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="网站点击流数据分析项目业务背景"><a href="#网站点击流数据分析项目业务背景" class="headerlink" title="网站点击流数据分析项目业务背景"></a>网站点击流数据分析项目业务背景</h1><h2 id="什么是点击流数据"><a href="#什么是点击流数据" class="headerlink" title="什么是点击流数据"></a>什么是点击流数据</h2><h3 id="WEB访问日志"><a href="#WEB访问日志" class="headerlink" title="WEB访问日志"></a>WEB访问日志</h3><p><em>即指用户访问网站时的所有访问、浏览、点击行为数据</em></p>
<h4 id="日志的生成渠道："><a href="#日志的生成渠道：" class="headerlink" title="日志的生成渠道："></a>日志的生成渠道：</h4><ul>
<li><p>是网站的web服务器所记录的web访问日志；</p>
</li>
<li><p>是通过在页面嵌入自定义的js代码来获取用户的所有访问行为（比如鼠标悬停的位置，点击的页面组件等），然后通过ajax请求到后台记录日志；这种方式所能采集的信息最全面；</p>
</li>
<li><p>通过在页面上埋点1像素的图片，将相关页面访问信息请求到后台记录日志；</p>
</li>
</ul>
<h4 id="日志数据内容详述"><a href="#日志数据内容详述" class="headerlink" title="日志数据内容详述"></a>日志数据内容详述</h4><p>在实际操作中，有以下几个方面的数据可以被采集：</p>
<ul>
<li><p><strong>访客的系统属性特征</strong>。比如所采用的操作系统、浏览器、域名和访问速度等。</p>
</li>
<li><p><strong>访问特征</strong>。包括停留时间、点击的URL等。</p>
</li>
<li><p><strong>来源特征</strong>。包括网络内容信息类型、内容分类和来访URL等。</p>
</li>
<li><p><strong>产品特征</strong>。包括所访问的产品编号、产品类别、产品颜色、产品价格、产品利润、产品数量和特价等级等</p>
</li>
</ul>
<h3 id="点击流数据模型"><a href="#点击流数据模型" class="headerlink" title="点击流数据模型"></a>点击流数据模型</h3><p><code>点击流这个概念更注重用户浏览网站的整个流程，网站日志中记录的用户点击就像是图上的“点”，而点击流更像是将这些“点”串起来形成的“线”</code></p>
<p><strong>点击流数据是由网站日志中整理得到的</strong></p>
<h4 id="点击流模型生成"><a href="#点击流模型生成" class="headerlink" title="点击流模型生成"></a>点击流模型生成</h4><p><em>点击流数据在具体操作上是由散点状的点击日志数据梳理所得，从而，点击数据在数据建模时应该存在两张模型表（Pageviews和visits)</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JaZcUU.png" alt="JaZcUU.png" border="0">

<p><em>这就是点击流模型。当WEB日志转化成点击流数据的时候，很多网站分析度量的计算变得简单了，这就是点击流的“魔力”所在。基于点击流数据我们可以统计出许多常见的网站分析度量</em></p>
<h2 id="网站流量数据分析的意义"><a href="#网站流量数据分析的意义" class="headerlink" title="网站流量数据分析的意义"></a>网站流量数据分析的意义</h2><p><em>网站流量统计分析，可以帮助网站管理员、运营人员、推广人员等实时获取网站流量信息，并从流量来源、网站内容、网站访客特性等多方面提供网站分析的数据依据。从而<strong>帮助提高网站流量，提升网站用户体验，让访客更多的沉淀下来变成会员或客户，通过更少的投入获取最大化的收入</strong>.</em></p>
<p><strong>终极目标是：改善网站(电商、社交、电影、小说)的运营，获取更高投资回报率（ROI）</strong></p>
<h3 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h3><ul>
<li><p>辅助改进网络的拓扑设计，提高性能</p>
</li>
<li><p>在有高度相关性的节点之间安排快速有效的访问路径</p>
</li>
<li><p>帮助企业更好地设计网站主页和安排网页内容</p>
</li>
</ul>
<h3 id="业务上"><a href="#业务上" class="headerlink" title="业务上"></a>业务上</h3><ul>
<li><p>帮助企业改善市场营销决策，如把广告放在适当的Web页面上。</p>
</li>
<li><p>优化页面及业务流程设计，提高流量转化率。</p>
</li>
<li><p>帮助企业更好地根据客户的兴趣来安排内容。</p>
</li>
<li><p>帮助企业对客户群进行细分，针对不同客户制定个性化的促销策略等</p>
</li>
</ul>
<h2 id="如何进行网站流量分析"><a href="#如何进行网站流量分析" class="headerlink" title="如何进行网站流量分析"></a>如何进行网站流量分析</h2><p><em>流量分析整体来说是一个内涵非常丰富的体系，其整体过程是一个金字塔结构</em></p>
<h3 id="流量分析模型举例"><a href="#流量分析模型举例" class="headerlink" title="流量分析模型举例"></a>流量分析模型举例</h3><h4 id="网站流量质量分析"><a href="#网站流量质量分析" class="headerlink" title="网站流量质量分析"></a>网站流量质量分析</h4><p><em>流量并不是越多越好，应该更加看重流量的质量，换句话来说就是流量可以为我们带来多少收入</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JauesA.png" alt="JauesA.png" border="0">

<h4 id="网站流量多维度细分"><a href="#网站流量多维度细分" class="headerlink" title="网站流量多维度细分"></a>网站流量多维度细分</h4><p><em>细分是指通过不同维度对指标进行分割，查看同一个指标在不同维度下的表现，进而找出有问题的那部分指标，对这部分指标进行优化</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JauuZt.png" alt="JauuZt.png" border="0">

<h4 id="网站内容及导航分析"><a href="#网站内容及导航分析" class="headerlink" title="网站内容及导航分析"></a>网站内容及导航分析</h4><p><em>对于所有网站来说，页面都可以被划分为三个类别: 导航页，功能页， 内容页</em></p>
<p><em>比如从内容导航分析中，以下两类行为就是网站运营者不希望看到的行为：</em></p>
<img src="https://s1.ax1x.com/2020/04/23/Jauli8.png" alt="Jauli8.png" border="0">

<h4 id="网站转化及漏斗分析"><a href="#网站转化及漏斗分析" class="headerlink" title="网站转化及漏斗分析"></a>网站转化及漏斗分析</h4><p><em>所谓<strong>转化</strong>，即网站业务流程中的一个封闭渠道，引导用户按照流程最终实现业务目标（比如商品成交）；而<strong>漏斗模型</strong>则是指进入渠道的用户在各环节递进过程中逐渐流失的形象描述；</em></p>
<p><a href="https://imgchr.com/i/JaMg56" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMg56.png" alt="JaMg56.png" border="0"></a><br><a href="https://imgchr.com/i/JaMcUx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMcUx.png" alt="JaMcUx.png" border="0"></a></p>
<h3 id="流量分析常见指标"><a href="#流量分析常见指标" class="headerlink" title="流量分析常见指标"></a>流量分析常见指标</h3><h4 id="基础分析（PV-IP-UV）"><a href="#基础分析（PV-IP-UV）" class="headerlink" title="基础分析（PV,IP,UV）"></a>基础分析（PV,IP,UV）</h4><p><em>page view: 同一个人一天浏览一个网站的多少网页，重复的只算一条</em></p>
<p><em>unique visitor: 同一天，只记录第一次进入网站的具有独立IP的访问者，重复访问不计</em></p>
<p><em>PR：pageRank，网页的级别技术。用于标识一个网站的流行程度。来源google</em></p>
<p><strong>Ø</strong> <strong><em>\</em>趋势分析**</strong>：根据选定的时段，提供网站流量数据，通过流量趋势变化形态，为您分析网站访客的访问规律、网站发展状况提供参考。</p>
<p><strong>Ø</strong> <strong><em>\</em>对比分析**</strong>：根据选定的两个对比时段，提供网站流量在时间上的纵向对比报表，帮您发现网站发展状况、发展规律、流量变化率等。</p>
<p><strong>Ø</strong> <strong><em>\</em>当前在线**</strong>：提供当前时刻站点上的访客量，以及最近15分钟流量、来源、受访、访客变化情况等，方便用户及时了解当前网站流量状况。</p>
<p><strong>Ø</strong> <strong><em>\</em>访问明细**</strong>：提供最近7日的访客访问记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照来源、搜索词等条件进行筛选。 通过访问明细，用户可以详细了解网站流量的累计过程，从而为用户快速找出流量变动原因提供最原始、最准确的依据</p>
<h4 id="来源分析"><a href="#来源分析" class="headerlink" title="来源分析"></a>来源分析</h4><p><strong><em>\</em>来源分类**</strong></p>
<p><strong><em>\</em>搜索引擎**</strong></p>
<p><strong><em>\</em>搜索词**</strong></p>
<p><strong><em>\</em>最近7日的访客搜索记录**</strong></p>
<p><strong><em>\</em>来路域名**</strong></p>
<p><strong><em>\</em>来路页面**</strong></p>
<p><strong><em>\</em>来源升降榜**</strong></p>
<h4 id="受访分析"><a href="#受访分析" class="headerlink" title="受访分析"></a>受访分析</h4><p><strong><em>\</em>受访域名**</strong></p>
<p><strong><em>\</em>受访页面**</strong></p>
<p><strong><em>\</em>受访升降榜**</strong></p>
<p><strong><em>\</em>热点图**</strong></p>
<p><strong><em>\</em>用户视点**</strong></p>
<p><strong><em>\</em>访问轨迹**</strong></p>
<h4 id="访客分析"><a href="#访客分析" class="headerlink" title="访客分析"></a>访客分析</h4><p><strong><em>\</em>地区运营商**</strong></p>
<p><strong><em>\</em>终端详情**</strong></p>
<p><strong><em>\</em>新老访客**</strong></p>
<p><strong><em>\</em>忠诚度**</strong></p>
<p><strong><em>\</em>活跃度**</strong></p>
<h4 id="转化路径分析"><a href="#转化路径分析" class="headerlink" title="转化路径分析"></a>转化路径分析</h4><h5 id="转化定义"><a href="#转化定义" class="headerlink" title="转化定义"></a>转化定义</h5><p><em>访客在您的网站完成了某项您期望的活动，记为一次转化，如注册或下载</em></p>
<h5 id="路径分析"><a href="#路径分析" class="headerlink" title="路径分析"></a>路径分析</h5><p><em>根据设置的特定路线，监测某一流程的完成转化情况，算出每步的转换率和流失率数据，如注册流程，购买流程等</em></p>
<h2 id="整体技术流程及架构"><a href="#整体技术流程及架构" class="headerlink" title="整体技术流程及架构"></a>整体技术流程及架构</h2><h3 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h3><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><p><em>将各服务器上生成的点击流日志通过实时或批量的方式汇聚到HDFS文件系统中</em></p>
<p><em>当然，一个综合分析系统，数据源可能不仅包含**</em>*点击流数据*<strong><em>，还有数据库中的</em></strong>*业务数据*<strong><em>（如用户信息、商品信息、订单信息等）及对分析有益的</em></strong>*外部数据****</p>
<h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p><em>通过mapreduce程序对采集到的点击流数据进行预处理，比如清洗，格式整理，滤除脏数据等</em></p>
<h4 id="数据入库"><a href="#数据入库" class="headerlink" title="数据入库"></a>数据入库</h4><p><em>将预处理之后的数据导入到HIVE仓库中相应的库和表中</em></p>
<h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><p><em>项目的核心内容，即根据需求开发ETL分析语句，得出各种统计结果</em></p>
<h4 id="数据展现"><a href="#数据展现" class="headerlink" title="数据展现"></a>数据展现</h4><p><em>将分析所得数据进行可视化</em></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><h3 id="生成log表"><a href="#生成log表" class="headerlink" title="生成log表"></a>生成log表</h3><h3 id="生成pageview表"><a href="#生成pageview表" class="headerlink" title="生成pageview表"></a>生成pageview表</h3><h4 id="WeblogPreProcess类"><a href="#WeblogPreProcess类" class="headerlink" title="WeblogPreProcess类"></a>WeblogPreProcess类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mr.pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogBean;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理原始日志，过滤出真实pv请求</span></span><br><span class="line"><span class="comment"> * 转换时间格式</span></span><br><span class="line"><span class="comment"> * 对缺失字段填充默认值</span></span><br><span class="line"><span class="comment"> * 对记录标记valid和invalid</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcessMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="comment">//用来存储网站url分类数据</span></span><br><span class="line">		Set&lt;String&gt; pages = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		Text k = <span class="keyword">new</span> Text();</span><br><span class="line">		NullWritable v = NullWritable.get();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 从外部加载网站url分类数据</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			pages.add(<span class="string">"/about"</span>);</span><br><span class="line">			pages.add(<span class="string">"/black-ip-list/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/cassandra-clustor/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/finance-rhive-repurchase/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-family-roadmap/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-hive-intro/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-zookeeper-intro/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-mahout-roadmap/"</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">			String line = value.toString();</span><br><span class="line">			WebLogBean webLogBean = WebLogParser.parser(line);</span><br><span class="line">			<span class="comment">// 过滤js/图片/css等静态资源</span></span><br><span class="line">			WebLogParser.filtStaticResource(webLogBean, pages);</span><br><span class="line">			<span class="comment">/* if (!webLogBean.isValid()) return; */</span></span><br><span class="line">			k.set(webLogBean.toString());</span><br><span class="line">			context.write(k, v);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">		job.setJarByClass(WeblogPreProcess<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		job.setMapperClass(WeblogPreProcessMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//		 FileInputFormat.setInputPaths(job, new Path(args[0]));</span></span><br><span class="line"><span class="comment">//		 FileOutputFormat.setOutputPath(job, new Path(args[1]));</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/input"</span>));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/output"</span>));</span><br><span class="line"></span><br><span class="line">		job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="WebLogParser类"><a href="#WebLogParser类" class="headerlink" title="WebLogParser类"></a>WebLogParser类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"dd/MMM/yyyy:HH:mm:ss"</span>, Locale.US);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.US);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebLogBean <span class="title">parser</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">		WebLogBean webLogBean = <span class="keyword">new</span> WebLogBean();</span><br><span class="line">		String[] arr = line.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">if</span> (arr.length &gt; <span class="number">11</span>) &#123;</span><br><span class="line">			webLogBean.setRemote_addr(arr[<span class="number">0</span>]);</span><br><span class="line">			webLogBean.setRemote_user(arr[<span class="number">1</span>]);</span><br><span class="line">			String time_local = formatDate(arr[<span class="number">3</span>].substring(<span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>==time_local) time_local=<span class="string">"-invalid_time-"</span>;</span><br><span class="line">			webLogBean.setTime_local(time_local);</span><br><span class="line">			webLogBean.setRequest(arr[<span class="number">6</span>]);</span><br><span class="line">			webLogBean.setStatus(arr[<span class="number">8</span>]);</span><br><span class="line">			webLogBean.setBody_bytes_sent(arr[<span class="number">9</span>]);</span><br><span class="line">			webLogBean.setHttp_referer(arr[<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果useragent元素较多，拼接useragent</span></span><br><span class="line">			<span class="keyword">if</span> (arr.length &gt; <span class="number">12</span>) &#123;</span><br><span class="line">				StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">11</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">					sb.append(arr[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				webLogBean.setHttp_user_agent(sb.toString());</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				webLogBean.setHttp_user_agent(arr[<span class="number">11</span>]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Integer.parseInt(webLogBean.getStatus()) &gt;= <span class="number">400</span>) &#123;<span class="comment">// 大于400，HTTP错误</span></span><br><span class="line">				webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(<span class="string">"-invalid_time-"</span>.equals(webLogBean.getTime_local()))&#123;</span><br><span class="line">				webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> webLogBean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filtStaticResource</span><span class="params">(WebLogBean bean, Set&lt;String&gt; pages)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pages.contains(bean.getRequest())) &#123;</span><br><span class="line">			bean.setValid(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> df2.format(df1.parse(time_local));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="WebLogBean类"><a href="#WebLogBean类" class="headerlink" title="WebLogBean类"></a>WebLogBean类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对接外部数据的层，表结构定义最好跟外部数据源保持一致</span></span><br><span class="line"><span class="comment"> * 术语： 贴源表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;<span class="comment">// 判断数据是否合法</span></span><br><span class="line">	<span class="keyword">private</span> String remote_addr;<span class="comment">// 记录客户端的ip地址</span></span><br><span class="line">	<span class="keyword">private</span> String remote_user;<span class="comment">// 记录客户端用户名称,忽略属性"-"</span></span><br><span class="line">	<span class="keyword">private</span> String time_local;<span class="comment">// 记录访问时间与时区</span></span><br><span class="line">	<span class="keyword">private</span> String request;<span class="comment">// 记录请求的url与http协议</span></span><br><span class="line">	<span class="keyword">private</span> String status;<span class="comment">// 记录请求状态；成功是200</span></span><br><span class="line">	<span class="keyword">private</span> String body_bytes_sent;<span class="comment">// 记录发送给客户端文件主体内容大小</span></span><br><span class="line">	<span class="keyword">private</span> String http_referer;<span class="comment">// 用来记录从那个页面链接访问过来的</span></span><br><span class="line">	<span class="keyword">private</span> String http_user_agent;<span class="comment">// 记录客户浏览器的相关信息</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">boolean</span> valid,String remote_addr, String remote_user, String time_local, String request, String status, String body_bytes_sent, String http_referer, String http_user_agent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = valid;</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line">		<span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line">		<span class="keyword">this</span>.time_local = time_local;</span><br><span class="line">		<span class="keyword">this</span>.request = request;</span><br><span class="line">		<span class="keyword">this</span>.status = status;</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line">		<span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRemote_addr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_addr</span><span class="params">(String remote_addr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRemote_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remote_user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_user</span><span class="params">(String remote_user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTime_local</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.time_local;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime_local</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.time_local = time_local;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> request;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.request = request;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.status = status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBody_bytes_sent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> body_bytes_sent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody_bytes_sent</span><span class="params">(String body_bytes_sent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getHttp_referer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> http_referer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_referer</span><span class="params">(String http_referer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getHttp_user_agent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_user_agent</span><span class="params">(String http_user_agent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> valid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValid</span><span class="params">(<span class="keyword">boolean</span> valid)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = valid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.append(<span class="keyword">this</span>.valid);</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_addr());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_user());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getTime_local());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRequest());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getStatus());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getBody_bytes_sent());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_referer());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_user_agent());</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = in.readBoolean();</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.remote_user = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.time_local = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.request = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.status = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.http_referer = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = in.readUTF();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		out.writeBoolean(<span class="keyword">this</span>.valid);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==remote_addr?<span class="string">""</span>:remote_addr);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==remote_user?<span class="string">""</span>:remote_user);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==time_local?<span class="string">""</span>:time_local);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==request?<span class="string">""</span>:request);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==status?<span class="string">""</span>:status);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==body_bytes_sent?<span class="string">""</span>:body_bytes_sent);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==http_referer?<span class="string">""</span>:http_referer);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==http_user_agent?<span class="string">""</span>:http_user_agent);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生成visit表"><a href="#生成visit表" class="headerlink" title="生成visit表"></a>生成visit表</h3><hr>
<blockquote>
<p>世上所有的惊喜和好运，等于你的人品乘以你的努力。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据行业项目部署实战</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-hdfs</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hdfs.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="HDFS实验"><a href="#HDFS实验" class="headerlink" title="HDFS实验"></a>HDFS实验</h1><h2 id="通过Java-API操作HDFS"><a href="#通过Java-API操作HDFS" class="headerlink" title="通过Java API操作HDFS"></a>通过Java API操作HDFS</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="导入hdfs的jar包"><a href="#导入hdfs的jar包" class="headerlink" title="导入hdfs的jar包"></a>导入hdfs的jar包</h4><p>1.<em>将/usr/…/share/common下；/usr/…/share/common/lib下；/usr/…/share/hdfs/下的jar包导入到hadoop项目下的lib</em></p>
<p>2.<em>eclipse的项目单击右键build path-&gt;configure..-&gt;libraries-&gt;external jars</em></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">putFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	Path src = <span class="keyword">new</span> Path(<span class="string">"/home/ttyong/Public/java/wordCount.txt"</span>);</span><br><span class="line">	Path dst = <span class="keyword">new</span> Path(<span class="string">"/mydir/"</span>);</span><br><span class="line">	fs.copyFromLocalFile(src, dst);</span><br><span class="line">	fs.close();</span><br><span class="line">	System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流拷贝上传</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">putFile_HDFS_byLiuKaoBei</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"/home/ttyong/Public/java/salaryTotal.txt"</span>);</span><br><span class="line">	OutputStream os = fs.create(<span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>));</span><br><span class="line">	IOUtils.copyBytes(is, os, <span class="number">1024</span>);</span><br><span class="line">	is.close();</span><br><span class="line">	os.close();</span><br><span class="line">	fs.close();</span><br><span class="line">	System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		Path src = <span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>);</span><br><span class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">"/home/ttyong/Public/java/test4.txt"</span>);</span><br><span class="line">		System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"root"</span>);</span><br><span class="line">		fs.copyToLocalFile(src, dst); <span class="comment">//linux</span></span><br><span class="line">		fs.close();</span><br><span class="line">		System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流拷贝下载</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getFile_HDFS_ByLiukaobei</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		InputStream is = fs.open(<span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>));</span><br><span class="line">		OutputStream os = <span class="keyword">new</span> 		       FileOutputStream(<span class="string">"/home/ttyong/Public/java/test5.txt"</span>);</span><br><span class="line">		IOUtils.copyBytes(is, os, <span class="number">1024</span>);</span><br><span class="line">		is.close();</span><br><span class="line">		os.close();</span><br><span class="line">		fs.close();</span><br><span class="line">		System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"root"</span>);</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		Path path = <span class="keyword">new</span> Path(<span class="string">"/mydir/test2.txt"</span>);</span><br><span class="line">		FSDataOutputStream os = fs.create(path);</span><br><span class="line">		os.writeBytes(<span class="string">"hello HDFS"</span>);</span><br><span class="line">		os.close();</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	Path path = <span class="keyword">new</span> Path(<span class="string">"/mydir/test2.txt"</span>);</span><br><span class="line">	fs.delete(path);</span><br><span class="line">	fs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="shell命令访问HDFS"><a href="#shell命令访问HDFS" class="headerlink" title="shell命令访问HDFS"></a>shell命令访问HDFS</h2><h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>hdfs</tag>
        <tag>实验课</tag>
      </tags>
  </entry>
  <entry>
    <title>java相关异常</title>
    <url>/java%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="在eclipse里创建java项目，里面没有src"><a href="#在eclipse里创建java项目，里面没有src" class="headerlink" title="在eclipse里创建java项目，里面没有src"></a>在eclipse里创建java项目，里面没有src</h2><p><em>创建项目时不要选择<strong>use project folder as root for sources and class files</strong>.</em></p>
<p>##</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-mapreduce</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-mapreduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="MapReduce实验"><a href="#MapReduce实验" class="headerlink" title="MapReduce实验"></a>MapReduce实验</h2><h3 id="wordcount"><a href="#wordcount" class="headerlink" title="wordcount"></a>wordcount</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h5><p><em>1.将mapreduce的jar包复制到eclipse的hadoop项目的lib里</em></p>
<p><em>/usr/hadoop/…/share/mapreduce/</em></p>
<p><em>/home/…/hadoop/lib/</em></p>
<p><em>2.打开eclipse，在项目上单击右键，build path -&gt; configure ..-&gt;libraries-&gt;add external jars</em></p>
<h4 id="编写wordcount的map-和reduce-函数"><a href="#编写wordcount的map-和reduce-函数" class="headerlink" title="编写wordcount的map()和reduce()函数"></a>编写wordcount的map()和reduce()函数</h4><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		String data = value.toString();</span><br><span class="line">		String[] words = data.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">for</span>(String w: words) &#123;</span><br><span class="line">			context.write(<span class="keyword">new</span> Text(w), <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k3, Iterable&lt;IntWritable&gt; v3,</span></span></span><br><span class="line"><span class="function"><span class="params">			Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(IntWritable v : v3) &#123;</span><br><span class="line">			total += v.get();</span><br><span class="line">		&#125;</span><br><span class="line">		context.write(k3, <span class="keyword">new</span> IntWritable(total));		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// </span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(wordCountMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setMapperClass(wordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setReducerClass(wordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="各部门员工薪水总和"><a href="#各部门员工薪水总和" class="headerlink" title="各部门员工薪水总和"></a>各部门员工薪水总和</h3><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p><em>序列化是一种将内存中Java对象转化为其它可存储文件或可跨越计算机传输数据流的一种技术</em></p>
<h4 id="Employee"><a href="#Employee" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">//创建员工对象</span></span><br><span class="line">	Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">	IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		k2.set(e.getDeptno());	</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">		context.write(k2,e); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">			total += v.getSal();</span><br><span class="line">		&#125;</span><br><span class="line">		value.set(total);</span><br><span class="line">		<span class="comment">//输出：          部门号   总额</span></span><br><span class="line">		context.write(k3, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个job</span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">		job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">		job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		<span class="comment">//执行任务</span></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p><em>Mapper 划分数据的过程称作为分区（ Partition），负责实现划分的数据的类称为 Partitioner。</em></p>
<p><em>MapReduce 默认的 Partitioner 是 HashPartitioner</em></p>
<h4 id="partitioner"><a href="#partitioner" class="headerlink" title="partitioner"></a>partitioner</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 建立自己的分区规则：根据员工的部门号进行分区</span></span><br><span class="line"><span class="comment">* 根据 Map 的输出 k2 v2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalPatitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* numPartition 参数：建立多少个分区</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(IntWritable k2, Employee v2, <span class="keyword">int</span> numPartition)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如何建立分区</span></span><br><span class="line"><span class="keyword">if</span>(v2.getDeptno() == <span class="number">10</span>)&#123;</span><br><span class="line"><span class="comment">//放入 1 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v2.getDeptno() == <span class="number">20</span>)&#123;</span><br><span class="line"><span class="comment">//放入 2 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//放入 0 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>%numPartition;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Employee-1"><a href="#Employee-1" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">//创建员工对象</span></span><br><span class="line">	Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">	IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		k2.set(e.getDeptno());	</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">		context.write(k2,e); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Reducer-1"><a href="#Reducer-1" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">			total += v.getSal();</span><br><span class="line">		&#125;</span><br><span class="line">		value.set(total);</span><br><span class="line">		<span class="comment">//输出：          部门号   总额</span></span><br><span class="line">		context.write(k3, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个job</span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">		job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 指定任务的分区规则;指定建立几个分区</span></span><br><span class="line">		job.setPartitionerClass(salaryTotalPatitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">		job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		<span class="comment">//执行任务</span></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><a href="https://imgchr.com/i/YntMjJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntMjJ.md.png" alt="YntMjJ.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YntKc4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntKc4.md.png" alt="YntKc4.md.png" border="0"></a></p>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>又要排序又要序列化直接继承WritableComparable类; 这个接口继承自writable和comparable接口</em></p>
<h4 id="Main-2"><a href="#Main-2" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建一个 job</span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(EmployeeSortMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的 mapper 和输出的类型 k2 v2</span></span><br><span class="line">job.setMapperClass(EmployeeSortMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的输入和输出的路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="comment">//7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Employee</span>,</span></span><br><span class="line"><span class="class"><span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line">		<span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line">		<span class="comment">//创建员工对象</span></span><br><span class="line">		Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">		<span class="comment">//设置员工的属性</span></span><br><span class="line">		<span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line">		<span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line">		<span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line">		<span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">			<span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line">		<span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line">		<span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">			<span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		context.write(e, NullWritable.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Employee-2"><a href="#Employee-2" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="comment">//1．若要把 Employee 作为 key2，则需要实现序列化</span></span><br><span class="line"><span class="comment">//2．员工对象为 Employee 类，可被排序</span></span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Employee [empno="</span> + empno + <span class="string">", ename="</span> + ename + <span class="string">", sal="</span> + sal + <span class="string">",</span></span><br><span class="line"><span class="string">			deptno="</span> + deptno + <span class="string">"]"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多个列的排序： select * from emp order by deptno,sal;</span></span><br><span class="line">        <span class="comment">//首先按照 deptno 排序</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.deptno &gt; o.getDeptno())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.deptno &lt; o.getDeptno())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果 deptno 相等，按照 sal 排序</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.sal &gt;= o.getSal())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>人穷没入群，言轻莫劝人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>实验课</tag>
        <tag>mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析-牛顿法</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h2 id="不动点迭代"><a href="#不动点迭代" class="headerlink" title="不动点迭代"></a>不动点迭代</h2><h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><img src="https://s1.ax1x.com/2020/04/26/J6OiVO.png" alt="J6OiVO.png" border="0">

<h3 id="简化牛顿法"><a href="#简化牛顿法" class="headerlink" title="简化牛顿法"></a>简化牛顿法</h3><p><a href="https://imgchr.com/i/JQVzCD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVzCD.md.png" alt="JQVzCD.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVXE6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVXE6.md.png" alt="JQVXE6.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVv4O" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVv4O.md.png" alt="JQVv4O.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVjUK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVjUK.md.png" alt="JQVjUK.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVLHx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVLHx.md.png" alt="JQVLHx.md.png" border="0"></a></p>
<h3 id="牛顿下山法"><a href="#牛顿下山法" class="headerlink" title="牛顿下山法"></a>牛顿下山法</h3><h3 id="重根情形"><a href="#重根情形" class="headerlink" title="重根情形"></a>重根情形</h3><h2 id="弦截法"><a href="#弦截法" class="headerlink" title="弦截法"></a>弦截法</h2><h3 id="单点弦截法"><a href="#单点弦截法" class="headerlink" title="单点弦截法"></a>单点弦截法</h3><h3 id="两点弦截法"><a href="#两点弦截法" class="headerlink" title="两点弦截法"></a>两点弦截法</h3><img src="https://s1.ax1x.com/2020/04/26/J6LDgI.png" alt="J6LDgI.png" border="0">

<p><a href="https://blog.csdn.net/qq_40991687/article/details/102004533" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/qq_40991687/article/details/102004533</a></p>
<hr>
<blockquote>
<p>能够摄取必要营养的人要比吃得很多的人更健康，同样地，真正的学者往往不是读了很多书的人，而是读了有用的书的人。</p>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
      <tags>
        <tag>牛顿法</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop理论课-第五章Mapreduce</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%BA%94%E7%AB%A0Mapreduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><h3 id="MapReduce是什么？"><a href="#MapReduce是什么？" class="headerlink" title="MapReduce是什么？"></a>MapReduce是什么？</h3><p><em>Mapreduce是一种简化并行计算的编程模型，用于进行大数据量的计算</em></p>
<p><a href="https://imgchr.com/i/GjRro8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRro8.md.png" alt="GjRro8.md.png" border="0"></a></p>
<h3 id="MapReduce设计思想"><a href="#MapReduce设计思想" class="headerlink" title="MapReduce设计思想"></a>MapReduce设计思想</h3><p><a href="https://imgchr.com/i/GjRDdf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRDdf.md.png" alt="GjRDdf.md.png" border="0"></a></p>
<h3 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h3><h4 id="易于编程"><a href="#易于编程" class="headerlink" title="易于编程"></a>易于编程</h4><h4 id="良好的扩展性"><a href="#良好的扩展性" class="headerlink" title="良好的扩展性"></a>良好的扩展性</h4><h4 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h4><h4 id="擅长对PB级以上海量数据进行离线处理"><a href="#擅长对PB级以上海量数据进行离线处理" class="headerlink" title="擅长对PB级以上海量数据进行离线处理"></a>擅长对PB级以上海量数据进行离线处理</h4><h3 id="MapReduce不擅长的场景"><a href="#MapReduce不擅长的场景" class="headerlink" title="MapReduce不擅长的场景"></a>MapReduce不擅长的场景</h3><h4 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h4><p><em>MapReduce无法像MySQL一样，在毫秒或秒级内返回结果</em></p>
<h4 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h4><p><em>流式计算的输入数据是动态的，而MapReduce的输入数据集是静态的，动态变化</em></p>
<h4 id="DAG-有向图-计算"><a href="#DAG-有向图-计算" class="headerlink" title="DAG(有向图)计算"></a>DAG(有向图)计算</h4><h2 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h2><h3 id="初识MapReduce模型"><a href="#初识MapReduce模型" class="headerlink" title="初识MapReduce模型"></a>初识MapReduce模型</h3><p><a href="https://imgchr.com/i/GjhcWD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhcWD.md.png" alt="GjhcWD.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjhLlQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhLlQ.md.png" alt="GjhLlQ.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gj4f9U" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj4f9U.md.png" alt="Gj4f9U.png" border="0"></a></p>
<p><em>MR原语:  相同的key为一组，调用一次reduce方法，迭代计算这一组数据</em></p>
<h3 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h3><p><a href="https://imgchr.com/i/Gj5Vgg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5Vgg.md.png" alt="Gj5Vgg.png" border="0"></a></p>
<h3 id="MapReduce模型要点"><a href="#MapReduce模型要点" class="headerlink" title="MapReduce模型要点"></a>MapReduce模型要点</h3><p><a href="https://imgchr.com/i/Gj5cKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5cKH.md.png" alt="Gj5cKH.png" border="0"></a></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p><a href="https://imgchr.com/i/Gj7nzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj7nzT.md.png" alt="Gj7nzT.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gj72Sf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj72Sf.md.png" alt="Gj72Sf.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjHgE9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjHgE9.md.png" alt="GjHgE9.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gjq4mD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjq4mD.md.png" alt="Gjq4mD.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjvqL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjvqL6.md.png" alt="GjvqL6.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjxUp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjxUp9.md.png" alt="GjxUp9.png" border="0"></a></p>
<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p><a href="https://imgchr.com/i/Gjzi9J" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjzi9J.png" alt="Gjzi9J.png" border="0"></a><br><a href="https://imgchr.com/i/GjzCh4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjzCh4.md.png" alt="GjzCh4.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GvSbyn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSbyn.md.png" alt="GvSbyn.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvSqLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSqLq.md.png" alt="GvSqLq.md.png" border="0"></a></p>
<h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p><em>序列化和反序列化</em></p>
<p><a href="https://imgchr.com/i/Gvpr7V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gvpr7V.md.png" alt="Gvpr7V.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvpykT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvpykT.md.png" alt="GvpykT.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gv9oKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9oKs.md.png" alt="Gv9oKs.md.png" border="0"></a><br><a href="https://imgchr.com/i/Gv9Trn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9Trn.md.png" alt="Gv9Trn.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GvCtMj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvCtMj.md.png" alt="GvCtMj.png" border="0"></a></p>
<h2 id="MapReduce进阶"><a href="#MapReduce进阶" class="headerlink" title="MapReduce进阶"></a>MapReduce进阶</h2><h3 id="mapreduce的输入格式"><a href="#mapreduce的输入格式" class="headerlink" title="mapreduce的输入格式"></a>mapreduce的输入格式</h3><h4 id="物理分片"><a href="#物理分片" class="headerlink" title="物理分片"></a>物理分片</h4><p><em>分割会严格按照设定大小128m或字数分割，可能会造成不符合逻辑的分割</em></p>
<h4 id="逻辑分片"><a href="#逻辑分片" class="headerlink" title="逻辑分片"></a>逻辑分片</h4><h5 id="inputFormat提供一下两个功能："><a href="#inputFormat提供一下两个功能：" class="headerlink" title="inputFormat提供一下两个功能："></a>inputFormat提供一下两个功能：</h5><ul>
<li>数据切分，获得SplitInput（逻辑切片） ，FileInputFormat.getSplits()获取到。</li>
<li>为Mapper提供输入数据</li>
</ul>
<p><em>有多少个SplitInput，就有多少个Mapper<br>TextInputFormat 是默认InputFormat</em></p>
<img src="https://s1.ax1x.com/2020/04/26/JgmCzn.png" alt="JgmCzn.png" border="0">

<p><em>getSplits 方法负责将一个大数据逻辑分成许多片，但每个分片只是一个逻辑上的定义，仅是提供了一个如何将数据分片的方法，并没有物理上的独立存储</em></p>
<p> <em>createRecordReader 方法返回一个 RecordReader 对象，实现了类似的迭代器功能，将某个InputSplit 解析成一个个 key/value 对</em></p>
<h5 id="定位记录边界"><a href="#定位记录边界" class="headerlink" title="定位记录边界"></a>定位记录边界</h5><p><em>为了能识别一条完整的记录，应该添加一些同步标示，如 TextInputFormat 的标示是换行符</em>  </p>
<h4 id="InputFormat-接口实现类"><a href="#InputFormat-接口实现类" class="headerlink" title="InputFormat 接口实现类"></a>InputFormat 接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnVXt.png" alt="JgnVXt.png" border="0">

<h3 id="mapreduce的输出格式"><a href="#mapreduce的输出格式" class="headerlink" title="mapreduce的输出格式"></a>mapreduce的输出格式</h3><h4 id="outputFormat接口"><a href="#outputFormat接口" class="headerlink" title="outputFormat接口"></a>outputFormat接口</h4><p><em>OutputFormat主要用于描述输出数据的格式，通过RecordWriter能够将用户提供的key/value对写入特定格式的文件中</em></p>
<p>（1）TextOutputFormt调用toString()方法把它们转换为字符串<br>（2）NullWritable来省略输出的key或value</p>
<h4 id="outputFormat接口实现类"><a href="#outputFormat接口实现类" class="headerlink" title="outputFormat接口实现类"></a>outputFormat接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnRAO.png" alt="JgnRAO.png" border="0">



<p><strong>排序</strong>：<em>排序是针对map输出里面的key，没会对value排序；map输出和reduce输入都有排序；作用是提高效率</em></p>
<h3 id="分区Partition"><a href="#分区Partition" class="headerlink" title="分区Partition"></a>分区Partition</h3><h4 id="Partition定义："><a href="#Partition定义：" class="headerlink" title="Partition定义："></a>Partition定义：</h4><p>Mapper任务划分数据的过程称作Partition。<br>负责实现数据的类称作Partitioner，默认的分区是Hash分区 (Hash Partition)</p>
<h4 id="Partition作用："><a href="#Partition作用：" class="headerlink" title="Partition作用："></a>Partition作用：</h4><p>将map阶段产生的所有&lt;key,value&gt;对分配给不同的Reducer 处理，可以将Reduce阶段的处理负载进行分摊</p>
<p><strong>Partition的数量决定Reducer的数量</strong></p>
<h4 id="Hash分区基本原理"><a href="#Hash分区基本原理" class="headerlink" title="Hash分区基本原理"></a>Hash分区基本原理</h4><p><em>计算某个值的hash值，如果结果相同，则放入同一个分区</em></p>
<p><em>Hash分区的作用：把数据打散进行存放，最终是为了避免热块</em></p>
<h4 id="合并Combiner"><a href="#合并Combiner" class="headerlink" title="合并Combiner"></a>合并Combiner</h4><p><em>减少Mapper输出到Reduce的数据量，缓解网络传输瓶颈，提高reducer的执行效率</em></p>
<p><em>需要注意的问题：一定要谨慎使用Combiner<br>有些情况不能使用Combiner —-&gt;  如：求平均值<br>保证引入Combiner以后，不能改变原来的逻辑</em></p>
<p><a href="https://imgchr.com/i/JfsWTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsWTI.md.png" alt="JfsWTI.md.png" border="0"></a><br><a href="https://imgchr.com/i/JfsR0A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsR0A.md.png" alt="JfsR0A.md.png" border="0"></a></p>
<hr>
<blockquote>
<p>如果今天后悔昨天，那么明天就会后悔今天。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>Mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>pythonn文件在命令行包导入问题</title>
    <url>/pythonn%E6%96%87%E4%BB%B6%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8C%85%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="命令行下执行python找不包的解决方法"><a href="#命令行下执行python找不包的解决方法" class="headerlink" title="命令行下执行python找不包的解决方法"></a>命令行下执行python找不包的解决方法</h2><p>1.为什么会出现这样的问题?</p>
<p>包是向下搜索机制.</p>
<p>2.为什么idle中执行没有报找不到包的问题?</p>
<p>python搜索机制,在idle中是以项目为根路径, 所以它的搜索机制是从项目根路径开始向下搜索.</p>
<p>3.为什么命令行执行时会报找不到包的错误?</p>
<p>这是因为命令行执行的时候,是以当前执行的.py文件所在目录级别的下一级开始搜索. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line"></span><br><span class="line">.......web(一级目录)</span><br><span class="line"></span><br><span class="line">       ......sett(二级目录)</span><br><span class="line"></span><br><span class="line">       .......views(二级目录)</span><br><span class="line"></span><br><span class="line">       ......service.py(二级目录)  (这个命令行执行文件.  命令行运行时,提示找不到views以及sett中的包.)</span><br><span class="line"></span><br><span class="line">             .......包搜索级别(三级目录)</span><br></pre></td></tr></table></figure>



<p><strong>法一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">#将根目录加入sys.path中,解决命令行找不到包的问题</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">curPath = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">rootPath = os.path.split(curPath)[<span class="number">0</span>]</span><br><span class="line">sys.path.append(rootPath)</span><br><span class="line"><span class="comment">#########################################################</span></span><br></pre></td></tr></table></figure>

<p><em>以上增加到哪个级别要,根据实际情况,灵活运用.  其实目的就是指定一个顶级目录.来克服向下搜索包的问题.</em></p>
<p><strong>法二</strong></p>
<p><em>在web平级别新建一个py文件. 然后将要执行的py文件导入进去即可.(并不需要作其它操作,看实际情况.)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> service</span><br></pre></td></tr></table></figure>



<p><strong>法三</strong></p>
<p><em>cmd命令行进行项目根目录，采用相对路径去执行该py文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd</span><br><span class="line">cd d:\test_project</span><br><span class="line">./main.py  <span class="comment">#相对执行</span></span><br></pre></td></tr></table></figure>



<p><a href="https://www.cnblogs.com/yhleng/p/10330994.html" target="_blank" rel="external nofollow noopener noreferrer"><strong>原文</strong></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h2><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">数字或字母</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">任意单个字符(除了换行符)</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">零个或多个字符</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">至少一个字符</td>
</tr>
<tr>
<td align="center">？</td>
<td align="center">零个或一个字符</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">前面的表达式匹配n次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配一个空格</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">转义字符</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">（匹配一行字符串的开头）^\d以数字开头</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">（匹配一行字符串的结尾）\d$以数字结尾</td>
</tr>
<tr>
<td align="center">[0-9a-zA-z\_]</td>
<td align="center">一个数字，字符或下划线</td>
</tr>
<tr>
<td align="center">[0-9a-zA-z\_]+</td>
<td align="center">如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等</td>
</tr>
<tr>
<td align="center">\A</td>
<td align="center">匹配字符串的开头</td>
</tr>
<tr>
<td align="center">\Z</td>
<td align="center">匹配字符串的结尾</td>
</tr>
<tr>
<td align="center">.*</td>
<td align="center">贪婪匹配</td>
</tr>
<tr>
<td align="center">.*？</td>
<td align="center">非贪婪匹配(在结尾时可能不会匹配)</td>
</tr>
</tbody></table>
<p><em>下划线是特殊字符需要转义</em></p>
<p><em>字母大写代表与小写意思相反</em></p>
<p><em>使用r’…’可以规避特殊字符</em></p>
<h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><em>会从字符串的<strong>开头</strong>进行匹配，成功返回<strong>Match</strong>对象；失败返回<strong>None</strong>.</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.match(正则表达式，字符串，[修饰符])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">'hello, 122323 world _ this is a regex demo'</span></span><br><span class="line">result = re.match(<span class="string">r'^he.*(/d+).*demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="comment"># 因为.*为贪婪匹配，会尽可能多的匹配</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">'http://weibo.com/comment/KERGCN'</span></span><br><span class="line">result1 = re.match(<span class="string">r'http.*?comment(.*?)'</span>, content) <span class="comment"># 在结尾尽可能少的匹配</span></span><br><span class="line">result2 = re.match(<span class="string">r'http.*?/(.*?)/KERGCN'</span>, content)</span><br><span class="line">print(result1.group(<span class="number">1</span>))</span><br><span class="line">print(result2.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comment</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./no_info.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        db_clawer.saveToNoInfo(int(re.match(<span class="string">'\d+'</span>, i).group()))</span><br></pre></td></tr></table></figure>

<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table>
<thead>
<tr>
<th align="center">修饰符名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">re.I</td>
<td align="center">匹配对大小写不敏感</td>
</tr>
<tr>
<td align="center">re.L</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.M</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center">使.匹配任意字符</td>
</tr>
<tr>
<td align="center">re.U</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><em>从字符串中寻找是否有匹配的片段；然后返回第一个匹配的结果</em></p>
<p><em>要注意绝大部分的html文本都会包含大量的换行符，所以尽量加上re.S修饰符，避免出现匹配不到的问题</em></p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h3><p><em>用于把一个反复用的正则表达式生成对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = re.compile(regex)</span><br><span class="line">patter.search(<span class="string">'....'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><h4 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(patter, string, flag=<span class="number">0</span>) <span class="comment"># 返回列表</span></span><br></pre></td></tr></table></figure>



<h4 id="re-split"><a href="#re-split" class="headerlink" title="re.split()"></a>re.split()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h4 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer()"></a>re.finditer()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.finditer(pattern, string, flag=<span class="number">0</span>) <span class="comment"># 生成正则表达式匹配结果的生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>



<h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><strong>使用（）</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">result.group(<span class="number">0</span>) <span class="comment"># 获取的是原字符串</span></span><br><span class="line">result.group(NO.) <span class="comment"># 获取对应第几个子串</span></span><br><span class="line">result.groups() <span class="comment"># 返回生成的子串元组</span></span><br></pre></td></tr></table></figure>



<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p><em>正则表达式默认都是尽可能多的匹配</em></p>
<h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p><em>在后面加一个?</em></p>
<p>/d+?</p>
<p>.*?</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>pip命令</title>
    <url>/pip%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --timeout 8000 package</span><br></pre></td></tr></table></figure>

<h3 id="使用镜像安装"><a href="#使用镜像安装" class="headerlink" title="使用镜像安装"></a>使用镜像安装</h3><h4 id="使用国内镜像源"><a href="#使用国内镜像源" class="headerlink" title="使用国内镜像源"></a>使用国内镜像源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install 包名 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; --trusted-host pypi.douban.com</span><br><span class="line">这个是豆瓣源</span><br><span class="line">--trusted-host pypi.douban.com 这是为了获得ssl证书的认证，要不然会报错</span><br></pre></td></tr></table></figure>

<p><strong>国内镜像源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">清华：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">阿里云：http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">华中理工大学：http:&#x2F;&#x2F;pypi.hustunique.com&#x2F;</span><br><span class="line"></span><br><span class="line">山东理工大学：http:&#x2F;&#x2F;pypi.sdutlinux.org&#x2F; </span><br><span class="line"></span><br><span class="line">豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="直接修改文件"><a href="#直接修改文件" class="headerlink" title="直接修改文件"></a>直接修改文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p><em>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini。内容同上。本机win10操作系统，目录：C:\Users\DELL\AppData\Roaming\pip\pip.ini</em></p>
<h3 id="pip更新"><a href="#pip更新" class="headerlink" title="pip更新"></a>pip更新</h3><h4 id="python-m-pip-install-–upgrade-pip"><a href="#python-m-pip-install-–upgrade-pip" class="headerlink" title="python -m pip install –upgrade pip"></a>python -m pip install –upgrade pip</h4><h3 id="python版本替换批量迁移模块"><a href="#python版本替换批量迁移模块" class="headerlink" title="python版本替换批量迁移模块"></a>python版本替换批量迁移模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 旧版本Scripts路径下执行</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"># 新版本Scripts路径下执行 </span><br><span class="line">pip install -r requirements.txt -i 镜像源</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- requirements.txt格式</span><br><span class="line">alembic&#x3D;&#x3D;0.8.6</span><br><span class="line">bleach&#x3D;&#x3D;1.4.3</span><br><span class="line">click&#x3D;&#x3D;6.6</span><br><span class="line">dominate&#x3D;&#x3D;2.2.1</span><br><span class="line">Flask&#x3D;&#x3D;0.11.1</span><br></pre></td></tr></table></figure>



<h3 id="包更新"><a href="#包更新" class="headerlink" title="包更新"></a>包更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -U 包名</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python乱码问题</title>
    <url>/python%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<p>一、在文件头部添加如下注释码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coding=&lt;encoding name&gt; 例如，可添加<span class="comment"># coding=utf-8</span></span><br></pre></td></tr></table></figure>



<p>二、在文件头部添加如下两行注释码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: &lt;encoding name&gt; -*- 例如，可添加# -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>



<p>三、在文件头部添加如下两行注释码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim: set fileencoding=&lt;encoding name&gt; : </span></span><br><span class="line">例如，可添加</span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br></pre></td></tr></table></figure>



<p>四、我们可以通过先把中文解码为unicode，然后在转化为gbk来解决这个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'吃葡萄不吐葡萄皮儿'</span></span><br><span class="line">print(a..decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>))</span><br></pre></td></tr></table></figure>



<p>五、通过改变cmd命令行窗口的输出格式来解决这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chcp <span class="number">65001</span> 就是换成UTF<span class="number">-8</span>代码页</span><br><span class="line">chcp <span class="number">936</span> 可以换回默认的GBK</span><br></pre></td></tr></table></figure>

<p><em>但是这样就降低了脚本的兼容性，在其他环境运行的时候可能还会出现这样的错误</em></p>
<p>————————————————<br>版权声明：本文为CSDN博主「TTOP」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u013634961/article/details/38826189" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u013634961/article/details/38826189</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python解析库-Xpath</title>
    <url>/python%E8%A7%A3%E6%9E%90%E5%BA%93-Xpath.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f542ab6385dc4a688c65a4a2978a7b295318ddfbad2d1c5cdc690f01c0c507a5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-pymongo</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-pymongo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h2><p><strong>[官方文档](<a href="http://api.mongodb.com/python/current/api/pymongo/" target="_blank" rel="external nofollow noopener noreferrer">http://api.mongodb.com/python/current/api/pymongo/</a><br>collection.html)</strong>  </p>
<p><em>MongoDB是 由 C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对 象 ，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</em></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><em>安装好pymongo并启动服务</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开mongodb的安装位置，如：E:\web-software\mongo\bin</span><br><span class="line"></span><br><span class="line">2.打开终端黑窗口，输入：mongod --dbpath E:\web-software\mongo\bin   注意：不要关闭这个窗口</span><br><span class="line"></span><br><span class="line">3.打开一个新的终端窗口，输入：mongo</span><br><span class="line"></span><br><span class="line">此时，mongodb已经成功开启了，可以输入类似于show dbs之类的命令了。</span><br></pre></td></tr></table></figure>



<h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>) </span><br><span class="line">等同于</span><br><span class="line">client = MogoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client.数据库名</span><br><span class="line">等同于</span><br><span class="line">db = client[<span class="string">'数据库名'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection = db.集合名</span><br><span class="line">等同于</span><br><span class="line">collection = db[<span class="string">'集合名'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入单条</span></span><br><span class="line">result = collection.insert(&#123;<span class="string">''</span>:<span class="string">""</span>&#125;) <span class="comment"># 会自动为数据产生_id标识，并返回</span></span><br><span class="line"><span class="comment"># 插入多条</span></span><br><span class="line">result = collection.insert([&#123;&#125;, &#123;&#125;]) <span class="comment"># 返回_id集合</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">## python3.x推荐使用下列方式,返回的是InsertOneResult</span></span><br><span class="line">insert_one(&#123;&#125;)</span><br><span class="line">insert_many([&#123;&#125;, &#123;&#125;])</span><br><span class="line">print(result.inserted_id)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure>

<h4 id="insert-one"><a href="#insert-one" class="headerlink" title="insert_one()"></a>insert_one()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"><span class="comment">####  insert_many()</span></span><br><span class="line"></span><br><span class="line">~~~python</span><br></pre></td></tr></table></figure>



<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="find-find-one"><a href="#find-find-one" class="headerlink" title="find(), find_one()"></a>find(), find_one()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="comment"># 得到一个结果</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"a"</span>:<span class="string">"b"</span>&#125;) <span class="comment"># 没有返回None</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"_id"</span>:<span class="string">"ObjectId('1325645654')"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到生成器对象cursor，可以用下标获取</span></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:<span class="string">"20"</span>&#125;) <span class="comment"># pymongo.cursor</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;) <span class="comment"># 大于20的</span></span><br></pre></td></tr></table></figure>

<h5 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">results = collection.aggregate([ &#123;<span class="string">'$sample'</span>: &#123;<span class="string">'size'</span>:<span class="number">2000</span>&#125;&#125;]) <span class="comment"># 生成生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="比较符"><a href="#比较符" class="headerlink" title="比较符"></a>比较符</h5><p><a href="https://imgchr.com/i/GyHdBV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/06/GyHdBV.png" alt="GyHdBV.png" border="0" width="600/"></a></p>
<h5 id="用正则表达式"><a href="#用正则表达式" class="headerlink" title="用正则表达式"></a>用正则表达式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find (&#123; <span class="string">'name'</span>: &#123;<span class="string">'$ regex'</span>:<span class="string">'^M.*'</span>&#125;&#125; )</span><br><span class="line"><span class="comment"># 这里使用$regex来指定正则匹配，人M.*代表以 M 开头的正则表达式。</span></span><br></pre></td></tr></table></figure>

<h5 id="功能符"><a href="#功能符" class="headerlink" title="功能符"></a>功能符</h5><img src="https://s1.ax1x.com/2020/04/06/GybBrt.png" alt="GybBrt.png" border="0" width="600/">



<h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = colletion.find().count()</span><br></pre></td></tr></table></figure>



<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = colletion.find().sort(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure>

<p><em>这里我们调用pymongo.ASCENDING指定升序。如果要降序排列，可以传入pymongo.DESCENDING</em>  </p>
<h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><h4 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> resuLt <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>, <span class="string">'Mike'</span>]</span><br></pre></td></tr></table></figure>

<p><em>值得注意的是，在数据库数量非常庞大的时候，如千万、亿级别，最好不要使用大的偏移量来查询数据，因为这样很可能导致内存溢出。此时可以使用类似如下操作来查询</em>  </p>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p><em>设置结果个数</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">condition &#x3D; &#123;&quot;d&quot;: &#39;c&#39;&#125;</span><br><span class="line">dict &#x3D; colletion.find_one(condition)</span><br><span class="line">dict[&quot;a&quot;] &#x3D; &quot;b&quot;</span><br><span class="line">1.collection.update(condition, dict) &#x2F;&#x2F; 直接用现在的dict替换之前的dict</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&#123;&#39;ok&#39;: 1, &#39;nModified*: 1, &#39;n&#39;: 1, &#39;updatedExisting&#39;: True&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span>collection.update(condition, &#123;<span class="string">'$set'</span>: dict&#125;) // 只更新存在的字段，其它字段不会删除</span><br></pre></td></tr></table></figure>

<p><em>update( ) 方 法 其 实 也 是 官 方 不 推 荐 使 用 的 方 法 。这 里 也 分 为 update_one()方法和updatejnany()方法，用法更加严格，它们的第二个参数需要使用$类型操作符作为字典的键名</em></p>
<h4 id="update-one"><a href="#update-one" class="headerlink" title="update_one()"></a>update_one()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">condition &#x3D; &#123;&#39;name&#39;: &#39;Kevin&#39;&#125;</span><br><span class="line">student &#x3D; collection.find_one(condition)</span><br><span class="line">student[&#39;age&#39;] &#x3D; 26</span><br><span class="line">resuIt &#x3D; collection.update_one(condition, &#123;&#39;$set&#39;: student&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用了 update_one()方法,第二个参数不能再直接传入修改后的字典，而是需要使用&#123;&#39;$set&#39;:</span><br><span class="line">student&#125;这样的形式，其返回结果是UpdateResult类型。然后分别调用 matched_count和 modified_count</span><br><span class="line">属性，可以获得匹配的数据条数和影响的数据条数。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition = &#123; <span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">'$inc'</span>: &#123;<span class="string">'age'</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, resuLt.modified_count)</span><br><span class="line"></span><br><span class="line">这里指定查询条件为年龄大于<span class="number">20</span> , 然后更新条件为&#123;<span class="string">'$inc'</span>: &#123;<span class="string">'age'</span>:<span class="number">1</span>&#125;&#125;,也就是年龄加<span class="number">1</span>, 执行之后会将第一条符合条件的数据年龄加<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="update-many"><a href="#update-many" class="headerlink" title="update_many()"></a>update_many()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果调用update_many()方法，则会将所有符合条件的数据都更新，示例如下：</span><br><span class="line"></span><br><span class="line">condition &#x3D; &#123;&#39;age&#39;: &#123;&#39;$gt&#39;: 20&#125;&#125;</span><br><span class="line">result &#x3D; collection.update_many(condition, &#123;&#39;$inc&#39;: &#123;&#39;age&#39;: 1&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.mmtched_count, result.modified_count)</span><br><span class="line"></span><br><span class="line">这时匹配条数就不再为1 条了，运行结果如下：</span><br><span class="line">&lt;pymongo.results.UpdateResult object at OxlOc6384c8&gt;</span><br><span class="line">3 3</span><br><span class="line">可以看到，这时所有匹配到的数据都会被更新。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.update_many(&#123;&#125;, &#123;<span class="string">'$set'</span>:&#123;<span class="string">'score'</span>:<span class="number">40</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><em>其返回结果是UpdateResult类型。然后分别J调用 matched_count和 modified_count<br>属性，可以获得匹配的数据条数和影响的数据条数</em></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colletion.remove(condition)</span><br></pre></td></tr></table></figure>

<h4 id="delete-one"><a href="#delete-one" class="headerlink" title="delete_one()"></a>delete_one()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.delete_one(condtion)</span><br></pre></td></tr></table></figure>

<h4 id="delete-many"><a href="#delete-many" class="headerlink" title="delete_many()"></a>delete_many()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colletion.delete_one(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$lt'</span>: <span class="number">25</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><em>它们的返回结果 都 是 DeleteResult类型，可以调用deleted_count属性获取删除的数据条数。</em>  </p>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><em>另外， PyMongo 还提供了一些组合方法，女口find_one_and_delete()、 find_one_and_replace()和find_one_and_update(),它们是查找后删除、替换和更新操作，其用法与上述方法基本一致。另外，还可以对索引进行操作，相 关 方 法 有 create_index()、 create_indexes()和 drop_index()等。</em>  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.cursor可以用 [index]</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>钟表可以回到起点，但永远不会回到昨天。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="20代表一个空格的意思"><a href="#20代表一个空格的意思" class="headerlink" title="%20代表一个空格的意思"></a>%20代表一个空格的意思</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>python的HTTP的请求库-Request</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-HTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93-Request.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h1><p><em>常用的url请求库，是python的第三方库</em></p>
<p><a href="http://www.python-requests.org" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<p><a href="http://docs.python-requests.org/zh_CN/latest" target="_blank" rel="external nofollow noopener noreferrer">中文文档</a></p>
<h2 id="安装Request"><a href="#安装Request" class="headerlink" title="安装Request"></a>安装Request</h2><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> request</span><br></pre></td></tr></table></figure>

<h3 id="wheel安装"><a href="#wheel安装" class="headerlink" title="wheel安装"></a>wheel安装</h3><p><em>wheel是 <strong>Python</strong>的一种<strong>安装包</strong>，其后缀为<strong>.whl</strong>,在网速较差的情况下可以选择<strong>下载wheel文件</strong>再安装，<strong>然后直接用p ip3命令加文件名安装即可</strong>。不过在这之前<strong>需要先安装wheel库</strong>：</em>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install wheel</span><br></pre></td></tr></table></figure>

<p><em>然后在<strong>PyPI</strong>上下载对应的wheel文件。进入cmd中进入下载路径：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install xxxx.whl</span><br></pre></td></tr></table></figure>

<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p><em>如果你不想用pip来安装，或者想获取某一特定版本，可以<strong>选择下载源码</strong>安装。此种方式需要先找到此库的源码地址，然后下载下来再用命令安装</em></p>
<p>  <em>requests 项 目的地址是： <a href="https://github.com/kennethreitz/requests" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/kennethreitz/requests</a></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- git下载源代码</span><br><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;kennethieitz&#x2F;requests.git</span><br><span class="line"></span><br><span class="line">-- 或者使用curl下载</span><br><span class="line">curl -OL https:&#x2F;&#x2F;github.com&#x2F;kennethreitz&#x2F;:requests&#x2F;tmrba]l&#x2F;nimster</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">-- 下载下来之后，进入目录，执行如下命令即可安装：</span><br><span class="line"><span class="built_in">cd</span> requests</span><br><span class="line">python3 setup.py install</span><br><span class="line">-- 命令执行结束后即可完成requests的安装</span><br></pre></td></tr></table></figure>

<h2 id="Request库使用"><a href="#Request库使用" class="headerlink" title="Request库使用"></a>Request库使用</h2><p><em><a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 请求为get请求时作出响应，返回请求头信息</em></p>
<p><em>*<a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a>, 请求为get请求时作出响应，返回请求头信息</em></p>
<h3 id="七个主要方法"><a href="#七个主要方法" class="headerlink" title="七个主要方法"></a>七个主要方法</h3><p><em>request(), get(), head(), put(), post(), patch(), delete()</em></p>
<h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p><em>请求的链接为<a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 该网站会判断如果客户端发起的是GET请求的话，它返回相应的请求信息</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">r = requests.get(url)</span><br></pre></td></tr></table></figure>

<h4 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h4><p><em>用于url添加参数</em></p>
<p><em>通常参数都是以字典形式存储的</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">r = requests.get(url, params=data)</span><br></pre></td></tr></table></figure>

<h4 id="headers参数"><a href="#headers参数" class="headerlink" title="headers参数"></a>headers参数</h4><p><em>里面有的字段可以是User-Agent, Cookies, Host等</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">headers = &#123;'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_ll_4) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line">Chrome/52・0.2743・116 Safari/537・36'</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>



<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><h5 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h5><p><em>返回类型实际上是*</em>str类型<strong>，但是它很特殊，是 **JSON格式的</strong>，调 用 jso n()方法，就可以将返回结果是JSON格式的字符串转化为<strong>字典*</strong>  </p>
<p><em>如果返回结果不是JSON格式，便会出现解析错误，抛出json.decoder.JSONDecodeErrar<br>异常</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">r = requests.get("http://httpbin.org/get")</span><br><span class="line">print(type(r.text))</span><br><span class="line">print(r.json())</span><br><span class="line">print(type(r.json())</span><br></pre></td></tr></table></figure>

<h5 id="r-text"><a href="#r-text" class="headerlink" title="r.text"></a>r.text</h5><h5 id="r-status-code"><a href="#r-status-code" class="headerlink" title="r.status_code"></a>r.status_code</h5><h5 id="r-encoding和r-apparent-encoding"><a href="#r-encoding和r-apparent-encoding" class="headerlink" title="r.encoding和r.apparent_encoding"></a>r.encoding和r.apparent_encoding</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- encoding 从header中猜测的编码方式</span><br><span class="line">-- apparent_encoding 从内容分析的编码格式</span><br><span class="line">r.encodeing = r.apparent_encoding</span><br></pre></td></tr></table></figure>

<h5 id="r-url"><a href="#r-url" class="headerlink" title="r.url"></a>r.url</h5><h5 id="r-content"><a href="#r-content" class="headerlink" title="r.content"></a>r.content</h5><h5 id="r-history"><a href="#r-history" class="headerlink" title="r.history"></a>r.history</h5><h5 id="r-cookies"><a href="#r-cookies" class="headerlink" title="r.cookies"></a>r.cookies</h5><h4 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h4><p><em>通常是直接返回html文本或json格式数据</em></p>
<h4 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h4><p><em>图片、音 频 、视频这些文件本质上都是由二进制码组成的，想要抓取它们，就要拿到它们的二进制码</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url) <span class="comment"># 假设这里是图片链接</span></span><br><span class="line">print(r.text) <span class="comment"># 乱码</span></span><br><span class="line">print(r.content) <span class="comment"># 二进制数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure>
<h4 id="内置状态码查询对象"><a href="#内置状态码查询对象" class="headerlink" title="内置状态码查询对象"></a>内置状态码查询对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> print(<span class="string">'requests Successfully'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br></pre></td></tr></table></figure>

<p><em>提交内容在form字段中</em></p>
<h4 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h4><p><em>方法和get响应结果差不多</em></p>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text) <span class="comment"># 在请求头的files字段</span></span><br></pre></td></tr></table></figure>

<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="通过headers参数添加cookies"><a href="#通过headers参数添加cookies" class="headerlink" title="通过headers参数添加cookies"></a>通过headers参数添加cookies</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line">cookies = r.cookies  <span class="comment"># 可以发现它是RequestCookieJar类型。</span></span><br><span class="line">然 后 用 items。 方法将其转化为元组组成的列表</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以直接用Cookie来维持登录状态</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'.....'</span>, <span class="string">'Host'</span>: <span class="string">'...'</span>, <span class="string">'User-Agent'</span>: <span class="string">'....'</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>

<h5 id="通过cookies模块"><a href="#通过cookies模块" class="headerlink" title="通过cookies模块"></a>通过cookies模块</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookies = <span class="string">'x=xxxx;x=xxxxx;x=xxxx'</span></span><br><span class="line">jar = requests.cookies.RquestsCookieJar()</span><br><span class="line">headers = &#123;<span class="string">'Host'</span>: <span class="string">'xxx'</span>, <span class="string">'User-Agent'</span>: <span class="string">'xxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies.split(<span class="string">';'</span>):</span><br><span class="line">    key, value = cooke.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">    jar.set(key, value)</span><br><span class="line">r = requests.get(url, cookies=jar, headers=headers)</span><br></pre></td></tr></table></figure>

<h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><p><em>在 requests中，如果直接利用g et()或 post()等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的会话，也就是说相当于你用了两个浏览器打开了不同的页面</em></p>
<h5 id="请求时设置相同的Cookies"><a href="#请求时设置相同的Cookies" class="headerlink" title="请求时设置相同的Cookies"></a>请求时设置相同的Cookies</h5><p><em>这种方法比较麻烦</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例</span></span><br><span class="line">r1 = requests.post(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br><span class="line">r2 = requests.get(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text) <span class="comment"># &#123;"cookies": &#123;"number": "123456789"&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h4><p><em>requests还提供证书验证。当请求有些url时，会检查ssl证书，如12306</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line">/*requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', *tls_process_server_certificate',</span></span><br><span class="line"><span class="string">'certificate verify failed')],)"</span>,)*/</span><br></pre></td></tr></table></figure>

<p><em>请求一个HTTPS站点，但是证书验证错误，就会报错。可以通过设置*</em>verify参数<strong>的值为</strong>False***</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code) </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">/*/usr/local/lib/python3<span class="number">.6</span>/site-packages/urllib3/connectionpool.py:<span class="number">852</span>: InsecureRequestWarning: Unverified</span><br><span class="line">HTTPS request <span class="keyword">is</span> being made. Adding certificate verification <span class="keyword">is</span> strongly advised. See:</span><br><span class="line">https://urllib3•readthedocs.io/en/latest/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">InsecureRequestWarning)</span><br><span class="line"><span class="number">200</span>*/</span><br></pre></td></tr></table></figure>

<p><em>不过我们发现<strong>报了一个警告</strong>，它建议我们给它指定证书。我们可以通过<strong>设置忽略警告</strong>的方式来屏蔽这个警告</em>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置屏蔽</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requets.packages <span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(r.status_code) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 捕获警告到日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">logging.captureWarning(<span class="literal">True</span>)</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定一个本地证书到客户端证书</span><br><span class="line">r &#x3D; requests.get(url, cert&#x3D;(&#39;&#x2F;path&#x2F;server.crt&#39;, &#39;&#x2F;path&#x2F;key&#39;))</span><br></pre></td></tr></table></figure>

<p><em>当然，我们也可以指定一个本地证书用作客户端证书，这可以是单个文件(包含密钥和证书)或<br>一个包含两个文件路径的元组。当然，上面的代码是演示实例，我 们 需 要 有crt和 key文件，并且指定它们的路径。注意，本地私有证书的key必须是解密状态，加密状态的key是不支持的</em></p>
<h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p><em>由于频繁访问，可能会被限制IP或封IP</em></p>
<p><em>网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会宜接封禁客户端<br>的 I P , 导致一定时间段内无法访问</em></p>
<h5 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'xxxx'</span>, <span class="string">'https'</span>: <span class="string">'xxxx'</span>&#125;</span><br><span class="line">requets.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<p><em>若代理需要使用HTTP Basic A u th ,可以使用类似<a href="http://user:password@host:port这样的语法来设置代理" rel="external nofollow noopener noreferrer" target="_blank">http://user:password@host:port这样的语法来设置代理</a></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'http://user:password@10.10.1.10:3128'</span>&#125;  </span><br><span class="line"></span><br><span class="line">requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<h5 id="SOCKS协议代理"><a href="#SOCKS协议代理" class="headerlink" title="SOCKS协议代理"></a>SOCKS协议代理</h5><p><em>除了基本的HTTP代理外, requests还 支 持 SOCKS协议的代理</em></p>
<p><em>首先，需要 安 装 socks这个库</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="string">'requests[socks]'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies=&#123;<span class="string">'http'</span>:<span class="string">'socks5://user:password@host:port'</span>, <span class="string">'https'</span>: <span class="string">'socks5://user:password@host:port'</span>&#125;</span><br><span class="line">r = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><p><em>为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应，那就报错。这需要用到timeout参数</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><em>实际上，请求分为两个阶段，即 连 接 (co n n e ct)和 读 取 ( read )<br>上面设置的tim eout将用作连接和读取这二者的tim eout总和</em></p>
<p><em>如果要分别指定，就可以传入一个元组：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url, timeout=(<span class="number">5</span>, <span class="number">11</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<p><em>如果想永久等待，可以直接将tim eout设置为 N on e,或者不设置直接留空，因为默认是None</em></p>
<hr>
<blockquote>
<p>有些路需要一个人走，有些事需要一个人扛，星光不问赶路人，时光不负有心人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用用法积累</title>
    <url>/python%E7%94%A8%E6%B3%95%E7%A7%AF%E7%B4%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><h3 id="print-“a”-“b”-“c”-sep-’-n’"><a href="#print-“a”-“b”-“c”-sep-’-n’" class="headerlink" title="print(“a”, “b”, “c”, sep=’\n’)"></a>print(“a”, “b”, “c”, sep=’\n’)</h3><p><em>a, b, c隔行打印</em></p>
<h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><h3 id="isinstance-e-reason-socket-timeout"><a href="#isinstance-e-reason-socket-timeout" class="headerlink" title="isinstance(e.reason, socket.timeout)"></a>isinstance(e.reason, socket.timeout)</h3><p><em>是在urllib实例看到的</em></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变"><a href="#一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变" class="headerlink" title="一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变"></a>一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变</h3><h2 id="’xx’-join-‘a’-‘b’-‘c’"><a href="#’xx’-join-‘a’-‘b’-‘c’" class="headerlink" title="’xx’.join([‘a’, ‘b’, ‘c’])"></a>’xx’.join([‘a’, ‘b’, ‘c’])</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(’xx<span class="string">'.join(['</span>a<span class="string">', '</span><span class="string">b', '</span>c<span class="string">']))</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; axxbxxc</span></span><br></pre></td></tr></table></figure>

<h2 id="print-‘a’-‘b’-‘c’"><a href="#print-‘a’-‘b’-‘c’" class="headerlink" title="print(*[‘a’, ‘b’, ‘c’])"></a>print(*[‘a’, ‘b’, ‘c’])</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a b c</span><br></pre></td></tr></table></figure>



<h2 id="表达式-for-r-in-x"><a href="#表达式-for-r-in-x" class="headerlink" title="[表达式 for r in x]"></a>[表达式 for r in x]</h2><p><em>得到数组</em></p>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul>
<li>‘kdjkf%skdk%d’%(‘xxx’, 5)</li>
<li>‘{0}dfsef{1}’.format(4, 5)</li>
</ul>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><ul>
<li><p>sleep</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>+ <span class="string">", %s"</span>%arg)</span><br><span class="line">    time.sleep(<span class="number">2</span>)<span class="comment">##</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<h3 id="threadpool模块"><a href="#threadpool模块" class="headerlink" title="threadpool模块"></a>threadpool模块</h3><p><a href="https://www.cnblogs.com/xiaozi/p/6182990.html" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">li = [<span class="string">'wangming'</span>, <span class="string">'lifang'</span>, <span class="string">'zhoujie'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>+ <span class="string">", %s"</span>%arg)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">sta_time = time.time()</span><br><span class="line">pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">requests = threadpool.makeRequests(fun, li)</span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</span><br><span class="line">pool.wait()</span><br><span class="line">print(<span class="string">"total time is :%d"</span>%(time.time()-sta_time))</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(m, n, o)</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    print(<span class="string">"m = %s, n = %s, o = %s"</span> % (m, n, o))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 方法1</span></span><br><span class="line">    lst_vars_1 = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">    lst_vars_2 = [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</span><br><span class="line">    func_var = [(lst_vars_1, <span class="literal">None</span>), (lst_vars_2, <span class="literal">None</span>)]</span><br><span class="line">    <span class="comment"># # 方法2</span></span><br><span class="line">    <span class="comment"># dict_vars_1 = &#123;'m': '1', 'n': '2', 'o': '3'&#125;</span></span><br><span class="line">    <span class="comment"># dict_vars_2 = &#123;'m': '4', 'n': '5', 'o': '6'&#125;</span></span><br><span class="line">    <span class="comment"># func_var = [(None, dict_vars_1), (None, dict_vars_2)]</span></span><br><span class="line"></span><br><span class="line">    pool = threadpool.ThreadPool(<span class="number">2</span>)</span><br><span class="line">    requests = threadpool.makeRequests(hello, func_var)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</span><br><span class="line">    pool.wait()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/Tf7UsJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2021/12/31/Tf7UsJ.png" alt="Tf7UsJ.png"></a></p>
<h3 id="multiprocessing模块"><a href="#multiprocessing模块" class="headerlink" title="multiprocessing模块"></a>multiprocessing模块</h3><h4 id="process"><a href="#process" class="headerlink" title="process"></a>process</h4><p><em>适合少量进程</em></p>
<h4 id="pool"><a href="#pool" class="headerlink" title="pool"></a>pool</h4><p><em>适合大量进程</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/T58Run" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/01/T58Run.png" alt="T58Run.png"></a></p>
<h3 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h3><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><em>适用于子进程是外部程序</em></p>
<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"This is an added thread, number is %s"</span>% threading.current_thread())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(threading.active_count()) // 已有线程个数</span><br><span class="line">    print(threading.enumerate()) // 显示已有线程</span><br><span class="line">    print(threading.current_thread()) // 正在执行的线程</span><br><span class="line">    added_thread = threading.Thread(target=thread_job)  // 添加子线程</span><br><span class="line">    added_thread.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/T5dyXF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/01/T5dyXF.png" alt="T5dyXF.png"></a></p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p><em>用来控制主线程后续任务，在子进程执行完毕后再执行</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T1 start\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(<span class="string">"T1 finish\n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    added_thread = threading.Thread(target=thread_job, name=<span class="string">'T1'</span>)</span><br><span class="line">    added_thread.start()</span><br><span class="line">    added_thread.join() // 不加这句，会先执行all done，再t1 finish</span><br><span class="line">    print(<span class="string">'all done\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/T501sS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s4.ax1x.com/2022/01/01/T501sS.png" alt="T501sS.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T1 start\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(<span class="string">"T1 finish\n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T2_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T2 start\n"</span>)</span><br><span class="line">    print(<span class="string">"T2 finish\n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    added_thread = threading.Thread(target=thread_job, name=<span class="string">'T1'</span>)</span><br><span class="line">    T2_thread = threading.Thread(target=T2_job, name=<span class="string">'T2'</span>)</span><br><span class="line">    added_thread.start()</span><br><span class="line">    T2_thread.start()</span><br><span class="line">    added_thread.join()</span><br><span class="line">    print(<span class="string">'all done\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><h3 id="random-1"><a href="#random-1" class="headerlink" title="random"></a>random</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.random() &gt;&gt;&gt; 生成<span class="number">0</span>到<span class="number">1</span>的小数</span><br></pre></td></tr></table></figure>



<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T1 start\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(<span class="string">"T1 finish\n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T2_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T2 start\n"</span>)</span><br><span class="line">    print(<span class="string">"T2 finish\n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    added_thread = threading.Thread(target=thread_job, name=<span class="string">'T1'</span>)</span><br><span class="line">    T2_thread = threading.Thread(target=T2_job, name=<span class="string">'T2'</span>)</span><br><span class="line">    added_thread.start()</span><br><span class="line">    T2_thread.start()</span><br><span class="line">    added_thread.join()</span><br><span class="line">    print(<span class="string">'all done\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [xxxxx]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l, len(li), step=<span class="number">5</span>):</span><br><span class="line">    a = li[i:i+<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h1 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>python <span class="keyword">yield</span>生成的generator不可以用下标取</span><br><span class="line"><span class="number">2.</span>一旦迭代了，就没了，长度变为零</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="string">"no"</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">'no'</span>:</span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        print(b)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = fun()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="number">1</span> 真正去迭代时，才执行的</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="Generator长度的获取"><a href="#Generator长度的获取" class="headerlink" title="Generator长度的获取"></a>Generator长度的获取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(list(gen))</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> gen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些方法一旦迭代，此generator就没用了</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.codenong.com/393053/" target="_blank" rel="external nofollow noopener noreferrer">参考文档</a></p>
<h3 id="Generator复制"><a href="#Generator复制" class="headerlink" title="Generator复制"></a>Generator复制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">generator1, generator2 = itertools.tee(generator，<span class="number">2</span>)</span><br><span class="line">此时不能再用最初的generator，否则会导致后两个不能用</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/xman4code/article/details/108379515" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yield不能与return一起用；与if一起用也有问题，直接不进入if(不管if是在生成generator的循环里，还是在函数里的任何位置，都直接不执行)</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.py.cn&#x2F;jishu&#x2F;jichu&#x2F;27217.html</span><br></pre></td></tr></table></figure>



<h1 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.mongodb的find方法生成的cursor可以用下标或去，也可以用下标截取</span><br><span class="line">2.如果要多次获取值，可以提前用clone()方法克隆</span><br></pre></td></tr></table></figure>

<h1 id="list-iterator"><a href="#list-iterator" class="headerlink" title="list_iterator"></a>list_iterator</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在使用Beautiful soup进行网页解析时，用find_all查找产生的iterator不是subscriptable</span><br></pre></td></tr></table></figure>



<h1 id="hasattr-setattr-getattr"><a href="#hasattr-setattr-getattr" class="headerlink" title="hasattr, setattr, getattr"></a>hasattr, setattr, getattr</h1><h2 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr"></a>hasattr</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hasattr(object, name)</span><br><span class="line">判断一个对象里面是否有name属性或者name方法，返回BOOL值，有name特性返回<span class="literal">True</span>， 否则返回<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    name=<span class="string">"xiaohua"</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">"HelloWord"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(t, <span class="string">"name"</span>) <span class="comment">#判断对象有name属性</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(t, <span class="string">"run"</span>)  <span class="comment">#判断对象有run方法</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="setattr"><a href="#setattr" class="headerlink" title="setattr"></a>setattr</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">给对象的属性赋值，若属性不存在，先创建再赋值</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    name=<span class="string">"xiaohua"</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">"HelloWord"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(t, <span class="string">"age"</span>)   <span class="comment">#判断属性是否存在</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(t, <span class="string">"age"</span>, <span class="string">"18"</span>)   <span class="comment">#为属相赋值，并没有返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(t, <span class="string">"age"</span>)    <span class="comment">#属性存在了</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取对象object的属性或者方法，如果存在打印出来，如果不存在，打印出默认值，默认值可选。</span><br><span class="line">需要注意的是，如果是返回的对象的方法，返回的是方法的内存地址，如果需要运行这个方法，</span><br><span class="line">可以在后面添加一对括号</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    name=<span class="string">"xiaohua"</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">"HelloWord"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"name"</span>) <span class="comment">#获取name属性，存在就打印出来。</span></span><br><span class="line"><span class="string">'xiaohua'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"run"</span>)  <span class="comment">#获取run方法，存在就打印出方法的内存地址。</span></span><br><span class="line">&lt;bound method test.run of &lt;__main__.test instance at <span class="number">0x0269C878</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"run"</span>)()  <span class="comment">#获取run方法，后面加括号可以将这个方法运行。</span></span><br><span class="line"><span class="string">'HelloWord'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"age"</span>)  <span class="comment">#获取一个不存在的属性。</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: test instance has no attribute <span class="string">'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"age"</span>,<span class="string">"18"</span>)  <span class="comment">#若属性不存在，返回一个默认值。</span></span><br><span class="line"><span class="string">'18'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一种综合的用法是：判断一个对象的属性是否存在，若不存在就添加该属性。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    name=<span class="string">"xiaohua"</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">"HelloWord"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"age"</span>)    <span class="comment">#age属性不存在</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: test instance has no attribute <span class="string">'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"age"</span>, setattr(t, <span class="string">"age"</span>, <span class="string">"18"</span>)) <span class="comment">#age属性不存在时，设置该属性</span></span><br><span class="line"><span class="string">'18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">"age"</span>)  <span class="comment">#可检测设置成功</span></span><br><span class="line"><span class="string">'18'</span></span><br></pre></td></tr></table></figure>

<h1 id="Flask库"><a href="#Flask库" class="headerlink" title="Flask库"></a>Flask库</h1><p><a href="https://www.jb51.net/article/236776.htm" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p>
<p><a href="https://flask.palletsprojects.com/en/0.12.x/" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,static_url_path=<span class="string">'/xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    g.x1 = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(g.x1)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g,request,render_template</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> login_log,login_ip</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login/',methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.form.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.form.get(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">　　　 　<span class="comment"># 使用g对象</span></span><br><span class="line">        g.username = username</span><br><span class="line">        g.ip = password</span><br><span class="line">        login_log()</span><br><span class="line">        login_ip()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'恭喜登录成功！'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">钩子的理解：</span><br><span class="line"></span><br><span class="line">在程序正常运行的时候，程序按照A函数—-&gt;B函数的顺序依次运行；钩子函数可以插入到A函数到B函数运行中间从而，程序运行顺序变成了A—-&gt;钩子函数—-&gt;B函数。</span><br><span class="line"></span><br><span class="line">Flask项目中有两个上下文，一个是应用上下文（app），另外一个是请求上下文（request）。请求上下文request和应用上下文current_app都是一个全局变量。所有请求都共享的。Flask有特殊的机制可以保证每次请求的数据都是隔离的，即A请求所产生的数据不会影响到B请求。所以可以直接导入request对象，也不会被一些脏数据影响了，并且不需要在每个函数中使用request的时候传入request对象。这两个上下文具体的实现方式和原理可以没必要详细了解。只要了解这两个上下文的四个属性就可以了：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）request：请求上下文上的对象。这个对象一般用来保存一些请求的变量。比如method、args、form等。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）session：请求上下文上的对象。这个对象一般用来保存一些会话信息。</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）current_app：返回当前的app。</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）g：应用上下文上的对象。处理请求时用作临时存储的对象</span><br></pre></td></tr></table></figure>

<h3 id="常用的钩子函数"><a href="#常用的钩子函数" class="headerlink" title="常用的钩子函数"></a>常用的钩子函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before_first_request：处理第一次请求之前执行。</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_request</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'first time request'</span></span><br><span class="line">    </span><br><span class="line">before_request：在每次请求之前执行。通常可以用这个装饰器来给视图函数增加一些变量。</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(g,<span class="string">'user'</span>):</span><br><span class="line">        setattr(g,<span class="string">'user'</span>,<span class="string">'xxxx'</span>)</span><br><span class="line">        </span><br><span class="line">teardown_appcontext：不管是否有异常，注册的函数都会在每次请求之后执行。</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown</span><span class="params">(exc=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> exc <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        db.session.remove()</span><br></pre></td></tr></table></figure>

<h1 id="random-randint"><a href="#random-randint" class="headerlink" title="random.randint"></a>random.randint</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">randint(a, b) <span class="comment"># 返回整数包含a, b</span></span><br></pre></td></tr></table></figure>

<h2 id="random-choice"><a href="#random-choice" class="headerlink" title="random.choice"></a>random.choice</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.choice([xxxx])  <span class="comment"># 随机从列表中选择一个</span></span><br></pre></td></tr></table></figure>



<h1 id="list-a-b"><a href="#list-a-b" class="headerlink" title="list[a:b]"></a>list[a:b]</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index为b的取不到</span><br></pre></td></tr></table></figure>

<h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">threeDayAgo = datetime.datetime.today() - datetime.timedelta(<span class="number">3</span>)</span><br><span class="line">print(threeDayAgo)</span><br><span class="line">otherStyleTime = threeDayAgo.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">print(otherStyleTime)</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-07</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">17.218960</span></span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-07</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">17</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(date.today() + timedelta(days&#x3D;-i)).strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line"></span><br><span class="line">2022-03-08</span><br></pre></td></tr></table></figure>

<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><h3 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.now &#x3D; datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">2.t &#x3D; time.time()</span><br></pre></td></tr></table></figure>

<h3 id="指定日期"><a href="#指定日期" class="headerlink" title="指定日期"></a>指定日期</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>datetime.datetime.strptime(t, <span class="string">'%Y%m%d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>int(time.mktime(time.strptime(t,<span class="string">"%Y%m%d"</span>)))</span><br><span class="line"></span><br><span class="line">t的时间格式要</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取时间戳；2022-03-08</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">secondsTime</span><span class="params">(self, t)</span>:</span></span><br><span class="line">        d = datetime.strptime(t, <span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        <span class="keyword">return</span> time.mktime(d.timetuple())</span><br></pre></td></tr></table></figure>



<h3 id="时间戳转化为固定格式时间"><a href="#时间戳转化为固定格式时间" class="headerlink" title="时间戳转化为固定格式时间"></a>时间戳转化为固定格式时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(<span class="number">1648803511</span>))</span><br></pre></td></tr></table></figure>

<h1 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a>re正则表达式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.去除字符串中非数字字符</span><br><span class="line">re.sub(&#39;\D&#39;, &#39;&#39;, &#39;a10b打&#39;) # \D代表非数字，\d代表数字</span><br><span class="line"></span><br><span class="line">re.sub(&#39;\D&#39;, &#39;-&#39;, &#39;2022年3月10&#39;)</span><br></pre></td></tr></table></figure>

<h1 id="类方法，普通方法，静态方法，类属性，实例属性"><a href="#类方法，普通方法，静态方法，类属性，实例属性" class="headerlink" title="类方法，普通方法，静态方法，类属性，实例属性"></a>类方法，普通方法，静态方法，类属性，实例属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例可以调用 类方法，普通方法，静态方法</span><br><span class="line">类可以调用 类方法，静态方法</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例方法（普通方法）——————————————————————随着实例属性的改变而改变</span><br><span class="line"></span><br><span class="line">类方法（无论是类调用还是实例调用）———————————————都是类属性的值，不随实例属性的变化而变化</span><br><span class="line"></span><br><span class="line">静态方法————————————————————————————不可以访问类属性，故直接输出传入方法的值</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">类属性：实例也可以访问类属性，但类不能访问实例属性</span><br><span class="line">实例属性：(<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self)</span>:</span>下带self的变量)</span><br><span class="line"></span><br><span class="line">当类属性和实例属性名字相同时，通过实例访问属性是访问的实例属性，当<span class="keyword">del</span> 实例.属性时，再访问的是类属性</span><br><span class="line"></span><br><span class="line">实例属性和类属性尽量不要取相同名字</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例属性属于各个实例所有，互不干扰；</span><br><span class="line"></span><br><span class="line">类属性属于类所有，所有实例共享一个属性；</span><br><span class="line"></span><br><span class="line">不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">o</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        a = o()</span><br><span class="line">        print(a.i, o.i)</span><br></pre></td></tr></table></figure>



<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017594591051072" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<p><a href="https://www.cnblogs.com/jayliu/p/9030725.html" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<h1 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.__name = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line">此为私有属性，通过<span class="string">'实例.xxx'</span>不能访问；当创建相应的方法可以操作(使用主要的一个功能是可以检测参数)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496679217440" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<h2 id="b””和f””和r””"><a href="#b””和f””和r””" class="headerlink" title="b””和f””和r””"></a>b””和f””和r””</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="string">f" "</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t0 = time.time()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">name = <span class="string">'processing'</span></span><br><span class="line"><span class="comment"># 以 f开头表示在字符串内支持大括号内的python 表达式</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;name&#125;</span> done in <span class="subst">&#123;time.time() - t0:<span class="number">.2</span>f&#125;</span> s'</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>processing done <span class="keyword">in</span> <span class="number">1.00</span> s</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span><span class="string">r""</span> 的作用是去除转义字符.</span><br><span class="line"></span><br><span class="line">即如果是“\n”那么表示一个反斜杠字符，一个字母n，而不是表示换行了。</span><br><span class="line">以r开头的字符，常用于正则表达式，对应着re模块</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span></span><br><span class="line"><span class="string">b" "</span>前缀表示：后面字符串是bytes 类型</span><br><span class="line">在 Python3 中，bytes 和 str 的互相转换方式是</span><br><span class="line">str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">bytes.decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="将列表所有元素整合成字符串"><a href="#将列表所有元素整合成字符串" class="headerlink" title="将列表所有元素整合成字符串"></a>将列表所有元素整合成字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [xxxxx]</span><br><span class="line"><span class="string">''</span>.</span><br></pre></td></tr></table></figure>

<h2 id="邮件功能"><a href="#邮件功能" class="headerlink" title="邮件功能"></a>邮件功能</h2><h3 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h3><h4 id="qq"><a href="#qq" class="headerlink" title="qq"></a>qq</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendEmail</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">email</span><span class="params">(self,body, attach)</span>:</span></span><br><span class="line">        <span class="comment"># 发送邮箱</span></span><br><span class="line">        sender = <span class="string">'2364076207@qq.com'</span></span><br><span class="line">        <span class="comment"># 接收邮箱</span></span><br><span class="line">        receivers = <span class="string">'2364076207@qq.com'</span></span><br><span class="line"></span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        <span class="comment">#邮箱的主题</span></span><br><span class="line">        msg[<span class="string">'Subject'</span>] = <span class="string">'BiliBili爬取报告'</span></span><br><span class="line">        msg[<span class="string">'From'</span>] = sender</span><br><span class="line">        msg[<span class="string">'To'</span>] = receivers</span><br><span class="line"></span><br><span class="line">        content = MIMEText(body,<span class="string">'html'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">        msg.attach(content)</span><br><span class="line">        <span class="comment">#添加附件，并命名</span></span><br><span class="line">        attachment = MIMEApplication(open(attach, <span class="string">'rb'</span>).read())</span><br><span class="line">        attachment.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'qr_code.png'</span>)</span><br><span class="line">        msg.attach(attachment)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#连接邮箱的服务器及端口号，以163邮箱为例</span></span><br><span class="line">            smtpObj = smtplib.SMTP_SSL(<span class="string">'smtp.qq.com'</span>,<span class="string">'465'</span>)</span><br><span class="line">            <span class="comment">#登录邮箱：用户名及密码</span></span><br><span class="line">            smtpObj.login(user=<span class="string">'2364076207@qq.com'</span>, password=<span class="string">'yxcupvssuhibdjab'</span>)</span><br><span class="line">            smtpObj.sendmail(sender, receivers, str(msg))</span><br><span class="line">            smtpObj.quit()</span><br><span class="line">            print(<span class="string">"邮件发送成功"</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            print(<span class="string">"Error: 无法发送邮件"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#以同一目录中的report.html为例</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r"C:\Users\Ty\Desktop\jd_maotai\aa.txt"</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        body=file.read()</span><br><span class="line">    <span class="comment">#以同一目录中的report.rar为例添加附件</span></span><br><span class="line">    <span class="comment">#SendEmail().email('aaaads',r"C:\Users\Ty\Desktop\jd_maotai\qr_code.png")</span></span><br></pre></td></tr></table></figure>

<h4 id="163"><a href="#163" class="headerlink" title="163"></a>163</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置smtplib所需的参数</span></span><br><span class="line"><span class="comment"># 下面的发件人，收件人是用于邮件传输的。</span></span><br><span class="line">smtpserver = <span class="string">'smtp.163.com'</span></span><br><span class="line">username = <span class="string">'email18315138179@163.com'</span></span><br><span class="line">password = <span class="string">'YIHELTPKQMKUZHUN'</span></span><br><span class="line">sender = <span class="string">'email18315138179@163.com'</span></span><br><span class="line"><span class="comment"># receiver='XXX@126.com'</span></span><br><span class="line"><span class="comment"># 收件人为多个收件人</span></span><br><span class="line">receiver = [<span class="string">'email18315138179@163.com'</span>]</span><br><span class="line"></span><br><span class="line">subject = <span class="string">'Python email test'</span></span><br><span class="line"><span class="comment"># 通过Header对象编码的文本，包含utf-8编码信息和Base64编码信息。以下中文名测试ok</span></span><br><span class="line"><span class="comment"># subject = '中文标题'</span></span><br><span class="line"><span class="comment"># subject=Header(subject, 'utf-8').encode()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造邮件对象MIMEMultipart对象</span></span><br><span class="line"><span class="comment"># 下面的主题，发件人，收件人，日期是显示在邮件页面上的。</span></span><br><span class="line">msg = MIMEMultipart(<span class="string">'mixed'</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = subject</span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">'email18315138179@163.com &lt;email18315138179@163.com&gt;'</span></span><br><span class="line"><span class="comment"># msg['To'] = 'XXX@126.com'</span></span><br><span class="line"><span class="comment"># 收件人为多个收件人,通过join将列表转换为以;为间隔的字符串</span></span><br><span class="line">msg[<span class="string">'To'</span>] = <span class="string">";"</span>.join(receiver)</span><br><span class="line"><span class="comment"># msg['Date']='2012-3-16'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造文字内容</span></span><br><span class="line">text = <span class="string">"Hi!\nHow are you?\nHere is the link you wanted:\nhttp://www.baidu.com"</span></span><br><span class="line">text_plain = MIMEText(text, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msg.attach(text_plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造图片链接</span></span><br><span class="line">sendimagefile = open(<span class="string">r'C:\Users\Ty\Desktop\jd_maotai\qr_code.png'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">image = MIMEImage(sendimagefile)</span><br><span class="line">image.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;image1&gt;'</span>)</span><br><span class="line">image[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="qr_code.png"'</span></span><br><span class="line">msg.attach(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造附件</span></span><br><span class="line">sendfile = open(<span class="string">r'C:\Users\Ty\Desktop\jd_maotai\qr_code.png'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">text_att = MIMEText(sendfile, <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">text_att[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下中文测试不ok</span></span><br><span class="line"><span class="comment"># text_att["Content-Disposition"] = u'attachment; filename="中文附件.txt"'.decode('utf-8')</span></span><br><span class="line">msg.attach(text_att)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line">smtp = smtplib.SMTP()</span><br><span class="line">smtp.connect(<span class="string">'smtp.163.com'</span>)</span><br><span class="line"><span class="comment"># 我们用set_debuglevel(1)就可以打印出和SMTP服务器交互的所有信息。</span></span><br><span class="line"><span class="comment"># smtp.set_debuglevel(1)</span></span><br><span class="line">smtp.login(username, password)</span><br><span class="line">smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure>



<h3 id="读取邮件"><a href="#读取邮件" class="headerlink" title="读取邮件"></a>读取邮件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">[参考链接](https://blog.csdn.net/weixin_33694172/article/details/<span class="number">89753224</span>)</span><br><span class="line"></span><br><span class="line">[参考链接](https://www.jb51.net/article/<span class="number">193104.</span>htm)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 读取键和值</span></span><br><span class="line"></span><br><span class="line">[参考链接](http://www.zzvips.com/article/<span class="number">178042.</span>html)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 位置参数、默认参数、可变参数、关键字参数、命名关键字参数</span></span><br><span class="line"></span><br><span class="line">[参考链接](https://www.liaoxuefeng.com/wiki/<span class="number">1016959663602400</span>/<span class="number">1017261630425888</span>)</span><br><span class="line"></span><br><span class="line">~~~python</span><br><span class="line">位置参数:传参可以不用按顺序传</span><br><span class="line">默认参数:对于不常用的参数使用默认值，降低函数调用的复杂度</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可变参数:*args</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(*args)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">函数内接收到的是一个tuple</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">如果要传入一个list或tuple，可以在前加*</span><br><span class="line">fun(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关键字参数:**kwargs</span><br><span class="line">会把传入的参数组装成字典</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">            </span><br><span class="line">和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">            </span><br><span class="line">**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">命名关键字参数:</span><br><span class="line">    如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"></span><br><span class="line">和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。</span><br><span class="line"></span><br><span class="line">调用方式如下：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br><span class="line"></span><br><span class="line">如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br><span class="line">命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: person() missing <span class="number">2</span> required keyword-only arguments: <span class="string">'city'</span> <span class="keyword">and</span> <span class="string">'job'</span></span><br></pre></td></tr></table></figure>

<h2 id="查看实例的属性和方法"><a href="#查看实例的属性和方法" class="headerlink" title="查看实例的属性和方法"></a>查看实例的属性和方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir(0b)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>不见黄河心不死，不撞南墙头不回。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python爬虫-xhttp</title>
    <url>/python%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="HTTP和POST测试"><a href="#HTTP和POST测试" class="headerlink" title="HTTP和POST测试"></a>HTTP和POST测试</h2><p>​    <strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p>
<p>​    <strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p>
<h2 id="if-isinstance-e-reason-socket-timeout"><a href="#if-isinstance-e-reason-socket-timeout" class="headerlink" title="if isinstance(e.reason, socket.timeout)"></a>if isinstance(e.reason, socket.timeout)</h2><h2 id="一个标准的url格式"><a href="#一个标准的url格式" class="headerlink" title="一个标准的url格式"></a>一个标准的url格式</h2><p><strong>scheme://netloc/path;params?query#fragment</strong></p>
<p><em>//前面的就是scheme，代表协议；第一个/符号前面便是n e tlo c ,即域名，后面是 p a th ,即访问路径；分号;前面是param s,代表参数；问号?后面是查询条件query, 一般用作GET类型的URL；#后面是锚点，用于直接定位页面内部的下拉位置。</em></p>
<h2 id="网页标签属性值之间有空格，代表这是两个值"><a href="#网页标签属性值之间有空格，代表这是两个值" class="headerlink" title="网页标签属性值之间有空格，代表这是两个值"></a>网页标签属性值之间有空格，代表这是两个值</h2><p>**&lt;li class=”li li-first”xa href =”link.html”&gt;first item&lt;/ax/li&gt;  **</p>
<p><em>li和li-first就是两个不同的值</em></p>
<hr>
<blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫-async</title>
    <url>/python%E7%88%AC%E8%99%AB-async.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="python爬虫-async"><a href="#python爬虫-async" class="headerlink" title="python爬虫-async"></a>python爬虫-async</h1><h2 id="协程与任务"><a href="#协程与任务" class="headerlink" title="协程与任务"></a>协程与任务</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">协程 通过 <span class="keyword">async</span>/<span class="keyword">await</span> 语法进行声明，是编写 asyncio 应用的推荐方式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'hello'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asyncio.run(main())</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：简单地调用一个协程并不会使其被调度执行</span><br><span class="line">&gt;&gt;&gt; main()</span><br><span class="line">&lt;coroutine object main at 0x1053bb7c8&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三种主要机制"><a href="#三种主要机制" class="headerlink" title="三种主要机制"></a>三种主要机制</h4><h5 id="asyncio-run"><a href="#asyncio-run" class="headerlink" title="asyncio.run()"></a>asyncio.run()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要真正运行一个协程，asyncio 提供了三种主要机制</span><br><span class="line">asyncio.run() 函数用来运行最高层级的入口点 <span class="string">"main()"</span> 函数 (参见上面的示例。)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span><span class="params">(delay, what)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    print(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"started at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"finished at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">started at <span class="number">17</span>:<span class="number">13</span>:<span class="number">52</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">finished at <span class="number">17</span>:<span class="number">13</span>:<span class="number">55</span></span><br></pre></td></tr></table></figure>

<h5 id="asyncio-create-task"><a href="#asyncio-create-task" class="headerlink" title="asyncio.create_task()"></a>asyncio.create_task()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.create_task() 函数用来并发运行作为 asyncio 任务 的多个协程</span><br><span class="line"></span><br><span class="line">让我们修改以上示例，并发 运行两个 say_after 协程</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    task1 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">1</span>, <span class="string">'hello'</span>))</span><br><span class="line"></span><br><span class="line">    task2 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">2</span>, <span class="string">'world'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"started at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wait until both tasks are completed (should take</span></span><br><span class="line">    <span class="comment"># around 2 seconds.)</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"finished at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意，预期的输出显示代码段的运行时间比之前快了 <span class="number">1</span> 秒:</span><br><span class="line"></span><br><span class="line">started at <span class="number">17</span>:<span class="number">14</span>:<span class="number">32</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">finished at <span class="number">17</span>:<span class="number">14</span>:<span class="number">34</span></span><br></pre></td></tr></table></figure>

<h3 id="可被等待对象"><a href="#可被等待对象" class="headerlink" title="可被等待对象"></a>可被等待对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果一个对象可以在 <span class="keyword">await</span> 语句中使用，那么它就是 可等待 对象。许多 asyncio API 都被设计为接受可等待对象。</span><br><span class="line"></span><br><span class="line">可等待 对象有三种主要类型: 协程, 任务 和 Future</span><br></pre></td></tr></table></figure>

<h4 id="协程-1"><a href="#协程-1" class="headerlink" title="协程"></a>协程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python 协程属于 可等待 对象，因此可以在其他协程中被等待</span><br><span class="line"></span><br><span class="line">重要 在本文档中 <span class="string">"协程"</span> 可用来表示两个紧密关联的概念:</span><br><span class="line">协程函数: 定义形式为 async def 的函数;</span><br><span class="line"></span><br><span class="line">协程对象: 调用 协程函数 所返回的对象</span><br></pre></td></tr></table></figure>

<h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">任务 被用来“并行的”调度协程</span><br><span class="line"></span><br><span class="line">当一个协程通过 asyncio.create_task() 等函数被封装为一个 任务，该协程会被自动调度执行</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">nested</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Schedule nested() to run soon concurrently</span></span><br><span class="line">    <span class="comment"># with "main()".</span></span><br><span class="line">    task = asyncio.create_task(nested())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># "task" can now be used to cancel "nested()", or</span></span><br><span class="line">    <span class="comment"># can simply be awaited to wait until it is complete:</span></span><br><span class="line">    <span class="keyword">await</span> task</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h4 id="Futures"><a href="#Futures" class="headerlink" title="Futures"></a>Futures</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Future 是一种特殊的 低层级 可等待对象，表示一个异步操作的 最终结果。</span><br><span class="line">当一个 Future 对象 被等待，这意味着协程将保持等待直到该 Future 对象在其他地方操作完毕。</span><br><span class="line">在 asyncio 中需要 Future 对象以便允许通过 <span class="keyword">async</span>/<span class="keyword">await</span> 使用基于回调的代码。</span><br><span class="line">通常情况下 没有必要 在应用层级的代码中创建 Future 对象。</span><br><span class="line">Future 对象有时会由库和某些 asyncio API 暴露给用户，用作可等待对象</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> function_that_returns_a_future_object()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># this is also valid:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        function_that_returns_a_future_object(),</span><br><span class="line">        some_python_coroutine()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一个很好的返回对象的低层级函数的示例是 loop.run_in_executor()</span><br></pre></td></tr></table></figure>

<h3 id="运行asyncio程序"><a href="#运行asyncio程序" class="headerlink" title="运行asyncio程序"></a>运行asyncio程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.run(coro, *, debug=<span class="literal">False</span>)</span><br><span class="line">执行 coroutine coro 并返回结果。</span><br><span class="line">此函数会运行传入的协程，负责管理 asyncio 事件循环，终结异步生成器，并关闭线程池。</span><br><span class="line">当有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。</span><br><span class="line">如果 debug 为 <span class="literal">True</span>，事件循环将以调试模式运行。</span><br><span class="line">此函数总是会创建一个新的事件循环并在结束时关闭之。它应当被用作 asyncio 程序的主入口点，理想情况下应当只被调用一次</span><br></pre></td></tr></table></figure>

<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">asyncio.create_task(coro, *, name=<span class="literal">None</span>)</span><br><span class="line">将 coro 协程 封装为一个 Task 并调度其执行。返回 Task 对象。</span><br><span class="line"></span><br><span class="line">name 不为 <span class="literal">None</span>，它将使用 Task.set_name() 来设为任务的名称。</span><br><span class="line"></span><br><span class="line">该任务会在 get_running_loop() 返回的循环中执行，如果当前线程没有在运行的循环则会引发 RuntimeError。</span><br><span class="line"></span><br><span class="line">此函数 在 Python <span class="number">3.7</span> 中被加入。在 Python <span class="number">3.7</span> 之前，可以改用低层级的 asyncio.ensure_future() 函数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># In Python 3.7+</span></span><br><span class="line">task = asyncio.create_task(coro())</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># This works in all Python versions but is less readable</span></span><br><span class="line">task = asyncio.ensure_future(coro())</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coroutine asyncio.sleep(delay, result=<span class="literal">None</span>)</span><br><span class="line">阻塞 delay 指定的秒数。</span><br><span class="line">如果指定了 result，则当协程完成时将其返回给调用者。</span><br><span class="line">sleep() 总是会挂起当前任务，以允许其他任务运行。</span><br><span class="line">将 delay 设为 <span class="number">0</span> 将提供一个经优化的路径以允许其他任务运行。 这可供长期间运行的函数使用以避免在函数调用的全过程中阻塞事件循环</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个函数从 <span class="number">3.7</span> 开始就会隐式地获取当前正在运行的事件循环</span><br><span class="line"></span><br><span class="line">以下协程示例运行 <span class="number">5</span> 秒，每秒显示一次当前日期:</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">display_date</span><span class="params">()</span>:</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    end_time = loop.time() + <span class="number">5.0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(datetime.datetime.now())</span><br><span class="line">        <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &gt;= end_time:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(display_date())</span><br></pre></td></tr></table></figure>

<h3 id="并发运行任务"><a href="#并发运行任务" class="headerlink" title="并发运行任务"></a>并发运行任务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">awaitable asyncio.gather(*aws, return_exceptions=<span class="literal">False</span>)</span><br><span class="line">并发运行aws序列中的可等待对象。</span><br><span class="line"></span><br><span class="line">如果 aws 中的某个可等待对象为协程，它将自动被作为一个任务调度。</span><br><span class="line"></span><br><span class="line">如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 aws 中可等待对象的顺序一致。</span><br><span class="line"></span><br><span class="line">如果 return_exceptions 为 <span class="literal">False</span> (默认)，所引发的首个异常会立即传播给等待 gather() 的任务。aws 序列中的其他可等待对象 不会被取消 并将继续运行。</span><br><span class="line"></span><br><span class="line">如果 return_exceptions 为 <span class="literal">True</span>，异常会和成功的结果一样处理，并聚合至结果列表。</span><br><span class="line"></span><br><span class="line">如果 gather() 被取消，所有被提交 (尚未完成) 的可等待对象也会 被取消。</span><br><span class="line"></span><br><span class="line">如果 aws 序列中的任一Task或Future 对象 被取消，它将被当作引发了 CancelledError一样处理--在此情况下 gather()调用不会被取消。这是为了防止一个已提交的 Task/Future 被取消导致其他 Tasks/Future 也被取消。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(name, number)</span>:</span></span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">f"Task <span class="subst">&#123;name&#125;</span>: Compute factorial(<span class="subst">&#123;number&#125;</span>), currently i=<span class="subst">&#123;i&#125;</span>..."</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        f *= i</span><br><span class="line">    print(<span class="string">f"Task <span class="subst">&#123;name&#125;</span>: factorial(<span class="subst">&#123;number&#125;</span>) = <span class="subst">&#123;f&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Schedule three calls *concurrently*:</span></span><br><span class="line">    L = <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        factorial(<span class="string">"A"</span>, <span class="number">2</span>),</span><br><span class="line">        factorial(<span class="string">"B"</span>, <span class="number">3</span>),</span><br><span class="line">        factorial(<span class="string">"C"</span>, <span class="number">4</span>),</span><br><span class="line">    )</span><br><span class="line">    print(L)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Expected output:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     Task A: Compute factorial(2), currently i=2...</span></span><br><span class="line"><span class="comment">#     Task B: Compute factorial(3), currently i=2...</span></span><br><span class="line"><span class="comment">#     Task C: Compute factorial(4), currently i=2...</span></span><br><span class="line"><span class="comment">#     Task A: factorial(2) = 2</span></span><br><span class="line"><span class="comment">#     Task B: Compute factorial(3), currently i=3...</span></span><br><span class="line"><span class="comment">#     Task C: Compute factorial(4), currently i=3...</span></span><br><span class="line"><span class="comment">#     Task B: factorial(3) = 6</span></span><br><span class="line"><span class="comment">#     Task C: Compute factorial(4), currently i=4...</span></span><br><span class="line"><span class="comment">#     Task C: factorial(4) = 24</span></span><br><span class="line"><span class="comment">#     [2, 6, 24]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注解 如果 return_exceptions 为 <span class="literal">False</span>，则在 gather() 被标记为已完成后取消它将不会取消任何已提交的可等待对象。 例如，在将一个异常传播给调用者之后，gather 可被标记为已完成，因此，在从 gather 捕获一个（由可等待对象所引发的）异常之后调用 gather.cancel() 将不会取消任何其他可等待对象</span><br></pre></td></tr></table></figure>

<h3 id="屏蔽取消操作"><a href="#屏蔽取消操作" class="headerlink" title="屏蔽取消操作"></a>屏蔽取消操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">awaitable asyncio.shield(aw)</span><br><span class="line">保护一个 可等待对象 防止其被 取消。</span><br><span class="line"></span><br><span class="line">如果 aw 是一个协程，它将自动被作为任务调度。</span><br><span class="line"></span><br><span class="line">以下语句:</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">await</span> shield(something())</span><br><span class="line">相当于:</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">await</span> something()</span><br><span class="line">不同之处 在于如果包含它的协程被取消，在 something() 中运行的任务不会被取消。从 something() 的角度看来，取消操作并没有发生。然而其调用者已被取消，因此 <span class="string">"await"</span> 表达式仍然会引发 CancelledError。</span><br><span class="line">如果通过其他方式取消 something() (例如在其内部操作) 则 shield() 也会取消。</span><br><span class="line">如果希望完全忽略取消操作 (不推荐) 则 shield() 函数需要配合一个 <span class="keyword">try</span>/<span class="keyword">except</span> 代码段，如下所示:</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = <span class="keyword">await</span> shield(something())</span><br><span class="line"><span class="keyword">except</span> CancelledError:</span><br><span class="line">    res = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coroutine asyncio.wait_for(aw, timeout)</span><br><span class="line">等待 aw 可等待对象 完成，指定 timeout 秒数后超时。</span><br><span class="line"></span><br><span class="line">如果 aw 是一个协程，它将自动被作为任务调度。</span><br><span class="line"></span><br><span class="line">timeout 可以为 <span class="literal">None</span>，也可以为 float 或 int 型数值表示的等待秒数。如果 timeout 为 <span class="literal">None</span>，则等待直到完成。</span><br><span class="line"></span><br><span class="line">如果发生超时，任务将取消并引发 asyncio.TimeoutError.</span><br><span class="line"></span><br><span class="line">要避免任务 取消，可以加上 shield()。</span><br><span class="line"></span><br><span class="line">此函数将等待直到 Future 确实被取消，所以总等待时间可能超过 timeout。 如果在取消期间发生了异常，异常将会被传播。</span><br><span class="line"></span><br><span class="line">如果等待被取消，则 aw 指定的对象也会被取消</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">eternity</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Sleep for one hour</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3600</span>)</span><br><span class="line">    print(<span class="string">'yay!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Wait for at most 1 second</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(eternity(), timeout=<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        print(<span class="string">'timeout!'</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Expected output:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     timeout!</span></span><br></pre></td></tr></table></figure>

<h3 id="简单等待"><a href="#简单等待" class="headerlink" title="简单等待"></a>简单等待</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coroutine asyncio.wait(aws, *, timeout=<span class="literal">None</span>, return_when=ALL_COMPLETED)</span><br><span class="line">并发地运行 aws 可迭代对象中的 可等待对象 并进入阻塞状态直到满足 return_when 所指定的条件。</span><br><span class="line">aws 可迭代对象必须不为空。</span><br><span class="line">返回两个 Task/Future 集合: (done, pending)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">done, pending = <span class="keyword">await</span> asyncio.wait(aws)</span><br><span class="line"></span><br><span class="line">如指定 timeout (float 或 int 类型) 则它将被用于控制返回之前等待的最长秒数。</span><br><span class="line"></span><br><span class="line">请注意此函数不会引发 asyncio.TimeoutError。当超时发生时，未完成的 Future 或 Task 将在指定秒数后被返回。</span><br><span class="line"></span><br><span class="line">return_when 指定此函数应在何时返回。它必须为以下常数之一:</span><br><span class="line">FIRST_COMPLETED</span><br><span class="line">	函数将在任意可等待对象结束或取消时返回。</span><br><span class="line">FIRST_EXCEPTION</span><br><span class="line">	函数将在任意可等待对象因引发异常而结束时返回。当没有引发任何异常时它就相当于 ALL_COMPLETED。</span><br><span class="line">ALL_COMPLETED</span><br><span class="line">	函数将在所有可等待对象结束或取消时返回</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">与 wait_for() 不同，wait() 在超时发生时不会取消可等待对象</span><br></pre></td></tr></table></figure>



<blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>async</tag>
        <tag>httpx</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫-提高爬虫效率</title>
    <url>/python%E7%88%AC%E8%99%AB-%E6%8F%90%E9%AB%98%E7%88%AC%E8%99%AB%E6%95%88%E7%8E%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="python爬虫-提高爬虫效率"><a href="#python爬虫-提高爬虫效率" class="headerlink" title="python爬虫-提高爬虫效率"></a>python爬虫-提高爬虫效率</h1><h2 id="httpx"><a href="#httpx" class="headerlink" title="httpx"></a>httpx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比 requests 更强大 Python 库，让你的爬虫效率提高一倍</span><br></pre></td></tr></table></figure>

<h3 id="什么是协程？"><a href="#什么是协程？" class="headerlink" title="什么是协程？"></a>什么是协程？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单来说，协程是一种基于线程之上，但又比线程更加轻量级的存在。对于系统内核来说，协程具有不可见的特性，所以这种由 程序员自己写程序来管理 的轻量级线程又常被称作 &quot;用户空间线程&quot;</span><br></pre></td></tr></table></figure>

<h4 id="协程比多线程好在哪呢？"><a href="#协程比多线程好在哪呢？" class="headerlink" title="协程比多线程好在哪呢？"></a>协程比多线程好在哪呢？</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 线程的控制权在操作系统手中，而 协程的控制权完全掌握在用户自己手中，因此利用协程可以减少程序运行时的上下文切换，有效提高程序运行效率。</span><br><span class="line">2. 建立线程时，系统默认分配给线程的 栈 大小是 1 M，而协程更轻量，接近 1 K 。因此可以在相同的内存中开启更多的协程。</span><br><span class="line">3. 由于协程的本质不是多线程而是单线程，所以不需要多线程的锁机制。因为只有一个线程，也不存在同时写变量而引起的冲突。在协程中控制共享资源不需要加锁，只需要判断状态即可。所以协程的执行效率比多线程高很多，同时也有效避免了多线程中的竞争关系</span><br></pre></td></tr></table></figure>

<h4 id="协程的适用-amp-不适用场景"><a href="#协程的适用-amp-不适用场景" class="headerlink" title="协程的适用 &amp; 不适用场景"></a>协程的适用 &amp; 不适用场景</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">适用场景：协程适用于被阻塞的，且需要大量并发的场景。</span><br><span class="line"></span><br><span class="line">不适用场景：协程不适用于存在大量计算的场景（因为协程的本质是单线程来回切换），如果遇到这种情况，还是应该使用其他手段去解决</span><br></pre></td></tr></table></figure>

<h3 id="初探异步-http-框架-httpx"><a href="#初探异步-http-框架-httpx" class="headerlink" title="初探异步 http 框架 httpx"></a>初探异步 http 框架 httpx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">至此我们对 &quot;协程&quot; 应该有了个大概的了解，但故事说到这里，相信有朋友还是满脸疑问：&quot;协程&quot; 对于接口测试有什么帮助呢？不要着急，答案就在下面。</span><br><span class="line"></span><br><span class="line">相信用过 Python 做接口测试的朋友都对 requests 库不陌生。requests 中实现的 http 请求是同步请求，但其实基于 http 请求 IO 阻塞的特性，非常适合用协程来实现 &quot;异步&quot; http 请求从而提升测试效率。 </span><br><span class="line"></span><br><span class="line">相信早就有人注意到了这点，于是在 Github 经过了一番探索后，果不其然，最终寻找到了支持协程 &quot;异步&quot; 调用 http 的开源库: httpx</span><br></pre></td></tr></table></figure>

<p>什么是 httpx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpx 是一个几乎继承了所有 requests 的特性并且支持 &quot;异步&quot; http 请求的开源库。简单来说，可以认为 httpx 是强化版 requests。</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpx 的安装非常简单，在 Python 3.6 以上的环境执行</span><br><span class="line">pip install httpx</span><br></pre></td></tr></table></figure>

<p>最佳实践</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">俗话说得好，效率决定成败。我分别使用了 httpx 异步 和 同步 的方式对批量 http 请求进行了耗时比较，来一起看看结果吧～</span><br><span class="line"></span><br><span class="line">首先来看看同步 http 请求的耗时表现</span><br></pre></td></tr></table></figure>

<h4 id="同步-http-请求"><a href="#同步-http-请求" class="headerlink" title="同步 http 请求"></a>同步 http 请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sync_main</span><span class="params">(url, sign)</span>:</span></span><br><span class="line">    response = httpx.get(url).status_code</span><br><span class="line">    print(<span class="string">f'sync_main: <span class="subst">&#123;threading.current_thread()&#125;</span>: <span class="subst">&#123;sign&#125;</span>: <span class="subst">&#123;response&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sync_start = time.time()</span><br><span class="line">[sync_main(url=<span class="string">'http://www.baidu.com'</span>, sign=i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>)]</span><br><span class="line">sync_end = time.time()</span><br><span class="line">print(sync_end - sync_start)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">代码比较简单，可以看到在 sync_main 中则实现了同步 http 访问百度 <span class="number">200</span> 次</span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">192</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">193</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">194</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">195</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">196</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">197</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">198</span>: <span class="number">200</span></span><br><span class="line">sync_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">199</span>: <span class="number">200</span></span><br><span class="line"><span class="number">16.56578803062439</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以看到在上面的输出中, 主线程没有进行切换（因为本来就是单线程啊喂！）请求按照顺序执行（因为是同步请求）。</span><br><span class="line"></span><br><span class="line">程序运行共耗时 16.6 秒</span><br></pre></td></tr></table></figure>

<h4 id="异步-http请求"><a href="#异步-http请求" class="headerlink" title="异步 http请求"></a>异步 http请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = httpx.AsyncClient()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_main</span><span class="params">(url, sign)</span>:</span></span><br><span class="line">    response = <span class="keyword">await</span> client.get(url)</span><br><span class="line">    status_code = response.status_code</span><br><span class="line">    print(<span class="string">f'async_main: <span class="subst">&#123;threading.current_thread()&#125;</span>: <span class="subst">&#123;sign&#125;</span>:<span class="subst">&#123;status_code&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [async_main(url=<span class="string">'http://www.baidu.com'</span>, sign=i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>)]</span><br><span class="line">async_start = time.time()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">async_end = time.time()</span><br><span class="line">loop.close()</span><br><span class="line">print(async_end - async_start)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上述代码在 async_main 中用 async await 关键字实现了&quot;异步&quot; http，通过 asyncio ( 异步 io 库请求百度首页 200 次并打印出了耗时</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">56</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">99</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">67</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">93</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">125</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">193</span>: <span class="number">200</span></span><br><span class="line">async_main: &lt;_MainThread(MainThread, started <span class="number">4471512512</span>)&gt;: <span class="number">100</span>: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">            <span class="number">4.518340110778809</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以看到顺序虽然是乱的（56，99，67...） (这是因为程序在协程间不停切换) 但是主线程并没有切换 （协程本质还是单线程 ）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序共耗时 4.5 秒</span><br><span class="line"></span><br><span class="line">比起同步请求耗时的 16.6 秒 缩短了接近 73 %！</span><br><span class="line"></span><br><span class="line">俗话说得好，一步快，步步快。 在耗时方面，&quot;异步&quot; http 确实比同步 http 快了很多。当然，&quot;协程&quot; 不仅仅能在请求效率方面赋能接口测试， 掌握 &quot;协程&quot;后，相信小伙伴们的技术水平也能提升一个台阶，从而设计出更优秀的测试框架</span><br></pre></td></tr></table></figure>

<h2 id="多线程和多进程-不建议使用"><a href="#多线程和多进程-不建议使用" class="headerlink" title="多线程和多进程(不建议使用)"></a>多线程和多进程(不建议使用)</h2><h2 id="线程池或进程池-适当使用"><a href="#线程池或进程池-适当使用" class="headerlink" title="线程池或进程池(适当使用)"></a>线程池或进程池(适当使用)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.pearvideo.com/category_3"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ex = <span class="string">'srcUrl="(.*?)",vdoUrl=srcUrl'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_video</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    向视频链接发送请求</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url=url, headers=headers).content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_video</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将视频的二进制数据保存到本地</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    video_name = str(random.randint(<span class="number">100</span>, <span class="number">999</span>)) + <span class="string">".mp4"</span></span><br><span class="line">    <span class="keyword">with</span> open(video_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 获取首页源码</span></span><br><span class="line">page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">'//ul[@class="listvideo-list clearfix"]/li'</span>)</span><br><span class="line"></span><br><span class="line">video_url_list = list()</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    detail_url = <span class="string">"https://www.pearvideo.com/"</span> + li.xpath(<span class="string">'./div/a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取该视频页面的源码</span></span><br><span class="line">    detail_page_text = requests.get(url=detail_url, headers=headers).text</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正则匹配视频的URL</span></span><br><span class="line">    video_url = re.findall(ex, detail_page_text, re.S)[<span class="number">0</span>]</span><br><span class="line">    video_url_list.append(video_url)</span><br><span class="line">    </span><br><span class="line">pool = Pool(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用线程池将视频的二进制数据下载下来</span></span><br><span class="line">content_list = pool.map(request_video, video_url_list)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用线程池将视频的二进制数据保存到本地</span></span><br><span class="line">pool.map(save_video, content_list)    </span><br><span class="line"></span><br><span class="line">print(<span class="string">"执行耗时: "</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>



<h2 id="单线程-异步协程-爬虫推荐使用）"><a href="#单线程-异步协程-爬虫推荐使用）" class="headerlink" title="单线程+异步协程(爬虫推荐使用）"></a>单线程+异步协程(爬虫推荐使用）</h2><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载"</span>, url)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"下载完成"</span>, url)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"https://www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"https://www.taobao.com"</span>,</span><br><span class="line">    <span class="string">"https://www.jd.com"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    request(url)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="进程池或线程池"><a href="#进程池或线程池" class="headerlink" title="进程池或线程池"></a>进程池或线程池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载"</span>, url)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"下载完成"</span>, url)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"https://www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"https://www.taobao.com"</span>,</span><br><span class="line">    <span class="string">"https://www.jd.com"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">pool.map(request, url_list)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><a href="https://github.com/kanadeblisst/aioBUser" target="_blank" rel="external nofollow noopener noreferrer">优质项目</a></p>
<h4 id="协程相关的概念"><a href="#协程相关的概念" class="headerlink" title="协程相关的概念"></a>协程相关的概念</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。程序是按照设定的顺序从头执行到尾，运行的次数也是完全按照设定。当在编写异步程序时，必然其中有部分程序的运行耗时是比较久的，需要先让出当前程序的控制权，让其在背后运行，让另一部分的程序先运行起来。当背后运行的程序完成后，也需要及时通知主程序已经完成任务可以进行下一步操作，但这个过程所需的时间是不确定的，需要主程序不断的监听状态，一旦收到了任务完成的消息，就开始进行下一步。loop就是这个持续不断的监视器。</span><br><span class="line"></span><br><span class="line">- coroutine：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到事件循环中，它会被事件循环调用。我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。</span><br><span class="line"></span><br><span class="line">- task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</span><br><span class="line"></span><br><span class="line">- future：代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</span><br><span class="line"></span><br><span class="line">- 另外我们还需要了解 async&#x2F;await 关键字，它是从 Python 3.5 才出现的，专门用于定义协程。其中，async 定义一个协程，await 用来使挂起阻塞方法的执行。</span><br></pre></td></tr></table></figure>

<h4 id="创建一个协程对象"><a href="#创建一个协程对象" class="headerlink" title="创建一个协程对象"></a>创建一个协程对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建一个协程对象，只需要在函数名前加上一个<span class="keyword">async</span>关键字即可</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载"</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"下载完成"</span>)</span><br><span class="line"></span><br><span class="line">c = request()</span><br></pre></td></tr></table></figure>

<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载"</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"下载完成"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协程对象</span></span><br><span class="line">c = request()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 将协程对象注册到事件循环中</span></span><br><span class="line"><span class="comment"># 2. 执行事件循环</span></span><br><span class="line">loop.run_until_complete(c)</span><br></pre></td></tr></table></figure>

<h4 id="task的使用"><a href="#task的使用" class="headerlink" title="task的使用"></a>task的使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"下载成功~~"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协程对象</span></span><br><span class="line">c = request()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过事件循环对象创建一个任务, 并将协程对象封装进这个任务里面 //作用：可以监听它的状态</span></span><br><span class="line">task = loop.create_task(c)</span><br><span class="line">print(task)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 将协程对象注册到事件循环中</span></span><br><span class="line"><span class="comment"># 2. 执行事件循环</span></span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(task)</span><br></pre></td></tr></table></figure>

<h4 id="future的使用"><a href="#future的使用" class="headerlink" title="future的使用"></a>future的使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"下载成功~~"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协程对象</span></span><br><span class="line">c = request()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过future创建任务，就不再依附于loop对象，通过asyncio模块来创建</span></span><br><span class="line">future = asyncio.ensure_future(c)</span><br><span class="line">print(future)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 将协程对象注册到事件循环中</span></span><br><span class="line"><span class="comment"># 2. 执行事件循环</span></span><br><span class="line">loop.run_until_complete(future)</span><br><span class="line">print(future)</span><br></pre></td></tr></table></figure>

<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="comment"># 通过res.result()就可以接收到requests发送请求返回的响应数据</span></span><br><span class="line">    print(<span class="string">"在这里进行数据解析"</span>, res.result())</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"下载成功~~"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"永灵大神"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协程对象</span></span><br><span class="line">c = request()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过future创建任务，就不再依附于loop对象，通过asyncio模块来创建</span></span><br><span class="line">future = asyncio.ensure_future(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过future定义一个回调函数，这样的话，协程对象的返回值就可以传递给我们的回调函数</span></span><br><span class="line">future.add_done_callback(call_back)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 将协程对象注册到事件循环中</span></span><br><span class="line"><span class="comment"># 2. 执行事件循环</span></span><br><span class="line">loop.run_until_complete(future)</span><br></pre></td></tr></table></figure>

<h4 id="回调函数-真正发送请求"><a href="#回调函数-真正发送请求" class="headerlink" title="回调函数(真正发送请求)"></a>回调函数(真正发送请求)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="comment"># 通过res.result()就可以接收到requests发送请求返回的响应数据</span></span><br><span class="line">    page_text = res.result()</span><br><span class="line">    print(<span class="string">"在这里进行数据解析"</span>, page_text)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url=<span class="string">"https://www.baidu.com"</span>, headers=headers).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协程对象</span></span><br><span class="line">c = request()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过future创建任务，就不再依附于loop对象，通过asyncio模块来创建</span></span><br><span class="line">future = asyncio.ensure_future(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过future定义一个回调函数，这样的话，协程对象的返回值就可以传递给我们的回调函数</span></span><br><span class="line">future.add_done_callback(call_back)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 将协程对象注册到事件循环中</span></span><br><span class="line"><span class="comment"># 2. 执行事件循环</span></span><br><span class="line">loop.run_until_complete(future)</span><br></pre></td></tr></table></figure>

<h2 id="多任务异步协程"><a href="#多任务异步协程" class="headerlink" title="多任务异步协程"></a>多任务异步协程</h2><h3 id="多任务异步协程的基本使用"><a href="#多任务异步协程的基本使用" class="headerlink" title="多任务异步协程的基本使用"></a>多任务异步协程的基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载: "</span>, url)</span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># time模块为非异步的模块，在整个异步的代码中，如果出现了非异步的模块，则会让整个异步失去效果</span></span><br><span class="line">    print(<span class="string">"下载完成: "</span>, url)</span><br><span class="line">    </span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"https://www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"https://www.taobao.com"</span>,</span><br><span class="line">    <span class="string">"https://www.jd.com"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task_list = list()</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    c = request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task_list.append(task)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果传过来的是一个列表的话，需要再加上一层封装, 使用asyncio.wait()方法进行封装</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(task_list))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="多任务异步协程-解决方案"><a href="#多任务异步协程-解决方案" class="headerlink" title="多任务异步协程(解决方案)"></a>多任务异步协程(解决方案)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载: "</span>, url)</span><br><span class="line"><span class="comment">#     time.sleep(2)  # time模块为非异步的模块，在整个异步的代码中，如果出现了非异步的模块，则会让整个异步失去效果</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"下载完成: "</span>, url)</span><br><span class="line">    </span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"https://www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"https://www.taobao.com"</span>,</span><br><span class="line">    <span class="string">"https://www.jd.com"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task_list = list()</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    c = request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task_list.append(task)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果传过来的是一个列表的话，需要再加上一层封装, 使用asyncio.wait()方法进行封装</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(task_list))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="将多任务异步协程应用到爬虫中"><a href="#将多任务异步协程应用到爬虫中" class="headerlink" title="将多任务异步协程应用到爬虫中"></a>将多任务异步协程应用到爬虫中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载: "</span>, url)</span><br><span class="line">    <span class="comment"># requests模块为非异步的请求模块，如果使用它，将会使整个异步失去效果</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line">    print(<span class="string">"返回的数据"</span>, page_text)</span><br><span class="line">    print(<span class="string">"下载完成: "</span>, url)</span><br><span class="line">    </span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tiger"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tom"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/jay"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task_list = list()</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    c = request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task_list.append(task)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果传过来的是一个列表的话，需要再加上一层封装, 使用asyncio.wait()方法进行封装</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(task_list))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="将多任务异步协程应用到爬虫中-解决方案"><a href="#将多任务异步协程应用到爬虫中-解决方案" class="headerlink" title="将多任务异步协程应用到爬虫中(解决方案)"></a>将多任务异步协程应用到爬虫中(解决方案)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载: "</span>, url)</span><br><span class="line">    <span class="comment"># 此session非requests.Session, 这个session支持异步的网络并发请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url=url) <span class="keyword">as</span> response:</span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()  <span class="comment"># text()页面源码 read()二进制数据 json()</span></span><br><span class="line">            print(<span class="string">"返回的数据"</span>, page_text)</span><br><span class="line">            </span><br><span class="line">    print(<span class="string">"下载完成: "</span>, url)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tiger"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tom"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/jay"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task_list = list()</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    c = request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task_list.append(task)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果传过来的是一个列表的话，需要再加上一层封装, 使用asyncio.wait()方法进行封装</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(task_list))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>

<h3 id="如何实现数据解析（任务的绑定回调机制）"><a href="#如何实现数据解析（任务的绑定回调机制）" class="headerlink" title="如何实现数据解析（任务的绑定回调机制）"></a>如何实现数据解析（任务的绑定回调机制）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">"在这里进行数据解析"</span>)</span><br><span class="line">    print(<span class="string">"I am call_back"</span>)</span><br><span class="line">    print(task.result())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 此session非requests.Session, 这个session支持异步的网络并发请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> session.get(url=url) <span class="keyword">as</span> response:</span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()  <span class="comment"># text()页面源码 read()二进制数据 json()</span></span><br><span class="line">            print(<span class="string">"返回的数据"</span>, page_text)</span><br><span class="line">            <span class="keyword">return</span> page_text</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tiger"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/tom"</span>,</span><br><span class="line">    <span class="string">"http://127.0.0.1:5000/jay"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">task_list = list()</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    c = request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task.add_done_callback(call_back)</span><br><span class="line">    task_list.append(task)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果传过来的是一个列表的话，需要再加上一层封装, 使用asyncio.wait()方法进行封装</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(task_list))</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"执行耗时:"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;youhongliang&#x2F;p&#x2F;12177380.html</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_36691991&#x2F;article&#x2F;details&#x2F;118722041</span><br><span class="line">https:&#x2F;&#x2F;www.sohu.com&#x2F;a&#x2F;393563980_120686110</span><br></pre></td></tr></table></figure>



<blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>async</tag>
        <tag>httpx</tag>
      </tags>
  </entry>
  <entry>
    <title>python的HTTP请求库-Urllib</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-HTTP%E8%AF%B7%E6%B1%82%E5%BA%93-Urllib.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="使用urrlib"><a href="#使用urrlib" class="headerlink" title="使用urrlib"></a>使用urrlib</h1><p><strong><a href="https://docs.python.Org/3/library/urllib.html" target="_blank" rel="external nofollow noopener noreferrer">Urllib官方文档</a></strong></p>
<p><em>是python的内置的HTTP请求库</em></p>
<p>python3不存在urllib2的说法，统一为urllib*</p>
<h2 id="包括如下四个模块："><a href="#包括如下四个模块：" class="headerlink" title="包括如下四个模块："></a>包括如下四个模块：</h2><ul>
<li>request</li>
</ul>
<p><em>它是最基本的HTTP请求模块，可以用来模拟发送请求。就像在浏览器里输入网址<br>然后回车一样，只需要给库方法传入U R L 以及额外的参数，就可以模拟实现这个过程了</em></p>
<ul>
<li>error</li>
</ul>
<p><em>异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操<br>作以保证程序不会意外终止</em></p>
<ul>
<li>parse</li>
</ul>
<p><em>一个工具模块，提供了许多URL处理方法，比如拆分、解析 、合并等</em></p>
<ul>
<li>robotparser</li>
</ul>
<p><em>主要是用来识别网站的robots.txt文件，然后判断哪些网站可以爬，哪些网站不<br>可以爬，它其实用得比较少。</em></p>
<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p><em>使 用 urllib的 request模块，我们可以方便地实现请求的发送并得到响应</em></p>
<h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h3><p><strong><a href="https://docs.python.Org/3/library/urllib.request.htmlo" target="_blank" rel="external nofollow noopener noreferrer">urlopen()官方文档</a></strong></p>
<p><strong>urllib .request</strong>模 块 提 供 了 最 基 本 的 构 造HTTP请 求 的 方 法 ，利用它可以模拟浏览器的一个请求发 起 过 程 ，同 时 它 还 带 有 处 理<strong>授 权 验 证 (authenticaton )</strong>、<strong>重 定 向 (redirection)、 浏 览 器 Cookies</strong>以及其他内容 。</p>
<h4 id="请求方法urllib-request"><a href="#请求方法urllib-request" class="headerlink" title="请求方法urllib.request"></a>请求方法urllib.request</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line">print(type(response)) <span class="comment"># &lt;class 'http.client.HTTPResponse'&gt;</span></span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<h5 id="响应response常用方法"><a href="#响应response常用方法" class="headerlink" title="响应response常用方法"></a>响应response常用方法</h5><p><em>response是一个 HTTPResposne 类 型 的 对 象 ，主要包含 read(), readinto(), getheader(name),getheaders(), fileno ()等 方 法 ，以及 msg、 version, status, reason, debuglevel, closed 等 属 性 。</em>  </p>
<ul>
<li>read()</li>
</ul>
<p><em>获取响应体</em></p>
<ul>
<li>status</li>
</ul>
<p><em>响应状态码</em></p>
<ul>
<li>getheaders()</li>
</ul>
<p><em>获取响应头</em></p>
<ul>
<li>getheaders(‘server’)</li>
</ul>
<p><em>输入参数server，返回服务器类型</em></p>
<h5 id="链接传参"><a href="#链接传参" class="headerlink" title="链接传参"></a>链接传参</h5><p>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)  </p>
<ul>
<li>data</li>
</ul>
<p><em>data参数是可选的。如果要添加该参数，并且<strong>如果它是字节流编码格式的内容，即 bytes类型，则需要通过bytes()方法转化</strong>。另外，如果传递了这个参数，则它的请求方式就不再是GET方式，而是 POST方式</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf-8'</span>) <span class="comment"># urlencode()将字典转换为字符串；bytes()将字符串转换为字节流</span></span><br><span class="line">response = urllib.request.urlopen(url, data=data)</span><br></pre></td></tr></table></figure>



<p><strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p>
<p><strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p>
<ul>
<li>timeout</li>
</ul>
<p><em>timeout参数用于设置超时时间，单位为秒，意思就是如果请求超出了设置的这个时间，还没有得到响应，就会抛出异常。如果不指定该参数，就会使用全局默认时间。</em>  </p>
<p><strong>超时报urllib.error.URLError</strong></p>
<p>使用try except:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(url, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">"Time Out"</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li>其它参数</li>
</ul>
<p><strong>context</strong></p>
<p><em>它必须是ssl.SSLContext类型，用来指定SSL设置</em></p>
<p><strong>cafile和capath</strong></p>
<p><em>这两个参数分别指定C A 证书和它的路径，这个在请求HTTPS链接时会<br>有用</em></p>
<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><em>urlopen只能用于简单的请求</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<p><em>可以发现，我们依然是用urlopen()方法来发送这个请求，只不过这次该方法的参数不再是URL,而是一个Request类型的对象。通过构造这个数据结构，一方面我们可以将请求独立成一个对象，另一方面可更加丰富和灵活地配置参数。</em></p>
<h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><p>  *<em>urllib.request.Request(url, data=None, headers={},origin_req_host=None, unverifiable=False, method=None)  *</em></p>
<ul>
<li>data</li>
</ul>
<p><em>data 如果要传，必须传bytes (字节流 )类型的 。如果它是字典，可以先用<br>urllib.parse 模块里的 urlencode()编码</em></p>
<ul>
<li>headers</li>
</ul>
<p><em>headers是一个字典，它就是请求头，我们可以在构造请求时通过headers参数直接构造，也可以通过调用请求实例的add_header()方法添加。</em>  </p>
<p><em>添加请求头最常用的用法就是通过修改User-Agent来伪装浏览器，默 认 的 User-Agent是Python-urllib,我们可以通过修改它来伪装浏览器。比如要伪装火狐浏览器，你可以把它设置为：</em><br><strong>Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11</strong>  </p>
<ul>
<li>origin_req_host</li>
</ul>
<p><em>origin_req_host指的是请求方的host名称或者IP 地址</em></p>
<ul>
<li>unverifiable</li>
</ul>
<p><em>unverifiable表示这个请求是否是无法验证的，默认是F a ls e ,意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个HTML文档中的图片，但是我们没有自动抓取图像的权限，这 时 u nverifiable的值就是True。</em>  </p>
<ul>
<li>method</li>
</ul>
<p><em>method是一个字符串，用来指示请求使用的方法，比如GET、 POST和 PUT等。</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">dict = &#123;<span class="string">"a"</span>: <span class="string">"b"</span>&#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(dict), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'.....'</span></span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url, data=data, headers=headers, method=<span class="string">'POST'</span>)</span><br><span class="line"><span class="comment"># request.add_header('user-agent')也可以</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure>



<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>[handler官方文档](<a href="https://docs.python" target="_blank" rel="external nofollow noopener noreferrer">https://docs.python</a>.<br>org/3/library/urllib.request.html#urllib.request.BaseHandlero  )</p>
<p><em>上面无法处理代理，cookies的情况</em></p>
<p><em>简而言之，我们可以把它理解为各种处理器， 有专门处理登录验证的，有处理 Cookies的，有处理代理设置的。利用它们，我们几乎可以做到HTTP请求中所有的事情。</em>  </p>
<p><em>首先，介绍一下urllib.request模块里的BaseHandler类 ，它是所有其他Handler的父类， 它提供了最基本的方法，例如 default_open(). protocol_request()等。</em></p>
<p><strong>有各种Handler子类继承这个BaseHandler类，举例如下 ：</strong></p>
<p>□ HTTPDefaultErrorHandler： 用于处理HTTP响应错误，错误都会抛岀HTTPError类型的异常。<br>□ HTTPRedirectHandler: 用于处理重定向。<br>□ HTTPCookieProcessor: 用于处理 Cookies<br>□ ProxyHandler： 用于设置代理，默认代理为空。<br>□ HTTPPasswordMgr： 用于管理密码，它维护了用户名和密码的表。<br>□ HTTPBasicAuthHandler： 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。  </p>
<h6 id="OpenerDirector"><a href="#OpenerDirector" class="headerlink" title="OpenerDirector"></a>OpenerDirector</h6><p><em>那么，为什么要引入Opener呢？因为需要实现更高级的功能。之前使用的Request和 urlopen()相当于类库为你封装好了极其常用的请求方法，利用它们可以完成基本的请求，但是现在不一样了，我们需要实现更高级的功能，所以需要深入一层进行配置，使用更底层的实例来完成操作，所以这里就用到了 0pener</em></p>
<p><strong>当打开网页弹出提示框要求输入密码，账号时：</strong></p>
<p><a href="https://imgchr.com/i/G0g65F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/G0g65F.png" alt="G0g65F.png" border="0"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line">url = <span class="string">'http://localhost:5000/'</span></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">p.add_password(<span class="literal">None</span>, url, username, password)</span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line">opener = build_opener(auth_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	result = opener.open(url)</span><br><span class="line">	html = result.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">	print(html)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">	print(e.reason)</span><br></pre></td></tr></table></figure>



<h6 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line"><span class="string">'http'</span>: <span class="string">'http://127.0.0.1:9743'</span>,</span><br><span class="line"><span class="string">'https'</span>: <span class="string">'https://127.0.0.1:9743'</span></span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	response = opener.open(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">	print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">	print(e.reason)</span><br></pre></td></tr></table></figure>



<h6 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p><em>Cookies的处理就需要相关的Handler 了</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">	print(item.name+<span class="string">"="</span>+item.value)</span><br></pre></td></tr></table></figure>



<h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><h3 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>





<h3 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h3><p><em>它是URLError的子类，专门用来处理HTTP请求错误</em></p>
<p> 有如下三个属性：</p>
<ul>
<li>code</li>
</ul>
<p><em>返 回 HTTP状态码，比如404表示网页不存在， 500表示服务器内部错误等。</em></p>
<ul>
<li>reason</li>
</ul>
<p><em>同父类一样，用于返回错误的原因。</em></p>
<ul>
<li>headers</li>
</ul>
<p><em>返回请求头。</em></p>
<h2 id="解析链接"><a href="#解析链接" class="headerlink" title="解析链接"></a>解析链接</h2><p><em>前面说过， urllib库里还提供了 parse模 块 ，它定义了处理URL的标准接口，例如实现URL各部分的抽取、合并以及链接转换。它支持如下协议的URL处 理 ： file, ftp、 gophers hdl、 http、 https、 imap、<br>mailto、 mms、 news、 nntp、 prosper。、 rsync、 rtsp、 rtspu、 sftp、 sip、 sips、 snews、 svn、 svn+ssh. telnet和 wais</em></p>
<h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse()"></a>urlparse()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"> result=urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line"> print(type(result), result)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.htmT, params='</span>use<span class="string">r', query='</span>id=<span class="number">5</span><span class="string">',</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">fragment='</span>comment<span class="string">')</span></span></span></span><br></pre></td></tr></table></figure>

<p><em>可以看到，返回结果是一个ParseResult类型的对象，它 包 含 6 个部分，分另U是 scheme, netloc.path、 param， squery， fragment</em></p>
<p><em>result可以用元组的概念，也可以用属性来获取各部分</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(result[<span class="number">0</span>], result.params)</span><br></pre></td></tr></table></figure>



<h4 id="urlparse-API"><a href="#urlparse-API" class="headerlink" title="urlparse API"></a>urlparse API</h4><p>urllib.parse.urlparse(urlstring, scheme=’ ‘,  allow_fragments=True)</p>
<ul>
<li>urlstring </li>
</ul>
<ul>
<li>scheme</li>
</ul>
<p><em>当传入的url没有协议时，可以指定scheme参数为http/https</em></p>
<p><em>当本身就有协议，有传参为不同的协议，则会输出本身的协议</em></p>
<ul>
<li>allow_fragments</li>
</ul>
<p><em>设置为false时，结果就不会有fragments这一部分</em></p>
<p><em>当参数为false且链接中没有params和query时，fragment便会解析为path内容的一部分</em></p>
<h3 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse()"></a>urlunparse()</h3><p><em>与urlparse()相反</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure>



<h3 id="urlsplit"><a href="#urlsplit" class="headerlink" title="urlsplit()"></a>urlsplit()</h3><p><em>这个方法和urlparse()方法非常相似，只不过它不再单独解析params这一部分，只返回5 个结果。上面例子中的params会合 并 到 path中。</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query*<span class="string">'id=5*,</span></span><br><span class="line"><span class="string">fragment』 comment'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="urlunsplit"><a href="#urlunsplit" class="headerlink" title="urlunsplit()"></a>urlunsplit()</h3><p><em>与 urlunparse()类似，它也是将链接各个部分组合成完整链接的方法，传入的参数也是一个可迭代对象，例如列表、元组等，唯一的区别是长度必须为5。</em>  </p>
<h3 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin()"></a>urljoin()</h3><p><em>有了 urlunparse()和 urlunsplit()方 法 ，我们可以完成链接的合并，不过前提必须要有特定长度的对象，链接的每一部分都要清晰分开。</em>  </p>
<p><em>生成链接还有另一个方法，那 就 是 urljoin()方法。我们可以提供一个base_url (基础链接)作为第一个参数，将新的链接作为第二个参数，该方法会分析base_url的 scheme, netloc和 path这 3个内容并对<strong>新链接缺失</strong>的部分进行补充</em> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(u:rljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html?question=2'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=abc'</span>, <span class="string">'https://cuiqingcai.com/index.php'</span>))</span><br><span class="line">print(urljoin('http://www.baidu.com，, '?category=2#comment'))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2J)</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">http://www.baidu.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html?question=2</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/index.php</span></span><br><span class="line"><span class="string">http://www. baidu. com?ca tego:ry=2#comme nt</span></span><br><span class="line"><span class="string">www.baidu.com?category=2#comment</span></span><br><span class="line"><span class="string">www.baidu.com?category=2</span></span><br></pre></td></tr></table></figure>

<p><em>可以发现， base_url提供了三项内容scheme, netloc和 path。 如果这3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url中的 params、 query和 fragment<br>是不起作用的。</em>  </p>
<h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode()"></a>urlencode()</h3><p><em>它 在 构 造 GET请求参数的时候非常有用</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">'name'</span>: <span class="string">'germey'</span>,</span><br><span class="line"><span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com?name=germey&amp;age=22</span><br></pre></td></tr></table></figure>



<h3 id="parse-qs"><a href="#parse-qs" class="headerlink" title="parse_qs()"></a>parse_qs()</h3><p><em>有了序列化，必然就有反序列化。如果我们有一串GET请求参数，利 用 parse_qs()方 法 ， 就可以将它转回字典，示例如下</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line">运行结果如下：</span><br><span class="line">&#123; <span class="string">'name'</span>: [<span class="string">'germey'</span>], <span class="string">'age'</span>: [<span class="string">'22'</span>]&#125;</span><br></pre></td></tr></table></figure>



<h3 id="parse-qsl"><a href="#parse-qsl" class="headerlink" title="parse_qsl()"></a>parse_qsl()</h3><p><em>另外，还 有 一 个 parse_qsl()方 法 ，它用于将参数转化为元组组成的列表</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line">&gt;&gt;&gt;[(<span class="string">'name'</span>, <span class="string">'germey'</span>), (<span class="string">'age'</span>, <span class="string">'22'</span>)]</span><br></pre></td></tr></table></figure>



<h3 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h3><p><em>该方法可以将内容转化为U RL编码的格式。 U R L 中带有中文参数时，有时可能会导致乱码的问题 ，此时用这个方法可以将中文字符转化为URL编码</em>  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'壁纸'</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)</span><br><span class="line">prin t(url)</span><br><span class="line">&gt;&gt;&gt; https://www. baidu. com/s?wd=%E 5%A3%81%E7%BA%B8</span><br></pre></td></tr></table></figure>



<h3 id="unquote"><a href="#unquote" class="headerlink" title="unquote()"></a>unquote()</h3><p><em>有了 quote。 方法，当然还有unquote()方法，它可以进行URL解 码</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">url = <span class="string">'https://www.baidu.com/s7wdn%E5%A3%81%E7%BA%B8'</span></span><br><span class="line">print(unquote(url))</span><br><span class="line">这是上面得到的URL编码后的结果，这里 利 用 unquote()方法还原，结果如下：</span><br><span class="line">https://www.baidu. com/s?wd=壁纸</span><br></pre></td></tr></table></figure>



<h2 id="分析Robots协议"><a href="#分析Robots协议" class="headerlink" title="分析Robots协议"></a>分析Robots协议</h2><h3 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h3><p><em>Robots协议也称作爬虫协议、机器人协议，它的全名叫作网络爬虫排除标准( Robots Exclusion Protocol) , 用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作robots.txt<br>的文本文件，一般放在网站的根目录下</em>  </p>
<p><em>robots.txt文件可以为空</em></p>
<p><em>一个爬虫爬取一个网站时，首先会看是否存在robots.txt,然后在按内容爬取；如果不存在则直接爬取</em></p>
<p><em>Allow 一 般 和 Disallow 一 起 使 用 ，一般不会单独使用</em></p>
<ul>
<li>禁止所有爬虫爬取任何目录</li>
</ul>
<p>User-agent: *<br>Disallow: /  </p>
<ul>
<li>允许所有爬虫爬取任意目录</li>
</ul>
<p>User-agent: *<br>Disallow:  </p>
<ul>
<li>禁止所有爬虫爬取某些目录</li>
</ul>
<p>User-agent: *<br>Disallow: /private/<br>Disallow: /tmp/  </p>
<ul>
<li>只允许某一个爬虫爬取爬取</li>
</ul>
<p>User-agent: Webcrawler<br>Disallow:<br>User-agent: *<br>Disallow: /  </p>
<h3 id="爬虫名称"><a href="#爬虫名称" class="headerlink" title="爬虫名称"></a>爬虫名称</h3><p><em>大家可能会疑惑，爬虫名是哪儿来的？为什么就叫这个名？其实它是有固定名字的了，比如百度的就叫作BaiduSpider</em></p>
  <img src="https://s1.ax1x.com/2020/04/05/GDPj7n.png" alt="GDPj7n.png" border="0">



<h3 id="robotparser"><a href="#robotparser" class="headerlink" title="robotparser"></a>robotparser</h3><p>*了 解 Robots协议之后， 我们就可以使用robotparser模块来解析robots.txt 了。该模块提供了一个类 R obotFileParser,它可以根据某网站的robots.txt文件来判断一个爬取爬虫是否有权限来爬取这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url)</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()</span><br><span class="line">rp.set_url(url)</span><br></pre></td></tr></table></figure>

<p>这个类常用方法：</p>
<ul>
<li><p>set_url</p>
<p><em>实例化这个类时传入了url，就不需要这个方法了</em></p>
</li>
<li><p>read()</p>
<p><em>读 取 robots.txt文件并进行分析。注意，这个方法执行一个读取和分析操作，如果不调用这个方法，接下来的 判 断 都 会 为F a ls e ,所以一定记得调用这个方法。这个方法不会返回任何内容，但是执行了读取操作。</em>  </p>
<p><strong>直接传入url和set_url()需要执行read(), 使用parse()不需要使用</strong></p>
</li>
<li><p>parse()</p>
</li>
</ul>
<p><em>用来解析robots.txt文件，传入的参数是robots.txt某些行的内容，它会按照robots.txt的语法规则来分析这些内容。</em>  </p>
<p><strong>传入的可以是数组，元组</strong></p>
<ul>
<li><p>can_fetch()</p>
<p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p>
</li>
<li><p>mtime()</p>
<p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p>
</li>
<li><p>modified()</p>
<p><em>它同样对长时间分析和抓取的搜索爬虫很有帮助，将当前时间设置为上次抓取和分析robots.txt的时间。</em>  </p>
</li>
</ul>
<p><em>使用can_fetch()</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser(<span class="string">'url/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'某个url'</span>))</span><br></pre></td></tr></table></figure>

<p><em>使用parse()</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.parse(urlopen(<span class="string">'url/robots.txt'</span>).read().decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, url))</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>问候不一定要郑重其事，但一定要真诚感人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章内引用自己的文章</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%BC%95%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>引用自己文章</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop理论课-第三章HDFS</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%89%E7%AB%A0HDFS.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第三章HDFS"><a href="#第三章HDFS" class="headerlink" title="第三章HDFS"></a>第三章HDFS</h2><h3 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h3><p><em>HDFS是Google公司的GFS分布式文件系统的开源实现</em></p>
<p><em>HDFS是Apache Hadoop项目的一个子项目</em></p>
<p><em>支持海量数据存储，成百上千的计算机组成存储集群</em></p>
<p><em>HDFS可以在低成本的硬件之上，具有高容错，高可靠性，高扩展，高吞吐率等特征</em></p>
<p><em>非常适合大规模数据集的应用</em></p>
<h4 id="HDFS的生态圈"><a href="#HDFS的生态圈" class="headerlink" title="HDFS的生态圈"></a>HDFS的生态圈</h4><img src="https://s1.ax1x.com/2020/04/02/GGoFIJ.png" alt="GGoFIJ.png" border="0">

<h4 id="HDFS优点"><a href="#HDFS优点" class="headerlink" title="HDFS优点"></a>HDFS优点</h4><h5 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h5><p><em>数据自动保存多个副本</em></p>
<p><em>副本丢失后，自动恢复</em></p>
<h5 id="适合批处理"><a href="#适合批处理" class="headerlink" title="适合批处理"></a>适合批处理</h5><p><em>移动计算而非移动数据</em></p>
<p><em>移动位置暴露给计算框架</em></p>
<h5 id="适合大数据处理"><a href="#适合大数据处理" class="headerlink" title="适合大数据处理"></a>适合大数据处理</h5><p><em>GB, TB, 甚至PB级数据</em></p>
<p><em>百万规模以上的文件数量</em></p>
<p><em>10k+节点</em></p>
<h5 id="支持流式文件访问"><a href="#支持流式文件访问" class="headerlink" title="支持流式文件访问"></a>支持流式文件访问</h5><p><em>一次写入，多次读取</em></p>
<p><em>保证数据一致性</em></p>
<h5 id="可构建在廉价机器上"><a href="#可构建在廉价机器上" class="headerlink" title="可构建在廉价机器上"></a>可构建在廉价机器上</h5><p><em>通过多副本提高可靠性</em></p>
<p><em>提供容错和恢复机制</em></p>
<h4 id="HDFS缺点"><a href="#HDFS缺点" class="headerlink" title="HDFS缺点"></a>HDFS缺点</h4><h5 id="不适合低延迟数据访问"><a href="#不适合低延迟数据访问" class="headerlink" title="不适合低延迟数据访问"></a>不适合低延迟数据访问</h5><p><em>比如毫秒级</em></p>
<p><em>低延迟与高吞吐率</em></p>
<h5 id="不适合小文件存取"><a href="#不适合小文件存取" class="headerlink" title="不适合小文件存取"></a>不适合小文件存取</h5><p><em>占用NameNode大量内存</em></p>
<p><em>寻找时间超过读取时间</em></p>
<h5 id="不适合并发写入，文件随机修改"><a href="#不适合并发写入，文件随机修改" class="headerlink" title="不适合并发写入，文件随机修改"></a>不适合并发写入，文件随机修改</h5><p><em>一个文件只能有一个写入者</em></p>
<p><em>仅支持append(附加)</em></p>
<h3 id="HDFS的组成与架构"><a href="#HDFS的组成与架构" class="headerlink" title="HDFS的组成与架构"></a>HDFS的组成与架构</h3><h4 id="HDFS基本组件"><a href="#HDFS基本组件" class="headerlink" title="HDFS基本组件"></a>HDFS基本组件</h4><img src="https://s1.ax1x.com/2020/04/02/GGbSfJ.png" alt="GGbSfJ.png" border="0">

<h5 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h5><img src="https://s1.ax1x.com/2020/04/02/GGbXjI.png" alt="GGbXjI.png" border="0">

<p><em>edits是日志文件，包含一条条edit log; fsimage是最终结果</em></p>
<img src="https://s1.ax1x.com/2020/04/02/GJec5D.png" alt="GJec5D.png" border="0">

<h5 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h5><h6 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h6><img src="https://s1.ax1x.com/2020/04/02/GJmfFU.png" alt="GJmfFU.png" border="0">

<h6 id="分块原因"><a href="#分块原因" class="headerlink" title="分块原因"></a>分块原因</h6><ul>
<li>一个巨大文件一块磁盘空间不够</li>
<li>利于备份</li>
<li>提高吞吐量(并发读写，计算，利用不同节点存储，减少一个节点的负载)</li>
</ul>
<h6 id="DataNode的主要职责"><a href="#DataNode的主要职责" class="headerlink" title="DataNode的主要职责"></a>DataNode的主要职责</h6><p><a href="https://imgchr.com/i/GJuBKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJuBKs.md.png" alt="GJuBKs.png" border="0"></a></p>
<h6 id="机架感知与副本冗余存储策略"><a href="#机架感知与副本冗余存储策略" class="headerlink" title="机架感知与副本冗余存储策略"></a>机架感知与副本冗余存储策略</h6><img src="https://s1.ax1x.com/2020/04/02/GJ3Ebd.md.png" alt="GJ3Ebd.md.png" border="0">

<p><a href="https://imgchr.com/i/GJ3eUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ3eUI.md.png" alt="GJ3eUI.md.png" border="0"></a></p>
<h5 id="Secondary-NameNode"><a href="#Secondary-NameNode" class="headerlink" title="Secondary NameNode"></a>Secondary NameNode</h5><h6 id="Secondary-NameNode的职责"><a href="#Secondary-NameNode的职责" class="headerlink" title="Secondary NameNode的职责"></a>Secondary NameNode的职责</h6><p><a href="https://imgchr.com/i/GJ84f0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ84f0.md.png" alt="GJ84f0.png" border="0"></a></p>
<p><em>secondary namenode和namenode占用同样大的内存大小；在不同节点上</em></p>
<h6 id="Secondary-NameNode工作流程"><a href="#Secondary-NameNode工作流程" class="headerlink" title="Secondary NameNode工作流程"></a>Secondary NameNode工作流程</h6><p><a href="https://imgchr.com/i/GJGbgf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJGbgf.md.png" alt="GJGbgf.png" border="0"></a></p>
<h6 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h6><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200402153039014.png" alt="image-20200402153039014"></p>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p><a href="https://imgchr.com/i/GJt0Hg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJt0Hg.md.png" alt="GJt0Hg.png" border="0"></a></p>
<p><em>答案：edits。因为现在的fsimage保存的是最新也就是最近检查节点产生的fsimage；而现在的edits文件是保存的最近检查节点产生fsimage以来，Hdfs的操作信息</em></p>
<h4 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h4><img src="https://s1.ax1x.com/2020/04/02/GGbBn0.png" alt="GGbBn0.png" border="0">





<h3 id="操作HDFS"><a href="#操作HDFS" class="headerlink" title="操作HDFS"></a>操作HDFS</h3><h3 id="HDFS-web访问"><a href="#HDFS-web访问" class="headerlink" title="HDFS web访问"></a>HDFS web访问</h3><ul>
<li><p><strong>IP:50070</strong>访问NameNode</p>
</li>
<li><p><strong>IP:50090</strong>访问SecondaryNameNode</p>
</li>
</ul>
<h3 id="HDFS-shell访问"><a href="#HDFS-shell访问" class="headerlink" title="HDFS shell访问"></a>HDFS shell访问</h3><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a>

<h4 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><p><a href="https://imgchr.com/i/GJWkfx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJWkfx.md.png" alt="GJWkfx.png" border="0"></a></p>
<h4 id="Hadoop中三种shell命令"><a href="#Hadoop中三种shell命令" class="headerlink" title="Hadoop中三种shell命令"></a>Hadoop中三种shell命令</h4><p><a href="https://imgchr.com/i/GJ4lN9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4lN9.md.png" alt="GJ4lN9.png" border="0"></a></p>
<h3 id="JAVA-API端口访问"><a href="#JAVA-API端口访问" class="headerlink" title="JAVA API端口访问"></a>JAVA API端口访问</h3><p><a href="https://imgchr.com/i/GJ4o3q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4o3q.md.png" alt="GJ4o3q.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GJIMWR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJIMWR.md.png" alt="GJIMWR.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GJ770f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ770f.png" alt="GJ770f.png" border="0"></a></p>
<h3 id="HDFS工作原理"><a href="#HDFS工作原理" class="headerlink" title="HDFS工作原理"></a>HDFS工作原理</h3><h4 id="HDFS写文件流程"><a href="#HDFS写文件流程" class="headerlink" title="HDFS写文件流程"></a>HDFS写文件流程</h4><p><a href="https://imgchr.com/i/GdIN1e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIN1e.md.png" alt="GdIN1e.md.png" border="0"></a><br><a href="https://imgchr.com/i/GdItpD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdItpD.md.png" alt="GdItpD.md.png" border="0"></a></p>
<h4 id="HDFS读文件流程"><a href="#HDFS读文件流程" class="headerlink" title="HDFS读文件流程"></a>HDFS读文件流程</h4><p><a href="https://imgchr.com/i/GdoSN6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoSN6.md.png" alt="GdoSN6.md.png" border="0"></a></p>
<h4 id="HDFS容错"><a href="#HDFS容错" class="headerlink" title="HDFS容错"></a>HDFS容错</h4><p><a href="https://imgchr.com/i/GdIzAx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIzAx.md.png" alt="GdIzAx.md.png" border="0"></a></p>
<h5 id="NameNode出错"><a href="#NameNode出错" class="headerlink" title="NameNode出错"></a>NameNode出错</h5><p><a href="https://imgchr.com/i/Gdojxg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gdojxg.md.png" alt="Gdojxg.md.png" border="0"></a></p>
<h5 id="DataNode出错"><a href="#DataNode出错" class="headerlink" title="DataNode出错"></a>DataNode出错</h5><p><a href="https://imgchr.com/i/GdoxMQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoxMQ.md.png" alt="GdoxMQ.md.png" border="0"></a></p>
<h5 id="数据出错"><a href="#数据出错" class="headerlink" title="数据出错"></a>数据出错</h5><p><a href="https://imgchr.com/i/Gd7rA1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gd7rA1.md.png" alt="Gd7rA1.png" border="0"></a></p>
<h3 id="HDFS的高级功能"><a href="#HDFS的高级功能" class="headerlink" title="HDFS的高级功能"></a>HDFS的高级功能</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p><a href="https://imgchr.com/i/GwS9eK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwS9eK.md.png" alt="GwS9eK.png" border="0"></a></p>
<h4 id="回收站"><a href="#回收站" class="headerlink" title="回收站"></a>回收站</h4><p><a href="https://imgchr.com/i/GwSVSA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSVSA.md.png" alt="GwSVSA.png" border="0"></a></p>
<h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><p><a href="https://imgchr.com/i/GwStO0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwStO0.md.png" alt="GwStO0.png" border="0"></a></p>
<h4 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h4><p><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSsp9.png" alt="GwSsp9.png" border="0"></a></a></p>
<h4 id="HA-High-Availability高可用"><a href="#HA-High-Availability高可用" class="headerlink" title="HA(High Availability高可用)"></a>HA(High Availability高可用)</h4><p><a href="https://imgchr.com/i/Gwpn39" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gwpn39.md.png" alt="Gwpn39.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GwpBHf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwpBHf.md.png" alt="GwpBHf.md.png" border="0"></a><br><a href="https://imgchr.com/i/GwprE8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwprE8.md.png" alt="GwprE8.md.png" border="0"></a></p>
<h4 id="联邦Federation"><a href="#联邦Federation" class="headerlink" title="联邦Federation"></a>联邦Federation</h4><h5 id="HDFS使用过程存在的问题"><a href="#HDFS使用过程存在的问题" class="headerlink" title="HDFS使用过程存在的问题"></a>HDFS使用过程存在的问题</h5><p><a href="https://imgchr.com/i/Gw9nIS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9nIS.png" alt="Gw9nIS.png" border="0"></a></p>
<h5 id="什么是Federation"><a href="#什么是Federation" class="headerlink" title="什么是Federation"></a>什么是Federation</h5><p><a href="https://imgchr.com/i/Gw9ma8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9ma8.md.png" alt="Gw9ma8.md.png" border="0"></a></p>
<h5 id="联邦的优点"><a href="#联邦的优点" class="headerlink" title="联邦的优点"></a>联邦的优点</h5><p><a href="https://imgchr.com/i/Gw9fRH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9fRH.md.png" alt="Gw9fRH.png" border="0"></a></p>
<h4 id="HA与Federation的区别"><a href="#HA与Federation的区别" class="headerlink" title="HA与Federation的区别"></a>HA与Federation的区别</h4><p><a href="https://imgchr.com/i/GwC9e0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwC9e0.md.png" alt="GwC9e0.png" border="0"></a></p>
<hr>
<blockquote>
<p>直道相思了无益，未妨惆怅是清狂。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据定义</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><h4 id="SQL的产生与发展"><a href="#SQL的产生与发展" class="headerlink" title="SQL的产生与发展"></a>SQL的产生与发展</h4><p><em>SQ L 是 在 1974年 由 Boyce和 Chamberlin提出的，最初叫 S e q u e l</em></p>
<p><em>1987 年，国际标准化组织 (International Organization for Standardization, I S O ) 也通过了这一标准.</em></p>
<p><em>同时，许多软件厂商对SQ L基本命令集还进行了不同程度的扩充和修改，又可以支持标准以外的一些功能特性</em></p>
<p><em>目前，没有一个数据库系统能够支持SQ L标准的所有概念和特性</em></p>
<h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><p><em>SQ L集数据查询(data query) ， 数据操纵 (data manipulation）数 据 定 义 (data definition)和 数 据 控 制 (data control)功能于一体</em></p>
<p><strong>主要特点</strong></p>
<ul>
<li><p>综合统一</p>
<p><em>SQL集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动，包括以下一系列操作要求：</em></p>
<p>・定义和修改、删除关系模式，定义和删除视图，插入数据，建立数据库。<br>・对数据库中的数据进行查询和更新。<br> • 数据库重构和维护。<br> • 数据库安全性、完整性控制，以及事务控制。<br>・嵌入式 SQL和 动 态 SQL定义。  </p>
</li>
<li><p>高度非过程化</p>
<p><em>非关系数据模型的数据操纵语言是“面向过程”的语言，用 “过程化”语言完成某项请求必须指定存取路径</em></p>
<p><em>而 用 SQL进行数据操作时，只要提 出 “做什么”，而无须指明’’怎么做”，因此无须了解存取路径。存取路径的选择以及SQ L 的操作过程由系统自动完成</em></p>
</li>
<li><p>面向集合的操作方式</p>
<p><em>非关系数据模型采用的是面向记录的操作方式，操作对象是一条记录(</em>例如查询所有平均成绩在8 0 分以上的学生姓名，用户必须一条一条地把满足条件的学生记录找出来 )</p>
<p><em>而 SQL采用集合操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合</em></p>
</li>
<li><p>以同一种语法结构提供多种使用方式</p>
<p><em>SQL既是独立的语言，又是嵌入式语言(可以使用单独的SQL,也可以使用高级语言，例如C,C++,JAVA等)</em></p>
</li>
<li><p>语言简洁，易学易用</p>
<p>*<em>完成核心功能只用了 9 个动词  *</em></p>
</li>
</ul>
<p><a href="https://imgchr.com/i/G1eqVe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1eqVe.png" alt="G1eqVe.png" border="0"></a></p>
<h4 id="SQL基本概念"><a href="#SQL基本概念" class="headerlink" title="SQL基本概念"></a>SQL基本概念</h4><p><em>支 持 SQ L 的关系数据库管理系统同样支持关系数据库三级模式结构</em></p>
<img src="https://s1.ax1x.com/2020/04/01/G1Qx2j.png" alt="G1Qx2j.png" border="0">

<p><strong>外模式包括若干视图和部分基本表</strong></p>
<p><strong>模式包括若干基本表</strong></p>
<p><strong>内模式包括若干存储文件</strong></p>
<p><em>基本表是本身独立存在的表，一个或多个基本表对应一个存储文件，一个表可以带若干索引，索引也存放在存储文件中</em></p>
<p><em>存储文件的逻辑结构组成了关系数据库的内模式</em></p>
<p><em>视图是从一个或几个基本表导出的表。它本身不独立存储在数据库中，即数据库中只存放视图的定义而不存放视图对应的数据。这些数据仍存放在导出视图的基本表中，因此视图是一个虚表。视图在概念上与基本表等同，用户可以在视图上再定义视图</em></p>
<hr>
<blockquote>
<p>不问花期，不负春光，向阳而生，自由盛放。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据查询</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="选择表中若干列"><a href="#选择表中若干列" class="headerlink" title="选择表中若干列"></a>选择表中若干列</h4><h5 id="指定列"><a href="#指定列" class="headerlink" title="指定列"></a>指定列</h5> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>



<h5 id="全部列"><a href="#全部列" class="headerlink" title="全部列"></a>全部列</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>



<h5 id="查询计算过得值"><a href="#查询计算过得值" class="headerlink" title="查询计算过得值"></a>查询计算过得值</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>子句的＜目标列表达式〉不仅可以是表中的属性列，也可以是表达式</span><br><span class="line"><span class="keyword">SELECT</span> Sname, <span class="number">2014</span>-Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<p><em>目标表达水不仅可以是算数表达式，也可以是字符串常量，函数等</em></p>
<h5 id="修改查询列标题"><a href="#修改查询列标题" class="headerlink" title="修改查询列标题"></a>修改查询列标题</h5><p><em>用户可以通过指定别名来改变查询结果的列标题，这对于含算术表达式、常量、函数名的目标列表达式尤为有用</em> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname [<span class="keyword">AS</span>] newName</span><br></pre></td></tr></table></figure>



<h4 id="选择表中的若干元组"><a href="#选择表中的若干元组" class="headerlink" title="选择表中的若干元组"></a>选择表中的若干元组</h4><p><em>系统查询的思路是，将关系中的所有元组一一进行条件匹配，然后在输出。当数据量大时，这种思路就不太合适了。可以创建索引解决</em></p>
<h5 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>



<h5 id="查询满足条件的元组"><a href="#查询满足条件的元组" class="headerlink" title="查询满足条件的元组"></a>查询满足条件的元组</h5><p><em>通过<strong>WHERE</strong>来实现</em></p>
<p>查询条件：</p>
<img src="https://s1.ax1x.com/2020/04/01/G3sx3j.png" alt="G3sx3j.png" border="0">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">'CS'</span>,<span class="string">'MA'</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure>

<p><em>注意：’IS’ 有时不能用‘=’代替，如’IS NULL’</em></p>
<p><strong>字符匹配时，可以有通配符，如下：</strong></p>
<ul>
<li><p>_</p>
<p><em>代表任意单个字符</em></p>
</li>
<li><p>%</p>
<p><em>任意长度的字符，零个也包括</em></p>
</li>
</ul>
<p><em>当数据中本身就有通配符时，就需要用到ESCAPE ‘&lt;换码字符&gt;’</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,Credit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">'DB\_Design'</span> ESCAPE<span class="string">'\'</span>;</span><br></pre></td></tr></table></figure>



<h5 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h5><p><em>默认升序ASC</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'3'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<p><em>可以既有升序又有降序：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A, B </span><br><span class="line"><span class="keyword">FROM</span> DD</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A, B <span class="keyword">DESC</span>; //A可能是具有重复值，再重复值的情况下对B降序</span><br></pre></td></tr></table></figure>



<h5 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h5><h6 id="TOP-N"><a href="#TOP-N" class="headerlink" title="TOP N"></a>TOP N</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP N * </span><br><span class="line"><span class="keyword">FROM</span> SC</span><br></pre></td></tr></table></figure>

<h6 id="TOP-N-PERCENT"><a href="#TOP-N-PERCENT" class="headerlink" title="TOP N PERCENT"></a>TOP N PERCENT</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT TOP N PERCENT *</span><br><span class="line">FROM SC</span><br></pre></td></tr></table></figure>



<h5 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h5><p><em>聚集函数中除COUNT外，其它函数在计算过程中均省略NULL；WHERE子句中不能使用聚集函数</em></p>
<h6 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h6><p>COUNT(*)                                                  统计元组个数<br>COUNT（ [DISTINCT|ALL] ＜列名&gt;）  统计一列中值的个数</p>
<h6 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h6><p>SUM（ [DISTINCT|ALL] ＜列名&gt;）       计算一列值的总和（此列必须是数值型）<br>AVG（ [DISTINCT|ALL] ＜列名&gt;）        计算一列值的平均值（此列必须是数值型）</p>
<h6 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h6><p>MAX（ [DISTINCT|ALL] ＜列名&gt;）       求一列值中的最大值</p>
<h6 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h6><p>MIN（ [DISTINCTIALL] ＜列名&gt;）        求一列值中的最小值  </p>
<h5 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h5><p><em>GROUP B Y 子句将查询结果按<strong>某一列或多列</strong>的值分组，值相等的为一组。</em></p>
<p><em>分组后聚集函数将<strong>作用于每一个组</strong>，即每一组都有一个函数值。</em>  </p>
<p><em>如果分组后还要求按一定的条件对这些组进行筛选，最终只输出满足指定条件的组，则可以使用<strong>HAVING</strong>短语指定筛选条件。</em>  </p>
<p><strong>WHERE子 句 与 HAVING短语</strong>的<em>区别在于作用对象不同。 WHERE子句作用于基本表或视图，从中选择满足条件的元组。  HAVING短语作用于组，从中选择满足条件的组</em></p>
<p><em>WHERE子句中是<strong>不能用聚集函数</strong>作为条件表达式的</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询课程号及相应选课人数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> cno, <span class="keyword">COUNT</span>(sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询选取三门课程以上的学生学号*/</span></span><br><span class="line"><span class="keyword">SELECT</span> sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(sno) &gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询平均成绩大于等于90 分的学生学号和平均成绩。*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, <span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(Grade) &gt;= <span class="number">90</span></span><br></pre></td></tr></table></figure>

<p><em>不一定是group by 单个属性</em></p>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="等值与非等值连接"><a href="#等值与非等值连接" class="headerlink" title="等值与非等值连接"></a>等值与非等值连接</h4><p><em>连接查询的WHERE子句中用来连接两个表的条件称为<strong>连接条件</strong>或<strong>连接谓词</strong>，其一般格式为 :</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[＜表名1＞.] &lt;列名l&gt; &lt;比较运算符&gt; [＜表名2＞.] ＜列名2＞</span><br><span class="line"><span class="comment">/*其中比较运算符主要有=、＞、＜、＞=、＜=、！= (或o ) 等*/</span></span><br></pre></td></tr></table></figure>

<p><em>当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。</em></p>
<p><strong>这就是嵌套循环连接算法</strong>： <em>一个表的全部元组的某个属性一一去和另一个元组的某个属性进行比较</em></p>
<h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.*, SC.*</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure>

<p><em>结果中两个Sno都存在</em></p>
<p><em>一 条 SQ L语句可以同时<strong>完成选择</strong>和<strong>连接查询</strong>，这 时 WHERE子句是由<strong>连接谓词和选择谓词组成的复合条件</strong>。</em>  </p>
<h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h5><p><em>若在等值连接中把目标列中重复的属性列去掉则为自然连接。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure>

<p><em>结果只保留一个Sno</em></p>
<h5 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h5><p><em>Course表取两个别名，一个是 F IR S T ,另一个是SECOND。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>,Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno=SECOND.Cno;</span><br></pre></td></tr></table></figure>



<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><em>有 时 想 以 Student表为主体列出每个学生的基本情况及其选课情况。若某个学生没有选课，仍 把 Student的悬浮元组保存在结果关系中，而 在 S C 表的属性上填空值NULL ,这时就需要使用外连接</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (Student.Sno=SC.Sno);</span><br><span class="line"><span class="comment">/*也可以使用USING來去掉结果中的重复值： FROM Student LEFT OUTER JOIN SC USING (Sno);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*RIGHT OUTER JOIN ON 右连接</span></span><br><span class="line"><span class="comment">FULL OUTER JOIN ON 全连接</span></span><br><span class="line"><span class="comment">LEFT OUTER JOIN ON 左连接*/</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/GzUTIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/14/GzUTIA.md.png" alt="GzUTIA.png" border="0"></a></p>
<p><strong>左外连接</strong>列<em>出左边关系(如本例Student)中所有的元组，<strong>右外连接</strong>列出右边关系中所有的元组。</em>  </p>
<h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno=SC.Sno <span class="keyword">AND</span> SC.Cno=Course.Cno;</span><br></pre></td></tr></table></figure>

<h5 id="XXX-INNER-JOIN-XXX-ON-…"><a href="#XXX-INNER-JOIN-XXX-ON-…" class="headerlink" title="XXX INNER  JOIN XXX ON(…..)"></a>XXX INNER  JOIN XXX ON(…..)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.Sno=SC.Sno)</span><br></pre></td></tr></table></figure>

<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每门课程的被选修情况和课程的名字。</span></span><br><span class="line"><span class="keyword">SELECT</span> SC.*, Cname  </span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Courses <span class="keyword">ON</span> SC.Cno=Courses.Cno</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询选修了课程的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(Students.Sname)  </span><br><span class="line"><span class="keyword">FROM</span> Students <span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (Students.Sno=Sc.Sno)</span><br></pre></td></tr></table></figure>



<h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p><em>在 SQL语言中，一 个 SELECT-FROM-WHERE语句称为一个<strong>查询块</strong>。将一个查询块嵌套在另一个查询块的<strong>WHERE子句或 HAVING短语</strong>的条件中的查询称为嵌套查询(nested query )</em>   </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="comment">/*外层查询或父査询*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sno <span class="comment">/*内层查询或子査询*/</span></span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Cno= <span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>

<p><em>SQ L语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。需要特别指出的是，<strong>子查询的 SELECT语句中不能使用ORDER B Y 子句</strong>， ORDER B Y 子句只能对最终查询结果排序。</em> </p>
<p><strong>大多数嵌套查询可以用连接查询代替</strong></p>
<h4 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h4><p><em>在嵌套查询中，子查询的结果往往是一个集合，所 以 谓 词 IN 是嵌套查询中最经常使用的谓词。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept <span class="comment">/*例 3.55 的解法一*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sdept</span><br><span class="line">	<span class="keyword">FROM</span> Student</span><br><span class="line">	<span class="keyword">WHERE</span> Sname=<span class="string">'刘晨，)；</span></span><br></pre></td></tr></table></figure>

<p><em>本例中，子查询的查询条件不依赖于父查询，称为<strong>不相关子查询</strong>。如果子查询的查询条件依赖于父查询，这类子查询称为<strong>相关子查询</strong>(correlated subquery) , 整个查询语句称为<strong>相关嵌套查询</strong>(correlated nested query) 语句</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sl.Sno,Sl.Sname,Sl.Sdept <span class="comment">/*例 3.55 的解法二 */</span></span><br><span class="line"><span class="keyword">FROM</span> Student SI,Student S2</span><br><span class="line"><span class="keyword">WHERE</span> Sl.Sdept=S2.Sdept <span class="keyword">AND</span> S2.Sname=<span class="string">'刘晨'</span>；</span><br></pre></td></tr></table></figure>

<p><em>可见，实现同一个查询请求可以有多种方法，当然不同的方法其执行效率可能会有差别 ，甚至会差别很大。这就是数据库编程人员应该掌握的数据库性能调优技术</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student ③ 最后在Student关系中</span><br><span class="line">				取tLl Sno 和 Sname</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sno		② 然 后 在 SC 关系中找出</span><br><span class="line">	 <span class="keyword">FROM</span> SC				选修了 <span class="number">3</span> 号课程的学生学号</span><br><span class="line">	 <span class="keyword">WHERE</span> Cno <span class="keyword">IN</span>				</span><br><span class="line">		(<span class="keyword">SELECT</span> Cno				① 首 先 在 Course关系中</span><br><span class="line">		 <span class="keyword">FROM</span> Course				找 出 “信息系统”的课</span><br><span class="line">		 <span class="keyword">WHERE</span> Cname=’信息系统<span class="string">'		 程号，结果为3 号</span></span><br><span class="line"><span class="string">		)；</span></span><br><span class="line"><span class="string">/*等价于*/</span></span><br><span class="line"><span class="string">SELECT Student.Sno,Sname</span></span><br><span class="line"><span class="string">FROM Student,SC,Course</span></span><br><span class="line"><span class="string">WHERE Student.Sno=SC.Sno AND</span></span><br><span class="line"><span class="string">SC.Cno=Course.Cno AND</span></span><br><span class="line"><span class="string">Course.Cname='</span>信息系统<span class="string">'；</span></span><br></pre></td></tr></table></figure>

<p><em>有些嵌套查询可以用连接运算替代，有些是不能替代的</em></p>
<img src="https://s1.ax1x.com/2020/04/22/JtBRK0.png" alt="JtBRK0.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/JtBgvq.png" alt="JtBgvq.png" border="0">



<img src="https://s1.ax1x.com/2020/04/22/Jt0I1I.png" alt="Jt0I1I.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/Jt059A.png" alt="Jt059A.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/Jt0hhd.png" alt="Jt0hhd.png" border="0">

<h4 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h4><p><em>可以用&gt;,&lt;,&gt;=,&lt;=,!=或&lt;&gt;等比较运算符</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno ,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade ＞=(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(Grade) <span class="comment">/*某学生的平均成绩*/</span></span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno=x.Sno);</span><br><span class="line"><span class="comment">/*执行过程是，外层先取一个元组，传递给内层，内层得到平均值，在外层执行*/</span></span><br></pre></td></tr></table></figure>

<p><em>该值是与父查询相关的，因此这类查询称为相关子查询</em></p>
<p><em>求解相关子查询不能像求解不相关子查询那样一次将子查询求解出来，然后求解父查询</em></p>
  <img src="https://s1.ax1x.com/2020/04/22/JtD4yt.png" alt="JtD4yt.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/JtDhQI.png" alt="JtDhQI.png" border="0">

<h4 id="带有ANY-SOME-或ALL谓词的子查询"><a href="#带有ANY-SOME-或ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或ALL谓词的子查询"></a>带有ANY(SOME)或ALL谓词的子查询</h4><p><a href="https://imgchr.com/i/Jml6iT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jml6iT.png" alt="Jml6iT.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Sage  <span class="comment">/*这里也可以用MAX()代替*/</span></span><br><span class="line">	<span class="keyword">FROM</span> Student</span><br><span class="line">	<span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept &lt;&gt; <span class="string">'CS'</span> ; <span class="comment">/*注意这是父査询块中的条件*/</span></span><br></pre></td></tr></table></figure>

<p><em>用ANY后形成集合</em></p>
<p><em>事实上，用聚集函数实现子查询通常比直接用ANY或ALL查询效率要高。ANY,ALL与聚集函数的对应关系如表：</em></p>
<p><a href="https://imgchr.com/i/Jm32r9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jm32r9.md.png" alt="Jm32r9.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/04/21/J8twwt.png" alt="J8twwt.png" border="0">



<img src="https://s1.ax1x.com/2020/04/21/J8YXi8.png" alt="J8YXi8.png" border="0">

<h4 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h4><p><em>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真假值TRUE,FALSE</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">	（<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>）;</span><br></pre></td></tr></table></figure>

<p><em>这也是相关子查询。先取一个外层的元组</em></p>
<p><em>由 EXISTS引出的子查询，其目标列表达式通常都用**, 因为带 EXISTS的子查询只返回真值或假值，给出列名无实际意义</em></p>
<img src="https://s1.ax1x.com/2020/04/22/JtskE8.png" alt="JtskE8.png" border="0">



<p><em>与 EXISTS谓词相对应的是NOT EXISTS谓词。使用存在量词<strong>NOT EXISTS</strong>后，若内层查询结果为空，则外层的WHERE子句返回真值，否则返回假值</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>

<p><em>由于带EXISTS量词的相关子査询只关心内层查询是否有返回值，并不需要查具体值,因此其效率并不一定低于不相关子查询，有时是高效的方法</em>  </p>
<h4 id="用EXISTS-NOT-EXISTS实现全称量词"><a href="#用EXISTS-NOT-EXISTS实现全称量词" class="headerlink" title="用EXISTS/NOT EXISTS实现全称量词"></a>用EXISTS/NOT EXISTS实现全称量词</h4><p><a href="https://imgchr.com/i/JD4C0P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD4C0P.png" alt="JD4C0P.png" border="0"></a><br><a href="https://imgchr.com/i/JD49mt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD49mt.png" alt="JD49mt.png" border="0"></a></p>
<h4 id="用EXISTS-NOT-EXISTS实现逻辑蕴涵"><a href="#用EXISTS-NOT-EXISTS实现逻辑蕴涵" class="headerlink" title="用EXISTS/NOT EXISTS实现逻辑蕴涵"></a>用EXISTS/NOT EXISTS实现逻辑蕴涵</h4><p><a href="https://imgchr.com/i/JzutVH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzutVH.md.png" alt="JzutVH.md.png" border="0"></a><br><a href="https://imgchr.com/i/Jzu8KO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/Jzu8KO.md.png" alt="Jzu8KO.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuJqe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuJqe.md.png" alt="JzuJqe.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuGrD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuGrD.md.png" alt="JzuGrD.md.png" border="0"></a></p>
<h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h3><p><em>UNION , INTERSECT, EXCEPT</em></p>
<p><em>列数相等，对应属性相同</em></p>
<p><em>属性名无关，属性名取第一个结果属性名</em></p>
<p><em>自动除去重复; 不去重UNION ALL</em></p>
<p><em>最后使用ORDER BY(写在最后)；可以用数字代替对应第几个属性，ORDER BY 3</em></p>
<h4 id="UNION并"><a href="#UNION并" class="headerlink" title="UNION并"></a>UNION并</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'2'</span></span><br></pre></td></tr></table></figure>



<h4 id="INTERSECT交"><a href="#INTERSECT交" class="headerlink" title="INTERSECT交"></a>INTERSECT交</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;=<span class="number">19</span></span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/04/28/J5Po2d.png" alt="J5Po2d.png" border="0">

<h4 id="EXCEPT差"><a href="#EXCEPT差" class="headerlink" title="EXCEPT差"></a>EXCEPT差</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage &lt;=<span class="number">19</span>;</span><br></pre></td></tr></table></figure>



<h3 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h3><p><em>子查询不仅可以出现在WHERE子句中，还可以出现在FROM 子句中，这时子查询生成的<strong>临时派生表(derived table )</strong>成为主查询的查询对象</em></p>
<img src="https://s1.ax1x.com/2020/04/30/JbxGT0.png" alt="JbxGT0.png" border="0">

<p><em>有top的子查询可以把order by放在子查询</em></p>
<p><a href="https://imgchr.com/i/JqSNM4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/30/JqSNM4.png" alt="JqSNM4.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC, (<span class="keyword">SELECT</span> Sno, <span class="keyword">Avg</span>(Grade) <span class="keyword">FROM</span> SC <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno)</span><br><span class="line"><span class="keyword">AS</span> Avg_sc(avg_sno,avg_grade) // 生成表Avg_sc,具有两个属性</span><br><span class="line"><span class="keyword">WHERE</span> SC.Sno = Avg_sc.avg_sno <span class="keyword">and</span> SC.Grade ＞= Avg_sc.avg grade</span><br></pre></td></tr></table></figure>

<p><em>如果子查询中没有聚集函数，派生表可以不指定属性列</em></p>
<p><em>通 过 FROM 子句生成派生表时， A S 关键字可以省略，但必须为派生<br>关系指定一个别名</em></p>
<hr>
<blockquote>
<p>从此无心爱良夜，任他明月下西楼。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据查询</tag>
        <tag>SELECT</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据定义</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h3 id="数据定义-CREAT-DROP-ALTER"><a href="#数据定义-CREAT-DROP-ALTER" class="headerlink" title="数据定义(CREAT, DROP, ALTER)"></a>数据定义(CREAT, DROP, ALTER)</h3><p><em>关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式、表 、视图和索引等。因此 SQ L 的数据定义功能包括模式定义、表定义、视图和索引的定义。</em></p>
<img src="https://s1.ax1x.com/2020/04/01/G1lRLq.png" alt="G1lRLq.png" border="0">

<p><strong>不支持模式修改，视图修改；只有重新删除创建</strong></p>
<p><strong>标准的SQL也不支持索引创建，商用关系数据库提供索引机制和相关语句</strong></p>
<p><em>一个关系数据库管理系统的 实 例 （instance）中可以建立多个数据库，一个数据库中可以建立多个模式， 一个模式下通常包括多个表、视图和索引等数据库对象</em></p>
<h4 id="模式定义与删除"><a href="#模式定义与删除" class="headerlink" title="模式定义与删除"></a>模式定义与删除</h4><h5 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h5><p><em>CREATE SCHEMA＜模式名＞AUTHORIZATION ＜用户名 &gt;</em></p>
<p><strong>如果没有指定＜模式名&gt;，那么＜模式名&gt;隐含为＜用户名 &gt;</strong></p>
<p><em>要创建模式，调用该命令的用户必须<strong>拥有数据库管理员权限</strong>，或者获得了数据库管理员授予的CREATE SCHEMA的权限</em>  </p>
<p><em>定义模式实际上定义了一个<strong>命名空间</strong>，在这个空间中可以进一步定义该模式包含的数据库对象，例如基本表、视图、索引等  。也就是说用户可以在创建模式的同时在这个模式定义中进一步创建基本表、视图，定义授权。即 ：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span>＜模式名＞AUTHORIZATION ＜用户名 &gt; ［＜表定义子句＞ |＜视图定义子句＞|＜授权定义子句 &gt;］</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1 (<span class="keyword">COL</span> <span class="number">1</span> <span class="built_in">SMALLINT</span>,</span><br><span class="line">COL2 <span class="built_in">INT</span>,</span><br><span class="line">COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure>



<h5 id="模式删除"><a href="#模式删除" class="headerlink" title="模式删除"></a>模式删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> &lt;模式名&gt; &lt;<span class="keyword">CASCADE</span> | RESTRICT&gt;</span><br></pre></td></tr></table></figure>

<p><em>其 中 CASCADE和 RESTRICT两者<strong>必选其一</strong>。<strong>选择了 CASCADE (级联)</strong>，表示在删除模式的同时把该模式中所有的数据库对象全部删除；<strong>选择了 RESTRICT (限制)</strong>，表示如果该模式中已经定义了下属的数据库对象(如表、视图等)，则拒绝该删除语句的执行。</em></p>
<h4 id="基本表定义，删除，修改"><a href="#基本表定义，删除，修改" class="headerlink" title="基本表定义，删除，修改"></a>基本表定义，删除，修改</h4><p><em>创建了一个模式就建立了一个数据库的命名空间，一个框架。在这个空间中首先要定义的是该模式包含的数据库基本表</em></p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;(＜列名＞＜数据类型＞［列级完整性约束条件］</span><br><span class="line">［,＜列名＞＜数据类型＞［列级完整性约束条件］］</span><br><span class="line">                  ...</span><br><span class="line">［,＜表级完整性约束条件＞］) ；</span><br></pre></td></tr></table></figure>

<p><em>完整性约束条件被存入系统的<strong>数据字典中</strong>，当用户操作表中数据时由关系数据库管理系统自动检查该操作是否违背这些完整性约束条件。<strong>如果完整性约束条件涉及该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级</strong>。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno <span class="built_in">CHAR</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>, <span class="comment">/*严列级完整性约束条件， Cno是主码*/</span></span><br><span class="line"> Cname <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="comment">/*列级完整性约束条件， Cname不能取空值*/</span></span><br><span class="line">Cpno <span class="built_in">CHAR</span>(<span class="number">4</span>), <span class="comment">/* Cpno的 含 义 是 先 修 课 */</span></span><br><span class="line">Ccredit <span class="built_in">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， Cpno是外码，被参照表是Course ,被参照列是Cno */</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure>

<p><strong>由上可知外键和参照的表可以是同一个表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno <span class="built_in">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade <span class="built_in">SMALLINT</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (Sno, Cno), <span class="comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"><span class="comment">/*表级完整性约束条件， S no是外码，被参照表是Student */</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， C n o 是外码，被参照表是Course*/</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure>



<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><img src="https://s1.ax1x.com/2020/04/01/G1UblT.png" alt="G1UblT.png" border="0">

<p><a href="https://imgchr.com/i/G1aM1f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aM1f.md.png" alt="G1aM1f.md.png" border="0"></a></p>
<p><strong>文本类型</strong></p>
<p><a href="https://imgchr.com/i/G1aljS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aljS.md.png" alt="G1aljS.md.png" border="0"></a></p>
<p><strong>时间类型</strong></p>
<p><a href="https://imgchr.com/i/G1aK9P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aK9P.md.png" alt="G1aK9P.md.png" border="0"></a></p>
<h5 id="模式与表"><a href="#模式与表" class="headerlink" title="模式与表"></a>模式与表</h5><p><strong>设置表所属模式的三种方式：</strong></p>
<ul>
<li>选择模式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"S-T"</span>.Student(...)</span><br></pre></td></tr></table></figure>



<ul>
<li>创建模式时创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABL(</span><br><span class="line">	COL1 <span class="built_in">SMALLINT</span>,</span><br><span class="line">	COL2 <span class="built_in">INT</span>,</span><br><span class="line">	COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">	COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">	COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure>

<ul>
<li><p>系统根据搜索路径（search path） 来确定该对象所属的模式  </p>
<p><em>搜索路径包含一组模式列表，关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名。若搜索路径中的模式名都不存在，系统将给出错误。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*显示当前搜索路径*/</span></span><br><span class="line"><span class="keyword">SHOW</span> search_path;</span><br><span class="line"><span class="comment">/*搜索路径的当前默认值是$user, PUBLIC。 其含义是首先搜索与用户名相同的模式名，如果该模式名不存在，则使用PUBLIC模式。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据库管理员也可以设置搜索路径，例如：*/</span></span><br><span class="line"><span class="keyword">SET</span> search_path <span class="keyword">TO</span> <span class="string">"S-T"</span>, <span class="keyword">PUBLIC</span>;</span><br><span class="line"><span class="comment">/*然后，定义基本表：*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student (...)；</span><br><span class="line"><span class="comment">/*实际结果是建立了 S-T.Student基本表。因为关系数据库管理系统发现搜索路径中第一个模式名S-T 存在，就把该模式作为基本表Student所属的模式。*/</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="基本表修改"><a href="#基本表修改" class="headerlink" title="基本表修改"></a>基本表修改</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ＜表名＞</span><br><span class="line"><span class="comment">-- 增加属性</span></span><br><span class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] ＜新列名＞ ＜数据类型＞ [完整性约束]]</span><br><span class="line">[<span class="keyword">ADD</span>＜表级完整性约束＞] <span class="comment">-- ALTER TABLE Course ADD UNIQUE(Cname);</span></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] ＜列名＞ [<span class="keyword">CASCADE</span>|RESTRICT]]</span><br><span class="line"><span class="comment">--删除约束</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span>＜完整性约束名＞ [RESTRICT | <span class="keyword">CASCADE</span> ]]</span><br><span class="line"><span class="comment">-- 修改列</span></span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ＜列名＞＜数据类型＞] ;</span><br></pre></td></tr></table></figure>



<h5 id="基本表删除"><a href="#基本表删除" class="headerlink" title="基本表删除"></a>基本表删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt; [RESTRICT | <span class="keyword">CASCADE</span>];</span><br></pre></td></tr></table></figure>

<p><em>若 选 择 RESTRICT ,则该表的删除是有限制条件的。</em></p>
<p><em>若 选 择 CASCADE ,则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。因此执行删除基本表的操作一定要格外小心。</em>  </p>
<p><strong>注意 ：不同的数据库产品在遵循 SQL 标准的基础上具体实现细节和处理策略会与标准有差别。</strong>  </p>
<h4 id="视图建立和删除"><a href="#视图建立和删除" class="headerlink" title="视图建立和删除"></a>视图建立和删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student <span class="comment">/* Student 表上建立视图*/</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT; <span class="comment">/*删除 Student 表引</span></span><br><span class="line"><span class="comment">-ERROR: cannot drop table Student because other objects depend on it*/</span></span><br><span class="line"><span class="comment">/* 系统返回错误信息，存在依赖该表的对象，此表不能被删除》*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student <span class="keyword">CASCADE</span>; <span class="comment">/*删除 Student 表*/</span></span><br><span class="line">—NOTICE: <span class="keyword">drop</span> cascades <span class="keyword">to</span> <span class="keyword">view</span> <span class="keyword">IS</span> Student <span class="comment">/*系统返回提示，此表上的视图也被删除*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> IS_Student;</span><br><span class="line"><span class="comment">--ERROR: relation " IS Student " does not exist</span></span><br></pre></td></tr></table></figure>





<h4 id="索引的建立和删除"><a href="#索引的建立和删除" class="headerlink" title="索引的建立和删除"></a>索引的建立和删除</h4><p><em>当表的数据量比较大时，查询操作会比较耗时。建立索引是加快查询速度的有效手段。  类似于图书后面的索引，能快速定位到需要查询的内容。用户可以根据应用环境的需要在基本表上建立一个或多个索引，以提供多种存取路径，加快查找速度。</em>    </p>
<p><em>数据库索引有多种类型，常见索引包括<strong>顺序文件上的索引</strong>、<strong>B+树索引</strong>、<strong>散 列 （hash）索引</strong>、<strong>位图索引</strong>等。</em>  </p>
<ul>
<li>顺序文件上的索引是针对按指定属性值升序或降序存储的关系，在该属性<br>上建立一个顺序索引文件，索引文件由属性值和相应的元组指针组成。  </li>
<li>B+树索引是将索引属性组织成B+树形式， B+树的叶结点为属性值和相应的元组指针。 B+树索引具有动态平衡的<br>优点。</li>
<li>散列索引是建立若干个桶，将索引属性按照其散列函数值映射到相应桶中，桶中存放索引属性值和相应的元组指针。散列索引具有查找速度快的特点。 </li>
<li>位图索引是用位向量记录索引属性中可能出现的值，每个位向量对应一个可能值  </li>
</ul>
<p><em>索引虽然能够加速数据库查询，但需要占用一定的存储空间，当基本表更新时，索引要进行相应的维护，这些都会增加数据库的负担,因此要根据实际应用的需要有选择地创建索引。目前SQ L标准中没有涉及索引,一般说来，建立与删除索引由数据库管理员或表的属主（owner）, 即建立表的人，负责<br>完成。用户不必也不能显式地选择索引。索引是关系数据库管理系统的内部实现技术，属于内模式的范畴。</em>  </p>
<h5 id="索引建立"><a href="#索引建立" class="headerlink" title="索引建立"></a>索引建立</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span> &lt;索引名&gt;</span><br><span class="line"><span class="keyword">ON</span>＜表名＞（＜列名＞[＜次序＞] [＜列名＞ [＜次序＞]]•••）;</span><br><span class="line"><span class="comment">/*UNIQUE表明此索引的每一个索引值只对应唯一的数据记录。</span></span><br><span class="line"><span class="comment">CLUSTER表示要建立的索引是聚簇索引。*/</span></span><br></pre></td></tr></table></figure>

<p><em>索引可以建立在该表的一列或多列上，各列名之间用逗号分隔。每个＜列名&gt;后面还可以用＜次序 &gt;指定索引值的排列次序，可 选 ASC （升序 ）或 DESC （降序），默认值为ASC。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Stusno <span class="keyword">ON</span> Student（Sno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Coucno <span class="keyword">ON</span> Course（Cno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> SCno <span class="keyword">ON</span> SC（Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>）;</span><br></pre></td></tr></table></figure>



<h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> ＜旧索引名＞  <span class="keyword">RENAME</span> <span class="keyword">TO</span> ＜新索引名＞ ；</span><br></pre></td></tr></table></figure>



<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> ＜索引名＞；</span><br></pre></td></tr></table></figure>



<h4 id="数字字典"><a href="#数字字典" class="headerlink" title="数字字典"></a>数字字典</h4><p><em>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息,包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行SQ L 的数据定义语句时，实际上就是在更新数据字<br>典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</em>  </p>
<hr>
<blockquote>
<p>最惬意的时候，往往是失败的开始。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据定义</tag>
        <tag>CREATE</tag>
        <tag>DROP</tag>
        <tag>ALTER</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop理论课-第四章</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%9B%9B%E7%AB%A0YARN.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第四章-YARN"><a href="#第四章-YARN" class="headerlink" title="第四章  YARN"></a>第四章  YARN</h2><h3 id="YARN-简介"><a href="#YARN-简介" class="headerlink" title="YARN 简介"></a>YARN 简介</h3><p><em>是针对MapReduce1 的缺点开发的</em></p>
<h4 id="MapReduce1工作流程"><a href="#MapReduce1工作流程" class="headerlink" title="MapReduce1工作流程"></a>MapReduce1工作流程</h4><img src="https://s1.ax1x.com/2020/03/30/GnMq0J.png" alt="GnMq0J.png" border="0">

<p><em>MapReduce1 当任务过多时，不利于系统扩展；难以支持其他的框架；JobTracker单点故障</em></p>
<h4 id="MapReduce2"><a href="#MapReduce2" class="headerlink" title="MapReduce2"></a>MapReduce2</h4><img src="https://s1.ax1x.com/2020/03/30/GnQhHH.png" alt="GnQhHH.png" border="0">

<h4 id="YARN-进程"><a href="#YARN-进程" class="headerlink" title="YARN 进程"></a>YARN 进程</h4><p>ResourceManager</p>
<p>NodeManager</p>
<h4 id="什么是YARN"><a href="#什么是YARN" class="headerlink" title="什么是YARN"></a>什么是YARN</h4><p><em>YARN ：Yet Another Resource Negotiator，另一种资源协调者。<br><strong>最初</strong>是为了改善MapReduce的实现，<strong>但也</strong>是一种资源调度框架，具有通用性，可为上层应用提供统一的资源管理和调度，可以支持其他的分布式计算模式（如Spark）。<br>它的引入为集群在利用率、资`源统一管理和数据共享等方面带来了巨大好处。</em></p>
<h3 id="YARN架构"><a href="#YARN架构" class="headerlink" title="YARN架构"></a>YARN架构</h3><img src="https://s1.ax1x.com/2020/03/30/GnUQz9.png" alt="GnUQz9.png" border="0">



<h4 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 Container"></a>容器 Container</h4><p><em>Container是YARN中资源的抽象，它封装了某个节点上的多维度资源。</em></p>
<p><em>YARN中资源包括内存、CPU、磁盘输入输出等等</em></p>
<h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h4><p><em>负责资源分配和管理</em></p>
<p><em>主要由调度器和应用程序管理器两个组件组成</em></p>
<ul>
<li>调度器（Scheduler）：<pre><code>调度器根据资源情况为应用程序分配封装在Container中的资源。</code></pre></li>
<li>应用程序管理器（Application Manager）：<pre><code>应用程序管理器负责管理整个系统中所有应用程序</code></pre></li>
</ul>
<h4 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h4><p><em>是每个节点上的资源和任务管理器</em></p>
<ul>
<li>定时向ResourceManager汇报本节点上的资源使用情况和各个Container的运行状态；</li>
<li>接收并处理来自ApplicationManager的Container启动/停止等请求。</li>
</ul>
<h4 id="ApplicationMaster（主应用"><a href="#ApplicationMaster（主应用" class="headerlink" title="ApplicationMaster（主应用)"></a>ApplicationMaster（主应用)</h4><p>ApplicationMaster是一个详细的框架库，它结合从 ResourceManager 获得的资源和 NodeManager 协同工作来运行和监控任务。<br>用户提交的每一个应用程序均包含一个ApplicationMaster。<br>主要功能包括：<br>1)、与ResourceManager调度器协商以获取抽象资源（Container）；<br>2)、负责应用的监控，跟踪应用执行状态，重启失败任务等；<br>3)、与NodeManager协同工作完成Task的执行和监控。</p>
<h4 id="YARN中应用运行机制-流程"><a href="#YARN中应用运行机制-流程" class="headerlink" title="YARN中应用运行机制(流程)"></a>YARN中应用运行机制(流程)</h4><p><a href="https://imgchr.com/i/GnDCGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnDCGT.md.png" alt="GnDCGT.md.png" border="0"></a></p>
<h4 id="YARN中任务进度监控"><a href="#YARN中任务进度监控" class="headerlink" title="YARN中任务进度监控"></a>YARN中任务进度监控</h4><p><a href="https://imgchr.com/i/GnD9iV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnD9iV.md.png" alt="GnD9iV.md.png" border="0"></a></p>
<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="MapReduce1与YARN组成对比"><a href="#MapReduce1与YARN组成对比" class="headerlink" title="MapReduce1与YARN组成对比"></a>MapReduce1与YARN组成对比</h4><img src="https://s1.ax1x.com/2020/03/30/GnDzOH.png" alt="GnDzOH.png" border="0">

<h4 id="Yarn对MapReduce运行性能提升"><a href="#Yarn对MapReduce运行性能提升" class="headerlink" title="Yarn对MapReduce运行性能提升"></a>Yarn对MapReduce运行性能提升</h4><p>主要特点： ResourceManager与Application Master分离</p>
<p>性能提升:可以扩展支持10,000个节点，100,000个任务</p>
<h4 id="YARN调度器"><a href="#YARN调度器" class="headerlink" title="YARN调度器"></a>YARN调度器</h4><h5 id="FIFO-Scheduler"><a href="#FIFO-Scheduler" class="headerlink" title="FIFO Scheduler"></a>FIFO Scheduler</h5><p><em>最简单的调度器，任务先提交先执行</em></p>
<h5 id="Capacity-Scheduler"><a href="#Capacity-Scheduler" class="headerlink" title="Capacity Scheduler"></a>Capacity Scheduler</h5><p><em>分成多个队列，每个队列占用一定资源，可以看作是FIFO Scheduler的多队列版本</em></p>
<p><em>每个队列可以限制资源使用量。但是，队列间的资源分配以使用量作排列依据，使得容量小的队列有竞争优势</em></p>
<p><em>注意：如果不限制某队列最大容量，则运行过程中，它可以占用全部资源。</em><br><a href="https://imgchr.com/i/GI7Jx0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7Jx0.png" alt="GI7Jx0.png" border="0"></a></p>
<h5 id="Fair-Scheduler"><a href="#Fair-Scheduler" class="headerlink" title="Fair Scheduler"></a>Fair Scheduler</h5><p><em>假设每个任务具有相同的优先级，平均分配系统的资源</em></p>
<p>单队列</p>
<img src="https://s1.ax1x.com/2020/03/30/GnyELQ.md.png" alt="GnyELQ.md.png" border="0">

<p>多队列</p>
<p><a href="https://imgchr.com/i/Gnyeds" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/Gnyeds.md.png" alt="Gnyeds.md.png" border="0"></a></p>
<h4 id="三种调度器比较"><a href="#三种调度器比较" class="headerlink" title="三种调度器比较"></a>三种调度器比较</h4><p><a href="https://imgchr.com/i/GI7G2q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7G2q.md.png" alt="GI7G2q.md.png" border="0"></a></p>
<hr>
<blockquote>
<p>世界上那些最容易的事情中，拖延时间最不费力。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第三章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8d0c041640136eea626ec79f15110e5b6761ecaa6d678c94984a1fd70f569b08"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>透明传输</tag>
        <tag>封装成帧</tag>
        <tag>循环冗余检测CRC</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo更改颜色</title>
    <url>/hexo%E6%9B%B4%E6%94%B9%E9%A2%9C%E8%89%B2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>廖雪峰教程笔记-面向对象编程</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2f79175af739970e2f287b1140c118c78124150522b2f8f8490863698abaa221"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>廖雪峰java笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-关系代数</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><h3 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h3><p><em>并，交，差是要属性一样才可以操作</em></p>
<h4 id="并-union"><a href="#并-union" class="headerlink" title="并(union)"></a>并(union)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8tqs.png" alt="8X8tqs.png" border="0" width="400/">



<h4 id="差-except"><a href="#差-except" class="headerlink" title="差(except)"></a>差(except)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8cL9.png" alt="8X8cL9.png" border="0" width="400/">

<h4 id="交-intersection"><a href="#交-intersection" class="headerlink" title="交(intersection)"></a>交(intersection)</h4><img src="https://s1.ax1x.com/2020/03/25/8XGKOJ.png" alt="8XGKOJ.png" border="0" width="400/">

<h4 id="笛卡尔积-cartesian-product"><a href="#笛卡尔积-cartesian-product" class="headerlink" title="笛卡尔积(cartesian product)"></a>笛卡尔积(cartesian product)</h4><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><h4 id="选择-selection"><a href="#选择-selection" class="headerlink" title="选择(selection)"></a>选择(selection)</h4><p>  σ条件(R)</p>
<p><em>行操作</em></p>
<h4 id="投影-projection"><a href="#投影-projection" class="headerlink" title="投影(projection)"></a>投影(projection)</h4><p>​    π条件(R)</p>
<p><em>投影操作是从列的角度进行的操作</em></p>
<h4 id="连接-join"><a href="#连接-join" class="headerlink" title="连接(join)"></a>连接(join)</h4><h5 id="theta连接，θ"><a href="#theta连接，θ" class="headerlink" title="theta连接，θ"></a><em>theta连接，θ</em></h5><img src="https://s1.ax1x.com/2020/03/25/8X1CLR.png" alt="8X1CLR.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XlxWF.png" alt="8XlxWF.png" border="0" width="400/">

<h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a><em>等值连接</em></h5><h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a><em>自然连接</em></h5><p><em>是特殊的等值连接</em></p>
<p><em>要具有相同属性，且值相同的进行连接</em></p>
<img src="https://s1.ax1x.com/2020/03/25/8XMblj.png" alt="8XMblj.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XQYAf.png" alt="8XQYAf.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XQhv9.png" alt="8XQhv9.png" border="0" width="400/">



<h4 id="除操作"><a href="#除操作" class="headerlink" title="除操作"></a>除操作</h4><p><em>除的那个关系是被除关系的真子集,  值要相等才可以</em></p>
<img src="https://s1.ax1x.com/2020/03/25/8X1fmR.png" alt="8X1fmR.png" border="0" width="400/">



<hr>
<blockquote>
<p>阳光温热，岁月静好，你还未来，我怎敢老去。 —-张爱玲</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>崔庆--才python爬虫之App爬取</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-11%E7%AB%A0%20App%E7%88%AC%E5%8F%96.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4c5cdb013fe4eda6d814edae87916c536e9bdb372d8a49eed05b2a46a05c35de"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-pyspider框架的使用</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-12%E7%AB%A0%20pyspider%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-pyspider框架的使用"><a href="#崔庆才python3爬虫-pyspider框架的使用" class="headerlink" title="崔庆才python3爬虫-pyspider框架的使用"></a>崔庆才python3爬虫-pyspider框架的使用</h1><h2 id="pyspider框架介绍"><a href="#pyspider框架介绍" class="headerlink" title="pyspider框架介绍"></a>pyspider框架介绍</h2><h3 id="pyspider基本功能"><a href="#pyspider基本功能" class="headerlink" title="pyspider基本功能"></a>pyspider基本功能</h3><h3 id="与-Scrapy的比较"><a href="#与-Scrapy的比较" class="headerlink" title="与 Scrapy的比较"></a>与 Scrapy的比较</h3><h3 id="pyspider-的架构"><a href="#pyspider-的架构" class="headerlink" title="pyspider 的架构"></a>pyspider 的架构</h3><h2 id="pyspider的基本使用"><a href="#pyspider的基本使用" class="headerlink" title="pyspider的基本使用"></a>pyspider的基本使用</h2><h2 id="pyspider用法详解"><a href="#pyspider用法详解" class="headerlink" title="pyspider用法详解"></a>pyspider用法详解</h2><hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy-个人使用总结</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13)%20%20Scrapy-%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Scrapy-个人使用总结"><a href="#Scrapy-个人使用总结" class="headerlink" title="Scrapy-个人使用总结"></a>Scrapy-个人使用总结</h1><h2 id="对scrapy使用pycharm进行调试"><a href="#对scrapy使用pycharm进行调试" class="headerlink" title="对scrapy使用pycharm进行调试"></a>对scrapy使用pycharm进行调试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建项目</span><br><span class="line">scrapy startproject project_name</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建Spider</span><br><span class="line">scrapy genspider spider_name start_url</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>在项目根目录下创建main.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打断点调试py文件</span></span><br><span class="line"><span class="comment"># sys.path.append('D:\PyCharm\project_name')</span></span><br><span class="line">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">print(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">execute([<span class="string">'scrapy'</span>, <span class="string">'crawl'</span>, <span class="string">'spider_name'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span>一定要设置成 <span class="literal">False</span>，断点调试才能正常进行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后运行main.py</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/sinat_35512245/article/details/72835653" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<h2 id="Downloader-Middleware"><a href="#Downloader-Middleware" class="headerlink" title="Downloader Middleware"></a>Downloader Middleware</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>process_request(request, spider)</span><br><span class="line">返回<span class="literal">None</span>,request,response,IgnoreRequest 的情况</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>process_response(request, response, spider)</span><br><span class="line">返回request, response, IgnoreRequest 的情况</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>process_except(request, exception, spider)</span><br><span class="line">返回<span class="literal">None</span>、Response对象、Request对象的情况</span><br></pre></td></tr></table></figure>

<h3 id="用process-request-request-Spider-修改User-Agent"><a href="#用process-request-request-Spider-修改User-Agent" class="headerlink" title="用process_request(request, Spider)修改User-Agent"></a>用process_request(request, Spider)修改User-Agent</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request,spider)</span>:</span></span><br><span class="line">        request.headers[<span class="string">'User-Agent'</span>]=<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36'</span></span><br></pre></td></tr></table></figure>

<h3 id="使用process-response-request-response-spider-修改响应码"><a href="#使用process-response-request-response-spider-修改响应码" class="headerlink" title="使用process_response(request, response,spider)修改响应码"></a>使用process_response(request, response,spider)修改响应码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response,spider)</span>:</span> <span class="comment"># Request对象、Response对象之一，或者抛出IgnoreRequest异常。</span></span><br><span class="line">        response.status=<span class="number">201</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="对process-request和process-response不同返回值的分析"><a href="#对process-request和process-response不同返回值的分析" class="headerlink" title="对process_request和process_response不同返回值的分析"></a>对process_request和process_response不同返回值的分析</h3><p><a href="https://blog.csdn.net/raymond_yp/article/details/105935802" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<p><a href="https://www.cnblogs.com/baohanblog/p/12675708.html" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>当process_requests返回response时，不仅过downloader下载；scrapy对接selenium和splash时，就是相当于把渲染过后的页面内容赋值给response返回，因为downloader获取的内容不是渲染过后的数据</span><br></pre></td></tr></table></figure>

<h3 id="IgnoreRequest"><a href="#IgnoreRequest" class="headerlink" title="IgnoreRequest"></a>IgnoreRequest</h3><h4 id="process-request返回IgnoreRequest时"><a href="#process-request返回IgnoreRequest时" class="headerlink" title="process_request返回IgnoreRequest时"></a>process_request返回IgnoreRequest时</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If it raises an IgnoreRequest exception, the process_exception() methods of installed downloader middleware will be called. If none of them handle the exception, the errback function of the request (Request.errback) <span class="keyword">is</span> called. If no code handles the raised exception, it <span class="keyword">is</span> ignored <span class="keyword">and</span> <span class="keyword">not</span> logged (unlike other exceptions).</span><br></pre></td></tr></table></figure>

<h4 id="process-reponse返回IgnoreRequest时"><a href="#process-reponse返回IgnoreRequest时" class="headerlink" title="process_reponse返回IgnoreRequest时"></a>process_reponse返回IgnoreRequest时</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If it raises an IgnoreRequest exception, the errback function of the request (Request.errback) <span class="keyword">is</span> called. If no code handles the raised exception, it <span class="keyword">is</span> ignored <span class="keyword">and</span> <span class="keyword">not</span> logged (unlike other exceptions).</span><br></pre></td></tr></table></figure>

<h3 id="process-exception-request-exception-spider"><a href="#process-exception-request-exception-spider" class="headerlink" title="process_exception(request, exception, spider)"></a>process_exception(request, exception, spider)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">启用条件</span><br><span class="line">Scrapy calls process_exception() when a download handler <span class="keyword">or</span> a process_request() (<span class="keyword">from</span> a downloader middleware) raises an exception (including an IgnoreRequest exception)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">返回值分析</span><br><span class="line">process_exception() should <span class="keyword">return</span>: either <span class="literal">None</span>, a Response object, <span class="keyword">or</span> a Request object.</span><br><span class="line"></span><br><span class="line">If it returns <span class="literal">None</span>, Scrapy will <span class="keyword">continue</span> processing this exception, executing any other process_exception() methods of installed middleware, until no middleware <span class="keyword">is</span> left <span class="keyword">and</span> the default exception handling kicks <span class="keyword">in</span>.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If it returns a Response object, the process_response() method chain of installed middleware <span class="keyword">is</span> started, <span class="keyword">and</span> Scrapy won’t bother calling any other process_exception() methods of middleware.</span><br><span class="line"></span><br><span class="line">If it returns a Request object, the returned request <span class="keyword">is</span> rescheduled to be downloaded <span class="keyword">in</span> the future. This stops the execution of process_exception() methods of the middleware the same <span class="keyword">as</span> returning a response would.</span><br></pre></td></tr></table></figure>

<h3 id="from-crawler-cls-crawler"><a href="#from-crawler-cls-crawler" class="headerlink" title="from_crawler(cls, crawler)"></a>from_crawler(cls, crawler)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If present, this classmethod <span class="keyword">is</span> called to create a middleware instance <span class="keyword">from</span> a Crawler. It must <span class="keyword">return</span> a new instance of the middleware. Crawler object provides access to all Scrapy core components like settings <span class="keyword">and</span> signals; it <span class="keyword">is</span> a way <span class="keyword">for</span> middleware to access them <span class="keyword">and</span> hook its functionality into Scrapy.</span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">crawler (Crawler object) – crawler that uses this middleware</span><br></pre></td></tr></table></figure>



<h2 id="Spider-Middleware"><a href="#Spider-Middleware" class="headerlink" title="Spider Middleware"></a>Spider Middleware</h2><h2 id="Pipeline-Item"><a href="#Pipeline-Item" class="headerlink" title="Pipeline Item"></a>Pipeline Item</h2><h2 id="settings文件"><a href="#settings文件" class="headerlink" title="settings文件"></a>settings文件</h2><h3 id="DOWNLOAD-DELAY"><a href="#DOWNLOAD-DELAY" class="headerlink" title="DOWNLOAD_DELAY"></a>DOWNLOAD_DELAY</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>DOWNLOAD_DELAY:(可以用于抑制爬取速度)</span><br><span class="line">Default: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">The amount of time (<span class="keyword">in</span> secs) that the downloader should wait before downloading consecutive pages <span class="keyword">from</span> the same website. This can be used to throttle the crawling speed to avoid hitting servers too hard. Decimal numbers are supported. Example:</span><br><span class="line"></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">0.25</span>    <span class="comment"># 250 ms of delay</span></span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOADER-MIDDLEWARES-BASE和DOWNLOADER-MIDDLEWARES"><a href="#DOWNLOADER-MIDDLEWARES-BASE和DOWNLOADER-MIDDLEWARES" class="headerlink" title="DOWNLOADER_MIDDLEWARES_BASE和DOWNLOADER_MIDDLEWARES"></a>DOWNLOADER_MIDDLEWARES_BASE和DOWNLOADER_MIDDLEWARES</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES_BASE和DOWNLOADER_MIDDLEWARES的关系</span><br><span class="line">(对应章节已经具体分析)</span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOADER-STATS"><a href="#DOWNLOADER-STATS" class="headerlink" title="DOWNLOADER_STATS"></a>DOWNLOADER_STATS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>DOWNLOADER_STATS</span><br><span class="line">Default: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">Whether to enable downloader stats collection.</span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOAD-HANDLERS"><a href="#DOWNLOAD-HANDLERS" class="headerlink" title="DOWNLOAD_HANDLERS"></a>DOWNLOAD_HANDLERS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Default: &#123;&#125;</span><br><span class="line"></span><br><span class="line">A dict containing the request downloader handlers enabled <span class="keyword">in</span> your project. See DOWNLOAD_HANDLERS_BASE <span class="keyword">for</span> example format.</span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOAD-HANDLERS-BASE"><a href="#DOWNLOAD-HANDLERS-BASE" class="headerlink" title="DOWNLOAD_HANDLERS_BASE"></a>DOWNLOAD_HANDLERS_BASE</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A dict containing the request download handlers enabled by default <span class="keyword">in</span> Scrapy. You should never modify this setting <span class="keyword">in</span> your project, modify DOWNLOAD_HANDLERS instead.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Default:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'data'</span>: <span class="string">'scrapy.core.downloader.handlers.datauri.DataURIDownloadHandler'</span>,</span><br><span class="line">    <span class="string">'file'</span>: <span class="string">'scrapy.core.downloader.handlers.file.FileDownloadHandler'</span>,</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'scrapy.core.downloader.handlers.http.HTTPDownloadHandler'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'scrapy.core.downloader.handlers.http.HTTPDownloadHandler'</span>,</span><br><span class="line">    <span class="string">'s3'</span>: <span class="string">'scrapy.core.downloader.handlers.s3.S3DownloadHandler'</span>,</span><br><span class="line">    <span class="string">'ftp'</span>: <span class="string">'scrapy.core.downloader.handlers.ftp.FTPDownloadHandler'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">You can disable any of these download handlers by assigning <span class="literal">None</span> to their URI scheme <span class="keyword">in</span> DOWNLOAD_HANDLERS. E.g., to disable the built-<span class="keyword">in</span> FTP handler (without replacement), place this <span class="keyword">in</span> your settings.py:</span><br><span class="line"></span><br><span class="line">DOWNLOAD_HANDLERS = &#123;</span><br><span class="line">    <span class="string">'ftp'</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="How-to-access-settings"><a href="#How-to-access-settings" class="headerlink" title="How to access settings"></a>How to access settings</h3><p><a href="https://docs.scrapy.org/en/latest/topics/settings.html?highlight=custom_settings#how-to-access-settings" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<h2 id="coroutine"><a href="#coroutine" class="headerlink" title="coroutine"></a>coroutine</h2><p><a href="https://docs.scrapy.org/en/latest/topics/coroutines.html" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Many libraries that use coroutines, such <span class="keyword">as</span> aio-libs, require the asyncio loop <span class="keyword">and</span> to use them you need to enable asyncio support <span class="keyword">in</span> Scrapy.</span><br><span class="line"></span><br><span class="line">To enable asyncio support, set the TWISTED_REACTOR setting to <span class="string">'twisted.internet.asyncioreactor.AsyncioSelectorReactor'</span>.</span><br></pre></td></tr></table></figure>



<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><p><a href>官方文档</a></p>
<h2 id="srapy效率提高"><a href="#srapy效率提高" class="headerlink" title="srapy效率提高"></a>srapy效率提高</h2><p><a href="https://blog.csdn.net/Hubz131/article/details/89811216" target="_blank" rel="external nofollow noopener noreferrer">推荐方法</a></p>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-分布式爬虫</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-14%E7%AB%A0%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-分布式爬虫"><a href="#崔庆才python3爬虫-分布式爬虫" class="headerlink" title="崔庆才python3爬虫-分布式爬虫"></a>崔庆才python3爬虫-分布式爬虫</h1><h2 id="分布式爬虫原理"><a href="#分布式爬虫原理" class="headerlink" title="分布式爬虫原理"></a>分布式爬虫原理</h2><h3 id="1-分布式爬虫架构"><a href="#1-分布式爬虫架构" class="headerlink" title="1 .分布式爬虫架构"></a>1 .分布式爬虫架构</h3><h3 id="2-维护爬取队列"><a href="#2-维护爬取队列" class="headerlink" title="2 . 维护爬取队列"></a>2 . 维护爬取队列</h3><h3 id="3-如何去重"><a href="#3-如何去重" class="headerlink" title="3 . 如何去重"></a>3 . 如何去重</h3><h3 id="4-防止中断"><a href="#4-防止中断" class="headerlink" title="4 . 防止中断"></a>4 . 防止中断</h3><h3 id="5-架构实现"><a href="#5-架构实现" class="headerlink" title="5 . 架构实现"></a>5 . 架构实现</h3><h2 id="Scrapy-Redis-源码解析"><a href="#Scrapy-Redis-源码解析" class="headerlink" title="Scrapy-Redis 源码解析"></a>Scrapy-Redis 源码解析</h2><hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式爬虫</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-Charles%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="抓包工具Charless安装"><a href="#抓包工具Charless安装" class="headerlink" title="抓包工具Charless安装"></a>抓包工具Charless安装</h2><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>官方网站: <a href="https://www.charlesproxy.com/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/</a></p>
<p>下载链接: <a href="https://www.charlesproxy.com/download/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/download/</a></p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><em>可以免费使用30天，之后每次不能超过30分钟</em></p>
<h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p><em>Https通信协议应用越来越广泛，通过加密的数据无法识别</em></p>
<p><em>Charless运行在PC端，抓取的数据在移动端，所以电脑和手机都要安装证书</em></p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>*打开charless的help–&gt;ssl proxying–&gt;install charless root certificate–&gt;安装证书–&gt;将所有证书放入下列存储–&gt;受信任的根证书颁发机构</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>主机名：192.168.1.76</p>
<p>端口： 8888</p>
<p>手机上打开chls.pro/ssl,设置证书名</p>
<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Selenium</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.8)%20%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%20Scrapy%E5%AF%B9%E6%8E%A5Selenium%20.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用-Spider对接Selenium"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用-Spider对接Selenium" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Selenium"></a>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Selenium</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy抓 取 页 面 的 方 式 和 requests库类似，都 是 直 接 模 拟 H T T P 请 求 ，而 Scrapy也不能抓取</span><br><span class="line">JavaScript动态渲染的页面。在前文中抓取JavaScript渲染的页面有两种方式。一种是分析Ajax请求.</span><br><span class="line">找到其对应的接口抓取， Scrapy同样可以用此种方式抓取。另一种是直接用Selenium或 Splash模拟浏</span><br><span class="line">览器进行抓取，我们不需要关心页面后台发生的请求，也不需要分析渲染过程，只需要关心页面最终</span><br><span class="line">结果即可，可见即可爬。那 么 ，如 果 Scrapy可 以 对 接 Selenium, 那 Scrapy就可以处理任何网站的抓</span><br><span class="line">取了</span><br></pre></td></tr></table></figure>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本节我们来看看Scrapy框架如何对接S elenium ,以 PhantomJS进行演示。我们依然抓取淘宝商品信息，抓取逻辑和前文中用Selenium抓取淘宝商品完全相同。</span><br><span class="line"></span><br><span class="line">请确保PhantomJS和MongoDB已经安装好并可以正常运行，安装好Scrapy、 Selenium、PyMongo库</span><br></pre></td></tr></table></figure>

<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先新建项目，名为 scrapyseleniumtest,命令如下所示：</span><br><span class="line">scrapy startproject scrapyseleniumtest</span><br><span class="line"></span><br><span class="line">新建一个Spider,命令如下所示：</span><br><span class="line">scrapy genspider taobao www.taobao.com</span><br><span class="line"></span><br><span class="line">修改ROBOTSTXT_OBEY为<span class="literal">False</span>, 如下所示:</span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="定义Item"><a href="#定义Item" class="headerlink" title="定义Item"></a>定义Item</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首 先 定 义 Item 对象，名 为 P ro d u ctitem ,代码如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item, Field</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productltem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    collection = <span class="string">'products'</span></span><br><span class="line">    image = Field()</span><br><span class="line">    price = FieldQ</span><br><span class="line">    deal = Field()</span><br><span class="line">    title = Field()</span><br><span class="line">    shop = Field()</span><br><span class="line">    location = Field()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里我们定义了<span class="number">6</span>个Field,也就是<span class="number">6</span>个字段，跟之前的案例完全相同。然后定义了一个collection属性，即此Item保存的MongoDB的Collection名称。</span><br></pre></td></tr></table></figure>

<h2 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初步实现Spider•的 start_requests()方 法 ，如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request, Spider</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> scrapyseleniumtest.items <span class="keyword">import</span> Productitem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaobaoSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">	name = <span class="string">'taobao'</span></span><br><span class="line">	allowed_domains = [<span class="string">'www.taobao.com'</span>]</span><br><span class="line">	base_url = <span class="string">'https://s.taobao.com/search?q='</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> keyword <span class="keyword">in</span> self.settings.get(<span class="string">'KEYWORDS'</span>):</span><br><span class="line">		<span class="keyword">for</span> page <span class="keyword">in</span> range(l, self.settings.get(<span class="string">'MAX_PAGE'</span>) + <span class="number">1</span>): </span><br><span class="line">			url = self.base_url + quote(keyword)</span><br><span class="line">			<span class="keyword">yield</span> Request(url=url, callback=self.parse, meta=&#123;<span class="string">'page'</span>: page&#125;, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先定义了一个base_url,即商品列表的URL,其后拼接一个搜索关键字就是该关键字在淘宝的搜索结果商品列表页面。</span><br><span class="line">关键字用KEYWORDS标识，定义为一个列表。最大翻页页码用MAX_PAGE表示。它们统一定义在setttings.py里面，如下所示：</span><br><span class="line">KEYWORDS = [<span class="string">'iPad'</span>]</span><br><span class="line">MAX_PAGE = <span class="number">100</span></span><br><span class="line">在start_requests()方法里，我们首先遍历了关键字，遍历了分页页码，构造并生成Request。由于每次搜索的URL是相同的，所以分页页码用meta参数来传递，同时设置dont_filter不去重。这样爬虫启动的时候，就会生成每个关键字对应的商品列表的每一页的请求了。</span><br></pre></td></tr></table></figure>

<h2 id="对接Selenium"><a href="#对接Selenium" class="headerlink" title="对接Selenium"></a>对接Selenium</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们需要处理这些请求的抓取。这次我们对接Selenium进行抓取，采用 Downloader</span><br><span class="line">Middleware来实现。在Middleware里面的process_request()方法里对每个抓取请求进行处理，启动浏览器并进行页面渲染，再将渲染后的结果构造一个HtmlResponse对象返回</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> getLogger</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, timeout=None, service_args=[])</span>:</span></span><br><span class="line">		self.logger = getLogger( _ name_ )</span><br><span class="line">		self.timeout = timeout</span><br><span class="line">		self.browser = webdriver.Phantom3S(service_args=service_args)</span><br><span class="line">		self.browser.set_window_size(<span class="number">1400</span>, <span class="number">700</span>)</span><br><span class="line">		self.browser.set_page_load_timeout(self.timeout)</span><br><span class="line">		self.wait = WebDriverWait(sel-f.browser, 		self.timeout)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_del_</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.browser.close()</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        用 PhantomJS抓取页面</span></span><br><span class="line"><span class="string">        :param request: Request 对象</span></span><br><span class="line"><span class="string">        :param spider: Spider 对象</span></span><br><span class="line"><span class="string">        :return: HtmlResponse</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.logger.debug(<span class="string">'PhantomJS is Starting'</span>)</span><br><span class="line">        page = request.meta.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.browser.get(request.url)</span><br><span class="line">            <span class="keyword">if</span> page &gt; <span class="number">1</span>:</span><br><span class="line">            	input = self.wait.until(</span><br><span class="line">            EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'#mainsrp-pager div.form &gt; input'</span>)))</span><br><span class="line">            	submit = self.wait.until(</span><br><span class="line">            EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'#mainsrp-pager div.form &gt;</span></span><br><span class="line"><span class="string">            span.btn.J_Submit'</span>)))</span><br><span class="line">            	input.clear()</span><br><span class="line">            	input.send_keys(page)</span><br><span class="line">            	submit.click()									self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'#mainsrp-pager li.item.active &gt; span'</span>), str(page))</span><br><span class="line">            self.wait.until(EC.presence_of_eiement_iocated((By.CSS_SELECTOR, <span class="string">'.m-itemlist .items .item'</span>)))</span><br><span class="line">            <span class="keyword">return</span> HtmlResponse(url=request.url, body=self.browser.page_source, request=request,</span><br><span class="line">            encoding=<span class="string">'utf-8'</span>, status=<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        	<span class="keyword">return</span> HtmlResponse(url=request.url, status=<span class="number">5</span>OO, request=request)</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> cls(timeout=crawler.settings.get(<span class="string">'SELENIUM_TIMEOUT'</span>),</span><br><span class="line">service_args=crawler.settings.get(<span class="string">'PHANT0M3S_SERVICE_ARGS'</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  首先我们在_init_()里对一些对象进行初始化，包括PhantomJS、WebDriverWait等对象，同时设置页面大小和页面加载超时时间。</span><br><span class="line">  在 process_request()方法中，我们通过Request的meta属性获</span><br><span class="line">取当前需要爬取的页码，调用PhantomJS对象的get()方法访问Request的对应的URL。这就相当于从Request对象里获取请求链接，然后再用PhantomJS加载，而不再使用Scrapy里的Downloader</span><br><span class="line">  随后的处理等待和翻页的方法在此不再赘述，和前文的原理完全相同。最后，页面加载完成之后，我们调用 PhantomJS的 page_source属性即可获取当前页面的源代码，然后用它来直接构造并返回一个HtmlResponse对象。构造这个对象的时候需要传入多个参数，如 u rl、 body等 ，这些参数实际上就是它的基础属性。可以在官方文档查看HtmlResponse对象的结构：https://doc.scrapy.org/en/latest/topics/</span><br><span class="line">request-response.html </span><br><span class="line">这样我们就成功利用 PhantomJS来代替Scrapy完成了页面的加载，最后将</span><br><span class="line">Response返回即可。</span><br><span class="line"></span><br><span class="line">有人可能会纳闷：为什么实现这么一个Downloader Middleware就可以了？之前的 Request对象怎么办？ Scrapy不再处理了吗？ Response返回后又传递给了谁？</span><br><span class="line"></span><br><span class="line">是的，Request对象到这里就不会再处理了，也不会再像以前一样交给Downloader下载。Response会直接传给Spider进行解析。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们需要回顾一下Downloader Middleware的 process_request()方法的处理逻辑，内容如下所示：</span><br><span class="line">当 process_request()方法返回Response对象的时候，更低优先级的Downloader Middleware的process_request()和process_exception()方法就不会被继续调用了，转而开始执行每个Downloader Middleware的 process_response()方法，调用完毕之后直接将Response对象发送给Spider来处理。</span><br><span class="line">这里直接返回了一个HtmlResponse对象，它是Response的子类 ，返回之后便顺次调用每个Downloader Middleware 的process_response()方法。而在 process_response()中我们没有对其做特殊处理，它会被发送给Spider,传给Request的回调函数进行解析。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">到现在, 我们应该能了解Downloader Middleware实现Selenium对接的原理了。</span><br><span class="line">在settings.py里，我们设置调用刚才定义的SeleniumMiddleware,如下所示：</span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">'scrapyseleniumtest.middlewares.SeleniumMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Response对象就会回传给Spider内的回调函数进行解析。所以下一步我们就实现其回调函数，对网页来进行解析，代码如下所示：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	products = response.xpath(</span><br><span class="line"><span class="string">'//div[@id="mainsrp-itemlist"]//div[@class="items"][l]//div[contains(@class, "item")]'</span>)</span><br><span class="line">	<span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">		item = ProductItem()</span><br><span class="line">		item[<span class="string">'price'</span>] = <span class="string">''</span>.join(product.xpath(<span class="string">'.//div[contains(@class,</span></span><br><span class="line"><span class="string">"price")]//text()'</span>).extract()).strip()</span><br><span class="line">		item[<span class="string">'title'</span>] = <span class="string">''</span>.join(product.xpath(<span class="string">'.//div[cont日ins(@class,</span></span><br><span class="line"><span class="string">"title")]//text()'</span>).extract()).strip()</span><br><span class="line">		item[<span class="string">'shop'</span>] = <span class="string">''</span>.join(product.xpath(<span class="string">'.//div[contains(@class, "shop")]//text()'</span>).extract()).strip()</span><br><span class="line">		item[<span class="string">'image'</span>] = <span class="string">''</span>.join(product.xpath(<span class="string">'.//div[@class="pic"]//img[contains(@class,"img")]/@data-src'</span>).extract()).strip()</span><br><span class="line">		item[<span class="string">'deal'</span>] = product.xpath(<span class="string">'.//div[contains(@class, "deal-cnt")]//text()'</span>).extract_first()</span><br><span class="line">		item['location1 ] = product.xpath('.//div[contains(@class, "location")]//text()').extract_first()</span><br><span class="line">		<span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">在这里我们使用XPath进行解析，调用response变量的xpath()方法即可。首先我们传递选取所有商品对应的XPath ,可以匹配所有商品，随后对结果进行遍历，依次选取每个商品的名称、价格、图片等内容，构造并返回一个Productitem对象。</span><br></pre></td></tr></table></figure>

<h2 id="存储结果"><a href="#存储结果" class="headerlink" title="存储结果"></a>存储结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最后我们实现一个Item Pipeline, 将结果保存到MongoDB, 如下所示:</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">	self.mongo_uri = mongo_uri</span><br><span class="line">	self.mongo_db = mongo_db</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">    		<span class="keyword">return</span></span><br><span class="line">        cis(mongo_uri=crawler.settings.get(<span class="string">'M0NG0_URI'</span>), mongo_db=crawler.settings.get(<span class="string">'M0NG0_DB'</span>))</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">		self.db = self.client[self.mongo_db]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">		self.db[item.collection].insert(dict(item))</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此实现和前文中存储到M ongoD B 的方法完全一致，原理不再赘述。记 得 在 settings.py中开启它</span><br><span class="line">的调用，如下所示：</span><br><span class="line">ITEMJIPELINES = &#123;</span><br><span class="line"><span class="string">'scrapyseleniumtest.pipelines.MongoPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line">其 中 ， MONGO_URI和 MONGO_DB的定义如下所示：</span><br><span class="line">MONGO_URI = <span class="string">'localhost'</span></span><br><span class="line">MONGO^DB = <span class="string">'taobao'</span></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">整个项目就完成了，执行如下命令启动抓取即可：</span><br><span class="line">scrapy crawl taobao</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们通过实现Downloader Middleware的方式实现了Selenium的对接。但这种方法其实是阻塞式的，也就是说这样就破坏了Scrapy异步处理的逻辑，速度会受到影响。为了不破坏其异步加载逻辑，我们可以使用Splash实现。下一节我们再来看看Scrapy对接Splash的方式。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Splash</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.9)%20%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%20Scrapy%E5%AF%B9%E6%8E%A5Splash.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用-Spider对接Splash"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用-Spider对接Splash" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Splash"></a>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider对接Splash</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在上一节我们实现了 Scrapy对 接 Selenium抓取淘宝商品的过程，这是一种抓取JavaScript动态渲染页面的方式。除了 Selenium, Splash也可以实现同样的功能。本节我们来了解Scrapy对接Splash来进行页面抓取的方式。</span><br></pre></td></tr></table></figure>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请确保 Splash已经正确安装并正常运行，同时安装好Scrapy-Splash库 ，如果没有安装可以参考第<span class="number">1</span>章的安装说明。</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先新建一个项目，名 为 scrapysplashtest,命令如下所示:</span><br><span class="line">scrapy startproject scrapysplashtest</span><br><span class="line"></span><br><span class="line">新建一个Spider,命令如下所示：</span><br><span class="line">scrapy genspider taobao www.taobao.com</span><br></pre></td></tr></table></figure>

<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  可以参考Scrapy-Splash的配置说明进行一步步的配置，链接如下：https://github.com/scrapyplugins/scrapy-splash<span class="comment">#configurationo</span></span><br><span class="line">  修改 settings.py,配置SPLASH_URL 在这里我们的Splash是在本地运行的，所以可以直接配置本地的地址：</span><br><span class="line">SPLASH_URL = <span class="string">'http://localhost:8050'</span></span><br><span class="line">   </span><br><span class="line">   如果Splash是在远程服务器运行的，那此处就应该配置为远程的地址。例如运行在IP为<span class="number">120.27</span><span class="number">.34</span><span class="number">.25</span>的服务器上，则此处应该配置为：</span><br><span class="line">SPLASH_URL = <span class="string">'http://12O.27.34.25:8050'</span></span><br><span class="line"></span><br><span class="line">  还需要配置几个Middleware,代码如下所示：</span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line"><span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line"><span class="string">'scrapy.downlomdermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里配置了三个Downloader Middleware和一个Spider Middleware, 这是Scrapy-Splash的核心部分。我们不再需要像对接Selenium那样实现一个Downloader Middleware, Scrapy-Splash库都为我们准备好了，直接配置即可。</span><br><span class="line"></span><br><span class="line">还需要配置一个去重的类DUPEFILTER_CLASS,代码如下所示：</span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"></span><br><span class="line">最后配置一个Cache存储HTTPCACHE_STORACE，代码如下所示：</span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>

<h2 id="新建请求"><a href="#新建请求" class="headerlink" title="新建请求"></a>新建请求</h2><h3 id="SplashRequest"><a href="#SplashRequest" class="headerlink" title="SplashRequest"></a>SplashRequest</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  配置完成之后，我们就可以利用Splash来抓取页面了。我们可以直接生成一个SplashRequest对象并传递相应的参数， Scrapy会将此请求转发给Splash, Splash对页面进行渲染加载，然后再将渲染结果传递回来。此时Response的内容就是渲染完成的页面结果了，最后交给Spider解析即可。</span><br><span class="line"></span><br><span class="line">我们来看一个示例，如下所示：</span><br><span class="line"><span class="keyword">yield</span> SplashRequest(uil, self.parse_resuIt,</span><br><span class="line">args=&#123;</span><br><span class="line"><span class="comment"># optional; parameters passed to Splash HTTP API</span></span><br><span class="line"><span class="string">'wait'</span>: <span class="number">0.5</span>,</span><br><span class="line"><span class="comment"># 'url' is prefilled from request url</span></span><br><span class="line"><span class="comment"># 'http_method' is set to 'POST' for POST requests</span></span><br><span class="line"><span class="comment"># 'body' is set to request body for POST requests</span></span><br><span class="line">&#125;,</span><br><span class="line">endpoint=<span class="string">'render.json'</span>, <span class="comment"># optional; default is render.html</span></span><br><span class="line">splash_url=<span class="string">'&lt;url&gt;'</span>, <span class="comment"># optional; overrides SPLASH_URL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里构造了一个SplashRequest对象，前两个参数依然是请求的URL和回调函数。另外我们还可以通过args传递一些渲染参数，例如等待时间wait等，还可以根据endpoint参数指定渲染接口。更多参数可以参考文档说明:https://github.eom/scrapy-plugins/scrapy-splash<span class="comment">#requestso</span></span><br></pre></td></tr></table></figure>

<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外我们也可以生成Request对象， Splash的配置通过m eta属性配置即可，代码如下：</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url, self.parse_resuIt, meta=&#123;</span><br><span class="line">	<span class="string">'splash'</span>: &#123;</span><br><span class="line">		<span class="string">'args'</span>: &#123;</span><br><span class="line">			<span class="comment"># set rendering arguments here</span></span><br><span class="line">			<span class="string">'html'</span>:<span class="number">1</span>,</span><br><span class="line">			<span class="string">'png'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="comment"># 'url' is prefilled from request url</span></span><br><span class="line">            <span class="comment"># 'http_method* is set to 'POST' for POST requests</span></span><br><span class="line">            <span class="comment"># 'body' is set to request body for POST requests</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment"># optional parameters</span></span><br><span class="line"><span class="string">'endpoint'</span>: <span class="string">'render.json'</span>, <span class="comment"># optional; default is render.json</span></span><br><span class="line"><span class="string">'splash_url'</span>: <span class="string">'&lt;url&gt;'</span>, <span class="comment">#optional; overrides SPLASH_URL</span></span><br><span class="line"><span class="string">'slot_policy'</span>: scrapy_splash.SlotPolicy.PER_DOMAIN,</span><br><span class="line"><span class="string">'splash_headers'</span>: &#123;&#125;, <span class="comment"># optional; a diet with headers sent to Splash</span></span><br><span class="line"><span class="string">'dont_process_response'</span>: <span class="literal">True</span>, <span class="comment"># optional, defauLt is False</span></span><br><span class="line"><span class="string">'dont_send_headers'</span>: <span class="literal">True</span>, <span class="comment"># optional, default is False</span></span><br><span class="line"><span class="string">'magic_response'</span>: <span class="literal">False</span>, <span class="comment"># optional, defauIt is True</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SplashRequest对象通过args来配置和Request对象通过meta来配置，两种方式达到的效果是相同的。</span><br><span class="line">本节我们要做的抓取是淘宝商品信息，涉及页面加载等待、模拟点击翻页等操作。我们可以首先定义一个Lua脚本，来实现页面加载、模拟点击翻页的功能，代码如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function main(splash, args)</span><br><span class="line">	args = &#123;</span><br><span class="line">		url=<span class="string">"https://s.taobao.com/search?q=iPad"</span>,</span><br><span class="line">		wait=<span class="number">5</span>,</span><br><span class="line">		page=<span class="number">5</span></span><br><span class="line">	&#125;</span><br><span class="line">	splash.images_enabled = false</span><br><span class="line">	<span class="keyword">assert</span>(splash:go(args.url))</span><br><span class="line">	<span class="keyword">assert</span>(splash:wait(args.wait))</span><br><span class="line">	js = st ring, forma t( <span class="string">"document. querySelec 		to:r('#mains:rp叩ager div. form &gt; input') .value=%d;</span></span><br><span class="line"><span class="string">		document.queryselector('#mainsrp-pager div.form &gt; span.btn.J_Submit').click()"</span>, args.page)</span><br><span class="line">	splash:evaljs(js)</span><br><span class="line">	<span class="keyword">assert</span>(splash:wait(args.wait))</span><br><span class="line">	<span class="keyword">return</span> splash:png()</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">  我们定义了三个参数：请求的链接url、等待时间wait、分页页码page。然后禁用图片加载，请求淘宝的商品列表页面，通过evaljs()方法调用JavaScript代码，实现页码填充和翻页点击，最后返回页面截图。我们将脚本放到Splash中运行，正常获取到页面截图</span><br><span class="line">                          </span><br><span class="line">翻页操作也成功实现</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们只需要在Spider里 用 SplashRequest对 接 Lua脚本就好了，如下所示:</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> scrapysplashtest.items <span class="keyword">import</span> Productitem</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line">script = <span class="string">"""</span></span><br><span class="line"><span class="string">function main(splash, args)</span></span><br><span class="line"><span class="string">    splash.images_enabled = false</span></span><br><span class="line"><span class="string">    assert(splash:go(args.url))</span></span><br><span class="line"><span class="string">    assert(splash:wait(args.wait))</span></span><br><span class="line"><span class="string">    js = string.format("document.querySelector('#mainsrp-pager div.form &gt; input').value=%d;</span></span><br><span class="line"><span class="string">    document.querySelector('#mainsrp-pager div.form &gt; span.btn.J_Submit').click()", args.page)</span></span><br><span class="line"><span class="string">    splash:evaljs(js)</span></span><br><span class="line"><span class="string">    assert(splash:wait(args.wait))</span></span><br><span class="line"><span class="string">    return splash:html()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaobaoSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">	name = <span class="string">'taobao'</span></span><br><span class="line">	allowed_domains = [<span class="string">'www.taobao.com'</span>]</span><br><span class="line">	base_url = <span class="string">'https://s.taobao.com/search?q='</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> keyword <span class="keyword">in</span> self.settings.get(<span class="string">'KEYWORDS'</span>):</span><br><span class="line">		<span class="keyword">for</span> page <span class="keyword">in</span> range(l, self.settings.get(<span class="string">'MAX_PAGE'</span>) + <span class="number">1</span>):</span><br><span class="line">			url = self.base_url + quote(keyword)</span><br><span class="line">			<span class="keyword">yield</span> SplashRequest(url, callback=self.parse, endpoint=<span class="string">'execute'</span>, args=&#123;<span class="string">'lua_source'</span>: script,</span><br><span class="line"><span class="string">'page'</span>: page, <span class="string">'wait: 7&#125;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们把Lua脚本定义成长字符串，通过SplashRequest的args来传递参数，接口修改为execute</span><br><span class="line">另外， args参数里还有一个lua_source字段用于指定Lua脚本内容。这样我们就成功构造了一个SplashRequest,对接Splash的工作就完成了。</span><br><span class="line"></span><br><span class="line">其他的配置不需要更改，Item、Item Pipeline等设置与上节对接Selenium的方式相同， parse()回调函数也是完全一致的。</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl taobao  </span><br><span class="line"></span><br><span class="line">由于Splash和Scrapy都支持异步处理，我们可以看到同时会有多个抓取成功的结果。在Selenium的对接过程中，每个页面渲染下载是在Downloader Middleware里完成的，所以整个过程是阻塞式的。</span><br><span class="line">Scrapy会等待这个过程完成后再继续处理和调度其他请求，这影响了爬取效率。因此使用Splash的爬取效率比Selenium高很多。</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因此，在 Scrapy中，建议使用Splash处理JavaScript动态渲染的页面。这样不会破坏Scrapy中的异步处理过程，会大大提高爬取效率。而且Splash的安装和配置比较简单，通过API调用的方式实现了模块分离，大规模爬取的部署也更加方便</span><br></pre></td></tr></table></figure>



<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
        <tag>Splash</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.1%2013.2)%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用"></a>崔庆才python3爬虫-13章 Scrapy框架的使用</h1><h2 id="Scrapy框架介绍"><a href="#Scrapy框架介绍" class="headerlink" title="Scrapy框架介绍"></a>Scrapy框架介绍</h2><h3 id="1-架构介绍"><a href="#1-架构介绍" class="headerlink" title="1. 架构介绍"></a>1. 架构介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy是一个基于Twisted的异步处理框架，是 纯 Python实现的爬虫框架，其架构清晰，模块之间的耦合程度低，可扩展性极强，可以灵活完成各种需求。我们只需要定制开发几个模块就可以轻松实现一个爬虫。</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/qkSa1P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/18/qkSa1P.md.png" alt="qkSa1P.md.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">它可以分为如下的几个部分。</span><br><span class="line">□ Engine。引擎，处理整个系统的数据流处理、触发事务，是整个框架的核心。</span><br><span class="line">□ Item。项目，它定义了爬取结果的数据结构，爬取的数据会被赋值成该Item 对象。</span><br><span class="line">□ Scheduler。调度器，接受引擎发过来的请求并将其加入队列中，在引擎再次请求的时候将请求提供给引擎。</span><br><span class="line">□ Downloader。下载器，下载网页内容，并将网页内容返回给蜘蛛。</span><br><span class="line">□ Spiders。蜘蛛，其内定义了爬取的逻辑和网页的解析规则，它主要负责解析响应并生成提取结果和新的请求。</span><br><span class="line">□ Item Pipelineo。项目管道，负责处理由蜘蛛从网页中抽取的项目，它的主要任务是清洗、验证和存储数据。</span><br><span class="line">□ Downloader Middlewares。 下载器中间件，位于引擎和下载器之间的钩子框架，主要处理引擎与下载器之间的请求及响应。</span><br><span class="line">□ Spider Middlewareso 蜘蛛中间件，位于引擎和蜘蛛之间的钩子框架，主要处理蜘蛛输入的响应和输出的结果及新的请求。</span><br></pre></td></tr></table></figure>

<h3 id="2-数据流"><a href="#2-数据流" class="headerlink" title="2. 数据流"></a>2. 数据流</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy中的数据流由引擎控制，数据流的过程如下。</span><br><span class="line">(<span class="number">1</span>) Engine首先打开一个网站，找到处理该网站的Spider,并 向 该 Spider请求第一个要爬取的URL。</span><br><span class="line">(<span class="number">2</span>) Engine从 Spider中获取到第一个要爬取的URL ,并 通 过 Scheduler以 Request的形式调度。</span><br><span class="line">(<span class="number">3</span>) Engine向 Scheduler请求下一个要爬取的URL。</span><br><span class="line">(<span class="number">4</span>) Scheduler 返回下一个要爬取的 URL给Engine, Engine 将 URL通过Downloader Middlewares 转发给Downloader下载。</span><br><span class="line">(<span class="number">5</span>) —旦页面下载完毕， Downloader生成该页面的Response, 并将其通过Downloader Middlewares发送给Engineo</span><br><span class="line">(<span class="number">6</span>) Engine从下载器中接收到Response, 并将其通过Spider Middlewares发 送 给 Spider处理。</span><br><span class="line">(<span class="number">7</span>) Spider处 理 Response, 并返回爬取到的Item 及 新 的 Request给 Engine</span><br><span class="line">(<span class="number">8</span>) Engine 将 Spider 返回的 Item 给 Item Pipeline, 将新的 Request 给 Scheduler</span><br><span class="line">(<span class="number">9</span>) 重复第(<span class="number">2</span>)步到第(<span class="number">8</span>)步,直到 Scheduler中没有更多的Request, Engine关闭该网站，爬取结束。</span><br><span class="line"></span><br><span class="line">通过多个组件的相互协作、不同组件完成工作的不同、组件对异步处理的支持， Scrapy最大限度地利用了网络带宽，大大提高了数据爬取和处理的效率。</span><br></pre></td></tr></table></figure>

<h3 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3 . 项目结构"></a>3 . 项目结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy.cfg</span><br><span class="line">project/</span><br><span class="line">	_init_.p y</span><br><span class="line">	items.py</span><br><span class="line">	pipelines.py</span><br><span class="line">    settings.py</span><br><span class="line">	middlewares.py</span><br><span class="line">	spiders/</span><br><span class="line">	_init _.py</span><br><span class="line">	spiderl.py</span><br><span class="line">	spider2.py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里各个文件的功能描述如下。</span><br><span class="line">□ scrapy.cfg：它是Scrapy项目的配置文件，其内定义了项目的配置文件路径、部署相关信息等内容。</span><br><span class="line">□ item s.py：它定义Item数据结构，所有的Item的定义都可以放这里。</span><br><span class="line">□ pipelines.py：它定义 Item Pipeline的实现，所有的 Item Pipeline的实现都可以放这里。</span><br><span class="line">□ settings.py： 它定义项目的全局配置。</span><br><span class="line">□ middlew ares.py: 它定义Spider Middlewares和Downloader Middlewares的实现。</span><br><span class="line">□ spiders：其内包含一个个Spider的实现，每个Spider都有一个文件。</span><br></pre></td></tr></table></figure>

<h3 id="4-结语"><a href="#4-结语" class="headerlink" title="4 .结语"></a>4 .结语</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">本节介绍了 Scrapy框架的基本架构、数据流过程以及项目结构。后面我们会详细了解Scrapy的用法，感受它的强大。</span><br></pre></td></tr></table></figure>

<h2 id="Scrapy-入门"><a href="#Scrapy-入门" class="headerlink" title="Scrapy 入门"></a>Scrapy 入门</h2><h3 id="Scrapy安装"><a href="#Scrapy安装" class="headerlink" title="Scrapy安装"></a>Scrapy安装</h3><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创 建 一 个 Scrapy项目，项目文件可以直接用scrapy命令生成，命令如下所示：</span><br><span class="line">scrapy startproject tutorial</span><br><span class="line">这个命令可以在任意文件夹运行</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这个命令将会创</span><br><span class="line">建一个名为tutorial的文件夹，文件夹结构如下所示：</span><br><span class="line">scrapy.cfg <span class="comment"># Scrapy部署时的配置文件</span></span><br><span class="line">tutorial <span class="comment"># 项目的模块，需要从这里引入</span></span><br><span class="line"></span><br><span class="line">_init_.py</span><br><span class="line">items.py <span class="comment"># Items的定义 ，定义爬取的数据结构</span></span><br><span class="line">middlewares.py <span class="comment"># Middlewares的定义 ，定义爬取时的中间件</span></span><br><span class="line">pipelines.py <span class="comment"># Pipelines的定义 ，定义数据管道</span></span><br><span class="line">settings.py <span class="comment"># 配置文件</span></span><br><span class="line">spiders <span class="comment"># 放置Spiders的文件夹</span></span><br><span class="line">_init_.py</span><br></pre></td></tr></table></figure>

<h3 id="创建Spider"><a href="#创建Spider" class="headerlink" title="创建Spider"></a>创建Spider</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Spider是自己定义的类，Scrapy用它来从网页里抓取内容，并解析抓取的结果。不过这个类必须继承Scrapy提供的Spider类 scrapy.Spider,还要定义Spider的名称和起始请求，以及怎样处理爬取后的结果的方法。</span><br><span class="line">也可以使用命令行创建一个Spidero 比如要生成Quotes这个 Spider,可以执行如下命令：</span><br><span class="line">cd tutorial</span><br><span class="line">scrapy genspider quotes quotes.toscrape.com</span><br><span class="line"></span><br><span class="line">进入刚才创建的tutorial文件夹，然 后 执 行 genspidet命令。第一个参数是Spider的名称，第二个参数是网站域名。执行完毕之后， spiders文件夹中多了一个quotes.py,它就是刚刚创建的Spider,</span><br><span class="line"></span><br><span class="line">内容如下所示：</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">"quotes"</span></span><br><span class="line">	allowed_domains = [<span class="string">"quotes.toscrape.com"</span>]</span><br><span class="line">	start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里有三个属性--- name、 allowed_domains和 start_ur ls ,还有一个方法parse。</span><br><span class="line">□ name,它是每个项目唯一的名字，用来区分不同的Spider。</span><br><span class="line">□ allowed_domains,它是允许爬取的域名，如果初始或后续的请求链接不是这个域名下的，则请求链接会被过滤掉。</span><br><span class="line">□ start_urls ,它包含了 Spider在启动时爬取的url列 表 ，初始请求是由它来定义的。</span><br><span class="line">□ parse ,它是 Spider的一个方法。默认情况下，被调用时sta rt_ u rls里面的链接构成的请求完成下载执行后，返回的响应就会作为唯一的参数传递给这个函数。该方法负责解析返回的响应 、提取数据或者进一步生成要处理的请求。</span><br></pre></td></tr></table></figure>

<h3 id="创建Item"><a href="#创建Item" class="headerlink" title="创建Item"></a>创建Item</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Item是保存爬取数据的容器，它的使用方法和字典类似。不过，相比字典，Item多了额外的保护机制，可以避免拼写错误或者定义字段错误。</span><br><span class="line">创建Item需要继承scrapy.Item类 ，并且定义类型为scrapy.Field的字段。观察目标网站，我们可以获取到到内容有text、author、tags。</span><br><span class="line">定义 Item ,此时将items.py修改如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ouoteltem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">	text = scrapy.Field()</span><br><span class="line">	author = scrapy.Field()</span><br><span class="line">	tags = scrapy.Field()</span><br><span class="line">这里定义了三个字段，接下来爬取时我们会使用到这个Item</span><br></pre></td></tr></table></figure>

<h3 id="解析Response"><a href="#解析Response" class="headerlink" title="解析Response"></a>解析Response</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">前面我们看到， parse()方法的参数 resposne是start_urls里面的链接爬取后的结果。所以在parse()方法中，我们可以直接对response变量包含的内容进行解析，比如浏览请求结果的网页源代码，或者进一步分析源代码内容，或者找岀结果中的链接而得到下一个请求。</span><br><span class="line">我们可以看到网页中既有我们想要的结果，又有下一页的链接，这两部分内容我们都要进行处理</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先看看网页结构，如 图 13・2所示。每一页都有多个class为quote的区块，每个区块内都包含text、author、tags。 那么我们先找出所有的quote ,然后提取每一个quote中的内容。</span><br><span class="line"></span><br><span class="line">提取的方式可以是CSS选择器或XPath选择器。在这里我们使用CSS选择器进行选择， parse()</span><br><span class="line">方法的改写如下所示：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	quotes = response.css(<span class="string">'.quote'</span>)</span><br><span class="line">	<span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">	text = quote.css(<span class="number">1</span> .text::text<span class="string">').extract_first()</span></span><br><span class="line"><span class="string">	author = quote.css('</span>.autho:r::text<span class="string">').extrmct_first()</span></span><br><span class="line"><span class="string">	tags = quote.css('</span>.tags .tag::text<span class="string">').extract()</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">这里首先利用选择器选取所有的quote,并将其赋值为quotes变量,然后利用<span class="keyword">for</span>循环对每个quote遍历，解析每个quote的内容。</span><br><span class="line">对 text来说，观察到它的class为 text,所以可以用.text选择器来选取，这个结果实际上是整个带有标签的节点，要获取它的正文内容，可以加::text来获取。这时的结果是长度为1 的列表，所以还需要用extract_first()方法来获取第一个元素。而 对 于tags来说，由于我们要获取所有的标签，所以用extract()方法获取整个列表即可。</span><br></pre></td></tr></table></figure>

<h3 id="使用Item"><a href="#使用Item" class="headerlink" title="使用Item"></a>使用Item</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">上文定义了Item ,接下来就要使用它了。Item可以理解为一个字典，不过在声明的时候需要实例化。然后依次用刚才解析的结果赋值Item 的每一个字段，最后 将Item返回即可。</span><br><span class="line">OuotesSpider的改写如下所示：</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> Ouoteltem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">"quotes"</span></span><br><span class="line">	allowed_domains = [<span class="string">"quotes.toscrape.com"</span>]</span><br><span class="line">	start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">		quotes = response.css(<span class="string">'.quote'</span>)</span><br><span class="line">		<span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">			item = QuoteItem()</span><br><span class="line">			item[<span class="string">'text'</span>]=quote.css(<span class="string">'.text::text).extract_first()</span></span><br><span class="line"><span class="string">			item['</span>autho<span class="string">r'] = quote.css('</span>.author::text<span class="string">').extract_first()</span></span><br><span class="line"><span class="string">			item['</span>tags<span class="string">'] = quote.css('</span>.tags .tag::text<span class="string">').extract()</span></span><br><span class="line"><span class="string">			yield item</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如此一来，首页的所有内容被解析出来，并被赋值成了一个个Quoteltem</span><br></pre></td></tr></table></figure>

<h3 id="后续Request"><a href="#后续Request" class="headerlink" title="后续Request"></a>后续Request</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">上面的操作实现了从初始页面抓取内容。那么，下一页的内容该如何抓取？这就需要我们从当前页面中找到信息来生成下一个请求，然后在下一个请求的页面里找到信息再构造再下一个请求。 这样循环往复迭代，从而实现整站的爬取。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将刚才的页面拉到最底部，这里有一个Next按钮。查看它的源代码，可以发现它的链接是/page/<span class="number">2</span>/,全链接就是： http://quotes.toscrape.com/page/<span class="number">2</span>,通过这个链接我们就可以构造下一个请求</span><br><span class="line">    </span><br><span class="line">构造请求时需要用到scrapy.Request 这里我们传递两个参数----url和callback,这两个参数的</span><br><span class="line">说明如下。</span><br><span class="line">url：它是请求链接。</span><br><span class="line">callback：它是回调函数。当指定了该回调函数的请求完成之后，获取到响应，引擎会将该响应作为参数传递给这个回调函数。回调函数进行解析或生成下一个请求，回调函数如上文的parse()所示。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">由于parse()就是解析text、author、tags的方法，而下一页的结构和刚才已经解析的页面结构是一样的，所以我们可以再次使用parse()方法来做页面解析。</span><br><span class="line">接下来我们要做的就是利用选择器得到下一页链接并生成请求，在 parse。方法后追加如下的代码:</span><br><span class="line">next = response.css(<span class="string">' .pager .next a: :attr(href)'</span>).extract_first()</span><br><span class="line">url = response.urljoin(next)</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一句代码首先通过CSS选择器获取下一个页面的链接，即要获取a超链接中的href属性。这里用到了::attr(href)操作。然后再调用extract_first()方法获取内容。</span><br><span class="line">第二句代码调用了 urljoin()方法，urljoin()方法可以将相对URL构造成一个绝对的URL。例如，</span><br><span class="line">获取到的下一页地址是/page/<span class="number">2</span>, urljoin()方法处理后得到的结果就是： http://quotes.toscrape.eom/page/<span class="number">2</span>/</span><br><span class="line">第三句代码通过url和callback变量构造了一个新的请求，回调函数callback依然使用parse()</span><br><span class="line">方法。这个请求完成后，响应会重新经过parse方法处理，得到第二页的解析结果，然后生成第二页的下一页，也就是第三页的请求。这样爬虫就进入了一个循环，直到最后一页。</span><br><span class="line">通过几行代码，我们就轻松实现了一个抓取循环，将每个页面的结果抓取下来了。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> Quoteitem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">"quotes"</span></span><br><span class="line">	allowed_domains = [<span class="string">"quotes.toscrape.com"</span>]</span><br><span class="line">	start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	quotes = response.css(<span class="string">'.quote'</span>)</span><br><span class="line">	<span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">		item = Quoteltem()</span><br><span class="line">		item[<span class="string">'text'</span>] = 	quote.css(<span class="string">'.text::text'</span>).extract_first()</span><br><span class="line">		item[<span class="string">'author'</span>] = quote.css(<span class="number">1</span> .author::text<span class="string">').extract_first()</span></span><br><span class="line"><span class="string">		item['</span>tags， ] = quote.css(<span class="string">'.tags .tag::text'</span>).extracE()</span><br><span class="line">		<span class="keyword">yield</span> item</span><br><span class="line">	next = response.css(<span class="string">'.pager .next a::attr("href")'</span>).extract_first()</span><br><span class="line">	url = response.urljoin(next)</span><br><span class="line">	<span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">接下来，进入目录，运行如下命令：</span><br><span class="line">scrapy crawl quotes</span><br><span class="line">就可以看到Scrapy的运行结果了</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	首先， Scrapy输出了当前的版本号以及正在启动的项目名称。接着输出了当前settings.py中一些重写后的配置。然后输出了当前所应用的Middlewares和 Pipelines。Middlewares默认是启用的，可以在settings.py中修改。 Pipelines默认是空，同样也可以在settings.py中配置。后面会对它们进行讲解。</span><br><span class="line">	接下来就是输出各个页面的抓取结果了，可以看到爬虫一边解析，一边翻页，直至将所有内容抓取完毕，然后终止。</span><br><span class="line">	最后，Scrapy输岀了整个抓取过程的统计信息，如请求的字节数、请求次数、响应次数、完成原因等。</span><br><span class="line">整个Scrapy程序成功运行。我们通过非常简单的代码就完成了一个网站内容的爬取，这样相比之前一点点写程序简洁很多</span><br></pre></td></tr></table></figure>

<h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行完 Scrapy后 ，我们只在控制台看到了输出结果。如果想保存结果该怎么办呢？</span><br><span class="line">要完成这个任务其实不需要任何额外的代码， Scrapy提供的Feed Exports可以轻松将抓取结果输出。例如，我们想将上面的结果保存成JSON文件，可以执行如下命令：</span><br><span class="line">scrapy crawl quotes -o quotes.json</span><br><span class="line">命令运行后，项目内多了一个quotes.json文件，文件包含了刚才抓取的所有内容，内容是JSON格式。</span><br><span class="line"></span><br><span class="line">另外我们还可以每一个Item输出一行JSO N ,输出后缀为jl, 为jsonline的缩写，命令如下所示:</span><br><span class="line">scrapy crawl quotes -o quotes.jl</span><br><span class="line">或</span><br><span class="line">scrapy crawl quotes -o quotes.jsonlines</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出格式还支持很多种，例如csv、xml、pickle、marshal等，还支持 ftp、 s3等远程输出，另外还可以通过自定义ItemExporter来实现其他的输出。</span><br><span class="line"></span><br><span class="line">例如，下面命令对应的输出分别为csv、 xml、 pickle、 marshal格式以及 ftp 远程输出：</span><br><span class="line">scrapy crawl quotes -o quotes.csv</span><br><span class="line">scrapy crawl quotes -o quotes.xml</span><br><span class="line">scrapy crawl quotes -o quotes.pickle</span><br><span class="line">scrapy crawl quotes -o quotes.marshal</span><br><span class="line">scrapy crawl quotes -o ftp://user:<span class="keyword">pass</span>@ftp.example.com/path/to/quotes.csv</span><br><span class="line">    </span><br><span class="line">其中， ftp输出需要正确配置用户名、密码 、地址 、输出路径，否则会报错。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通 过 Scrapy提供的Feed Exports,我们可以轻松地输出抓取结果到文件。对于一些小型项目来说,</span><br><span class="line">这应该足够了。不过如果想要更复杂的输出，如输出到数据库等，我们可以使用Item Pileline来完成</span><br></pre></td></tr></table></figure>

<h3 id="使用Item-Pipeline"><a href="#使用Item-Pipeline" class="headerlink" title="使用Item Pipeline"></a>使用Item Pipeline</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果想进行更复杂的操作，如将结果保存到MongoDB数据库，或者筛选某些有用的Item ,则我们可以定义Item Pileline来实现。</span><br><span class="line">Item Pipeline为项目管道。当Item生成后，它会自动被送到Item Pipeline进行处理，我们常用Item</span><br><span class="line">Pipeline来做如下操作。</span><br><span class="line">	□ 清理HTML数据。</span><br><span class="line">	□ 验证爬取数据，检查爬取字段。</span><br><span class="line">	□ 査重并丢弃重复内容。</span><br><span class="line">	□ 将爬取结果保存到数据库。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要实现Item Pipeline很简单，只需要定义一个类并实现process_item()方法即可。启用Item Pipeline后，Item Pipeline会自动调用这个方法。 process_item()方法必须返回包含数据的字典或Item对象，或者抛出Dropltem异常。</span><br><span class="line"></span><br><span class="line">process_item()方法有两个参数。一个参数是item ,每次Spider生成的Item都会作为参数传递过来。另一个参数是spider,就是Spider的实例。</span><br><span class="line"></span><br><span class="line">接下来，我们实现一个Item Pipeline,筛掉text长度大于<span class="number">50</span>的Item,并将结果保存到MongoDB</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">修改项目里的pipelines.py文件，之前用命令行自动生成的文件内容可以删掉，增加一个TextPipeline类，内容如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self)</span>:</span></span><br><span class="line">	self.limit = <span class="number">50</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> item[<span class="string">'text'</span>]:</span><br><span class="line">			<span class="keyword">if</span> len(item[<span class="string">'text'</span>]) &gt; self.limit:</span><br><span class="line">				item[<span class="string">'text'</span>] = item[<span class="string">'text'</span>][<span class="number">0</span>:self.limit].rstrip() + <span class="string">'...'</span></span><br><span class="line">			<span class="keyword">return</span> item</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> DropItem(<span class="string">'Missing Text'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这段代码在构造方法里定义了限制长度为<span class="number">50</span>, 实现了 process_item()方法，其参数是item和spider。首先该方法判断item 的text属性是否存在，如果不存在，则抛出Dmpltem异常；如果存在，</span><br><span class="line">再判断长度是否大于<span class="number">50</span>, 如果大于，那就截断然后拼接省略号，再将item 返回即可。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来，我们将处理后的item存入MongoDB,定义另外一个Pipelineo同样在pipelines.py中，</span><br><span class="line">我们实现另一个类MongoPipeline,内容如下所示：</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">		self.mongo_uri = mongo_uri</span><br><span class="line">		self.mongo_db = mongo_db</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> cls(</span><br><span class="line">mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">		self.db = self.client[self.mongo_db]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">		name = item._ class_._ name_</span><br><span class="line">		self.db[name].insert(diet(item))</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MongoPipeline类实现了 API定义的另外几个方法。</span><br><span class="line">□ from_crawler 它是一个类方法，用@classmethod标识，是一种依赖注入的方式。它的参数就是crawler,通过craw ler我们可以拿到全局配置的每个配置信息。在全局配置settings.py中，我们可以定义MONGO_URI和 MONGO_DB来指定MongoDB连接需要的地址和数据库名称，拿到配置信息之后返回类对象即可。所以这个方法的定义主要是用来获取settings.py中的配置的。</span><br><span class="line">□ open_spider。当Spider开启时，这个方法被调用。上文程序中主要进行了一些初始化操作。</span><br><span class="line">□ close_spider 当Spider关闭时，这个方法会调用。上文程序中将数据库连接关闭。</span><br><span class="line"></span><br><span class="line">□ 最主要的process_item()方法则执行了数据插入操作。</span><br><span class="line"></span><br><span class="line">定义好TextPipeline和 MongoPipeline这两个类后，我们需要在settings.py中使用它们MongoDB的连接信息还需要定义。</span><br><span class="line">我们在settings.py中加入如下内容:</span><br><span class="line">    </span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"><span class="string">'tutorial.pipelines.TextPipeline'</span>: <span class="number">300</span>,</span><br><span class="line"><span class="string">'tutorial.pipelines.MongoPipeline'</span>: <span class="number">400</span>,</span><br><span class="line">    </span><br><span class="line">MONGO_URI=<span class="string">'localhost'</span></span><br><span class="line">MONGO_DB=<span class="string">'tutorial'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">赋值ITEM_PIPELINES字典，键名是Pipeline的类名称，键值是调用优先级，是一个数字，数字越小则对应的Pipeline越先被调用。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">再重新执行爬取，命令如下所示:</span><br><span class="line">scrapy crawl quotes</span><br><span class="line">爬取结束后， MongoDB中创建了一个tutorial的数据库、 Quoteitem的表</span><br></pre></td></tr></table></figure>

<h3 id="Item-Adaptor"><a href="#Item-Adaptor" class="headerlink" title="Item Adaptor"></a>Item Adaptor</h3><p><a href="https://docs.scrapy.org/en/latest/topics/items.html?highlight=ItemAdapter#itemadapter.ItemAdapter" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##  结语</span></span><br><span class="line"></span><br><span class="line">~~~python</span><br><span class="line"></span><br><span class="line">我们通过抓取Quotes网站完成了整个Scrapy的简单入门。但这只是冰山一角， 还有很多内容等待我们去探索。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Selector的使用</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8(13.3)-%20Selector%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用-Selector的使用"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用-Selector的使用" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用-Selector的使用"></a>崔庆才python3爬虫-13章 Scrapy框架的使用-Selector的使用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们之前介绍了利用Beautiful Soup, pyquery以及正则表达式来提取网页数据，这确实非常方便,而 Scrapy还提供了自己的数据提取方法，即 Selector ( 选择器)。 Selector是基于lxml来构建的，支持XPath选择器、CSS选择器以及正则表达式，功能全面，解析速度和准确度非常高</span><br></pre></td></tr></table></figure>

<h2 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Selector个可以独立使用的模块。我们可以直接利用S elector这个类来构建一个选择器对象,然后调用它的相关方法如xpath()、css()等来提取数据。</span><br><span class="line">例如，针对一段HTML代码，我们可以用如下方式构建S elector对象来提取数据：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line">body = <span class="string">'&lt;htm lxheacl&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/bodyx/html&gt;'</span></span><br><span class="line">selector = Selector(text=body)</span><br><span class="line">title = selector.xpath(<span class="string">'//title/text()).extract_first()</span></span><br><span class="line"><span class="string">print(title )</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行结果如下所示：</span><br><span class="line">Hello World</span><br><span class="line">我们在这里没有在Scrapy框架中运行，而是把 Scrapy中的 Selector单独拿出来使用了，构建的时候传入t e x t 参数，就生成了一个S electo r选择器对象，然后就可以像前面我们所用的Scrapy中的解析方式一样，调用xpath()、css()等方法来提取了。</span><br><span class="line">在这里我们查找的是源代码中的title中的文本，在XPath选择器最后加text() 方法就可以实现文本的提取了。</span><br><span class="line">以上内容就是Selector的直接使用方式。同 Beautiful Soup等库类似， Selector其实也是强大的网页解析库。如果方便的话，我们也可以在其他项目中直接使用Selector来提取数据。</span><br><span class="line">接下来，我们用实例来详细讲解Selector的用法。</span><br></pre></td></tr></table></figure>

<h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><p><a href="https://docs.scrapy.org/en/latest/topics/shell.html" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">由于Selector主要是与Scrapy结合使用，如 Scrapy的回调函数中的参数response直接调用xpath()或者css()方法来提取数据，所以在这里我们借助Scrapy shell来模拟Scrapy请求的过程，来讲解相关的提取方法</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们用官方文档的一个样例页面来做演不:http://doc.scrapy.org/en/latest/_static/selectors-sample1.html0</span><br><span class="line">        </span><br><span class="line">开启Scrapy shell, 在命令行输入如下命令：</span><br><span class="line">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-samplel.html</span><br><span class="line">    </span><br><span class="line">我们就进入到Scrapy shell模式。这个过程其实是， Scmpy发起了一次请求，请求的URL就是刚才</span><br><span class="line">命令行下输入的U R L ,然后把一些可操作的变量传递给我们，如 request. response等</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们可以在命令行模式下输入命令调用对象的一些操作方法，回车之后实时显示结果。这与</span><br><span class="line">Python的命令行交互模式是类似的。</span><br><span class="line">接下来，演示的实例都将页面的源码作为分析目标，页面源码如下所示：</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">（因为很多网站都有反爬机制,其实使用 scrapy shell 的时候就是以 scrapy 爬虫的标志进行访问的，所以网站回拒绝爬虫的服务，返回 <span class="number">403</span>）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>(只治标，不治本)在使用scrapy 的时候在最后加上 -s USER-AGENT=<span class="string">"Mozills/5.0"</span></span><br><span class="line"></span><br><span class="line">scrapy shell <span class="string">"https://movie.douban.com"</span> -s USER_AGENT=<span class="string">'Mozills/5.0’</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>(半治标半治本)</span><br><span class="line">修改scrapy 中 setting.py 文件的 USER-AGENT</span><br><span class="line">　　　　修改前：</span><br><span class="line"><span class="comment">#USER_AGENT = 'yi (+http://www.yourdomain.com)'</span></span><br><span class="line">　　    修改后：</span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0'</span></span><br><span class="line">　　</span><br><span class="line">注意：</span><br><span class="line">　　这里的 scrapy 只能在 scrapy 中使用，直接在cmd 中使用不生效，这就是作者说的半指标半治本</span><br><span class="line">scrapy shell https://movie.douban.com/top250</span><br><span class="line">我们可以看见返回成功的信息：</span><br><span class="line">response   &lt;<span class="number">200</span> https://movie.douban.com/top250&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>(治愈)</span><br><span class="line">　直接修改 python 的defult_setting.py 文件里默认的 USER-AGENT值</span><br><span class="line">（那么之后不管实在项目中还是再cmd中使用 scrapy shell ，都是以浏览器的标识阱行访问网站的）、</span><br><span class="line">　那么 找到 defult_setting.py 文件的位置；</span><br><span class="line">　一般在你安装 python 的目录下的 /lib/site-package/scrapy/deting.py中 找到 user-agent进行修改：</span><br><span class="line">　　　　修改前：</span><br><span class="line">USER_AGENT = <span class="string">'Scrapy/%s (+http://scrapy.org)'</span> % import_module(<span class="string">'scrapy'</span>).__version__</span><br><span class="line">　　　　修改后：</span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0'</span></span><br></pre></td></tr></table></figure>



<h2 id="XPath选择器"><a href="#XPath选择器" class="headerlink" title="XPath选择器"></a>XPath选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">进入Scrapy shell之后，我们将主要操作response这个变量来进行解析。因为我们解析的是HTML代码，Selector将自动使用HTML语法来分析。</span><br><span class="line">response有一个属性selector ,我们调用response.selector返回的内容就相当于用response的body构造了一个Selector对象。通过这个Selector对象我们可以调用解析方法如xpath()、css()等，通过向方法传入XPath或 CSS选择器参数就可以实现信息的提取。</span><br><span class="line">我们用一个实例感受一下，如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们用一个实例感受一下，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = response.selector.xpath(<span class="string">'//a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="imagel.html"&gt;Name: My image 1 &lt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="image2.html"&gt;Name: My image 2 &lt;*&gt;,</span></span><br><span class="line"><span class="string">&lt;Selector xpath='</span>//a<span class="string">' data='</span>&lt;a href=<span class="string">"image3.html"</span>&gt;Name: My image <span class="number">3</span> &lt;*&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="image4.html"&gt;Name: My image 4 &lt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'//a'</span> data=<span class="string">'&lt;a href="images.html"&gt;Name: My image 5 &lt;*&gt;]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; type(result)</span></span><br><span class="line"><span class="string">scrapy.selector.unified.SelectorList</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">打印结果的形式是Selector组成的列表，其实它是Selector List类型， SelectorList和Selector都可以继续调用xpath()和css()等方法来进一步提取数据。</span><br><span class="line">在上面的例子中，我们提取了a节点。接下来，我们尝试继续调用xpath()方法来提取a节点内包含的img节点，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.xpath(<span class="string">'./img'</span>)</span><br><span class="line">[&lt;Selector xpath=<span class="string">'./img'</span> dmta=<span class="string">'&lt;img src="imagel_thumb.jpg"&gt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'./img'</span> data=<span class="string">'&lt;img src="image2_thumb.jpg"&gt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'./img'</span> data=<span class="string">'&lt;img src="image3_thumb.jpg"&gt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'./img'</span> data=<span class="string">'&lt;img src="image4_thumb.jpg"&gt;'</span>&gt;,</span><br><span class="line">&lt;Selector xpath=<span class="string">'./img'</span> data=<span class="string">'&lt;img src="image5_thumb.jpg"&gt;'</span>&gt;]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们获得了a节点里面的所有img节点，结果为<span class="number">5</span></span><br><span class="line">值得注意的是，选择器的最前方加.(点)，这代表提取元素内部的数据，如果没有加点，则代表从根节点开始提取。此处我们用了./img的提取方式，则代表从a节点里进行提取。如果此处我们用//img ,则还是从html节点里进行提取。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们刚才使用了response.selector.xpath()方法对数据进行了提取。 Scrapy提供了两个实用的快捷方法，response.xpath()和 response.css(), 它们二者的功能完全等同于 response. selector.xpath()和 response.selector.css()o 方便起见，后面我们统一直接调用response的 xpath()和 css()方法进行选择。</span><br><span class="line"></span><br><span class="line">现在我们得到的是SelectorList类型的变量，该变量是由Selector对象组成的列表。我们可以用索引单独取出其中某个Selector元素，如下所示：</span><br><span class="line">» &gt; result[<span class="number">0</span>]</span><br><span class="line">&lt;Selector xpath = <span class="string">'//a'</span> data=<span class="string">'&lt;a href="imagel.html"&gt;Name: My image 1 &lt;'</span>&gt;</span><br><span class="line"></span><br><span class="line">我们可以像操作列表一样操作这个SelectorList</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是现在获取的内容是Selector或者SelectorList类型，并不是真正的文本内容。那么具体的内容怎么提取呢？</span><br><span class="line">比如我们现在想提取出a节点元素，就可以利用extract ()方法，如下所示：</span><br><span class="line">» &gt; result.extract()</span><br><span class="line">[ <span class="string">'&lt;a href=" imagel.html"&gt;Name:My image1&lt;brximg src= "im a g e l_ th u m b .jp g "x/a &gt; '</span>, <span class="string">'&lt;a href="im age2. html"&gt;Name:</span></span><br><span class="line"><span class="string">My image 2 &lt; brxim g src="im age2_thum b.jpg"x/a&gt;'</span>, <span class="string">' &lt;a h re f ="image3. html"&gt;Name: My image 3 &lt; brxim g</span></span><br><span class="line"><span class="string">src="image3_thumb.jpg"x/a&gt;'</span>, <span class="string">'&lt;a href ="image4.html"&gt;Name: My image 4 &lt;brximg src="image4_thumb.jpg"x/a&gt;'</span>,</span><br><span class="line"><span class="string">' &lt;a h re f=" images. htm l" &gt;Name: My image 5 &lt; b rxim g src="im age5_thum b.jpg"x/a&gt;, ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 这里使用了extract()方法，我们就可以把真实需要的内容获取下来。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们还可以改写XPath表达式，来选取节点的内部文本和属性，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a/text()'</span>).extract()</span><br><span class="line">[ <span class="string">' Name: My image 1 '</span>, <span class="string">'Name: My image 2 '</span> , <span class="string">'Name: My image 3 '</span>, <span class="string">' Name: My image 4 '</span> , <span class="string">'Name: My image 5 '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re sponse .xpath(<span class="string">'//a/@href'</span> ).extract()</span><br><span class="line">[ <span class="string">'im a g e l.h tm l'</span>, <span class="string">'im ag e2.h tm l'</span>, <span class="string">' image3. h tm l'</span>, <span class="string">'im ag e4.h tm l'</span>, <span class="string">'im ag e5.h tm l'</span>]</span><br><span class="line"></span><br><span class="line"> 我们只需要再加一层/text()就可以获取节点的内部文本，或者加一层/@href就可以获取节点的href属性。其中，@符号后面内容就是要获取的属性名称。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是这里有一个问题：如果符合要求的节点只有一个，那么返回的结果会是什么呢？我们再用一个实例来感受一下，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[@href= "imagel.html"]/text()'</span> ) .extract()</span><br><span class="line">[<span class="string">'Name: My image1'</span>]</span><br><span class="line"></span><br><span class="line">我们用属性限制了匹配的范围，使 XPath只可以匹配到一个元素。然后用 extract()方法提取结果，其结果还是一个列表形式，其文本是列表的第一个元素。但很多情况下，我们其实想要的数据就是第一个元素内容，这里我们通过加一个索引来获取，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a [@href="imagel.html"]/text ()'</span>) .extract()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">' Name: My image 1 '</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是，这个写法很明显是有风险的。一旦XPath有问题，那么extract()后的结果可能是一个空列表。如果我们再用索引来获取，那不就会可能导致数组越界吗？</span><br><span class="line">所以，另外一个方法可以专门提取单个元素，它叫作extract_first() 我们可以改写上面的例子</span><br><span class="line">如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath (<span class="string">'//a [@href="imagel.html"]/text()'</span>).ex tract_first()</span><br><span class="line"><span class="string">' Name: My image 1 '</span></span><br><span class="line">这样，我们直接利用e x tra c t_ first()方法将匹配的第一个结果提取出来，同时我们也不用担心数组越界的问题。</span><br><span class="line">另外我们也可以为extract_first()方法设置一个默认值参数,这样当XPath规则提取不到内容时会直接使用默认值。例 如 将 XPath改成一个不存在的规则，重新执行代码，如下所示：</span><br><span class="line">&gt; » response.xpath (<span class="string">'//a[@href="imagel"]/text()'</span>).extract_ first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a[@href="im ag el"]/text()'</span>).extract_ first(<span class="string">'DefaultImage'</span>)</span><br><span class="line"><span class="string">'DefaultImage'</span></span><br><span class="line">这里 如果XPath匹配不到任何元素，调用extract_first()会返回空，也不会报错。</span><br><span class="line"></span><br><span class="line">在第二行代码中，我们还传递了一个参数当作默认值，如 Default Image0 这样如果XPath匹配不到结果的话，返回值会使用这个参数来代替，可以看到输出正是如此。</span><br><span class="line">现在为止，我们了解了 Scrapy中 的 XPath的相关用法，包括嵌套查询、提取内容、提取单个内容、获取文本和属性等。</span><br></pre></td></tr></table></figure>

<h3 id="XPath用法总结"><a href="#XPath用法总结" class="headerlink" title="XPath用法总结"></a>XPath用法总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>找标签</span><br><span class="line">./xxx</span><br><span class="line">//xxx</span><br><span class="line">/xxx</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>获取内容</span><br><span class="line">response.xpath(...../xxxx/text())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span>获取真实标签</span><br><span class="line">response.xpath(.../xxxx).extract()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span>获取属性</span><br><span class="line">response.xpath(.../xxxx/@herf) <span class="comment"># @符号后面内容就是要获取的属性名</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span>属性限制</span><br><span class="line">response.xpath(<span class="string">'//a[@href="imagel.html"]/text()'</span> )</span><br></pre></td></tr></table></figure>

<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来，我们看看CSS选择器的用法</span><br><span class="line">Scrapy的选择器同时还对接了CSS选择器，使用response.css()方法可以使用CSS选择器来选择对应的元素。</span><br><span class="line">例如在上文我们选取了所有的a节点，那么CSS选择器同样可以做到，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a'</span>)</span><br><span class="line">[&lt; S elector xp a th = <span class="string">'d e sce n d a n t-o r-se lf: :a '</span> data=<span class="string">'&lt;a h re f= "imagel.html"&gt;Name: My image 1 &lt; '</span>&gt; ,</span><br><span class="line">&lt;S elector xp a th = <span class="string">'d e sce n d a n t-o r-se lf: :a '</span> data=<span class="string">'&lt;a h re f= "image2. h tm l" &gt;Name: My image 2 &lt; '</span>&gt; ,</span><br><span class="line">&lt;S elector xp a th = <span class="string">'d e sce n d a n t-o r-se lf: :a '</span> data=<span class="string">'&lt;a h re f= "image3. html"&gt;Name: My image 3 &lt; &gt;</span></span><br><span class="line"><span class="string">&lt;S elector xp a th = '</span>d e sce n d a n t-o r-se lf: :a <span class="string">' data='</span>&lt;a h re f= <span class="string">"image4. html"</span>&gt;Name: My image <span class="number">4</span> &lt; <span class="string">'&gt; ,</span></span><br><span class="line"><span class="string">&lt;S elector xp a th = '</span>d e sce n d a n t-o r-se lf: :a <span class="string">' data='</span>&lt;a h re f= <span class="string">"images. h tm l"</span> &gt;Name: My image <span class="number">5</span> &lt; <span class="string">'&gt; ]</span></span><br><span class="line"><span class="string">同样，调 用 ex tract()方法就可以提取出节点，如下所示：</span></span><br><span class="line"><span class="string">» &gt; re s p o n s e .c s s ('</span>a <span class="string">').e x tra c t。</span></span><br><span class="line"><span class="string">[ '</span>&lt;a h re f=<span class="string">" im age l. h tm l"</span> &gt;Name: My image <span class="number">1</span> &lt; brx im g src = <span class="string">"im a g e l_ th u m b .jp g "</span>x/a &gt; <span class="string">', '</span>&lt;a h re f=<span class="string">" image2. htm l"</span> &gt;Name:</span><br><span class="line">My image <span class="number">2</span> &lt; brx im g src=<span class="string">"im age2 _thu m b.jp g"</span>x/a &gt; <span class="string">', '</span>&lt;a href=<span class="string">"image3.html"</span>&gt;Name: My image <span class="number">3</span> &lt; brx im g</span><br><span class="line">src="image3_thumb.jpg"&gt;&lt;/a&gt;*, '&lt;a hre f=" image4.html"&gt;Name: My image 4 &lt;brxim g src="image4_thumb.jp g " x /a &gt; ',</span><br><span class="line"><span class="string">' &lt;a h re f ="image5.html"&gt;Name: My image 5 &lt; brx im g src="image5_thumb. jp g " x / a &gt; '</span>]</span><br><span class="line">用法和 XPath选择是完全一样的。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外，我们也可以进行属性选择和嵌套选择，如下所示：</span><br><span class="line">&gt; » response.css(<span class="string">'a [h re f="im a g e l. html"]'</span>).extract()</span><br><span class="line">[ <span class="string">'&lt;a href="imagel.htm l"&gt;Name: My image 1 &lt; brx im g src = "im a g e l_ th u m b .jp g "x/a &gt; '</span>]</span><br><span class="line">&gt; » response.css(<span class="string">'a[href="imagel.html"] img'</span>).extract()</span><br><span class="line">[ <span class="string">'&lt;img src=" imagel_thumb. jp g " &gt; '</span>]</span><br><span class="line"></span><br><span class="line">这里用[href=<span class="string">"image.html"</span>]限定了href属性，可以看到匹配结果就只有一个了。另外如果想找a节点内的 img节点，只需要再加一个空格和img即可。选择器的写法和标准CSS选择器写法如出一辙</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们也可以使用extract_first()方法提取列表的第一个元素，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(,a[href=<span class="string">"imagel.html"</span>] img<span class="string">').extract_fi:rst()</span></span><br><span class="line"><span class="string">'</span>&lt;img src=<span class="string">"imagel_thumb•jpg"</span>&gt;<span class="string">'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来的两个用法不太一样。节点的内部文本和属性的获取是这样实现的，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href="imagel.html"]::text'</span>).extract_first()</span><br><span class="line"><span class="string">'Name: My image 1 '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'a[href="imagel.html"] img::attr(src)'</span>).extract_first()</span><br><span class="line"><span class="string">'imagel_thumb.jpg</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取文本和属性需要用::te x t和 ：：a ttr ()的写法。而其他库如Beautiful Soup或 pyquery都有单独</span><br><span class="line">的方法。</span><br><span class="line">另外， CSS选择器和XPath选择器一样可以嵌套选择。我们可以先用XPath选择器选中所有a 节</span><br><span class="line">点 ，再利用CSS选择器选中img节点，再 用 XPath选择器获取属性。我们用一个实例来感受一下，如</span><br><span class="line">下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a'</span>).css(<span class="string">'img'</span>).xpath(<span class="string">'@src'</span>).extract()</span><br><span class="line">[<span class="string">'imagel_thumb.jpg'</span>, <span class="string">'image2_thumb.jpg'</span>, <span class="string">'image3_thumb.jpg'</span>, <span class="string">'image4_thumb.jpg'</span>, <span class="string">'image5_thumb.jpg'</span>]</span><br><span class="line">我们成功获取了所有img节点的 sr c 属性。</span><br><span class="line">因此，我们可以随意使用xpath()和 css()方法二者自由组合实现嵌套查询，二者是完全兼容的。</span><br></pre></td></tr></table></figure>

<h3 id="css用法总结"><a href="#css用法总结" class="headerlink" title="css用法总结"></a>css用法总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取文本</span><br><span class="line">response.css(<span class="string">'xxxx::text'</span>).extract_first()</span><br><span class="line"><span class="number">2.</span>获取属性</span><br><span class="line">response.css(<span class="string">'xxxx::attr(xxx)'</span>).extract_first()</span><br><span class="line"><span class="number">3.</span>获取标签</span><br><span class="line">response.css(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">4.</span>限制属性</span><br><span class="line">response.css(<span class="string">'a[href="xxxx"]'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy的选择器还支持正则匹配。比如，在示例的a 节点中的文本类似于Name: My image1 , 现在我们只想把Name:后面的内容提取出来，这时就可以借助re()方法，实现如下：</span><br><span class="line">&gt;&gt;&gt;response.xpath(<span class="string">'//a/text()'</span>).re(<span class="string">'Name:\s(.*)'</span>)</span><br><span class="line">[<span class="string">'My image 1 '</span>, <span class="string">'My image 2 '</span>, <span class="string">'My image 3 1, '</span>My image <span class="number">4</span> <span class="string">', '</span>My image <span class="number">5</span> <span class="string">']</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 我们给re()方法传了一个正则表达式，其中(.*)就是要匹配的内容，输出的结果就是正则表达式</span></span><br><span class="line"><span class="string">匹配的分组，结果会依次输出。</span></span><br><span class="line"><span class="string">如果同时存在两个分组，那么结果依然会被按序输出，如下所示:</span></span><br><span class="line">&gt;&gt;&gt; response.xpath('//a/text()').re('(.*?):\s(.*)')</span><br><span class="line">[<span class="string">'Name'</span>, <span class="string">'My image 1 '</span>, <span class="string">'Name'</span>, <span class="string">'My image 2 '</span>, <span class="string">'Name'</span>, <span class="string">'My image 3 '</span>Name<span class="string">', '</span>My image <span class="number">4</span> <span class="string">', '</span>Name<span class="string">', '</span>My image</span><br><span class="line"><span class="number">5</span> <span class="string">']</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 类 </span></span><br><span class="line"><span class="string"> 似 extract_first()方法，re_first()方法可以选取列表的第一个元素，用法如下:</span></span><br><span class="line">&gt;&gt;&gt; response.xpath('//a/text()').re_first('(.*?):\s(.*)')</span><br><span class="line"><span class="number">1</span>Name1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'//a/text()'</span>).re_first(<span class="string">'Name:\s(.*)'</span>)</span><br><span class="line"><span class="string">'My image 1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不论正则匹配了几个分组，结果都会等于列表的第一个元素。</span><br><span class="line">值得注意的是， response对象不能直接调用：re()和 re _ first()方法。如果想要对全文进行正则匹</span><br><span class="line">配，可以先调用xpath()方法再正则匹配，如下所示：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.re(<span class="string">'Name:\s(.*)'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;console&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="number">13486</span> 第 <span class="number">13</span>章 Scrapy框架的使用</span><br><span class="line">AttributeError: <span class="string">'HtmlResponse'</span> object has no attribute <span class="string">'re'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.xpath(<span class="string">'.,).re('</span>Name:\s(.*)&lt;br&gt;,)</span><br><span class="line">[<span class="string">'My image 1 '</span>, <span class="string">'My image 2 '</span>My image <span class="number">3</span> <span class="string">', '</span>My image <span class="number">4</span> <span class="string">', '</span>My image <span class="number">5</span> <span class="string">']</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; response.xpath('</span>.,).re_first(<span class="string">'Name:\s(.*)&lt;br&gt;,)</span></span><br><span class="line"><span class="string">'</span>My image <span class="number">1</span> <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 通过上面的例子，我们可以看到，直接调用re()方法会提示没有re属性。但是这里首先调用了xpath ('</span>.<span class="string">')选中全文，然后调用re()和 re_first()方法，就可以进行正则匹配了。</span></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider Middleware的用法</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.6%2013.7)%20%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%20Spider%20Middleware%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8CItem%20Pipeline.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用-Spider-Middleware的用法和Item-Pipeline"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用-Spider-Middleware的用法和Item-Pipeline" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用-Spider Middleware的用法和Item Pipeline"></a>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider Middleware的用法和Item Pipeline</h1><h2 id="Spider-Middleware的用法"><a href="#Spider-Middleware的用法" class="headerlink" title="Spider Middleware的用法"></a>Spider Middleware的用法</h2><p><a href="https://imgtu.com/i/qkSa1P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/18/qkSa1P.md.png" alt="qkSa1P.md.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Spider Middleware是介入到Scrapy的 Spider处理机制的钩子框架。我们首先来看看它的架构，如图<span class="number">13</span><span class="number">-1</span>所示。</span><br><span class="line">当Downloader生成Response之后，Response会被发送给Spider,在发送给Spider之前，Response会首先经过Spider Middleware处理，当 Spider处理生成Item和Request之后, Item和 Request还会经</span><br><span class="line">过Spider Middleware 的处理。</span><br><span class="line"></span><br><span class="line">Spider Middleware有如下三个作用。</span><br><span class="line">□ 我们可以在Downloader生成的Response发送给 Spider之前，也就是在Response发送给Spider之前对 Response进行处理。</span><br><span class="line">□ 我们可以在Spider生成的Request发送给Scheduler之前，也就是在 Request发送给 Scheduler之前对 Request进行处理。</span><br><span class="line">□ 我们可以在Spider生成的Item发送给Item Pipeline之前，也就是在 Item发送给Item Pipeline之前对 Item 进行处理。</span><br></pre></td></tr></table></figure>

<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">需要说明的是，Scrapy其实已经提供了许多Spider Middleware, 它们被 SPIDER_MIDDLEWARES_BASE这个变量所定义。</span><br><span class="line">SPIDER_MIDDLEWARES_BASE 变量的内容如下：</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span>: <span class="number">50</span>,</span><br><span class="line"><span class="string">'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span>: <span class="number">700</span>,</span><br><span class="line"><span class="string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span>: <span class="number">800</span>,</span><br><span class="line"><span class="string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span>: <span class="number">900</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">和Downloader Middleware一样，Spider Middleware首先加入到 SPIDER_MIDDLEWARES设置中，该设置会和Scrapy中 SPIDER_MIDDLEWARES_BASE定义的Spider Middleware合并。然后根据键值的数字优先级排序 ，得到一个有序列表。第一个Middleware是最靠近引擎的，最后一个Middleware是最靠近Spider的〉</span><br></pre></td></tr></table></figure>

<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy内置的Spider Middleware为Scrapy提供了基础的功能。如果我们想要扩展其功能，只需要实现某几个方法即可。</span><br><span class="line">每个Spider Middleware都定义了以下一个或多个方法的类，核心方法有如下<span class="number">4</span>个。</span><br><span class="line">□ process_spider_input(response, spider)</span><br><span class="line">□ process_spider_output(response, resuIt, spider)</span><br><span class="line">□ process_spider_exception(response, exception, spider)</span><br><span class="line">□ process_start_requests(start_requests, spider)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">只需要实现其中一个方法就可以定义一个Spider Middlewareo 下面我们来看看这<span class="number">4</span> 个方法的详细用法。</span><br></pre></td></tr></table></figure>

<h4 id="process-spider-input-response-spider"><a href="#process-spider-input-response-spider" class="headerlink" title="process_spider_input(response, spider)"></a>process_spider_input(response, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当Response被Spider Middleware处理时，process_spider_input()方法被调用。</span><br><span class="line"></span><br><span class="line">process_spider_input()方法的参数有如下两个。</span><br><span class="line">□ response,是Response对象，即被处理的 Response</span><br><span class="line">□ spider,是Spider对象，即该Response对应的Spider</span><br><span class="line"></span><br><span class="line">□ process_spider_input()应该返回<span class="literal">None</span>或者抛出一个异常。</span><br><span class="line">如果它返回<span class="literal">None</span>, Scrapy将会继续处理该Response, 调用所有其他的Spider Middleware,直到Spider处理该Response</span><br><span class="line">□ 如果它抛出一个异常， Scrapy将不会调用任何其他Spider Middleware的process_spider_input()方法，而调用Request的 errback()方法。 errback的输出将会被重新输入到中间件中，使用</span><br><span class="line">process_spider_output()方法来处理，当其抛出异常时则调用 process_spider_exception()来处理。</span><br></pre></td></tr></table></figure>

<h4 id="process-spider-output-response-result-spider"><a href="#process-spider-output-response-result-spider" class="headerlink" title="process_spider_output(response, result, spider)"></a>process_spider_output(response, result, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当Spider处理Response返回结果时，process_spider_output()方法被调用。</span><br><span class="line">□ process_spider_output()方法的参数有如下三个。</span><br><span class="line">  response,是 Response对象，即生成该输出的Response</span><br><span class="line">  result, 包含Request或Item对象的可迭代对象，即Spider返回的结果。</span><br><span class="line">  spider,是 Spider对象，即其结果对应的Spider。</span><br><span class="line"></span><br><span class="line">process_spider_output()必须返回包含Request或 Item对象的可迭代对象。</span><br></pre></td></tr></table></figure>

<h4 id="process-spider-exception-response-exception-spider"><a href="#process-spider-exception-response-exception-spider" class="headerlink" title="process_spider_exception(response, exception, spider)"></a>process_spider_exception(response, exception, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当Spider或Spider Middleware的process_spider_input()方法抛出异常时，process_spider_exception()方法被调用。</span><br><span class="line"></span><br><span class="line">process_spider_exception()方法的参数有如下三个。</span><br><span class="line">□ response,是Response对象，即异常被抛出时被处理的Response</span><br><span class="line">□ exception,是Exception对象，即被抛出的异常。</span><br><span class="line">□ spider,是 Spider对象，即抛出该异常的Spider</span><br><span class="line"></span><br><span class="line">process_spider_exception()必须要么返回<span class="literal">None</span>,要么返回一个包含Response或Item对象的可迭代对象。</span><br><span class="line"></span><br><span class="line">  如果它返回<span class="literal">None</span>, Scrapy将继续处理该异常，调用其他Spider Middleware中的process_spider_exception()方法，直到所有Spider Middleware都被调用。</span><br><span class="line">  如果它返回一个可迭代对象，则其他Spider Middleware的 process_spider_output()方法被调用，其他的process_spider_exception()不会被调用。</span><br></pre></td></tr></table></figure>

<h4 id="process-start-reqeusts-start-requests-spider"><a href="#process-start-reqeusts-start-requests-spider" class="headerlink" title="process_start_reqeusts(start.requests, spider)"></a>process_start_reqeusts(start.requests, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">process_start_requests()方法以Spider启动的Request为参数被调用，执行的过程类似于process_spider_output(),只不过它没有相关联的Response,并且必须返回Request</span><br><span class="line"></span><br><span class="line">process_start_requests()方法的参数有如下两个。</span><br><span class="line">□ start_requests,是包含Request 的可迭代对象，即Start Requests</span><br><span class="line">□ spider,是 Spider对象，即Start Requests所属的Spider</span><br><span class="line"></span><br><span class="line">process_start_requests()必须返回另一个包含Request对象的可迭代对象。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本节介绍了Spider Middleware 的基本原理和自定义Spider Middleware 的方法。 Spider Middleware</span><br><span class="line">使用的频率不如Downloader Middleware的高，在必要的情况下它可以用来方便数据的处理。</span><br></pre></td></tr></table></figure>

<h2 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Item Pipeline是项目管道。在前面我们已经了解了Item Pipeline的基本用法，本节我们再作详细了解它的用法。</span><br><span class="line"></span><br><span class="line">首先我们看看Item Pipeline在 Scrapy中的架构，如图<span class="number">13</span><span class="number">-1</span>所示。</span><br><span class="line">图中的最左侧即为Item Pipeline,它的调用发生在Spider产生Item之后。当 Spider解析完Response之后，Item就会传递到Item Pipeline,被定义的 Item Pipeline组件会顺次调用，完成一连串的处理过程，比如数据清洗、存储等。</span><br><span class="line"></span><br><span class="line">Item Pipeline的主要功能有如下<span class="number">4</span>点 。</span><br><span class="line">□ 清理HTML数据。</span><br><span class="line">□ 验证爬取数据，检查爬取字段。</span><br><span class="line">□ 查重并丢弃重复内容。</span><br><span class="line">□ 将爬取结果保存到数据库。</span><br></pre></td></tr></table></figure>

<h3 id="核心方法-1"><a href="#核心方法-1" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们可以自定义Item Pipeline,只需要实现指定的方法，其中必须要实现的一个方法是 ：</span><br><span class="line">process_item(item, spider)</span><br><span class="line"></span><br><span class="line">另外还有如下几个比较实用的方法。</span><br><span class="line">□ open_spider(spider)</span><br><span class="line">□ close_spider(spider)</span><br><span class="line">□ from_crawler(cls, crawler)</span><br><span class="line"></span><br><span class="line">下面我们详细介绍这几个方法的用法。</span><br></pre></td></tr></table></figure>

<h4 id="process-item-item-spider"><a href="#process-item-item-spider" class="headerlink" title="process_item(item, spider)"></a>process_item(item, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">process_item()是必须要实现的方法，被定义的Item Pipeline会默认调用这个方法对Item进行处理比如，我们可以进行数据处理或者将数据写入到数据库等操作。(它必须返回Item类型的值或者抛出一个Dropitem异常。)</span><br><span class="line"></span><br><span class="line">process_item()方法的参数有如下两个。</span><br><span class="line">□ item ,是 Item对象，即被处理的Item。</span><br><span class="line">□ spider,是 Spider对象，即生成该 Item的Spider</span><br><span class="line"></span><br><span class="line">process_item()方法的返回类型归纳如下。</span><br><span class="line">□ 如果它返回的是Item对象，那么此Item会被低优先级的Item Pipeline的 process_item()方法处理，直到所有的方法被调用完毕。</span><br><span class="line">□如果它抛出的是Dropitem异常，那么此Item会被丢弃, 不再进行处理。</span><br></pre></td></tr></table></figure>

<h4 id="open-spider-self-spider"><a href="#open-spider-self-spider" class="headerlink" title="open_spider(self, spider)"></a>open_spider(self, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open_spider()方法是在Spider开启的时候被自动调用的。在这里我们可以做一些初始化操作，如开启数据库连接等。其中，参数spider就是被开启的Spider对象。</span><br></pre></td></tr></table></figure>

<h4 id="close-spider-spider"><a href="#close-spider-spider" class="headerlink" title="close_spider(spider)"></a>close_spider(spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">close_spider()方法是在Spider关闭的时候自动调用的。在这里我们可以做一些收尾工作，如关闭数据库连接等。其中，参数spider就是被关闭的Spider对象</span><br></pre></td></tr></table></figure>

<h4 id="from-crawler-cls-crawler"><a href="#from-crawler-cls-crawler" class="headerlink" title="from_crawler(cls, crawler)"></a>from_crawler(cls, crawler)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">from_crawler()方法是一个类方法，用@classmethod标识，是一种依赖注入的方式。它的参数是crawler,通过crawler对象，我们可以拿到Scrapy的所有核心组件，如全局配置的每个信息，然后创建一个Pipeline实例。参数cls就是 Class,最后返回一个Class实例。</span><br></pre></td></tr></table></figure>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们以爬取<span class="number">360</span>摄影美图为例，来分别实现MongoDB存储、MySQL存储、Image图片存储的三个Pipeline</span><br><span class="line"></span><br><span class="line">请确保已经安装好MongoDB和MySQL数据库，安装好Python的PyMongo、PyMySQL、Scrapy框架，如没有安装可以参考第<span class="number">1</span>章的安装说明。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们这次爬取的目标网站为：https://image.so.com。打开此页面，切换到摄影页面，网页中呈现了许许多多的摄影美图。我们打开浏览器开发者工具，过滤器切换到XHR选项，然后下拉页面，可以看到下面就会呈现许多Ajax请求</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">返回格式是JSON</span><br><span class="line">其中list字段就是一张张图片的详情信息，包含了<span class="number">30</span>张图片的ID、名称、链接、缩略图等信息。另外观察Ajax请求的参数信息，有一个参数sn一直在变化，这个参数很明显就是偏移量。当sn为<span class="number">30</span>时，返回的是前<span class="number">30</span>张图片，sn为<span class="number">60</span>时，返回的就是第<span class="number">31</span><span class="number">-60</span>张图片。另外,ch参数是摄影类别，listtype是排序方式，temp参数可以忽略。</span><br><span class="line"></span><br><span class="line">所以我们抓取时只需要改变sn的数值就好了。</span><br><span class="line">下面我们用Scrapy来实现图片的抓取，将图片的信息保存到MongoDB、MySQL,同时将图片存储到本地。</span><br></pre></td></tr></table></figure>

<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先新建一个项目，命令如下所示：</span><br><span class="line">scrapy startproject images36O</span><br><span class="line"></span><br><span class="line">接下来新建一个Spider,命令如下所示：</span><br><span class="line">scrapy genspider images images.so.com</span><br><span class="line">这样我们就成功创建了一个Spidero</span><br></pre></td></tr></table></figure>



<h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来定义爬取的页数。比如爬取<span class="number">50</span>页、每页<span class="number">30</span>张,也就是<span class="number">1500</span>张图片，我们可以</span><br><span class="line">先在settings.py里面定义一个变量MAX_PAGE,添加如下定义：</span><br><span class="line">MAX_PAGE = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">定义start_requests()方法，用来生成<span class="number">50</span>次请求，如下所示：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">	data = &#123;<span class="string">'ch'</span>: <span class="string">'photography'</span>, <span class="string">'listtype'</span>: <span class="string">'new'</span>&#125;</span><br><span class="line">	base_url = <span class="string">'https://image.so.com/zj ?'</span></span><br><span class="line">	<span class="keyword">for</span> page <span class="keyword">in</span> range(l, self.settings.get(<span class="string">'MAX_PAGE'</span>) + <span class="number">1</span>):</span><br><span class="line">		data[<span class="string">'sn'</span>] = page * <span class="number">30</span></span><br><span class="line">		params = urlencode(datm)</span><br><span class="line">		url = base_url + params</span><br><span class="line">		<span class="keyword">yield</span> Request(url, self.parse)</span><br><span class="line"></span><br><span class="line">在这里我们首先定义了初始的两个参数，sn参数是遍历循环生成的。然后利用 urlencode()方法将字典转化为URL的GET参数，构造出完整的URL ,构造并生成Request。</span><br><span class="line"></span><br><span class="line">还需要引入scrapy.Request和 urllib.parse模块，如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider, Request</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">再修改settings.py中 的 ROBOTSTXT_OBEY变量，将其设置为<span class="literal">False</span>,否则无法抓取，如下所示：</span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">运行爬虫，即可以看到链接都请求成功，执行命令如下所示：</span><br><span class="line">scrapy crawl images</span><br><span class="line"></span><br><span class="line">所有请求的状态码都是<span class="number">200</span> ,这就证明图片信息爬取成功</span><br></pre></td></tr></table></figure>

<h4 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先定义一个Item,叫作Imageltem,如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item, Field</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">	collection = table = <span class="string">'images'</span></span><br><span class="line">	id = Field()</span><br><span class="line">	url = Field()</span><br><span class="line">	title = Field()</span><br><span class="line">	thumb = Field()</span><br><span class="line"></span><br><span class="line">在这里我们定义了<span class="number">4</span>个字段，包括图片的ID、链接、标 题、缩略图。另外还有两个属性collection和table, 都定义为images字符串，分别代表MongoDB存储 的Collection名称和MySQL存储的表名称。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们提取Spider里有关信息，将parse()方法改写为如下所示：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">	result = json.loads(response.text)</span><br><span class="line">	<span class="keyword">for</span> image <span class="keyword">in</span> result.get(<span class="string">'list'</span>):</span><br><span class="line">		item = Imageltem()</span><br><span class="line">		item[<span class="string">'id'</span>] = image.get(<span class="number">1</span>imageid<span class="string">')</span></span><br><span class="line"><span class="string">		item[ '</span>url<span class="string">' ] = image.get(,qhimg_u:r].,)</span></span><br><span class="line"><span class="string">		item['</span>title<span class="string">'] = image.get('</span>group_title<span class="string">')</span></span><br><span class="line"><span class="string">		item['</span> thum<span class="string">b'] = image, ge t(，qhimg_thumb_u:rT)</span></span><br><span class="line"><span class="string">		yield item</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">首先解析JSON,遍历其list字段，取出一个个图片信息，然后再对Imageltem赋值，生成Item对象。</span></span><br><span class="line"><span class="string">                               </span></span><br><span class="line"><span class="string">这样我们就完成了信息的提取。</span></span><br></pre></td></tr></table></figure>

<h4 id="存储信息"><a href="#存储信息" class="headerlink" title="存储信息"></a>存储信息</h4><h5 id="MONGODB"><a href="#MONGODB" class="headerlink" title="MONGODB"></a>MONGODB</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先确保MongoDB已经正常安装并且正常运行。</span><br><span class="line">我们用一个MongoPipeline将信息保存到MongoDB, 在pipelines.py里添加如下类的实现：</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">		self.mongo_uri = mongo_uri</span><br><span class="line">		self.mongo_db = mongo_db</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> cls(</span><br><span class="line">mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">		self.db = self.client[self.mongo_db]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">		self.db[item.collection].insert(dict(item))</span><br><span class="line">		<span class="keyword">return</span> item</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.client.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里需要用到两个变量，MONGO_URI和MONGO_DB,即存储到MongoDB的链接地址和数据库名称。</span><br><span class="line"></span><br><span class="line">我们在settings.py里添加这两个变量, 如下所示：</span><br><span class="line">MONGO_URI = <span class="string">'localhost'</span></span><br><span class="line">MONGODB = <span class="string">'images36O'</span></span><br><span class="line"></span><br><span class="line">这样一个保存到MongoDB的 Pipeline的就创建好了。这里最主要的方法是process_item()方法,直接调用Collection对象的insert()方法即可完成数据的插入，最后返回Item 对象。</span><br></pre></td></tr></table></figure>

<h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先确保MySQL已经正确安装并且正常运行。</span><br><span class="line">新建一个数据库，名字还是images360, SQL语句如下所示：</span><br><span class="line">CREATE DATABASE images36O DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci</span><br><span class="line"></span><br><span class="line">新建一个数据表，包含id 、u rl、title、thumb四个字段，SQL语句如下所示：</span><br><span class="line">CREATE TABLE images (id VARCHAR(<span class="number">255</span>) PRIMARY KEY, url VARCHAR(<span class="number">255</span>) NULL, title VARCHAR(<span class="number">255</span>) NULL ,</span><br><span class="line">thumb VARCHAR(<span class="number">255</span>) NULL)</span><br><span class="line"></span><br><span class="line">执行完SQL语句之后，我们就成功创建好了数据表。接下来就可以往表里存储数据了。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们实现一个MySOLPipeline,代码如下所示：</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlPipeline</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, host, database, user, password, port)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.database = database</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.port = port</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> cls(</span><br><span class="line">host=crawler.settings.get(<span class="string">'MYSOL_HOST'</span>),</span><br><span class="line">database=crawler.settings.get(<span class="string">'MYSOL_DATABASE'</span>),</span><br><span class="line">user=crawler.settings.get(<span class="string">'MYSOL_USER'</span>),</span><br><span class="line">password=crawler.settings.get(<span class="string">'MYSOL_PASSWORD'</span>),</span><br><span class="line">port=crawler.settings.get(<span class="string">'MYSOL_PORT'</span>),</span><br><span class="line">)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.db = pymysql.connect(self.host, self.user, 	self.password, self.database, charset=<span class="string">'utf8'</span>,</span><br><span class="line">port=self.port)</span><br><span class="line">		self.cursor = self.db.cursor()</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">		self.db.close()</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">		data = dict(item)</span><br><span class="line">		keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">		values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))</span><br><span class="line">		sql = <span class="string">'insert into %s (%s) values (%s)'</span> % (item.table, keys, values)</span><br><span class="line">		self.cursor.execute(sql, tuple(data.values()))</span><br><span class="line">		self.db.commit()</span><br><span class="line">		<span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<h5 id="Image-Pipeline"><a href="#Image-Pipeline" class="headerlink" title="Image Pipeline"></a>Image Pipeline</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy提 供了专门处理下载的Pipeline,包括文件下载和图片下载。下载文件和图片的原理与抓取页面的原理一样，因此下载过程支持异步和多线程，下载十分高效。下面我们来看看具体的实现过程。</span><br><span class="line">官方文档地址为： https://doc.scrapy.org/en/latest/topics/media-pipeline.htmlo</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先定义存储文件的路径，需要定义一个IMAGES_STORE变量，在 settings.py中添加如下代码：</span><br><span class="line">IMACES_STORE = <span class="string">'./images'</span></span><br><span class="line">在这里我们将路径定义为当前路径下的images子文件夹，即下载的图片都会保存到本项目的images文件夹中。</span><br><span class="line">内置的ImagesPipeline会默认读取Item的image_urls字段，并认为该字段是一个列表形式，它会遍历Item的image_urls字段，然后取出每个URL进行图片下载。</span><br><span class="line">但是现在生成的Item 的图片链接字段并不是image_urls字段表示的，也不是列表形式，而是单个的URL。所以为了实现下载，我们需要重新定义下载的部分逻辑，即要自定义ImagePipeline,继承内置的ImagesPipeline,重写几个方法。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePipeline</span><span class="params">(ImagesPipeline)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">file_path</span><span class="params">(self, request, response=None, info=None)</span>:</span></span><br><span class="line">		url = request.url</span><br><span class="line">		file_name = url.split(<span class="number">7</span><span class="string">' )[-l]</span></span><br><span class="line"><span class="string">		return file_name</span></span><br><span class="line"><span class="string">	def item_completed(self, results, item, info):</span></span><br><span class="line"><span class="string">		image_paths = [x['</span>path<span class="string">'] for ok, x in results if ok]</span></span><br><span class="line"><span class="string">		if not image_paths:</span></span><br><span class="line"><span class="string">			raise Dropltem('</span>Image Downloaded Failed<span class="string">')</span></span><br><span class="line"><span class="string">		return item</span></span><br><span class="line"><span class="string">	def get_media_requests(self, item, info):</span></span><br><span class="line"><span class="string">		yield Request(item['</span>url<span class="string">'])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里我们实现了ImagePipeline,继承Scrapy内置的Im agesPipeline,重写下面几个方法。</span><br><span class="line">□ get_media_requests()。它的第一个参数item是爬取生成的Item对象。我们将它的url字段取出来，然后直接生成Request对象。此Request加入到调度队列，等待被调度，执行下载。</span><br><span class="line">□ file_path() 它的第一个参数request就是当前下载对应的Request对象。这个方法用来返回保存的文件名，直接将图片链接的最后一部分当作文件名即可。它利用split() 函数分割链接</span><br><span class="line">并提取最后一部分，返回结果。这样此图片下载之后保存的名称就是该函数返回的文件名。</span><br><span class="line">□ item_completed(),它是当单个Item 完成下载时的处理方法。因为并不是每张图片都会下载成功，所以我们需要分析下载结果并剔除下载失败的图片。如果某张图片下载失败，那么我们就不需保存此Item到数据库。该方法的第一个参数results就是该Item对应的下载结果，它是一个列表形式，列表每一个元素是一个元组，其中包含了下载成功或失败的信息。这里我们遍历下载结果找出所有成功的下载列表。如果列表为空，那么该Item对应的图片下载失败 ，随即抛出异常Dropitem,该Item忽略。否则返回该Item,说明此Item有效。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">现在为止，三个Item Pipeline的定义就完成了。最后只需要启用就可以了，修改settings.py, 设置ITEM_PIPELINES,如下所示：</span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"><span class="string">'images36O.pipelines.ImagePipeline'</span>: <span class="number">300</span>,</span><br><span class="line"><span class="string">'images36O.pipelines.MongoPipeline'</span>: <span class="number">301</span>,</span><br><span class="line"><span class="string">'images36O.pipelines.MysqlPipeline'</span>: <span class="number">302</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里注意调用的顺序。我们需要优先调用ImagePipeline对Item做下载后的筛选，下载失败的Item就直接忽略，它们就不会保存到MongoDB和MySQL里。随后再调用其他两个存储的Pipeline,这样就能确保存入数据库的图片都是下载成功的。</span><br><span class="line"></span><br><span class="line">接下来运行程序，执行爬取，如下所示：</span><br><span class="line">scrapy crawl images</span><br><span class="line">爬虫一边爬取一边下载，下载速度非常快</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Scrapy通用爬虫</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.10)%20%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%20Scrapy%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Scrapy框架的使用-Scrapy通用爬虫"><a href="#Scrapy框架的使用-Scrapy通用爬虫" class="headerlink" title="Scrapy框架的使用-Scrapy通用爬虫"></a>Scrapy框架的使用-Scrapy通用爬虫</h1><h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在实现通用爬虫之前，我们需要先了解一下 CrawlSpider, 其官方文档链接为： http://scrapy.readthedocs.io/en/latest/topics/spiders.html<span class="comment">#crawlspider</span></span><br><span class="line"></span><br><span class="line">CrawlSpider是Scrapy提供的一个通用Spider。 在 Spider里，我们可以指定一些爬取规则来实现页面的提取，这些爬取规则由一个专门的数据结构Rule表示。 Rule里包含提取和跟进页面的配置，Spider会根据Rule来确定当前页面中的哪些链接需要继续爬取、哪些页面的爬取结果需要用哪个方法解析等。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CrawlSpider继承自Spider类。除了Spider类的所有方法和属性，它还提供了一个非常重要的属性和方法。</span><br><span class="line">□ rules, 它是爬取规则属性，是包含一个或多个Rule对象的列表。每个Rule对爬取网站的动作都做了定义， CrawlSpider会读取rules的每一个Rule并进行解析。</span><br><span class="line">□ parse_start_url(), 它是一个可重写的方法。当start_urls里对应的Request得到Response时，该方法被调用，它会分析Response并必须返回Item对象或者Request对象。</span><br></pre></td></tr></table></figure>

<h3 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里最重要的内容莫过于Rule的定义了，它的定义和参数如下所示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">contrib</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(link_extractor, callback=None, cb_kwargs=None, follow=None,</span></span></span><br><span class="line"><span class="class"><span class="params">process_links=None, process_request=None)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">□ link_extractor:是Link Extractor对象。通过它， Spider可以知道从爬取的页面中提取哪些链接。提取出的链接会自动生成Requesto它又是一个数据结构，一般常用 LxmlLinkExtractor对象作为参数，其定义和参数如下所示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">lxmlhtml</span>.<span class="title">LxmlLinkExtractor</span><span class="params">(allow=<span class="params">()</span>, deny=<span class="params">()</span>, allow_domains=<span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">deny_domains=<span class="params">()</span>, deny_extensions=None, restrict_xpaths=<span class="params">()</span>, restrict_css=<span class="params">()</span>, tags=<span class="params">(<span class="string">'a'</span>, <span class="string">'area'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">mttrs=<span class="params">(<span class="string">'href'</span>, )</span>, canonicalize=False, unique=T:rue, process_value=None, strip=True)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">allow</span> 是一个正则表达式或正则表达式列表，它定义了从当前页面提取出的链接哪些是符合要求的，只有符合要求的链接才会被跟进。<span class="title">deny</span>则相反。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">allow_domains定义了符合要求的域名，只有此域名的链接才会被跟进生成新的R equest,它相当于域名白名单。deny_domains则相反，相当于域名黑名单。 </span><br><span class="line"></span><br><span class="line">restrict_xpaths定义了从当前页面中XPath匹配的区域提取链接，其值是 XPath表达式或XPath表达式列表。restrict_css定义了从当前页面中CSS选择器匹配的区域提取链接，其值是CSS选择器或CSS选择器列表。还有一些其他参数代表了提取链接的标签、是否去重、链接的处理等内容，使用的频率不高。可以参考文档的参数说明：</span><br><span class="line"></span><br><span class="line">http://scrapy.readthedocs.io/en/latest/topics/link-extractors.html<span class="comment">#module-scrapy.linkextractors.lxm</span></span><br><span class="line">lhtml</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">□ callback:即回调函数，和之前定义Request的callback有相同的意义。每 link_extractor中获取到链接时，该函数将会调用。该回调函数接收一个response作为其第一个参城，并返回一个包含Item或Request对象的列表。注意，避免使用parse()作为回调函数。由于CrawlSpider使用parse()方法来实现其逻辑，如果parse()方法覆盖了，CrawlSpider将会运行失败。</span><br><span class="line"></span><br><span class="line">□ cb_kwargs: 字典，它包含传递给回调函数的参数。</span><br><span class="line"></span><br><span class="line">□ follow：布尔值，即<span class="literal">True</span>或<span class="literal">False</span> ,它指定根据该规则从response提取的链接是否需要跟进。如果callback参数为 <span class="literal">None</span>, follow默认设置为<span class="literal">True</span> ,否则默认为<span class="literal">False</span>。</span><br><span class="line"></span><br><span class="line">□ process links: 指定处理函数，从link_extractor中获取到链接列表时，该函数将会调用，它主要用于过滤。</span><br><span class="line"></span><br><span class="line">□ process_request:同样是指定处理函数，根据该Rule提取到每个Request时，该函数都会调用，对Request进行处理。该函数必须返回Request或者<span class="literal">None</span>。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以上内容便是CrawlSpider中的核心Rule的基本用法 。但这些内容可能还不足以完成一个CrawlSpider爬虫。下面我们利用CrawlSpider实现新闻网站的爬取实例，来更好地理解Rule的用法</span><br></pre></td></tr></table></figure>

<h2 id="Item-Loader"><a href="#Item-Loader" class="headerlink" title="Item Loader"></a>Item Loader</h2><p><a href="https://docs.scrapy.org/en/latest/topics/loaders.html" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们了解了利用CrawlSpider的Rule来定义页面的爬取逻辑，这是可配置化的一部分内容。但是，Rule并没有对Item的提取方式做规则定义。对于Item的提取，我们需要借助另一个模块Item Loader来实现。</span><br><span class="line">Item Loader提供一种便捷的机制来帮助我们方便地提取Item。它提供的一系列API可以分析原始数据对Item进行赋值。Item提供的是保存抓取数据的容器，而Item Loader提供的是填充容器的机制有了它，数据的提取会变得更加规则化。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们了解了利用CrawlSpider的 Rule来定义页面的爬取逻辑，这是可配置化的一部分内容 但是Rule并没有对Item的提取方式做规则定义。对于Item的提取，我们需要借助另一个模块Item Loader来实现。</span><br><span class="line"></span><br><span class="line">Item Loader提供一种便捷的机制来帮助我们方便地提取Item。 它提供的一系列API可以分析原始数据对Item进行赋值。Item提供的是保存抓取数据的容器，而Item Loader提供的是填充容器的机制有了它，数据的提取会变得更加规则化。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Item Loader的 API如下所示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">loader</span>.<span class="title">ItemLoader</span><span class="params">([item, selector, response, ] **kwargs)</span></span></span><br><span class="line"><span class="class"><span class="title">Item</span> <span class="title">Loader</span>的<span class="title">API</span>返回一个新的<span class="title">Item</span> <span class="title">Loader</span>来填充给定的<span class="title">Item</span></span></span><br><span class="line">如果没有给出Item,则使用中的类自动实例化default_item_class</span><br><span class="line">另外，它传入selector和response参数来使用选择器或响应参数实例化。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">下面将依次说明Item Loader的API参数。</span><br><span class="line">□ item：它是Item对象，可以调用add_xpath()、add_css()或 add_value()等方法来填充Item对象。</span><br><span class="line">□ selector：它是Selector对象，用来提取填充数据的选择器。</span><br><span class="line">□ response：它是Response对象，用于使用构造选择器的Response</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">To use an Item Loader, you must first instantiate it. You can either instantiate it <span class="keyword">with</span> an item object <span class="keyword">or</span> without one, <span class="keyword">in</span> which case an item object <span class="keyword">is</span> automatically created <span class="keyword">in</span> the Item Loader __init__ method using the item <span class="class"><span class="keyword">class</span> <span class="title">specified</span> <span class="title">in</span> <span class="title">the</span> <span class="title">ItemLoader</span>.<span class="title">default_item_class</span> <span class="title">attribute</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">Then, you start collecting values into the Item Loader, typically using Selectors. You can add more than one value to the same item field; the Item Loader will know how to “join” those values later using a proper processing function.</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一个比较典型的Item Loader实例如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> project.items <span class="keyword">import</span> Product</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    loader = ItemLoader(item=Product(), response=response)</span><br><span class="line">    loader.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_name"j'</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_title"]'</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">'price'</span>, <span class="string">'//p[@id="price"]'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'stock'</span>, <span class="string">'p#stock]'</span>)</span><br><span class="line">    loader.add_value(<span class="string">'last_updated'</span>, <span class="string">'today'</span>)</span><br><span class="line">    <span class="keyword">return</span> loader.load_item()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里首先声明一个Product Item ,用该Item和Response对象实例化ItemLoader,调用add_xpath()方法把来自两个不同位置的数据提取出来，分配给name属性，再用add_xpath()、add_css()、add_value()等方法对不同属性依次赋值，最后调用load_item()方法实现Item 的解析。</span><br><span class="line"></span><br><span class="line">Finally, when all data <span class="keyword">is</span> collected, the ItemLoader.load_item() method <span class="keyword">is</span> called which actually returns the item populated <span class="keyword">with</span> the data previously extracted <span class="keyword">and</span> collected <span class="keyword">with</span> the add_xpath(), add_css(), <span class="keyword">and</span> add_value() calls.</span><br><span class="line"></span><br><span class="line">这种方式比较规则化，我们可以把一些参数和规则单独提取出来做成配置文件或存到数据库，即可实现可配置化。</span><br></pre></td></tr></table></figure>

<h3 id="Input-Processor和Output-Processor"><a href="#Input-Processor和Output-Processor" class="headerlink" title="Input Processor和Output Processor"></a>Input Processor和Output Processor</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外， Item Loader每个字段中都包含了一个Input Processor ( 输入处理器)和一个 Output Processor(输出处理器)</span><br><span class="line"></span><br><span class="line">Input Processor收到数据时立刻提取数据， Input Processor的结果被收集起来并且保存在ItemLoader内，但是不分配给Item。收集到所有的数据后， load_item()方法被调用来填充再生成Item对象。</span><br><span class="line"></span><br><span class="line">在调用时会先调用Output Processor来处理之前收集到的数据，然后再存入Item 中，这样就生成了Item</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">An Item Loader contains one input processor <span class="keyword">and</span> one output processor <span class="keyword">for</span> each (item) field. The input processor processes the extracted data <span class="keyword">as</span> soon <span class="keyword">as</span> it’s received (through the add_xpath(), add_css() <span class="keyword">or</span> add_value() methods) <span class="keyword">and</span> the result of the input processor <span class="keyword">is</span> collected <span class="keyword">and</span> kept inside the ItemLoader. After collecting all data, the ItemLoader.load_item() method <span class="keyword">is</span> called to populate <span class="keyword">and</span> get the populated item object. That’s when the output processor <span class="keyword">is</span> called <span class="keyword">with</span> the data previously collected (<span class="keyword">and</span> processed using the input processor). The result of the output processor <span class="keyword">is</span> the final value that gets assigned to the item.</span><br></pre></td></tr></table></figure>

<h4 id="例子解释说明"><a href="#例子解释说明" class="headerlink" title="例子解释说明"></a>例子解释说明</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = ItemLoader(Product(), some_selector)</span><br><span class="line">l.add_xpath(<span class="string">'name'</span>, xpath1) <span class="comment"># (1)</span></span><br><span class="line">l.add_xpath(<span class="string">'name'</span>, xpath2) <span class="comment"># (2)</span></span><br><span class="line">l.add_css(<span class="string">'name'</span>, css) <span class="comment"># (3)</span></span><br><span class="line">l.add_value(<span class="string">'name'</span>, <span class="string">'test'</span>) <span class="comment"># (4)</span></span><br><span class="line"><span class="keyword">return</span> l.load_item() <span class="comment"># (5)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Data <span class="keyword">from</span> xpath1 <span class="keyword">is</span> extracted, <span class="keyword">and</span> passed through the input processor of the name field. The result of the input processor <span class="keyword">is</span> collected <span class="keyword">and</span> kept <span class="keyword">in</span> the Item Loader (but <span class="keyword">not</span> yet assigned to the item).</span><br><span class="line"></span><br><span class="line">Data <span class="keyword">from</span> xpath2 <span class="keyword">is</span> extracted, <span class="keyword">and</span> passed through the same input processor used <span class="keyword">in</span> (<span class="number">1</span>). The result of the input processor <span class="keyword">is</span> appended to the data collected <span class="keyword">in</span> (<span class="number">1</span>) (<span class="keyword">if</span> any).</span><br><span class="line"></span><br><span class="line">This case <span class="keyword">is</span> similar to the previous ones, <span class="keyword">except</span> that the data <span class="keyword">is</span> extracted <span class="keyword">from</span> the css CSS selector, <span class="keyword">and</span> passed through the same input processor used <span class="keyword">in</span> (<span class="number">1</span>) <span class="keyword">and</span> (<span class="number">2</span>). The result of the input processor <span class="keyword">is</span> appended to the data collected <span class="keyword">in</span> (<span class="number">1</span>) <span class="keyword">and</span> (<span class="number">2</span>) (<span class="keyword">if</span> any).</span><br><span class="line"></span><br><span class="line">This case <span class="keyword">is</span> also similar to the previous ones, <span class="keyword">except</span> that the value to be collected <span class="keyword">is</span> assigned directly, instead of being extracted <span class="keyword">from</span> a XPath expression <span class="keyword">or</span> a CSS selector. However, the value <span class="keyword">is</span> still passed through the input processors. In this case, since the value <span class="keyword">is</span> <span class="keyword">not</span> iterable it <span class="keyword">is</span> converted to an iterable of a single element before passing it to the input processor, because input processor always receive iterables.</span><br><span class="line"></span><br><span class="line">The data collected <span class="keyword">in</span> steps (<span class="number">1</span>), (<span class="number">2</span>), (<span class="number">3</span>) <span class="keyword">and</span> (<span class="number">4</span>) <span class="keyword">is</span> passed through the output processor of the name field. The result of the output processor <span class="keyword">is</span> the value assigned to the name field <span class="keyword">in</span> the item.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">It’s worth noticing that processors are just callable objects, which are called <span class="keyword">with</span> the data to be parsed, <span class="keyword">and</span> <span class="keyword">return</span> a parsed value. So you can use any function <span class="keyword">as</span> input <span class="keyword">or</span> output processor. The only requirement <span class="keyword">is</span> that they must accept one (<span class="keyword">and</span> only one) positional argument, which will be an iterable.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The other thing you need to keep <span class="keyword">in</span> mind <span class="keyword">is</span> that the values returned by input processors are collected internally (<span class="keyword">in</span> lists) <span class="keyword">and</span> then passed to output processors to populate the fields.</span><br><span class="line"></span><br><span class="line">Last, but <span class="keyword">not</span> least, itemloaders comes <span class="keyword">with</span> some commonly used processors built-<span class="keyword">in</span> <span class="keyword">for</span> convenience.</span><br></pre></td></tr></table></figure>

<h3 id="内置的Item-Loader"><a href="#内置的Item-Loader" class="headerlink" title="内置的Item Loader"></a>内置的Item Loader</h3><p><a href="https://itemloaders.readthedocs.io/en/latest/built-in-processors.html#built-in-processors" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Even though you can use any callable function <span class="keyword">as</span> input <span class="keyword">and</span> output processors, itemloaders provides some commonly used processors, which are described below.</span><br></pre></td></tr></table></figure>

<h4 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The simplest processor, which doesn’t do anything. It returns the original values unchanged. It doesn’t receive any __init__ method arguments, nor does it accept Loader contexts.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> Identity</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Identity()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="TakeFirst"><a href="#TakeFirst" class="headerlink" title="TakeFirst"></a>TakeFirst</h4><h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Returns the values joined <span class="keyword">with</span> the separator given <span class="keyword">in</span> the __init__ method, which defaults to <span class="string">' '</span>. It doesn’t accept Loader contexts.</span><br><span class="line"></span><br><span class="line">When using the default separator, this processor <span class="keyword">is</span> equivalent to the function: <span class="string">' '</span>.join</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> Join</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</span><br><span class="line"><span class="string">'one two three'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Join(<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>])</span><br><span class="line"><span class="string">'one&lt;br&gt;two&lt;br&gt;three'</span></span><br></pre></td></tr></table></figure>

<h4 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A processor which <span class="keyword">is</span> constructed <span class="keyword">from</span> the composition of the given functions. This means that each input value of this processor <span class="keyword">is</span> passed to the first function, <span class="keyword">and</span> the result of that function <span class="keyword">is</span> passed to the second function, <span class="keyword">and</span> so on, until the last function returns the output value of this processor.</span><br><span class="line"></span><br><span class="line">By default, stop process on <span class="literal">None</span> value. This behaviour can be changed by passing keyword argument stop_on_none=<span class="literal">False</span>.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> Compose</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Compose(<span class="keyword">lambda</span> v: v[<span class="number">0</span>], str.upper)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line"><span class="string">'HELLO'</span></span><br></pre></td></tr></table></figure>

<h4 id="MapCompose"><a href="#MapCompose" class="headerlink" title="MapCompose"></a>MapCompose</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The input value of this processor <span class="keyword">is</span> iterated <span class="keyword">and</span> the first function <span class="keyword">is</span> applied to each element. The results of these function calls (one <span class="keyword">for</span> each element) are concatenated to construct a new iterable, which <span class="keyword">is</span> then used to apply the second function, <span class="keyword">and</span> so on, until the last function <span class="keyword">is</span> applied to each value of the list of values collected so far. The output values of the last function are concatenated together to produce the output of this processor.</span><br><span class="line"></span><br><span class="line">Each particular function can <span class="keyword">return</span> a value <span class="keyword">or</span> a list of values, which <span class="keyword">is</span> flattened <span class="keyword">with</span> the list of values returned by the same function applied to the other input values. The functions can also <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">in</span> which case the output of that function <span class="keyword">is</span> ignored <span class="keyword">for</span> further processing over the chain.</span><br><span class="line"></span><br><span class="line">This processor provides a convenient way to compose functions that only work <span class="keyword">with</span> single values (instead of iterables). For this reason the MapCompose processor <span class="keyword">is</span> typically used <span class="keyword">as</span> input processor, since data <span class="keyword">is</span> often extracted using the extract() method of parsel selectors, which returns a list of unicode strings.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">filter_world</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> x == <span class="string">'world'</span> <span class="keyword">else</span> x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> MapCompose</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = MapCompose(filter_world, str.upper)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc([<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'something'</span>])</span><br><span class="line">[<span class="string">'HELLO'</span>, <span class="string">'THIS'</span>, <span class="string">'IS'</span>, <span class="string">'SOMETHING'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">As <span class="keyword">with</span> the Compose processor, functions can receive Loader contexts, <span class="keyword">and</span> __init__ method keyword arguments are used <span class="keyword">as</span> default context values. See Compose processor <span class="keyword">for</span> more info.</span><br></pre></td></tr></table></figure>

<h4 id="SelectJmes"><a href="#SelectJmes" class="headerlink" title="SelectJmes"></a>SelectJmes</h4><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="Declaring-Item-Loaders"><a href="#Declaring-Item-Loaders" class="headerlink" title="Declaring Item Loaders"></a>Declaring Item Loaders</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Item Loaders are declared using a <span class="class"><span class="keyword">class</span> <span class="title">definition</span> <span class="title">syntax</span>. <span class="title">Here</span> <span class="title">is</span> <span class="title">an</span> <span class="title">example</span>:</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> TakeFirst, MapCompose, Join</span><br><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></span><br><span class="line">    default_output_processor = TakeFirst()</span><br><span class="line">    name_in = MapCompose(str.title)</span><br><span class="line">    name_out = Join()</span><br><span class="line">    price_in = MapCompose(str.strip)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">As you can see, input processors are declared using the _in suffix <span class="keyword">while</span> output processors are declared using the _out suffix. And you can also declare a default input/output processors using the ItemLoader.default_input_processor <span class="keyword">and</span> ItemLoader.default_output_processor attributes.</span><br></pre></td></tr></table></figure>

<h3 id="Declaring-Input-and-Output-Processors"><a href="#Declaring-Input-and-Output-Processors" class="headerlink" title="Declaring Input and Output Processors"></a>Declaring Input and Output Processors</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">As seen <span class="keyword">in</span> the previous section, input <span class="keyword">and</span> output processors can be declared <span class="keyword">in</span> the Item Loader definition, <span class="keyword">and</span> it’s very common to declare input processors this way. However, there <span class="keyword">is</span> one more place where you can specify the input <span class="keyword">and</span> output processors to use: <span class="keyword">in</span> the Item Field metadata. Here <span class="keyword">is</span> an example:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> itemloaders.processors <span class="keyword">import</span> Join, MapCompose, TakeFirst</span><br><span class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_price</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value.isdigit():</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(remove_tags),</span><br><span class="line">        output_processor=Join(),</span><br><span class="line">    )</span><br><span class="line">    price = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(remove_tags, filter_price),</span><br><span class="line">        output_processor=TakeFirst(),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line">il = ItemLoader(item=Product())</span><br><span class="line">il.add_value(<span class="string">'name'</span>, [<span class="string">'Welcome to my'</span>, <span class="string">'&lt;strong&gt;website&lt;/strong&gt;'</span>])</span><br><span class="line">il.add_value(<span class="string">'price'</span>, [<span class="string">'&amp;euro;'</span>, <span class="string">'&lt;span&gt;1000&lt;/span&gt;'</span>])</span><br><span class="line">il.load_item()</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Welcome to my website'</span>, <span class="string">'price'</span>: <span class="string">'1000'</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The precedence order, <span class="keyword">for</span> both input <span class="keyword">and</span> output processors, <span class="keyword">is</span> <span class="keyword">as</span> follows:</span><br><span class="line"></span><br><span class="line">Item Loader field-specific attributes: field_in <span class="keyword">and</span> field_out (most precedence)</span><br><span class="line"></span><br><span class="line">Field metadata (input_processor <span class="keyword">and</span> output_processor key)</span><br><span class="line"></span><br><span class="line">Item Loader defaults: ItemLoader.default_input_processor() <span class="keyword">and</span> ItemLoader.default_output_processor() (least precedence)</span><br></pre></td></tr></table></figure>

<h3 id="ItemLoader-Objects"><a href="#ItemLoader-Objects" class="headerlink" title="ItemLoader Objects"></a>ItemLoader Objects</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classscrapy.loader.ItemLoader(item=<span class="literal">None</span>, selector=<span class="literal">None</span>, response=<span class="literal">None</span>, parent=<span class="literal">None</span>, **context)[source]¶</span><br><span class="line"></span><br><span class="line">A user-friendly abstraction to populate an item <span class="keyword">with</span> data by applying field processors to scraped data. When instantiated <span class="keyword">with</span> a selector <span class="keyword">or</span> a response it supports data extraction <span class="keyword">from</span> web pages using selectors.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Parameters</span><br><span class="line">item (scrapy.item.Item) – The item instance to populate using subsequent calls to add_xpath(), add_css(), <span class="keyword">or</span> add_value().</span><br><span class="line"></span><br><span class="line">selector (Selector object) – The selector to extract data <span class="keyword">from</span>, when using the add_xpath(), add_css(),replace_xpath(), <span class="keyword">or</span> replace_css() method.</span><br><span class="line"></span><br><span class="line">response (Response object) – The response used to construct the selector using the default_selector_class, unless the selector argument <span class="keyword">is</span> given, <span class="keyword">in</span> which case this argument <span class="keyword">is</span> ignored.</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">If no item <span class="keyword">is</span> given, one <span class="keyword">is</span> instantiated automatically using the <span class="class"><span class="keyword">class</span> <span class="title">in</span> <span class="title">default_item_class</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">The item, selector, response and remaining keyword arguments are assigned to the Loader context (accessible through the context attribute).</span><br></pre></td></tr></table></figure>

<h4 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h4><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The currently active Context of this Item Loader</span><br></pre></td></tr></table></figure>

<h4 id="default-item-class"><a href="#default-item-class" class="headerlink" title="default_item_class"></a>default_item_class</h4><h4 id="default-input-processor"><a href="#default-input-processor" class="headerlink" title="default_input_processor"></a>default_input_processor</h4><h4 id="default-output-processor"><a href="#default-output-processor" class="headerlink" title="default_output_processor"></a>default_output_processor</h4><h4 id="default-selector-class"><a href="#default-selector-class" class="headerlink" title="default_selector_class"></a>default_selector_class</h4><h4 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The Selector object to extract data <span class="keyword">from</span>. It’s either the selector given <span class="keyword">in</span> the __init__ method <span class="keyword">or</span> one created <span class="keyword">from</span> the response given <span class="keyword">in</span> the __init__ method using the default_selector_class. This attribute <span class="keyword">is</span> meant to be read-only.</span><br></pre></td></tr></table></figure>



<h4 id="add-css-field-name-css-processors-kw"><a href="#add-css-field-name-css-processors-kw" class="headerlink" title="add_css(field_name, css, processors,kw)"></a>add_css(field_name, css, processors,kw)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Similar to ItemLoader.add_value() but receives a CSS selector instead of a value, which <span class="keyword">is</span> used to extract a list of unicode strings <span class="keyword">from</span> the selector associated <span class="keyword">with</span> this ItemLoader.</span><br></pre></td></tr></table></figure>



<h4 id="add-value-field-name-value-processors-kw"><a href="#add-value-field-name-value-processors-kw" class="headerlink" title="add_value(field_name,value,processors,kw)"></a>add_value(<strong><em>field_name</em></strong>,value,processors,kw)</h4><h4 id="add-xpath-field-name-xpath-processors-kw"><a href="#add-xpath-field-name-xpath-processors-kw" class="headerlink" title="add_xpath(field_name, xpath, processors,kw)"></a>add_xpath(field_name, xpath, processors,kw)</h4><h4 id="get-collected-values-field-name"><a href="#get-collected-values-field-name" class="headerlink" title="get_collected_values(field_name)"></a>get_collected_values(field_name)</h4><h4 id="get-css-css-processors-kw"><a href="#get-css-css-processors-kw" class="headerlink" title="get_css(css,processors,kw)"></a>get_css(css,processors,kw)</h4><h4 id="get-output-value-field-name"><a href="#get-output-value-field-name" class="headerlink" title="get_output_value(field_name)"></a>get_output_value(field_name)</h4><h4 id="get-value-value-processors-kw"><a href="#get-value-value-processors-kw" class="headerlink" title="get_value(value,processors,kw)"></a>get_value(value,processors,kw)</h4><h4 id="get-xpath-xpath-processors-kw"><a href="#get-xpath-xpath-processors-kw" class="headerlink" title="get_xpath(xpath,processors,kw)"></a>get_xpath(xpath,processors,kw)</h4><h3 id="项目实战-Scrapy通用爬虫"><a href="#项目实战-Scrapy通用爬虫" class="headerlink" title="项目实战(Scrapy通用爬虫)"></a>项目实战(Scrapy通用爬虫)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">首先新建一个Scrapy项目，名为 scrapyuniversal, 如下所示：</span><br><span class="line">scrapy startproject scrapyuniversal</span><br><span class="line">创建一个CrawlSpider,需要先制定一个模板。我们可以先看看有哪些可用模板，命令如下所示：</span><br><span class="line">scrapy genspider <span class="number">-1</span></span><br><span class="line">运行结果如下所示：</span><br><span class="line">Available templates:</span><br><span class="line">basic</span><br><span class="line">crawl</span><br><span class="line">csvfeed</span><br><span class="line">xmlfeed</span><br><span class="line"></span><br><span class="line">之前创建Spider的时候，我们默认使用了第一个模板basic</span><br><span class="line">这次要创建CrawlSpider,就需要使用第二个模板crawl,创建命令如下所示：</span><br><span class="line">scrapy genspider -t crawl china tech.china.com</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运行之后便会生成一个CrawlSpider,其内容如下所示：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'china'</span></span><br><span class="line">    allowed_domains = [<span class="string">'tech.china.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://tech.china.com/'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'Items/'</span>), callback=<span class="string">'parse_item'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = &#123;&#125;</span><br><span class="line">        <span class="comment">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment">#item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment">#item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这次生成的Spider内容多了一个rules属性的定义。Rule的第一个参数是LinkExtractor,就是上文所说的LxmlLinkExtractor,只是名称不同。同时，默认的回调函数也不再是parse,而是 parse_item</span><br></pre></td></tr></table></figure>

<h4 id="定义Rule"><a href="#定义Rule" class="headerlink" title="定义Rule"></a>定义Rule</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要实现新闻的爬取，我们需要做的就是定义好Rule,然后实现解析函数。下面我们就来一步步实现这个过程。</span><br><span class="line">首先将start_urls修改为起始链接，代码如下所示：</span><br><span class="line">start_urls = [<span class="string">'http://tech.china.com/articles/'</span>]</span><br><span class="line"></span><br><span class="line">之后 ， Spider爬取start_urls里面的每一个链接。所以这里第一个爬取的页面就是我们刚才所定义的链接。得到Response之后，Spider就会根据每一个Rule来提取这个页面内的超链接，去生成进一步的Request</span><br><span class="line"></span><br><span class="line">接下来，我们就需要定义Rule来指定提取哪些链接</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这是新闻的列表页，下一步自然就是将列表中的每条新闻详情的链接提取出来。这里直接指定这些链接所在区域即可。查看源代码，所有链接都在ID为left_side 的节点内，具体来说是它内部的</span><br><span class="line"><span class="class"><span class="keyword">class</span>为<span class="title">con_item</span>的节点</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此处我们可以用LinkExtractor的restrict_xp aths属性来指定，之后 Spider就会从这个区域提取所有的超链接并生成Request 但是，每篇文章的导航中可能还有一些其他的超链接标签，我们只想把需要的新闻链接提取出来。真正的新闻链接路径都是以article开头的，我们用一个正则表达式将其匹配出来再赋值给allow参数即可。另外，这些链接对应的页面其实就是对应的新闻详情页，而我们需要解析的就是新闻的详情信息，所以此处还需要指定一个回调函数callback</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">到现在我们就可以构造出一个Rule了，代码如下所示：</span><br><span class="line">Rule(LinkExtractor(allow=<span class="string">'article\/.*\.html'</span>, restrict_xpaths=<span class="string">'〃 div[@id="left_side"]</span></span><br><span class="line"><span class="string">//div[@class="con_item")'</span>), callback=<span class="string">'parse_item'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来，我们还要让当前页面实现分页功能，所以还需要提取下一页的链接。分析网页源码之后可以发现下一页链接是在ID 为 pageStyle的节点内</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">但是，下一页节点和其他分页链接区分度不高，要取出此链接我们可以直接用XPath的文本匹配方式，所以这里我们直接用LinkExtractor的 restrict_xpaths属性来指定提取的链接即可。另外，我们不需要像新闻详情页一样去提取此分页链接对应的页面详情信息，也就是不需要生成Item ,所以不</span><br><span class="line">需要加callback参数。另外这下一页的页面如果请求成功了就需要继续像上述情况一样分析，所以它还需要加一个follow参数为<span class="literal">True</span> ,代表继续跟进匹配分析。其实follow参数也可以不加，因为当callback为空的时候follow默认为<span class="literal">True</span>。 此处 Rule定义为如下所示：</span><br><span class="line"></span><br><span class="line">Rule(LinkExtractor(restrict_xpaths=<span class="string">'//div[@id="pageStyle"]//a[contains(.,"下一页")]'</span>))</span><br><span class="line">所 以 现 在rule s就变成了：</span><br><span class="line">rules = (</span><br><span class="line">Rule(LinkExtractor(allow=<span class="string">'article\/.*\.html'</span>,</span><br><span class="line">restrict_xpaths=<span class="string">'//div[@id="left_side"]//div[@class="con_item"]'</span>), callback=<span class="string">'parse_item'</span>),</span><br><span class="line">Rule(LinkExtractor(restrict_xpaths=<span class="string">'//div[@id="pageStyle"]//a[contains(.,"下一页")]'</span>),follow=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接着我们运行代码，命令如下所示：</span><br><span class="line">scrapy crawl china</span><br><span class="line">现在已经实现页面的翻页和详情页的抓取了，我们仅仅通过定义了两个Rule即实现了这样的功能</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/qYbbX8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/25/qYbbX8.md.png" alt="qYbbX8.md.png"></a></p>
<h4 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们需要做的就是解析页面内容了，将标题、发布时间、正文、来源提取出来即可。首先定义一个Item ,如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Field, Item</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newsitem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    title = Field()</span><br><span class="line">    url = Field()</span><br><span class="line">    text = Field()</span><br><span class="line">    datetime = Field()</span><br><span class="line">    source = Field()</span><br><span class="line">    website = Field()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这里的字段分别指新闻标题、链接、正文、发布时间、来源、站点名称，其中站点名称直接赋值为中华网。因为既然是通用爬虫，肯定还有很多爬虫也来爬取同样结构的其他站点的新闻内容，所以需要一个字段来区分一下站点名称</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果像之前一样提取内容，就直接调用response变量的xpath()、css()等方法即可 。这里parse_item()方法的实现如下所示：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    item = Newsltem()</span><br><span class="line">    item[<span class="string">'title'</span>] = response.xpath(<span class="string">'//hl[@id="chan_newsTitle"]/text()'</span>).extract_first()</span><br><span class="line">    item[<span class="string">'url'</span>] = response.url</span><br><span class="line">    item[<span class="string">'text'</span>] = <span class="string">''</span>.join(response.xpath(<span class="string">'//div[@id="chan_newsDetail"]//text()'</span>).extract()).strip()</span><br><span class="line">    item[<span class="string">'datetime'</span>] = response.xpath(<span class="string">'//div[@id="chan_newslnfo"]/text()'</span>).re_first(<span class="string">'(\d+-\d+-\d+\s\d+:\d+:\d+)'</span>)</span><br><span class="line">    item[<span class="string">'source'</span>] = response.xpath(<span class="string">'//div[@id="chan_newslnfo"]/text()'</span>).re_first(<span class="string">'来源:(.*)'</span>).strip()</span><br><span class="line">    item[ <span class="string">'website'</span>] = <span class="string">'中华网'</span></span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/qtSpO1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2022/03/25/qtSpO1.md.png" alt="qtSpO1.md.png"></a></p>
<h4 id="使用ItemLoader"><a href="#使用ItemLoader" class="headerlink" title="使用ItemLoader"></a>使用ItemLoader</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">现在我们就可以成功将每条新闻的信息提取出来。</span><br><span class="line">不过我们发现这种提取方式非常不规整。下面我们再用Item Loader,通过 add_xpath()、add_css()、add_value()等方式实现配置化提取。我们可以改写parse_ item (), 如下所示:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    loader = ChinaLoader(item=NewsItem(), response=response)</span><br><span class="line">    loader.add_xpath(<span class="string">'title'</span>, <span class="string">'//hl[@id="chan_newsTitle"]/text()'</span>)</span><br><span class="line">    loader.add_value(<span class="string">'url'</span>, response.url)</span><br><span class="line">    loader.add_xpath(<span class="string">'text'</span>, <span class="string">'//div[@id="chan_newsDetail"]//text()'</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">'datetime'</span>, <span class="number">1</span>//div[@id=<span class="string">"chan_newslnfo"</span>]/text()<span class="string">', (\d+-\d+-\d+\s\d+:\d+:\d+)'</span>)</span><br><span class="line">    loader.add_xpath(<span class="string">'source'</span>, <span class="string">'//div[@id="chan_newslnfo"]/text()'</span>, re=<span class="string">'来源：(.*)'</span>)</span><br><span class="line">    loader.add_value(<span class="string">'website'</span>, ，中华网<span class="string">')</span></span><br><span class="line"><span class="string">    yield loader.load_item()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里我们定义了一个Item Loader的子类，名为ChinaLoader,其实现如下所示：</span></span><br><span class="line"><span class="string">from scrapy.loader import ItemLoader</span></span><br><span class="line"><span class="string">from scrapy.loader.processors import TakeFirst, Join, Compose</span></span><br><span class="line"><span class="string">class NewsLoader(ItemLoader):</span></span><br><span class="line"><span class="string">    default_output_processor = TakeFirst()</span></span><br><span class="line"><span class="string">class ChinaLoader(NewsLoader):</span></span><br><span class="line"><span class="string">    text_out = Compose(Join(), lambda s: s.strip())</span></span><br><span class="line"><span class="string">    source_out = Compose(Join(), lambda s: s.strip())</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ChinaLoader继承了News Loader类，其内定义了一个通用的 Out Processor为TakeFirst,这相当于之前所定义的extrac t_first()方法的功能。我们在ChinaLoader中定义了text_out和source_out字段。这里使用了一个Compose Processor,它有两个参数：第一个参数Join也是一个Processor,它可以把列表拼合成一个字符串；第二个参数是一个匿名函数，可以将字符串的头尾空白字符去掉。经过这一系列处理之后，我们就将列表形式的提取结果转化为去重头尾空白字符的字符串。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">代码重新运行，提取效果是完全一样的。</span><br><span class="line">至此，我们已经实现了爬虫的半通用化配置</span><br></pre></td></tr></table></figure>

<h4 id="通用配置抽取"><a href="#通用配置抽取" class="headerlink" title="通用配置抽取"></a>通用配置抽取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为什么现在只做到了半通用化？如果我们需要扩展其他站点，仍然需要创建一个新的CrawlSpider,定义这个站点的Rule,单独实现parse_item()方法还有很多 代码是重复的，如CrawlSpider的变量、方法名几乎都是一样的。那么我们可不可以把多个类似的几个爬虫的代码共用，把完全不相同的地方抽离出来，做成可配置文件呢？</span><br><span class="line">当然可以。那我们可以抽离出哪些部分？所有的变量都可以抽取，如 name、 allowed_domains,start_urls、rules等。这些变量在CrawlSpider初始化的时候赋值即可。我们就可以新建一个通用的Spider来实现这个功能，命令如下所示:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy genspider -t crawl universal universal</span><br><span class="line">这个全新的Spider名为universalo 接下来，我们将刚才所写的Spider内的属性抽离出来配置成一个JSON,命名为china.json,放到configs文件夹内，和spiders文件夹并列，代码如下所示：</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"spider"</span>: <span class="string">"universal"</span>,</span><br><span class="line"><span class="string">"website"</span>:<span class="string">"中华网科技"</span>，</span><br><span class="line"><span class="string">"type"</span>:<span class="string">"新闻"</span>，</span><br><span class="line"><span class="string">"index"</span>: <span class="string">"http://tech.china.com/"</span>,</span><br><span class="line"><span class="string">"settings"</span>: &#123;</span><br><span class="line"><span class="string">"USER_AGENT"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko)</span></span><br><span class="line"><span class="string">Chrome/60.0.3112.90 Safari/537.36"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"start_urls"</span>:[</span><br><span class="line"><span class="string">"http://tech.china.com/articles/"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"allowed_domains"</span>: [</span><br><span class="line"><span class="string">"tech.china.com"</span></span><br><span class="line"><span class="string">"rules"</span>: <span class="string">"china"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一个字段spider即Spider的名称，在这里是universal。后面是站点的描述，比如站点名称、类型、首页等。随后的settings是该Spider特有的se ttings配置，如果要覆盖全局项目，settings.py内的配置可以单独为其配置。随后是Spider的一些属性，如start_u:rls、allowed_domains、rules等。</span><br><span class="line">rules也可以单独定义成一个rules.py文件，做成配置文件，实现Rule的分离，如下所示:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Rule</span><br><span class="line">rules = &#123;</span><br><span class="line"><span class="string">'china'</span>: (</span><br><span class="line">Rule(LinkExtractor(allow=<span class="string">'article\/.*\.html'</span>, restrict_xpaths=<span class="string">'//div[@id="left_side"]</span></span><br><span class="line"><span class="string">//div[@class="con_item"]'</span>),</span><br><span class="line">callback=<span class="string">'parse_item'</span>),</span><br><span class="line">Rule(LinkExtractor(restrict_xpaths=<span class="string">'//div[@id="pageStyle"]//a[contains(.,"下一页")]'</span>))</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这样我们将基本的配置抽取出来。如果要启动爬虫，只需要从该配置文件中读取然后动态加载到Spider中即可。所以我们需要定义一个读取该JSON文件的方法，如下所示：</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> realpath, dirname</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">(name)</span>:</span></span><br><span class="line">    patR = dirname(:realpath(_ file_ ) ) + <span class="string">'/configs/'</span> + name + <span class="string">'.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f :</span><br><span class="line">		<span class="keyword">return</span> json.loads(f.read())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义了 get_corrfig()方法之后，我们只需要向其传入JSON配置文件的名称即可获取此JSON配置信息。随后我们定义入口文件run.py,把它放在项目根目录下，它的作用是启动Spider,如下所示：</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> scrapy.utiIs.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">from</span> scrapyuniversal.spiders.universal <span class="keyword">import</span> UniversalSpider</span><br><span class="line"><span class="keyword">from</span> scrapyuniversal.utils <span class="keyword">import</span> get_config</span><br><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    name = sys.argv[l]</span><br><span class="line">    custom_settings = get_config(name)</span><br><span class="line">    <span class="comment"># 爬取 茯用的Spider名荡</span></span><br><span class="line">    spider = custom_settings.get(<span class="string">'spider'</span>, <span class="string">'universal'</span>)</span><br><span class="line">    project_settings = get_project_settings()</span><br><span class="line">    settings = diet(project_settings.copy())</span><br><span class="line">    <span class="comment"># 合并配置</span></span><br><span class="line">    settings.update(custom_settings.get(，settings<span class="string">'))</span></span><br><span class="line"><span class="string">    process = CrawlerProcess(settings)</span></span><br><span class="line"><span class="string">    # 启动爬虫</span></span><br><span class="line"><span class="string">    process.crawl(spider, **&#123;'</span>name<span class="string">': name&#125;)</span></span><br><span class="line"><span class="string">    process.start()</span></span><br><span class="line"><span class="string">if _ name_ == '</span> _ main_ <span class="string">' :</span></span><br><span class="line"><span class="string">	run()</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">                                        </span></span><br><span class="line"><span class="string">  运行入口为run()</span></span><br><span class="line"><span class="string">  首先获取命令行的参数并赋值为name, name就是JSON文件的名称，其实就</span></span><br><span class="line"><span class="string">是要爬取的目标网站的名称。我们首先利用get_config()方法，传入该名称读取刚才定义的配置文件。</span></span><br><span class="line"><span class="string">获取爬取使用的spider的名称、配置文件中的settings配置，然后将获取到的s ettings配置和项目全局的settings配置做了合并。新建一CrawlerProcess,传入爬取使用的配置。调用crawl()和 start()方法即可启动爬取。</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider的用法</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython3%E7%88%AC%E8%99%AB-13%E7%AB%A0(13.4%2013.5)%20%20Scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8-%20Spider%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8CDownloader%20Middleware%20%E7%9A%84%E7%94%A8%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="崔庆才python3爬虫-13章-Scrapy框架的使用-Spider的用法和Downloader-Middleware-的用法"><a href="#崔庆才python3爬虫-13章-Scrapy框架的使用-Spider的用法和Downloader-Middleware-的用法" class="headerlink" title="崔庆才python3爬虫-13章 Scrapy框架的使用-Spider的用法和Downloader Middleware 的用法"></a>崔庆才python3爬虫-13章 Scrapy框架的使用-Spider的用法和Downloader Middleware 的用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在 Scrapy中，要抓取网站的链接配置、抓取逻辑、解析逻辑里其实都是在Spider中配置的。在前一节实例中，我们发现抓取逻辑也是在Spider中完成的。本节我们就来专门了解一下Spider的基本用法。</span><br></pre></td></tr></table></figure>

<h2 id="Spider的用法"><a href="#Spider的用法" class="headerlink" title="Spider的用法"></a>Spider的用法</h2><h3 id="Spider运行流程"><a href="#Spider运行流程" class="headerlink" title="Spider运行流程"></a>Spider运行流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在实现Scrapy爬虫项目时，最核心的类便是Spider类了， 它定义了如何爬取某个网站的流程和解析方式。 简单来讲， Spider要做的事就是如下两件：</span><br><span class="line">□ 定义爬取网站的动作；</span><br><span class="line">□ 分析爬取下来的网页。</span><br><span class="line">对于Spider类来说，整个爬取循环过程如下所述。</span><br><span class="line">□ 以初始的URL初始化Request,并设置回调函数。当该 Request成功请求并返回时， Response生成并作为参数传给该回调函数。</span><br><span class="line">□ 在回调函数内分析返回的网页内容。返回结果有两种形式。一种是解析到的有效结果返回字典或Item对象，它们可以经过处理后(或宜接)保存。另一种是解析得到下一个(如下一页)链接，可以利用此链接构造Request并设置新的回调函数，返回Request等待后续调度。</span><br><span class="line">□ 如果返回的是字典或Item对象，我们可通过Feed Exports等组件将返回结果存入到文件。如果设置了Pipeline的话，我们可以使用Pipeline处 理 (如过滤、修正等) 并保存。</span><br><span class="line">□ 如果返回的是 Reqeust, 那么Request执行成功得到Response之后，Response会被传递给Request中定义的回调函数，在回调函数中我们可以再次使用选择器来分析新得到的网页内容 ，并根据分析的数据生成Item。</span><br></pre></td></tr></table></figure>

<h3 id="Spider类分析"><a href="#Spider类分析" class="headerlink" title="Spider类分析"></a>Spider类分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在上一节的例子中，我们定义的Spider是继承自 scrapy.spiders.Spider, scrapy.spiders.Spider</span><br><span class="line">这个类是最简单最基本的Spider类，其他Spider必须继承这个类。还有后面一些特殊Spider类也都是继承自它。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy.spiders.Spider这个类提供了 start_requests()方法的默认实现，读取并请求start_urls属性，并根据返回的结果调用parse()方法解析结果。它还有如下一些基础属性。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name： 爬虫名称，是定义Spider名字的字符串。Spider的名字定义了 Scrapy如何定位并初始化Spider,它必须是唯一的。不过我们可以生成多个相同的Spider实例，数量没有限制。</span><br><span class="line"></span><br><span class="line">□ name是Spider最重要的属性。如果 Spider爬取单个网站，一个常见的做法是以该网站的域名名称来命名Spider例如，Spider爬取 mywebsite.com ,该 Spider通常会被命名为mywebsite</span><br><span class="line">□ allowedd_mains 允许爬取的域名，是可选配置，不在此范围的链接不会被跟进爬取。</span><br><span class="line">□ start_urls它是起始URL列表，当我们没有实现start_requests()方法时，默认会从这个列表开始抓取。</span><br><span class="line">□ custom _settings 它是一个字典，是专属于本Spider的配置，此设置会覆盖项目全局的设置。此设置必须在初始化前被更新，必须定义成类变量。</span><br><span class="line">□ crawler。它是由from_crawler()方法设置的，代表的是本Spider类对应的Crawler对象。Crawler对象包含了很多项目组件，利用它我们可以获取项目的一些配置信息，如最常见的获取项目的设置信息，即Settings</span><br><span class="line">□ settings 它是一个Settings对象，利用它我们可以直接获取项目的全局设置变量。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">除了基础属性， Spider还有一些常用的方法。</span><br><span class="line">□ start_requests() 此方法用于生成初始请求，它必须返回一个可迭代对象。此方法会默认使用start_urls 里面的URL来构造Request,而且 Request是GET请求方式。如果我们想在启动时以POST方式访问某个站点，可以直接重写这个方法，发送POST请求时使用FormRequest即可。</span><br><span class="line">□ parse() 当Response没有指定回调函数时，该方法会默认被调用。它负责处理Response,处理返回结果，并从中提取出想要的数据和下一步的请求，然后返回。该方法需要返回一个包含Request或Item 的可迭代对象。</span><br><span class="line">□ closed() 当 Spider关闭时，该方法会被调用，在这里一般会定义释放资源的一些操作或其他收尾操作。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以上内容可能不太好理解。不过不用担心，后面会有很多使用这些属性和方法的实例。通过这些实例，我们慢慢熟练掌握它们。</span><br></pre></td></tr></table></figure>

<h3 id="Using-errbacks-to-catch-exceptions-in-request-processing"><a href="#Using-errbacks-to-catch-exceptions-in-request-processing" class="headerlink" title="Using errbacks to catch exceptions in request processing"></a>Using errbacks to catch exceptions in request processing</h3><p><a href="https://docs.scrapy.org/en/latest/topics/request-response.html" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.spidermiddlewares.httperror <span class="keyword">import</span> HttpError</span><br><span class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> DNSLookupError</span><br><span class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> TimeoutError, TCPTimedOutError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrbackSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"errback_example"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.httpbin.org/"</span>,              <span class="comment"># HTTP 200 expected</span></span><br><span class="line">        <span class="string">"http://www.httpbin.org/status/404"</span>,    <span class="comment"># Not found error</span></span><br><span class="line">        <span class="string">"http://www.httpbin.org/status/500"</span>,    <span class="comment"># server issue</span></span><br><span class="line">        <span class="string">"http://www.httpbin.org:12345/"</span>,        <span class="comment"># non-responding host, timeout expected</span></span><br><span class="line">        <span class="string">"https://example.invalid/"</span>,             <span class="comment"># DNS error expected</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(u, callback=self.parse_httpbin,</span><br><span class="line">                                    errback=self.errback_httpbin,</span><br><span class="line">                                    dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_httpbin</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.logger.info(<span class="string">'Got successful response from &#123;&#125;'</span>.format(response.url))</span><br><span class="line">        <span class="comment"># do something useful here...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">errback_httpbin</span><span class="params">(self, failure)</span>:</span></span><br><span class="line">        <span class="comment"># log all failures</span></span><br><span class="line">        self.logger.error(repr(failure))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># in case you want to do something special for some errors,</span></span><br><span class="line">        <span class="comment"># you may need the failure's type:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> failure.check(HttpError):</span><br><span class="line">            <span class="comment"># these exceptions come from HttpError spider middleware</span></span><br><span class="line">            <span class="comment"># you can get the non-200 response</span></span><br><span class="line">            response = failure.value.response</span><br><span class="line">            self.logger.error(<span class="string">'HttpError on %s'</span>, response.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> failure.check(DNSLookupError):</span><br><span class="line">            <span class="comment"># this is the original request</span></span><br><span class="line">            request = failure.request</span><br><span class="line">            self.logger.error(<span class="string">'DNSLookupError on %s'</span>, request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> failure.check(TimeoutError, TCPTimedOutError):</span><br><span class="line">            request = failure.request</span><br><span class="line">            self.logger.error(<span class="string">'TimeoutError on %s'</span>, request.url)</span><br></pre></td></tr></table></figure>

<h3 id="Accessing-additional-data-in-errback-functions"><a href="#Accessing-additional-data-in-errback-functions" class="headerlink" title="Accessing additional data in errback functions"></a>Accessing additional data in errback functions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    request = scrapy.Request(<span class="string">'http://www.example.com/index.html'</span>,</span><br><span class="line">                             callback=self.parse_page2,</span><br><span class="line">                             errback=self.errback_page2,</span><br><span class="line">                             cb_kwargs=dict(main_url=response.url))</span><br><span class="line">    <span class="keyword">yield</span> request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page2</span><span class="params">(self, response, main_url)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errback_page2</span><span class="params">(self, failure)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> dict(</span><br><span class="line">        main_url=failure.request.cb_kwargs[<span class="string">'main_url'</span>],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h3 id="DOWNLOAD-TIMEOUT"><a href="#DOWNLOAD-TIMEOUT" class="headerlink" title="DOWNLOAD_TIMEOUT"></a>DOWNLOAD_TIMEOUT</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Default: <span class="number">180</span></span><br><span class="line"></span><br><span class="line">The amount of time (<span class="keyword">in</span> secs) that the downloader will wait before timing out.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This timeout can be set per spider using download_timeout spider attribute <span class="keyword">and</span> per-request using download_timeout Request.meta key.</span><br></pre></td></tr></table></figure>

<h3 id="DUPEFILTER-CLASS"><a href="#DUPEFILTER-CLASS" class="headerlink" title="DUPEFILTER_CLASS"></a>DUPEFILTER_CLASS</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Default: <span class="string">'scrapy.dupefilters.RFPDupeFilter'</span></span><br><span class="line"></span><br><span class="line">The <span class="class"><span class="keyword">class</span> <span class="title">used</span> <span class="title">to</span> <span class="title">detect</span> <span class="title">and</span> <span class="title">filter</span> <span class="title">duplicate</span> <span class="title">requests</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">The</span> <span class="title">default</span> <span class="params">(RFPDupeFilter)</span> <span class="title">filters</span> <span class="title">based</span> <span class="title">on</span> <span class="title">request</span> <span class="title">fingerprint</span> <span class="title">using</span> <span class="title">the</span> <span class="title">scrapy</span>.<span class="title">utils</span>.<span class="title">request</span>.<span class="title">request_fingerprint</span> <span class="title">function</span>. <span class="title">In</span> <span class="title">order</span> <span class="title">to</span> <span class="title">change</span> <span class="title">the</span> <span class="title">way</span> <span class="title">duplicates</span> <span class="title">are</span> <span class="title">checked</span> <span class="title">you</span> <span class="title">could</span> <span class="title">subclass</span> <span class="title">RFPDupeFilter</span> <span class="title">and</span> <span class="title">override</span> <span class="title">its</span> <span class="title">request_fingerprint</span> <span class="title">method</span>. <span class="title">This</span> <span class="title">method</span> <span class="title">should</span> <span class="title">accept</span> <span class="title">scrapy</span> <span class="title">Request</span> <span class="title">object</span> <span class="title">and</span> <span class="title">return</span> <span class="title">its</span> <span class="title">fingerprint</span> <span class="params">(a string)</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">You can disable filtering of duplicate requests by setting DUPEFILTER_CLASS to 'scrapy.dupefilters.BaseDupeFilter'. Be very careful about this however, because you can get into crawling loops. It’s usually a better idea to set the dont_filter parameter to True on the specific Request that should not be filtered.</span><br></pre></td></tr></table></figure>

<h3 id="Settings-per-spider"><a href="#Settings-per-spider" class="headerlink" title="Settings per-spider"></a>Settings per-spider</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Spiders (See the Spiders chapter <span class="keyword">for</span> reference) can define their own settings that will take precedence <span class="keyword">and</span> override the project ones. They can do so by setting their custom_settings attribute:</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'myspider'</span></span><br><span class="line"></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">'SOME_SETTING'</span>: <span class="string">'some value'</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Downloader-Middleware-的用法"><a href="#Downloader-Middleware-的用法" class="headerlink" title="Downloader Middleware 的用法"></a>Downloader Middleware 的用法</h2><p><a href="https://docs.scrapy.org/en/latest/topics/downloader-middleware.html" target="_blank" rel="external nofollow noopener noreferrer">DOWNLOAD_MIDDLEWARE官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Downloader Middleware即下载中间件，它是处于Scrapy的Request和 Response之间的处理模块。</span><br><span class="line">我们首先来看看它的架构，如图 <span class="number">13</span>・<span class="number">1</span>所示。</span><br><span class="line">Scheduler从队列中拿出一个Request发送给Downloader执行下载，这个过程会经过Downloader Middleware的处理。另外，当Downloader将Request下载完成得到Response返回给Spider时会再次经过Downloader Middleware处理。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">也就是说，Downloader Middleware在整个架构中起作用的位置是以下两个。</span><br><span class="line">□ 在 Scheduler调度出队列的Request发 送 给 Doanloader下载之前，也就是我们可以在Request执行下载之前对其进行修改。</span><br><span class="line">□ 在下载后生成的Response发送给 Spider之前，也就是我们可以在生成Resposne被 Spider解析之前对其进行修改。</span><br><span class="line">Downloader Middleware的功能十分强大，修改User-Agent、 处理重定向、设置代理、失败重试、设置Cookies等功能都需要借助它来实现。下面我们来了解一下Downloader Middleware的详细用法。</span><br></pre></td></tr></table></figure>

<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">需要说明的是， Scrapy其实已经提供了许多Downloader Middleware, 比如负责失败重试、自动重定向等功能的Middleware,它们被DOWNLOADER_MIDDLEWARES_BASE变量所定义。</span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES_BASE 变量的内容如下所示:</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span>: <span class="number">300</span>,</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span>: <span class="number">350</span>,</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span>: <span class="number">400</span>,</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>: <span class="number">550</span>,</span><br><span class="line"><span class="number">1</span>scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware<span class="string">': 560,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware<span class="string">': 580,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware<span class="string">': 590,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.redirect.RedirectMiddleware<span class="string">': 600,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.cookies.CookiesMiddleware<span class="string">': 700,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware<span class="string">': 750,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.stats.DownloaderStats<span class="string">': 850,</span></span><br><span class="line"><span class="string">'</span>scrapy.downloadermiddlewares.htt匹ache.HttpCacheMiddleware<span class="string">': 900,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  这是一个字典格式，字典的键名是Scrapy内置的Downloader Middleware的名称，键值代表了调用的优先级，优先级是一个数字，(数字越小代表越靠近Scrapy引擎)，数字越大代表越靠近Downloader,数字小的Downloader Middleware会被优先调用。</span></span><br><span class="line"><span class="string">  如果自己定义的Downloader Middleware要添加到项目里， DOWNLOADE R_MIDDLEWARES_BASE变量不能直接修改。 Scrapy提供了另外一个设置变量DOWNLOADER_MIDDLEWARES,我们直接修改这个变量就可以添加自己定义的Downloader Middleware, 以及禁用DOWN LOADER_MIDDLEWARES_BASE里面定义的Downloader Middleware</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">下面我们具体来看看Downloader Middleware的使用方法。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARE_BASE和DOWNLOADER_MIDDLEWARE列表里的会最终一起排序</span><br><span class="line"></span><br><span class="line">如果想禁用内置的在DOWNLOADER_MIDDLEWARE_BASE里且启用的middleware，那么需要在DOWNLOADER_MIDDLEWARE设置它的值为<span class="literal">None</span>(You should never modify this setting <span class="keyword">in</span> your project, modify DOWNLOADER_MIDDLEWARES instead.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(DOWNLOADER_MIDDLEWARE_BASE默认值:https://docs.scrapy.org/en/latest/topics/settings.html<span class="comment">#std-setting-DOWNLOADER_MIDDLEWARES_BASE)</span></span><br><span class="line"></span><br><span class="line">Finally, keep <span class="keyword">in</span> mind that some middlewares may need to be enabled through a particular setting. See each middleware documentation <span class="keyword">for</span> more info.</span><br></pre></td></tr></table></figure>

<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  Scrapy内置的Downloader Middleware为Scrapy提供了基础的功能，但在项目实战中我们往往需要单独定义Downloader Middleware</span><br><span class="line">不用担心，这个过程非常简单，我们只需要实现某几个方法即可。</span><br><span class="line">  每个Downloader Middleware都定义了一个或多个方法的类，核心的方法有如下三个。</span><br><span class="line">□ process_request(request, spider)</span><br><span class="line">□ process_response(request, response, spider)</span><br><span class="line">□ process_exception(request, exception, spider)</span><br><span class="line"></span><br><span class="line">我们只需要实现至少一个方法，就可以定义一个Downloader Middleware</span><br><span class="line">下面我们来看看这三个方法的详细用法。</span><br></pre></td></tr></table></figure>

<h4 id="process-request-request-spider"><a href="#process-request-request-spider" class="headerlink" title="process_request(request, spider)"></a>process_request(request, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Request被 Scrapy引擎调度给Downloader之前，process_request()方法就会被调用，也就是在Request从队列里调度出来到Downloader下载执行之前 ，我们都可以用 process_request()方法对Request进行处理。方法的返回值必须为<span class="literal">None</span>，Response对象，Request对象之一，或者抛出IgnoreRequest</span><br><span class="line">异常。</span><br><span class="line"></span><br><span class="line">process_request()方法的参数有如下两个。</span><br><span class="line">□ request,是 Request对象，即被处理的 Request。</span><br><span class="line">□ spider,是 Spdier对象，即此 Request对应的Spider</span><br><span class="line"></span><br><span class="line">返回类型不同，产生的效果也不同。下面归纳一下不同的返回情况。</span><br><span class="line">□ 当返回是<span class="literal">None</span>时，Scrapy将继续处理该Request, 接着执行其他 Downloader Middleware的process_request()方法，一直到 Downloader把 Request执行后得到Response才结束。这个过程其实就是修改Request的过程，不同的Downloader Middleware按照设置的优先级顺序依次</span><br><span class="line">对Request进行修改，最后送至Downloader执行。</span><br><span class="line"></span><br><span class="line">□ 当返回为 Response对象时，更低优先级的Downloader Middleware的 process_request()和process_exception()方法就不会被继续调用，每个 Downloader Middleware的process_response()方法转而被依次调用。调用完毕之后，直接将 Response对象发送给Spider来处理。</span><br><span class="line"></span><br><span class="line">□ 当返回为Request对象时，更低优先级的Downloader Middleware的 process_request()方法会停止执行。这个Request会重新放到调度队列里，其实它就是一个全新的Request,等待被调度。如果被Scheduler调度了，那么所有的 Downloader Middleware 的 process_request()方法会被重新按照顺序执行。</span><br><span class="line"></span><br><span class="line">□ 如果IgnoreRequest异常抛出，则所有的Downloader Middleware的 process_exception()方法会依次执行。如果没有一个方法处理这个异常，那 么 Request的 errorback()方法就会回调。如果该异常还没有被处理，那么它便会被忽略。</span><br></pre></td></tr></table></figure>

<h4 id="process-response-request-response-spider"><a href="#process-response-request-response-spider" class="headerlink" title="process_response(request, response, spider)"></a>process_response(request, response, spider)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Downloader执行Request下载之后，会得到对应的Response。Scrapy引擎便会将Response发送给Spider进行解析。在发送之前，我们都可以用process_response()方法来对Response进行处理。方法的返回值必须为Request对象、Response对象之一，或者抛出IgnoreRequest异常。</span><br><span class="line"></span><br><span class="line">process_response()方法的参数有如下三个。</span><br><span class="line">□ request,是 Request对象，即此Response对应的 Request</span><br><span class="line">□ response,是 Response对象，即此被处理的Response</span><br><span class="line">□ spider,是Spider对象，即此Response对应的 Spider</span><br><span class="line"></span><br><span class="line">下面归纳一下不同的返回情况。</span><br><span class="line">□ 当返回为Request对象时，更低优先级的Downloader Middleware的 process_response()方法不会继续调用。该Request对象会重新放到调度队列里等待被调度，它相当于一个全新的Request。然后，该Request会被process_request()方法顺次处理。</span><br><span class="line">□ 当返回为Response对象时，更低优先级的Downloader Middleware的 process_response()方法会继续调用, 继续对该Response对象进行处理。</span><br><span class="line">□如果IgnoreRequest异常抛出，则Request的errorback()方法会回调。如果该异常还没有被处理 ，那么它便会被忽略。</span><br></pre></td></tr></table></figure>

<h4 id="process-exception-request-exception-spider"><a href="#process-exception-request-exception-spider" class="headerlink" title="process_exception(request, exception, spider)"></a>process_exception(request, exception, spider)</h4><p><a href="https://blog.csdn.net/sc_lilei/article/details/80702449" target="_blank" rel="external nofollow noopener noreferrer">参考案例</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当Downloader或process_request()方法抛出异常时，例如抛出 IgnoreRequest异常，process_exception()方法就会被调用。方法的返回值必须为<span class="literal">None</span>、Response对象、Request对象之一。</span><br><span class="line"></span><br><span class="line">process_exception()方法的参数有如下三个。</span><br><span class="line">□ request,是Request对象，即产生异常的Request</span><br><span class="line">□ exception,是Exception对象，即抛出的异常。</span><br><span class="line">□ spdier,是Spider对象，即Request对应的Spider。</span><br><span class="line"></span><br><span class="line">下面归纳一下不同的返回值。</span><br><span class="line">□ 当返回为<span class="literal">None</span>时，更低优先级的Downloader Middleware的 process_exception()会被继续顺次调用，直到所有的方法都被调度完毕。</span><br><span class="line">□ 当返回为 Response对象时，更低优先级的Downloader Middleware的process_exception()方法不再被继续调用，每个Downloader Middleware的 process_response()方法转而被依次调用。</span><br><span class="line">□ 当返回为Request对象时，更低优先级的Downloader Middleware的process_exception()也不再被继续调用，该Request对象会重新放到调度队列里面等待被调度，它相当于一个全新的Request。然后，该 Request又会被process_request()方法顺次处理。</span><br><span class="line"></span><br><span class="line">以上内容便是这三个方法的详细使用逻辑。在使用它们之前，请先对这三个方法的返回值的处理情况有一个清晰的认识。在自定义Downloader Middleware的时候，也一定要注意每个方法的返回类型。</span><br><span class="line"></span><br><span class="line">下面我们用一个案例实战来加深一下对Downloader Middleware用法的理解</span><br></pre></td></tr></table></figure>

<h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">新建一个项目，命令如下所示：</span><br><span class="line">scrapy startproject scrapydownloadertest</span><br><span class="line">新建了一个Scrapy项目，名为scrapydownloadertest 进入项目，新建一个</span><br><span class="line"></span><br><span class="line">Spider,命令如下所示:</span><br><span class="line">scrapy genspider httpbin httpbin.org</span><br><span class="line">新建了一个Spider,名为httpbin ,源代码如下所示：</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpbinSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">'httpbin'</span></span><br><span class="line">    allowed_domains = [<span class="string">'httpbin.org'</span>]</span><br><span class="line">	start_urls = [<span class="string">'http://httpbin.org/'</span>]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">		<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们修改 start_urls为 ：[http://httpbin.org/get]</span><br><span class="line">随后将 parse()方法添加一行日志输出，将 response变量的text属性输出出来，这样我们便可以看到Scrapy发送的Request信息了。</span><br><span class="line"></span><br><span class="line">修改Spider内容如下所示：</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpbinSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name = <span class="string">'httpbin'</span></span><br><span class="line">	allowed_domains = [<span class="string">'httpbin.org'</span>]</span><br><span class="line">	start_urls = [<span class="string">'http://httpbin.org/get'</span>]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">		self.logger.debug(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="使用process-request-设置USER-AGENT"><a href="#使用process-request-设置USER-AGENT" class="headerlink" title="(使用process_request)设置USER_AGENT"></a>(使用process_request)设置USER_AGENT</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来运行此Spider,执行如下命令：</span><br><span class="line">scrapy crawl httpbin</span><br><span class="line">Scrapy运行结果包含Scrapy发送的Request信息, 内容如下所示：</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"args"</span>： &#123;&#125;,</span><br><span class="line"><span class="string">"headers"</span>: &#123;</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*； q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate,br"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"en"</span>,</span><br><span class="line"><span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Scrapy/1.4.0 (+http://scrapy.org)"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"origin"</span>: <span class="string">"60.207.237.85"</span>,</span><br><span class="line"><span class="string">"url"</span>: <span class="string">"http://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们观察一下Headers, Scrapy发送的Request使用的User-Agent是(Scrapy/lda+httpW/scrapy.org),</span><br><span class="line"></span><br><span class="line">这其实是由Scrapy内置的UserAgentMiddleware设置的, UserAgentMiddleware的源码如下所示：</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_init_</span><span class="params">(self, user_agent=<span class="string">'Scrapy'</span>)</span>:</span></span><br><span class="line">		self.user_agent = user_agent</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">		o = cls(crawler.settings[<span class="string">'USER_AGENT'</span>])</span><br><span class="line">		crawler.signals.connect(o.spider_opened, 					signal=signals.spider_opened)</span><br><span class="line">		<span class="keyword">return</span> o</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.user_agent = getatti(spider,<span class="string">'user_agent'</span>, self.user_agent)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> self.user_agent:</span><br><span class="line">			request.headers.setdefault(<span class="string">b'User-Agent'</span>, self.user_agent)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在from_crawler()方法中，首先尝试获取settings里面USER_AGENT,然后把USER_AGENT传递给_init_()方法进行初始化，其参数就是user_agent。如果没有传递USER_AGENT参数就默认设置为Scrapy字符串。我们新建的项目没有设置USER_AGENT,所 这里的user_agent变量就是Scrapy接下来，在 process_request()方法中，将user-agent变量设置为headers变量的一个属性，这样就成功设置了User-Agent 因此，User-Agent 就是通过此 Downloader Middleware 的 process_request()方法设置的。</span><br><span class="line"></span><br><span class="line">修改请求时的User-Agent可以有两种方式：一是修改settings里面的 USER_AGENT变量；二是通过Downloader Middleware的process_request()方法来修改。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一种方法非常简单，我们只需要在setting.py里面加一行USER_AGENT的定义即可：</span><br><span class="line">USER_AGENT = <span class="string">'Moz订la/5.0 (Macintosh; Intel Mac OS X 1O_12_6) AppleWebKit/537.36 (KHTML, like Gecko)</span></span><br><span class="line"><span class="string">Chrome/59.0.3071.115 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line">一般推荐使用此方法来设置。但是如果想设置得更灵活，比如设置随机的User-Agent,那就需要借助Downloader Middleware了。所以接下来我们用 Downloader Middleware实现一个随机 User-Agent的设置。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在 middlewares.py 里面添加一个RandomUserAgentMiddleware 的类，如下所示：</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_</span> <span class="title">init_</span> <span class="params">(self)</span>:</span></span><br><span class="line">		self.user_agents = [</span><br><span class="line"><span class="string">'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)'</span>,</span><br><span class="line"><span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0</span></span><br><span class="line"><span class="string">Safari/537.2'</span>,<span class="string">'Mozilla/5.0 (Xll; Ubuntu; Linux i686; rv:15.0) Gecko/20100101 Firefox/15.0.1'</span></span><br><span class="line">]</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">		request.headers[<span class="string">'User-Agent'</span>] = random.choice(self.user_agents)</span><br><span class="line"></span><br><span class="line">    我们首先在类的 _init_方法中定义了三个不同的 User-Agent,并用一个列表来表示。接下来实现了process_request()方法，它有一个参数request,我们直接修改request的属性即可。在这里我们直接设置了request变量的 headers属性的User-Agent,设置内容是随机选择的User-Agent,这样一个 Downloader Middleware就写好了。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">不过，要使之生效我们还需要再去调用这个Downloader Middleware 在 settings.py中，将DOWNLOADER_MIDDLEWARES取消注释，并设置成如下内容：</span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"><span class="string">'scrapydownloadertest.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来我们重新运行Spider,就可以看到User-Agent被成功修改为列表中所定义的随机的一个User-Agent了 :</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"args"</span>: &#123;&#125;,</span><br><span class="line"><span class="string">"headers"</span>: &#123;</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate,br"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"en"</span>,</span><br><span class="line"><span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9 0 en-US)"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"origin"</span>: <span class="string">"60.207.237.85"</span>,</span><br><span class="line"><span class="string">"url"</span>: <span class="string">"http://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">我们就通过实现Downloader Middleware并利用pmcess_request()方法成功设置了随机的User-Agent。</span><br></pre></td></tr></table></figure>

<h3 id="使用process-response"><a href="#使用process-response" class="headerlink" title="使用process_response()"></a>使用process_response()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  另外，Downloader Middleware还有process_response()方法。 Downloader对Request执行下载之后会得到Response,随后Scrapy引擎会将Response发送回Spider进行处理。但是在Response被发送给Spider之前，我们同样可以使用process_response()方法对Response进行处理。</span><br><span class="line">  比如这里修改一下Response 的状态码，在 RandomUserAgentMiddleware 添加如下代码：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></span><br><span class="line">	response.status = <span class="number">201</span></span><br><span class="line">	<span class="keyword">return</span> response</span><br><span class="line">我们将response变量的status属性修改为<span class="number">201</span> ,随后将 response返回 ,这个被修改后的Response就会被发送到Spider</span><br><span class="line"></span><br><span class="line">我们再在Spider里面输出修改后的状态码，在 parse()方法中添加如下的输出语句：</span><br><span class="line">self.logger.debug(<span class="string">'Status Code: '</span> + str(response.status))</span><br><span class="line"></span><br><span class="line">重新运行之后，控制台输出了如下内容：</span><br><span class="line">[httpbin] DEBUG: Status Code: <span class="number">201</span></span><br><span class="line"></span><br><span class="line">可以发现， Response的状态码成功修改了。</span><br></pre></td></tr></table></figure>

<h3 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因此要想对Response进行后处理，就可以借助于process_response()方法。</span><br><span class="line">另外还有一个process_exception()方法，它是用来处理异常的方法。如果需要异常处理的话，我们可以调用此方法。不过这个方法的使用频率相对低一些，在此不用实例演示。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本节讲解了Downloader Middleware的基本用法。此组件非常重要，是做异常处理和反爬处理的核心。后面我们会在实战中应用此组件来处理代理、 Cookies等内容。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
<p>Typewriter Mode** 已开启。</p>
<p>可以在<code>视图</code>菜单中关闭</p>
<p>不再显示关闭</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>Scrapy框架</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰java教程笔记-快速入门</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-java%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="fdaeefa757dc4a23257f0369242566c6d0ca0f462ea7edabea3a13addea2f137"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>廖雪峰java笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上一页和下一页乱码</title>
    <url>/hexo%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%92%8C%E4%B8%8B%E4%B8%80%E9%A1%B5%E4%B9%B1%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="hexo上一页和下一页乱码"><a href="#hexo上一页和下一页乱码" class="headerlink" title="hexo上一页和下一页乱码"></a>hexo上一页和下一页乱码</h2><p><em>在themes\next\layout_partials\中，更改pagination.swig文件如下：</em></p>
<p><a href="https://imgchr.com/i/823CJe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/823CJe.md.png" alt="823CJe.png" border="0" width="500/"></a></p>
<p><strong>更改为：</strong></p>
<img src="https://s1.ax1x.com/2020/03/20/828XE6.png" alt="828XE6.png" border="0">







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>乱码</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO开启推送</title>
    <url>/hexo%E5%BC%80%E5%90%AF%E6%8E%A8%E9%80%81SEO.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启推送"><a href="#开启推送" class="headerlink" title="开启推送"></a>开启推送</h2><h3 id="网址递交"><a href="#网址递交" class="headerlink" title="网址递交"></a>网址递交</h3><p><em>将网站链接提交到百度，<a href="http://www.sousuoyinqingtijiao.com/baidu/tijiao/" target="_blank" rel="external nofollow noopener noreferrer">百度搜索引擎提交入口 </a>,然后验证你的网站，这一点网上有很详细的教程我就不复述了，验证确认你的网站后，继续验证你的网站的robots.txt和sitemap文件是否可用，一般都是可用的。</em></p>
<h2 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h2><p><em>把下面的代码放到D:\lang_blog\themes\next\source\js\src目录下，文件名为bai.js</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var bp &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    bp.src &#x3D; &#39;&#x2F;&#x2F;push.zhanzhang.baidu.com&#x2F;push.js&#39;;</span><br><span class="line">    var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p><em>在yourblog/scaffolds/post.md中，添加下面的代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;bai.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p><em>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</em></p>
<h2 id="手动推送"><a href="#手动推送" class="headerlink" title="手动推送"></a>手动推送</h2><p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>推送</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之开启压缩文件</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%BC%80%E5%90%AF%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启压缩文件"><a href="#开启压缩文件" class="headerlink" title="开启压缩文件"></a>开启压缩文件</h2><p><em>因为hexo生成的文件是静态html，里面占用了大量的空白符。使用gulp进行压缩接口提高访问速度并且降低内存。</em></p>
<p><em>在根目录下打开git bash输入如下命令:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line">npm install gulp-concat</span><br><span class="line">npm install gulp-imagemin</span><br></pre></td></tr></table></figure>

<p><em>在根目录下创建gulpfile.js，内容如下:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;),</span><br><span class="line">    uglify &#x3D; require(&#39;gulp-uglify&#39;),</span><br><span class="line">    cssmin &#x3D; require(&#39;gulp-minify-css&#39;),</span><br><span class="line">    imagemin &#x3D; require(&#39;gulp-imagemin&#39;),</span><br><span class="line">    htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;),</span><br><span class="line">    htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">    concat &#x3D; require(&#39;gulp-concat&#39;);</span><br><span class="line">&#x2F;&#x2F;JS压缩</span><br><span class="line">gulp.task(&#39;uglify&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;js&#x2F;**&#x2F;.js&#39;,&#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;])&#x2F;&#x2F;只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;,&#39;!.&#x2F;public&#x2F;zuoxi&#x2F;**&#x2F;*.js&#39;,,&#39;!.&#x2F;public&#x2F;radio&#x2F;**&#x2F;*.js&#39;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;js&#39;));&#x2F;&#x2F;对应修改为.&#x2F;public即可</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-js压缩</span><br><span class="line">gulp.task(&#39;fancybox:js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 合并 JS</span><br><span class="line">gulp.task(&#39;jsall&#39;, function () &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    &#x2F;&#x2F; 压缩后重命名</span><br><span class="line">        .pipe(concat(&#39;app.js&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-css压缩</span><br><span class="line">gulp.task(&#39;fancybox:css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.css&#39;)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;CSS压缩</span><br><span class="line">gulp.task(&#39;cssmin&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;css&#x2F;main.css&#39;,&#39;!.&#x2F;public&#x2F;css&#x2F;*min.css&#39;])   </span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;css&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;图片压缩</span><br><span class="line">gulp.task(&#39;images&#39;, function() &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;uploads&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: false</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;uploads&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 html文件 public&#x2F;**&#x2F;*.hmtl 表示public下所有文件夹中html，包括当前目录</span><br><span class="line">    gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">      return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">             removeComments: true,</span><br><span class="line">             minifyJS: true,</span><br><span class="line">             minifyCSS: true,</span><br><span class="line">             minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">    &#125;);</span><br><span class="line">gulp.task(&#39;build&#39;, [&#39;uglify&#39;, &#39;cssmin&#39;, &#39;fancybox:js&#39;, &#39;fancybox:css&#39;, &#39;jsall&#39;,&#39;images&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;, &#39;minify-html&#39;</span><br></pre></td></tr></table></figure>

<p><em>在package.json文件中写入：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">“build”: “hexo clean &amp;&amp; hexo g &amp;&amp; gulp build ”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如图：</em></p>
<p><a href="https://imgchr.com/i/82S7dK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/82S7dK.png" alt="82S7dK.png" border="0"></a></p>
<p> <em>输入命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p><em>就可实现hexo clean ,hexo generator,压缩的功能，再hexo deploy，就可以了(这里我把hexo deploy一起放在了里面，可以直接完成全过程）</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>压缩文件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之seo优化开启</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bseo%E4%BC%98%E5%8C%96%E5%BC%80%E5%90%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启seo优化选项"><a href="#开启seo优化选项" class="headerlink" title="开启seo优化选项"></a>开启seo优化选项</h2><p><em>/themes/next/config.yml中开启：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seo: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keywords:网站域名</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo优化</tag>
        <tag>开启</tag>
      </tags>
  </entry>
  <entry>
    <title>seo优化之准备工作</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="生成站点地图-sitemap-xml和baidusitemap-xml"><a href="#生成站点地图-sitemap-xml和baidusitemap-xml" class="headerlink" title="生成站点地图 sitemap.xml和baidusitemap.xml"></a>生成站点地图 sitemap.xml和baidusitemap.xml</h2><p><em>在根目录下，打开git bash输入如下命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save      </span><br><span class="line"></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>



<p><em>在站点目录的配置文件_config.yml中添加如下代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p><em>这样每次执行完heox generator,都会在/Public/里生成*</em>sitemap.xml<strong>和</strong>baidusitemap.xml***</p>
<h2 id="优化网页URL"><a href="#优化网页URL" class="headerlink" title="优化网页URL"></a>优化网页URL</h2><p><em>seo搜索引擎认为最优的网页是从主页点三次就可以到任何页面，但是默认生成的是：<strong>sitename/year/mounth/day/title</strong>四层结构，这样的结构不理由seo，爬虫经常爬取不到我们的文章，所以我们要将我们的url更改成sitename/title。配置站点文件_Config.xml如下：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;你的网站</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/8gUDFP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/8gUDFP.png" alt="8gUDFP.png" border="0"></a></p>
<p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之s首页标题优化</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%87%E9%A2%98%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="首页标题优化"><a href="#首页标题优化" class="headerlink" title="首页标题优化"></a>首页标题优化</h2><p><em>seo最重要的是你的标题，一般搜索都是搜索你的标题。更改themes\next\layout\index.swig文件</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>改成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>这时候你的首页会更符合网站名称 - 网站描述这习惯。</em></p>
<p><em>进阶，做了seo优化，把关键词也显示在title标题里，可改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意：别堆砌关键字，整个标题一般不超过80个字符，可以通过chinaz的seo综合查询检查。</em></p>
<p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>标题优化</tag>
      </tags>
  </entry>
  <entry>
    <title>seo优化之关键词与描述</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%8E%E6%8F%8F%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="关键词与描述"><a href="#关键词与描述" class="headerlink" title="关键词与描述"></a>关键词与描述</h2><p><em>搜索引擎除了捉取标题外，页面的关键词和描述也会抓取</em></p>
<p><em>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键词和描述：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keywords: </span><br><span class="line">description:</span><br></pre></td></tr></table></figure>

<p><em>将以下代码去掉：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.description %&#125;</span><br><span class="line">  &#123;&#123; post.description &#125;&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-more-link text-center&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;btn&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">      &#123;&#123; __(&#39;post.read_more&#39;) &#125;&#125; &amp;raquo;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>否则首页的文章摘要就会变成文章的description，也就是没有文章预览那里的概述了</strong></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>优化</tag>
        <tag>关键词与描述</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之nofollow</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bnofollow.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="优化nofollow"><a href="#优化nofollow" class="headerlink" title="优化nofollow"></a>优化nofollow</h2><p><em>给非友情链接的出站链接添加 “nofollow” 标签，nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。</em></p>
<p><em>找到themes\next\layout_partials\footer.swig文件的：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot;&gt;Hexo&lt;&#x2F;a&gt;&#39;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot; rel&#x3D;&quot;external nofollow&gt;Hexo&lt;&#x2F;a&gt;&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><em>将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure>



<p><em>修改sidebar.swig文件，在themes\next\layout_macro，将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure>



<p><em>安装nofollow插件</em></p>
<p><em>减少出站链接能够有效防止权重分散，hexo有很方便的自动为出站链接添加nofollow的插件。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure>

<p><em>在站点配置文件加入：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line">    - www.langzi.fun</span><br><span class="line">    - 友链地址</span><br></pre></td></tr></table></figure>

<p><strong>这样例外的链接不会加上nofollow</strong></p>
<h2 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h2><p><em>创建blog/source/robots.txt文件，加入如下内容</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: * Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;categories&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;sitemap.xml</span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo优化</tag>
        <tag>nofollw</tag>
      </tags>
  </entry>
  <entry>
    <title>npm相关异常</title>
    <url>/npm%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>npm install <a href="mailto:gulp@3.9.1" rel="external nofollow noopener noreferrer" target="_blank">gulp@3.9.1</a>时，npm ERR! Response timeout while trying to fetch <a href="https://registry.npmjs.org/gulp" target="_blank" rel="external nofollow noopener noreferrer">https://registry.npmjs.org/gulp</a>  (over 30000ms) npm ERR! A complete log of this run can be found in:</strong>                                                                                                                               </li>
</ul>
<p><em>解决：*npm chache clean –force,再换成手机热点就可以了</em></p>
<ul>
<li><strong>ReferenceError: primordials is not defined</strong></li>
</ul>
<p><em>解决：这是node和gulp版本不兼容的问题,解决连接<a href="https://blog.csdn.net/zxxzxx23/article/details/103000393" target="_blank" rel="external nofollow noopener noreferrer">在这里</a></em></p>
<p><em>我选择直接npm install <a href="mailto:node@11.15.0" rel="external nofollow noopener noreferrer" target="_blank">node@11.15.0</a></em>                        </p>
<blockquote>
<p>曾经以为非凡就是天赋激起的惊世骇浪，现在觉得非凡只是极平凡的认真和倔强。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>npm相关指令</title>
    <url>/npm%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>npm chache clean –force</strong></p>
<p><strong>npm install 包@版本</strong></p>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>hexo某些功能,配置引用的文章</title>
    <url>/hexo%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/visugar/p/6821777.html</a></p>
<p><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="external nofollow noopener noreferrer">https://segmentfault.com/a/1190000017986794</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p>
<p><a href="https://blog.csdn.net/baidu_35145586/article/details/89033631" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/baidu_35145586/article/details/89033631</a></p>
<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><p>[URL](<a href="https://www.jianshu.com/p/93341c0aacbf" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT主题中添加网页音乐播放器功能 - 简书</a>)</p>
<p>[URL](<a href="https://aplayer.js.org/#/zh-Hans/?id=歌词" target="_blank" rel="external nofollow noopener noreferrer">首页 - APlayer</a>)</p>
<p><a href="[Hexo主题插入音乐之aplayer音乐播放器_网络_hushhw的博客-CSDN博客](https://blog.csdn.net/hushhw/article/details/88092728)">URL</a></p>
<p>[URL](<a href="https://huabuyu.net/Hexo-NexT-打造APlayer-HTML5-音乐播放器.html#使用" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT 打造APlayer HTML5 音乐播放器 | 一切归于平静</a>)</p>
<p>[URL](<a href="https://www.bzqll.com/2017/12/84.html" target="_blank" rel="external nofollow noopener noreferrer">hexo添加Aplayer音乐播放插件 - 鼻子亲了脸</a>)</p>
<p>[URL](<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">NexT主题添加音乐 - 简书</a>)</p>
<h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p><a href="https://segmentfault.com/a/1190000014085547" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><a href="https://www.jianshu.com/p/f58f68522db2" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="博客头像"><a href="#博客头像" class="headerlink" title="博客头像"></a>博客头像</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p>[url](<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">hexo从零开始到搭建完整 - 爱吃面包的兰兰 - 博客园</a>)</p>
<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<h2 id="字数，阅读时长，社交，打赏"><a href="#字数，阅读时长，社交，打赏" class="headerlink" title="字数，阅读时长，社交，打赏"></a>字数，阅读时长，社交，打赏</h2><h2 id="文章摘要显示"><a href="#文章摘要显示" class="headerlink" title="文章摘要显示"></a>文章摘要显示</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<h2 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h2><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>引用</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章加密</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="普通加密"><a href="#普通加密" class="headerlink" title="普通加密"></a>普通加密</h2><p><em>这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。</em></p>
<p>在/themes/next/layout/custom/head.swig文件，<head></head>之间添加一下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#JavaScript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在文章头文件里添加上password:yourpassword就可以了</p>
<p><strong>缺点：容易被破解</strong></p>
<h2 id="hexo-blog-encrypt插件"><a href="#hexo-blog-encrypt插件" class="headerlink" title="hexo-blog-encrypt插件"></a>hexo-blog-encrypt插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm install –save hexo-blog-encrypt</p>
<h3 id="配置站点-config-yml文件"><a href="#配置站点-config-yml文件" class="headerlink" title="配置站点_config.yml文件"></a>配置站点_config.yml文件</h3><p><strong>加入一下内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p><strong>文章头部加入下面内容:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">keywords</span>: 博客文章密码</span><br><span class="line"><span class="selector-tag">password</span>: <span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">abstract</span>: 密码：<span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">message</span>:  输入密码，查看文章</span><br></pre></td></tr></table></figure>

<ul>
<li>password: 是该博客加密使用的密码</li>
<li>abstract: 是该博客的摘要，会显示在博客的列表页</li>
<li>message: 这个是博客查看时，密码输入框上面的描述性文字</li>
</ul>
<h3 id="使用自定义默认信息"><a href="#使用自定义默认信息" class="headerlink" title="使用自定义默认信息"></a>使用自定义默认信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure>

<p><em>这样不用每篇文章都写abstract，message</em></p>
<h3 id="对TOC加密-这是什么我也不懂"><a href="#对TOC加密-这是什么我也不懂" class="headerlink" title="对TOC加密(这是什么我也不懂)"></a>对TOC加密(这是什么我也不懂)</h3><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密</strong></a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密2</strong></a></p>
<p><em>原文链接：<a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/Lancelot_Lewis/article/details/53422901</a></em></p>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>URL</strong></a></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>encrypt</tag>
        <tag>TOC</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 java程序设计概述</title>
    <url>/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="24e26e4dc9a542a9f100644db6b1fd7e00b2617f9739bfd57038032f78c5ac10"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>概述</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo首页文章预显示设置</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E9%A2%84%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="预显示设置"><a href="#预显示设置" class="headerlink" title="预显示设置"></a>预显示设置</h2><h3 id="使用-lt-more-gt-手动截断"><a href="#使用-lt-more-gt-手动截断" class="headerlink" title="使用&lt;!-more-&gt;手动截断"></a>使用&lt;!-more-&gt;手动截断</h3><h3 id="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"><a href="#在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。" class="headerlink" title="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"></a>在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</h3><p><strong>在文章的 front-matter 中添加 description 和 photos 字段，如下图所示。如果不需要显示图片的话，可以把 photos 去掉。</strong></p>
<p><a href="https://imgchr.com/i/8DRTPI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRTPI.png" alt="8DRTPI.png" border="0" width="400/"></a></p>
<h3 id="自动形成摘录"><a href="#自动形成摘录" class="headerlink" title="自动形成摘录"></a>自动形成摘录</h3><p><strong>在主题配置文件_config.yml中auto_excerpt</strong></p>
<p><a href="https://imgchr.com/i/8DRDa9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRDa9.png" alt="8DRDa9.png" border="0"></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>预显示</tag>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客头像设置</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="博客头像设置"><a href="#博客头像设置" class="headerlink" title="博客头像设置"></a>博客头像设置</h2><h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p><strong>打开主题的_config.yml文件，在avatar处添加主题下/source/images/里的自己添加的图片</strong></p>
<p><a href="https://imgchr.com/i/8DcNvD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcNvD.png" alt="8DcNvD.png" border="0"></a></p>
<p><strong>刷新成功显示</strong></p>
<p><a href="https://imgchr.com/i/8DcH2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcH2T.png" alt="8DcH2T.png" border="0" height="250/"></a></p>
<h3 id="头像圆角并旋转"><a href="#头像圆角并旋转" class="headerlink" title="头像圆角并旋转"></a>头像圆角并旋转</h3><p><em>我就不搞这功能了，看着头晕</em></p>
<p><strong>打开主题下的 source\css_common\components\sidebar\sidebar-author.styl文件(不同版本和不同主题可能路径有些许不同，添加下面的代码即可</strong></p>
<p><code>.site-author-image {</code><br>  <code>display: block;</code><br>  <code>margin: 0 auto;</code><br>  <code>padding: $site-author-image-padding;</code><br>  <code>max-width: $site-author-image-width;</code><br>  <code>height: $site-author-image-height;</code><br>  <code>border: $site-author-image-border-width solid $site-author-image-border-color;</code><br>  <code>/* 头像圆形 */
  border-radius: 80px;
  -webkit-border-radius: 80px;
  -moz-border-radius: 80px;
  box-shadow: inset 0 -1px 0 #333sf;
  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</code><br>    <code>(1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</code></p>
<p>  <code>/* 鼠标经过头像旋转360度 */
  -webkit-transition: -webkit-transform 1.0s ease-out;
  -moz-transition: -moz-transform 1.0s ease-out;
  transition: transform 1.0s ease-out;
}
img:hover {
  /* 鼠标经过停止头像旋转</code><br>  <code>-webkit-animation-play-state:paused;</code><br>  <code>animation-play-state:paused;*/
  /* 鼠标经过头像旋转360度 */
  -webkit-transform: rotateZ(360deg);
  -moz-transform: rotateZ(360deg);
  transform: rotateZ(360deg);
}
/* Z 轴旋转动画 */</code><br><code>@-webkit-keyframes play {</code><br>  <code>0% {</code><br>    <code>-webkit-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-webkit-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@-moz-keyframes play {</code><br>  <code>0% {</code><br>    <code>-moz-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-moz-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@keyframes play {</code><br>  <code>0% {</code><br>    <code>transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code></p>
<hr>
<blockquote>
<p>他人生最大的失败就是听从于懒惰、怯懦与害羞。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>头像</tag>
        <tag>圆角</tag>
        <tag>旋转</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码生成和解码</title>
    <url>/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="草料二维码"><a href="#草料二维码" class="headerlink" title="草料二维码"></a>草料二维码</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://cli.im/" target="_blank" rel="external nofollow noopener noreferrer"><strong>草料二维码</strong></a></p>
<h3 id="总界面："><a href="#总界面：" class="headerlink" title="总界面："></a>总界面：</h3><p><a href="https://imgchr.com/i/8DwxLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwxLq.md.png" alt="8DwxLq.png" border="0" width="400/"></a></p>
<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><h4 id="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"><a href="#支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码" class="headerlink" title="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"></a><em>支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码</em></h4><h4 id="二维码解码：生成对应资源的URL链接"><a href="#二维码解码：生成对应资源的URL链接" class="headerlink" title="二维码解码：生成对应资源的URL链接"></a><em>二维码解码</em>：生成对应资源的URL链接</h4><h4 id="二维码美化："><a href="#二维码美化：" class="headerlink" title="二维码美化："></a><em>二维码美化</em>：</h4><h5 id="快速美化器："><a href="#快速美化器：" class="headerlink" title="快速美化器："></a><em>快速美化器：</em></h5><p><a href="https://imgchr.com/i/8DwVVf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwVVf.md.png" alt="8DwVVf.png" border="0" width="400/"></a></p>
<p><em>效果图</em></p>
<p><a href="https://imgchr.com/i/8Dd5UU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8Dd5UU.md.png" alt="8Dd5UU.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdTC4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdTC4.md.png" alt="8DdTC4.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdI5F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdI5F.md.png" alt="8DdI5F.md.png" border="0" width="400"></a></p>
<h5 id="高级美化"><a href="#高级美化" class="headerlink" title="高级美化:"></a><em>高级美化:</em></h5><p><a href="https://imgchr.com/i/8DdvVK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdvVK.md.png" alt="8DdvVK.png" border="0" width="400/"></a></p>
<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <tags>
        <tag>二维码</tag>
        <tag>解码</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo打赏评论字数时长</title>
    <url>/hexo%E6%89%93%E8%B5%8F%E8%AF%84%E8%AE%BA%E5%AD%97%E6%95%B0%E6%97%B6%E9%95%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
]]></content>
      <tags>
        <tag>打赏</tag>
        <tag>评论</tag>
        <tag>阅读时长</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo草稿功能</title>
    <url>/hexo%E8%8D%89%E7%A8%BF%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><em>草稿不会在博客上显示</em></p>
<h2 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h2><p><em>hexo new draft 草稿名</em></p>
<p>*生成的草稿在source/_drafts/文件夹中</p>
<h2 id="强行预览草稿"><a href="#强行预览草稿" class="headerlink" title="强行预览草稿"></a>强行预览草稿</h2><p><em>render_drafts:true/hexo server-drafts</em></p>
<h2 id="草稿变文章"><a href="#草稿变文章" class="headerlink" title="草稿变文章"></a>草稿变文章</h2><p><em>hexo publish [layout]</em></p>
<hr>
<blockquote>
<p>每天再多努力一点，每天坚持再久一点，你会发现很多事情没有那么难。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>草稿</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>URL直链和外链</title>
    <url>/URL%E7%9B%B4%E9%93%BE%E5%92%8C%E5%A4%96%E9%93%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="直链"><a href="#直链" class="headerlink" title="直链"></a>直链</h2><p><em>直链是文件在网盘中的HTTP地址，可以直接外部下载，不用进入资源分享页面，直接得到文件的URL地址，可以实现很多功能，例如音乐，视频，应用等文件直接外部发布，下载，播放。</em></p>
<h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><p><em>外链是网盘资源分享之后得到的一个资源分享地址，要进入这个外链地址才能下载资源。</em></p>
<h2 id="直链网盘网友推荐"><a href="#直链网盘网友推荐" class="headerlink" title="直链网盘网友推荐"></a>直链网盘网友推荐</h2><p><a href="https://www.baidu.com/s?wd=%E5%8D%8E%E4%B8%BA%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">华为网盘</a></p>
<p><a href="https://www.baidu.com/s?wd=%E5%92%95%E5%92%95%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">咕咕网盘</a></p>
<p><a href="https://www.baidu.com/s?wd=%E9%98%BF%E9%87%8C%E4%BA%91&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">阿里云</a></p>
<p><a href="https://www.zhihu.com/question/22861418/answer/138664832" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><em>用了几个直链的网盘，能真正做到的有华为网盘，咕咕网盘和阿里云</em></p>
<p><em>华为的直链不怎么推荐，价格贵，而且带宽低，最坑爹的一点是乱扣流量，例如文件有1G，一下子就扣1G流量，不管你下不下完。<br>阿里云的可以定制带宽，但是价格也就更高一些。<br>推荐用咕咕网盘的直链，流量便宜了很多，而且是下多少算不少流量，最牛的是可以包月不限流量。</em></p>
<blockquote>
<p>你不能要求拥有一个没有风暴的人生海洋，因为痛苦和磨难是人生的一部分。一个没有风暴的海洋，那不是海，是泥塘。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>实验课5-10_删除表</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-10_%E5%88%A0%E9%99%A4%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>视图</strong></p>
<p><em>表之间有关系时，先删除引用表</em></p>
<p><strong>SQL语句</strong></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>DROP TABLE 表名</code></p>
<p><em>检测表是否存在</em></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>SELECT * FROM sysobjects</code></p>
<p><code>IF EXISTS(SELECT * FROM sysobjects WHERE  name=&quot;表名&quot;)</code></p>
<p><code>DROP TABLE 表名</code></p>
<p><code>GO</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>删除表</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-8_删除约束</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-8-%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>视图状态下</strong></p>
<p><em>删除主外键关系:</em></p>
<p><em>删除主键</em></p>
<p><em>删除非空约束</em></p>
<p><em>删除检查约束</em></p>
<p><em>删除默认值</em></p>
<p><strong>SQL语句</strong></p>
<p><em>删除主键</em></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>ALTER TABLE 表名</code></p>
<p><code>DROP CONSTRAINT 主键名</code></p>
<p><code>Go</code></p>
<p><em>删除检查约束</em></p>
<p><code>ALTER TABLE 表名</code></p>
<p><code>DROP CONSTRAINT 检查约束名</code></p>
<p><code>GO</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>约束</tag>
        <tag>删除</tag>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-5_约束类型</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-5_%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><a href="https://imgchr.com/i/80khvV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80khvV.md.png" alt="80khvV.md.png" border="0"></a><br><a href="https://imgchr.com/i/80krDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80krDS.md.png" alt="80krDS.md.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--实际运用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> YY(</span><br><span class="line">	a <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">    b <span class="built_in">char</span>(<span class="number">8</span>) <span class="keyword">default</span> <span class="string">'aaaaaaaa'</span></span><br><span class="line">    c <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    d <span class="built_in">int</span> <span class="keyword">check</span>(d=<span class="number">1</span>),</span><br><span class="line">    e <span class="keyword">unique</span>,</span><br><span class="line">    f <span class="built_in">int</span> <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="keyword">references</span> Student(Sno)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 外键参考另一个表的一个列，那个列必须是主键</span></span><br></pre></td></tr></table></figure>



<p><strong>视图状态下表属性单击右键：</strong></p>
<p><strong>设置主键</strong></p>
<p><strong>CKECK 约束</strong></p>
<p><strong>索引/键：</strong>设置是否唯一</p>
<p><strong>关系：</strong>两张表的外键关系</p>
<p><em>录入数据时，发生错误，会导致自增列的标号不符合预期</em></p>
<p><em>注意: 每次添加约束后记得保存</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>约束类型</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-4_SQL语句创建表</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-4_SQL%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><code>USE 数据库名</code></p>
<p><code>go</code></p>
<p><code>CREATE TABLE 表名</code></p>
<p><code>(</code></p>
<p><code>属性名 数据类型 约束</code></p>
<p><code>)</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>创建表</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加音乐播放功能</title>
    <url>/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="使用APlayer插件"><a href="#使用APlayer插件" class="headerlink" title="使用APlayer插件"></a>使用APlayer插件</h2><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noopener noreferrer">APlayer</a></p>
<p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<ul>
<li><strong>网易音乐外链地址</strong>：<a href="http://jump.bdimg.com/safecheck/index?url=x+Z5mMbGPAv7zFgtRCFyfwPeGQWa6UVU1tw+/GrGs/EwXO5bOUA0jYHGYubpEQmJ1OuvZ0jD4CE/i30mCFy3Dzy9jb8WhszlJ4wo1bk82HMS/4MX7uYcHlTSn+om/dlEmQx7lZYIASURsAoa108DVnY9qHh6BM0y" target="_blank" rel="external nofollow noopener noreferrer">http://music.163.com/song/media/outer/url?id=</a> .mp3</li>
</ul>
<p><em>在网页版的网易音乐中找到想要的音乐获取ID，粘贴到上面url的id=处就可以获取音乐的外链</em></p>
<ul>
<li><strong>实现过程：</strong></li>
</ul>
<ol>
<li><p>下载Aplayer文件解压，将里面的dist文件夹复制到themes\next\source文件夹下</p>
</li>
<li><p>在themes\next\source\dist\路径下，新建music.js文件，内容如下：</p>
</li>
</ol>
<p><code>const ap = new APlayer({</code><br>    <code>container: document.getElementById(&#39;aplayer&#39;),</code><br>    <code>fixed: true,</code><br>    <code>autoplay: false,</code><br>    <code>audio: [</code><br>      <code>{</code><br>        <code>name: &quot;You are my sunshine&quot;,</code><br>        <code>artist: &#39;Elizabeth Mitchell&#39;,</code><br>        <code>url: &#39;https://s1.ax1x.com/2020/03/18/8dQvnI.th.jpg&#39;,</code><br>        <code>cover: &#39;https://imgchr.com/i/8dQvnI&#39;,</code><br>      <code>},</code><br>      <code>{</code><br>        <code>name: &#39;Shallow&#39;,</code><br>        <code>artist: &#39;Lady Gaga/Bradley Cooper&#39;,</code><br>        <code>url: &#39;http://music.163.com/song/media/outer/url?id=1313096578.mp3&#39;,</code><br>        <code>cover: &#39;https://s1.ax1x.com/2020/03/18/8d1EGD.th.jpg&#39;,</code><br>      <code>},</code><br>    <code>]</code><br><code>});</code></p>
<ol start="3">
<li>在themes\next\layout_layout.swig文件最后(body标签里面），添加：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在hexo的左下面成功生成播放器</li>
<li>添加图片:把图片链接添加到第一次代码的对应歌曲处的图片链接里(我使用的是<a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床imgchr</a>,帮助上说的是无线存储，免费)。建议添加图片时，选着链接为缩略图的链接。</li>
<li>刷新，成功显示播放器并且可以正常显示图片和播放音乐</li>
</ol>
<p><a href="https://imgchr.com/i/8d8gV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8d8gV1.md.png" alt="8d8gV1.png" border="0"></a></p>
<ol start="7">
<li>歌词实现:</li>
</ol>
<ul>
<li><p>网易歌词<a href="https://www.zhihu.com/question/27638171/answer/146004899" target="_blank" rel="external nofollow noopener noreferrer">获取</a></p>
</li>
<li><p>待更新</p>
</li>
</ul>
<h2 id="使用网易外链播放器-歌曲很容易收版权限制"><a href="#使用网易外链播放器-歌曲很容易收版权限制" class="headerlink" title="使用网易外链播放器(歌曲很容易收版权限制)"></a>使用网易外链播放器(歌曲很容易收版权限制)</h2><p>**直接在网页版网易音乐里找到单曲或歌单，直接生成外链播放器的HTML。把HTML放到想要展示的地方就可以了</p>
<p><a href="https://imgchr.com/i/8wnJcn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnJcn.md.png" alt="8wnJcn.md.png" border="0"></a><br><a href="https://imgchr.com/i/8wnG1s" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnG1s.md.png" alt="8wnG1s.md.png" border="0"></a></p>
<p><em>网易很容易受版权限制，无法生成外链播放器</em></p>
<h2 id="Aplayer的MeingJS"><a href="#Aplayer的MeingJS" class="headerlink" title="Aplayer的MeingJS"></a>Aplayer的MeingJS</h2><p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<h2 id="使用html标签"><a href="#使用html标签" class="headerlink" title="使用html标签"></a>使用html标签</h2><p>写法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/song/media/outer/url?id=1313096578.mp3"</span> <span class="attr">style</span>=<span class="string">"max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;"</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">preload</span>=<span class="string">"meta"</span>&gt;</span>Your browser does not support the audio tag.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用APlayer标签"><a href="#使用APlayer标签" class="headerlink" title="使用APlayer标签"></a>使用APlayer标签</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>





<p><strong>借鉴<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">链接</a></strong></p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>音乐播放</tag>
        <tag>Hexo</tag>
        <tag>APlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第二章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id><a href="#" class="headerlink" title="."></a>.</h2><h2 id="物理层-重点是概念"><a href="#物理层-重点是概念" class="headerlink" title="物理层(重点是概念)"></a>物理层(重点是概念)</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><p><em>物理层考虑的是怎样才能在连接计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体</em></p>
<p><em>用于物理层的协议叫做*</em>物理层规程***</p>
<p><em>物理层的具体任务是确定与传输媒体的接口有关的一些特性，即：</em></p>
<ul>
<li><strong>机械特性</strong>:可见特征</li>
<li><strong>电气特性</strong>：电压范围</li>
<li><strong>功能特性</strong>: 某一电平电压表示何种意义</li>
<li><strong>过程特性</strong>： 指明不同功能的各种可能事件的出现顺序</li>
</ul>
<p><em>数据在计算机中多采用*</em>并行传输<strong>方式，在通信线路中传输方式一般为</strong>串行传输***</p>
<p><em>物理层协议种类多，是因为物理连接方式很多(<strong>点对点，多点连接或广播连接</strong>)，而传输媒体的种类也很多(如架空明线，双绞线，对称电缆，同轴电缆，光缆，以及各种波段的无线信道等)</em></p>
<h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><h4 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h4><p><em>一个数据通信系统可划分为三大部分，即*</em>原系统(或发送端，发送方)，传输系统(或传输网络)和目的系统(或接收端，接收方)</p>
<img src="https://s1.ax1x.com/2020/03/17/8a4Qtx.png" alt="8a4Qtx.png" border="0">

<p>​                                    <em>图2-1 数据通信系统的模型(也可以说它是计算机网络)</em></p>
<ul>
<li><p>源系统一般包括以下两个部分:</p>
<p>源点:<em>又称*</em>源站或信源***</p>
<p>发送器: <em>常源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输。典型的发送器就是<strong>调制器</strong>。现在很多PC 使用内置的调制解调器（包含调制器和解调器）,用户在PC 外面看不见调制解调器</em></p>
</li>
<li><p>目的系统一般也包括以下两部分:</p>
<p>接收器:<em>接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息。典型的接收器就是<strong>解调器</strong>，它把来自传输线路上的模拟信号进行解调，提取出在在发送端置入的消息，还原岀发送端产生的数字比特流</em> </p>
<p>终点:<em>终点役备从接收器获取传送来的数字比特流，然后进行信息输出（例如，把汉字在P C 屏幕上显示出来）。终点又称为*</em>目的站<strong>或</strong>信宿***</p>
</li>
<li><p>连接源系统和目的系统的可以是简单的传输线，也可以是复杂的网络系统</p>
</li>
</ul>
<p><strong>常用术语:</strong></p>
<p>通信的目的是传送<strong>信息</strong></p>
<p><strong>数据</strong>是运送信息的实体</p>
<p><strong>信号</strong>则是数据的电气的或电磁的表现</p>
<p><strong>根据信号中代表信息的参数的取值不同，信号可以分为两大类：</strong></p>
<p><em>模拟信号，或连续信号</em>  消息的参数的取值是连续的  </p>
<p><em>数字信号,  或离散信号</em>   消 息 的 参 数 的 取 值 是 离 散 的 。在使用吋间域(或简称为吋域)的波形表示数字信号吋，则代表不同离散数值的基本波形就称为码元。在使用二进制编码吋，只有两种不同的码元， 一种 代 表 0 状态而另一种 代 表 1 状态。  </p>
<h4 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h4><p>信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此， 一条通信线路往往包含…条发送信<br>道和一条接收信道。  </p>
<p><em>通过双方信息交互方式不同可以分为:</em></p>
<ul>
<li>单向通信，又称为单工通信  </li>
<li>双向交替通信，又称为半双工通信</li>
<li>双向同时通信，又称为全双工通信  </li>
</ul>
<p><strong>基带信号</strong>：<em>来自信源的信号 (像计算机输出的代表各种文字或<br>图像文件的数据信号都属于基带信号）</em></p>
<p><strong>调制</strong>:   <em>基带信号往往包含有较多的低频成分，甚至有直流成<br>分。而许多信道并不能传输这种低频分量或直流分量。为了解决这一问题</em></p>
<p>调制:</p>
<ul>
<li>基带调制：<em>一类是仅仅对基带信号的波形进行变换，使它能够与信道特性相适应 ，变换后的信号仍然是基带信号</em></li>
<li>带通调制：<em>另一类则需要使用载波(earner)进行调制，把基带信号的频率范围搬移到较高的频段以便在信道中传输</em>，经过载波调制后的信号称为带通信号（即仅在一段频率范围内能够通过信道）  </li>
</ul>
<p><strong>最基本的带通调制方法有:</strong></p>
<ul>
<li>调幅（AM）, 即载波的振幅随基带数字信号而变化。例如， 0 或 1 分别对应于无载波或有载波输出 </li>
<li>调频（FM）, 即载波的频率随基带数字信号而变化。例如， 0 或 1 分别对应于频率久或无。  </li>
<li>调相（PM）, 即载波的初始相位随基带数字信号而变化。例如， 0 或 1 分别对应于相位 0° 或 180°  </li>
</ul>
<p><em>为了达到更高的信息传输速率，必须采用技术上更为复杂的多元制的振幅相位混合调制方法。例如，*</em>正交振幅调制 QAM （Quadrature Amplitude Modulation）***</p>
<h4 id="提高数据传输速率的途径"><a href="#提高数据传输速率的途径" class="headerlink" title="提高数据传输速率的途径"></a>提高数据传输速率的途径</h4><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h4 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h4><h4 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h4><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="频道复用，时分复用和统计时分复用"><a href="#频道复用，时分复用和统计时分复用" class="headerlink" title="频道复用，时分复用和统计时分复用"></a>频道复用，时分复用和统计时分复用</h4><h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><h4 id="脉码调制体制"><a href="#脉码调制体制" class="headerlink" title="脉码调制体制"></a>脉码调制体制</h4><h4 id="同步光纤网SONET和同步数字系统SDH"><a href="#同步光纤网SONET和同步数字系统SDH" class="headerlink" title="同步光纤网SONET和同步数字系统SDH"></a>同步光纤网SONET和同步数字系统SDH</h4><h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><h4 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h4><h4 id="光纤同轴混合网"><a href="#光纤同轴混合网" class="headerlink" title="光纤同轴混合网"></a>光纤同轴混合网</h4><h4 id="FTTx技术"><a href="#FTTx技术" class="headerlink" title="FTTx技术"></a>FTTx技术</h4><blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>第二章</tag>
        <tag>物理层</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 shell命令操作HDFS-常用HDFS操作命令</title>
    <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><h3 id="常用的HDFS操作命令-hdfs-dfs"><a href="#常用的HDFS操作命令-hdfs-dfs" class="headerlink" title="常用的HDFS操作命令(hdfs dfs)"></a>常用的HDFS操作命令(hdfs dfs)</h3><h3 id="首先开启hdfs"><a href="#首先开启hdfs" class="headerlink" title="首先开启hdfs:"></a>首先开启hdfs:</h3><p>start-dfs.sh/start-all.sh</p>
<h3 id="用法查看："><a href="#用法查看：" class="headerlink" title="用法查看："></a>用法查看：</h3><p>hdfs dfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与hadoop fs等价的</span><br></pre></td></tr></table></figure>

<h3 id="创建目录-p-表示会创建父目录"><a href="#创建目录-p-表示会创建父目录" class="headerlink" title="创建目录(-p 表示会创建父目录)"></a>创建目录(-p 表示会创建父目录)</h3><p>hdfs  dfs  -mkdir  /001</p>
<p>hdfs  dfs  -mkdir  /001/demo1   /001/demo2   /001/demo3 一次创建多个目录</p>
<p>hdfs  dfs  -mkdir  -p  /001/x/y  一次性创建多层目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir xxx  &#x2F;&#x2F;这样不指定路径，会另创建&#x2F;user&#x2F;root目录，再在下面创建xxx目录</span><br></pre></td></tr></table></figure>



<h3 id="列出子目录或子文件"><a href="#列出子目录或子文件" class="headerlink" title="列出子目录或子文件"></a>列出子目录或子文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls [-d][-h][-R] &lt;paths&gt;</span><br><span class="line">&#x2F;&#x2F; -d 返回 path; -h 人性化显示</span><br></pre></td></tr></table></figure>

<p>hdfs dfs -ls [path]</p>
<p>hdfs dfs -ls -R [path] 递归形式显示</p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><strong>将本地目录下的文件上传到HDFS上，并分别重命名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put [-f] [-p] &lt;localsrc&gt; &lt;dst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyFromLocal [-f] [-p] [-l] &lt;localsrc&gt; &lt;dst&gt;</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -put  本地文件名  hdfs路径</p>
<p>hdfs  dfs  -copyFromLocal  本地文件名  hdfs路径</p>
<p>例: hdfs  dfs  -put  text1.txt   /001/demo1/hdfs1.txt</p>
<p>例: hdfs  dfs  -copyFromLocal  text1.txt   /001/demo1/hdfs1.txt</p>
<h3 id="将本地文件移动到HDFS"><a href="#将本地文件移动到HDFS" class="headerlink" title="将本地文件移动到HDFS"></a>将本地文件移动到HDFS</h3><p>hdfs  dfs  -moveFromLocal  本地文件名  HDFS路径</p>
<h3 id="下载文件到本地"><a href="#下载文件到本地" class="headerlink" title="下载文件到本地"></a>下载文件到本地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get [-p] &lt;src&gt; &lt;localdst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  copyToLocal  hdfs文件  本地path</p>
<p>hdfs  dfs  -get  hdfs文件  本地路径</p>
<h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -cat&#x2F;text[-ignoreCrc] &lt;src&gt;</span><br><span class="line"></span><br><span class="line">	  hdfs dfs -tail [-f]&lt;file&gt;</span><br><span class="line">-ignoreCrc：忽略循环检验失败的文件。</span><br><span class="line">-f：动态更新显示数据</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -cat  hdfs路径</p>
<p>hdfs  dfs  -text  hdfs路径</p>
<h3 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -rm [-f] [-r] &lt;src&gt;</span><br><span class="line">	-f：如果要删除的文件不存在，不显示错误信息。</span><br><span class="line">	-r&#x2F;R：级联删除目录下所有的文件和子目录文件</span><br></pre></td></tr></table></figure>

<p>参数r为递归删除</p>
<p>hdfs  dfs  -rm  -r  hdfs文件</p>
<h3 id="追写文件"><a href="#追写文件" class="headerlink" title="追写文件"></a>追写文件</h3><p><em>命令： hdfs dfs -appendToFile <localsrc> <dst><br>该命令将 localsrc 指向的本地文件内容写入目标文件 dst。如果 localsrc 是“-”，表示数据来自键盘输入， “Ctrc+c”组合键结束输入</dst></localsrc></em>  </p>
<h3 id="复制文件或文件夹"><a href="#复制文件或文件夹" class="headerlink" title="复制文件或文件夹"></a>复制文件或文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -cp [-f] [-p | -p[topax]] &lt;src&gt; &lt;dst&gt;</span><br><span class="line">-f：如果目标文件存在，将强行覆盖。</span><br><span class="line">-p：将保存文件的属性</span><br></pre></td></tr></table></figure>



<p>hdfs  dfs  -cp  hdfs文件/文件夹  hdfs文件名/hdfs文件夹</p>
<h3 id="文件或文件夹的移动"><a href="#文件或文件夹的移动" class="headerlink" title="文件或文件夹的移动"></a>文件或文件夹的移动</h3><p>hdfs  dfs  -mv  hdfs文件 hdfs路径/文件名</p>
<h3 id="使用touchz命令创建文件"><a href="#使用touchz命令创建文件" class="headerlink" title="使用touchz命令创建文件"></a>使用touchz命令创建文件</h3><p>hdfs  dfs   -touchz  文件</p>
<h3 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -du [-s] [-h] &lt;path&gt;</span><br><span class="line">按字节显示指定目录所占空间大小。</span><br><span class="line">-s：显示指定目录下文件总的大小。</span><br><span class="line">-h： h 指“human-readble”，表示按照人性化的单位显示文件大小</span><br></pre></td></tr></table></figure>



<p>hdfs  dfs  -du  hdfs文件</p>
<h3 id="count统计-显示：目录个数，文件个数，文件总计大小"><a href="#count统计-显示：目录个数，文件个数，文件总计大小" class="headerlink" title="count统计(显示：目录个数，文件个数，文件总计大小)"></a>count统计(显示：目录个数，文件个数，文件总计大小)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -count [-q] [-h] &lt;path&gt;</span><br><span class="line">统计某个目录下的子目录与文件的个数及文件大小。统计的结果包含目录数、文件数、文件大小、路径</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -count  hdfs文件夹</p>
<h3 id="获取扩展属性，设置扩展属性"><a href="#获取扩展属性，设置扩展属性" class="headerlink" title="获取扩展属性，设置扩展属性"></a>获取扩展属性，设置扩展属性</h3><p>hdfs  dfs  -setfattr  -n  user.from  -v  <a href="http://www.baidu.com" target="_blank" rel="external nofollow noopener noreferrer">http://www.baidu.com</a>  hdfs文件</p>
<p> <a href="https://blog.csdn.net/u013525455/article/details/52795025" target="_blank" rel="external nofollow noopener noreferrer">setfattr详解</a></p>
<p>hdfs  dfs  -getfattr  -d  hdfs文件</p>
<p><a href="https://imgchr.com/i/YvHNOx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/23/YvHNOx.md.png" alt="YvHNOx.png" border="0"></a></p>
<h3 id="文件合并再下载"><a href="#文件合并再下载" class="headerlink" title="文件合并再下载"></a>文件合并再下载</h3><p><em>将路径中的文件合并并命名下载</em></p>
<p>hdfs  dfs  -getmerge  文件夹  文件名</p>
<h3 id="追加数据文件末尾的指令"><a href="#追加数据文件末尾的指令" class="headerlink" title="追加数据文件末尾的指令"></a>追加数据文件末尾的指令</h3><p>hdfs  dfs  -appendToFile  本地文件  hdfs文件</p>
<h3 id="打印Block报告"><a href="#打印Block报告" class="headerlink" title="打印Block报告"></a>打印Block报告</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks</p>
<h3 id="打印文件块的位置信息-locations"><a href="#打印文件块的位置信息-locations" class="headerlink" title="打印文件块的位置信息(-locations)"></a>打印文件块的位置信息(-locations)</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks -locations</p>
<p><a href="https://imgchr.com/i/GJf7in" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJf7in.md.png" alt="GJf7in.png" border="0"></a></p>
<hr>
<blockquote>
<p>过去的别再遗憾</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop相关异常</title>
    <url>/hadoop%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" src="/js/src/bai.js"></script>

<hr>
<h2 id="下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied"><a href="#下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied" class="headerlink" title="下载文件到本地  get: /hdfs1.txt.COPYING (Permission denied)"></a>下载文件到本地  get: /hdfs1.txt.<em>COPYING</em> (Permission denied)</h2><p><strong>权限问题</strong></p>
<h2 id="使用java-api-操作hdfs时不能-端口拒绝访问call-from-…"><a href="#使用java-api-操作hdfs时不能-端口拒绝访问call-from-…" class="headerlink" title="使用java api 操作hdfs时不能 端口拒绝访问call from …"></a>使用java api 操作hdfs时不能 端口拒绝访问call from …</h2><ul>
<li>防火墙没有关闭</li>
</ul>
<p><em>sudo ufw status</em></p>
<p><em>sudo ufw disable</em></p>
<ul>
<li>hdfs没打开</li>
</ul>
<p>start-all.sh</p>
<h2 id="safeModeException"><a href="#safeModeException" class="headerlink" title="safeModeException"></a>safeModeException</h2><p><em>没有关闭安全模式：hdsf dfsadmin -safemode leave</em></p>
<p><em>状态：hdfs dfsadmin -safemode get</em></p>
<p><em>进入：hdfs dfsadmin -safemode enter</em></p>
<h2 id="使用JavaAPI操作HDFS创建目录和权限问题"><a href="#使用JavaAPI操作HDFS创建目录和权限问题" class="headerlink" title="使用JavaAPI操作HDFS创建目录和权限问题"></a>使用JavaAPI操作HDFS创建目录和权限问题</h2><p><strong>第一种方式：//指定当前用户为root用户</strong><br>             <strong>System.setProperty(“HADOOP_USER_NAME”, “root”);</strong></p>
<p>   <strong>第二种方式：通过java的-D方式参数，-D可以理解是取参数的，如图所示：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190103202106296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt="uri"></p>
<p><img src="https://img-blog.csdnimg.cn/20190103202137943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt></p>
<p> <strong>第三种方式：dfs.permissions –&gt;false ; 默认是ture,修改就行。</strong></p>
<p> <strong>第四种方式：命令 -chmod 改变hdfs的目录权限</strong></p>
<h2 id="java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs"><a href="#java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs" class="headerlink" title="java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs"></a>java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs</h2><p><em>sudo ufw disable</em></p>
<p><em>hdfs dfs -safemode leave</em></p>
<p><em>start-dfs.sh</em></p>
<h2 id="hadoop命令行执行mapreduce作业时报错"><a href="#hadoop命令行执行mapreduce作业时报错" class="headerlink" title="hadoop命令行执行mapreduce作业时报错"></a>hadoop命令行执行mapreduce作业时报错</h2><h3 id="output输出路径已存在"><a href="#output输出路径已存在" class="headerlink" title="output输出路径已存在"></a>output输出路径已存在</h3><p><a href="https://imgchr.com/i/J4fDL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fDL6.md.png" alt="J4fDL6.png" border="0"></a></p>
<p><strong>解决：</strong></p>
<p><em>输出路径不能已存在</em></p>
<p><em>命令中不需要主文件参数：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar xxx.jar input路径 output路径</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/J4fvyq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fvyq.md.png" alt="J4fvyq.md.png" border="0"></a><br><a href="https://imgchr.com/i/J4fjln" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fjln.md.png" alt="J4fjln.md.png" border="0"></a></p>
<h2 id="使用java-api-操作hdfs时接口传字符，需要是双引号"><a href="#使用java-api-操作hdfs时接口传字符，需要是双引号" class="headerlink" title="使用java api 操作hdfs时接口传字符，需要是双引号"></a>使用java api 操作hdfs时接口传字符，需要是双引号</h2><blockquote>
<p>可以传达自己的思想，但是没必要同化他人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 shell命令操作HDFS-常用HDFS管理命令</title>
    <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><h3 id="查看hdfs所有管理命令"><a href="#查看hdfs所有管理命令" class="headerlink" title="查看hdfs所有管理命令"></a>查看hdfs所有管理命令</h3><p><em>hdfs dfsadmin</em></p>
<h3 id="查看命令用法"><a href="#查看命令用法" class="headerlink" title="查看命令用法"></a>查看命令用法</h3><p><em>hdfs dfsadmin -help</em></p>
<h3 id="安全模式相关练习实践"><a href="#安全模式相关练习实践" class="headerlink" title="安全模式相关练习实践"></a>安全模式相关练习实践</h3><p><em>首先要启动hdfs</em>: start-dfs.sh</p>
<p><em>hdfs dfsadmin -safemode enter</em> 进入安全模式</p>
<p><em>hdfs dfsadmin -safemode get</em>  获取状态</p>
<p><em>hdfs dfsadmin -safemode wait</em></p>
<p><em>hdfs dfsadmin -safemode leave</em>  退出</p>
<h3 id="快照相关练习实验"><a href="#快照相关练习实验" class="headerlink" title="快照相关练习实验"></a>快照相关练习实验</h3><p><a href="https://www.cnblogs.com/JackQ/p/4586663.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><em>Hdfs的快照（snapshot）是在某一时间点对指定文件系统拷贝，快照采用只读模式，可以对重要数据进行恢复、防止用户错误性的操作</em></p>
<p><em>快照是对文件数据进行保护的措施，可以对错误操作恢复数据。<strong>只能</strong>在允许的路径上创建快照，<strong>子路径</strong>也不可以。创建快照的路径不可以删除</em></p>
<p><strong>开启</strong></p>
<p><em>hdfs  dfsadmin  -allowSnapshot <smapshotdir></smapshotdir></em></p>
<p><strong>关闭</strong></p>
<p><em>hdfs  dfsadmin  -disallowSnapshot <snapshotdir></snapshotdir></em></p>
<p><strong>例</strong></p>
<p><em>hdfs  dfsadmin  -allowSnapshot  /001/mydemo</em></p>
<p><em>hdfs  dfsadmin  -disallowSnapshot /001/mydemo</em></p>
<p><strong>创建并命名</strong></p>
<p><em>hdfs  dfs  -createSnapshot  hdfs路径 名字</em></p>
<p><strong>删除</strong></p>
<p><em>hdfs dfs  -deleteSnapshot  hdfs路径 名字</em></p>
<p><strong>重命名</strong></p>
<p><em>hdfs dfs -renameSnapshot hdfs路径 oldname newname</em></p>
<h4 id="查看所有快照"><a href="#查看所有快照" class="headerlink" title="查看所有快照"></a>查看所有快照</h4><p><em>hdfs lsSnapshottableDir</em></p>
<h4 id="查看某一个具体快照"><a href="#查看某一个具体快照" class="headerlink" title="查看某一个具体快照"></a>查看某一个具体快照</h4><p><em>创建快照时候，默认的文件夹是.snapshot 查看时候必须加上.snapshot才能看到里面备份的东西</em></p>
<p><em>hdfs dfs -ls 路径/.snapshot/</em></p>
<img src="https://s1.ax1x.com/2020/05/23/YvvR2D.png" alt="YvvR2D.png" border="0">

<h4 id="快照对比"><a href="#快照对比" class="headerlink" title="快照对比"></a>快照对比</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs snapshotDiff &lt;path&gt; &lt;fromSnapshot&gt; &lt;toSnapshot&gt;</span><br><span class="line">例如： </span><br><span class="line">执行命令 hdfs snapshotDiff  &#x2F;Workspace&#x2F;linlin bak1 bak2</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/05/23/YvvbPf.png" alt="YvvbPf.png" border="0">

<h3 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h3><p><em>HDFS允许管理员给私人目录设置其下面文件夹和文件的总数量配额，或空间使用总量配额。所以HDFS配额的对象是目录，而非用户。如果需要实现用户级别的配额，则需要采用第三方系统进行逻辑管理并映射到文件夹配额。</em></p>
<h4 id="文件配额"><a href="#文件配额" class="headerlink" title="文件配额"></a>文件配额</h4><p><em>文件数配额指的是可以限制当前文件夹下，所有文件和文件夹的总数量</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建</span><br><span class="line">hdfs dfsadmin  -setQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br><span class="line">--删除</span><br><span class="line">hdfs dfsadmin -clrQuota &lt;directory&gt;...&lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p><em>hdfs dfsadmin  -setQuota 3  /001/mydemo3</em></p>
<h4 id="空间配额"><a href="#空间配额" class="headerlink" title="空间配额"></a>空间配额</h4><p><em>空间配额指的是可以限制当前文件夹下，所有文件（包含子文件夹中的数据文件，会递归的去统计）的总大小</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin  -setSpaceQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br></pre></td></tr></table></figure>

<p><em>hdfs dfsadmin  -setSpaceQuota 134217728 /mydemo4</em></p>
<h3 id="报告文件系统的基本信息和统计信息"><a href="#报告文件系统的基本信息和统计信息" class="headerlink" title="报告文件系统的基本信息和统计信息"></a>报告文件系统的基本信息和统计信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure>

<h3 id="查看拓扑实验"><a href="#查看拓扑实验" class="headerlink" title="查看拓扑实验"></a>查看拓扑实验</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -printTopology</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>事常与人违，事总在人为</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Hadoop大数据技术</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章添加图片</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="目前知道的和去尝试了的图片添加方式有以下几种"><a href="#目前知道的和去尝试了的图片添加方式有以下几种" class="headerlink" title="目前知道的和去尝试了的图片添加方式有以下几种:"></a>目前知道的和去尝试了的图片添加方式有以下几种:</h2><p><em>首先本地上传需要安装</em> <em>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save<em>，</em>这个为0.0.5版本，网上针对1.0.0(npm install hexo-asset-iamge –save)后期图片加载不出，大都用0.0.5版本</em></p>
<ul>
<li><strong>绝对路径</strong>：</li>
</ul>
<p><em>在source路径下创建images文件夹，图片保存在这里面</em></p>
<p><strong>格式:</strong></p>
<p><em>/images/图片名</em></p>
<ul>
<li><strong>相对路径</strong>(<em>在主页无法显示</em>)：</li>
</ul>
<p><em>根目录下的_config.yml里的post_asset_folder设置为true。创建文章时，会同时创建同名文件夹，把图片放在同名文件夹里，再在hexo文章里用相对路径引入图片</em></p>
<p><strong>格式：</strong></p>
<p><em>同名文件夹/图片名</em></p>
<p><strong>前两种针对图片在本地</strong></p>
<p><em>在线图片</em>：</p>
<ul>
<li><p><strong><a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床</a></strong>  </p>
</li>
<li><p><strong><a href="https://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">cloudinary</a></strong></p>
</li>
</ul>
<h2 id="用imgchr添加图片"><a href="#用imgchr添加图片" class="headerlink" title="用imgchr添加图片"></a>用imgchr添加图片</h2><p><em>imgchr可以无限使用，免费，且不会被删图，提供各种形式图片链接</em></p>
<p><a href="https://imgchr.com/i/8dGXwR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dGXwR.md.png" alt="8dGXwR.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/8dJ87n" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dJ87n.th.png" alt="8dJ87n.png" border="0" width="200/"></a></p>
<ul>
<li><strong>图片设置宽度</strong></li>
</ul>
<p>&lt;img src=”url” width=100</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN是什么?</title>
    <url>/CDN%E6%98%AF%E4%BB%80%E4%B9%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h2><p><strong>英文名</strong>: <em>Content Delivery Network</em></p>
<p><strong>中文名</strong>: <em>内容分发网络</em></p>
<p><strong>网友解释</strong>：<em>CDN也称内容分发网络，其原理大概是将服务内容分发至全网加速节点，让用户从就近的服务器节点上获取内容，从而提高网站的访问速度。大部分服务商（如阿里云，网易蜂巢，京东云等）的CDN服务是按使用量收费的，也有一些服务商提供免费的CDN服务。</em></p>
<p><strong>阿里云解释</strong>：<em>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</em></p>
<p><strong>知乎高级解释</strong>：<a href="https://www.zhihu.com/question/36514327" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="免费的CDN"><a href="#免费的CDN" class="headerlink" title="免费的CDN"></a>免费的CDN</h2><p><a href="https://blog.csdn.net/weixin_42779969/article/details/101194863" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
<p>有志者，事竟成</p>
</blockquote>
]]></content>
      <tags>
        <tag>CDN</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>next添加字数和阅读时长</title>
    <url>/next%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>把theme底下的_config.yml里对应的设置开启</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  min2read: true          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  totalcount: false       <span class="comment"># 网站 字数统计</span></span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo-wordcount插件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：*</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount@2 --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>这样设置后对应的只有数字，没有“字”和“分钟”。打开<em>themes/next/layout/_macro/post.swig</em>，再通过以下设置即可：</strong></p>
<p><em>添加“<strong>字</strong>”</em></p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><em>改为</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><em>添加“<strong>分钟</strong>”</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; </span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>



<p><strong><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="external nofollow noopener noreferrer">引用</a></strong></p>
<hr>
<blockquote>
<p>提出正确的问题，往往等于解决了问题的一大半!</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>阅读时长</tag>
        <tag>字数</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo遇到的异常</title>
    <url>/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</strong></li>
</ul>
<p>​       <em>解决：文章最前面的分类，标签等，冒号后面需要一个空格且三个下划线不能丢失</em></p>
<ul>
<li><p><strong>突然github上的hexo打不开</strong></p>
<p><em>解决：可能是网络原因，重连网络</em></p>
</li>
<li><p><strong>gitalk评论时显示gitalk Error: Validation Failed</strong></p>
<p><em>原因：我也碰到了这个问题，研究了一下，发现是文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。提一下个人想法，不知道行不行得通：文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了，也存在区分度</em></p>
<p><em>解决：</em></p>
<p>​    <em>法一：</em></p>
<p><em><a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="external nofollow noopener noreferrer">下载</a>这个，把里面的md5.min.js放到<strong>source\js\src</strong>目录中</em></p>
<p><em>修改gitalk.swig文件的中间内容为:</em></p>
<p>​    <em>法二：通过<a href="https://blog.csdn.net/qing_gee/article/details/100134998" target="_blank" rel="external nofollow noopener noreferrer">其他</a>的查询只需要在gitalk.swig文件里的clientID上面添加一行<strong>id: decodeURL(‘‘),</strong>就可以了(应该是通过url里的特定段落进行转码，使其变短).</em></p>
</li>
</ul>
<ul>
<li><strong>hexo文章添加本地图片(网上的url图片可以成功加载)时，在local和github上不显示的问题</strong></li>
</ul>
<p><em>解决:</em> 网上有通过安装<em>hexo-asset-image</em> 插件，开启主目录下<em>_config.yml<em>里的</em>post_asset_folder<em>开关，来实现图片上传问题。经过长时间的尝试，不管是用相对路径(在同名文件夹里)，绝对路径(images里)，还有的说法是</em>hexo-asset-image<em>的</em>1.0.0</em>[]版本有问题，换成<em>0.0.5</em>[ <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save],但最终都以失败告终。</p>
<p><em>网上存储图片的方案有<a href="https://www.jianshu.com/p/ce98fbff39ac" target="_blank" rel="external nofollow noopener noreferrer">CDN</a>服务。比如<a href="http://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</em></p>
<ul>
<li><strong>Please make sure you have the correct access rights<br>and the repository exists.FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/d" target="_blank" rel="external nofollow noopener noreferrer">https://hexo.io/d</a>                                                                                                                               ocs/troubleshooting.html</strong></li>
</ul>
<p><em>解决：可能是网络原因，网上有说是ssh密匙的原因</em></p>
<ul>
<li><strong>Connection reset by 192.30.255.112 fatal: Could not read from remote repository.  Please make sure y</strong></li>
</ul>
<p><em>原因：可能是ssh密匙过期</em></p>
<p><em><a href="https://www.cnblogs.com/youcong/p/11111397.html" target="_blank" rel="external nofollow noopener noreferrer">解决方法</a></em></p>
<hr>
<blockquote>
<p>感觉只能解决现象问题，理论才能解决本质问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>该博客目前想要完成的的功能!</title>
    <url>/%E8%AF%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%89%8D%E6%83%B3%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9a2339bdc25e481f700692307de5e7661f783b754676e1bd9710758018c5efb8">3b0ee004644fe5725283a0fb8fd319fd229a203a8f32ef388e81ba35aba38c7b549c54b886430361985baa19612254eae404b4c5f3507fd3f7282fe40a1d88392928ecd0e3e4b840a9c8d1ab21efc70ebb1037601d7468151b1acb10ac32327d8588dab9c926e12860011302ac54c50e92e08ee2b711a9d12590ed1e00c1e9d7339bbf6451493a4c85fd7bab524ea7c2e4cac6a7da5a0b55ee58722d2bca8d4e3fb9ccc4d687889f603d3b298292581793ceb6140bc9bcdb7f8d6071556b4189a81780b21ad0fa48177a1c9f6c3a6ce3d378af29d5c43fe7e16fe5ce4969a47c4bbe6a9ad4790deade3ab15d6bc50b6f882da2a01bf33c7f297113556fa970012f6304e6612f8395fdc47762835d638512b02a7f23e28dbd3d7d9926b02ce6bc8f58376b9ad9f895cbc1d5203f33ae7f5c5b03348d894be0c9cfb138006bed5fcc9e53012be4fb71659a0546a873f2d61512d652e0cf99bd03d419dca5a7172a087e01de104f64b71c5af669db0032dfa699dac4fc7af0aaed4eccb0d2ac5aafd1060bc71a4a96f8a0eae2b9b9a32d6636fc968640822a09df9860500ecf5a589882cd41acbc9d767e70c111ba5b2898ac78596b4c718364c9c65d1f377e0c57631e571b730190ecb0212f337d24d90b122abf6776ecca0f391d1482b2b473daab0547f84abd1ce2f61887c45ad7433e1959c8d25f7d7f77b3569ab0fa4409d82923ab8cdff8cc7e798cb2e247c81ff8fbc72efadd9f28399b63329113cf061e153d21ad48ce5c74f175c2c28493613f8e65f90395450d37952f6b81994c481dad97c9c56d9070f84d96e58b057350779a3712978c5f4255d31eecf7bf309f47bb0e3f679d3c52bbd8cf40648c193365148afe0c6821b5eccaefb717cfb3e7228210d8c3c409dedb678cfed112046ebe7ad2901d1e1671ba5168fde6292048ca63134c3682d4aed99b914639c0549ff7ca38eaabbda6b3e9a425eb9a07cc08d9ba4c11b1557d9781672b9087e368f3e46db36c01371a0f88c923977e95174ac26acbfd26604b344f355e455abf4b094400bca9921246dd8709379ce44821ea1ee59534f61e8aac306225da16e294edfbea1f79e6da4b52f59aaa6164a9ff1fe35ed383968528d67f99174cd235bcd6418ec829b673f782b3580e8b26448fa8b5eaedfebaa0d55b49460c44cc8585bc613968b6d5e4404e45869429fae351b03c222f2cc18c863f1a30d6ba51fb33dcc574c45058da3c4b6c0fd014903d8d994ec9b004c9d9ba1040f91c4470b1df613280b0cdd9aaf0640d5ce63aef573b3f1835af05f37a74d6c73dab4a2ab82de4a16b81db0d35b359b8fccfc2b0013426b6ac29ca704b955327d09f93ad5755014947cfebb1b2935203aa8fdc28d4144ed334f3d6782e7beb87474f50aa8119d2b4a06370dec8815c336ff053902ec3e9091a72025ab70052bfa7ade7bca7843c19d0348527dad254174d048b7d542922284f83f32a58846aef22585f3e9b54d2a272a5b765daafd5cf3aff90fac7e88bb3a415ab71fe75fd60e10b67819d7780d8b8853ba50a8a36ffd98e3befa04eac9b9b8b1975e4deae9b26a9a82542b4994e6b25aaa648ce69e26bb22bc2148bc1641674e23bd0e28212c63ecec30b9d094aa85f3ea64fe7ff76d961fda6304026832e2d2512d790ff197fb79d2917d74e93</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>所思所想</tag>
      </tags>
  </entry>
</search>
