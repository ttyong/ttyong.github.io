<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数值分析-插值与拟合</title>
      <link href="/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88.html"/>
      <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="插值与拟合"><a href="#插值与拟合" class="headerlink" title="插值与拟合"></a>插值与拟合</h1><h2 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h2><h3 id="线性插值与抛物插值"><a href="#线性插值与抛物插值" class="headerlink" title="线性插值与抛物插值"></a>线性插值与抛物插值</h3><h3 id="n次插值基函数"><a href="#n次插值基函数" class="headerlink" title="n次插值基函数"></a>n次插值基函数</h3><p><a href="https://imgchr.com/i/tZgy38" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/tZgy38.md.jpg" alt="tZgy38.md.jpg" border="0"></a></p><h4 id="n次拉格朗日插值多项式"><a href="#n次拉格朗日插值多项式" class="headerlink" title="n次拉格朗日插值多项式"></a>n次拉格朗日插值多项式</h4><img src="https://s1.ax1x.com/2020/05/28/tZgs9f.md.jpg" alt="tZgs9f.md.jpg" border="0"><h4 id="n次插值多项式"><a href="#n次插值多项式" class="headerlink" title="n次插值多项式"></a>n次插值多项式</h4><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/tASce1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASce1.md.png" alt="tASce1.png" border="0"></a></p><p><a href="https://imgchr.com/i/tASWFK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASWFK.md.png" alt="tASWFK.png" border="0"></a></p><p><a href="https://imgchr.com/i/tApiT0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApiT0.md.jpg" alt="tApiT0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/tApPwq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApPwq.md.jpg" alt="tApPwq.md.jpg" border="0"></a></p><p><a href="https://imgchr.com/i/teSKzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/teSKzT.md.jpg" alt="teSKzT.jpg" border="0"></a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数值分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据库完整性</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h1><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p><strong>触 发 器</strong> (trig g er)<em>是用户定义在关系表上的一类由事件驱动的特殊过程</em></p><p><em>一旦定义，触发器将被保存在数据库服务器中</em></p><p> <em>任何用户对表的增、删 、改操作均由<strong>服务器自动激活相应的触发器</strong>，在关系数据库管理系统核心层进行集中的完整性控制</em>  </p><p><em>触发器类似于约束，但是比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</em>  </p><h3 id="定义触发器"><a href="#定义触发器" class="headerlink" title="定义触发器"></a>定义触发器</h3><p><strong>触发器又叫做事件-条件-动作(event-condition-action) 规则</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> &lt;触发器名&gt;</span><br><span class="line"><span class="keyword">ON</span> &#123;表名|视图名&#125;</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION]</span><br><span class="line">&#123;<span class="keyword">FOR</span>|<span class="keyword">AFTER</span>|INSTEAD <span class="keyword">OF</span>&#125;&#123;[<span class="keyword">INSERT</span>][,][<span class="keyword">UPDATE</span>][,][<span class="keyword">DELETE</span>]&#125;</span><br><span class="line">[<span class="keyword">NOT</span> <span class="keyword">FOR</span> <span class="keyword">REPLICATION</span>]</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">[<span class="keyword">SQL</span>语句]</span><br></pre></td></tr></table></figure><h4 id="INSERT触发器"><a href="#INSERT触发器" class="headerlink" title="INSERT触发器"></a>INSERT触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiijpD.png" alt="tiijpD.png" border="0"><p><a href="https://imgchr.com/i/tiFfEt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiFfEt.md.png" alt="tiFfEt.png" border="0"></a></p><p><em>cast强制转换；print只能输出字符类型；@@rowcount返回影响条数</em></p><img src="https://s1.ax1x.com/2020/05/26/tiVcJP.png" alt="tiVcJP.png" border="0"><p><em>ROLLBACK TRAN返回上一个版本</em></p><h4 id="DELETE触发器"><a href="#DELETE触发器" class="headerlink" title="DELETE触发器"></a>DELETE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiZIXD.png" alt="tiZIXD.png" border="0"><img src="https://s1.ax1x.com/2020/05/26/timuxf.png" alt="timuxf.png" border="0"><h4 id="UPDATE触发器"><a href="#UPDATE触发器" class="headerlink" title="UPDATE触发器"></a>UPDATE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tinqAJ.png" alt="tinqAJ.png" border="0"><img src="https://s1.ax1x.com/2020/05/27/tAmi7D.png" alt="tAmi7D.png" border="0"><img src="https://s1.ax1x.com/2020/05/26/tiMOhj.png" alt="tiMOhj.png" border="0"><h4 id="INSTEAD-OF触发器"><a href="#INSTEAD-OF触发器" class="headerlink" title="INSTEAD OF触发器"></a>INSTEAD OF触发器</h4><img src="https://s1.ax1x.com/2020/05/27/tAM2Je.png" alt="tAM2Je.png" border="0"><h3 id="修改和删除触发器"><a href="#修改和删除触发器" class="headerlink" title="修改和删除触发器"></a>修改和删除触发器</h3><img src="https://s1.ax1x.com/2020/05/27/tAQFW4.png" alt="tAQFW4.png" border="0"><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据库创建</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h1><h2 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h2><h2 id="SQl创建"><a href="#SQl创建" class="headerlink" title="SQl创建"></a>SQl创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> StudentInfo <span class="comment">--创建数据库名字</span></span><br><span class="line"><span class="keyword">on</span> primary <span class="comment">--主文件组</span></span><br><span class="line">(</span><br><span class="line">   <span class="keyword">name</span> = <span class="string">'StudentInfo'</span>, <span class="comment">--数据库文件的逻辑名字；</span></span><br><span class="line">   filename=<span class="string">'E:\mydata\ StudentInfo.mdf'</span>,</span><br><span class="line">   <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">   <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">   filegrowth=<span class="number">1</span>mb</span><br><span class="line">   ),</span><br><span class="line">   (</span><br><span class="line">       <span class="keyword">name</span>=<span class="string">'StudentInfo_log'</span>,  <span class="comment">-- 次要文件名字，不能和主文件名字相同</span></span><br><span class="line">       filename=<span class="string">' E:\mydata\StudentInfo_log.ldf'</span>,</span><br><span class="line">       <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">       <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">       filegrowth=<span class="number">1</span>mb</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-第七章Flume</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%83%E7%AB%A0Flume.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%83%E7%AB%A0Flume.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Flume-了解"><a href="#Flume-了解" class="headerlink" title="Flume(了解)"></a>Flume(了解)</h1><p><em>用于采集数据</em></p><h2 id="Flume-产生的背景"><a href="#Flume-产生的背景" class="headerlink" title="Flume 产生的背景"></a>Flume 产生的背景</h2><p><em>通过中间系统，将数据推送到 HDFS 或类似的存储系统是很普遍的。这些系统能在数据生产者和最终目的地之间起缓冲作用，使得偶然突发写入 HDFS 和 HBase 集群的请求，变得可以持续而平稳</em>    </p><h2 id="Flume-简介"><a href="#Flume-简介" class="headerlink" title="Flume 简介"></a>Flume 简介</h2><p><em>Flume 是 Cloudera 提供的一个高可用、高可靠、分布式的海量日志采集、聚合和传输的系统</em></p><p><em>Apache Flume 是一个系统，用于从大量数据生产商那里移动海量数据到存储、索引或分析数据的系统</em>  </p><h2 id="Flume-安装"><a href="#Flume-安装" class="headerlink" title="Flume 安装"></a>Flume 安装</h2><p><em>不支持windows安装</em></p><p><em>需要配置环境变量</em></p><h2 id="Flume的架构"><a href="#Flume的架构" class="headerlink" title="Flume的架构"></a>Flume的架构</h2><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p><em>Flume 运行的核心是 Agent。 Agent 本身是一个 Java 进程，也是 Flume 中最小的独立运行单位，运行在日志收集节点。</em></p><p>  Flume核心Agent = source(采集) + channel(缓存数据) + sink(保存日志)</p><p><em>一般一个机器运行一个Agent， 但在一个Agent中可以包含多个Source，channel和sink</em></p><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><p><em>Flume 基于数据流进行设计，数据流由事件（ Event）贯穿始终。<strong>事件作为 Flume 的基本数据单位</strong>，携带日志数据（以字节数组形式）并且携带有头信息，由 Agent 外部的数据源（如图 7-2 中的 Web Server）生成</em> </p><h2 id="Flume-应用"><a href="#Flume-应用" class="headerlink" title="Flume 应用"></a>Flume 应用</h2><h3 id="Flume的组件类型及其配置"><a href="#Flume的组件类型及其配置" class="headerlink" title="Flume的组件类型及其配置"></a>Flume的组件类型及其配置</h3><h2 id="Flume的配置方法"><a href="#Flume的配置方法" class="headerlink" title="Flume的配置方法"></a>Flume的配置方法</h2><p><em>一定义，三配置</em></p><p><a href="https://imgchr.com/i/t9LHeJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9LHeJ.md.png" alt="t9LHeJ.png" border="0"></a></p><h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven安装</title>
      <link href="/maven%E5%AE%89%E8%A3%85.html"/>
      <url>/maven%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux相关命令</title>
      <link href="/linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.html"/>
      <url>/linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDM破解</title>
      <link href="/IDM%E7%A0%B4%E8%A7%A3.html"/>
      <url>/IDM%E7%A0%B4%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c3ef0d90e9668753b03184dba9152b88e6ab9dc08dda5f22d54c42d05f7d410c">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64a1d59c1284dd092db131f60ca15fd43a800f4bdb3c18f5d23ebc2112ac0b618dcd4f911f4730f9b33f62f7e9ecfdc11c40f360b63c1b8e7ab3a73a1ff9ee0249570b2a0e8539b47afc9a9a68ea748b47f07157c7bdda91ed044c7e52f10a72953e369a665131ef1bc7e69beeafba612807b1a951f7fc0a823be343e0fc92441470330495c08320ab53e0459713ddd945fa53450de67a4eca1c25f7ab3d3598d7a9c29f47c8727ba30eb0124add458d34fcb47b330ce962059e3134d1212e9bb0dd63d0486999ed46688b2836aaa87e642d673aca5df700dcf8357e472f25ae48e2b561e642de3b5f9ba6029dd151b5545bf2b7c999d411a514fe9c6242e5798679904f162359bb5dbe7ac8d1588d7237</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
            <tag> 激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-sql执行过程遇到的异常</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="存储过程变量输出"><a href="#存储过程变量输出" class="headerlink" title="存储过程变量输出"></a>存储过程变量输出</h2><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><p>CAST(XXX AS XXX)</p><h2 id="查看存在的存储过程"><a href="#查看存在的存储过程" class="headerlink" title="查看存在的存储过程"></a>查看存在的存储过程</h2><p><a href="https://www.cnblogs.com/sunliyuan/p/6625862.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><h2 id="触发器中For-和-after等同"><a href="#触发器中For-和-after等同" class="headerlink" title="触发器中For 和 after等同"></a>触发器中For 和 after等同</h2><h2 id="当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"><a href="#当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除" class="headerlink" title="当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"></a>当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除</h2><h3 id="显示设置"><a href="#显示设置" class="headerlink" title="显示设置"></a>显示设置</h3><p><em>选中要操作的表，右键-&gt;设计-&gt;顶部的关系按钮-&gt;insert和update规范-&gt;设置为级联操作</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据库编程</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h1><h2 id="SQL-Server编程结构"><a href="#SQL-Server编程结构" class="headerlink" title="SQL Server编程结构"></a>SQL Server编程结构</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="声明局部变量"><a href="#声明局部变量" class="headerlink" title="声明局部变量"></a>声明局部变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @局部变量名 数据类型</span><br><span class="line">[， @局部变量名 数据类型]</span><br></pre></td></tr></table></figure><p><em>可以同时定义多个变量，中间用逗号隔开</em></p><h4 id="赋值局部变量"><a href="#赋值局部变量" class="headerlink" title="赋值局部变量"></a>赋值局部变量</h4><p><em>为局部变量赋值可以用SET或SELECT语句</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @变量名=表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>,..,列n</span><br><span class="line">@变量名=表达式</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure><p><em>注: 如果SELECT语句返回多个值，则局部变量取最后一个返回值。例：</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @Sname = Sname </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex = <span class="string">'男'</span></span><br></pre></td></tr></table></figure><h4 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h4><h5 id="Print语句"><a href="#Print语句" class="headerlink" title="Print语句"></a>Print语句</h5><p><em>print语句只能显示字符数据类型</em></p><h5 id><a href="#" class="headerlink" title></a></h5><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注释文本*/</span></span><br><span class="line">或</span><br><span class="line"><span class="comment">-- 注释文本</span></span><br></pre></td></tr></table></figure><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p><em>批处理是成组执行的一条或多条T-SQL指令</em></p><p><em>GO语句用于指定批处理语句的结束处，单独使用一行。本身不是T-SQL的部分</em></p><p><strong>注意</strong>：</p><p>不能在同一个批处理处，先删除，后使用</p><p>不在在同一个批处理处，先修改，后使用</p><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="BEGIN…END"><a href="#BEGIN…END" class="headerlink" title="BEGIN…END"></a>BEGIN…END</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">语句</span><br><span class="line">....</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h4><h5 id="IF-THEN语句"><a href="#IF-THEN语句" class="headerlink" title="IF-THEN语句"></a>IF-THEN语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">Sequence_of_statements;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><h5 id="IF-THEN-ELSE语句"><a href="#IF-THEN-ELSE语句" class="headerlink" title="IF-THEN-ELSE语句"></a>IF-THEN-ELSE语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">Sequence_of_statements1;</span><br><span class="line">ELSE</span><br><span class="line">Sequence_of_statements2;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><h5 id="嵌套的IF语句"><a href="#嵌套的IF语句" class="headerlink" title="嵌套的IF语句"></a>嵌套的IF语句</h5><p><em>在THEN和ELSE子句中还可以包含IF语句</em></p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Y5Mhaq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y5Mhaq.th.png" alt="Y5Mhaq.png" border="0"></a></p><img src="https://s1.ax1x.com/2020/05/20/YTFdDP.png" alt="YTFdDP.png" border="0"><h4 id="WHILE"><a href="#WHILE" class="headerlink" title="WHILE"></a>WHILE</h4><h4 id="GOTO"><a href="#GOTO" class="headerlink" title="GOTO"></a>GOTO</h4><h4 id="WAITFOR"><a href="#WAITFOR" class="headerlink" title="WAITFOR"></a>WAITFOR</h4><h4 id="RETURN"><a href="#RETURN" class="headerlink" title="RETURN"></a>RETURN</h4><h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><h2 id="存储过程-重点"><a href="#存储过程-重点" class="headerlink" title="存储过程(重点)"></a>存储过程(重点)</h2><p><em>过程化 SQ L块主要有两种类型，即命名块和匿名块</em></p><p><em>匿名块每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQ L块中调用</em></p><p>  <em>过程和函数是命名块，它们被编译后保存在数据库中，称 为持久性存储模块) ,可以被反复调用，运行速度较快</em></p><h3 id="存储过程的基本概念"><a href="#存储过程的基本概念" class="headerlink" title="存储过程的基本概念"></a>存储过程的基本概念</h3><p><em>存储过程是由过程化SQ L 语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，因此称它为存储过程，使用时只要调用即可</em>  </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>存储过程降低了客户机和服务器之间的通信量  </p><p>运行效率高  </p><p>方便实施企业规则  </p><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名([@参数<span class="number">1</span> 类型,.., @参数n 类型)</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--参数不带括号也可以</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名</span><br><span class="line">@参数<span class="number">1</span> 类型,.., @参数n 类型</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure><p><em>可简写成PROC</em></p><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> aa</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure><h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><img src="https://s1.ax1x.com/2020/05/19/Y5Y8jf.png" alt="Y5Y8jf.png" border="0"><img src="https://s1.ax1x.com/2020/05/20/YTuBVA.png" alt="YTuBVA.png" border="0"><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><img src="https://s1.ax1x.com/2020/05/20/YTkJaT.png" alt="YTkJaT.png" border="0"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> exp4</span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'%...'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 @pno=<span class="string">'....'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'...'</span>, <span class="string">'...'</span></span><br></pre></td></tr></table></figure><h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><img src="https://s1.ax1x.com/2020/05/19/Y5dghQ.png" alt="Y5dghQ.png" border="0"><p><em>可简写成EXEC</em></p><h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名<span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="重编译"><a href="#重编译" class="headerlink" title="重编译"></a>重编译</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名(参数)</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 过程名;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><em>和存储过程一样都是持久性存储模块；不同的是函数要指定返回类型</em></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名([参数<span class="number">1</span>, ..., 参数n]) <span class="keyword">RETURNS</span>&lt;类型&gt;</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span>/<span class="keyword">SELECT</span> 函数名([参数<span class="number">1</span>, ..., 参数n])</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 过程名 <span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名 <span class="number">2</span>; <span class="comment">--重命名</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 函数名 COMPILE; <span class="comment">--重新编译一个函数</span></span><br></pre></td></tr></table></figure><h2 id="过程化SQL中的游标"><a href="#过程化SQL中的游标" class="headerlink" title="过程化SQL中的游标"></a>过程化SQL中的游标</h2><hr><blockquote><p>你未必万丈光芒，但始终温暖有光。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-好友推荐</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E5%A5%BD%E5%8F%8B%E6%8E%A8%E8%8D%90.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E5%A5%BD%E5%8F%8B%E6%8E%A8%E8%8D%90.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="好友推荐"><a href="#好友推荐" class="headerlink" title="好友推荐"></a>好友推荐</h2><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><a href="https://imgchr.com/i/Y4YlJ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y4YlJ1.md.png" alt="Y4YlJ1.png" border="0"></a></p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h4><p><em>以每个人为对象，统计直接关系</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tom cat hello hadoop</span><br><span class="line">cat tom hive</span><br><span class="line">hive cat hadoop world hello mr</span><br><span class="line">mr hive hello</span><br><span class="line">world hadoop hive hello mr</span><br><span class="line">hadoop hive tom world</span><br><span class="line">hello world tom hive mr</span><br></pre></td></tr></table></figure><h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><h5 id="map阶段输出数据"><a href="#map阶段输出数据" class="headerlink" title="map阶段输出数据"></a>map阶段输出数据</h5><p><em>以key-value的形式，表示两个人的直接或间接关系(0代表直接，1代表间接)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#39;tom_cat&#39;: 0&gt;, &lt;&#39;tom_hello&#39;: 0&gt;, &lt;&#39;tom_hadoop&#39;: 0&gt;, &lt;&#39;cat_hello&#39;: 1&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;, &lt;&#39;hello_hadoop&#39;: 1&gt;</span><br><span class="line">&lt;&#39;cat_tom&#39;: 0&gt;， &lt;&#39;cat_hive&#39;: 0&gt;， &lt;&#39;tom_hive&#39;: 1&gt;</span><br><span class="line">&lt;&#39;hive_cat&#39;: 0&gt;, &lt;&#39;hive_hadoop&#39;: 0&gt;, &lt;&#39;hive_world&#39;: 0&gt;, &lt;&#39;hive_hello&#39;: 0&gt;, &lt;&#39;hive_mr&#39;: 0&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;,&lt;&#39;cat_world&#39;: 1&gt; ,&lt;&#39;cat_hello&#39;: 1&gt; ,&lt;&#39;cat_mr&#39;: 1&gt; ,&lt;&#39;hadoop_world&#39;: 1&gt;, &lt;&#39;hadoop_hello&#39;: 1&gt;, &lt;&#39;hadoop_mr&#39;: 1&gt;, &lt;&#39;world_hello&#39;: 1&gt;, &lt;&#39;world_mr&#39;: 1&gt;, &lt;&#39;hello_mr&#39;: 1&gt;,</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p><em>通过Map函数形成两个人的关系，要注意升序还是降序，确保一致性</em></p><h5 id="reduce阶段传入数据"><a href="#reduce阶段传入数据" class="headerlink" title="reduce阶段传入数据"></a>reduce阶段传入数据</h5><p><em>key中两个人的顺序不同，记为同一个关系</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tom_cat:（0,1,0,0,0）&gt;,&lt;tom_hadoop:(1,1,1)&gt;,&lt;tom_hive:(1,1,1,1,1,1)&gt;,&lt;tom_world:(1,1,1,1,1,1)&gt;，</span><br><span class="line">&lt;hadoop_world:(1,1,1,1)&gt;,&lt;hadoop_hello:(0,1,1)&gt;</span><br></pre></td></tr></table></figure><h5 id="reduce阶段传出数据"><a href="#reduce阶段传出数据" class="headerlink" title="reduce阶段传出数据"></a>reduce阶段传出数据</h5><p><em>传出间接关系拥有的共同好友</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat_hadoop2</span><br><span class="line">cat_hello2</span><br><span class="line">cat_mr1</span><br><span class="line">cat_world1</span><br><span class="line">hadoop_hello3</span><br><span class="line">hadoop_mr1</span><br><span class="line">hive_tom3</span><br><span class="line">mr_tom1</span><br><span class="line">mr_world2</span><br><span class="line">tom_world2</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-第五章</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章-运输层"></a>第五章-运输层</h2><p><em>网络层是为主机之间提供逻辑通信，<br>运输层为应用进程之间提供端到端的逻辑通信</em></p><h3 id="运输层的作用"><a href="#运输层的作用" class="headerlink" title="运输层的作用"></a>运输层的作用</h3><p><em>运输层为应用进程之间提供端到端的逻辑通信</em></p><p><em>在一台主机中经常有多个应用进程同时分别和另一台主机中的多个应用进程通信。<br>这表明运输层有一个很重要的<strong>功能——复用</strong> (multiplexing)和分用</em></p><p><a href="https://imgchr.com/i/tp8cdg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tp8cdg.md.png" alt="tp8cdg.png" border="0"></a></p><h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3><p><em>运行在计算机中的进程是用进程标识符来标志的</em></p><p><em>但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符</em></p><p><em>必须用统一的方法对 TCP/IP 体系的应用进程进行标志</em></p><p><em>解决这个问题的方法就是在运输层使用<strong>协议端口号</strong> (protocol port number)，或通常简称为<strong>端口</strong> (port)</em></p><h4 id="软件端口与硬件端口"><a href="#软件端口与硬件端口" class="headerlink" title="软件端口与硬件端口"></a>软件端口与硬件端口</h4><p><em>在协议栈层间的抽象的协议端口是*</em>软件端口<strong>。<br>路由器或交换机上的端口是</strong>硬件端口***</p><h4 id="TCP-IP-运输层端口"><a href="#TCP-IP-运输层端口" class="headerlink" title="TCP/IP 运输层端口"></a>TCP/IP 运输层端口</h4><p><em>端口用一个 16 位端口号进行标志</em></p><p><em>端口号只具有<strong>本地意义</strong>，即端口号只是为了标志<strong>本计算机应用层中的各进程</strong>。<br>在互联网中，不同计算机的相同端口号是没有联系的</em></p><h4 id="两大类端口"><a href="#两大类端口" class="headerlink" title="两大类端口"></a>两大类端口</h4><h5 id="服务器端使用的端口号"><a href="#服务器端使用的端口号" class="headerlink" title="服务器端使用的端口号"></a>服务器端使用的端口号</h5><p>熟知端口，数值一般为 0<del>1023。<br>登记端口号，数值为 1024</del>49151</p><h5 id="客户端使用的端口号"><a href="#客户端使用的端口号" class="headerlink" title="客户端使用的端口号"></a>客户端使用的端口号</h5><p><em>又称为短暂端口号，数值为 49152~65535，留给客户进程选择暂时使用</em></p><h3 id="用户数据报协议-UDP-User-Datagram-Protocol"><a href="#用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="用户数据报协议 UDP (User Datagram Protocol)"></a>用户数据报协议 UDP (User Datagram Protocol)</h3><p><em>面向连接的 TCP 协议</em></p><p><em>采用无连接的 UDP 协议</em></p><p><em>传送的数据单位协议是 *</em>UDP 报文<strong>或</strong>用户数据报***</p><p><strong>UDP实时性更好</strong></p><h4 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h4><p>(1) UDP 是无连接的</p><p>(2) UDP 使用尽最大努力交付</p><p>(3) UDP 是面向报文的(UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。)</p><p>(4) UDP 没有拥塞控制</p><p>(5) UDP 支持一对一、一对多、多对一和多对多</p><p>的交互通信。<br>(6) UDP 的首部开销小</p><h4 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h4><p><em>用户数据报=首部+数据部分</em></p><p><em>首部<strong>8个字节</strong>：源端口，目的端口，长度，检验和</em></p><p><a href="https://imgchr.com/i/YWYcjg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYcjg.md.png" alt="YWYcjg.md.png" border="0"></a></p><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><img src="https://s1.ax1x.com/2020/05/18/YWY2uQ.png" alt="YWY2uQ.png" border="0"><img src="https://s1.ax1x.com/2020/05/18/YWasaj.jpg" alt="YWasaj.jpg" border="0"><p><a href="https://imgchr.com/i/YWYRBj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYRBj.png" alt="YWYRBj.png" border="0"></a></p><p><em>目的端口小的是服务器，大的是客户机</em></p><img src="https://s1.ax1x.com/2020/05/25/tp83M6.md.png" alt="tp83M6.png" border="0"><h3 id="传输控制协议-TCP-Transmission-Control-Protocol-概述"><a href="#传输控制协议-TCP-Transmission-Control-Protocol-概述" class="headerlink" title="传输控制协议 TCP (Transmission Control Protocol)概述"></a>传输控制协议 TCP (Transmission Control Protocol)概述</h3><p><em>传送的数据单位协议是 TCP 报文段 (segment)</em></p><h4 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h4><p><em>TCP 是*</em>面向连接的<strong>运输层协议。<br>每一条 TCP 连接</strong>只能有两个端点** (endpoint)，每一条 TCP 连接<strong>只能是点对点</strong>的（一对一）。<br>TCP 提供<strong>可靠交付</strong>的服务。<br>TCP 提供<strong>全双工</strong>通信。<br><strong>面向字节流：*</strong></p><p><em>TCP 中的“流”(stream)指的是流入或流出进程的字节序列</em></p><p><em>“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流</em></p><h5 id="TCP-面向流的概念"><a href="#TCP-面向流的概念" class="headerlink" title="TCP 面向流的概念"></a>TCP 面向流的概念</h5><p><em>不保证发送方和接收方数据块具有对应大小的关系，但字节流完全一样</em></p><p><em>TCP 不关心应用进程一次把多长的报文发送到 TCP 缓存。<br>TCP 对连续的字节流进行分段，形成 TCP 报文段</em></p><h4 id="注-意"><a href="#注-意" class="headerlink" title="注 意"></a>注 意</h4><p><em>TCP 连接是一条虚连接</em></p><p><em>TCP 对应用进程一次把多长的报文发送到TCP 的缓存中是不关心的</em></p><p><em>TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）</em></p><p><em>TCP 可把太长的数据块划分短一些再传送</em></p><p><em>TCP 也可等待积累有足够多的字节后再构成报文段发送出去</em></p><h4 id="TCP-的连接"><a href="#TCP-的连接" class="headerlink" title="TCP 的连接"></a>TCP 的连接</h4><p><em>TCP 连接的端点叫做套接字 (socket) 或插口</em></p><p><em>端口号拼接到 (contatenated with) IP 地址即构成了套接字</em></p><h3 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h3><p><em>理想的传输条件有以下两个特点：<br>(1) 传输信道不产生差错。<br>(2) 不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据</em></p><p><strong>然而实际的网络都不具备以上两个理想条件</strong></p><h5 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h5><p><em>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组</em></p><p><em>全双工通信的双方既是发送方也是接收方</em></p><h6 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h6><img src="https://s1.ax1x.com/2020/05/25/t98ruV.png" alt="t98ruV.png" border="0"><h6 id="出现差错"><a href="#出现差错" class="headerlink" title="出现差错"></a>出现差错</h6><p><em>当以某一方为接收方时，可能出现：*</em>收到，检查异常，丢弃<strong>；</strong>传输过程丢失<strong>。此时接收方不会做出相应，为了确保能够正确接收，使用</strong>超时重传***</p><h6 id="确认丢失和确认迟到"><a href="#确认丢失和确认迟到" class="headerlink" title="确认丢失和确认迟到"></a>确认丢失和确认迟到</h6><p><strong>确认丢失</strong></p><p><strong>确认迟到</strong></p><p><em>接收方发送的确认，接收方在规定时间没有收到</em></p><p><em>处理方法是：A 会收到重复的确认。对重复的确认的处理很简单：收下后就丢弃。<br>B 仍然会收到重复的 M1，并且同样要丢弃重复的 M1，并重传确认分组</em></p><h5 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h5><p><em>连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置</em></p><h5 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h5><p><em>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。*</em>因此 TCP 首部的最小长度是 20 字节。***</p><img src="https://s1.ax1x.com/2020/05/25/t9YQ39.png" alt="t9YQ39.png" border="0"><p><strong>序号字段</strong>——<em>占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号</em></p><h6 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h6><p><a href="https://imgchr.com/i/t9QSzV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9QSzV.md.jpg" alt="t9QSzV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MzR0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MzR0.md.jpg" alt="t9MzR0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MxGq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MxGq.md.jpg" alt="t9MxGq.md.jpg" border="0"></a></p><h3 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h3><h4 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h4><h4 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h4><h3 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h3><p><em>超时：初始门限减半，拥塞窗口变为1；3个ACK：拥塞窗口减半</em></p><p><em>轮次就是指发送一个数据出去，收到确认回来</em></p><p><em>有多少个拥塞窗口，就可以发送多少个报文段</em></p><p><em>指数增长时，超过门限，可以等于</em></p><p><a href="https://imgchr.com/i/tiTrxU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTrxU.md.png" alt="tiTrxU.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTD2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTD2T.md.png" alt="tiTD2T.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTBGV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTBGV.md.png" alt="tiTBGV.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiT0P0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiT0P0.md.png" alt="tiT0P0.md.png" border="0"></a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数-第一章</title>
      <link href="/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0.html"/>
      <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h2><h3 id="二阶与三阶行列式"><a href="#二阶与三阶行列式" class="headerlink" title="二阶与三阶行列式"></a>二阶与三阶行列式</h3><p><a href="https://imgchr.com/i/YyoAun" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoAun.png" alt="YyoAun.png" border="0"></a><br><a href="https://imgchr.com/i/YyoEBq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoEBq.md.png" alt="YyoEBq.md.png" border="0"></a></p><h3 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h3><p>*<em>性质 1 行列式与它的转置行列式相等.  *</em></p><p>*<em>性质 2 对换行列式的两行（列） ， 行列式变号  *</em></p><p><strong>推论 如果行列式两行(列)完全相同，则此行列式为0</strong></p><p><strong>性质3 行列式的某一行(列)中所有的元素都乘以同一数k,等于k乘以这个行列式</strong></p><p> <strong>推论 行列式中某一行(列)的所有元素的公因子可以提到行列式记号的外面</strong></p><p><strong>性质4 行列式中如果有两行（列） 元素成比例， 则此行列式等于零</strong></p><p><strong>性质5 若行列式的某一行（列） 的元素都是两数之和， 例如第 i 行的元素都是两数之和</strong></p><p><strong>性质 6 把行列式的某一行（列） 的各元素乘同一数然后加到另一行（列） 对<br>应的元素上去， 行列式不变</strong></p><h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><p><em>对于 n 个不同的元素， 先规定各元素之间有一个标准次序（例如 n 个不同的<br>自然数， 可规定由小到大为标准次序）， 于是在这 n 个元素的任一排列中， 当某一<br>对元素的先后次序与标准次序不同时， 就说它构成 1 个逆序.一个排列中所有逆<br>序的总数叫做这个排列的逆序数</em></p><h3 id="上三角法求矩阵"><a href="#上三角法求矩阵" class="headerlink" title="上三角法求矩阵"></a>上三角法求矩阵</h3><p><em>等于主对角线的乘积</em></p><h3 id="行列式按行-列-展开"><a href="#行列式按行-列-展开" class="headerlink" title="行列式按行(列)展开"></a>行列式按行(列)展开</h3><p><em>行列式等于它的任一行(列)的各元素与其对应的代数余子式乘积之和</em></p><p><em>行列式某一行（列） 的元素与另一行（列） 的对应元素的代数余子式<br>乘积之和等于零</em></p><img src="https://s1.ax1x.com/2020/05/16/Y6bih6.png" alt="Y6bih6.png" border="0"><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><em>当常数项 b1， b2， …， bm 不全为零时， 线性方程组（1） 叫做<strong>n元非齐次线性方程组</strong>.</em></p><p><strong>n 元齐次线性方程组</strong></p><p><em>n 元齐次线性方程组一定有零解，可能有非零解</em></p><p><em>元素是实数的矩阵称为实矩阵， 元素是复数的矩阵称为复矩阵</em></p><p><em>只有一行的矩阵A =（a1，a2… an）称为<strong>行矩阵</strong>， 又称<strong>行向量</strong>.</em></p><p><em>只有一列的矩阵称为<strong>列矩阵</strong>， 又称<strong>列向量*</strong>.</em></p><p>  A 称为<strong>系数矩阵</strong>， x 称为<strong>未知数矩阵</strong>， b 称为<strong>常数项矩阵</strong>， B 称为<strong>增广矩阵</strong></p><p><strong>对角矩阵</strong>， <em>简称对角阵.对角阵也记作:</em><br>$$<br>A = diag（λ1， λ2， …， λn）<br>$$<br>   <em>位矩阵， 简称单位阵</em></p><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h4><p>（i） A +B = B +A；<br>（ii） （A +B） + C = A +（B +C） </p><h4 id="数与矩阵相乘"><a href="#数与矩阵相乘" class="headerlink" title="数与矩阵相乘"></a>数与矩阵相乘</h4><p><a href="https://imgchr.com/i/YcBNOe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YcBNOe.png" alt="YcBNOe.png" border="0"></a></p><p>（i） （λμ)A =λ（μA） ；<br>（ii） （λ +μ） A =λA +μA；<br>（iii） λ（A +B） =λA +λ B.  </p><h4 id="矩阵乘矩阵"><a href="#矩阵乘矩阵" class="headerlink" title="矩阵乘矩阵"></a>矩阵乘矩阵</h4><p><em>定义4 设A=（ai）j 是一个m×s矩阵， B=（bi）j 是一个s×n矩阵， 那么规定矩<br>阵 A 与矩阵 B 的乘积是一个 m×n 矩阵 C =（cij）</em></p><p><strong>必须注意： 只有当第一个矩阵（左矩阵） 的列数等于第二个矩阵（右矩阵） 的<br>行数时， 两个矩阵才能相乘</strong></p><p>*<em>总之， 矩阵的乘法不满足交换律， 即在一般情形下， A B≠ BA *</em><br>$$<br>（i） （A B） C = A（B C） ；<br>$$</p><p>$$<br>（ii） λ（A B） =（λA） B = A（λB） （其中λ 为数） ；<br>$$</p><p>$$<br>（iii） A（B + C） = A B +A C， （B + C） A = BA + CA.<br>$$</p><p>$$<br>对于单位矩阵 E， 容易验证E m A m × n = A m × n， A m × n E n = A m × n，或简写成E A = A E = A .<br>$$</p><h4 id="矩阵的幂"><a href="#矩阵的幂" class="headerlink" title="矩阵的幂"></a>矩阵的幂</h4><p>$$<br>A kA l = A k+l， （A k） l = A kl<br>$$</p><p>$$<br>又因矩阵乘法一般不满足交换律， 所以对于两个 n 阶矩阵 A与 B， 一般说来（A B） k≠ A k B k， 只有当 A 与 B 可交换时， 才有（A B） k = A k B k<br>$$</p><p><em>例如（A +B） 2 = A 2 +2A B + B 2、 （A - B） （A + B） = A 2 - B 2 等公式， 也只有当 A与 B 可交换时才成立</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sql语句异常</title>
      <link href="/sql%E8%AF%AD%E5%8F%A5%E5%BC%82%E5%B8%B8.html"/>
      <url>/sql%E8%AF%AD%E5%8F%A5%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="CREATE-VIEW-不是在查询语句第一行"><a href="#CREATE-VIEW-不是在查询语句第一行" class="headerlink" title="CREATE VIEW 不是在查询语句第一行"></a>CREATE VIEW 不是在查询语句第一行</h2><p><em>前面加一个go</em></p><h2 id="CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用"><a href="#CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用" class="headerlink" title="CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用"></a>CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用</h2><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-空值</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%A9%BA%E5%80%BC.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%A9%BA%E5%80%BC.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><em>所谓空值就是<strong>不知道</strong>或 <strong>不存在</strong>或 <strong>无意义</strong>的值。</em></p><p>SQ L语言中允许某些元组的某些属性在一定情况下取空值。 一般有以下几种情况：<br>•该属性应该有一个值，但目前不知道它的具体值。例如，某学生的年龄属性，因为<br>学生登记表漏填了，不知道该学生年龄，因此取空值。<br>•该属性不应该有值。例如，缺考学生的成绩为空，因为他没有参加考试。<br>. 由于某种原因不便于填写。例如， 一个人的电话号码不想让大家知道，则取空值。  </p><h3 id="空值的产生"><a href="#空值的产生" class="headerlink" title="空值的产生"></a>空值的产生</h3><h4 id="插入时默认空值"><a href="#插入时默认空值" class="headerlink" title="插入时默认空值"></a>插入时默认空值</h4><h4 id="显示写入空值"><a href="#显示写入空值" class="headerlink" title="显示写入空值"></a>显示写入空值</h4><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h4 id="空值的关系运算"><a href="#空值的关系运算" class="headerlink" title="空值的关系运算"></a>空值的关系运算</h4><h3 id="空值判断"><a href="#空值判断" class="headerlink" title="空值判断"></a>空值判断</h3><p><strong>IS NULL OR IS NOT NULL</strong></p><h3 id="空值的约束"><a href="#空值的约束" class="headerlink" title="空值的约束"></a>空值的约束</h3><p><em>有not null ，加了UNIQUE限制的属性</em></p><h3 id="空值的算数运算，比较运算和逻辑运算"><a href="#空值的算数运算，比较运算和逻辑运算" class="headerlink" title="空值的算数运算，比较运算和逻辑运算"></a>空值的算数运算，比较运算和逻辑运算</h3><p><em>空值与空值运算为空值；空值与另一个值为<strong>UNKNOWN</strong>.</em></p><p><em>有了<strong>UNKNOWN</strong>后常见的二值逻辑就由TRUE,FALSE变成了三值</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-视图</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E8%A7%86%E5%9B%BE.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E8%A7%86%E5%9B%BE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><em>视图是从<strong>一个或几个基本表</strong>（或视图）导出的表</em></p><p><em>它与基本表不同，是一个<strong>虚表</strong>.</em></p><p><em>数据库中只<strong>*存放视图的定义</strong>，而<strong>不存放视图对应的数据</strong>，这些数据仍存放在原来的基本表中。所以一旦基本表中的数据发生变化，从视图中查询出的数据也就随之改变了</em></p><p><em>视图就像一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化</em></p><p><em>视图一经定义，就可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但对视图的更新（增 、删 、改）操作则有一定的限制</em></p><p><em>如果已有视图建立在基本表上，这时修改基本表属性，可能导致视图不能运作；可以先删除视图，建立新视图</em></p><h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;视图名&gt;[ （&lt;列名&gt; ［,&lt;列名&gt;］ …）]</span><br><span class="line"><span class="keyword">AS</span> &lt;子查询&gt;</span><br><span class="line">［<span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>］;</span><br></pre></td></tr></table></figure><p><em>子查询<strong>可以是任意的SELECT语句</strong>，是否可以含有ORDER B Y 子句和 DISTINCT<br>短语，则取决于具体系统的实现(<strong>通常不能用ODER BY 和 DISTINCT</strong>)</em></p><p><strong>WITH CHECK OPTION</strong>表<em>示对视图进行 UPDATE、 INSERT和 DELETE操作时要<br>保证更新、插入或删除的行<strong>满足视图定义中的谓词条件（即子查询中的条件表达式</strong>）</em></p><p><em>组成视图的属性列名或者全部省略或者全部指定，没有第三种选择</em></p><p>但在下列三种情况下<strong>必须明确指定组成视图的所有列名</strong>：<br>（1） 某个目标列不是单纯的属性名，而是聚集函数或列表达式<br>（2 ） 多表连接时选出了几个同名列作为视图的字段<br>（3 ） 需要在视图中为某个列启用新的更合适的名字  </p><h4 id="建立在一个基本表"><a href="#建立在一个基本表" class="headerlink" title="建立在一个基本表"></a>建立在一个基本表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="comment">/*由于在定义IS_Student视图时加上了 WITH CHECK OPT1ON子句，以后对该视图进</span></span><br><span class="line"><span class="comment">行插入、修改和删除操作时，关系数据库管理系统会自动加上Sdept='IS'的条件。*/</span></span><br></pre></td></tr></table></figure><p><em>关系数据库管理系统执行CREATE VIEW 语句的结果只是把视图的定义存入<strong>数据字<br>典</strong>，<strong>并不执行其中的SELECT语句。只是在</strong>对视图查询时，才按视图的定义从基本表中将数据査出</em>  </p><p><em>若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但<br>保留了主码，则称这类视图为<strong>行列子集视图</strong>。 IS_Student视图就是一个行列子集视图</em></p><h4 id="建立在多个基本表"><a href="#建立在多个基本表" class="headerlink" title="建立在多个基本表"></a>建立在多个基本表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Sl(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">Student.Sno=SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p><em>由于视图IS_S1的属性列中包含了 Student表 与 SC 表的同名列Sno ,所以必须在视图名后面明确说明视图的各个属性列名。</em></p><p><em>由基本数据经过各种计算派生出的数据一般是不存储的。这些派生属性由于在基本表中并不实际存在，也称它们为虚拟列。带虚拟列的视图也称为<strong>带表达式的视图</strong>。</em>    </p><h4 id="建立在一个视图上"><a href="#建立在一个视图上" class="headerlink" title="建立在一个视图上"></a>建立在一个视图上</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade&gt;=<span class="number">90</span>;</span><br></pre></td></tr></table></figure><h4 id="建立在多个视图上"><a href="#建立在多个视图上" class="headerlink" title="建立在多个视图上"></a>建立在多个视图上</h4><h4 id="分组视图"><a href="#分组视图" class="headerlink" title="分组视图"></a>分组视图</h4><p><em>GROUP BY 子句的查询来定义视图，这种视图称为分组视图</em></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*由于AS子句中SELECT语句的目标列平均成绩是通过作用聚集函数得到的，所CREATE VIEW 中必须明确定义组成S_G 视图的各个属性列名。 S_G 是一个分组视图*/</span></span><br></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;视图名&gt; ［<span class="keyword">CASCADE</span>］ ;</span><br></pre></td></tr></table></figure><p><em>视图删除后<strong>视图的定义将从数据字典中删除</strong>。如果该视图上还导出了其他视图，则使用 <strong>CASCADE级联</strong>删除语句把该视图和由它导出的所有视图一起删除</em></p><p> <em>基本表删除后，由该基本表导出的所有视图均无法使用了，但是视图的定义没有从<br>字典中清除。删除这些视图定义需要显式地使用DROP VIEW 语句</em></p><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p><em>与查询基本表差不多</em></p><p><em>关系数据库管理系统执行对视图的查询时，<strong>首先</strong>进行有效性检查，检查查询中涉及的表 、视图等是否存在。<strong>如果存在，则</strong>从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，<strong>转换成等价的对基本表的查询</strong>，然后再执行修正了的查询。这一转换过程称为<strong>视图消解</strong>(view resolution)</em> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="number">20</span>;</span><br><span class="line"><span class="comment">/*本例转换后的查询语句为*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'lS'</span> <span class="keyword">AND</span> Sage&lt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>而有时候可能出现转换错误</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg&gt;=<span class="number">90</span>;</span><br><span class="line"><span class="comment">/*将本例中的查询语句与定义S_G 视图的子查询结合，形成下列查询语句：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">AVG</span>(Grade)&gt;=<span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure><p><em>WHERE子句中是不能用聚集函数作为条件表达式的，因此执行此修正后的查询<br>将会出现语法错误</em></p><p><em>目前多数关系数据库系统对<strong>行列子集视图</strong>的查询均能进行正确转换。但对非行列<br>子 集 视 图 的 查 询  就 不 一 定 能 做 转 换 了 ，因此这类查询应该直接对<strong>基本表</strong>进行 。</em>  </p><p><em>定义视图并查询视图与基于派生表的查询是有区别的。视图一旦定义，其定义将永<br>久保存在数据字典中，之后的所有查询都可以直接引用该视图。而派生表只是在语句执行时临时定义，语句执行后该定义即被删除</em>  </p><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span>;</span><br><span class="line">转换后的更新语句为</span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'201215129'</span>, <span class="string">'丁赵新'</span>,<span class="number">20</span>);</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Student(Sno,Sname,Sage,Sdept)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'2O1215129'</span>,<span class="string">'赵新'</span>,<span class="number">20</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span>；</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure><p><em>在关系数据库中，<strong>并不是所有的视图都是可更新的</strong>，因为有些视图的更新不能唯一地有意义地转换成对相应基本表的更新</em></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G（Sno,Gavg）</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>（Grade）</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*如果想把视图S_G 中学号为“ 201215121 ” 的学生的平均成绩改成9 0 分 ， SQL语句如下：*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> S_G</span><br><span class="line"><span class="keyword">SET</span> Gavg=<span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'20121512'</span>；</span><br></pre></td></tr></table></figure><p><em>但这个对视图的更新是无法转换成对基本表S C 的更新的，因为系统无法修改各科成绩，以使平均成绩成为90。所 以 S_G 视图是不可更新的。</em></p><p><em>一般地，行列子集视图是可更新的</em>  </p><h4 id="受限更新"><a href="#受限更新" class="headerlink" title="受限更新"></a>受限更新</h4><p><strong>例如， DB2规定:</strong><br>（1 ） 若视图是由两个以上基本表导出的，则此视图不允许更新。<br>（2 ） 若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和 UPDATE操作，但允许执行DELETE操作。<br>（3 ） 若视图的字段来自<strong>聚集函数</strong>，则此视图不允许更新。<br>（4 ） 若视图定义中含有<strong>GROUP BY</strong>子句，则此视图不允许更新。<br>（5） 若视图定义中含有<strong>DISTINCT</strong>短语，则此视图不允许更新。<br>（6 ）若视图定义中<strong>有嵌套查询，并且内层查询的FROM 子句</strong>中涉及的表也是导出该视图的基本表，则此视图不允许更新。  </p><h3 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h3><ul><li>视图能够简化用户的操作  </li><li>视图使用户能以多种角度看待同一数据  </li><li>视图对重构数据库提供了一定程度的逻辑独立性  </li><li>视图能够对机密数据提供安全保护  </li><li>适当利用视图可以更清晰地表达查询  </li></ul><h3 id="视图查看"><a href="#视图查看" class="headerlink" title="视图查看"></a>视图查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_helptext 视图名</span><br></pre></td></tr></table></figure><h3 id="视图加密"><a href="#视图加密" class="headerlink" title="视图加密"></a>视图加密</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> ENCRYPTION <span class="comment">-- 加密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">sp_helptext 视图名 报错</span><br></pre></td></tr></table></figure><hr><blockquote><p>即使慢，驰而不息，纵会落后，纵会失败，但一定可以达到他所向的目标。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-第六章Hbase, Hive, Pig</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%85%AD%E7%AB%A0Hbase,%20Hive,%20Pig.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%85%AD%E7%AB%A0Hbase,%20Hive,%20Pig.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Hbase-Hive-Pig"><a href="#Hbase-Hive-Pig" class="headerlink" title="Hbase, Hive, Pig"></a>Hbase, Hive, Pig</h1><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p><em>采用列式存储</em></p><h3 id="Hbase简介"><a href="#Hbase简介" class="headerlink" title="Hbase简介"></a>Hbase简介</h3><p><em>HBase是一个分布式的、面向列的开源数据库，该技术来源于Google论文。HBase在Hadoop之上提供了类似于Bigtable的能力。</em></p><h4 id="HBase的特性"><a href="#HBase的特性" class="headerlink" title="HBase的特性"></a>HBase的特性</h4><p><strong>伸缩性</strong>：表可以很“高”（数十亿个数据行），可以很“宽”（数百万个列）。<br><strong>自动分区</strong>：当表增长时，表会自动分裂成Region，并分布到可用节点上。<br><strong>线性扩展和对于新节点的自动处理</strong>：增加节点，指它指向RegionServer，Region自动负载均衡。<br><strong>普通商用硬件支持</strong><br><strong>容错</strong>：HBase在Hadoop的文件系统之上，利用了Hadoop的文件系统（HDFS）提供的容错能力。<br><strong>检索性能</strong>：HBase是一个数据模型，类似于谷歌的大表设计，可以提供快速随机访问海量结构化数据。</p><h4 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h4><h5 id="关系型数据库和Hbase对比"><a href="#关系型数据库和Hbase对比" class="headerlink" title="关系型数据库和Hbase对比"></a>关系型数据库和Hbase对比</h5><p><a href="https://imgchr.com/i/YJQCZQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQCZQ.md.png" alt="YJQCZQ.png" border="0"></a></p><h5 id="列族存储的概念"><a href="#列族存储的概念" class="headerlink" title="列族存储的概念"></a>列族存储的概念</h5><p><a href="https://imgchr.com/i/YJQReg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQReg.md.png" alt="YJQReg.png" border="0"></a></p><h5 id="HBase的数据模型"><a href="#HBase的数据模型" class="headerlink" title="HBase的数据模型"></a>HBase的数据模型</h5><p><a href="https://imgchr.com/i/Yf6q8e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf6q8e.md.png" alt="Yf6q8e.png" border="0"></a></p><img src="https://s1.ax1x.com/2020/05/11/YJ3xYj.png" alt="YJ3xYj.png" border="0"><h6 id="列数据属性"><a href="#列数据属性" class="headerlink" title="列数据属性"></a>列数据属性</h6><img src="https://s1.ax1x.com/2020/05/11/YJ8Yhd.png" alt="YJ8Yhd.png" border="0"><h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p><em>Hbase的Table中的所有行都按照row key的字典序排列</em></p><p><em>Table 在行的方向上分割为多个Region。Region是HBase中分布式存储和负载均衡的最小单元</em></p><p><em>不同Region分布到不同RegionServer上</em></p><h4 id="Region分裂-Split"><a href="#Region分裂-Split" class="headerlink" title="Region分裂(Split)"></a>Region分裂(Split)</h4><p><a href="https://imgchr.com/i/YfgIfO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfgIfO.png" alt="YfgIfO.png" border="0"></a></p><h3 id="行式存储和列式存储"><a href="#行式存储和列式存储" class="headerlink" title="行式存储和列式存储"></a>行式存储和列式存储</h3><img src="https://s1.ax1x.com/2020/05/11/YJmulD.png" alt="YJmulD.png" border="0"><h4 id="OLTP-amp-OLAP"><a href="#OLTP-amp-OLAP" class="headerlink" title="OLTP &amp; OLAP"></a>OLTP &amp; OLAP</h4><h5 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h5><p><em>On-Line Transaction Processing（联机事务处理过程）。<br>也称为面向交易的处理过程，其基本特征是前台接收的用户数据可以立即传送到计算中心进行处理，并在很短的时间内给出处理结果，是对用户操作快速响应的方式之一。</em></p><p><em>典型案例：银行转账</em></p><p>（1）对于单列，获取频率较高，就使用列式存储。<br>（2）如果针对多列查询，使用并行处理查询效率也是很高，可采用列式存储。<br>（3）对于大数据的环境，利于数据压缩和线性扩展，也可以采用列式存储。<br>（4）事务使用率不高，数据量非常大。<br>（5）对于更新某些行的频率不高，也可以选择列式存储</p><h5 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h5><p><em>On-Line Analytic Processing（联机分析处理过程）。<br>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</em></p><p><em>典型案例：商品推荐</em></p><p>（1）关系之间的解决方案，表与表之关联大，可以采用行式存储。主键–外键<br>（2）强事务特性，如消费、资金的业务。<br>（3）如数据小于千万级，可考虑行式存储</p><p><strong>OLTP是用于事务和查询处理<br>OLAP用于数据分析</strong></p><h2 id="PIG"><a href="#PIG" class="headerlink" title="PIG"></a>PIG</h2><h2 id="HIVE-重点"><a href="#HIVE-重点" class="headerlink" title="HIVE(重点)"></a>HIVE(重点)</h2><h3 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h3><p><em>Hive是基于Hadoop的一个<strong>数据仓库工具</strong>，可以将<strong>结构化的</strong>数据文件映射为一张<strong>数据库表</strong>，并提供简单的<strong>sql</strong>查询功能，可以将sql语句转换为MapReduce任务进行运行</em></p><p><em>Hive是一个翻译器：SQL —&gt; Hive引擎  —&gt; MapReduce程序</em></p><p><em>Hive是构建在HDFS上的一个数据仓库（Data Warehouse）</em></p><h4 id="为什么要使用Hive？"><a href="#为什么要使用Hive？" class="headerlink" title="为什么要使用Hive？"></a>为什么要使用Hive？</h4><p>直接使用 MapReduce 所面临的问题：<br>　　1、人员学习成本太高<br>　　2、项目周期要求太短<br>　　3、MapReduce实现复杂查询逻辑开发难度太大<br>为什么要使用 Hive：<br>　    1、更友好的接口：操作接口采用类 SQL 的语法，提供快速开发的能力。<br>         2、更低的学习成本：避免了写 MapReduce，减少开发人员的学习成本，使<br>                DBA、运维人员可以通过SQL来实现操作大数据。<br>         3、更好的扩展性：可自由扩展集群规模而无需重启服务，还支持用户自定<br>               义函数。　　　　</p><h3 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h3><h4 id="Metastore三种运行模式"><a href="#Metastore三种运行模式" class="headerlink" title="Metastore三种运行模式"></a>Metastore三种运行模式</h4><img src="https://s1.ax1x.com/2020/05/18/Yf53HH.png" alt="Yf53HH.png" border="0"><h4 id="了解Metastore配置属性"><a href="#了解Metastore配置属性" class="headerlink" title="了解Metastore配置属性"></a>了解Metastore配置属性</h4><img src="https://s1.ax1x.com/2020/05/18/YfIfJI.png" alt="YfIfJI.png" border="0"><h4 id="安装Hive-1"><a href="#安装Hive-1" class="headerlink" title="安装Hive"></a>安装Hive</h4><img src="https://s1.ax1x.com/2020/05/18/YfoHc6.png" alt="YfoHc6.png" border="0"><h3 id="Hive的架构与工作原理"><a href="#Hive的架构与工作原理" class="headerlink" title="Hive的架构与工作原理"></a>Hive的架构与工作原理</h3><h4 id="Hive体系结构"><a href="#Hive体系结构" class="headerlink" title="Hive体系结构"></a>Hive体系结构</h4><p><a href="https://imgchr.com/i/YfTbPs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfTbPs.md.png" alt="YfTbPs.png" border="0"></a></p><p><em>CLI(终端)：常采用这个</em></p><h4 id="Hive工作原理"><a href="#Hive工作原理" class="headerlink" title="Hive工作原理"></a>Hive工作原理</h4><p><a href="https://imgchr.com/i/Yf7rQ0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf7rQ0.md.png" alt="Yf7rQ0.png" border="0"></a></p><h4 id="Hive与传统数据库的比较"><a href="#Hive与传统数据库的比较" class="headerlink" title="Hive与传统数据库的比较"></a>Hive与传统数据库的比较</h4><img src="https://s1.ax1x.com/2020/05/18/YfHiTg.png" alt="YfHiTg.png" border="0"><h3 id="HiveQL"><a href="#HiveQL" class="headerlink" title="HiveQL"></a>HiveQL</h3><h4 id="Hive支持的数据类型"><a href="#Hive支持的数据类型" class="headerlink" title="Hive支持的数据类型"></a>Hive支持的数据类型</h4><img src="https://s1.ax1x.com/2020/05/18/YfbJUg.md.png" alt="YfbJUg.png" border="0"><h4 id="建表命令"><a href="#建表命令" class="headerlink" title="建表命令"></a>建表命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名（...）</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/YfL639" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfL639.md.png" alt="YfL639.png" border="0"></a></p><h4 id="数据加载命名"><a href="#数据加载命名" class="headerlink" title="数据加载命名"></a>数据加载命名</h4><h5 id="导入HDFS数据"><a href="#导入HDFS数据" class="headerlink" title="导入HDFS数据"></a>导入HDFS数据</h5><p><a href="https://imgchr.com/i/YfXdFU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfXdFU.png" alt="YfXdFU.png" border="0"></a></p><p><em>会把hdfs中对应文件移动到hive仓库中</em></p><h5 id="导入本地数据"><a href="#导入本地数据" class="headerlink" title="导入本地数据"></a>导入本地数据</h5><img src="https://s1.ax1x.com/2020/05/18/YfXUoT.png" alt="YfXUoT.png" border="0"><p><em>复制</em></p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><h5 id="内部表-托管表"><a href="#内部表-托管表" class="headerlink" title="内部表(托管表)"></a>内部表(托管表)</h5><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YfjLuR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfjLuR.md.png" alt="YfjLuR.md.png" border="0"></a></p><h6 id="创建内部表"><a href="#创建内部表" class="headerlink" title="创建内部表"></a>创建内部表</h6><img src="https://s1.ax1x.com/2020/05/18/Yfjbv9.md.png" alt="Yfjbv9.md.png" border="0"><h5 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h5><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/Yfx0fS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yfx0fS.md.png" alt="Yfx0fS.md.png" border="0"></a></p><h6 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建外部表</h6><p><a href="https://imgchr.com/i/YfxwY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfxwY8.md.png" alt="YfxwY8.md.png" border="0"></a></p><h5 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h5><p><a href="https://imgchr.com/i/YfzCnA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzCnA.md.png" alt="YfzCnA.png" border="0"></a></p><h5 id="桶表"><a href="#桶表" class="headerlink" title="桶表"></a>桶表</h5><p><a href="https://imgchr.com/i/YfzQ7q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzQ7q.md.png" alt="YfzQ7q.png" border="0"></a></p><h5 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h5><p><a href="https://imgchr.com/i/YfzfHI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzfHI.md.png" alt="YfzfHI.png" border="0"></a></p><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YhSlKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSlKH.md.png" alt="YhSlKH.md.png" border="0"></a></p><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><p><a href="https://imgchr.com/i/YhSMxe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSMxe.md.png" alt="YhSMxe.md.png" border="0"></a></p><h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h5><h6 id><a href="#" class="headerlink" title></a><a href="https://imgchr.com/i/YhpZLj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpZLj.md.png" alt="YhpZLj.png" border="0"></a></h6><p><a href="https://imgchr.com/i/YhpWkt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpWkt.png" alt="YhpWkt.png" border="0"></a></p><h6 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h6><p><a href="https://imgchr.com/i/Yh9pX4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9pX4.png" alt="Yh9pX4.png" border="0"></a></p><p><strong>Hive不支持数据删除和修改</strong></p><h5 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h5><p><a href="https://imgchr.com/i/Yh9BEn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9BEn.md.png" alt="Yh9BEn.md.png" border="0"></a><br><a href="https://imgchr.com/i/Yh9r40" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9r40.md.png" alt="Yh9r40.md.png" border="0"></a></p><h5 id="Hive如何调优"><a href="#Hive如何调优" class="headerlink" title="Hive如何调优"></a>Hive如何调优</h5><p><img src="https://s1.ax1x.com/2020/05/18/Yh9DNq.md.png" alt="Yh9DNq.md.png" border="0"></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hbase </tag>
            
            <tag> Hive </tag>
            
            <tag> Pig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-第二章</title>
      <link href="/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html"/>
      <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><em>在内存中需要分配连续的存储空间</em></p><p><em>支持顺序访问和随机访问</em></p><p><strong>数组擅长随机访问，链表擅长删除和插入</strong></p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><em>链表中的元素可以存储在内存中任何地方</em></p><p><em>只支持顺序访问</em></p><p><em>每个元素存储了下一个元素的位置，将每个元素连接起来</em></p><p><em>对于需要直接定位到某个元素，链表比数组效率要低，因为需要上一个元素知道下一个元素的地址</em></p><p><em>删除和插入操作，链表比数组跟高效</em></p><p><em>删除一定会成功，插入不一定，因为可能内存不够</em></p><img src="https://s1.ax1x.com/2020/05/10/Y3zj9x.png" alt="Y3zj9x.png" border="0"><p><em>链表和数组混合使用</em></p><h3 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h3><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-第一章</title>
      <link href="/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html"/>
      <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p><em>算法是一组完成任务的指令。任何代码都可以叫做算法</em></p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><em>二分查找时一种算法，其输入是一个<strong>有序</strong>的元素列表</em></p><h4 id="次数"><a href="#次数" class="headerlink" title="次数"></a>次数</h4><p><em>1到100的数字集，只需要<strong>7步</strong>就可以找到正确的数值</em></p><p><em>一般而言，对于包含n个元素的列表，用二分查找最多需：</em><br>$$<br>log2n<br>$$</p><h4 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, item)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        guess = list[mid]</span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h4><p>简单查询(线性时间)：O(n)</p><p>二分查找(对数时间)：O(log2n)</p><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p><em>大O表示法能够比较操作次数，它指出了算法运行时间的增速</em></p><p><em>表示的是最糟糕情况下的时间</em></p><p><strong>除最糟糕情况下的运行时间外，还应该考虑平均情况的运行时间，这是很重要的</strong></p><p><em>大O表示法并不考虑乘以，除以，加上，减去的数字</em></p><p><em>常见的五种大O运行时间：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">O(log2n)  对数时间  二分查找</span><br><span class="line"></span><br><span class="line">O(n)  线性时间，简单查找</span><br><span class="line"></span><br><span class="line">O(n*log2n)  快速排序</span><br><span class="line"></span><br><span class="line">O(n^2)  一种速度较慢的排序方法</span><br><span class="line"></span><br><span class="line">O(n!)  旅行商问题</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/Y17M6I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/10/Y17M6I.md.png" alt="Y17M6I.png" border="0"></a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><em>算法的速度并非指时间，而是操作数的增速</em></p><p><em>谈论算法的时间时，我们说的是输入的增加，其运行时间以什么样的速度增加</em></p><p><em>算法的时间并不以秒为单位</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkinter常用组件目录</title>
      <link href="/tkinter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9B%AE%E5%BD%95.html"/>
      <url>/tkinter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9B%AE%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><p><a href="https://www.cnblogs.com/kongzhagen/p/6145437.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/kongzhagen/p/6145437.html</a></p><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tkinter之checkbutton</title>
      <link href="/tkinter%E4%B9%8Bcheckbutton.html"/>
      <url>/tkinter%E4%B9%8Bcheckbutton.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="checkbutton"><a href="#checkbutton" class="headerlink" title="checkbutton"></a>checkbutton</h2><h3 id="状态值"><a href="#状态值" class="headerlink" title="状态值"></a>状态值</h3><p><em>具有on和off两种状态</em></p><h4 id="设置状态值为0-1"><a href="#设置状态值为0-1" class="headerlink" title="设置状态值为0,1"></a>设置状态值为0,1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on为<span class="number">1</span>， off为<span class="number">0</span></span><br><span class="line">intvar = IntVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=intvar, command=...)</span><br></pre></td></tr></table></figure><h4 id="设置状态值为设置的值"><a href="#设置状态值为设置的值" class="headerlink" title="设置状态值为设置的值"></a>设置状态值为设置的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringVar = StringVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=stringVar, onvalue=<span class="string">'AA'</span>, offvalue=<span class="string">'BB'</span>, command=...)</span><br></pre></td></tr></table></figure><h3 id="获取复选框文本值"><a href="#获取复选框文本值" class="headerlink" title="获取复选框文本值"></a>获取复选框文本值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = checkbutton[<span class="string">'text'</span>]</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tkinter之Text</title>
      <link href="/tkinter%E4%B9%8BText.html"/>
      <url>/tkinter%E4%B9%8BText.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Tkinter"><a href="#Tkinter" class="headerlink" title="Tkinter"></a>Tkinter</h1><p><em>Text（文本）组件用于显示和处理多行文本。在 Tkinter 的所有组件中，Text 组件显得异常强大和灵活，适用于多种任务。虽然该组件的主要目的是显示多行文本，但它常常也被用于作为简单的文本编辑器和网页浏览器使用</em></p><p><em>Text 组件用于显示文本文档，包含纯文本或格式化文本（使用不同字体，嵌入图片，显示链接，甚至是带 CSS 格式的 HTML 等）</em></p><h2 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"Python.com!"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="指定标签"><a href="#指定标签" class="headerlink" title="指定标签"></a>指定标签</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 tag</span></span><br><span class="line">text.tag_config(<span class="string">"tag_1"</span>, backgroun=<span class="string">"yellow"</span>, foreground=<span class="string">"red"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"FishC.com!"</span>, <span class="string">"tag_1"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><em>在 Text 组件中插入对象，可以使用 window_create() 和 image_create() 方法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love Python!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"哎呀，我被点了一下~"</span>)</span><br><span class="line">    </span><br><span class="line">b1 = tk.Button(text, text=<span class="string">"点我点我"</span>, command=show)</span><br><span class="line">text.window_create(<span class="string">"insert"</span>, window=b1)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h2 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h2><h3 id="全部内容"><a href="#全部内容" class="headerlink" title="全部内容"></a>全部内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.delete(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure><h3 id="删除一个对象"><a href="#删除一个对象" class="headerlink" title="删除一个对象"></a>删除一个对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.delete(object)</span><br></pre></td></tr></table></figure><h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contents = text.get(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure><h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><p><em>index() 方法用于将所有支持的“索引”格式（请参考下方【Indexes 用法】）转换为“行.列”格式的索引号</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h2 id="mark-set"><a href="#mark-set" class="headerlink" title="mark_set()"></a>mark_set()</h2><p><em>如果你需要跟踪一个位置，那么你可以将该位置“标记”下来</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">text.mark_set(<span class="string">"here"</span>, <span class="string">'1.8'</span>)</span><br><span class="line">text.insert(<span class="string">"here"</span>, <span class="string">"very "</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h2 id="文本换行输入"><a href="#文本换行输入" class="headerlink" title="文本换行输入"></a>文本换行输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text.insert(END/INSERT, <span class="string">'..../n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text.insert(...)</span><br><span class="line">text.insert(INSERT, <span class="string">'/n'</span>)</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/java%E7%AC%94%E8%AE%B0.html"/>
      <url>/java%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="eclipse代码快速排版"><a href="#eclipse代码快速排版" class="headerlink" title="eclipse代码快速排版"></a>eclipse代码快速排版</h2><p><em>ctrl+shif+f</em></p><h2 id><a href="#" class="headerlink" title></a></h2><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 排版 </tag>
            
            <tag> 对齐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop笔记</title>
      <link href="/hadoop%E7%AC%94%E8%AE%B0.html"/>
      <url>/hadoop%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="eclipse关联hadoop源码"><a href="#eclipse关联hadoop源码" class="headerlink" title="eclipse关联hadoop源码"></a>eclipse关联hadoop源码</h2><p><em>解压hadoop-2.7.1-src.tar.gz</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf hadoop-2.7.1-src.tar.gz*</span><br></pre></td></tr></table></figure><p><em>eclipse选择解压后的文件</em></p><h2 id><a href="#" class="headerlink" title></a></h2><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据更新</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入元组"><a href="#插入元组" class="headerlink" title="插入元组"></a>插入元组</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*全部属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME</span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*必须和表的顺序相同*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*特定属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME(...) <span class="comment">/*属性顺序可以和表的顺序不同*/</span></span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*要和上面顺序相同;用单引号*/</span></span><br></pre></td></tr></table></figure><p><em>不赋值的话会默认赋空值；也可以显示的赋NULL</em></p><h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">INTO</span> ＜表名＞ ［(＜属性列<span class="number">1</span>＞ ［,＜属性列<span class="number">2</span>＞…］ )</span><br><span class="line">子査询；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="keyword">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure><p><em>可以转换为连接操作</em></p><h4 id="SELECT…INTO"><a href="#SELECT…INTO" class="headerlink" title="SELECT…INTO"></a>SELECT…INTO</h4><p><em>将一个表中的数据插入到另一个表</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> newTable</span><br><span class="line"><span class="keyword">FROM</span> oldTable</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> ＜表名＞</span><br><span class="line"><span class="keyword">SET</span>＜列名＞=＜表达式＞ ［,＜列名＞=＜表达式＞］ …</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure><h4 id="修改某一个元组的值"><a href="#修改某一个元组的值" class="headerlink" title="修改某一个元组的值"></a>修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage=<span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'2012J5121'</span>;</span><br></pre></td></tr></table></figure><h4 id="修改多个元组的值"><a href="#修改多个元组的值" class="headerlink" title="修改多个元组的值"></a>修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student116</span><br><span class="line"><span class="keyword">SET</span> Sage=Sage+l;</span><br></pre></td></tr></table></figure><h4 id="带子查询的修改语句"><a href="#带子查询的修改语句" class="headerlink" title="带子查询的修改语句"></a>带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SC</span><br><span class="line"><span class="keyword">SET</span> Grade=O</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/05/06/YAbXIf.png" alt="YAbXIf.png" border="0"><p><em>可以转换为连接操作</em></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> ＜表名＞</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure><h4 id="删除某一个元组的值"><a href="#删除某一个元组的值" class="headerlink" title="删除某一个元组的值"></a>删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215128'</span>；</span><br></pre></td></tr></table></figure><h4 id="删除多个元组"><a href="#删除多个元组" class="headerlink" title="删除多个元组"></a>删除多个元组</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><h4 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure><p><em>注意：删除操作不可以用连接代替</em></p><img src="https://s1.ax1x.com/2020/05/06/YAOGxe.png" alt="YAOGxe.png" border="0"><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数</title>
      <link href="/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6.html"/>
      <url>/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><h3 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h3><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p><em>定义：设X,Y是两个非空集合，如果存在一个法则，使得X中的每一个元素按照法则f,在Y中都有唯一的元素y与之对应，那么则称f为从X到Y的<strong>映射</strong>.</em></p><p><em>元素y称为x(在映射f下)的像；x称为元素y在(在映射f下)的<strong>原像</strong>.</em></p><p><em>可能是一对多</em></p><p><strong>满射</strong>：<em>Y中每一个元素都是X中某元素的像</em></p><p><strong>单射</strong>：<em>像只有唯一的原像</em></p><p><strong>一一映射</strong>：<em>既是单射又是满射</em></p><p><em>映射又叫算子</em></p><p><em>非空数集X到数集Y的映射又称为X上的泛函</em></p><p><em>非空数集X到数集X的映射称为X上的转换</em></p><p><em>非空实数集X到实数集Y的映射又称为X上的函数</em></p><h4 id="逆映射与复合映射"><a href="#逆映射与复合映射" class="headerlink" title="逆映射与复合映射"></a>逆映射与复合映射</h4><p><em>单射才存在逆映射</em></p><p><em>映射的值域作为逆映射的定义域</em></p><p><em>复合映射的条件是，g的值域必须包含在f的定义域内</em></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><em>实数到实数的映射</em></p><p><strong>构成函数的条件</strong>：<em>定义域和对应法则</em></p><p><em>两个函数相同的条件：定义域和法则都相同</em></p><h2 id="证明一个点左右的连续性"><a href="#证明一个点左右的连续性" class="headerlink" title="证明一个点左右的连续性"></a>证明一个点左右的连续性</h2><p><em>左右极限相等且等于该点函数值，则函数在该点连续</em></p><h2 id="三次方程求解方法"><a href="#三次方程求解方法" class="headerlink" title="三次方程求解方法"></a>三次方程求解方法</h2><h3 id="因式分解"><a href="#因式分解" class="headerlink" title="因式分解"></a>因式分解</h3><h3 id="先算出一个根"><a href="#先算出一个根" class="headerlink" title="先算出一个根"></a>先算出一个根</h3><p><a href="https://imgchr.com/i/YG0nTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0nTx.md.png" alt="YG0nTx.png" border="0"></a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html"/>
      <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><img src="https://s1.ax1x.com/2020/05/05/YkPeFs.png" alt="YkPeFs.png" border="0"><img src="https://s1.ax1x.com/2020/05/05/YkPgfI.png" alt="YkPgfI.png" border="0"><h3 id="三阶行列式的求法"><a href="#三阶行列式的求法" class="headerlink" title="三阶行列式的求法"></a>三阶行列式的求法</h3><img src="https://s1.ax1x.com/2020/05/11/YGUkq0.png" alt="YGUkq0.png" border="0"><h3 id="按某一行某一列展开计算"><a href="#按某一行某一列展开计算" class="headerlink" title="按某一行某一列展开计算"></a>按某一行某一列展开计算</h3><p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.jpg" border="0"></a></p><h3 id="转换为上三角矩阵"><a href="#转换为上三角矩阵" class="headerlink" title="转换为上三角矩阵"></a>转换为上三角矩阵</h3><p><em>结果等于主对角线的乘积</em></p><h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h2><p><em>把矩阵元素aij放到aji的位置</em></p><img src="https://s1.ax1x.com/2020/05/06/YkOa01.png" alt="YkOa01.png" border="0"><h2 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h2><img src="https://s1.ax1x.com/2020/05/05/Yki9AJ.png" alt="Yki9AJ.png" border="0"><img src="https://s1.ax1x.com/2020/05/05/YkFUsK.png" alt="YkFUsK.png" border="0"><img src="https://s1.ax1x.com/2020/05/05/YkFXeU.png" alt="YkFXeU.png" border="0"><h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em>设A为n阶矩阵，若存在n阶矩阵B使得:AB=BA=E(单位矩阵)，则称A是可逆的且矩阵B是矩阵A的逆矩阵</em></p><h3 id="逆矩阵唯一性证明"><a href="#逆矩阵唯一性证明" class="headerlink" title="逆矩阵唯一性证明"></a>逆矩阵唯一性证明</h3><p><strong>若A是可逆矩阵，则A的逆矩阵是唯一的。证明：</strong></p><img src="https://s1.ax1x.com/2020/05/05/YFxDm9.png" alt="YFxDm9.png" border="0"><p><a href="https://imgchr.com/i/YkZSHK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/05/YkZeDP.png" alt="YkZeDP.png" border="0"></a></p><h3 id="求逆矩阵"><a href="#求逆矩阵" class="headerlink" title="求逆矩阵"></a>求逆矩阵</h3><h4 id="定义求"><a href="#定义求" class="headerlink" title="定义求"></a>定义求</h4><h4 id="初等变换法"><a href="#初等变换法" class="headerlink" title="初等变换法"></a>初等变换法</h4><h4 id="伴随阵法"><a href="#伴随阵法" class="headerlink" title="伴随阵法"></a>伴随阵法</h4><img src="https://s1.ax1x.com/2020/05/05/YkAlC9.png" alt="YkAlC9.png" border="0"><h3 id="矩阵的特征值和特征向量"><a href="#矩阵的特征值和特征向量" class="headerlink" title="矩阵的特征值和特征向量"></a>矩阵的特征值和特征向量</h3><p><a href="https://imgchr.com/i/YGGEy6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGEy6.md.png" alt="YGGEy6.md.png" border="0"></a><br><a href="https://imgchr.com/i/YGGAQx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGAQx.png" alt="YGGAQx.png" border="0"></a><br><a href="https://imgchr.com/i/YGGeeO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGeeO.png" alt="YGGeeO.png" border="0"></a><br><a href="https://imgchr.com/i/YGGVOK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGVOK.png" alt="YGGVOK.png" border="0"></a></p><p><a href="https://imgchr.com/i/YGGOtH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGOtH.md.jpg" alt="YGGOtH.jpg" border="0"></a></p><h2 id="奇异方程和非奇异方程"><a href="#奇异方程和非奇异方程" class="headerlink" title="奇异方程和非奇异方程"></a>奇异方程和非奇异方程</h2><p><em>奇异方程的行列式为0</em></p><hr><blockquote><p>授人以鱼，不如授人以渔。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>成语</title>
      <link href="/%E6%88%90%E8%AF%AD%E7%BE%8E%E5%8F%A5.html"/>
      <url>/%E6%88%90%E8%AF%AD%E7%BE%8E%E5%8F%A5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="舌灿莲花"><a href="#舌灿莲花" class="headerlink" title="舌灿莲花"></a>舌灿莲花</h2><p><em>形容人口才好，口齿伶俐，能说善道，有如莲花般地美妙</em></p><h2 id="絮聒不休"><a href="#絮聒不休" class="headerlink" title="絮聒不休"></a>絮聒不休</h2><p><em>多形容，话多，不停歇，没完没了</em></p><h2 id="吐佳言如锯木屑，霏霏不绝"><a href="#吐佳言如锯木屑，霏霏不绝" class="headerlink" title="吐佳言如锯木屑，霏霏不绝"></a>吐佳言如锯木屑，霏霏不绝</h2><h2 id="谈霏玉屑"><a href="#谈霏玉屑" class="headerlink" title="谈霏玉屑"></a>谈霏玉屑</h2><p><em>谈话时美好的言辞像玉的碎末纷纷洒落一样。言谈美妙，滔滔不绝</em></p><h2 id="话如连珠"><a href="#话如连珠" class="headerlink" title="话如连珠"></a>话如连珠</h2><p>​p><h2 id="音容并茂"><a href="#音容并茂" class="headerlink" title="音容并茂"></a>音容并茂</h2><p><em>说话时语言和表情都十分丰富</em></p><h2 id="钳口结舌"><a href="#钳口结舌" class="headerlink" title="钳口结舌"></a>钳口结舌</h2><p><em>形容理屈词穷说不出话来。也指慑于淫威不敢讲话</em></p><h2 id="三缄其口"><a href="#三缄其口" class="headerlink" title="三缄其口"></a>三缄其口</h2><p><em>形容说话谨慎。现在也形容不肯或不敢开口</em></p><hr><blockquote><p>善谈和健谈不同，健谈者能使四座生春，但多少有点霸道，善谈者尽管舌灿莲花，但总还要给别人留些说话的机会。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>梗</title>
      <link href="/%E6%A2%97.html"/>
      <url>/%E6%A2%97.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="df3bed18e79639a00c58eaa8fa452a73c16ab9a76af713393f49259efaccb1a4">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64ed98635955ff914dfbe25cec259276237b1327efd81f383834728fef1e8afba3218913fdd54a9ca502f12266e02d96c73e4b1405909e55c355646e2e51b73b9f742bc5c4d026844017c1dc1abe0abe8bea7c41a7c76dc1afe6ba4195fec5c19a83645fb43d5557e4dbc1fd1daf4aa92eca4f845ab0e200d8842c98ee8844ba1cce4296a2e3a093b360e07ba70232606fb6d97b982797749578b7bff718a2c49a400505c02804fecf4852e59eb989047f7040747d993d76d2fccc2af366cb4554c3fb72670dc960c443d846d2c8b1da204fca1365e30c5e2a26801c953f464cd05868f15c5dc65a67c8481e2b8eb7d702c7450cd52879cac4a0f2aa8026d338a07c982410a69d0eb4b5a8b779a645d62f698658d57e334ef419c84191f548c90a2b785b903e75ee355f52536c7c98b0e6b4874dad713407673cbf63275982a776f59ca77e0618aa1658b11160ea1c31586b9d31ae9f45d7da7984b3730c0a42f0dfee8d97213a49244c24eb340e35153494038e474b470c6872b947ac0cdda064903e677795ce58803122c7b7f7f4374eb6dcb7ec352362a4812aff6859ef4f9e9cab3b79cdb46b2b804fa348fcf3d54d6fdf62836da2d062bc82a208fd05815a5ee69a58dd9eacbda59cd39df3762be0e5b9e0c9b86f91796c08ef78b370de14ef24f0ea62d46daccdfbaf952ea85a08ad1322aebfdd91fd22c538cd147f21efcacaabd8ca5a433696d0112154908a7845437cc6a25ca29b257bea477f7a0824121d98a7bb25cdd1c4d942b4c205ff3a5446a1504eb2b281dd4e7733c10324049ba6d86cede0ed85cd019a536f9998f23164cb102e5b5a93127bba2c7c7d5db00506a59adb8ff88cff518a9272c8508aa12c4fd0cf60ba6348f593c1c53b0b983080f599424fa593dbe7c963a9dce73d3ecc3ad43546644cbe19c781f86057636f31ca09c76dbf399308126d1be4669bc620d764b3ae69aa26f131a97bd72bcdd5c5eace8d17aa583d12f51c1c830d1e1836cf2c2859b548369b57db98c7c8d633d32811c17359366e2f9dc974f716c0453cbd100906ff8363f664135df0e8fca985e9fb8223d7134febb14720f4ee9023ea63174d1d7ee7a322c7df7b3f7b3b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 梗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-第一章</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%80%E7%AB%A0(%E5%88%9D%E8%AF%86%20Hadoop%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF).html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%80%E7%AB%A0(%E5%88%9D%E8%AF%86%20Hadoop%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF).html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="初识-Hadoop-大数据技术"><a href="#初识-Hadoop-大数据技术" class="headerlink" title="初识 Hadoop 大数据技术"></a>初识 Hadoop 大数据技术</h2><h3 id="大数据技术概述"><a href="#大数据技术概述" class="headerlink" title="大数据技术概述"></a>大数据技术概述</h3><h4 id="大数据产生的背景"><a href="#大数据产生的背景" class="headerlink" title="大数据产生的背景"></a>大数据产生的背景</h4><p><em>计算机诞生; 互联网发展</em>  </p><h4 id="大数据的定义"><a href="#大数据的定义" class="headerlink" title="大数据的定义"></a>大数据的定义</h4><p>“大数据”是一个<strong>涵盖多种技术的概念</strong>，简单地说，是指无法在一定时间内用常规软件工具对<br>其内容进行抓取、管理和处理的数据集合。     </p><p>IBM 公司将“大数据”理念定义为 4 个 V，即<strong>大量化( Volume）、多样化（ Variety）、快速化（ Velocity）及由此产生的价值（ Value）</strong>。  </p><ul><li>数据体量大：大数据的数据量从 TB 级别跃升到 PB 级别。</li><li>数据类型多：大数据的数据类型包括前文提到的网络日志、视频、图片、地理位置信息等。</li><li>处理速度快： 1 秒定律。最后这一点是大数据技术与传统数据挖掘技术的本质区别。</li><li>价值密度低：以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒  </li></ul><h4 id="大数据技术的发展"><a href="#大数据技术的发展" class="headerlink" title="大数据技术的发展"></a>大数据技术的发展</h4><p><em>大数据技术要面对的基本问题，也是最核心的问题，就是海量数据<strong>如何可靠存储和如何高效计算的问题</strong>。</em>  </p><h3 id="Google-的“三驾马车”"><a href="#Google-的“三驾马车”" class="headerlink" title="Google 的“三驾马车”"></a>Google 的“三驾马车”</h3><h4 id="GFS-的思想"><a href="#GFS-的思想" class="headerlink" title="GFS 的思想"></a>GFS 的思想</h4><p><em>论文“The Google File System”描述了一个分布式文件系统的设计思路</em></p><p><em>从交互实体上划分，分布式文件系统有两个基本组成部分，一个是<strong>客户端（ Client）</strong>，一个是<strong>服务端（ Server）</strong>.</em>  </p><p><em>如果客户端把文件上传到服务端，但是服务端的硬盘不够大，怎么办？ 多加硬盘，或多增加主机</em> </p><p><em>数据的存储可靠性怎么保证？ 数据冗余存储</em> </p><p><em>主机或硬盘如何被管理起来?  管理节点</em></p><p><em>GFS 解决这些问题的思路是这样的，增加一个<strong>管理节点</strong>，去管理这些存放数据的主机。存放数据的主机称为<strong>数据节点</strong>。 而上传的文件会按<strong>固定的大小进行分块</strong>。 数据节点上保存的是<strong>数据块</strong>，而非独立的文件。数据块<strong>冗余度默认是 3</strong>。<strong>上传文件时</strong>，客户端先连接管理节点，管理节点生成数据块的信息，包括文件名、文件大小、上传时间、数据块的位置信息等。这些信息称为文件的元信息，它会保存在管理节点。客户端获取这些元信息之后，就开始把数据块一个个上传。客户端把数据块先上传到第一个数据节点，然后，在管理节点的管理下，通过水平复制，复制几份数据块到其他节点，最终达到冗余度的要求。<strong>水平复制需要考虑两个要求：可靠性、可用性</strong>.</em></p><p><a href="https://imgchr.com/i/YSnxw4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnxw4.md.png" alt="YSnxw4.md.png" border="0"></a><br><a href="https://imgchr.com/i/YSnvmF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnvmF.md.png" alt="YSnvmF.md.png" border="0"></a></p><h4 id="MapReduce-的思想"><a href="#MapReduce-的思想" class="headerlink" title="MapReduce 的思想"></a>MapReduce 的思想</h4><p><em>PageRank，即网页排名，又称网页级别</em>  </p><p><em>MapReduce 采用“分而治之”的思想，把对大规模数据集的操作，分发给一个主节点管理下的各个子节点共同完成，然后整合各个子节点的中间结果，得到最终的计算结果。简而言之， MapReduce 就是“分散任务，汇总结果”</em> </p><h4 id="BigTable的思想"><a href="#BigTable的思想" class="headerlink" title="BigTable的思想"></a>BigTable的思想</h4><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vmware安装tools</title>
      <link href="/vmware%E5%AE%89%E8%A3%85tools.html"/>
      <url>/vmware%E5%AE%89%E8%A3%85tools.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="安装vmware-tools"><a href="#安装vmware-tools" class="headerlink" title="安装vmware tools"></a>安装vmware tools</h2><h3 id="选择Linux-iso"><a href="#选择Linux-iso" class="headerlink" title="选择Linux.iso"></a>选择Linux.iso</h3><p><em>关闭vmware重新打开，编辑虚拟系统设置-&gt;CD/DVD-&gt;浏览-&gt;选择linux.iso(在vmware的安装路径下，可以复制到虚拟系统镜像文件iso处-&gt;确定)</em></p><p><a href="https://imgchr.com/i/J4YiTO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4YiTO.md.png" alt="J4YiTO.png" border="0"></a></p><h3 id="安装Tools"><a href="#安装Tools" class="headerlink" title="安装Tools"></a>安装Tools</h3><p><em>打开虚拟系统-&gt;桌面-&gt;左侧导航栏的CD/DVD-&gt;复制里面的tools压缩包到桌面-&gt;右键选择extract here-&gt;打开解压后文件-&gt;shift + 右键-&gt;open terminal -&gt; sudo ./vmware-install.pl-&gt;根据提示成功安装</em></p><p><a href="https://imgchr.com/i/J4tgPg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tgPg.md.png" alt="J4tgPg.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/J4tR2j" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tR2j.md.png" alt="J4tR2j.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/J4t2GQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4t2GQ.md.png" alt="J4t2GQ.md.png" border="0"></a></p><h3 id><a href="#" class="headerlink" title></a></h3><hr><blockquote><p>随意春芳歇，王孙自可留。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析-方程组</title>
      <link href="/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%96%B9%E7%A8%8B%E7%BB%84.html"/>
      <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%96%B9%E7%A8%8B%E7%BB%84.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h1><h2 id="高斯消去法"><a href="#高斯消去法" class="headerlink" title="高斯消去法"></a>高斯消去法</h2><p><em>难于求解或求高精度的解</em></p><h3 id="朴素的高斯消去法"><a href="#朴素的高斯消去法" class="headerlink" title="朴素的高斯消去法"></a>朴素的高斯消去法</h3><p><strong>主元</strong>：主对角线上的元素</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="消去步骤"><a href="#消去步骤" class="headerlink" title="消去步骤"></a>消去步骤</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><img src="https://s1.ax1x.com/2020/05/02/JjR2DO.png" alt="JjR2DO.png" border="0"><p><em>没有在aij的位置放零是因为后续不会用到该值，提高效率</em></p><p><em>当遇到主元为零是程序会终止</em></p><h5 id="回代或向后求解"><a href="#回代或向后求解" class="headerlink" title="回代或向后求解"></a>回代或向后求解</h5><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><p><a href="https://imgchr.com/i/JjfqAg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0"></a></p><h4 id="操作次数"><a href="#操作次数" class="headerlink" title="操作次数"></a>操作次数</h4><p><em>对消去步骤和回代步骤的计算次数进行统计</em></p><h5 id="高斯消去法中消去步骤的操作次数"><a href="#高斯消去法中消去步骤的操作次数" class="headerlink" title="高斯消去法中消去步骤的操作次数"></a>高斯消去法中消去步骤的操作次数</h5><p><em>把第一列转化为0，需要(2n+1)(n-1)次计算：</em></p><p>（1+n+n)(n-1)</p><img src="https://s1.ax1x.com/2020/04/26/JcgErR.png" alt="JcgErR.png" border="0"><p>n个方程n个未知数的消去计算，可以在2/3n^3+1/2n^2-7/6n次操作后完成</p><h6 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h6><p>O(n^3)</p><h5 id="高斯消去法中回代步骤的操作次数"><a href="#高斯消去法中回代步骤的操作次数" class="headerlink" title="高斯消去法中回代步骤的操作次数"></a>高斯消去法中回代步骤的操作次数</h5><p><a href="https://imgchr.com/i/JjfHHS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfHHS.png" alt="JjfHHS.png" border="0"></a></p><img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0"><p><em>n个 方 程 n个 未 知 数 的 三 角 形 系 统 的 回 代 过 程 可 以 使 用 n^2次操作完成</em></p><p>*<em>当n很大时，消去步骤的低阶可以省略; 换 句 话 说 ， 对 于 “，在 复 杂 度 计 算 中 的 低 阶 项 对 于 算 法 运 行 时 间 的 估 计 没 有 大的 影 响 ，并可以忽略.  *</em></p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Jj7rPU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/Jj7rPU.png" alt="Jj7rPU.png" border="0"></a></p><h2 id="高斯主元素消去法"><a href="#高斯主元素消去法" class="headerlink" title="高斯主元素消去法"></a>高斯主元素消去法</h2><p><em>由高斯消去法知道在消元过程中可能出现的情况主元素为0，这时消去法将无法进行；即使主元素但很小时，用其作除数，会导致其他元素数量级的严重增长和舍入误差的扩散，最后也使得计算解不可靠</em></p><h2 id="LU分解"><a href="#LU分解" class="headerlink" title="LU分解"></a>LU分解</h2><h3 id="LU分解过程"><a href="#LU分解过程" class="headerlink" title="LU分解过程"></a>LU分解过程</h3><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p><em>在高斯消去法的基础上把0的位置写上倍数</em></p><p><a href="https://imgchr.com/i/JorlBF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorlBF.md.png" alt="JorlBF.png" border="0"></a></p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p><code>Amn = Lm1U1n + Lm2U2n + ...+ Umn</code></p><p><a href="https://imgchr.com/i/JorhDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorhDS.md.jpg" alt="JorhDS.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/Jorfu8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/Jorfu8.md.jpg" alt="Jorfu8.md.jpg" border="0"></a></p><h3 id="使用LU分解回代"><a href="#使用LU分解回代" class="headerlink" title="使用LU分解回代"></a>使用LU分解回代</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ax &#x3D; b</span><br><span class="line">LUx &#x3D; b</span><br><span class="line">Ly &#x3D; b 法二可以直接最初把b也写上，最后b这一列就是y</span><br><span class="line">Ux &#x3D; y</span><br><span class="line">求出x</span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><h2 id="追赶法"><a href="#追赶法" class="headerlink" title="追赶法"></a>追赶法</h2><p><em>在一些实际问题中， 例如解常微分方程边值问题，热传导方程以及船体数学放样中建立三次样条函数等，都会要求解系数矩阵为<strong>对角占优的三对角线方程组</strong>.</em></p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><img src="https://s1.ax1x.com/2020/05/06/YAFFk4.jpg" alt="YAFFk4.jpg" border="0"><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><img src="https://s1.ax1x.com/2020/05/06/YAiQWn.jpg" alt="YAiQWn.jpg" border="0"><img src="https://s1.ax1x.com/2020/05/06/YAVNGQ.jpg" alt="YAVNGQ.jpg" border="0"><h2 id="向量与矩阵的范数"><a href="#向量与矩阵的范数" class="headerlink" title="向量与矩阵的范数"></a>向量与矩阵的范数</h2><h3 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h3><p><a href="https://imgchr.com/i/YWr0s0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWr0s0.png" alt="YWr0s0.png" border="0"></a></p><h3 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h3><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/YGw0y9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGw0y9.md.png" alt="YGw0y9.png" border="0"></a></p><p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwOSg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwOSg.md.jpg" alt="YGwOSg.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwbY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwbY8.jpg" alt="YGwbY8.jpg" border="0"></a></p><h3 id="条件数"><a href="#条件数" class="headerlink" title="条件数"></a>条件数</h3><p><em>与矩阵的范数有关</em></p><img src="https://s1.ax1x.com/2020/05/11/YGsegO.md.jpg" alt="YGsegO.jpg" border="0"><h2 id="线性方程组的迭代方法"><a href="#线性方程组的迭代方法" class="headerlink" title="线性方程组的迭代方法"></a>线性方程组的迭代方法</h2><h3 id="雅可比迭代法-Jacobi"><a href="#雅可比迭代法-Jacobi" class="headerlink" title="雅可比迭代法(Jacobi)"></a>雅可比迭代法(Jacobi)</h3><p><em>1.将线性方程组的第i个方程中的第i个变量用其它n-1个变量表示出来，生成迭代方程组</em></p><p><em>2.取定初始向量，依次迭代</em></p><p>3.</p><p><a href="https://imgchr.com/i/YWrfQ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWrfQ1.md.png" alt="YWrfQ1.png" border="0"></a></p><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p><a href="https://imgchr.com/i/YWHe2t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHe2t.md.jpg" alt="YWHe2t.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YWHZ8I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHZ8I.md.jpg" alt="YWHZ8I.md.jpg" border="0"></a></p><h3 id="Jacobi迭代格式矩阵形式"><a href="#Jacobi迭代格式矩阵形式" class="headerlink" title="Jacobi迭代格式矩阵形式"></a>Jacobi迭代格式矩阵形式</h3><p><a href="https://imgchr.com/i/tpx4OO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tpx4OO.md.jpg" alt="tpx4OO.jpg" border="0"></a></p><h3 id="高斯-赛德尔迭代法-Gauss-Seidel"><a href="#高斯-赛德尔迭代法-Gauss-Seidel" class="headerlink" title="高斯-赛德尔迭代法(Gauss-Seidel)"></a>高斯-赛德尔迭代法(Gauss-Seidel)</h3><p><em>对雅克比迭代法的改进，用以求出的新值代替旧值</em></p><h4 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/YWHCDO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHCDO.md.jpg" alt="YWHCDO.jpg" border="0"></a></p><h3 id="逐次超松弛迭代法-SOR"><a href="#逐次超松弛迭代法-SOR" class="headerlink" title="逐次超松弛迭代法(SOR)"></a>逐次超松弛迭代法(SOR)</h3><p><em>针对收敛速度慢的情况。逐次超松弛迭代法是高斯-赛德尔的特殊情况</em></p><p><a href="https://imgchr.com/i/YoZEgH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/20/YoZEgH.md.jpg" alt="YoZEgH.jpg" border="0"></a></p><h3 id="迭代法的收敛性"><a href="#迭代法的收敛性" class="headerlink" title="迭代法的收敛性"></a>迭代法的收敛性</h3><p><strong>定理3.11(迭代法的基本定理)：</strong> <em>对任意初值x(0)均收敛的充分必要条件是p(B) &lt; 1</em></p><p><strong>推论 2</strong>：</p><p><em>Jacobi迭代法收敛的充分必要条件是：</em></p><p><em>Gauss-Seidel迭代法收敛的充分必要条件是：</em></p><p><em>SOR</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数值分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-第四章</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p><em>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。<br>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？</em></p><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><p><em>让网络负责可靠交付</em></p><p><em>使用面向连接的通信方式</em></p><p><em>通信之前先建立虚电路 (Virtual Circuit)，以保证双方通信所需的一切网络资源</em></p><p><em>H1 发送给 H2 的所有分组都沿着同一条虚电路传送</em></p><p><strong>分组，存储转发，虚拟连接</strong></p><h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><p><em>网络层向上只提供<strong>简单灵活的、无连接的、尽最大努力交付</strong>的数据报服务</em></p><p><em>网络层不提供服务质量的承诺</em></p><h4 id="尽最大努力交付"><a href="#尽最大努力交付" class="headerlink" title="尽最大努力交付"></a>尽最大努力交付</h4><p><em>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉</em></p><p><em>如果主机（即端系统）中的进程之间的<strong>通信需要是可靠的，那么就由网络的主机中的运输层</strong>负责可靠交付（包括差错处理、流量控制等）</em></p><p><em>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用</em></p><p><em>H1 发送给 H2</em>的<strong>分组可能沿着不同路径传送</strong></p><h3 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h3><p><a href="https://imgchr.com/i/JRyK1g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRyK1g.md.png" alt="JRyK1g.png" border="0"></a></p><h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><p><em>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一</em></p><p>与 IP 协议配套使用的还有三个协议：</p><ul><li>地址解析协议 ARP<pre><code>(Address Resolution Protocol)</code></pre></li><li>网际控制报文协议 ICMP<br>   (Internet Control Message Protocol)</li><li>网际组管理协议 IGMP<br>   (Internet Group Management Protocol)</li></ul><p><a href="https://imgchr.com/i/JR6GKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JR6GKH.png" alt="JR6GKH.png" border="0"></a></p><h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>将网络互相连接起来要使用一些中间设备。<br>中间设备又称为<strong>中间系统或中继 (relay)系统</strong>。<br>有以下五种不同的中间设备：</p><ul><li>物理层中继系统：转发器 (repeater)。 </li><li>数据链路层中继系统：网桥 或 桥接器 (bridge)。</li><li>网络层中继系统：路由器 (router)。</li><li>网桥和路由器的混合物：桥路器 (brouter)。</li><li>网络层以上的中继系统：网关 (gateway)。</li></ul><h4 id="网络互连使用路由器"><a href="#网络互连使用路由器" class="headerlink" title="网络互连使用路由器"></a>网络互连使用路由器</h4><p><em>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。<br>网关由于比较复杂，目前使用得较少。<br><strong>网络互连都是指用路由器进行网络互连和路由选择</strong>。<br>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关</em></p><h4 id="互连网络与虚拟互连网络"><a href="#互连网络与虚拟互连网络" class="headerlink" title="互连网络与虚拟互连网络"></a>互连网络与虚拟互连网络</h4><img src="https://s1.ax1x.com/2020/04/27/JRcqXQ.png" alt="JRcqXQ.png" border="0"><h4 id="虚拟互连网络的意义"><a href="#虚拟互连网络的意义" class="headerlink" title="虚拟互连网络的意义"></a>虚拟互连网络的意义</h4><p><strong>所谓虚拟互连网络也就是逻辑互连网络，利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络</strong>。</p><p>使用 IP 协议的虚拟互连网络可简称为<strong>IP 网</strong></p><p><strong>使用虚拟互连网络的好处是</strong>：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节</p><p>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的互联网 (Internet)</p><h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3><h4 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="IP 地址及其表示方法"></a>IP 地址及其表示方法</h4><p><em>IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是<strong>唯一的32 位</strong> 的标识符</em></p><p><em>IP 地址现在由<strong>互联网名字和数字分配机构</strong>ICANN (Internet Corporation for Assigned Names and Numbers)进行分配</em></p><h4 id="IP-地址的编址方法"><a href="#IP-地址的编址方法" class="headerlink" title="IP 地址的编址方法"></a>IP 地址的编址方法</h4><ul><li>分类IP 地址。这是最基本的编址方法，在 1981 年就通过了相应的标准协议。</li><li>子网的划分。这是对最基本的编址方法的改进，其标准[RFC 950] 在 1985 年通过。</li><li>构成超网。这是比较新的无分类编址方法。1993 年提出后很快就得到推广应用</li></ul><h5 id="分类-IP-地址"><a href="#分类-IP-地址" class="headerlink" title="分类 IP 地址"></a>分类 IP 地址</h5><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）</p><img src="https://s1.ax1x.com/2020/04/27/JR24Rf.png" alt="JR24Rf.png" border="0"><p><em>总位数是确定的，而网络号和主机号不是确定长度</em></p><p><a href="https://imgchr.com/i/JRo5rV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRo5rV.png" alt="JRo5rV.png" border="0"></a></p><p><em>主机号有多少位就有2^(n-m)-2个主机，网络号就有2^(32-n)-2个网段</em></p><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><a href="https://imgchr.com/i/JRoxr6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoxr6.png" alt="JRoxr6.png" border="0"></a><br><a href="https://imgchr.com/i/JRovKx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRovKx.png" alt="JRovKx.png" border="0"></a><br><a href="https://imgchr.com/i/JRoXx1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoXx1.png" alt="JRoXx1.png" border="0"></a></p><h3 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h3><p><em>IP 地址与硬件地址是不同的地址</em></p><p>从层次的角度看：</p><ul><li>硬件地址（或物理地址）是数据链路层和物理层使用的地址</li><li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址（称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的）</li></ul><p><a href="https://imgchr.com/i/J5Ni9g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5Ni9g.md.png" alt="J5Ni9g.png" border="0"></a></p><p><strong>对应abce类IP地址的默认子网掩码是把网络号全部写为1，主机号为0</strong></p><p><strong>路由器的 IP 地址并不出现在 IP 数据报的首部中</strong></p><p><strong>在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报</strong></p><img src="https://s1.ax1x.com/2020/05/17/YRV6xK.png" alt="YRV6xK.png" border="0"><h3 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h3><p><em>已经知道了一个机器（主机或路由器）的IP地址，如何找出其相应的硬件地址？地址解析协议 ARP 就是用来解决这样的问题的</em></p><p><strong>ARP 作用：从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址</strong></p><p>ARP IP-&gt;MAC</p><p>RARP MAC-&gt;IP</p><h4 id="ARP-高速缓存的作用"><a href="#ARP-高速缓存的作用" class="headerlink" title="ARP 高速缓存的作用"></a>ARP 高速缓存的作用</h4><p><em>存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量</em></p><p>TTL:地址映射有效时间</p><p>发送广播：前面全为1，后面全为1</p><p>发送ARP为广播传输，响应为1对1</p><p><a href="https://imgchr.com/i/J5y8JI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5y8JI.md.png" alt="J5y8JI.png" border="0"></a></p><p>以太网1500字节  数据1480</p><p>生存时间：防止无限传输</p><h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3><p><a href="https://imgchr.com/i/J5HxAI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5HxAI.md.png" alt="J5HxAI.png" border="0"></a></p><p><em>IP数据报=首部+数据部分</em></p><p><em>首部=固定部分+可变部分</em></p><p><em>固定部分=20字节，是IP数据报必须有的部分；可选字段长度可变</em></p><p><strong>版本</strong>：<em>IP协议版本</em></p><p><strong>首部长度</strong>：<em>占四个位，最大15个单位，单位为4个字节；所以首部长度最多60个字节</em></p><p><strong>总长度</strong>：<em>16位；单位为字节；数据报最长长度为2^16 - 1=65535字节</em></p><p><strong>总长度必须不超过最大传送单元 MTU（我们规定不能超过1500字节）</strong></p><p><strong>标识</strong>：<em>同一数据包的切片相同</em></p><p><strong>标志</strong>：<em>占3位；目前只有前两位有意义。<br>标志字段的最低位是 <strong>MF</strong> (More Fragment)。MF =1 表示后面“还有分片”。MF =0 表示最后一个分片。<br>标志字段中间的一位是 <strong>DF</strong> (Don’t Fragment) 。只有当 DF = 0 时才允许分片</em></p><p><strong>片偏移</strong>：<em>占13 位，指出：较长的分组在分片后<br>某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位</em></p><p><strong>生存时间</strong>：<em>生存时间——占8 位，记为 TTL (Time To Live)，<br>指示数据报在网络中可通过的路由器数的最大值</em></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/J5OPgK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OPgK.md.png" alt="J5OPgK.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5OC36" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OC36.md.png" alt="J5OC36.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5O99x" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5O99x.md.png" alt="J5O99x.md.png" border="0"></a></p><h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><h3 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h3><h3 id="无分类编址-CIDR-考点"><a href="#无分类编址-CIDR-考点" class="headerlink" title="无分类编址 CIDR(考点)"></a>无分类编址 CIDR(考点)</h3><img src="https://s1.ax1x.com/2020/05/11/YGuunJ.png" alt="1" border="0"><img src="https://s1.ax1x.com/2020/05/11/YGumX4.png" alt="2" border="0"><img src="https://s1.ax1x.com/2020/05/11/YGuKB9.png" alt="3" border="0"><img src="https://s1.ax1x.com/2020/05/11/YGuVpT.png" alt="4" border="0"><h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><h3 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h3><h4 id="RIP-协议的三个特点"><a href="#RIP-协议的三个特点" class="headerlink" title="RIP 协议的三个特点"></a>RIP 协议的三个特点</h4><p>(1) 仅和相邻路由器交换信息。<br>(2) 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。<br>(3) 按固定的时间间隔交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</p><h3 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h3><h4 id="三个要点"><a href="#三个要点" class="headerlink" title="三个要点"></a>三个要点</h4><ul><li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li><li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<br>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 </li><li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</li></ul><h3 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h3><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p><em>比IPv4地址数扩大2^96倍</em></p><h3 id="IPv6-的地址"><a href="#IPv6-的地址" class="headerlink" title="IPv6 的地址"></a>IPv6 的地址</h3><h4 id="冒号十六进制记法"><a href="#冒号十六进制记法" class="headerlink" title="冒号十六进制记法"></a>冒号十六进制记法</h4><h4 id="零省略"><a href="#零省略" class="headerlink" title="零省略"></a>零省略</h4><h4 id="零压缩"><a href="#零压缩" class="headerlink" title="零压缩"></a>零压缩</h4><p><em>只能零压缩一次</em></p><h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/YNGoHP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNGoHP.md.png" alt="YNGoHP.md.png" border="0"></a><br><a href="https://imgchr.com/i/YNG7Af" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNG7Af.md.png" alt="YNG7Af.md.png" border="0"></a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站点击流数据分析</title>
      <link href="/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%8C%E4%B8%9A%E9%83%A8%E7%BD%B2-%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E6%B5%81%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html"/>
      <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%8C%E4%B8%9A%E9%83%A8%E7%BD%B2-%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E6%B5%81%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="网站点击流数据分析项目业务背景"><a href="#网站点击流数据分析项目业务背景" class="headerlink" title="网站点击流数据分析项目业务背景"></a>网站点击流数据分析项目业务背景</h1><h2 id="什么是点击流数据"><a href="#什么是点击流数据" class="headerlink" title="什么是点击流数据"></a>什么是点击流数据</h2><h3 id="WEB访问日志"><a href="#WEB访问日志" class="headerlink" title="WEB访问日志"></a>WEB访问日志</h3><p><em>即指用户访问网站时的所有访问、浏览、点击行为数据</em></p><h4 id="日志的生成渠道："><a href="#日志的生成渠道：" class="headerlink" title="日志的生成渠道："></a>日志的生成渠道：</h4><ul><li><p>是网站的web服务器所记录的web访问日志；</p></li><li><p>是通过在页面嵌入自定义的js代码来获取用户的所有访问行为（比如鼠标悬停的位置，点击的页面组件等），然后通过ajax请求到后台记录日志；这种方式所能采集的信息最全面；</p></li><li><p>通过在页面上埋点1像素的图片，将相关页面访问信息请求到后台记录日志；</p></li></ul><h4 id="日志数据内容详述"><a href="#日志数据内容详述" class="headerlink" title="日志数据内容详述"></a>日志数据内容详述</h4><p>在实际操作中，有以下几个方面的数据可以被采集：</p><ul><li><p><strong>访客的系统属性特征</strong>。比如所采用的操作系统、浏览器、域名和访问速度等。</p></li><li><p><strong>访问特征</strong>。包括停留时间、点击的URL等。</p></li><li><p><strong>来源特征</strong>。包括网络内容信息类型、内容分类和来访URL等。</p></li><li><p><strong>产品特征</strong>。包括所访问的产品编号、产品类别、产品颜色、产品价格、产品利润、产品数量和特价等级等</p></li></ul><h3 id="点击流数据模型"><a href="#点击流数据模型" class="headerlink" title="点击流数据模型"></a>点击流数据模型</h3><p><code>点击流这个概念更注重用户浏览网站的整个流程，网站日志中记录的用户点击就像是图上的“点”，而点击流更像是将这些“点”串起来形成的“线”</code></p><p><strong>点击流数据是由网站日志中整理得到的</strong></p><h4 id="点击流模型生成"><a href="#点击流模型生成" class="headerlink" title="点击流模型生成"></a>点击流模型生成</h4><p><em>点击流数据在具体操作上是由散点状的点击日志数据梳理所得，从而，点击数据在数据建模时应该存在两张模型表（Pageviews和visits)</em></p><img src="https://s1.ax1x.com/2020/04/23/JaZcUU.png" alt="JaZcUU.png" border="0"><p><em>这就是点击流模型。当WEB日志转化成点击流数据的时候，很多网站分析度量的计算变得简单了，这就是点击流的“魔力”所在。基于点击流数据我们可以统计出许多常见的网站分析度量</em></p><h2 id="网站流量数据分析的意义"><a href="#网站流量数据分析的意义" class="headerlink" title="网站流量数据分析的意义"></a>网站流量数据分析的意义</h2><p><em>网站流量统计分析，可以帮助网站管理员、运营人员、推广人员等实时获取网站流量信息，并从流量来源、网站内容、网站访客特性等多方面提供网站分析的数据依据。从而<strong>帮助提高网站流量，提升网站用户体验，让访客更多的沉淀下来变成会员或客户，通过更少的投入获取最大化的收入</strong>.</em></p><p><strong>终极目标是：改善网站(电商、社交、电影、小说)的运营，获取更高投资回报率（ROI）</strong></p><h3 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h3><ul><li><p>辅助改进网络的拓扑设计，提高性能</p></li><li><p>在有高度相关性的节点之间安排快速有效的访问路径</p></li><li><p>帮助企业更好地设计网站主页和安排网页内容</p></li></ul><h3 id="业务上"><a href="#业务上" class="headerlink" title="业务上"></a>业务上</h3><ul><li><p>帮助企业改善市场营销决策，如把广告放在适当的Web页面上。</p></li><li><p>优化页面及业务流程设计，提高流量转化率。</p></li><li><p>帮助企业更好地根据客户的兴趣来安排内容。</p></li><li><p>帮助企业对客户群进行细分，针对不同客户制定个性化的促销策略等</p></li></ul><h2 id="如何进行网站流量分析"><a href="#如何进行网站流量分析" class="headerlink" title="如何进行网站流量分析"></a>如何进行网站流量分析</h2><p><em>流量分析整体来说是一个内涵非常丰富的体系，其整体过程是一个金字塔结构</em></p><h3 id="流量分析模型举例"><a href="#流量分析模型举例" class="headerlink" title="流量分析模型举例"></a>流量分析模型举例</h3><h4 id="网站流量质量分析"><a href="#网站流量质量分析" class="headerlink" title="网站流量质量分析"></a>网站流量质量分析</h4><p><em>流量并不是越多越好，应该更加看重流量的质量，换句话来说就是流量可以为我们带来多少收入</em></p><img src="https://s1.ax1x.com/2020/04/23/JauesA.png" alt="JauesA.png" border="0"><h4 id="网站流量多维度细分"><a href="#网站流量多维度细分" class="headerlink" title="网站流量多维度细分"></a>网站流量多维度细分</h4><p><em>细分是指通过不同维度对指标进行分割，查看同一个指标在不同维度下的表现，进而找出有问题的那部分指标，对这部分指标进行优化</em></p><img src="https://s1.ax1x.com/2020/04/23/JauuZt.png" alt="JauuZt.png" border="0"><h4 id="网站内容及导航分析"><a href="#网站内容及导航分析" class="headerlink" title="网站内容及导航分析"></a>网站内容及导航分析</h4><p><em>对于所有网站来说，页面都可以被划分为三个类别: 导航页，功能页， 内容页</em></p><p><em>比如从内容导航分析中，以下两类行为就是网站运营者不希望看到的行为：</em></p><img src="https://s1.ax1x.com/2020/04/23/Jauli8.png" alt="Jauli8.png" border="0"><h4 id="网站转化及漏斗分析"><a href="#网站转化及漏斗分析" class="headerlink" title="网站转化及漏斗分析"></a>网站转化及漏斗分析</h4><p><em>所谓<strong>转化</strong>，即网站业务流程中的一个封闭渠道，引导用户按照流程最终实现业务目标（比如商品成交）；而<strong>漏斗模型</strong>则是指进入渠道的用户在各环节递进过程中逐渐流失的形象描述；</em></p><p><a href="https://imgchr.com/i/JaMg56" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMg56.png" alt="JaMg56.png" border="0"></a><br><a href="https://imgchr.com/i/JaMcUx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMcUx.png" alt="JaMcUx.png" border="0"></a></p><h3 id="流量分析常见指标"><a href="#流量分析常见指标" class="headerlink" title="流量分析常见指标"></a>流量分析常见指标</h3><h4 id="基础分析（PV-IP-UV）"><a href="#基础分析（PV-IP-UV）" class="headerlink" title="基础分析（PV,IP,UV）"></a>基础分析（PV,IP,UV）</h4><p><em>page view: 同一个人一天浏览一个网站的多少网页，重复的只算一条</em></p><p><em>unique visitor: 同一天，只记录第一次进入网站的具有独立IP的访问者，重复访问不计</em></p><p><em>PR：pageRank，网页的级别技术。用于标识一个网站的流行程度。来源google</em></p><p><strong>Ø</strong> <strong><em>\</em>趋势分析**</strong>：根据选定的时段，提供网站流量数据，通过流量趋势变化形态，为您分析网站访客的访问规律、网站发展状况提供参考。</p><p><strong>Ø</strong> <strong><em>\</em>对比分析**</strong>：根据选定的两个对比时段，提供网站流量在时间上的纵向对比报表，帮您发现网站发展状况、发展规律、流量变化率等。</p><p><strong>Ø</strong> <strong><em>\</em>当前在线**</strong>：提供当前时刻站点上的访客量，以及最近15分钟流量、来源、受访、访客变化情况等，方便用户及时了解当前网站流量状况。</p><p><strong>Ø</strong> <strong><em>\</em>访问明细**</strong>：提供最近7日的访客访问记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照来源、搜索词等条件进行筛选。 通过访问明细，用户可以详细了解网站流量的累计过程，从而为用户快速找出流量变动原因提供最原始、最准确的依据</p><h4 id="来源分析"><a href="#来源分析" class="headerlink" title="来源分析"></a>来源分析</h4><p><strong><em>\</em>来源分类**</strong></p><p><strong><em>\</em>搜索引擎**</strong></p><p><strong><em>\</em>搜索词**</strong></p><p><strong><em>\</em>最近7日的访客搜索记录**</strong></p><p><strong><em>\</em>来路域名**</strong></p><p><strong><em>\</em>来路页面**</strong></p><p><strong><em>\</em>来源升降榜**</strong></p><h4 id="受访分析"><a href="#受访分析" class="headerlink" title="受访分析"></a>受访分析</h4><p><strong><em>\</em>受访域名**</strong></p><p><strong><em>\</em>受访页面**</strong></p><p><strong><em>\</em>受访升降榜**</strong></p><p><strong><em>\</em>热点图**</strong></p><p><strong><em>\</em>用户视点**</strong></p><p><strong><em>\</em>访问轨迹**</strong></p><h4 id="访客分析"><a href="#访客分析" class="headerlink" title="访客分析"></a>访客分析</h4><p><strong><em>\</em>地区运营商**</strong></p><p><strong><em>\</em>终端详情**</strong></p><p><strong><em>\</em>新老访客**</strong></p><p><strong><em>\</em>忠诚度**</strong></p><p><strong><em>\</em>活跃度**</strong></p><h4 id="转化路径分析"><a href="#转化路径分析" class="headerlink" title="转化路径分析"></a>转化路径分析</h4><h5 id="转化定义"><a href="#转化定义" class="headerlink" title="转化定义"></a>转化定义</h5><p><em>访客在您的网站完成了某项您期望的活动，记为一次转化，如注册或下载</em></p><h5 id="路径分析"><a href="#路径分析" class="headerlink" title="路径分析"></a>路径分析</h5><p><em>根据设置的特定路线，监测某一流程的完成转化情况，算出每步的转换率和流失率数据，如注册流程，购买流程等</em></p><h2 id="整体技术流程及架构"><a href="#整体技术流程及架构" class="headerlink" title="整体技术流程及架构"></a>整体技术流程及架构</h2><h3 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h3><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><p><em>将各服务器上生成的点击流日志通过实时或批量的方式汇聚到HDFS文件系统中</em></p><p><em>当然，一个综合分析系统，数据源可能不仅包含**</em>*点击流数据*<strong><em>，还有数据库中的</em></strong>*业务数据*<strong><em>（如用户信息、商品信息、订单信息等）及对分析有益的</em></strong>*外部数据****</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p><em>通过mapreduce程序对采集到的点击流数据进行预处理，比如清洗，格式整理，滤除脏数据等</em></p><h4 id="数据入库"><a href="#数据入库" class="headerlink" title="数据入库"></a>数据入库</h4><p><em>将预处理之后的数据导入到HIVE仓库中相应的库和表中</em></p><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><p><em>项目的核心内容，即根据需求开发ETL分析语句，得出各种统计结果</em></p><h4 id="数据展现"><a href="#数据展现" class="headerlink" title="数据展现"></a>数据展现</h4><p><em>将分析所得数据进行可视化</em></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><h3 id="生成log表"><a href="#生成log表" class="headerlink" title="生成log表"></a>生成log表</h3><h3 id="生成pageview表"><a href="#生成pageview表" class="headerlink" title="生成pageview表"></a>生成pageview表</h3><h4 id="WeblogPreProcess类"><a href="#WeblogPreProcess类" class="headerlink" title="WeblogPreProcess类"></a>WeblogPreProcess类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mr.pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogBean;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理原始日志，过滤出真实pv请求</span></span><br><span class="line"><span class="comment"> * 转换时间格式</span></span><br><span class="line"><span class="comment"> * 对缺失字段填充默认值</span></span><br><span class="line"><span class="comment"> * 对记录标记valid和invalid</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcessMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//用来存储网站url分类数据</span></span><br><span class="line">Set&lt;String&gt; pages = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">Text k = <span class="keyword">new</span> Text();</span><br><span class="line">NullWritable v = NullWritable.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从外部加载网站url分类数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">pages.add(<span class="string">"/about"</span>);</span><br><span class="line">pages.add(<span class="string">"/black-ip-list/"</span>);</span><br><span class="line">pages.add(<span class="string">"/cassandra-clustor/"</span>);</span><br><span class="line">pages.add(<span class="string">"/finance-rhive-repurchase/"</span>);</span><br><span class="line">pages.add(<span class="string">"/hadoop-family-roadmap/"</span>);</span><br><span class="line">pages.add(<span class="string">"/hadoop-hive-intro/"</span>);</span><br><span class="line">pages.add(<span class="string">"/hadoop-zookeeper-intro/"</span>);</span><br><span class="line">pages.add(<span class="string">"/hadoop-mahout-roadmap/"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">String line = value.toString();</span><br><span class="line">WebLogBean webLogBean = WebLogParser.parser(line);</span><br><span class="line"><span class="comment">// 过滤js/图片/css等静态资源</span></span><br><span class="line">WebLogParser.filtStaticResource(webLogBean, pages);</span><br><span class="line"><span class="comment">/* if (!webLogBean.isValid()) return; */</span></span><br><span class="line">k.set(webLogBean.toString());</span><br><span class="line">context.write(k, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">job.setJarByClass(WeblogPreProcess<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setMapperClass(WeblogPreProcessMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FileInputFormat.setInputPaths(job, new Path(args[0]));</span></span><br><span class="line"><span class="comment">// FileOutputFormat.setOutputPath(job, new Path(args[1]));</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/input"</span>));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/output"</span>));</span><br><span class="line"></span><br><span class="line">job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebLogParser类"><a href="#WebLogParser类" class="headerlink" title="WebLogParser类"></a>WebLogParser类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"dd/MMM/yyyy:HH:mm:ss"</span>, Locale.US);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.US);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebLogBean <span class="title">parser</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">WebLogBean webLogBean = <span class="keyword">new</span> WebLogBean();</span><br><span class="line">String[] arr = line.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (arr.length &gt; <span class="number">11</span>) &#123;</span><br><span class="line">webLogBean.setRemote_addr(arr[<span class="number">0</span>]);</span><br><span class="line">webLogBean.setRemote_user(arr[<span class="number">1</span>]);</span><br><span class="line">String time_local = formatDate(arr[<span class="number">3</span>].substring(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>==time_local) time_local=<span class="string">"-invalid_time-"</span>;</span><br><span class="line">webLogBean.setTime_local(time_local);</span><br><span class="line">webLogBean.setRequest(arr[<span class="number">6</span>]);</span><br><span class="line">webLogBean.setStatus(arr[<span class="number">8</span>]);</span><br><span class="line">webLogBean.setBody_bytes_sent(arr[<span class="number">9</span>]);</span><br><span class="line">webLogBean.setHttp_referer(arr[<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果useragent元素较多，拼接useragent</span></span><br><span class="line"><span class="keyword">if</span> (arr.length &gt; <span class="number">12</span>) &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">11</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">sb.append(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">webLogBean.setHttp_user_agent(sb.toString());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">webLogBean.setHttp_user_agent(arr[<span class="number">11</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Integer.parseInt(webLogBean.getStatus()) &gt;= <span class="number">400</span>) &#123;<span class="comment">// 大于400，HTTP错误</span></span><br><span class="line">webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"-invalid_time-"</span>.equals(webLogBean.getTime_local()))&#123;</span><br><span class="line">webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> webLogBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filtStaticResource</span><span class="params">(WebLogBean bean, Set&lt;String&gt; pages)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pages.contains(bean.getRequest())) &#123;</span><br><span class="line">bean.setValid(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> df2.format(df1.parse(time_local));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebLogBean类"><a href="#WebLogBean类" class="headerlink" title="WebLogBean类"></a>WebLogBean类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对接外部数据的层，表结构定义最好跟外部数据源保持一致</span></span><br><span class="line"><span class="comment"> * 术语： 贴源表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;<span class="comment">// 判断数据是否合法</span></span><br><span class="line"><span class="keyword">private</span> String remote_addr;<span class="comment">// 记录客户端的ip地址</span></span><br><span class="line"><span class="keyword">private</span> String remote_user;<span class="comment">// 记录客户端用户名称,忽略属性"-"</span></span><br><span class="line"><span class="keyword">private</span> String time_local;<span class="comment">// 记录访问时间与时区</span></span><br><span class="line"><span class="keyword">private</span> String request;<span class="comment">// 记录请求的url与http协议</span></span><br><span class="line"><span class="keyword">private</span> String status;<span class="comment">// 记录请求状态；成功是200</span></span><br><span class="line"><span class="keyword">private</span> String body_bytes_sent;<span class="comment">// 记录发送给客户端文件主体内容大小</span></span><br><span class="line"><span class="keyword">private</span> String http_referer;<span class="comment">// 用来记录从那个页面链接访问过来的</span></span><br><span class="line"><span class="keyword">private</span> String http_user_agent;<span class="comment">// 记录客户浏览器的相关信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">boolean</span> valid,String remote_addr, String remote_user, String time_local, String request, String status, String body_bytes_sent, String http_referer, String http_user_agent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.valid = valid;</span><br><span class="line"><span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line"><span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line"><span class="keyword">this</span>.time_local = time_local;</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line"><span class="keyword">this</span>.status = status;</span><br><span class="line"><span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line"><span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line"><span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRemote_addr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> remote_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_addr</span><span class="params">(String remote_addr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRemote_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> remote_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_user</span><span class="params">(String remote_user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTime_local</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.time_local;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime_local</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.time_local = time_local;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.status = status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBody_bytes_sent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> body_bytes_sent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody_bytes_sent</span><span class="params">(String body_bytes_sent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHttp_referer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> http_referer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_referer</span><span class="params">(String http_referer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHttp_user_agent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> http_user_agent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_user_agent</span><span class="params">(String http_user_agent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> valid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValid</span><span class="params">(<span class="keyword">boolean</span> valid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.valid = valid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="keyword">this</span>.valid);</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_addr());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_user());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getTime_local());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRequest());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getStatus());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getBody_bytes_sent());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_referer());</span><br><span class="line">sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_user_agent());</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.valid = in.readBoolean();</span><br><span class="line"><span class="keyword">this</span>.remote_addr = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.remote_user = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.time_local = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.request = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.status = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.body_bytes_sent = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.http_referer = in.readUTF();</span><br><span class="line"><span class="keyword">this</span>.http_user_agent = in.readUTF();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">out.writeBoolean(<span class="keyword">this</span>.valid);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==remote_addr?<span class="string">""</span>:remote_addr);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==remote_user?<span class="string">""</span>:remote_user);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==time_local?<span class="string">""</span>:time_local);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==request?<span class="string">""</span>:request);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==status?<span class="string">""</span>:status);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==body_bytes_sent?<span class="string">""</span>:body_bytes_sent);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==http_referer?<span class="string">""</span>:http_referer);</span><br><span class="line">out.writeUTF(<span class="keyword">null</span>==http_user_agent?<span class="string">""</span>:http_user_agent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成visit表"><a href="#生成visit表" class="headerlink" title="生成visit表"></a>生成visit表</h3><hr><blockquote><p>世上所有的惊喜和好运，等于你的人品乘以你的努力。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据行业项目部署实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据行业项目部署实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop实验课-hdfs</title>
      <link href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hdfs.html"/>
      <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hdfs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="HDFS实验"><a href="#HDFS实验" class="headerlink" title="HDFS实验"></a>HDFS实验</h1><h2 id="通过Java-API操作HDFS"><a href="#通过Java-API操作HDFS" class="headerlink" title="通过Java API操作HDFS"></a>通过Java API操作HDFS</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="导入hdfs的jar包"><a href="#导入hdfs的jar包" class="headerlink" title="导入hdfs的jar包"></a>导入hdfs的jar包</h4><p>1.<em>将/usr/…/share/common下；/usr/…/share/common/lib下；/usr/…/share/hdfs/下的jar包导入到hadoop项目下的lib</em></p><p>2.<em>eclipse的项目单击右键build path-&gt;configure..-&gt;libraries-&gt;external jars</em></p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h2 id="shell命令访问HDFS"><a href="#shell命令访问HDFS" class="headerlink" title="shell命令访问HDFS"></a>shell命令访问HDFS</h2><h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hdfs </tag>
            
            <tag> 实验课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java相关异常</title>
      <link href="/java%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html"/>
      <url>/java%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="在eclipse里创建java项目，里面没有src"><a href="#在eclipse里创建java项目，里面没有src" class="headerlink" title="在eclipse里创建java项目，里面没有src"></a>在eclipse里创建java项目，里面没有src</h2><p><em>创建项目时不要选择<strong>use project folder as root for sources and class files</strong>.</em></p><p>##</p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop实验课-mapreduce</title>
      <link href="/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-mapreduce.html"/>
      <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-mapreduce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="MapReduce实验"><a href="#MapReduce实验" class="headerlink" title="MapReduce实验"></a>MapReduce实验</h2><h3 id="wordcount"><a href="#wordcount" class="headerlink" title="wordcount"></a>wordcount</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h5><p><em>1.将mapreduce的jar包复制到eclipse的hadoop项目的lib里</em></p><p><em>/usr/hadoop/…/share/mapreduce/</em></p><p><em>/home/…/hadoop/lib/</em></p><p><em>2.打开eclipse，在项目上单击右键，build path -&gt; configure ..-&gt;libraries-&gt;add external jars</em></p><h4 id="编写wordcount的map-和reduce-函数"><a href="#编写wordcount的map-和reduce-函数" class="headerlink" title="编写wordcount的map()和reduce()函数"></a>编写wordcount的map()和reduce()函数</h4><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String data = value.toString();</span><br><span class="line">String[] words = data.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(String w: words) &#123;</span><br><span class="line">context.write(<span class="keyword">new</span> Text(w), <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k3, Iterable&lt;IntWritable&gt; v3,</span></span></span><br><span class="line"><span class="function"><span class="params">Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(IntWritable v : v3) &#123;</span><br><span class="line">total += v.get();</span><br><span class="line">&#125;</span><br><span class="line">context.write(k3, <span class="keyword">new</span> IntWritable(total));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(wordCountMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">job.setMapperClass(wordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">job.setReducerClass(wordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各部门员工薪水总和"><a href="#各部门员工薪水总和" class="headerlink" title="各部门员工薪水总和"></a>各部门员工薪水总和</h3><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p><em>序列化是一种将内存中Java对象转化为其它可存储文件或可跨越计算机传输数据流的一种技术</em></p><h4 id="Employee"><a href="#Employee" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//创建员工对象</span></span><br><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">e.setMgr(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">e.setComm(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k2.set(e.getDeptno());</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">context.write(k2,e); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">total += v.getSal();</span><br><span class="line">&#125;</span><br><span class="line">value.set(total);</span><br><span class="line"><span class="comment">//输出：          部门号   总额</span></span><br><span class="line">context.write(k3, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建一个job</span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p><em>Mapper 划分数据的过程称作为分区（ Partition），负责实现划分的数据的类称为 Partitioner。</em></p><p><em>MapReduce 默认的 Partitioner 是 HashPartitioner</em></p><h4 id="partitioner"><a href="#partitioner" class="headerlink" title="partitioner"></a>partitioner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 建立自己的分区规则：根据员工的部门号进行分区</span></span><br><span class="line"><span class="comment">* 根据 Map 的输出 k2 v2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalPatitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* numPartition 参数：建立多少个分区</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(IntWritable k2, Employee v2, <span class="keyword">int</span> numPartition)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如何建立分区</span></span><br><span class="line"><span class="keyword">if</span>(v2.getDeptno() == <span class="number">10</span>)&#123;</span><br><span class="line"><span class="comment">//放入 1 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v2.getDeptno() == <span class="number">20</span>)&#123;</span><br><span class="line"><span class="comment">//放入 2 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//放入 0 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>%numPartition;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Employee-1"><a href="#Employee-1" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//创建员工对象</span></span><br><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">e.setMgr(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">e.setComm(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k2.set(e.getDeptno());</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">context.write(k2,e); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reducer-1"><a href="#Reducer-1" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">total += v.getSal();</span><br><span class="line">&#125;</span><br><span class="line">value.set(total);</span><br><span class="line"><span class="comment">//输出：          部门号   总额</span></span><br><span class="line">context.write(k3, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建一个job</span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 指定任务的分区规则;指定建立几个分区</span></span><br><span class="line">job.setPartitionerClass(salaryTotalPatitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><a href="https://imgchr.com/i/YntMjJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntMjJ.md.png" alt="YntMjJ.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/YntKc4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntKc4.md.png" alt="YntKc4.md.png" border="0"></a></p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>又要排序又要序列化直接继承WritableComparable类; 这个接口继承自writable和comparable接口</em></p><h4 id="Main-2"><a href="#Main-2" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建一个 job</span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(EmployeeSortMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的 mapper 和输出的类型 k2 v2</span></span><br><span class="line">job.setMapperClass(EmployeeSortMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的输入和输出的路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="comment">//7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Employee</span>,</span></span><br><span class="line"><span class="class"><span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//创建员工对象</span></span><br><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">e.setMgr(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">e.setComm(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">context.write(e, NullWritable.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Employee-2"><a href="#Employee-2" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="comment">//1．若要把 Employee 作为 key2，则需要实现序列化</span></span><br><span class="line"><span class="comment">//2．员工对象为 Employee 类，可被排序</span></span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Employee [empno="</span> + empno + <span class="string">", ename="</span> + ename + <span class="string">", sal="</span> + sal + <span class="string">",</span></span><br><span class="line"><span class="string">deptno="</span> + deptno + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 多个列的排序： select * from emp order by deptno,sal;</span></span><br><span class="line"><span class="comment">//首先按照 deptno 排序</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.deptno &gt; o.getDeptno())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.deptno &lt; o.getDeptno())&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 deptno 相等，按照 sal 排序</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.sal &gt;= o.getSal())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>人穷没入群，言轻莫劝人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验课 </tag>
            
            <tag> mapreduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析-牛顿法</title>
      <link href="/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B.html"/>
      <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h2 id="不动点迭代"><a href="#不动点迭代" class="headerlink" title="不动点迭代"></a>不动点迭代</h2><h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><img src="https://s1.ax1x.com/2020/04/26/J6OiVO.png" alt="J6OiVO.png" border="0"><h3 id="简化牛顿法"><a href="#简化牛顿法" class="headerlink" title="简化牛顿法"></a>简化牛顿法</h3><p><a href="https://imgchr.com/i/JQVzCD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVzCD.md.png" alt="JQVzCD.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVXE6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVXE6.md.png" alt="JQVXE6.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVv4O" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVv4O.md.png" alt="JQVv4O.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVjUK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVjUK.md.png" alt="JQVjUK.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVLHx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVLHx.md.png" alt="JQVLHx.md.png" border="0"></a></p><h3 id="牛顿下山法"><a href="#牛顿下山法" class="headerlink" title="牛顿下山法"></a>牛顿下山法</h3><h3 id="重根情形"><a href="#重根情形" class="headerlink" title="重根情形"></a>重根情形</h3><h2 id="弦截法"><a href="#弦截法" class="headerlink" title="弦截法"></a>弦截法</h2><h3 id="单点弦截法"><a href="#单点弦截法" class="headerlink" title="单点弦截法"></a>单点弦截法</h3><h3 id="两点弦截法"><a href="#两点弦截法" class="headerlink" title="两点弦截法"></a>两点弦截法</h3><img src="https://s1.ax1x.com/2020/04/26/J6LDgI.png" alt="J6LDgI.png" border="0"><p><a href="https://blog.csdn.net/qq_40991687/article/details/102004533" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/qq_40991687/article/details/102004533</a></p><hr><blockquote><p>能够摄取必要营养的人要比吃得很多的人更健康，同样地，真正的学者往往不是读了很多书的人，而是读了有用的书的人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数值分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛顿法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter使用笔记</title>
      <link href="/Tkinter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/Tkinter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-第五章Mapreduce</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%BA%94%E7%AB%A0Mapreduce.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%BA%94%E7%AB%A0Mapreduce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><h3 id="MapReduce是什么？"><a href="#MapReduce是什么？" class="headerlink" title="MapReduce是什么？"></a>MapReduce是什么？</h3><p><em>Mapreduce是一种简化并行计算的编程模型，用于进行大数据量的计算</em></p><p><a href="https://imgchr.com/i/GjRro8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRro8.md.png" alt="GjRro8.md.png" border="0"></a></p><h3 id="MapReduce设计思想"><a href="#MapReduce设计思想" class="headerlink" title="MapReduce设计思想"></a>MapReduce设计思想</h3><p><a href="https://imgchr.com/i/GjRDdf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRDdf.md.png" alt="GjRDdf.md.png" border="0"></a></p><h3 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h3><h4 id="易于编程"><a href="#易于编程" class="headerlink" title="易于编程"></a>易于编程</h4><h4 id="良好的扩展性"><a href="#良好的扩展性" class="headerlink" title="良好的扩展性"></a>良好的扩展性</h4><h4 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h4><h4 id="擅长对PB级以上海量数据进行离线处理"><a href="#擅长对PB级以上海量数据进行离线处理" class="headerlink" title="擅长对PB级以上海量数据进行离线处理"></a>擅长对PB级以上海量数据进行离线处理</h4><h3 id="MapReduce不擅长的场景"><a href="#MapReduce不擅长的场景" class="headerlink" title="MapReduce不擅长的场景"></a>MapReduce不擅长的场景</h3><h4 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h4><p><em>MapReduce无法像MySQL一样，在毫秒或秒级内返回结果</em></p><h4 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h4><p><em>流式计算的输入数据是动态的，而MapReduce的输入数据集是静态的，动态变化</em></p><h4 id="DAG-有向图-计算"><a href="#DAG-有向图-计算" class="headerlink" title="DAG(有向图)计算"></a>DAG(有向图)计算</h4><h2 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h2><h3 id="初识MapReduce模型"><a href="#初识MapReduce模型" class="headerlink" title="初识MapReduce模型"></a>初识MapReduce模型</h3><p><a href="https://imgchr.com/i/GjhcWD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhcWD.md.png" alt="GjhcWD.png" border="0"></a></p><p><a href="https://imgchr.com/i/GjhLlQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhLlQ.md.png" alt="GjhLlQ.png" border="0"></a></p><p><a href="https://imgchr.com/i/Gj4f9U" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj4f9U.md.png" alt="Gj4f9U.png" border="0"></a></p><p><em>MR原语:  相同的key为一组，调用一次reduce方法，迭代计算这一组数据</em></p><h3 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h3><p><a href="https://imgchr.com/i/Gj5Vgg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5Vgg.md.png" alt="Gj5Vgg.png" border="0"></a></p><h3 id="MapReduce模型要点"><a href="#MapReduce模型要点" class="headerlink" title="MapReduce模型要点"></a>MapReduce模型要点</h3><p><a href="https://imgchr.com/i/Gj5cKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5cKH.md.png" alt="Gj5cKH.png" border="0"></a></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p><a href="https://imgchr.com/i/Gj7nzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj7nzT.md.png" alt="Gj7nzT.png" border="0"></a></p><p><a href="https://imgchr.com/i/Gj72Sf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj72Sf.md.png" alt="Gj72Sf.png" border="0"></a></p><p><a href="https://imgchr.com/i/GjHgE9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjHgE9.md.png" alt="GjHgE9.png" border="0"></a></p><p><a href="https://imgchr.com/i/Gjq4mD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjq4mD.md.png" alt="Gjq4mD.png" border="0"></a></p><p><a href="https://imgchr.com/i/GjvqL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjvqL6.md.png" alt="GjvqL6.png" border="0"></a></p><p><a href="https://imgchr.com/i/GjxUp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjxUp9.md.png" alt="GjxUp9.png" border="0"></a></p><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p><a href="https://imgchr.com/i/Gjzi9J" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjzi9J.png" alt="Gjzi9J.png" border="0"></a><br><a href="https://imgchr.com/i/GjzCh4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjzCh4.md.png" alt="GjzCh4.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/GvSbyn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSbyn.md.png" alt="GvSbyn.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvSqLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSqLq.md.png" alt="GvSqLq.md.png" border="0"></a></p><h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p><em>序列化和反序列化</em></p><p><a href="https://imgchr.com/i/Gvpr7V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gvpr7V.md.png" alt="Gvpr7V.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvpykT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvpykT.md.png" alt="GvpykT.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/Gv9oKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9oKs.md.png" alt="Gv9oKs.md.png" border="0"></a><br><a href="https://imgchr.com/i/Gv9Trn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9Trn.md.png" alt="Gv9Trn.md.png" border="0"></a></p><p><a href="https://imgchr.com/i/GvCtMj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvCtMj.md.png" alt="GvCtMj.png" border="0"></a></p><h2 id="MapReduce进阶"><a href="#MapReduce进阶" class="headerlink" title="MapReduce进阶"></a>MapReduce进阶</h2><h3 id="mapreduce的输入格式"><a href="#mapreduce的输入格式" class="headerlink" title="mapreduce的输入格式"></a>mapreduce的输入格式</h3><h4 id="物理分片"><a href="#物理分片" class="headerlink" title="物理分片"></a>物理分片</h4><p><em>分割会严格按照设定大小128m或字数分割，可能会造成不符合逻辑的分割</em></p><h4 id="逻辑分片"><a href="#逻辑分片" class="headerlink" title="逻辑分片"></a>逻辑分片</h4><h5 id="inputFormat提供一下两个功能："><a href="#inputFormat提供一下两个功能：" class="headerlink" title="inputFormat提供一下两个功能："></a>inputFormat提供一下两个功能：</h5><ul><li>数据切分，获得SplitInput（逻辑切片） ，FileInputFormat.getSplits()获取到。</li><li>为Mapper提供输入数据</li></ul><p><em>有多少个SplitInput，就有多少个Mapper<br>TextInputFormat 是默认InputFormat</em></p><img src="https://s1.ax1x.com/2020/04/26/JgmCzn.png" alt="JgmCzn.png" border="0"><p><em>getSplits 方法负责将一个大数据逻辑分成许多片，但每个分片只是一个逻辑上的定义，仅是提供了一个如何将数据分片的方法，并没有物理上的独立存储</em></p><p> <em>createRecordReader 方法返回一个 RecordReader 对象，实现了类似的迭代器功能，将某个InputSplit 解析成一个个 key/value 对</em></p><h5 id="定位记录边界"><a href="#定位记录边界" class="headerlink" title="定位记录边界"></a>定位记录边界</h5><p><em>为了能识别一条完整的记录，应该添加一些同步标示，如 TextInputFormat 的标示是换行符</em>  </p><h4 id="InputFormat-接口实现类"><a href="#InputFormat-接口实现类" class="headerlink" title="InputFormat 接口实现类"></a>InputFormat 接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnVXt.png" alt="JgnVXt.png" border="0"><h3 id="mapreduce的输出格式"><a href="#mapreduce的输出格式" class="headerlink" title="mapreduce的输出格式"></a>mapreduce的输出格式</h3><h4 id="outputFormat接口"><a href="#outputFormat接口" class="headerlink" title="outputFormat接口"></a>outputFormat接口</h4><p><em>OutputFormat主要用于描述输出数据的格式，通过RecordWriter能够将用户提供的key/value对写入特定格式的文件中</em></p><p>（1）TextOutputFormt调用toString()方法把它们转换为字符串<br>（2）NullWritable来省略输出的key或value</p><h4 id="outputFormat接口实现类"><a href="#outputFormat接口实现类" class="headerlink" title="outputFormat接口实现类"></a>outputFormat接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnRAO.png" alt="JgnRAO.png" border="0"><p><strong>排序</strong>：<em>排序是针对map输出里面的key，没会对value排序；map输出和reduce输入都有排序；作用是提高效率</em></p><h3 id="分区Partition"><a href="#分区Partition" class="headerlink" title="分区Partition"></a>分区Partition</h3><h4 id="Partition定义："><a href="#Partition定义：" class="headerlink" title="Partition定义："></a>Partition定义：</h4><p>Mapper任务划分数据的过程称作Partition。<br>负责实现数据的类称作Partitioner，默认的分区是Hash分区 (Hash Partition)</p><h4 id="Partition作用："><a href="#Partition作用：" class="headerlink" title="Partition作用："></a>Partition作用：</h4><p>将map阶段产生的所有&lt;key,value&gt;对分配给不同的Reducer 处理，可以将Reduce阶段的处理负载进行分摊</p><p><strong>Partition的数量决定Reducer的数量</strong></p><h4 id="Hash分区基本原理"><a href="#Hash分区基本原理" class="headerlink" title="Hash分区基本原理"></a>Hash分区基本原理</h4><p><em>计算某个值的hash值，如果结果相同，则放入同一个分区</em></p><p><em>Hash分区的作用：把数据打散进行存放，最终是为了避免热块</em></p><h4 id="合并Combiner"><a href="#合并Combiner" class="headerlink" title="合并Combiner"></a>合并Combiner</h4><p><em>减少Mapper输出到Reduce的数据量，缓解网络传输瓶颈，提高reducer的执行效率</em></p><p><em>需要注意的问题：一定要谨慎使用Combiner<br>有些情况不能使用Combiner —-&gt;  如：求平均值<br>保证引入Combiner以后，不能改变原来的逻辑</em></p><p><a href="https://imgchr.com/i/JfsWTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsWTI.md.png" alt="JfsWTI.md.png" border="0"></a><br><a href="https://imgchr.com/i/JfsR0A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsR0A.md.png" alt="JfsR0A.md.png" border="0"></a></p><hr><blockquote><p>如果今天后悔昨天，那么明天就会后悔今天。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mapreduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythonn文件在命令行包导入问题</title>
      <link href="/pythonn%E6%96%87%E4%BB%B6%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8C%85%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98.html"/>
      <url>/pythonn%E6%96%87%E4%BB%B6%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8C%85%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="命令行下执行python找不包的解决方法"><a href="#命令行下执行python找不包的解决方法" class="headerlink" title="命令行下执行python找不包的解决方法"></a>命令行下执行python找不包的解决方法</h2><p>1.为什么会出现这样的问题?</p><p>包是向下搜索机制.</p><p>2.为什么idle中执行没有报找不到包的问题?</p><p>python搜索机制,在idle中是以项目为根路径, 所以它的搜索机制是从项目根路径开始向下搜索.</p><p>3.为什么命令行执行时会报找不到包的错误?</p><p>这是因为命令行执行的时候,是以当前执行的.py文件所在目录级别的下一级开始搜索. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"></span><br><span class="line">.......web(一级目录)</span><br><span class="line"></span><br><span class="line">       ......sett(二级目录)</span><br><span class="line"></span><br><span class="line">       .......views(二级目录)</span><br><span class="line"></span><br><span class="line">       ......service.py(二级目录)  (这个命令行执行文件.  命令行运行时,提示找不到views以及sett中的包.)</span><br><span class="line"></span><br><span class="line">             .......包搜索级别(三级目录)</span><br></pre></td></tr></table></figure><p><strong>法一</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">#将根目录加入sys.path中,解决命令行找不到包的问题</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">curPath = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">rootPath = os.path.split(curPath)[<span class="number">0</span>]</span><br><span class="line">sys.path.append(rootPath)</span><br><span class="line"><span class="comment">#########################################################</span></span><br></pre></td></tr></table></figure><p><em>以上增加到哪个级别要,根据实际情况,灵活运用.  其实目的就是指定一个顶级目录.来克服向下搜索包的问题.</em></p><p><strong>法二</strong></p><p><em>在web平级别新建一个py文件. 然后将要执行的py文件导入进去即可.(并不需要作其它操作,看实际情况.)</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> service</span><br></pre></td></tr></table></figure><p><strong>法三</strong></p><p><em>cmd命令行进行项目根目录，采用相对路径去执行该py文件</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd</span><br><span class="line">cd d:\test_project</span><br><span class="line">./main.py  <span class="comment">#相对执行</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/yhleng/p/10330994.html" target="_blank" rel="external nofollow noopener noreferrer"><strong>原文</strong></a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包导入 </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
      <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h2><table><thead><tr><th align="center">字符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">\d</td><td align="center">数字</td></tr><tr><td align="center">\w</td><td align="center">数字或字母</td></tr><tr><td align="center">.</td><td align="center">任意单个字符(除了换行符)</td></tr><tr><td align="center">*</td><td align="center">零个或多个字符</td></tr><tr><td align="center">+</td><td align="center">至少一个字符</td></tr><tr><td align="center">？</td><td align="center">零个或一个字符</td></tr><tr><td align="center">{n}</td><td align="center">前面的表达式匹配n次</td></tr><tr><td align="center">{n,m}</td><td align="center"></td></tr><tr><td align="center">\s</td><td align="center">匹配一个空格</td></tr><tr><td align="center">\</td><td align="center">转义字符</td></tr><tr><td align="center">|</td><td align="center">或</td></tr><tr><td align="center">^</td><td align="center">（匹配一行字符串的开头）^\d以数字开头</td></tr><tr><td align="center">$</td><td align="center">（匹配一行字符串的结尾）\d$以数字结尾</td></tr><tr><td align="center">[0-9a-zA-z\_]</td><td align="center">一个数字，字符或下划线</td></tr><tr><td align="center">[0-9a-zA-z\_]+</td><td align="center">如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等</td></tr><tr><td align="center">\A</td><td align="center">匹配字符串的开头</td></tr><tr><td align="center">\Z</td><td align="center">匹配字符串的结尾</td></tr><tr><td align="center">.*</td><td align="center">贪婪匹配</td></tr><tr><td align="center">.*？</td><td align="center">非贪婪匹配(在结尾时可能不会匹配)</td></tr></tbody></table><p><em>下划线是特殊字符需要转义</em></p><p><em>字母大写代表与小写意思相反</em></p><p><em>使用r’…’可以规避特殊字符</em></p><h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><em>会从字符串的<strong>开头</strong>进行匹配，成功返回<strong>Match</strong>对象；失败返回<strong>None</strong>.</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(正则表达式，字符串，[修饰符])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">'hello, 122323 world _ this is a regex demo'</span></span><br><span class="line">result = re.match(<span class="string">r'^he.*(/d+).*demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="comment"># 因为.*为贪婪匹配，会尽可能多的匹配</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">'http://weibo.com/comment/KERGCN'</span></span><br><span class="line">result1 = re.match(<span class="string">r'http.*?comment(.*?)'</span>, content) <span class="comment"># 在结尾尽可能少的匹配</span></span><br><span class="line">result2 = re.match(<span class="string">r'http.*?/(.*?)/KERGCN'</span>, content)</span><br><span class="line">print(result1.group(<span class="number">1</span>))</span><br><span class="line">print(result2.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comment</span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table><thead><tr><th align="center">修饰符名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">re.I</td><td align="center">匹配对大小写不敏感</td></tr><tr><td align="center">re.L</td><td align="center"></td></tr><tr><td align="center">re.M</td><td align="center"></td></tr><tr><td align="center">re.S</td><td align="center">使.匹配任意字符</td></tr><tr><td align="center">re.U</td><td align="center"></td></tr><tr><td align="center">re.S</td><td align="center"></td></tr></tbody></table><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><em>从字符串中寻找是否有匹配的片段；然后返回第一个匹配的结果</em></p><p><em>要注意绝大部分的html文本都会包含大量的换行符，所以尽量加上re.S修饰符，避免出现匹配不到的问题</em></p><h3 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h3><p><em>用于把一个反复用的正则表达式生成对象</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(regex)</span><br><span class="line">patter.search(<span class="string">'....'</span>)</span><br></pre></td></tr></table></figure><h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><h4 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(patter, string, flag=<span class="number">0</span>) <span class="comment"># 返回列表</span></span><br></pre></td></tr></table></figure><h4 id="re-split"><a href="#re-split" class="headerlink" title="re.split()"></a>re.split()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer()"></a>re.finditer()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = re.finditer(pattern, string, flag=<span class="number">0</span>) <span class="comment"># 生成正则表达式匹配结果的生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><strong>使用（）</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result.group(<span class="number">0</span>) <span class="comment"># 获取的是原字符串</span></span><br><span class="line">result.group(NO.) <span class="comment"># 获取对应第几个子串</span></span><br><span class="line">result.groups() <span class="comment"># 返回生成的子串元组</span></span><br></pre></td></tr></table></figure><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p><em>正则表达式默认都是尽可能多的匹配</em></p><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p><em>在后面加一个?</em></p><p>/d+?</p><p>.*?</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip命令</title>
      <link href="/pip%E5%91%BD%E4%BB%A4.html"/>
      <url>/pip%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --timeout 8000 package</span><br></pre></td></tr></table></figure><h3 id="使用镜像安装"><a href="#使用镜像安装" class="headerlink" title="使用镜像安装"></a>使用镜像安装</h3><h4 id="使用国内镜像源"><a href="#使用国内镜像源" class="headerlink" title="使用国内镜像源"></a>使用国内镜像源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; --trusted-host pypi.douban.com</span><br><span class="line">这个是豆瓣源</span><br><span class="line">--trusted-host pypi.douban.com 这是为了获得ssl证书的认证，要不然会报错</span><br></pre></td></tr></table></figure><p><strong>国内镜像源</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">清华：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">阿里云：http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">华中理工大学：http:&#x2F;&#x2F;pypi.hustunique.com&#x2F;</span><br><span class="line"></span><br><span class="line">山东理工大学：http:&#x2F;&#x2F;pypi.sdutlinux.org&#x2F; </span><br><span class="line"></span><br><span class="line">豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><h4 id="直接修改文件"><a href="#直接修改文件" class="headerlink" title="直接修改文件"></a>直接修改文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p><em>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini。内容同上。本机win10操作系统，目录：C:\Users\DELL\AppData\Roaming\pip\pip.ini</em></p><h3 id="pip更新"><a href="#pip更新" class="headerlink" title="pip更新"></a>pip更新</h3><h4 id="python-m-pip-install-–upgrade-pip"><a href="#python-m-pip-install-–upgrade-pip" class="headerlink" title="python -m pip install –upgrade pip"></a>python -m pip install –upgrade pip</h4><h3 id="python版本替换批量迁移模块"><a href="#python版本替换批量迁移模块" class="headerlink" title="python版本替换批量迁移模块"></a>python版本替换批量迁移模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 旧版本Scripts路径下执行</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"># 新版本Scripts路径下执行 </span><br><span class="line">pip install -r requirements.txt -i 镜像源</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- requirements.txt格式</span><br><span class="line">alembic&#x3D;&#x3D;0.8.6</span><br><span class="line">bleach&#x3D;&#x3D;1.4.3</span><br><span class="line">click&#x3D;&#x3D;6.6</span><br><span class="line">dominate&#x3D;&#x3D;2.2.1</span><br><span class="line">Flask&#x3D;&#x3D;0.11.1</span><br></pre></td></tr></table></figure><h3 id="包更新"><a href="#包更新" class="headerlink" title="包更新"></a>包更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U 包名</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python乱码问题</title>
      <link href="/python%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html"/>
      <url>/python%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><p>一、在文件头部添加如下注释码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coding=&lt;encoding name&gt; 例如，可添加<span class="comment"># coding=utf-8</span></span><br></pre></td></tr></table></figure><p>二、在文件头部添加如下两行注释码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: &lt;encoding name&gt; -*- 例如，可添加# -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>三、在文件头部添加如下两行注释码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim: set fileencoding=&lt;encoding name&gt; : </span></span><br><span class="line">例如，可添加</span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br></pre></td></tr></table></figure><p>四、我们可以通过先把中文解码为unicode，然后在转化为gbk来解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'吃葡萄不吐葡萄皮儿'</span></span><br><span class="line">print(a..decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>))</span><br></pre></td></tr></table></figure><p>五、通过改变cmd命令行窗口的输出格式来解决这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chcp <span class="number">65001</span> 就是换成UTF<span class="number">-8</span>代码页</span><br><span class="line">chcp <span class="number">936</span> 可以换回默认的GBK</span><br></pre></td></tr></table></figure><p><em>但是这样就降低了脚本的兼容性，在其他环境运行的时候可能还会出现这样的错误</em></p><p>————————————————<br>版权声明：本文为CSDN博主「TTOP」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u013634961/article/details/38826189" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u013634961/article/details/38826189</a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python解析库-Xpath</title>
      <link href="/python%E8%A7%A3%E6%9E%90%E5%BA%93-Xpath.html"/>
      <url>/python%E8%A7%A3%E6%9E%90%E5%BA%93-Xpath.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f542ab6385dc4a688c65a4a2978a7b295318ddfbad2d1c5cdc690f01c0c507a5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> python解析库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据库-pymongo</title>
      <link href="/python%E6%95%B0%E6%8D%AE%E5%BA%93-pymongo.html"/>
      <url>/python%E6%95%B0%E6%8D%AE%E5%BA%93-pymongo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h2><p><strong>[官方文档](<a href="http://api.mongodb.com/python/current/api/pymongo/" target="_blank" rel="external nofollow noopener noreferrer">http://api.mongodb.com/python/current/api/pymongo/</a><br>collection.html)</strong>  </p><p><em>MongoDB是 由 C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对 象 ，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</em></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><em>安装好pymongo并启动服务</em></p><h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>) </span><br><span class="line">等同于</span><br><span class="line">client = MogoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure><h3 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db = client.数据库名</span><br><span class="line">等同于</span><br><span class="line">db = client[<span class="string">'数据库名'</span>]</span><br></pre></td></tr></table></figure><h3 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">collection = db.集合名</span><br><span class="line">等同于</span><br><span class="line">collection = db[<span class="string">'集合名'</span>]</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="insert-，-insert-one-insert-many"><a href="#insert-，-insert-one-insert-many" class="headerlink" title="insert()， insert_one(), insert_many()"></a>insert()， insert_one(), insert_many()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入单条</span></span><br><span class="line">result = collection.insert(&#123;<span class="string">''</span>:<span class="string">""</span>&#125;) <span class="comment"># 会自动为数据产生_id标识，并返回</span></span><br><span class="line"><span class="comment"># 插入多条</span></span><br><span class="line">result = collection.insert([&#123;&#125;, &#123;&#125;]) <span class="comment"># 返回_id集合</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">## python3.x推荐使用下列方式,返回的是InsertOneResult</span></span><br><span class="line">insert_one()</span><br><span class="line">insert_many()</span><br><span class="line">print(result.inserted_id)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="find-find-one"><a href="#find-find-one" class="headerlink" title="find(), find_one()"></a>find(), find_one()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="comment"># 得到一个结果</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"a"</span>:<span class="string">"b"</span>&#125;) <span class="comment"># 没有返回None</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"_id"</span>:<span class="string">"ObjectId('1325645654')"</span>&#125;)</span><br><span class="line"><span class="comment"># 得到生成器对象</span></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:<span class="string">"20"</span>&#125;) <span class="comment"># pymongo.cursor</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;) <span class="comment"># 大于20的</span></span><br></pre></td></tr></table></figure><h5 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = collection.aggregate([ &#123;<span class="string">'$sample'</span>: &#123;<span class="string">'size'</span>:<span class="number">2000</span>&#125;&#125;]) <span class="comment"># 生成生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="比较符"><a href="#比较符" class="headerlink" title="比较符"></a>比较符</h5><p><a href="https://imgchr.com/i/GyHdBV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/06/GyHdBV.png" alt="GyHdBV.png" border="0" width="600/"></a></p><h5 id="用正则表达式"><a href="#用正则表达式" class="headerlink" title="用正则表达式"></a>用正则表达式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find (&#123; <span class="string">'name'</span>: &#123;<span class="string">'$ regex'</span>:<span class="string">'^M.*'</span>&#125;&#125; )</span><br><span class="line"><span class="comment"># 这里使用$regex来指定正则匹配，人M.*代表以 M 开头的正则表达式。</span></span><br></pre></td></tr></table></figure><h5 id="功能符"><a href="#功能符" class="headerlink" title="功能符"></a>功能符</h5><img src="https://s1.ax1x.com/2020/04/06/GybBrt.png" alt="GybBrt.png" border="0" width="600/"><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = colletion.find().count()</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">results = colletion.find().sort(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure><p><em>这里我们调用pymongo.ASCENDING指定升序。如果要降序排列，可以传入pymongo.DESCENDING</em>  </p><h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><h4 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> resuLt <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>, <span class="string">'Mike'</span>]</span><br></pre></td></tr></table></figure><p><em>值得注意的是，在数据库数量非常庞大的时候，如千万、亿级别，最好不要使用大的偏移量来查询数据，因为这样很可能导致内存溢出。此时可以使用类似如下操作来查询</em>  </p><h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p><em>设置结果个数</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>]</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">condition &#x3D; &#123;&quot;d&quot;: &#39;c&#39;&#125;</span><br><span class="line">dict &#x3D; colletion.find_one(condition)</span><br><span class="line">dict[&quot;a&quot;] &#x3D; &quot;b&quot;</span><br><span class="line">collection.update(condition, dict) &#x2F;&#x2F; 覆盖以前的所有</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&#123;&#39;ok&#39;: 1, &#39;nModified*: 1, &#39;n&#39;: 1, &#39;updatedExisting&#39;: True&#125;</span><br><span class="line"></span><br><span class="line">collection.update(condition, &#123;&#39;$set&#39;: dict&#125;) &#x2F;&#x2F; 只更新存在的字段，其它字段不会删除</span><br></pre></td></tr></table></figure><p><em>update( ) 方 法 其 实 也 是 官 方 不 推 荐 使 用 的 方 法 。这 里 也 分 为 update_one()方法和updatejnany()方法，用法更加严格，它们的第二个参数需要使用$类型操作符作为字典的键名</em></p><h4 id="update-one"><a href="#update-one" class="headerlink" title="update_one()"></a>update_one()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="update-many"><a href="#update-many" class="headerlink" title="update_many()"></a>update_many()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>其返回结果是UpdateResult类型。然后分别J调用 matched_count和 modified_count<br>属性，可以获得匹配的数据条数和影响的数据条数</em></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colletion.remove(condition)</span><br></pre></td></tr></table></figure><h4 id="delete-one"><a href="#delete-one" class="headerlink" title="delete_one()"></a>delete_one()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.delete_one(condtion)</span><br></pre></td></tr></table></figure><h4 id="delete-many"><a href="#delete-many" class="headerlink" title="delete_many()"></a>delete_many()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colletion.delete_one(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$lt'</span>: <span class="number">25</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p><em>它们的返回结果 都 是 DeleteResult类型，可以调用deleted_count属性获取删除的数据条数。</em>  </p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><em>另外， PyMongo 还提供了一些组合方法，女口find_one_and_delete()、 find_one_and_replace()和find_one_and_update(),它们是查找后删除、替换和更新操作，其用法与上述方法基本一致。另外，还可以对索引进行操作，相 关 方 法 有 create_index()、 create_indexes()和 drop_index()等。</em>  </p><hr><blockquote><p>钟表可以回到起点，但永远不会回到昨天。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pymongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础</title>
      <link href="/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80.html"/>
      <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="20代表一个空格的意思"><a href="#20代表一个空格的意思" class="headerlink" title="%20代表一个空格的意思"></a>%20代表一个空格的意思</h2><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python的HTTP的请求库-Request</title>
      <link href="/python%E7%9A%84HTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93-Request.html"/>
      <url>/python%E7%9A%84HTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93-Request.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h1><p><em>常用的url请求库，是python的第三方库</em></p><p><a href="http://www.python-requests.org" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p><p><a href="http://docs.python-requests.org/zh_CN/latest" target="_blank" rel="external nofollow noopener noreferrer">中文文档</a></p><h2 id="安装Request"><a href="#安装Request" class="headerlink" title="安装Request"></a>安装Request</h2><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> request</span><br></pre></td></tr></table></figure><h3 id="wheel安装"><a href="#wheel安装" class="headerlink" title="wheel安装"></a>wheel安装</h3><p><em>wheel是 <strong>Python</strong>的一种<strong>安装包</strong>，其后缀为<strong>.whl</strong>,在网速较差的情况下可以选择<strong>下载wheel文件</strong>再安装，<strong>然后直接用p ip3命令加文件名安装即可</strong>。不过在这之前<strong>需要先安装wheel库</strong>：</em>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install wheel</span><br></pre></td></tr></table></figure><p><em>然后在<strong>PyPI</strong>上下载对应的wheel文件。进入cmd中进入下载路径：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install xxxx.whl</span><br></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p><em>如果你不想用pip来安装，或者想获取某一特定版本，可以<strong>选择下载源码</strong>安装。此种方式需要先找到此库的源码地址，然后下载下来再用命令安装</em></p><p>  <em>requests 项 目的地址是： <a href="https://github.com/kennethreitz/requests" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/kennethreitz/requests</a></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- git下载源代码</span><br><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;kennethieitz&#x2F;requests.git</span><br><span class="line"></span><br><span class="line">-- 或者使用curl下载</span><br><span class="line">curl -OL https:&#x2F;&#x2F;github.com&#x2F;kennethreitz&#x2F;:requests&#x2F;tmrba]l&#x2F;nimster</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 下载下来之后，进入目录，执行如下命令即可安装：</span><br><span class="line"><span class="built_in">cd</span> requests</span><br><span class="line">python3 setup.py install</span><br><span class="line">-- 命令执行结束后即可完成requests的安装</span><br></pre></td></tr></table></figure><h2 id="Request库使用"><a href="#Request库使用" class="headerlink" title="Request库使用"></a>Request库使用</h2><p><em><a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 请求为get请求时作出响应，返回请求头信息</em></p><p><em>*<a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a>, 请求为get请求时作出响应，返回请求头信息</em></p><h3 id="七个主要方法"><a href="#七个主要方法" class="headerlink" title="七个主要方法"></a>七个主要方法</h3><p><em>request(), get(), head(), put(), post(), patch(), delete()</em></p><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p><em>请求的链接为<a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 该网站会判断如果客户端发起的是GET请求的话，它返回相应的请求信息</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">r = requests.get(url)</span><br></pre></td></tr></table></figure><h4 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h4><p><em>用于url添加参数</em></p><p><em>通常参数都是以字典形式存储的</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">r = requests.get(url, params=data)</span><br></pre></td></tr></table></figure><h4 id="headers参数"><a href="#headers参数" class="headerlink" title="headers参数"></a>headers参数</h4><p><em>里面有的字段可以是User-Agent, Cookies, Host等</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_ll_4) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line">Chrome/52・0.2743・116 Safari/537・36'</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><h5 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h5><p><em>返回类型实际上是*</em>str类型<strong>，但是它很特殊，是 **JSON格式的</strong>，调 用 jso n()方法，就可以将返回结果是JSON格式的字符串转化为<strong>字典*</strong>  </p><p><em>如果返回结果不是JSON格式，便会出现解析错误，抛出json.decoder.JSONDecodeErrar<br>异常</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get("http://httpbin.org/get")</span><br><span class="line">print(type(r.text))</span><br><span class="line">print(r.json())</span><br><span class="line">print(type(r.json())</span><br></pre></td></tr></table></figure><h5 id="r-text"><a href="#r-text" class="headerlink" title="r.text"></a>r.text</h5><h5 id="r-status-code"><a href="#r-status-code" class="headerlink" title="r.status_code"></a>r.status_code</h5><h5 id="r-encoding和r-apparent-encoding"><a href="#r-encoding和r-apparent-encoding" class="headerlink" title="r.encoding和r.apparent_encoding"></a>r.encoding和r.apparent_encoding</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- encoding 从header中猜测的编码方式</span><br><span class="line">-- apparent_encoding 从内容分析的编码格式</span><br><span class="line">r.encodeing = r.apparent_encoding</span><br></pre></td></tr></table></figure><h5 id="r-url"><a href="#r-url" class="headerlink" title="r.url"></a>r.url</h5><h5 id="r-content"><a href="#r-content" class="headerlink" title="r.content"></a>r.content</h5><h5 id="r-history"><a href="#r-history" class="headerlink" title="r.history"></a>r.history</h5><h5 id="r-cookies"><a href="#r-cookies" class="headerlink" title="r.cookies"></a>r.cookies</h5><h4 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h4><p><em>通常是直接返回html文本或json格式数据</em></p><h4 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h4><p><em>图片、音 频 、视频这些文件本质上都是由二进制码组成的，想要抓取它们，就要拿到它们的二进制码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url) <span class="comment"># 假设这里是图片链接</span></span><br><span class="line">print(r.text) <span class="comment"># 乱码</span></span><br><span class="line">print(r.content) <span class="comment"># 二进制数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure><h4 id="内置状态码查询对象"><a href="#内置状态码查询对象" class="headerlink" title="内置状态码查询对象"></a>内置状态码查询对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> print(<span class="string">'requests Successfully'</span>)</span><br></pre></td></tr></table></figure><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br></pre></td></tr></table></figure><p><em>提交内容在form字段中</em></p><h4 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h4><p><em>方法和get响应结果差不多</em></p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text) <span class="comment"># 在请求头的files字段</span></span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="通过headers参数添加cookies"><a href="#通过headers参数添加cookies" class="headerlink" title="通过headers参数添加cookies"></a>通过headers参数添加cookies</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line">cookies = r.cookies  <span class="comment"># 可以发现它是RequestCookieJar类型。</span></span><br><span class="line">然 后 用 items。 方法将其转化为元组组成的列表</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以直接用Cookie来维持登录状态</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'.....'</span>, <span class="string">'Host'</span>: <span class="string">'...'</span>, <span class="string">'User-Agent'</span>: <span class="string">'....'</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h5 id="通过cookies模块"><a href="#通过cookies模块" class="headerlink" title="通过cookies模块"></a>通过cookies模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cookies = <span class="string">'x=xxxx;x=xxxxx;x=xxxx'</span></span><br><span class="line">jar = requests.cookies.RquestsCookieJar()</span><br><span class="line">headers = &#123;<span class="string">'Host'</span>: <span class="string">'xxx'</span>, <span class="string">'User-Agent'</span>: <span class="string">'xxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies.split(<span class="string">';'</span>):</span><br><span class="line">    key, value = cooke.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">    jar.set(key, value)</span><br><span class="line">r = requests.get(url, cookies=jar, headers=headers)</span><br></pre></td></tr></table></figure><h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><p><em>在 requests中，如果直接利用g et()或 post()等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的会话，也就是说相当于你用了两个浏览器打开了不同的页面</em></p><h5 id="请求时设置相同的Cookies"><a href="#请求时设置相同的Cookies" class="headerlink" title="请求时设置相同的Cookies"></a>请求时设置相同的Cookies</h5><p><em>这种方法比较麻烦</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例</span></span><br><span class="line">r1 = requests.post(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br><span class="line">r2 = requests.get(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br></pre></td></tr></table></figure><h5 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text) <span class="comment"># &#123;"cookies": &#123;"number": "123456789"&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h4><p><em>requests还提供证书验证。当请求有些url时，会检查ssl证书，如12306</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line">/*requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', *tls_process_server_certificate',</span></span><br><span class="line"><span class="string">'certificate verify failed')],)"</span>,)*/</span><br></pre></td></tr></table></figure><p><em>请求一个HTTPS站点，但是证书验证错误，就会报错。可以通过设置*</em>verify参数<strong>的值为</strong>False***</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code) </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">/*/usr/local/lib/python3<span class="number">.6</span>/site-packages/urllib3/connectionpool.py:<span class="number">852</span>: InsecureRequestWarning: Unverified</span><br><span class="line">HTTPS request <span class="keyword">is</span> being made. Adding certificate verification <span class="keyword">is</span> strongly advised. See:</span><br><span class="line">https://urllib3•readthedocs.io/en/latest/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">InsecureRequestWarning)</span><br><span class="line"><span class="number">200</span>*/</span><br></pre></td></tr></table></figure><p><em>不过我们发现<strong>报了一个警告</strong>，它建议我们给它指定证书。我们可以通过<strong>设置忽略警告</strong>的方式来屏蔽这个警告</em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置屏蔽</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requets.packages <span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(r.status_code) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 捕获警告到日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">logging.captureWarning(<span class="literal">True</span>)</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指定一个本地证书到客户端证书</span><br><span class="line">r &#x3D; requests.get(url, cert&#x3D;(&#39;&#x2F;path&#x2F;server.crt&#39;, &#39;&#x2F;path&#x2F;key&#39;))</span><br></pre></td></tr></table></figure><p><em>当然，我们也可以指定一个本地证书用作客户端证书，这可以是单个文件(包含密钥和证书)或<br>一个包含两个文件路径的元组。当然，上面的代码是演示实例，我 们 需 要 有crt和 key文件，并且指定它们的路径。注意，本地私有证书的key必须是解密状态，加密状态的key是不支持的</em></p><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p><em>由于频繁访问，可能会被限制IP或封IP</em></p><p><em>网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会宜接封禁客户端<br>的 I P , 导致一定时间段内无法访问</em></p><h5 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'xxxx'</span>, <span class="string">'https'</span>: <span class="string">'xxxx'</span>&#125;</span><br><span class="line">requets.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure><p><em>若代理需要使用HTTP Basic A u th ,可以使用类似<a href="http://user:password@host:port这样的语法来设置代理" rel="external nofollow noopener noreferrer" target="_blank">http://user:password@host:port这样的语法来设置代理</a></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'http://user:password@10.10.1.10:3128'</span>&#125;  </span><br><span class="line"></span><br><span class="line">requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure><h5 id="SOCKS协议代理"><a href="#SOCKS协议代理" class="headerlink" title="SOCKS协议代理"></a>SOCKS协议代理</h5><p><em>除了基本的HTTP代理外, requests还 支 持 SOCKS协议的代理</em></p><p><em>首先，需要 安 装 socks这个库</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install <span class="string">'requests[socks]'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies=&#123;<span class="string">'http'</span>:<span class="string">'socks5://user:password@host:port'</span>, <span class="string">'https'</span>: <span class="string">'socks5://user:password@host:port'</span>&#125;</span><br><span class="line">r = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure><h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><p><em>为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应，那就报错。这需要用到timeout参数</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><em>实际上，请求分为两个阶段，即 连 接 (co n n e ct)和 读 取 ( read )<br>上面设置的tim eout将用作连接和读取这二者的tim eout总和</em></p><p><em>如果要分别指定，就可以传入一个元组：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url, timeout=(<span class="number">5</span>, <span class="number">11</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure><p><em>如果想永久等待，可以直接将tim eout设置为 N on e,或者不设置直接留空，因为默认是None</em></p><hr><blockquote><p>有些路需要一个人走，有些事需要一个人扛，星光不问赶路人，时光不负有心人。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python常用用法积累</title>
      <link href="/python%E7%94%A8%E6%B3%95%E7%A7%AF%E7%B4%AF.html"/>
      <url>/python%E7%94%A8%E6%B3%95%E7%A7%AF%E7%B4%AF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><h3 id="print-“a”-“b”-“c”-sep-’-n’"><a href="#print-“a”-“b”-“c”-sep-’-n’" class="headerlink" title="print(“a”, “b”, “c”, sep=’\n’)"></a>print(“a”, “b”, “c”, sep=’\n’)</h3><p><em>a, b, c隔行打印</em></p><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><h3 id="isinstance-e-reason-socket-timeout"><a href="#isinstance-e-reason-socket-timeout" class="headerlink" title="isinstance(e.reason, socket.timeout)"></a>isinstance(e.reason, socket.timeout)</h3><p><em>是在urllib实例看到的</em></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变"><a href="#一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变" class="headerlink" title="一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变"></a>一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变</h3><h2 id><a href="#" class="headerlink" title></a></h2><hr><blockquote><p>不见黄河心不死，不撞南墙头不回。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫相关知识</title>
      <link href="/python%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html"/>
      <url>/python%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="HTTP和POST测试"><a href="#HTTP和POST测试" class="headerlink" title="HTTP和POST测试"></a>HTTP和POST测试</h2><p>​    <strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p><p>​    <strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p><h2 id="if-isinstance-e-reason-socket-timeout"><a href="#if-isinstance-e-reason-socket-timeout" class="headerlink" title="if isinstance(e.reason, socket.timeout)"></a>if isinstance(e.reason, socket.timeout)</h2><h2 id="一个标准的url格式"><a href="#一个标准的url格式" class="headerlink" title="一个标准的url格式"></a>一个标准的url格式</h2><p><strong>scheme://netloc/path;params?query#fragment</strong></p><p><em>//前面的就是scheme，代表协议；第一个/符号前面便是n e tlo c ,即域名，后面是 p a th ,即访问路径；分号;前面是param s,代表参数；问号?后面是查询条件query, 一般用作GET类型的URL；#后面是锚点，用于直接定位页面内部的下拉位置。</em></p><h2 id="网页标签属性值之间有空格，代表这是两个值"><a href="#网页标签属性值之间有空格，代表这是两个值" class="headerlink" title="网页标签属性值之间有空格，代表这是两个值"></a>网页标签属性值之间有空格，代表这是两个值</h2><p>**&lt;li class=”li li-first”xa href =”link.html”&gt;first item&lt;/ax/li&gt;  **</p><p><em>li和li-first就是两个不同的值</em></p><hr><blockquote><p>你给世界什么姿态，世界将还你什么样的人生。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python的HTTP请求库-Urllib</title>
      <link href="/python%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E5%BA%93-Urllib.html"/>
      <url>/python%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E5%BA%93-Urllib.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="使用urrlib"><a href="#使用urrlib" class="headerlink" title="使用urrlib"></a>使用urrlib</h1><p><strong><a href="https://docs.python.Org/3/library/urllib.html" target="_blank" rel="external nofollow noopener noreferrer">Urllib官方文档</a></strong></p><p><em>是python的内置的HTTP请求库</em></p><p>python3不存在urllib2的说法，统一为urllib*</p><h2 id="包括如下四个模块："><a href="#包括如下四个模块：" class="headerlink" title="包括如下四个模块："></a>包括如下四个模块：</h2><ul><li>request</li></ul><p><em>它是最基本的HTTP请求模块，可以用来模拟发送请求。就像在浏览器里输入网址<br>然后回车一样，只需要给库方法传入U R L 以及额外的参数，就可以模拟实现这个过程了</em></p><ul><li>error</li></ul><p><em>异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操<br>作以保证程序不会意外终止</em></p><ul><li>parse</li></ul><p><em>一个工具模块，提供了许多URL处理方法，比如拆分、解析 、合并等</em></p><ul><li>robotparser</li></ul><p><em>主要是用来识别网站的robots.txt文件，然后判断哪些网站可以爬，哪些网站不<br>可以爬，它其实用得比较少。</em></p><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p><em>使 用 urllib的 request模块，我们可以方便地实现请求的发送并得到响应</em></p><h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h3><p><strong><a href="https://docs.python.Org/3/library/urllib.request.htmlo" target="_blank" rel="external nofollow noopener noreferrer">urlopen()官方文档</a></strong></p><p><strong>urllib .request</strong>模 块 提 供 了 最 基 本 的 构 造HTTP请 求 的 方 法 ，利用它可以模拟浏览器的一个请求发 起 过 程 ，同 时 它 还 带 有 处 理<strong>授 权 验 证 (authenticaton )</strong>、<strong>重 定 向 (redirection)、 浏 览 器 Cookies</strong>以及其他内容 。</p><h4 id="请求方法urllib-request"><a href="#请求方法urllib-request" class="headerlink" title="请求方法urllib.request"></a>请求方法urllib.request</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line">print(type(response)) <span class="comment"># &lt;class 'http.client.HTTPResponse'&gt;</span></span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h5 id="响应response常用方法"><a href="#响应response常用方法" class="headerlink" title="响应response常用方法"></a>响应response常用方法</h5><p><em>response是一个 HTTPResposne 类 型 的 对 象 ，主要包含 read(), readinto(), getheader(name),getheaders(), fileno ()等 方 法 ，以及 msg、 version, status, reason, debuglevel, closed 等 属 性 。</em>  </p><ul><li>read()</li></ul><p><em>获取响应体</em></p><ul><li>status</li></ul><p><em>响应状态码</em></p><ul><li>getheaders()</li></ul><p><em>获取响应头</em></p><ul><li>getheaders(‘server’)</li></ul><p><em>输入参数server，返回服务器类型</em></p><h5 id="链接传参"><a href="#链接传参" class="headerlink" title="链接传参"></a>链接传参</h5><p>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)  </p><ul><li>data</li></ul><p><em>data参数是可选的。如果要添加该参数，并且<strong>如果它是字节流编码格式的内容，即 bytes类型，则需要通过bytes()方法转化</strong>。另外，如果传递了这个参数，则它的请求方式就不再是GET方式，而是 POST方式</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf-8'</span>) <span class="comment"># urlencode()将字典转换为字符串；bytes()将字符串转换为字节流</span></span><br><span class="line">response = urllib.request.urlopen(url, data=data)</span><br></pre></td></tr></table></figure><p><strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p><p><strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p><ul><li>timeout</li></ul><p><em>timeout参数用于设置超时时间，单位为秒，意思就是如果请求超出了设置的这个时间，还没有得到响应，就会抛出异常。如果不指定该参数，就会使用全局默认时间。</em>  </p><p><strong>超时报urllib.error.URLError</strong></p><p>使用try except:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(url, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">"Time Out"</span>)</span><br></pre></td></tr></table></figure><ul><li>其它参数</li></ul><p><strong>context</strong></p><p><em>它必须是ssl.SSLContext类型，用来指定SSL设置</em></p><p><strong>cafile和capath</strong></p><p><em>这两个参数分别指定C A 证书和它的路径，这个在请求HTTPS链接时会<br>有用</em></p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><em>urlopen只能用于简单的请求</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p><em>可以发现，我们依然是用urlopen()方法来发送这个请求，只不过这次该方法的参数不再是URL,而是一个Request类型的对象。通过构造这个数据结构，一方面我们可以将请求独立成一个对象，另一方面可更加丰富和灵活地配置参数。</em></p><h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><p>  *<em>urllib.request.Request(url, data=None, headers={},origin_req_host=None, unverifiable=False, method=None)  *</em></p><ul><li>data</li></ul><p><em>data 如果要传，必须传bytes (字节流 )类型的 。如果它是字典，可以先用<br>urllib.parse 模块里的 urlencode()编码</em></p><ul><li>headers</li></ul><p><em>headers是一个字典，它就是请求头，我们可以在构造请求时通过headers参数直接构造，也可以通过调用请求实例的add_header()方法添加。</em>  </p><p><em>添加请求头最常用的用法就是通过修改User-Agent来伪装浏览器，默 认 的 User-Agent是Python-urllib,我们可以通过修改它来伪装浏览器。比如要伪装火狐浏览器，你可以把它设置为：</em><br><strong>Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11</strong>  </p><ul><li>origin_req_host</li></ul><p><em>origin_req_host指的是请求方的host名称或者IP 地址</em></p><ul><li>unverifiable</li></ul><p><em>unverifiable表示这个请求是否是无法验证的，默认是F a ls e ,意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个HTML文档中的图片，但是我们没有自动抓取图像的权限，这 时 u nverifiable的值就是True。</em>  </p><ul><li>method</li></ul><p><em>method是一个字符串，用来指示请求使用的方法，比如GET、 POST和 PUT等。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">dict = &#123;<span class="string">"a"</span>: <span class="string">"b"</span>&#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(dict), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'.....'</span></span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url, data=data, headers=headers, method=<span class="string">'POST'</span>)</span><br><span class="line"><span class="comment"># request.add_header('user-agent')也可以</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>[handler官方文档](<a href="https://docs.python" target="_blank" rel="external nofollow noopener noreferrer">https://docs.python</a>.<br>org/3/library/urllib.request.html#urllib.request.BaseHandlero  )</p><p><em>上面无法处理代理，cookies的情况</em></p><p><em>简而言之，我们可以把它理解为各种处理器， 有专门处理登录验证的，有处理 Cookies的，有处理代理设置的。利用它们，我们几乎可以做到HTTP请求中所有的事情。</em>  </p><p><em>首先，介绍一下urllib.request模块里的BaseHandler类 ，它是所有其他Handler的父类， 它提供了最基本的方法，例如 default_open(). protocol_request()等。</em></p><p><strong>有各种Handler子类继承这个BaseHandler类，举例如下 ：</strong></p><p>□ HTTPDefaultErrorHandler： 用于处理HTTP响应错误，错误都会抛岀HTTPError类型的异常。<br>□ HTTPRedirectHandler: 用于处理重定向。<br>□ HTTPCookieProcessor: 用于处理 Cookies<br>□ ProxyHandler： 用于设置代理，默认代理为空。<br>□ HTTPPasswordMgr： 用于管理密码，它维护了用户名和密码的表。<br>□ HTTPBasicAuthHandler： 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。  </p><h6 id="OpenerDirector"><a href="#OpenerDirector" class="headerlink" title="OpenerDirector"></a>OpenerDirector</h6><p><em>那么，为什么要引入Opener呢？因为需要实现更高级的功能。之前使用的Request和 urlopen()相当于类库为你封装好了极其常用的请求方法，利用它们可以完成基本的请求，但是现在不一样了，我们需要实现更高级的功能，所以需要深入一层进行配置，使用更底层的实例来完成操作，所以这里就用到了 0pener</em></p><p><strong>当打开网页弹出提示框要求输入密码，账号时：</strong></p><p><a href="https://imgchr.com/i/G0g65F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/G0g65F.png" alt="G0g65F.png" border="0"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line">url = <span class="string">'http://localhost:5000/'</span></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">p.add_password(<span class="literal">None</span>, url, username, password)</span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line">opener = build_opener(auth_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = opener.open(url)</span><br><span class="line">html = result.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">print(e.reason)</span><br></pre></td></tr></table></figure><h6 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line"><span class="string">'http'</span>: <span class="string">'http://127.0.0.1:9743'</span>,</span><br><span class="line"><span class="string">'https'</span>: <span class="string">'https://127.0.0.1:9743'</span></span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = opener.open(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">print(e.reason)</span><br></pre></td></tr></table></figure><h6 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p><em>Cookies的处理就需要相关的Handler 了</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">print(item.name+<span class="string">"="</span>+item.value)</span><br></pre></td></tr></table></figure><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><h3 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><h3 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h3><p><em>它是URLError的子类，专门用来处理HTTP请求错误</em></p><p> 有如下三个属性：</p><ul><li>code</li></ul><p><em>返 回 HTTP状态码，比如404表示网页不存在， 500表示服务器内部错误等。</em></p><ul><li>reason</li></ul><p><em>同父类一样，用于返回错误的原因。</em></p><ul><li>headers</li></ul><p><em>返回请求头。</em></p><h2 id="解析链接"><a href="#解析链接" class="headerlink" title="解析链接"></a>解析链接</h2><p><em>前面说过， urllib库里还提供了 parse模 块 ，它定义了处理URL的标准接口，例如实现URL各部分的抽取、合并以及链接转换。它支持如下协议的URL处 理 ： file, ftp、 gophers hdl、 http、 https、 imap、<br>mailto、 mms、 news、 nntp、 prosper。、 rsync、 rtsp、 rtspu、 sftp、 sip、 sips、 snews、 svn、 svn+ssh. telnet和 wais</em></p><h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse()"></a>urlparse()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"> result=urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line"> print(type(result), result)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.htmT, params='</span>use<span class="string">r', query='</span>id=<span class="number">5</span><span class="string">',</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">fragment='</span>comment<span class="string">')</span></span></span></span><br></pre></td></tr></table></figure><p><em>可以看到，返回结果是一个ParseResult类型的对象，它 包 含 6 个部分，分另U是 scheme, netloc.path、 param， squery， fragment</em></p><p><em>result可以用元组的概念，也可以用属性来获取各部分</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(result[<span class="number">0</span>], result.params)</span><br></pre></td></tr></table></figure><h4 id="urlparse-API"><a href="#urlparse-API" class="headerlink" title="urlparse API"></a>urlparse API</h4><p>urllib.parse.urlparse(urlstring, scheme=’ ‘,  allow_fragments=True)</p><ul><li>urlstring </li></ul><ul><li>scheme</li></ul><p><em>当传入的url没有协议时，可以指定scheme参数为http/https</em></p><p><em>当本身就有协议，有传参为不同的协议，则会输出本身的协议</em></p><ul><li>allow_fragments</li></ul><p><em>设置为false时，结果就不会有fragments这一部分</em></p><p><em>当参数为false且链接中没有params和query时，fragment便会解析为path内容的一部分</em></p><h3 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse()"></a>urlunparse()</h3><p><em>与urlparse()相反</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure><h3 id="urlsplit"><a href="#urlsplit" class="headerlink" title="urlsplit()"></a>urlsplit()</h3><p><em>这个方法和urlparse()方法非常相似，只不过它不再单独解析params这一部分，只返回5 个结果。上面例子中的params会合 并 到 path中。</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query*<span class="string">'id=5*,</span></span><br><span class="line"><span class="string">fragment』 comment'</span>)</span><br></pre></td></tr></table></figure><h3 id="urlunsplit"><a href="#urlunsplit" class="headerlink" title="urlunsplit()"></a>urlunsplit()</h3><p><em>与 urlunparse()类似，它也是将链接各个部分组合成完整链接的方法，传入的参数也是一个可迭代对象，例如列表、元组等，唯一的区别是长度必须为5。</em>  </p><h3 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin()"></a>urljoin()</h3><p><em>有了 urlunparse()和 urlunsplit()方 法 ，我们可以完成链接的合并，不过前提必须要有特定长度的对象，链接的每一部分都要清晰分开。</em>  </p><p><em>生成链接还有另一个方法，那 就 是 urljoin()方法。我们可以提供一个base_url (基础链接)作为第一个参数，将新的链接作为第二个参数，该方法会分析base_url的 scheme, netloc和 path这 3个内容并对<strong>新链接缺失</strong>的部分进行补充</em> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(u:rljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html?question=2'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=abc'</span>, <span class="string">'https://cuiqingcai.com/index.php'</span>))</span><br><span class="line">print(urljoin('http://www.baidu.com，, '?category=2#comment'))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2J)</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">http://www.baidu.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html?question=2</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/index.php</span></span><br><span class="line"><span class="string">http://www. baidu. com?ca tego:ry=2#comme nt</span></span><br><span class="line"><span class="string">www.baidu.com?category=2#comment</span></span><br><span class="line"><span class="string">www.baidu.com?category=2</span></span><br></pre></td></tr></table></figure><p><em>可以发现， base_url提供了三项内容scheme, netloc和 path。 如果这3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url中的 params、 query和 fragment<br>是不起作用的。</em>  </p><h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode()"></a>urlencode()</h3><p><em>它 在 构 造 GET请求参数的时候非常有用</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">'name'</span>: <span class="string">'germey'</span>,</span><br><span class="line"><span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com?name=germey&amp;age=22</span><br></pre></td></tr></table></figure><h3 id="parse-qs"><a href="#parse-qs" class="headerlink" title="parse_qs()"></a>parse_qs()</h3><p><em>有了序列化，必然就有反序列化。如果我们有一串GET请求参数，利 用 parse_qs()方 法 ， 就可以将它转回字典，示例如下</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line">运行结果如下：</span><br><span class="line">&#123; <span class="string">'name'</span>: [<span class="string">'germey'</span>], <span class="string">'age'</span>: [<span class="string">'22'</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="parse-qsl"><a href="#parse-qsl" class="headerlink" title="parse_qsl()"></a>parse_qsl()</h3><p><em>另外，还 有 一 个 parse_qsl()方 法 ，它用于将参数转化为元组组成的列表</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line">&gt;&gt;&gt;[(<span class="string">'name'</span>, <span class="string">'germey'</span>), (<span class="string">'age'</span>, <span class="string">'22'</span>)]</span><br></pre></td></tr></table></figure><h3 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h3><p><em>该方法可以将内容转化为U RL编码的格式。 U R L 中带有中文参数时，有时可能会导致乱码的问题 ，此时用这个方法可以将中文字符转化为URL编码</em>  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'壁纸'</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)</span><br><span class="line">prin t(url)</span><br><span class="line">&gt;&gt;&gt; https://www. baidu. com/s?wd=%E 5%A3%81%E7%BA%B8</span><br></pre></td></tr></table></figure><h3 id="unquote"><a href="#unquote" class="headerlink" title="unquote()"></a>unquote()</h3><p><em>有了 quote。 方法，当然还有unquote()方法，它可以进行URL解 码</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">url = <span class="string">'https://www.baidu.com/s7wdn%E5%A3%81%E7%BA%B8'</span></span><br><span class="line">print(unquote(url))</span><br><span class="line">这是上面得到的URL编码后的结果，这里 利 用 unquote()方法还原，结果如下：</span><br><span class="line">https://www.baidu. com/s?wd=壁纸</span><br></pre></td></tr></table></figure><h2 id="分析Robots协议"><a href="#分析Robots协议" class="headerlink" title="分析Robots协议"></a>分析Robots协议</h2><h3 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h3><p><em>Robots协议也称作爬虫协议、机器人协议，它的全名叫作网络爬虫排除标准( Robots Exclusion Protocol) , 用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作robots.txt<br>的文本文件，一般放在网站的根目录下</em>  </p><p><em>robots.txt文件可以为空</em></p><p><em>一个爬虫爬取一个网站时，首先会看是否存在robots.txt,然后在按内容爬取；如果不存在则直接爬取</em></p><p><em>Allow 一 般 和 Disallow 一 起 使 用 ，一般不会单独使用</em></p><ul><li>禁止所有爬虫爬取任何目录</li></ul><p>User-agent: *<br>Disallow: /  </p><ul><li>允许所有爬虫爬取任意目录</li></ul><p>User-agent: *<br>Disallow:  </p><ul><li>禁止所有爬虫爬取某些目录</li></ul><p>User-agent: *<br>Disallow: /private/<br>Disallow: /tmp/  </p><ul><li>只允许某一个爬虫爬取爬取</li></ul><p>User-agent: Webcrawler<br>Disallow:<br>User-agent: *<br>Disallow: /  </p><h3 id="爬虫名称"><a href="#爬虫名称" class="headerlink" title="爬虫名称"></a>爬虫名称</h3><p><em>大家可能会疑惑，爬虫名是哪儿来的？为什么就叫这个名？其实它是有固定名字的了，比如百度的就叫作BaiduSpider</em></p>  <img src="https://s1.ax1x.com/2020/04/05/GDPj7n.png" alt="GDPj7n.png" border="0"><h3 id="robotparser"><a href="#robotparser" class="headerlink" title="robotparser"></a>robotparser</h3><p>*了 解 Robots协议之后， 我们就可以使用robotparser模块来解析robots.txt 了。该模块提供了一个类 R obotFileParser,它可以根据某网站的robots.txt文件来判断一个爬取爬虫是否有权限来爬取这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url)</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()</span><br><span class="line">rp.set_url(url)</span><br></pre></td></tr></table></figure><p>这个类常用方法：</p><ul><li><p>set_url</p><p><em>实例化这个类时传入了url，就不需要这个方法了</em></p></li><li><p>read()</p><p><em>读 取 robots.txt文件并进行分析。注意，这个方法执行一个读取和分析操作，如果不调用这个方法，接下来的 判 断 都 会 为F a ls e ,所以一定记得调用这个方法。这个方法不会返回任何内容，但是执行了读取操作。</em>  </p><p><strong>直接传入url和set_url()需要执行read(), 使用parse()不需要使用</strong></p></li><li><p>parse()</p></li></ul><p><em>用来解析robots.txt文件，传入的参数是robots.txt某些行的内容，它会按照robots.txt的语法规则来分析这些内容。</em>  </p><p><strong>传入的可以是数组，元组</strong></p><ul><li><p>can_fetch()</p><p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p></li><li><p>mtime()</p><p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p></li><li><p>modified()</p><p><em>它同样对长时间分析和抓取的搜索爬虫很有帮助，将当前时间设置为上次抓取和分析robots.txt的时间。</em>  </p></li></ul><p><em>使用can_fetch()</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser(<span class="string">'url/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'某个url'</span>))</span><br></pre></td></tr></table></figure><p><em>使用parse()</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.parse(urlopen(<span class="string">'url/robots.txt'</span>).read().decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, url))</span><br></pre></td></tr></table></figure><hr><blockquote><p>问候不一定要郑重其事，但一定要真诚感人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> HTTP </tag>
            
            <tag> 请求库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章内引用自己的文章</title>
      <link href="/hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%BC%95%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0.html"/>
      <url>/hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%BC%95%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用自己文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop理论课-第三章HDFS</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%89%E7%AB%A0HDFS.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%89%E7%AB%A0HDFS.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="第三章HDFS"><a href="#第三章HDFS" class="headerlink" title="第三章HDFS"></a>第三章HDFS</h2><h3 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h3><p><em>HDFS是Google公司的GFS分布式文件系统的开源实现</em></p><p><em>HDFS是Apache Hadoop项目的一个子项目</em></p><p><em>支持海量数据存储，成百上千的计算机组成存储集群</em></p><p><em>HDFS可以在低成本的硬件之上，具有高容错，高可靠性，高扩展，高吞吐率等特征</em></p><p><em>非常适合大规模数据集的应用</em></p><h4 id="HDFS的生态圈"><a href="#HDFS的生态圈" class="headerlink" title="HDFS的生态圈"></a>HDFS的生态圈</h4><img src="https://s1.ax1x.com/2020/04/02/GGoFIJ.png" alt="GGoFIJ.png" border="0"><h4 id="HDFS优点"><a href="#HDFS优点" class="headerlink" title="HDFS优点"></a>HDFS优点</h4><h5 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h5><p><em>数据自动保存多个副本</em></p><p><em>副本丢失后，自动恢复</em></p><h5 id="适合批处理"><a href="#适合批处理" class="headerlink" title="适合批处理"></a>适合批处理</h5><p><em>移动计算而非移动数据</em></p><p><em>移动位置暴露给计算框架</em></p><h5 id="适合大数据处理"><a href="#适合大数据处理" class="headerlink" title="适合大数据处理"></a>适合大数据处理</h5><p><em>GB, TB, 甚至PB级数据</em></p><p><em>百万规模以上的文件数量</em></p><p><em>10k+节点</em></p><h5 id="支持流式文件访问"><a href="#支持流式文件访问" class="headerlink" title="支持流式文件访问"></a>支持流式文件访问</h5><p><em>一次写入，多次读取</em></p><p><em>保证数据一致性</em></p><h5 id="可构建在廉价机器上"><a href="#可构建在廉价机器上" class="headerlink" title="可构建在廉价机器上"></a>可构建在廉价机器上</h5><p><em>通过多副本提高可靠性</em></p><p><em>提供容错和恢复机制</em></p><h4 id="HDFS缺点"><a href="#HDFS缺点" class="headerlink" title="HDFS缺点"></a>HDFS缺点</h4><h5 id="不适合低延迟数据访问"><a href="#不适合低延迟数据访问" class="headerlink" title="不适合低延迟数据访问"></a>不适合低延迟数据访问</h5><p><em>比如毫秒级</em></p><p><em>低延迟与高吞吐率</em></p><h5 id="不适合小文件存取"><a href="#不适合小文件存取" class="headerlink" title="不适合小文件存取"></a>不适合小文件存取</h5><p><em>占用NameNode大量内存</em></p><p><em>寻找时间超过读取时间</em></p><h5 id="不适合并发写入，文件随机修改"><a href="#不适合并发写入，文件随机修改" class="headerlink" title="不适合并发写入，文件随机修改"></a>不适合并发写入，文件随机修改</h5><p><em>一个文件只能有一个写入者</em></p><p><em>仅支持append(附加)</em></p><h3 id="HDFS的组成与架构"><a href="#HDFS的组成与架构" class="headerlink" title="HDFS的组成与架构"></a>HDFS的组成与架构</h3><h4 id="HDFS基本组件"><a href="#HDFS基本组件" class="headerlink" title="HDFS基本组件"></a>HDFS基本组件</h4><img src="https://s1.ax1x.com/2020/04/02/GGbSfJ.png" alt="GGbSfJ.png" border="0"><h5 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h5><img src="https://s1.ax1x.com/2020/04/02/GGbXjI.png" alt="GGbXjI.png" border="0"><p><em>edits是日志文件，包含一条条edit log; fsimage是最终结果</em></p><img src="https://s1.ax1x.com/2020/04/02/GJec5D.png" alt="GJec5D.png" border="0"><h5 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h5><h6 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h6><img src="https://s1.ax1x.com/2020/04/02/GJmfFU.png" alt="GJmfFU.png" border="0"><h6 id="分块原因"><a href="#分块原因" class="headerlink" title="分块原因"></a>分块原因</h6><ul><li>一个巨大文件一块磁盘空间不够</li><li>利于备份</li><li>提高吞吐量(并发读写，计算，利用不同节点存储，减少一个节点的负载)</li></ul><h6 id="DataNode的主要职责"><a href="#DataNode的主要职责" class="headerlink" title="DataNode的主要职责"></a>DataNode的主要职责</h6><p><a href="https://imgchr.com/i/GJuBKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJuBKs.md.png" alt="GJuBKs.png" border="0"></a></p><h6 id="机架感知与副本冗余存储策略"><a href="#机架感知与副本冗余存储策略" class="headerlink" title="机架感知与副本冗余存储策略"></a>机架感知与副本冗余存储策略</h6><img src="https://s1.ax1x.com/2020/04/02/GJ3Ebd.md.png" alt="GJ3Ebd.md.png" border="0"><p><a href="https://imgchr.com/i/GJ3eUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ3eUI.md.png" alt="GJ3eUI.md.png" border="0"></a></p><h5 id="Secondary-NameNode"><a href="#Secondary-NameNode" class="headerlink" title="Secondary NameNode"></a>Secondary NameNode</h5><h6 id="Secondary-NameNode的职责"><a href="#Secondary-NameNode的职责" class="headerlink" title="Secondary NameNode的职责"></a>Secondary NameNode的职责</h6><p><a href="https://imgchr.com/i/GJ84f0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ84f0.md.png" alt="GJ84f0.png" border="0"></a></p><p><em>secondary namenode和namenode占用同样大的内存大小；在不同节点上</em></p><h6 id="Secondary-NameNode工作流程"><a href="#Secondary-NameNode工作流程" class="headerlink" title="Secondary NameNode工作流程"></a>Secondary NameNode工作流程</h6><p><a href="https://imgchr.com/i/GJGbgf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJGbgf.md.png" alt="GJGbgf.png" border="0"></a></p><h6 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h6><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200402153039014.png" alt="image-20200402153039014"></p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p><a href="https://imgchr.com/i/GJt0Hg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJt0Hg.md.png" alt="GJt0Hg.png" border="0"></a></p><p><em>答案：edits。因为现在的fsimage保存的是最新也就是最近检查节点产生的fsimage；而现在的edits文件是保存的最近检查节点产生fsimage以来，Hdfs的操作信息</em></p><h4 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h4><img src="https://s1.ax1x.com/2020/04/02/GGbBn0.png" alt="GGbBn0.png" border="0"><h3 id="操作HDFS"><a href="#操作HDFS" class="headerlink" title="操作HDFS"></a>操作HDFS</h3><h3 id="HDFS-web访问"><a href="#HDFS-web访问" class="headerlink" title="HDFS web访问"></a>HDFS web访问</h3><ul><li><p><strong>IP:50070</strong>访问NameNode</p></li><li><p><strong>IP:50090</strong>访问SecondaryNameNode</p></li></ul><h3 id="HDFS-shell访问"><a href="#HDFS-shell访问" class="headerlink" title="HDFS shell访问"></a>HDFS shell访问</h3><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a><h4 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a><h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><p><a href="https://imgchr.com/i/GJWkfx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJWkfx.md.png" alt="GJWkfx.png" border="0"></a></p><h4 id="Hadoop中三种shell命令"><a href="#Hadoop中三种shell命令" class="headerlink" title="Hadoop中三种shell命令"></a>Hadoop中三种shell命令</h4><p><a href="https://imgchr.com/i/GJ4lN9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4lN9.md.png" alt="GJ4lN9.png" border="0"></a></p><h3 id="JAVA-API端口访问"><a href="#JAVA-API端口访问" class="headerlink" title="JAVA API端口访问"></a>JAVA API端口访问</h3><p><a href="https://imgchr.com/i/GJ4o3q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4o3q.md.png" alt="GJ4o3q.png" border="0"></a></p><p><a href="https://imgchr.com/i/GJIMWR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJIMWR.md.png" alt="GJIMWR.png" border="0"></a></p><p><a href="https://imgchr.com/i/GJ770f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ770f.png" alt="GJ770f.png" border="0"></a></p><h3 id="HDFS工作原理"><a href="#HDFS工作原理" class="headerlink" title="HDFS工作原理"></a>HDFS工作原理</h3><h4 id="HDFS写文件流程"><a href="#HDFS写文件流程" class="headerlink" title="HDFS写文件流程"></a>HDFS写文件流程</h4><p><a href="https://imgchr.com/i/GdIN1e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIN1e.md.png" alt="GdIN1e.md.png" border="0"></a><br><a href="https://imgchr.com/i/GdItpD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdItpD.md.png" alt="GdItpD.md.png" border="0"></a></p><h4 id="HDFS读文件流程"><a href="#HDFS读文件流程" class="headerlink" title="HDFS读文件流程"></a>HDFS读文件流程</h4><p><a href="https://imgchr.com/i/GdoSN6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoSN6.md.png" alt="GdoSN6.md.png" border="0"></a></p><h4 id="HDFS容错"><a href="#HDFS容错" class="headerlink" title="HDFS容错"></a>HDFS容错</h4><p><a href="https://imgchr.com/i/GdIzAx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIzAx.md.png" alt="GdIzAx.md.png" border="0"></a></p><h5 id="NameNode出错"><a href="#NameNode出错" class="headerlink" title="NameNode出错"></a>NameNode出错</h5><p><a href="https://imgchr.com/i/Gdojxg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gdojxg.md.png" alt="Gdojxg.md.png" border="0"></a></p><h5 id="DataNode出错"><a href="#DataNode出错" class="headerlink" title="DataNode出错"></a>DataNode出错</h5><p><a href="https://imgchr.com/i/GdoxMQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoxMQ.md.png" alt="GdoxMQ.md.png" border="0"></a></p><h5 id="数据出错"><a href="#数据出错" class="headerlink" title="数据出错"></a>数据出错</h5><p><a href="https://imgchr.com/i/Gd7rA1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gd7rA1.md.png" alt="Gd7rA1.png" border="0"></a></p><h3 id="HDFS的高级功能"><a href="#HDFS的高级功能" class="headerlink" title="HDFS的高级功能"></a>HDFS的高级功能</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p><a href="https://imgchr.com/i/GwS9eK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwS9eK.md.png" alt="GwS9eK.png" border="0"></a></p><h4 id="回收站"><a href="#回收站" class="headerlink" title="回收站"></a>回收站</h4><p><a href="https://imgchr.com/i/GwSVSA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSVSA.md.png" alt="GwSVSA.png" border="0"></a></p><h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><p><a href="https://imgchr.com/i/GwStO0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwStO0.md.png" alt="GwStO0.png" border="0"></a></p><h4 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h4><p><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSsp9.png" alt="GwSsp9.png" border="0"></a></a></p><h4 id="HA-High-Availability高可用"><a href="#HA-High-Availability高可用" class="headerlink" title="HA(High Availability高可用)"></a>HA(High Availability高可用)</h4><p><a href="https://imgchr.com/i/Gwpn39" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gwpn39.md.png" alt="Gwpn39.png" border="0"></a></p><p><a href="https://imgchr.com/i/GwpBHf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwpBHf.md.png" alt="GwpBHf.md.png" border="0"></a><br><a href="https://imgchr.com/i/GwprE8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwprE8.md.png" alt="GwprE8.md.png" border="0"></a></p><h4 id="联邦Federation"><a href="#联邦Federation" class="headerlink" title="联邦Federation"></a>联邦Federation</h4><h5 id="HDFS使用过程存在的问题"><a href="#HDFS使用过程存在的问题" class="headerlink" title="HDFS使用过程存在的问题"></a>HDFS使用过程存在的问题</h5><p><a href="https://imgchr.com/i/Gw9nIS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9nIS.png" alt="Gw9nIS.png" border="0"></a></p><h5 id="什么是Federation"><a href="#什么是Federation" class="headerlink" title="什么是Federation"></a>什么是Federation</h5><p><a href="https://imgchr.com/i/Gw9ma8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9ma8.md.png" alt="Gw9ma8.md.png" border="0"></a></p><h5 id="联邦的优点"><a href="#联邦的优点" class="headerlink" title="联邦的优点"></a>联邦的优点</h5><p><a href="https://imgchr.com/i/Gw9fRH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9fRH.md.png" alt="Gw9fRH.png" border="0"></a></p><h4 id="HA与Federation的区别"><a href="#HA与Federation的区别" class="headerlink" title="HA与Federation的区别"></a>HA与Federation的区别</h4><p><a href="https://imgchr.com/i/GwC9e0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwC9e0.md.png" alt="GwC9e0.png" border="0"></a></p><hr><blockquote><p>直道相思了无益，未妨惆怅是清狂。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据定义</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL%E6%A6%82%E8%BF%B0.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><h4 id="SQL的产生与发展"><a href="#SQL的产生与发展" class="headerlink" title="SQL的产生与发展"></a>SQL的产生与发展</h4><p><em>SQ L 是 在 1974年 由 Boyce和 Chamberlin提出的，最初叫 S e q u e l</em></p><p><em>1987 年，国际标准化组织 (International Organization for Standardization, I S O ) 也通过了这一标准.</em></p><p><em>同时，许多软件厂商对SQ L基本命令集还进行了不同程度的扩充和修改，又可以支持标准以外的一些功能特性</em></p><p><em>目前，没有一个数据库系统能够支持SQ L标准的所有概念和特性</em></p><h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><p><em>SQ L集数据查询(data query) ， 数据操纵 (data manipulation）数 据 定 义 (data definition)和 数 据 控 制 (data control)功能于一体</em></p><p><strong>主要特点</strong></p><ul><li><p>综合统一</p><p><em>SQL集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动，包括以下一系列操作要求：</em></p><p>・定义和修改、删除关系模式，定义和删除视图，插入数据，建立数据库。<br>・对数据库中的数据进行查询和更新。<br> • 数据库重构和维护。<br> • 数据库安全性、完整性控制，以及事务控制。<br>・嵌入式 SQL和 动 态 SQL定义。  </p></li><li><p>高度非过程化</p><p><em>非关系数据模型的数据操纵语言是“面向过程”的语言，用 “过程化”语言完成某项请求必须指定存取路径</em></p><p><em>而 用 SQL进行数据操作时，只要提 出 “做什么”，而无须指明’’怎么做”，因此无须了解存取路径。存取路径的选择以及SQ L 的操作过程由系统自动完成</em></p></li><li><p>面向集合的操作方式</p><p><em>非关系数据模型采用的是面向记录的操作方式，操作对象是一条记录(</em>例如查询所有平均成绩在8 0 分以上的学生姓名，用户必须一条一条地把满足条件的学生记录找出来 )</p><p><em>而 SQL采用集合操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合</em></p></li><li><p>以同一种语法结构提供多种使用方式</p><p><em>SQL既是独立的语言，又是嵌入式语言(可以使用单独的SQL,也可以使用高级语言，例如C,C++,JAVA等)</em></p></li><li><p>语言简洁，易学易用</p><p>*<em>完成核心功能只用了 9 个动词  *</em></p></li></ul><p><a href="https://imgchr.com/i/G1eqVe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1eqVe.png" alt="G1eqVe.png" border="0"></a></p><h4 id="SQL基本概念"><a href="#SQL基本概念" class="headerlink" title="SQL基本概念"></a>SQL基本概念</h4><p><em>支 持 SQ L 的关系数据库管理系统同样支持关系数据库三级模式结构</em></p><img src="https://s1.ax1x.com/2020/04/01/G1Qx2j.png" alt="G1Qx2j.png" border="0"><p><strong>外模式包括若干视图和部分基本表</strong></p><p><strong>模式包括若干基本表</strong></p><p><strong>内模式包括若干存储文件</strong></p><p><em>基本表是本身独立存在的表，一个或多个基本表对应一个存储文件，一个表可以带若干索引，索引也存放在存储文件中</em></p><p><em>存储文件的逻辑结构组成了关系数据库的内模式</em></p><p><em>视图是从一个或几个基本表导出的表。它本身不独立存储在数据库中，即数据库中只存放视图的定义而不存放视图对应的数据。这些数据仍存放在导出视图的基本表中，因此视图是一个虚表。视图在概念上与基本表等同，用户可以在视图上再定义视图</em></p><hr><blockquote><p>不问花期，不负春光，向阳而生，自由盛放。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据查询</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="选择表中若干列"><a href="#选择表中若干列" class="headerlink" title="选择表中若干列"></a>选择表中若干列</h4><h5 id="指定列"><a href="#指定列" class="headerlink" title="指定列"></a>指定列</h5> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h5 id="全部列"><a href="#全部列" class="headerlink" title="全部列"></a>全部列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h5 id="查询计算过得值"><a href="#查询计算过得值" class="headerlink" title="查询计算过得值"></a>查询计算过得值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>子句的＜目标列表达式〉不仅可以是表中的属性列，也可以是表达式</span><br><span class="line"><span class="keyword">SELECT</span> Sname, <span class="number">2014</span>-Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p><em>目标表达水不仅可以是算数表达式，也可以是字符串常量，函数等</em></p><h5 id="修改查询列标题"><a href="#修改查询列标题" class="headerlink" title="修改查询列标题"></a>修改查询列标题</h5><p><em>用户可以通过指定别名来改变查询结果的列标题，这对于含算术表达式、常量、函数名的目标列表达式尤为有用</em> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname [<span class="keyword">AS</span>] newName</span><br></pre></td></tr></table></figure><h4 id="选择表中的若干元组"><a href="#选择表中的若干元组" class="headerlink" title="选择表中的若干元组"></a>选择表中的若干元组</h4><p><em>系统查询的思路是，将关系中的所有元组一一进行条件匹配，然后在输出。当数据量大时，这种思路就不太合适了。可以创建索引解决</em></p><h5 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><h5 id="查询满足条件的元组"><a href="#查询满足条件的元组" class="headerlink" title="查询满足条件的元组"></a>查询满足条件的元组</h5><p><em>通过<strong>WHERE</strong>来实现</em></p><p>查询条件：</p><img src="https://s1.ax1x.com/2020/04/01/G3sx3j.png" alt="G3sx3j.png" border="0"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">'CS'</span>,<span class="string">'MA'</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure><p><em>注意：’IS’ 有时不能用‘=’代替，如’IS NULL’</em></p><p><strong>字符匹配时，可以有通配符，如下：</strong></p><ul><li><p>_</p><p><em>代表任意单个字符</em></p></li><li><p>%</p><p><em>任意长度的字符，零个也包括</em></p></li></ul><p><em>当数据中本身就有通配符时，就需要用到ESCAPE ‘&lt;换码字符&gt;’</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,Credit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">'DB\_Design'</span> ESCAPE<span class="string">'\'</span>;</span><br></pre></td></tr></table></figure><h5 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h5><p><em>默认升序ASC</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'3'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><em>可以既有升序又有降序：</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A, B </span><br><span class="line"><span class="keyword">FROM</span> DD</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A, B <span class="keyword">DESC</span>; //A可能是具有重复值，再重复值的情况下对B降序</span><br></pre></td></tr></table></figure><h5 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h5><h6 id="TOP-N"><a href="#TOP-N" class="headerlink" title="TOP N"></a>TOP N</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP N * </span><br><span class="line"><span class="keyword">FROM</span> SC</span><br></pre></td></tr></table></figure><h6 id="TOP-N-PERCENT"><a href="#TOP-N-PERCENT" class="headerlink" title="TOP N PERCENT"></a>TOP N PERCENT</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT TOP N PERCENT</span><br><span class="line">FROM SC</span><br></pre></td></tr></table></figure><h5 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h5><p><em>聚集函数中除COUNT外，其它函数在计算过程中均省略NULL；WHERE子句中不能使用聚集函数</em></p><h6 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h6><p>COUNT(*)                                                  统计元组个数<br>COUNT（ [DISTINCT|ALL] ＜列名&gt;）  统计一列中值的个数</p><h6 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h6><p>SUM（ [DISTINCT|ALL] ＜列名&gt;）       计算一列值的总和（此列必须是数值型）<br>AVG（ [DISTINCT|ALL] ＜列名&gt;）        计算一列值的平均值（此列必须是数值型）</p><h6 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h6><p>MAX（ [DISTINCT|ALL] ＜列名&gt;）       求一列值中的最大值</p><h6 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h6><p>MIN（ [DISTINCTIALL] ＜列名&gt;）        求一列值中的最小值  </p><h5 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h5><p><em>GROUP B Y 子句将查询结果按<strong>某一列或多列</strong>的值分组，值相等的为一组。</em></p><p><em>分组后聚集函数将<strong>作用于每一个组</strong>，即每一组都有一个函数值。</em>  </p><p><em>如果分组后还要求按一定的条件对这些组进行筛选，最终只输出满足指定条件的组，则可以使用<strong>HAVING</strong>短语指定筛选条件。</em>  </p><p><strong>WHERE子 句 与 HAVING短语</strong>的<em>区别在于作用对象不同。 WHERE子句作用于基本表或视图，从中选择满足条件的元组。  HAVING短语作用于组，从中选择满足条件的组</em></p><p><em>WHERE子句中是<strong>不能用聚集函数</strong>作为条件表达式的</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*查询课程号及相应选课人数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> cno, <span class="keyword">COUNT</span>(sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*查询选取三门课程以上的学生学号*/</span></span><br><span class="line"><span class="keyword">SELECT</span> sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(sno) &gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*查询平均成绩大于等于9 0 分的学生学号和平均成绩。*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, <span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(Grade) &gt;= <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="等值与非等值连接"><a href="#等值与非等值连接" class="headerlink" title="等值与非等值连接"></a>等值与非等值连接</h4><p><em>连接查询的WHERE子句中用来连接两个表的条件称为<strong>连接条件</strong>或<strong>连接谓词</strong>，其一般格式为 :</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[＜表名1＞.] &lt;列名l&gt; &lt;比较运算符&gt; [＜表名2＞.] ＜列名2＞</span><br><span class="line"><span class="comment">/*其中比较运算符主要有=、＞、＜、＞=、＜=、！= (或o ) 等*/</span></span><br></pre></td></tr></table></figure><p><em>当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。</em></p><p><strong>这就是嵌套循环连接算法</strong>： <em>一个表的全部元组的某个属性一一去和另一个元组的某个属性进行比较</em></p><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.*, SC.*</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure><p><em>结果中两个Sno都存在</em></p><p><em>一 条 SQ L语句可以同时<strong>完成选择</strong>和<strong>连接查询</strong>，这 时 WHERE子句是由<strong>连接谓词和选择谓词组成的复合条件</strong>。</em>  </p><h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h5><p><em>若在等值连接中把目标列中重复的属性列去掉则为自然连接。</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure><p><em>结果只保留一个Sno</em></p><h5 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h5><p><em>Course表取两个别名，一个是 F IR S T ,另一个是SECOND。</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>,Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno=SECOND.Cno;</span><br></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><em>有 时 想 以 Student表为主体列出每个学生的基本情况及其选课情况。若某个学生没有选课，仍 把 Student的悬浮元组保存在结果关系中，而 在 S C 表的属性上填空值NULL ,这时就需要使用外连接</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (Student.Sno=SC.Sno);</span><br><span class="line"><span class="comment">/*也可以使用USING來去掉结果中的重复值： FROM Student LEFT OUTER JOIN SC USING (Sno);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*RIGHT OUTER JOIN ON 右连接</span></span><br><span class="line"><span class="comment">FULL OUTER JOIN ON 全连接</span></span><br><span class="line"><span class="comment">LEFT OUTER JOIN ON 左连接*/</span></span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/GzUTIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/14/GzUTIA.md.png" alt="GzUTIA.png" border="0"></a></p><p><strong>左外连接</strong>列<em>出左边关系(如本例Student)中所有的元组，<strong>右外连接</strong>列出右边关系中所有的元组。</em>  </p><h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno=SC.Sno <span class="keyword">AND</span> SC.Cno=Course.Cno;</span><br></pre></td></tr></table></figure><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p><em>在 SQL语言中，一 个 SELECT-FROM-WHERE语句称为一个<strong>查询块</strong>。将一个查询块嵌套在另一个查询块的<strong>WHERE子句或 HAVING短语</strong>的条件中的查询称为嵌套查询(nested query )</em>   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="comment">/*外层查询或父査询*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno <span class="comment">/*内层查询或子査询*/</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno= <span class="string">'2'</span>);</span><br></pre></td></tr></table></figure><p><em>SQ L语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。需要特别指出的是，<strong>子查询的 SELECT语句中不能使用ORDER B Y 子句</strong>， ORDER B Y 子句只能对最终查询结果排序。</em> </p><p><strong>大多数嵌套查询可以用连接查询代替</strong></p><h4 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h4><p><em>在嵌套查询中，子查询的结果往往是一个集合，所 以 谓 词 IN 是嵌套查询中最经常使用的谓词。</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept <span class="comment">/*例 3.55 的解法一*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname=<span class="string">'刘晨，)；</span></span><br></pre></td></tr></table></figure><p><em>本例中，子查询的查询条件不依赖于父查询，称为<strong>不相关子查询</strong>。如果子查询的查询条件依赖于父查询，这类子查询称为<strong>相关子查询</strong>(correlated subquery) , 整个查询语句称为<strong>相关嵌套查询</strong>(correlated nested query) 语句</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sl.Sno,Sl.Sname,Sl.Sdept <span class="comment">/*例 3.55 的解法二 */</span></span><br><span class="line"><span class="keyword">FROM</span> Student SI,Student S2</span><br><span class="line"><span class="keyword">WHERE</span> Sl.Sdept=S2.Sdept <span class="keyword">AND</span> S2.Sname=<span class="string">'刘晨'</span>；</span><br></pre></td></tr></table></figure><p><em>可见，实现同一个查询请求可以有多种方法，当然不同的方法其执行效率可能会有差别 ，甚至会差别很大。这就是数据库编程人员应该掌握的数据库性能调优技术</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student ③ 最后在Student关系中</span><br><span class="line">取tLl Sno 和 Sname</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno② 然 后 在 SC 关系中找出</span><br><span class="line"> <span class="keyword">FROM</span> SC选修了 <span class="number">3</span> 号课程的学生学号</span><br><span class="line"> <span class="keyword">WHERE</span> Cno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Cno① 首 先 在 Course关系中</span><br><span class="line"> <span class="keyword">FROM</span> Course找 出 “信息系统”的课</span><br><span class="line"> <span class="keyword">WHERE</span> Cname=’信息系统<span class="string">' 程号，结果为3 号</span></span><br><span class="line"><span class="string">)；</span></span><br><span class="line"><span class="string">/*等价于*/</span></span><br><span class="line"><span class="string">SELECT Student.Sno,Sname</span></span><br><span class="line"><span class="string">FROM Student,SC,Course</span></span><br><span class="line"><span class="string">WHERE Student.Sno=SC.Sno AND</span></span><br><span class="line"><span class="string">SC.Cno=Course.Cno AND</span></span><br><span class="line"><span class="string">Course.Cname='</span>信息系统<span class="string">'；</span></span><br></pre></td></tr></table></figure><p><em>有些嵌套查询可以用连接运算替代，有些是不能替代的</em></p><img src="https://s1.ax1x.com/2020/04/22/JtBRK0.png" alt="JtBRK0.png" border="0"><img src="https://s1.ax1x.com/2020/04/22/JtBgvq.png" alt="JtBgvq.png" border="0"><img src="https://s1.ax1x.com/2020/04/22/Jt0I1I.png" alt="Jt0I1I.png" border="0"><img src="https://s1.ax1x.com/2020/04/22/Jt059A.png" alt="Jt059A.png" border="0"><img src="https://s1.ax1x.com/2020/04/22/Jt0hhd.png" alt="Jt0hhd.png" border="0"><h4 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h4><p><em>可以用&gt;,&lt;,&gt;=,&lt;=,!=或&lt;&gt;等比较运算符</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade ＞=(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(Grade) <span class="comment">/*某学生的平均成绩*/</span></span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno=x.Sno);</span><br><span class="line"><span class="comment">/*执行过程是，外层先取一个元组，传递给内层，内层得到平均值，在外层执行*/</span></span><br></pre></td></tr></table></figure><p><em>该值是与父查询相关的，因此这类查询称为相关子查询</em></p><p><em>求解相关子查询不能像求解不相关子查询那样一次将子查询求解出来，然后求解父查询</em></p>  <img src="https://s1.ax1x.com/2020/04/22/JtD4yt.png" alt="JtD4yt.png" border="0"><img src="https://s1.ax1x.com/2020/04/22/JtDhQI.png" alt="JtDhQI.png" border="0"><h4 id="带有ANY-SOME-或ALL谓词的子查询"><a href="#带有ANY-SOME-或ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或ALL谓词的子查询"></a>带有ANY(SOME)或ALL谓词的子查询</h4><p><a href="https://imgchr.com/i/Jml6iT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jml6iT.png" alt="Jml6iT.png" border="0"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Sage  <span class="comment">/*这里也可以用MAX()代替*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept &lt;&gt; <span class="string">'CS'</span> ; <span class="comment">/*注意这是父査询块中的条件*/</span></span><br></pre></td></tr></table></figure><p><em>用ANY后形成集合</em></p><p><em>事实上，用聚集函数实现子查询通常比直接用ANY或ALL查询效率要高。ANY,ALL与聚集函数的对应关系如表：</em></p><p><a href="https://imgchr.com/i/Jm32r9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jm32r9.md.png" alt="Jm32r9.png" border="0"></a></p><img src="https://s1.ax1x.com/2020/04/21/J8twwt.png" alt="J8twwt.png" border="0"><img src="https://s1.ax1x.com/2020/04/21/J8YXi8.png" alt="J8YXi8.png" border="0"><h4 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h4><p><em>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真假值TRUE,FALSE</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">（<span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>）;</span><br></pre></td></tr></table></figure><p><em>这也是相关子查询。先取一个外层的元组</em></p><p><em>由 EXISTS引出的子查询，其目标列表达式通常都用**, 因为带 EXISTS的子查询只返回真值或假值，给出列名无实际意义</em></p><img src="https://s1.ax1x.com/2020/04/22/JtskE8.png" alt="JtskE8.png" border="0"><p><em>与 EXISTS谓词相对应的是NOT EXISTS谓词。使用存在量词<strong>NOT EXISTS</strong>后，若内层查询结果为空，则外层的WHERE子句返回真值，否则返回假值</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><p><em>由于带EXISTS量词的相关子査询只关心内层查询是否有返回值，并不需要查具体值,因此其效率并不一定低于不相关子查询，有时是高效的方法</em>  </p><h4 id="用EXISTS-NOT-EXISTS实现全称量词"><a href="#用EXISTS-NOT-EXISTS实现全称量词" class="headerlink" title="用EXISTS/NOT EXISTS实现全称量词"></a>用EXISTS/NOT EXISTS实现全称量词</h4><p><a href="https://imgchr.com/i/JD4C0P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD4C0P.png" alt="JD4C0P.png" border="0"></a><br><a href="https://imgchr.com/i/JD49mt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD49mt.png" alt="JD49mt.png" border="0"></a></p><h4 id="用EXISTS-NOT-EXISTS实现逻辑蕴涵"><a href="#用EXISTS-NOT-EXISTS实现逻辑蕴涵" class="headerlink" title="用EXISTS/NOT EXISTS实现逻辑蕴涵"></a>用EXISTS/NOT EXISTS实现逻辑蕴涵</h4><p><a href="https://imgchr.com/i/JzutVH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzutVH.md.png" alt="JzutVH.md.png" border="0"></a><br><a href="https://imgchr.com/i/Jzu8KO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/Jzu8KO.md.png" alt="Jzu8KO.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuJqe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuJqe.md.png" alt="JzuJqe.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuGrD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuGrD.md.png" alt="JzuGrD.md.png" border="0"></a></p><h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h3><p><em>UNION , INTERSECT, EXCEPT</em></p><p><em>列数相等，对应属性相同</em></p><p><em>属性名无关，属性名取第一个结果属性名</em></p><p><em>自动除去重复; 不去重UNION ALL</em></p><p><em>最后使用ORDER BY(写在最后)；可以用数字代替对应第几个属性，ORDER BY 3</em></p><h4 id="UNION并"><a href="#UNION并" class="headerlink" title="UNION并"></a>UNION并</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'2'</span></span><br></pre></td></tr></table></figure><h4 id="INTERSECT交"><a href="#INTERSECT交" class="headerlink" title="INTERSECT交"></a>INTERSECT交</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;=<span class="number">19</span></span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/04/28/J5Po2d.png" alt="J5Po2d.png" border="0"><h4 id="EXCEPT差"><a href="#EXCEPT差" class="headerlink" title="EXCEPT差"></a>EXCEPT差</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage &lt;=<span class="number">19</span>;</span><br></pre></td></tr></table></figure><h3 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h3><p><em>子查询不仅可以出现在WHERE子句中，还可以出现在FROM 子句中，这时子查询生成的<strong>临时派生表(derived table )</strong>成为主查询的查询对象</em></p><img src="https://s1.ax1x.com/2020/04/30/JbxGT0.png" alt="JbxGT0.png" border="0"><p><em>有top的子查询可以把order by放在子查询</em></p><p><a href="https://imgchr.com/i/JqSNM4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/30/JqSNM4.png" alt="JqSNM4.png" border="0"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC, (<span class="keyword">SELECT</span> Sno, <span class="keyword">Avg</span>(Grade) <span class="keyword">FROM</span> SC <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno)</span><br><span class="line"><span class="keyword">AS</span> Avg_sc(avg_sno,avg_grade) // 生成表Avg_sc,具有两个属性</span><br><span class="line"><span class="keyword">WHERE</span> SC.Sno = Avg_sc.avg_sno <span class="keyword">and</span> SC.Grade ＞= Avg_sc.avg grade</span><br></pre></td></tr></table></figure><p><em>如果子查询中没有聚集函数，派生表可以不指定属性列</em></p><p><em>通 过 FROM 子句生成派生表时， A S 关键字可以省略，但必须为派生<br>关系指定一个别名</em></p><hr><blockquote><p>从此无心爱良夜，任他明月下西楼。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据查询 </tag>
            
            <tag> SELECT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-数据定义</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h3 id="数据定义-CREAT-DROP-ALTER"><a href="#数据定义-CREAT-DROP-ALTER" class="headerlink" title="数据定义(CREAT, DROP, ALTER)"></a>数据定义(CREAT, DROP, ALTER)</h3><p><em>关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式、表 、视图和索引等。因此 SQ L 的数据定义功能包括模式定义、表定义、视图和索引的定义。</em></p><img src="https://s1.ax1x.com/2020/04/01/G1lRLq.png" alt="G1lRLq.png" border="0"><p><strong>不支持模式修改，视图修改；只有重新删除创建</strong></p><p><strong>标准的SQL也不支持索引创建，商用关系数据库提供索引机制和相关语句</strong></p><p><em>一个关系数据库管理系统的 实 例 （instance）中可以建立多个数据库，一个数据库中可以建立多个模式， 一个模式下通常包括多个表、视图和索引等数据库对象</em></p><h4 id="模式定义与删除"><a href="#模式定义与删除" class="headerlink" title="模式定义与删除"></a>模式定义与删除</h4><h5 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h5><p><em>CREATE SCHEMA＜模式名＞AUTHORIZATION ＜用户名 &gt;</em></p><p><strong>如果没有指定＜模式名〉，那么＜模式名〉隐含为＜用户名 &gt;</strong></p><p><em>要创建模式，调用该命令的用户必须<strong>拥有数据库管理员权限</strong>，或者获得了数据库管理员授予的CREATE SCHEMA的权限</em>  </p><p><em>定义模式实际上定义了一个<strong>命名空间</strong>，在这个空间中可以进一步定义该模式包含的数据库对象，例如基本表、视图、索引等  。也就是说用户可以在创建模式的同时在这个模式定义中进一步创建基本表、视图，定义授权。即 ：</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span>＜模式名＞AUTHORIZATION ＜用户名 &gt; ［＜表定义子句＞ |＜视图定义子句＞|＜授权定义子句 &gt;］</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1 (<span class="keyword">COL</span> <span class="number">1</span> <span class="built_in">SMALLINT</span>,</span><br><span class="line">COL2 <span class="built_in">INT</span>,</span><br><span class="line">COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><h5 id="模式删除"><a href="#模式删除" class="headerlink" title="模式删除"></a>模式删除</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> &lt;模式名&gt; &lt;<span class="keyword">CASCADE</span> | RESTRICT&gt;</span><br></pre></td></tr></table></figure><p><em>其 中 CASCADE和 RESTRICT两者<strong>必选其一</strong>。<strong>选择了 CASCADE (级联)</strong>，表示在删除模式的同时把该模式中所有的数据库对象全部删除；<strong>选择了 RESTRICT (限制)</strong>，表示如果该模式中已经定义了下属的数据库对象(如表、视图等)，则拒绝该删除语句的执行。</em></p><h4 id="基本表定义，删除，修改"><a href="#基本表定义，删除，修改" class="headerlink" title="基本表定义，删除，修改"></a>基本表定义，删除，修改</h4><p><em>创建了一个模式就建立了一个数据库的命名空间，一个框架。在这个空间中首先要定义的是该模式包含的数据库基本表</em></p><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;(＜列名＞＜数据类型＞［列级完整性约束条件］</span><br><span class="line">［,＜列名＞＜数据类型＞［列级完整性约束条件］］</span><br><span class="line">                  ...</span><br><span class="line">［,＜表级完整性约束条件＞］) ；</span><br></pre></td></tr></table></figure><p><em>完整性约束条件被存入系统的<strong>数据字典中</strong>，当用户操作表中数据时由关系数据库管理系统自动检查该操作是否违背这些完整性约束条件。<strong>如果完整性约束条件涉及该表的多个属性列，则必须定义在表级上</strong>，否则既可以定义在列级也可以定义在表级</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno <span class="built_in">CHAR</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>, <span class="comment">/*严列级完整性约束条件， Cno是主码*/</span></span><br><span class="line"> Cname <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="comment">/*列级完整性约束条件， Cname不能取空值*/</span></span><br><span class="line">Cpno <span class="built_in">CHAR</span>(<span class="number">4</span>), <span class="comment">/* Cpno的 含 义 是 先 修 课 */</span></span><br><span class="line">Ccredit <span class="built_in">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， Cpno是外码，被参照表是Course ,被参照列是Cno */</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure><p><strong>由上可知外键和参照的表可以是同一个表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno <span class="built_in">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade <span class="built_in">SMALLINT</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (Sno, Cno), <span class="comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"><span class="comment">/*表级完整性约束条件， S no是外码，被参照表是Student */</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， C n o 是外码，被参照表是Course*/</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><img src="https://s1.ax1x.com/2020/04/01/G1UblT.png" alt="G1UblT.png" border="0"><p><a href="https://imgchr.com/i/G1aM1f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aM1f.md.png" alt="G1aM1f.md.png" border="0"></a></p><p><strong>文本类型</strong></p><p><a href="https://imgchr.com/i/G1aljS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aljS.md.png" alt="G1aljS.md.png" border="0"></a></p><p><strong>时间类型</strong></p><p><a href="https://imgchr.com/i/G1aK9P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aK9P.md.png" alt="G1aK9P.md.png" border="0"></a></p><h5 id="模式与表"><a href="#模式与表" class="headerlink" title="模式与表"></a>模式与表</h5><p><strong>设置表所属模式的三种方式：</strong></p><ul><li>选择模式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"S-T"</span>.Student(...)</span><br></pre></td></tr></table></figure><ul><li>创建模式时创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABL(</span><br><span class="line">COL1 <span class="built_in">SMALLINT</span>,</span><br><span class="line">COL2 <span class="built_in">INT</span>,</span><br><span class="line">COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><ul><li><p>系统根据搜索路径（search path） 来确定该对象所属的模式  </p><p><em>搜索路径包含一组模式列表，关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名。若搜索路径中的模式名都不存在，系统将给出错误。</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*显示当前搜索路径*/</span></span><br><span class="line"><span class="keyword">SHOW</span> search_path;</span><br><span class="line"><span class="comment">/*搜索路径的当前默认值是$user, PUBLIC。 其含义是首先搜索与用户名相同的模式名，如果该模式名不存在，则使用PUBLIC模式。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据库管理员也可以设置搜索路径，例如：*/</span></span><br><span class="line"><span class="keyword">SET</span> search_path <span class="keyword">TO</span> <span class="string">"S-T"</span>, <span class="keyword">PUBLIC</span>;</span><br><span class="line"><span class="comment">/*然后，定义基本表：*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student (...)；</span><br><span class="line"><span class="comment">/*实际结果是建立了 S-T.Student基本表。因为关系数据库管理系统发现搜索路径中第一个模式名S-T 存在，就把该模式作为基本表Student所属的模式。*/</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="基本表修改"><a href="#基本表修改" class="headerlink" title="基本表修改"></a>基本表修改</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ＜表名＞</span><br><span class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] ＜新列名＞ ＜数据类型＞ [完整性约束]]</span><br><span class="line">[<span class="keyword">ADD</span>＜表级完整性约束＞] //<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname);</span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] ＜列名＞ [<span class="keyword">CASCADE</span>|RESTRICT]]</span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span>＜完整性约束名＞ [RESTRICT | <span class="keyword">CASCADE</span> ]]</span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ＜列名＞＜数据类型＞] ;</span><br></pre></td></tr></table></figure><h5 id="基本表删除"><a href="#基本表删除" class="headerlink" title="基本表删除"></a>基本表删除</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt; [RESTRICT | <span class="keyword">CASCADE</span>];</span><br></pre></td></tr></table></figure><p><em>若 选 择 RESTRICT ,则该表的删除是有限制条件的。</em></p><p><em>若 选 择 CASCADE ,则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。因此执行删除基本表的操作一定要格外小心。</em>  </p><p><strong>注意 ：不同的数据库产品在遵循 SQ L 标准的基础上具体实现细节和处理策略会与标准有差别。</strong>  </p><h4 id="视图建立和删除"><a href="#视图建立和删除" class="headerlink" title="视图建立和删除"></a>视图建立和删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student <span class="comment">/* Student 表上建立视图*/</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT; <span class="comment">/*删除 Student 表引</span></span><br><span class="line"><span class="comment">-ERROR: cannot drop table Student because other objects depend on it*/</span></span><br><span class="line"><span class="comment">/* 系统返回错误信息，存在依赖该表的对象，此表不能被删除》*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student <span class="keyword">CASCADE</span>; <span class="comment">/*删除 Student 表*/</span></span><br><span class="line">—NOTICE: <span class="keyword">drop</span> cascades <span class="keyword">to</span> <span class="keyword">view</span> <span class="keyword">IS</span> Student <span class="comment">/*系统返回提示，此表上的视图也被删除*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> IS_Student;</span><br><span class="line"><span class="comment">--ERROR: relation " IS Student " does not exist</span></span><br></pre></td></tr></table></figure><h4 id="索引的建立和删除"><a href="#索引的建立和删除" class="headerlink" title="索引的建立和删除"></a>索引的建立和删除</h4><p><em>当表的数据量比较大时，查询操作会比较耗时。建立索引是加快查询速度的有效手段。  类似于图书后面的索引，能快速定位到需要查询的内容。用户可以根据应用环境的需要在基本表上建立一个或多个索引，以提供多种存取路径，加快查找速度。</em>    </p><p><em>数据库索引有多种类型，常见索引包括<strong>顺序文件上的索引</strong>、<strong>B+树索引</strong>、<strong>散 列 （hash）索引</strong>、<strong>位图索引</strong>等。</em>  </p><ul><li>顺序文件上的索引是针对按指定属性值升序或降序存储的关系，在该属性<br>上建立一个顺序索引文件，索引文件由属性值和相应的元组指针组成。  </li><li>B+树索引是将索引属性组织成B+树形式， B+树的叶结点为属性值和相应的元组指针。 B+树索引具有动态平衡的<br>优点。</li><li>散列索引是建立若干个桶，将索引属性按照其散列函数值映射到相应桶中，桶中存放索引属性值和相应的元组指针。散列索引具有查找速度快的特点。 </li><li>位图索引是用位向量记录索引属性中可能出现的值，每个位向量对应一个可能值  </li></ul><p><em>索引虽然能够加速数据库查询，但需要占用一定的存储空间，当基本表更新时，索引要进行相应的维护，这些都会增加数据库的负担,因此要根据实际应用的需要有选择地创建索引。目前SQ L标准中没有涉及索引,一般说来，建立与删除索引由数据库管理员或表的属主（owner）, 即建立表的人，负责<br>完成。用户不必也不能显式地选择索引。索引是关系数据库管理系统的内部实现技术，属于内模式的范畴。</em>  </p><h5 id="索引建立"><a href="#索引建立" class="headerlink" title="索引建立"></a>索引建立</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span>&lt;索引名&gt;</span><br><span class="line"><span class="keyword">ON</span>＜表名＞（＜列名＞[＜次序＞] [＜列名＞ [＜次序＞]]•••）;</span><br><span class="line"><span class="comment">/*UNIQUE表明此索引的每一个索引值只对应唯一的数据记录。</span></span><br><span class="line"><span class="comment">CLUSTER表示要建立的索引是聚簇索引。*/</span></span><br></pre></td></tr></table></figure><p><em>索引可以建立在该表的一列或多列上，各列名之间用逗号分隔。每个＜列名&gt;后面还可以用＜次序 &gt;指定索引值的排列次序，可 选 ASC （升序 ）或 DESC （降序），默认值为ASC。</em>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Stusno <span class="keyword">ON</span> Student（Sno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Coucno <span class="keyword">ON</span> Course（Cno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> SCno <span class="keyword">ON</span> SC（Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>）;</span><br></pre></td></tr></table></figure><h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> ＜旧索引名＞  <span class="keyword">RENAME</span> <span class="keyword">TO</span> ＜新索引名＞ ；</span><br></pre></td></tr></table></figure><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> ＜索引名＞；</span><br></pre></td></tr></table></figure><h4 id="数字字典"><a href="#数字字典" class="headerlink" title="数字字典"></a>数字字典</h4><p><em>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息,包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行SQ L 的数据定义语句时，实际上就是在更新数据字<br>典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</em>  </p><hr><blockquote><p>最惬意的时候，往往是失败的开始。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据定义 </tag>
            
            <tag> CREATE </tag>
            
            <tag> DROP </tag>
            
            <tag> ALTER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop理论课-第四章</title>
      <link href="/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%9B%9B%E7%AB%A0YARN.html"/>
      <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%9B%9B%E7%AB%A0YARN.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="第四章-YARN"><a href="#第四章-YARN" class="headerlink" title="第四章  YARN"></a>第四章  YARN</h2><h3 id="YARN-简介"><a href="#YARN-简介" class="headerlink" title="YARN 简介"></a>YARN 简介</h3><p><em>是针对MapReduce1 的缺点开发的</em></p><h4 id="MapReduce1工作流程"><a href="#MapReduce1工作流程" class="headerlink" title="MapReduce1工作流程"></a>MapReduce1工作流程</h4><img src="https://s1.ax1x.com/2020/03/30/GnMq0J.png" alt="GnMq0J.png" border="0"><p><em>MapReduce1 当任务过多时，不利于系统扩展；难以支持其他的框架；JobTracker单点故障</em></p><h4 id="MapReduce2"><a href="#MapReduce2" class="headerlink" title="MapReduce2"></a>MapReduce2</h4><img src="https://s1.ax1x.com/2020/03/30/GnQhHH.png" alt="GnQhHH.png" border="0"><h4 id="YARN-进程"><a href="#YARN-进程" class="headerlink" title="YARN 进程"></a>YARN 进程</h4><p>ResourceManager</p><p>NodeManager</p><h4 id="什么是YARN"><a href="#什么是YARN" class="headerlink" title="什么是YARN"></a>什么是YARN</h4><p><em>YARN ：Yet Another Resource Negotiator，另一种资源协调者。<br>最初是为了改善MapReduce的实现，但也是一种资源调度框架，具有通用性，可为上层应用提供统一的资源管理和调度，可以支持其他的分布式计算模式（如Spark）。<br>它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</em></p><h3 id="YARN架构"><a href="#YARN架构" class="headerlink" title="YARN架构"></a>YARN架构</h3><img src="https://s1.ax1x.com/2020/03/30/GnUQz9.png" alt="GnUQz9.png" border="0"><h4 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 Container"></a>容器 Container</h4><p><em>Container是YARN中资源的抽象，它封装了某个节点上的多维度资源。</em></p><p><em>YARN中资源包括内存、CPU、磁盘输入输出等等</em></p><h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h4><p><em>负责资源分配和管理</em></p><p><em>主要由调度器和应用程序管理器两个组件组成</em></p><ul><li>调度器（Scheduler）：<pre><code>调度器根据资源情况为应用程序分配封装在Container中的资源。</code></pre></li><li>应用程序管理器（Application Manager）：<pre><code>应用程序管理器负责管理整个系统中所有应用程序</code></pre></li></ul><h4 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h4><p><em>是每个节点上的资源和任务管理器</em></p><ul><li>定时向ResourceManager汇报本节点上的资源使用情况和各个Container的运行状态；</li><li>接收并处理来自ApplicationManager的Container启动/停止等请求。</li></ul><h4 id="ApplicationMaster（主应用"><a href="#ApplicationMaster（主应用" class="headerlink" title="ApplicationMaster（主应用)"></a>ApplicationMaster（主应用)</h4><p>ApplicationMaster是一个详细的框架库，它结合从 ResourceManager 获得的资源和 NodeManager 协同工作来运行和监控任务。<br>用户提交的每一个应用程序均包含一个ApplicationMaster。<br>主要功能包括：<br>1)、与ResourceManager调度器协商以获取抽象资源（Container）；<br>2)、负责应用的监控，跟踪应用执行状态，重启失败任务等；<br>3)、与NodeManager协同工作完成Task的执行和监控。</p><h4 id="YARN中应用运行机制-流程"><a href="#YARN中应用运行机制-流程" class="headerlink" title="YARN中应用运行机制(流程)"></a>YARN中应用运行机制(流程)</h4><p><a href="https://imgchr.com/i/GnDCGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnDCGT.md.png" alt="GnDCGT.md.png" border="0"></a></p><h4 id="YARN中任务进度监控"><a href="#YARN中任务进度监控" class="headerlink" title="YARN中任务进度监控"></a>YARN中任务进度监控</h4><p><a href="https://imgchr.com/i/GnD9iV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnD9iV.md.png" alt="GnD9iV.md.png" border="0"></a></p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="MapReduce1与YARN组成对比"><a href="#MapReduce1与YARN组成对比" class="headerlink" title="MapReduce1与YARN组成对比"></a>MapReduce1与YARN组成对比</h4><img src="https://s1.ax1x.com/2020/03/30/GnDzOH.png" alt="GnDzOH.png" border="0"><h4 id="Yarn对MapReduce运行性能提升"><a href="#Yarn对MapReduce运行性能提升" class="headerlink" title="Yarn对MapReduce运行性能提升"></a>Yarn对MapReduce运行性能提升</h4><p>主要特点： ResourceManager与Application Master分离</p><p>性能提升:可以扩展支持10,000个节点，100,000个任务</p><h4 id="YARN调度器"><a href="#YARN调度器" class="headerlink" title="YARN调度器"></a>YARN调度器</h4><h5 id="FIFO-Scheduler"><a href="#FIFO-Scheduler" class="headerlink" title="FIFO Scheduler"></a>FIFO Scheduler</h5><p><em>最简单的调度器，任务先提交先执行</em></p><h5 id="Capacity-Scheduler"><a href="#Capacity-Scheduler" class="headerlink" title="Capacity Scheduler"></a>Capacity Scheduler</h5><p><em>分成多个队列，每个队列占用一定资源，可以看作是FIFO Scheduler的多队列版本</em></p><p><em>每个队列可以限制资源使用量。但是，队列间的资源分配以使用量作排列依据，使得容量小的队列有竞争优势</em></p><p><em>注意：如果不限制某队列最大容量，则运行过程中，它可以占用全部资源。</em><br><a href="https://imgchr.com/i/GI7Jx0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7Jx0.png" alt="GI7Jx0.png" border="0"></a></p><h5 id="Fair-Scheduler"><a href="#Fair-Scheduler" class="headerlink" title="Fair Scheduler"></a>Fair Scheduler</h5><p><em>假设每个任务具有相同的优先级，平均分配系统的资源</em></p><p>单队列</p><img src="https://s1.ax1x.com/2020/03/30/GnyELQ.md.png" alt="GnyELQ.md.png" border="0"><p>多队列</p><p><a href="https://imgchr.com/i/Gnyeds" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/Gnyeds.md.png" alt="Gnyeds.md.png" border="0"></a></p><h4 id="三种调度器比较"><a href="#三种调度器比较" class="headerlink" title="三种调度器比较"></a>三种调度器比较</h4><p><a href="https://imgchr.com/i/GI7G2q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7G2q.md.png" alt="GI7G2q.md.png" border="0"></a></p><hr><blockquote><p>世界上那些最容易的事情中，拖延时间最不费力。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-第三章</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e865395e887338abc2216f246be4c35bb358935e76d2d405df439d5ab1815021"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 透明传输 </tag>
            
            <tag> 封装成帧 </tag>
            
            <tag> 循环冗余检测CRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo更改颜色</title>
      <link href="/hexo%E6%9B%B4%E6%94%B9%E9%A2%9C%E8%89%B2.html"/>
      <url>/hexo%E6%9B%B4%E6%94%B9%E9%A2%9C%E8%89%B2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>廖雪峰教程笔记-面向对象编程</title>
      <link href="/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html"/>
      <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="2f79175af739970e2f287b1140c118c78124150522b2f8f8490863698abaa221"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 廖雪峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统-关系代数</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><h3 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h3><p><em>并，交，差是要属性一样才可以操作</em></p><h4 id="并-union"><a href="#并-union" class="headerlink" title="并(union)"></a>并(union)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8tqs.png" alt="8X8tqs.png" border="0" width="400/"><h4 id="差-except"><a href="#差-except" class="headerlink" title="差(except)"></a>差(except)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8cL9.png" alt="8X8cL9.png" border="0" width="400/"><h4 id="交-intersection"><a href="#交-intersection" class="headerlink" title="交(intersection)"></a>交(intersection)</h4><img src="https://s1.ax1x.com/2020/03/25/8XGKOJ.png" alt="8XGKOJ.png" border="0" width="400/"><h4 id="笛卡尔积-cartesian-product"><a href="#笛卡尔积-cartesian-product" class="headerlink" title="笛卡尔积(cartesian product)"></a>笛卡尔积(cartesian product)</h4><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><h4 id="选择-selection"><a href="#选择-selection" class="headerlink" title="选择(selection)"></a>选择(selection)</h4><p>  σ条件(R)</p><p><em>行操作</em></p><h3 id="投影-projection"><a href="#投影-projection" class="headerlink" title="投影(projection)"></a>投影(projection)</h3><p>​    π条件(R)</p><p><em>投影操作是从列的角度进行的操作</em></p><h3 id="连接-join"><a href="#连接-join" class="headerlink" title="连接(join)"></a>连接(join)</h3><h4 id="theta连接，θ"><a href="#theta连接，θ" class="headerlink" title="theta连接，θ"></a><em>theta连接，θ</em></h4><img src="https://s1.ax1x.com/2020/03/25/8X1CLR.png" alt="8X1CLR.png" border="0" width="400/"><img src="https://s1.ax1x.com/2020/03/25/8XlxWF.png" alt="8XlxWF.png" border="0" width="400/"><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a><em>等值连接</em></h4><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a><em>自然连接</em></h4><p><em>是特殊的等值连接</em></p><p><em>要具有相同属性，且值相同的进行连接</em></p><img src="https://s1.ax1x.com/2020/03/25/8XMblj.png" alt="8XMblj.png" border="0" width="400/"><img src="https://s1.ax1x.com/2020/03/25/8XQYAf.png" alt="8XQYAf.png" border="0" width="400/"><img src="https://s1.ax1x.com/2020/03/25/8XQhv9.png" alt="8XQhv9.png" border="0" width="400/"><h4 id="除操作"><a href="#除操作" class="headerlink" title="除操作"></a>除操作</h4><p><em>除的那个关系是被除关系的真子集,  值要相等才可以</em></p><img src="https://s1.ax1x.com/2020/03/25/8X1fmR.png" alt="8X1fmR.png" border="0" width="400/"><hr><blockquote><p>阳光温热，岁月静好，你还未来，我怎敢老去。 —-张爱玲</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>崔庆--才python爬虫之App爬取</title>
      <link href="/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BApp%E7%88%AC%E5%8F%96.html"/>
      <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BApp%E7%88%AC%E5%8F%96.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4c5cdb013fe4eda6d814edae87916c536e9bdb372d8a49eed05b2a46a05c35de"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 崔庆才 </tag>
            
            <tag> python爬虫 </tag>
            
            <tag> charless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>崔庆才python爬虫之Charles安装</title>
      <link href="/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BCharles%E5%AE%89%E8%A3%85.html"/>
      <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BCharles%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="抓包工具Charless安装"><a href="#抓包工具Charless安装" class="headerlink" title="抓包工具Charless安装"></a>抓包工具Charless安装</h2><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>官方网站: <a href="https://www.charlesproxy.com/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/</a></p><p>下载链接: <a href="https://www.charlesproxy.com/download/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/download/</a></p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><em>可以免费使用30天，之后每次不能超过30分钟</em></p><h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p><em>Https通信协议应用越来越广泛，通过加密的数据无法识别</em></p><p><em>Charless运行在PC端，抓取的数据在移动端，所以电脑和手机都要安装证书</em></p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>*打开charless的help–&gt;ssl proxying–&gt;install charless root certificate–&gt;安装证书–&gt;将所有证书放入下列存储–&gt;受信任的根证书颁发机构</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>主机名：192.168.1.76</p><p>端口： 8888</p><p>手机上打开chls.pro/ssl,设置证书名</p><hr><blockquote><p>没有伞的孩子，必须努力奔跑!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 崔庆才 </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>廖雪峰java教程笔记-快速入门</title>
      <link href="/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
      <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="179cbe97b934e4a71d66298c99f8e7040392b2f0a719f0e9a34c7ee458a2c0ec"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 廖雪峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo上一页和下一页乱码</title>
      <link href="/hexo%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%92%8C%E4%B8%8B%E4%B8%80%E9%A1%B5%E4%B9%B1%E7%A0%81.html"/>
      <url>/hexo%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%92%8C%E4%B8%8B%E4%B8%80%E9%A1%B5%E4%B9%B1%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="hexo上一页和下一页乱码"><a href="#hexo上一页和下一页乱码" class="headerlink" title="hexo上一页和下一页乱码"></a>hexo上一页和下一页乱码</h2><p><em>在themes\next\layout_partials\中，更改pagination.swig文件如下：</em></p><p><a href="https://imgchr.com/i/823CJe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/823CJe.md.png" alt="823CJe.png" border="0" width="500/"></a></p><p><strong>更改为：</strong></p><img src="https://s1.ax1x.com/2020/03/20/828XE6.png" alt="828XE6.png" border="0"><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO开启推送</title>
      <link href="/hexo%E5%BC%80%E5%90%AF%E6%8E%A8%E9%80%81SEO.html"/>
      <url>/hexo%E5%BC%80%E5%90%AF%E6%8E%A8%E9%80%81SEO.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="开启推送"><a href="#开启推送" class="headerlink" title="开启推送"></a>开启推送</h2><h3 id="网址递交"><a href="#网址递交" class="headerlink" title="网址递交"></a>网址递交</h3><p><em>将网站链接提交到百度，<a href="http://www.sousuoyinqingtijiao.com/baidu/tijiao/" target="_blank" rel="external nofollow noopener noreferrer">百度搜索引擎提交入口 </a>,然后验证你的网站，这一点网上有很详细的教程我就不复述了，验证确认你的网站后，继续验证你的网站的robots.txt和sitemap文件是否可用，一般都是可用的。</em></p><h2 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h2><p><em>把下面的代码放到D:\lang_blog\themes\next\source\js\src目录下，文件名为bai.js</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var bp &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    bp.src &#x3D; &#39;&#x2F;&#x2F;push.zhanzhang.baidu.com&#x2F;push.js&#39;;</span><br><span class="line">    var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><em>在yourblog/scaffolds/post.md中，添加下面的代码：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;bai.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><em>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</em></p><h2 id="手动推送"><a href="#手动推送" class="headerlink" title="手动推送"></a>手动推送</h2><p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo </tag>
            
            <tag> 推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的seo优化之开启压缩文件</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%BC%80%E5%90%AF%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%BC%80%E5%90%AF%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="开启压缩文件"><a href="#开启压缩文件" class="headerlink" title="开启压缩文件"></a>开启压缩文件</h2><p><em>因为hexo生成的文件是静态html，里面占用了大量的空白符。使用gulp进行压缩接口提高访问速度并且降低内存。</em></p><p><em>在根目录下打开git bash输入如下命令:</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line">npm install gulp-concat</span><br><span class="line">npm install gulp-imagemin</span><br></pre></td></tr></table></figure><p><em>在根目录下创建gulpfile.js，内容如下:</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;),</span><br><span class="line">    uglify &#x3D; require(&#39;gulp-uglify&#39;),</span><br><span class="line">    cssmin &#x3D; require(&#39;gulp-minify-css&#39;),</span><br><span class="line">    imagemin &#x3D; require(&#39;gulp-imagemin&#39;),</span><br><span class="line">    htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;),</span><br><span class="line">    htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">    concat &#x3D; require(&#39;gulp-concat&#39;);</span><br><span class="line">&#x2F;&#x2F;JS压缩</span><br><span class="line">gulp.task(&#39;uglify&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;js&#x2F;**&#x2F;.js&#39;,&#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;])&#x2F;&#x2F;只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;,&#39;!.&#x2F;public&#x2F;zuoxi&#x2F;**&#x2F;*.js&#39;,,&#39;!.&#x2F;public&#x2F;radio&#x2F;**&#x2F;*.js&#39;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;js&#39;));&#x2F;&#x2F;对应修改为.&#x2F;public即可</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-js压缩</span><br><span class="line">gulp.task(&#39;fancybox:js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 合并 JS</span><br><span class="line">gulp.task(&#39;jsall&#39;, function () &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    &#x2F;&#x2F; 压缩后重命名</span><br><span class="line">        .pipe(concat(&#39;app.js&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-css压缩</span><br><span class="line">gulp.task(&#39;fancybox:css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.css&#39;)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;CSS压缩</span><br><span class="line">gulp.task(&#39;cssmin&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;css&#x2F;main.css&#39;,&#39;!.&#x2F;public&#x2F;css&#x2F;*min.css&#39;])   </span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;css&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;图片压缩</span><br><span class="line">gulp.task(&#39;images&#39;, function() &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;uploads&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: false</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;uploads&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 html文件 public&#x2F;**&#x2F;*.hmtl 表示public下所有文件夹中html，包括当前目录</span><br><span class="line">    gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">      return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">             removeComments: true,</span><br><span class="line">             minifyJS: true,</span><br><span class="line">             minifyCSS: true,</span><br><span class="line">             minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">    &#125;);</span><br><span class="line">gulp.task(&#39;build&#39;, [&#39;uglify&#39;, &#39;cssmin&#39;, &#39;fancybox:js&#39;, &#39;fancybox:css&#39;, &#39;jsall&#39;,&#39;images&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;, &#39;minify-html&#39;</span><br></pre></td></tr></table></figure><p><em>在package.json文件中写入：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">“build”: “hexo clean &amp;&amp; hexo g &amp;&amp; gulp build ”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>如图：</em></p><p><a href="https://imgchr.com/i/82S7dK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/82S7dK.png" alt="82S7dK.png" border="0"></a></p><p> <em>输入命令：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><em>就可实现hexo clean ,hexo generator,压缩的功能，再hexo deploy，就可以了(这里我把hexo deploy一起放在了里面，可以直接完成全过程）</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> seo </tag>
            
            <tag> 压缩文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的seo优化之seo优化开启</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bseo%E4%BC%98%E5%8C%96%E5%BC%80%E5%90%AF.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bseo%E4%BC%98%E5%8C%96%E5%BC%80%E5%90%AF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="开启seo优化选项"><a href="#开启seo优化选项" class="headerlink" title="开启seo优化选项"></a>开启seo优化选项</h2><p><em>/themes/next/config.yml中开启：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seo: true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keywords:网站域名</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo优化 </tag>
            
            <tag> 开启 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seo优化之准备工作</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="生成站点地图-sitemap-xml和baidusitemap-xml"><a href="#生成站点地图-sitemap-xml和baidusitemap-xml" class="headerlink" title="生成站点地图 sitemap.xml和baidusitemap.xml"></a>生成站点地图 sitemap.xml和baidusitemap.xml</h2><p><em>在根目录下，打开git bash输入如下命令：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save      </span><br><span class="line"></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p><em>在站点目录的配置文件_config.yml中添加如下代码：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p><em>这样每次执行完heox generator,都会在/Public/里生成*</em>sitemap.xml<strong>和</strong>baidusitemap.xml***</p><h2 id="优化网页URL"><a href="#优化网页URL" class="headerlink" title="优化网页URL"></a>优化网页URL</h2><p><em>seo搜索引擎认为最优的网页是从主页点三次就可以到任何页面，但是默认生成的是：<strong>sitename/year/mounth/day/title</strong>四层结构，这样的结构不理由seo，爬虫经常爬取不到我们的文章，所以我们要将我们的url更改成sitename/title。配置站点文件_Config.xml如下：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;你的网站</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/8gUDFP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/8gUDFP.png" alt="8gUDFP.png" border="0"></a></p><p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p><p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> seo </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的seo优化之s首页标题优化</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%87%E9%A2%98%E4%BC%98%E5%8C%96.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%87%E9%A2%98%E4%BC%98%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="首页标题优化"><a href="#首页标题优化" class="headerlink" title="首页标题优化"></a>首页标题优化</h2><p><em>seo最重要的是你的标题，一般搜索都是搜索你的标题。更改themes\next\layout\index.swig文件</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><em>改成</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><em>这时候你的首页会更符合网站名称 - 网站描述这习惯。</em></p><p><em>进阶，做了seo优化，把关键词也显示在title标题里，可改成：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><em>注意：别堆砌关键字，整个标题一般不超过80个字符，可以通过chinaz的seo综合查询检查。</em></p><p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p><p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 标题优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seo优化之关键词与描述</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%8E%E6%8F%8F%E8%BF%B0.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%8E%E6%8F%8F%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="关键词与描述"><a href="#关键词与描述" class="headerlink" title="关键词与描述"></a>关键词与描述</h2><p><em>搜索引擎除了捉取标题外，页面的关键词和描述也会抓取</em></p><p><em>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键词和描述：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keywords: </span><br><span class="line">description:</span><br></pre></td></tr></table></figure><p><em>将以下代码去掉：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.description %&#125;</span><br><span class="line">  &#123;&#123; post.description &#125;&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-more-link text-center&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;btn&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">      &#123;&#123; __(&#39;post.read_more&#39;) &#125;&#125; &amp;raquo;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>否则首页的文章摘要就会变成文章的description，也就是没有文章预览那里的概述了</strong></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 优化 </tag>
            
            <tag> 关键词与描述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的seo优化之nofollow</title>
      <link href="/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bnofollow.html"/>
      <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bnofollow.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="优化nofollow"><a href="#优化nofollow" class="headerlink" title="优化nofollow"></a>优化nofollow</h2><p><em>给非友情链接的出站链接添加 “nofollow” 标签，nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。</em></p><p><em>找到themes\next\layout_partials\footer.swig文件的：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot;&gt;Hexo&lt;&#x2F;a&gt;&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><p><em>改成：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot; rel&#x3D;&quot;external nofollow&gt;Hexo&lt;&#x2F;a&gt;&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure><p><em>将下面代码：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;</span><br></pre></td></tr></table></figure><p><em>改成：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure><p><em>修改sidebar.swig文件，在themes\next\layout_macro，将下面代码：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><em>改成：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><em>将下面代码：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br></pre></td></tr></table></figure><p><em>改成：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure><p><em>安装nofollow插件</em></p><p><em>减少出站链接能够有效防止权重分散，hexo有很方便的自动为出站链接添加nofollow的插件。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure><p><em>在站点配置文件加入：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line">    - www.langzi.fun</span><br><span class="line">    - 友链地址</span><br></pre></td></tr></table></figure><p><strong>这样例外的链接不会加上nofollow</strong></p><h2 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h2><p><em>创建blog/source/robots.txt文件，加入如下内容</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User-agent: * Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;categories&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;sitemap.xml</span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo优化 </tag>
            
            <tag> nofollw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm相关异常</title>
      <link href="/npm%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html"/>
      <url>/npm%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><ul><li><strong>npm install <a href="mailto:gulp@3.9.1" rel="external nofollow noopener noreferrer" target="_blank">gulp@3.9.1</a>时，npm ERR! Response timeout while trying to fetch <a href="https://registry.npmjs.org/gulp" target="_blank" rel="external nofollow noopener noreferrer">https://registry.npmjs.org/gulp</a>  (over 30000ms) npm ERR! A complete log of this run can be found in:</strong>                                                                                                                               </li></ul><p><em>解决：*npm chache clean –force,再换成手机热点就可以了</em></p><ul><li><strong>ReferenceError: primordials is not defined</strong></li></ul><p><em>解决：这是node和gulp版本不兼容的问题,解决连接<a href="https://blog.csdn.net/zxxzxx23/article/details/103000393" target="_blank" rel="external nofollow noopener noreferrer">在这里</a></em></p><p><em>我选择直接npm install <a href="mailto:node@11.15.0" rel="external nofollow noopener noreferrer" target="_blank">node@11.15.0</a></em>                        </p><blockquote><p>曾经以为非凡就是天赋激起的惊世骇浪，现在觉得非凡只是极平凡的认真和倔强。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm相关指令</title>
      <link href="/npm%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4.html"/>
      <url>/npm%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>npm chache clean –force</strong></p><p><strong>npm install 包@版本</strong></p><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo某些功能,配置引用的文章</title>
      <link href="/hexo%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0.html"/>
      <url>/hexo%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/visugar/p/6821777.html</a></p><p><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="external nofollow noopener noreferrer">https://segmentfault.com/a/1190000017986794</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p><a href="https://blog.csdn.net/baidu_35145586/article/details/89033631" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/baidu_35145586/article/details/89033631</a></p><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><p>[URL](<a href="https://www.jianshu.com/p/93341c0aacbf" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT主题中添加网页音乐播放器功能 - 简书</a>)</p><p>[URL](<a href="https://aplayer.js.org/#/zh-Hans/?id=歌词" target="_blank" rel="external nofollow noopener noreferrer">首页 - APlayer</a>)</p><p><a href="[Hexo主题插入音乐之aplayer音乐播放器_网络_hushhw的博客-CSDN博客](https://blog.csdn.net/hushhw/article/details/88092728)">URL</a></p><p>[URL](<a href="https://huabuyu.net/Hexo-NexT-打造APlayer-HTML5-音乐播放器.html#使用" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT 打造APlayer HTML5 音乐播放器 | 一切归于平静</a>)</p><p>[URL](<a href="https://www.bzqll.com/2017/12/84.html" target="_blank" rel="external nofollow noopener noreferrer">hexo添加Aplayer音乐播放插件 - 鼻子亲了脸</a>)</p><p>[URL](<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">NexT主题添加音乐 - 简书</a>)</p><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p><a href="https://segmentfault.com/a/1190000014085547" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><p><a href="https://www.jianshu.com/p/f58f68522db2" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><h2 id="博客头像"><a href="#博客头像" class="headerlink" title="博客头像"></a>博客头像</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><p>[url](<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">hexo从零开始到搭建完整 - 爱吃面包的兰兰 - 博客园</a>)</p><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p><p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p><p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p><h2 id="字数，阅读时长，社交，打赏"><a href="#字数，阅读时长，社交，打赏" class="headerlink" title="字数，阅读时长，社交，打赏"></a>字数，阅读时长，社交，打赏</h2><h2 id="文章摘要显示"><a href="#文章摘要显示" class="headerlink" title="文章摘要显示"></a>文章摘要显示</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><h2 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h2><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章加密</title>
      <link href="/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86.html"/>
      <url>/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="普通加密"><a href="#普通加密" class="headerlink" title="普通加密"></a>普通加密</h2><p><em>这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。</em></p><p>在/themes/next/layout/custom/head.swig文件，<head></head>之间添加一下内容:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#JavaScript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文章头文件里添加上password:yourpassword就可以了</p><p><strong>缺点：容易被破解</strong></p><h2 id="hexo-blog-encrypt插件"><a href="#hexo-blog-encrypt插件" class="headerlink" title="hexo-blog-encrypt插件"></a>hexo-blog-encrypt插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm install –save hexo-blog-encrypt</p><h3 id="配置站点-config-yml文件"><a href="#配置站点-config-yml文件" class="headerlink" title="配置站点_config.yml文件"></a>配置站点_config.yml文件</h3><p><strong>加入一下内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>文章头部加入下面内容:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">keywords</span>: 博客文章密码</span><br><span class="line"><span class="selector-tag">password</span>: <span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">abstract</span>: 密码：<span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">message</span>:  输入密码，查看文章</span><br></pre></td></tr></table></figure><ul><li>password: 是该博客加密使用的密码</li><li>abstract: 是该博客的摘要，会显示在博客的列表页</li><li>message: 这个是博客查看时，密码输入框上面的描述性文字</li></ul><h3 id="使用自定义默认信息"><a href="#使用自定义默认信息" class="headerlink" title="使用自定义默认信息"></a>使用自定义默认信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure><p><em>这样不用每篇文章都写abstract，message</em></p><h3 id="对TOC加密-这是什么我也不懂"><a href="#对TOC加密-这是什么我也不懂" class="headerlink" title="对TOC加密(这是什么我也不懂)"></a>对TOC加密(这是什么我也不懂)</h3><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密</strong></a></p><p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密2</strong></a></p><p><em>原文链接：<a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/Lancelot_Lewis/article/details/53422901</a></em></p><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>URL</strong></a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> encrypt </tag>
            
            <tag> TOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 java程序设计概述</title>
      <link href="/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html"/>
      <url>/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="24e26e4dc9a542a9f100644db6b1fd7e00b2617f9739bfd57038032f78c5ac10"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo首页文章预显示设置</title>
      <link href="/hexo%E6%96%87%E7%AB%A0%E9%A2%84%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE.html"/>
      <url>/hexo%E6%96%87%E7%AB%A0%E9%A2%84%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="预显示设置"><a href="#预显示设置" class="headerlink" title="预显示设置"></a>预显示设置</h2><h3 id="使用-lt-more-gt-手动截断"><a href="#使用-lt-more-gt-手动截断" class="headerlink" title="使用&lt;!-more-&gt;手动截断"></a>使用&lt;!-more-&gt;手动截断</h3><h3 id="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"><a href="#在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。" class="headerlink" title="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"></a>在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</h3><p><strong>在文章的 front-matter 中添加 description 和 photos 字段，如下图所示。如果不需要显示图片的话，可以把 photos 去掉。</strong></p><p><a href="https://imgchr.com/i/8DRTPI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRTPI.png" alt="8DRTPI.png" border="0" width="400/"></a></p><h3 id="自动形成摘录"><a href="#自动形成摘录" class="headerlink" title="自动形成摘录"></a>自动形成摘录</h3><p><strong>在主题配置文件_config.yml中auto_excerpt</strong></p><p><a href="https://imgchr.com/i/8DRDa9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRDa9.png" alt="8DRDa9.png" border="0"></a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预显示 </tag>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客头像设置</title>
      <link href="/hexo%E5%8D%9A%E5%AE%A2%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE.html"/>
      <url>/hexo%E5%8D%9A%E5%AE%A2%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="博客头像设置"><a href="#博客头像设置" class="headerlink" title="博客头像设置"></a>博客头像设置</h2><h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p><strong>打开主题的_config.yml文件，在avatar处添加主题下/source/images/里的自己添加的图片</strong></p><p><a href="https://imgchr.com/i/8DcNvD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcNvD.png" alt="8DcNvD.png" border="0"></a></p><p><strong>刷新成功显示</strong></p><p><a href="https://imgchr.com/i/8DcH2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcH2T.png" alt="8DcH2T.png" border="0" height="250/"></a></p><h3 id="头像圆角并旋转"><a href="#头像圆角并旋转" class="headerlink" title="头像圆角并旋转"></a>头像圆角并旋转</h3><p><em>我就不搞这功能了，看着头晕</em></p><p><strong>打开主题下的 source\css_common\components\sidebar\sidebar-author.styl文件(不同版本和不同主题可能路径有些许不同，添加下面的代码即可</strong></p><p><code>.site-author-image {</code><br>  <code>display: block;</code><br>  <code>margin: 0 auto;</code><br>  <code>padding: $site-author-image-padding;</code><br>  <code>max-width: $site-author-image-width;</code><br>  <code>height: $site-author-image-height;</code><br>  <code>border: $site-author-image-border-width solid $site-author-image-border-color;</code><br>  <code>/* 头像圆形 */  border-radius: 80px;  -webkit-border-radius: 80px;  -moz-border-radius: 80px;  box-shadow: inset 0 -1px 0 #333sf;  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</code><br>    <code>(1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</code></p><p>  <code>/* 鼠标经过头像旋转360度 */  -webkit-transition: -webkit-transform 1.0s ease-out;  -moz-transition: -moz-transform 1.0s ease-out;  transition: transform 1.0s ease-out;}img:hover {  /* 鼠标经过停止头像旋转</code><br>  <code>-webkit-animation-play-state:paused;</code><br>  <code>animation-play-state:paused;*/  /* 鼠标经过头像旋转360度 */  -webkit-transform: rotateZ(360deg);  -moz-transform: rotateZ(360deg);  transform: rotateZ(360deg);}/* Z 轴旋转动画 */</code><br><code>@-webkit-keyframes play {</code><br>  <code>0% {</code><br>    <code>-webkit-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-webkit-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@-moz-keyframes play {</code><br>  <code>0% {</code><br>    <code>-moz-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-moz-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@keyframes play {</code><br>  <code>0% {</code><br>    <code>transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code></p><hr><blockquote><p>他人生最大的失败就是听从于懒惰、怯懦与害羞。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 头像 </tag>
            
            <tag> 圆角 </tag>
            
            <tag> 旋转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维码生成和解码</title>
      <link href="/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E7%A0%81.html"/>
      <url>/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="草料二维码"><a href="#草料二维码" class="headerlink" title="草料二维码"></a>草料二维码</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://cli.im/" target="_blank" rel="external nofollow noopener noreferrer"><strong>草料二维码</strong></a></p><h3 id="总界面："><a href="#总界面：" class="headerlink" title="总界面："></a>总界面：</h3><p><a href="https://imgchr.com/i/8DwxLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwxLq.md.png" alt="8DwxLq.png" border="0" width="400/"></a></p><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><h4 id="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"><a href="#支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码" class="headerlink" title="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"></a><em>支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码</em></h4><h4 id="二维码解码：生成对应资源的URL链接"><a href="#二维码解码：生成对应资源的URL链接" class="headerlink" title="二维码解码：生成对应资源的URL链接"></a><em>二维码解码</em>：生成对应资源的URL链接</h4><h4 id="二维码美化："><a href="#二维码美化：" class="headerlink" title="二维码美化："></a><em>二维码美化</em>：</h4><h5 id="快速美化器："><a href="#快速美化器：" class="headerlink" title="快速美化器："></a><em>快速美化器：</em></h5><p><a href="https://imgchr.com/i/8DwVVf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwVVf.md.png" alt="8DwVVf.png" border="0" width="400/"></a></p><p><em>效果图</em></p><p><a href="https://imgchr.com/i/8Dd5UU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8Dd5UU.md.png" alt="8Dd5UU.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdTC4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdTC4.md.png" alt="8DdTC4.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdI5F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdI5F.md.png" alt="8DdI5F.md.png" border="0" width="400"></a></p><h5 id="高级美化"><a href="#高级美化" class="headerlink" title="高级美化:"></a><em>高级美化:</em></h5><p><a href="https://imgchr.com/i/8DdvVK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdvVK.md.png" alt="8DdvVK.png" border="0" width="400/"></a></p><hr><blockquote><p>没有伞的孩子，必须努力奔跑!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 二维码 </tag>
            
            <tag> 解码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo打赏评论字数时长</title>
      <link href="/hexo%E6%89%93%E8%B5%8F%E8%AF%84%E8%AE%BA%E5%AD%97%E6%95%B0%E6%97%B6%E9%95%BF.html"/>
      <url>/hexo%E6%89%93%E8%B5%8F%E8%AF%84%E8%AE%BA%E5%AD%97%E6%95%B0%E6%97%B6%E9%95%BF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 打赏 </tag>
            
            <tag> 评论 </tag>
            
            <tag> 阅读时长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo草稿功能</title>
      <link href="/hexo%E8%8D%89%E7%A8%BF%E5%8A%9F%E8%83%BD.html"/>
      <url>/hexo%E8%8D%89%E7%A8%BF%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><em>草稿不会在博客上显示</em></p><h2 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h2><p><em>hexo new draft 草稿名</em></p><p>*生成的草稿在source/_drafts/文件夹中</p><h2 id="强行预览草稿"><a href="#强行预览草稿" class="headerlink" title="强行预览草稿"></a>强行预览草稿</h2><p><em>render_drafts:true/hexo server-drafts</em></p><h2 id="草稿变文章"><a href="#草稿变文章" class="headerlink" title="草稿变文章"></a>草稿变文章</h2><p><em>hexo publish [layout]</em></p><hr><blockquote><p>每天再多努力一点，每天坚持再久一点，你会发现很多事情没有那么难。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 草稿 </tag>
            
            <tag> draft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL直链和外链</title>
      <link href="/URL%E7%9B%B4%E9%93%BE%E5%92%8C%E5%A4%96%E9%93%BE.html"/>
      <url>/URL%E7%9B%B4%E9%93%BE%E5%92%8C%E5%A4%96%E9%93%BE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="直链"><a href="#直链" class="headerlink" title="直链"></a>直链</h2><p><em>直链是文件在网盘中的HTTP地址，可以直接外部下载，不用进入资源分享页面，直接得到文件的URL地址，可以实现很多功能，例如音乐，视频，应用等文件直接外部发布，下载，播放。</em></p><h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><p><em>外链是网盘资源分享之后得到的一个资源分享地址，要进入这个外链地址才能下载资源。</em></p><h2 id="直链网盘网友推荐"><a href="#直链网盘网友推荐" class="headerlink" title="直链网盘网友推荐"></a>直链网盘网友推荐</h2><p><a href="https://www.baidu.com/s?wd=%E5%8D%8E%E4%B8%BA%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">华为网盘</a></p><p><a href="https://www.baidu.com/s?wd=%E5%92%95%E5%92%95%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">咕咕网盘</a></p><p><a href="https://www.baidu.com/s?wd=%E9%98%BF%E9%87%8C%E4%BA%91&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">阿里云</a></p><p><a href="https://www.zhihu.com/question/22861418/answer/138664832" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><p><em>用了几个直链的网盘，能真正做到的有华为网盘，咕咕网盘和阿里云</em></p><p><em>华为的直链不怎么推荐，价格贵，而且带宽低，最坑爹的一点是乱扣流量，例如文件有1G，一下子就扣1G流量，不管你下不下完。<br>阿里云的可以定制带宽，但是价格也就更高一些。<br>推荐用咕咕网盘的直链，流量便宜了很多，而且是下多少算不少流量，最牛的是可以包月不限流量。</em></p><blockquote><p>你不能要求拥有一个没有风暴的人生海洋，因为痛苦和磨难是人生的一部分。一个没有风暴的海洋，那不是海，是泥塘。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 直链 </tag>
            
            <tag> 外链 </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验课5-10_删除表</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-10_%E5%88%A0%E9%99%A4%E8%A1%A8.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-10_%E5%88%A0%E9%99%A4%E8%A1%A8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>视图</strong></p><p><em>表之间有关系时，先删除引用表</em></p><p><strong>SQL语句</strong></p><p><code>USE 数据库名</code></p><p><code>GO</code></p><p><code>DROP TABLE 表名</code></p><p><em>检测表是否存在</em></p><p><code>USE 数据库名</code></p><p><code>GO</code></p><p><code>SELECT * FROM sysobjects</code></p><p><code>IF EXISTS(SELECT * FROM sysobjects WHERE  name=&quot;表名&quot;)</code></p><p><code>DROP TABLE 表名</code></p><p><code>GO</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 删除表 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验课5-8_删除约束</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-8-%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-8-%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>视图状态下</strong></p><p><em>删除主外键关系:</em></p><p><em>删除主键</em></p><p><em>删除非空约束</em></p><p><em>删除检查约束</em></p><p><em>删除默认值</em></p><p><strong>SQL语句</strong></p><p><em>删除主键</em></p><p><code>USE 数据库名</code></p><p><code>GO</code></p><p><code>ALTER TABLE 表名</code></p><p><code>DROP CONSTRAINT 主键名</code></p><p><code>Go</code></p><p><em>删除检查约束</em></p><p><code>ALTER TABLE 表名</code></p><p><code>DROP CONSTRAINT 检查约束名</code></p><p><code>GO</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 约束 </tag>
            
            <tag> 删除 </tag>
            
            <tag> 视图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验课5-5_约束类型</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-5_%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-5_%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><a href="https://imgchr.com/i/80khvV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80khvV.md.png" alt="80khvV.md.png" border="0"></a><br><a href="https://imgchr.com/i/80krDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80krDS.md.png" alt="80krDS.md.png" border="0"></a></p><p><strong>视图状态下表属性单击右键：</strong></p><p><strong>设置主键</strong></p><p><strong>CKECK 约束</strong></p><p><strong>索引/键：</strong>设置是否唯一</p><p><strong>关系：</strong>两张表的外键关系</p><p><em>录入数据时，发生错误，会导致自增列的标号不符合预期</em></p><p><em>注意: 每次添加约束后记得保存</em></p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 约束类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验课5-4_SQL语句创建表</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-4_SQL%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E8%A1%A8.html"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-4_SQL%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E8%A1%A8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><code>USE 数据库名</code></p><p><code>go</code></p><p><code>CREATE TABLE 表名</code></p><p><code>(</code></p><p><code>属性名 数据类型 约束</code></p><p><code>)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 创建表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加音乐播放功能</title>
      <link href="/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%8A%9F%E8%83%BD.html"/>
      <url>/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="使用APlayer插件"><a href="#使用APlayer插件" class="headerlink" title="使用APlayer插件"></a>使用APlayer插件</h2><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noopener noreferrer">APlayer</a></p><p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p><ul><li><strong>网易音乐外链地址</strong>：<a href="http://jump.bdimg.com/safecheck/index?url=x+Z5mMbGPAv7zFgtRCFyfwPeGQWa6UVU1tw+/GrGs/EwXO5bOUA0jYHGYubpEQmJ1OuvZ0jD4CE/i30mCFy3Dzy9jb8WhszlJ4wo1bk82HMS/4MX7uYcHlTSn+om/dlEmQx7lZYIASURsAoa108DVnY9qHh6BM0y" target="_blank" rel="external nofollow noopener noreferrer">http://music.163.com/song/media/outer/url?id=</a> .mp3</li></ul><p><em>在网页版的网易音乐中找到想要的音乐获取ID，粘贴到上面url的id=处就可以获取音乐的外链</em></p><ul><li><strong>实现过程：</strong></li></ul><ol><li><p>下载Aplayer文件解压，将里面的dist文件夹复制到themes\next\source文件夹下</p></li><li><p>在themes\next\source\dist\路径下，新建music.js文件，内容如下：</p></li></ol><p><code>const ap = new APlayer({</code><br>    <code>container: document.getElementById(&#39;aplayer&#39;),</code><br>    <code>fixed: true,</code><br>    <code>autoplay: false,</code><br>    <code>audio: [</code><br>      <code>{</code><br>        <code>name: &quot;You are my sunshine&quot;,</code><br>        <code>artist: &#39;Elizabeth Mitchell&#39;,</code><br>        <code>url: &#39;https://s1.ax1x.com/2020/03/18/8dQvnI.th.jpg&#39;,</code><br>        <code>cover: &#39;https://imgchr.com/i/8dQvnI&#39;,</code><br>      <code>},</code><br>      <code>{</code><br>        <code>name: &#39;Shallow&#39;,</code><br>        <code>artist: &#39;Lady Gaga/Bradley Cooper&#39;,</code><br>        <code>url: &#39;http://music.163.com/song/media/outer/url?id=1313096578.mp3&#39;,</code><br>        <code>cover: &#39;https://s1.ax1x.com/2020/03/18/8d1EGD.th.jpg&#39;,</code><br>      <code>},</code><br>    <code>]</code><br><code>});</code></p><ol start="3"><li>在themes\next\layout_layout.swig文件最后(body标签里面），添加：</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>在hexo的左下面成功生成播放器</li><li>添加图片:把图片链接添加到第一次代码的对应歌曲处的图片链接里(我使用的是<a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床imgchr</a>,帮助上说的是无线存储，免费)。建议添加图片时，选着链接为缩略图的链接。</li><li>刷新，成功显示播放器并且可以正常显示图片和播放音乐</li></ol><p><a href="https://imgchr.com/i/8d8gV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8d8gV1.md.png" alt="8d8gV1.png" border="0"></a></p><ol start="7"><li>歌词实现:</li></ol><ul><li><p>网易歌词<a href="https://www.zhihu.com/question/27638171/answer/146004899" target="_blank" rel="external nofollow noopener noreferrer">获取</a></p></li><li><p>待更新</p></li></ul><h2 id="使用网易外链播放器-歌曲很容易收版权限制"><a href="#使用网易外链播放器-歌曲很容易收版权限制" class="headerlink" title="使用网易外链播放器(歌曲很容易收版权限制)"></a>使用网易外链播放器(歌曲很容易收版权限制)</h2><p>**直接在网页版网易音乐里找到单曲或歌单，直接生成外链播放器的HTML。把HTML放到想要展示的地方就可以了</p><p><a href="https://imgchr.com/i/8wnJcn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnJcn.md.png" alt="8wnJcn.md.png" border="0"></a><br><a href="https://imgchr.com/i/8wnG1s" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnG1s.md.png" alt="8wnG1s.md.png" border="0"></a></p><p><em>网易很容易受版权限制，无法生成外链播放器</em></p><h2 id="Aplayer的MeingJS"><a href="#Aplayer的MeingJS" class="headerlink" title="Aplayer的MeingJS"></a>Aplayer的MeingJS</h2><p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><h2 id="使用html标签"><a href="#使用html标签" class="headerlink" title="使用html标签"></a>使用html标签</h2><p>写法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/song/media/outer/url?id=1313096578.mp3"</span> <span class="attr">style</span>=<span class="string">"max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;"</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">preload</span>=<span class="string">"meta"</span>&gt;</span>Your browser does not support the audio tag.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用APlayer标签"><a href="#使用APlayer标签" class="headerlink" title="使用APlayer标签"></a>使用APlayer标签</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><p><strong>借鉴<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">链接</a></strong></p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 音乐播放 </tag>
            
            <tag> APlayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-第二章</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id><a href="#" class="headerlink" title="."></a>.</h2><h2 id="物理层-重点是概念"><a href="#物理层-重点是概念" class="headerlink" title="物理层(重点是概念)"></a>物理层(重点是概念)</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><p><em>物理层考虑的是怎样才能在连接计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体</em></p><p><em>用于物理层的协议叫做*</em>物理层规程***</p><p><em>物理层的具体任务是确定与传输媒体的接口有关的一些特性，即：</em></p><ul><li><strong>机械特性</strong>:可见特征</li><li><strong>电气特性</strong>：电压范围</li><li><strong>功能特性</strong>: 某一电平电压表示何种意义</li><li><strong>过程特性</strong>： 指明不同功能的各种可能事件的出现顺序</li></ul><p><em>数据在计算机中多采用*</em>并行传输<strong>方式，在通信线路中传输方式一般为</strong>串行传输***</p><p><em>物理层协议种类多，是因为物理连接方式很多(<strong>点对点，多点连接或广播连接</strong>)，而传输媒体的种类也很多(如架空明线，双绞线，对称电缆，同轴电缆，光缆，以及各种波段的无线信道等)</em></p><h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><h4 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h4><p><em>一个数据通信系统可划分为三大部分，即*</em>原系统(或发送端，发送方)，传输系统(或传输网络)和目的系统(或接收端，接收方)</p><img src="https://s1.ax1x.com/2020/03/17/8a4Qtx.png" alt="8a4Qtx.png" border="0"><p>​                                    <em>图2-1 数据通信系统的模型(也可以说它是计算机网络)</em></p><ul><li><p>源系统一般包括以下两个部分:</p><p>源点:<em>又称*</em>源站或信源***</p><p>发送器: <em>常源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输。典型的发送器就是<strong>调制器</strong>。现在很多PC 使用内置的调制解调器（包含调制器和解调器）,用户在PC 外面看不见调制解调器</em></p></li><li><p>目的系统一般也包括以下两部分:</p><p>接收器:<em>接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息。典型的接收器就是<strong>解调器</strong>，它把来自传输线路上的模拟信号进行解调，提取出在在发送端置入的消息，还原岀发送端产生的数字比特流</em> </p><p>终点:<em>终点役备从接收器获取传送来的数字比特流，然后进行信息输出（例如，把汉字在P C 屏幕上显示出来）。终点又称为*</em>目的站<strong>或</strong>信宿***</p></li><li><p>连接源系统和目的系统的可以是简单的传输线，也可以是复杂的网络系统</p></li></ul><p><strong>常用术语:</strong></p><p>通信的目的是传送<strong>信息</strong></p><p><strong>数据</strong>是运送信息的实体</p><p><strong>信号</strong>则是数据的电气的或电磁的表现</p><p><strong>根据信号中代表信息的参数的取值不同，信号可以分为两大类：</strong></p><p><em>模拟信号，或连续信号</em>  消息的参数的取值是连续的  </p><p><em>数字信号,  或离散信号</em>   消 息 的 参 数 的 取 值 是 离 散 的 。在使用吋间域(或简称为吋域)的波形表示数字信号吋，则代表不同离散数值的基本波形就称为码元。在使用二进制编码吋，只有两种不同的码元， 一种 代 表 0 状态而另一种 代 表 1 状态。  </p><h4 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h4><p>信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此， 一条通信线路往往包含…条发送信<br>道和一条接收信道。  </p><p><em>通过双方信息交互方式不同可以分为:</em></p><ul><li>单向通信，又称为单工通信  </li><li>双向交替通信，又称为半双工通信</li><li>双向同时通信，又称为全双工通信  </li></ul><p><strong>基带信号</strong>：<em>来自信源的信号 (像计算机输出的代表各种文字或<br>图像文件的数据信号都属于基带信号）</em></p><p><strong>调制</strong>:   <em>基带信号往往包含有较多的低频成分，甚至有直流成<br>分。而许多信道并不能传输这种低频分量或直流分量。为了解决这一问题</em></p><p>调制:</p><ul><li>基带调制：<em>一类是仅仅对基带信号的波形进行变换，使它能够与信道特性相适应 ，变换后的信号仍然是基带信号</em></li><li>带通调制：<em>另一类则需要使用载波(earner)进行调制，把基带信号的频率范围搬移到较高的频段以便在信道中传输</em>，经过载波调制后的信号称为带通信号（即仅在一段频率范围内能够通过信道）  </li></ul><p><strong>最基本的带通调制方法有:</strong></p><ul><li>调幅（AM）, 即载波的振幅随基带数字信号而变化。例如， 0 或 1 分别对应于无载波或有载波输出 </li><li>调频（FM）, 即载波的频率随基带数字信号而变化。例如， 0 或 1 分别对应于频率久或无。  </li><li>调相（PM）, 即载波的初始相位随基带数字信号而变化。例如， 0 或 1 分别对应于相位 0° 或 180°  </li></ul><p><em>为了达到更高的信息传输速率，必须采用技术上更为复杂的多元制的振幅相位混合调制方法。例如，*</em>正交振幅调制 QAM （Quadrature Amplitude Modulation）***</p><h4 id="提高数据传输速率的途径"><a href="#提高数据传输速率的途径" class="headerlink" title="提高数据传输速率的途径"></a>提高数据传输速率的途径</h4><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h4 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h4><h4 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h4><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="频道复用，时分复用和统计时分复用"><a href="#频道复用，时分复用和统计时分复用" class="headerlink" title="频道复用，时分复用和统计时分复用"></a>频道复用，时分复用和统计时分复用</h4><h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><h4 id="脉码调制体制"><a href="#脉码调制体制" class="headerlink" title="脉码调制体制"></a>脉码调制体制</h4><h4 id="同步光纤网SONET和同步数字系统SDH"><a href="#同步光纤网SONET和同步数字系统SDH" class="headerlink" title="同步光纤网SONET和同步数字系统SDH"></a>同步光纤网SONET和同步数字系统SDH</h4><h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><h4 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h4><h4 id="光纤同轴混合网"><a href="#光纤同轴混合网" class="headerlink" title="光纤同轴混合网"></a>光纤同轴混合网</h4><h4 id="FTTx技术"><a href="#FTTx技术" class="headerlink" title="FTTx技术"></a>FTTx技术</h4><blockquote><p>你给世界什么姿态，世界将还你什么样的人生。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 第二章 </tag>
            
            <tag> 物理层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 shell命令操作HDFS-常用HDFS操作命令</title>
      <link href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html"/>
      <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><h3 id="常用的HDFS操作命令-hdfs-dfs"><a href="#常用的HDFS操作命令-hdfs-dfs" class="headerlink" title="常用的HDFS操作命令(hdfs dfs)"></a>常用的HDFS操作命令(hdfs dfs)</h3><h3 id="首先开启hdfs"><a href="#首先开启hdfs" class="headerlink" title="首先开启hdfs:"></a>首先开启hdfs:</h3><p>start-dfs.sh/start-all.sh</p><h3 id="用法查看："><a href="#用法查看：" class="headerlink" title="用法查看："></a>用法查看：</h3><p>hdfs dfs</p><h3 id="创建目录-p-表示会创建父目录"><a href="#创建目录-p-表示会创建父目录" class="headerlink" title="创建目录(-p 表示会创建父目录)"></a>创建目录(-p 表示会创建父目录)</h3><p>hdfs  dfs  -mkdir  /001</p><p>hdfs  dfs  -mkdir  /001/demo1   /001/demo2   /001/demo3 一次创建多个目录</p><p>hdfs  dfs  -mkdir  -p  /001/x/y  一次性创建多层目录</p><h3 id="列出子目录或子文件"><a href="#列出子目录或子文件" class="headerlink" title="列出子目录或子文件"></a>列出子目录或子文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls [-d][-h][-R] &lt;paths&gt;</span><br><span class="line">&#x2F;&#x2F; -d 返回 path; -h 人性化显示</span><br></pre></td></tr></table></figure><p>hdfs dfs -ls [path]</p><p>hdfs dfs -ls -R [path] 递归形式显示</p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><strong>将本地目录下的文件上传到HDFS上，并分别重命名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put [-f] [-p] &lt;localsrc&gt; &lt;dst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyFromLocal [-f] [-p] [-l] &lt;localsrc&gt; &lt;dst&gt;</span><br></pre></td></tr></table></figure><p>hdfs  dfs  -put  本地文件名  hdfs路径</p><p>hdfs  dfs  -copyFromLocal  本地文件名  hdfs路径</p><p>例: hdfs  dfs  -put  text1.txt   /001/demo1/hdfs1.txt</p><p>例: hdfs  dfs  -copyFromLocal  text1.txt   /001/demo1/hdfs1.txt</p><h3 id="将本地文件移动到HDFS"><a href="#将本地文件移动到HDFS" class="headerlink" title="将本地文件移动到HDFS"></a>将本地文件移动到HDFS</h3><p>hdfs  dfs  -moveFromLocal  本地文件名  HDFS路径</p><h3 id="下载文件到本地"><a href="#下载文件到本地" class="headerlink" title="下载文件到本地"></a>下载文件到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get [-p] &lt;src&gt; &lt;localdst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure><p>hdfs  dfs  copyToLocal  hdfs文件  本地path</p><p>hdfs  dfs  -get  hdfs文件  本地路径</p><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令： hdfs dfs -cat&#x2F;text[-ignoreCrc] &lt;src&gt;</span><br><span class="line"></span><br><span class="line">  hdfs dfs -tail [-f]&lt;file&gt;</span><br><span class="line">-ignoreCrc：忽略循环检验失败的文件。</span><br><span class="line">-f：动态更新显示数据</span><br></pre></td></tr></table></figure><p>hdfs  dfs  -cat  hdfs路径</p><p>hdfs  dfs  -text  hdfs路径</p><h3 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令： hdfs dfs -rm [-f] [-r] &lt;src&gt;</span><br><span class="line">-f：如果要删除的文件不存在，不显示错误信息。</span><br><span class="line">-r&#x2F;R：级联删除目录下所有的文件和子目录文件</span><br></pre></td></tr></table></figure><p>参数r为递归删除</p><p>hdfs  dfs  -rm  -r  hdfs文件</p><h3 id="追写文件"><a href="#追写文件" class="headerlink" title="追写文件"></a>追写文件</h3><p><em>命令： hdfs dfs -appendToFile <localsrc> <dst><br>该命令将 localsrc 指向的本地文件内容写入目标文件 dst。如果 localsrc 是“-”，表示数据来自键盘输入， “Ctrc+c”组合键结束输入</dst></localsrc></em>  </p><h3 id="复制文件或文件夹"><a href="#复制文件或文件夹" class="headerlink" title="复制文件或文件夹"></a>复制文件或文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令： hdfs dfs -cp [-f] [-p | -p[topax]] &lt;src&gt; &lt;dst&gt;</span><br><span class="line">-f：如果目标文件存在，将强行覆盖。</span><br><span class="line">-p：将保存文件的属性</span><br></pre></td></tr></table></figure><p>hdfs  dfs  -cp  hdfs文件/文件夹  hdfs文件名/hdfs文件夹</p><h3 id="文件或文件夹的移动"><a href="#文件或文件夹的移动" class="headerlink" title="文件或文件夹的移动"></a>文件或文件夹的移动</h3><p>hdfs  dfs  -mv  hdfs文件 hdfs路径/文件名</p><h3 id="使用touchz命令创建文件"><a href="#使用touchz命令创建文件" class="headerlink" title="使用touchz命令创建文件"></a>使用touchz命令创建文件</h3><p>hdfs  dfs   -touchz  文件</p><h3 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令： hdfs dfs -du [-s] [-h] &lt;path&gt;</span><br><span class="line">按字节显示指定目录所占空间大小。</span><br><span class="line">-s：显示指定目录下文件总的大小。</span><br><span class="line">-h： h 指“human-readble”，表示按照人性化的单位显示文件大小</span><br></pre></td></tr></table></figure><p>hdfs  dfs  -du  hdfs文件</p><h3 id="count统计-显示：目录个数，文件个数，文件总计大小"><a href="#count统计-显示：目录个数，文件个数，文件总计大小" class="headerlink" title="count统计(显示：目录个数，文件个数，文件总计大小)"></a>count统计(显示：目录个数，文件个数，文件总计大小)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令： hdfs dfs -count [-q] [-h] &lt;path&gt;</span><br><span class="line">统计某个目录下的子目录与文件的个数及文件大小。统计的结果包含目录数、文件数、文件大小、路径</span><br></pre></td></tr></table></figure><p>hdfs  dfs  -count  hdfs文件夹</p><h3 id="获取扩展属性，设置扩展属性"><a href="#获取扩展属性，设置扩展属性" class="headerlink" title="获取扩展属性，设置扩展属性"></a>获取扩展属性，设置扩展属性</h3><p>hdfs  dfs  -setfattr  -n  user.from  -v  <a href="http://www.baidu.com" target="_blank" rel="external nofollow noopener noreferrer">http://www.baidu.com</a>  hdfs文件</p><p> <a href="https://blog.csdn.net/u013525455/article/details/52795025" target="_blank" rel="external nofollow noopener noreferrer">setfattr详解</a></p><p>hdfs  dfs  -getfattr  -d  hdfs文件</p><p><a href="https://imgchr.com/i/YvHNOx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/23/YvHNOx.md.png" alt="YvHNOx.png" border="0"></a></p><h3 id="文件合并再下载"><a href="#文件合并再下载" class="headerlink" title="文件合并再下载"></a>文件合并再下载</h3><p><em>将路径中的文件合并并命名下载</em></p><p>hdfs  dfs  -getmerge  文件夹  文件名</p><h3 id="追加数据文件末尾的指令"><a href="#追加数据文件末尾的指令" class="headerlink" title="追加数据文件末尾的指令"></a>追加数据文件末尾的指令</h3><p>hdfs  dfs  -appendToFile  本地文件  hdfs文件</p><h3 id="打印Block报告"><a href="#打印Block报告" class="headerlink" title="打印Block报告"></a>打印Block报告</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks</p><h3 id="打印文件块的位置信息-locations"><a href="#打印文件块的位置信息-locations" class="headerlink" title="打印文件块的位置信息(-locations)"></a>打印文件块的位置信息(-locations)</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks -locations</p><p><a href="https://imgchr.com/i/GJf7in" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJf7in.md.png" alt="GJf7in.png" border="0"></a></p><hr><blockquote><p>过去的别再遗憾</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> HDFS </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop相关异常</title>
      <link href="/hadoop%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html"/>
      <url>/hadoop%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" src="/js/src/bai.js"></script><hr><h2 id="下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied"><a href="#下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied" class="headerlink" title="下载文件到本地  get: /hdfs1.txt.COPYING (Permission denied)"></a>下载文件到本地  get: /hdfs1.txt.<em>COPYING</em> (Permission denied)</h2><p><strong>权限问题</strong></p><h2 id="使用java-api-操作hdfs时不能-端口拒绝访问call-from-…"><a href="#使用java-api-操作hdfs时不能-端口拒绝访问call-from-…" class="headerlink" title="使用java api 操作hdfs时不能 端口拒绝访问call from …"></a>使用java api 操作hdfs时不能 端口拒绝访问call from …</h2><ul><li>防火墙没有关闭</li></ul><p><em>sudo ufw status</em></p><p><em>sudo ufw disable</em></p><ul><li>hdfs没打开</li></ul><p>start-all.sh</p><h2 id="safeModeException"><a href="#safeModeException" class="headerlink" title="safeModeException"></a>safeModeException</h2><p><em>没有关闭安全模式：hdsf dfsadmin -safemode leave</em></p><p><em>状态：hdfs dfsadmin -safemode get</em></p><p><em>进入：hdfs dfsadmin -safemode enter</em></p><h2 id="使用JavaAPI操作HDFS创建目录和权限问题"><a href="#使用JavaAPI操作HDFS创建目录和权限问题" class="headerlink" title="使用JavaAPI操作HDFS创建目录和权限问题"></a>使用JavaAPI操作HDFS创建目录和权限问题</h2><p><strong>第一种方式：//指定当前用户为root用户</strong><br>             <strong>System.setProperty(“HADOOP_USER_NAME”, “root”);</strong></p><p>   <strong>第二种方式：通过java的-D方式参数，-D可以理解是取参数的，如图所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20190103202106296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt="uri"></p><p><img src="https://img-blog.csdnimg.cn/20190103202137943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt></p><p> <strong>第三种方式：dfs.permissions –&gt;false ; 默认是ture,修改就行。</strong></p><p> <strong>第四种方式：命令 -chmod 改变hdfs的目录权限</strong></p><h2 id="java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs"><a href="#java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs" class="headerlink" title="java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs"></a>java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs</h2><p><em>sudo ufw disable</em></p><p><em>hdfs dfs -safemode leave</em></p><p><em>start-dfs.sh</em></p><h2 id="hadoop命令行执行mapreduce作业时报错"><a href="#hadoop命令行执行mapreduce作业时报错" class="headerlink" title="hadoop命令行执行mapreduce作业时报错"></a>hadoop命令行执行mapreduce作业时报错</h2><h3 id="output输出路径已存在"><a href="#output输出路径已存在" class="headerlink" title="output输出路径已存在"></a>output输出路径已存在</h3><p><a href="https://imgchr.com/i/J4fDL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fDL6.md.png" alt="J4fDL6.png" border="0"></a></p><p><strong>解决：</strong></p><p><em>输出路径不能已存在</em></p><p><em>命令中不需要主文件参数：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar xxx.jar input路径 output路径</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/J4fvyq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fvyq.md.png" alt="J4fvyq.md.png" border="0"></a><br><a href="https://imgchr.com/i/J4fjln" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fjln.md.png" alt="J4fjln.md.png" border="0"></a></p><h2 id="使用java-api-操作hdfs时接口传字符，需要是双引号"><a href="#使用java-api-操作hdfs时接口传字符，需要是双引号" class="headerlink" title="使用java api 操作hdfs时接口传字符，需要是双引号"></a>使用java api 操作hdfs时接口传字符，需要是双引号</h2><blockquote><p>可以传达自己的思想，但是没必要同化他人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
            <tag> Hadoop </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 shell命令操作HDFS-常用HDFS管理命令</title>
      <link href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html"/>
      <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><h3 id="查看hdfs所有管理命令"><a href="#查看hdfs所有管理命令" class="headerlink" title="查看hdfs所有管理命令"></a>查看hdfs所有管理命令</h3><p><em>hdfs dfsadmin</em></p><h3 id="查看命令用法"><a href="#查看命令用法" class="headerlink" title="查看命令用法"></a>查看命令用法</h3><p><em>hdfs dfsadmin -help</em></p><h3 id="安全模式相关练习实践"><a href="#安全模式相关练习实践" class="headerlink" title="安全模式相关练习实践"></a>安全模式相关练习实践</h3><p><em>首先要启动hdfs</em>: start-dfs.sh</p><p><em>hdfs dfsadmin -safemode enter</em> 进入安全模式</p><p><em>hdfs dfsadmin -safemode get</em>  获取状态</p><p><em>hdfs dfsadmin -safemode wait</em></p><p><em>hdfs dfsadmin -safemode leave</em>  退出</p><h3 id="快照相关练习实验"><a href="#快照相关练习实验" class="headerlink" title="快照相关练习实验"></a>快照相关练习实验</h3><p><a href="https://www.cnblogs.com/JackQ/p/4586663.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><p><em>Hdfs的快照（snapshot）是在某一时间点对指定文件系统拷贝，快照采用只读模式，可以对重要数据进行恢复、防止用户错误性的操作</em></p><p><em>快照是对文件数据进行保护的措施，可以对错误操作恢复数据。<strong>只能</strong>在允许的路径上创建快照，<strong>子路径</strong>也不可以。创建快照的路径不可以删除</em></p><p><strong>开启</strong></p><p><em>hdfs  dfsadmin  -allowSnapshot <smapshotdir></smapshotdir></em></p><p><strong>关闭</strong></p><p><em>hdfs  dfsadmin  -disallowSnapshot <snapshotdir></snapshotdir></em></p><p><strong>例</strong></p><p><em>hdfs  dfsadmin  -allowSnapshot  /001/mydemo</em></p><p><em>hdfs  dfsadmin  -disallowSnapshot /001/mydemo</em></p><p><strong>创建并命名</strong></p><p><em>hdfs  dfs  -createSnapshot  hdfs路径 名字</em></p><p><strong>删除</strong></p><p><em>hdfs dfs  -deleteSnapshot  hdfs路径 名字</em></p><p><strong>重命名</strong></p><p><em>hdfs dfs -renameSnapshot hdfs路径 oldname newname</em></p><h4 id="查看所有快照"><a href="#查看所有快照" class="headerlink" title="查看所有快照"></a>查看所有快照</h4><p><em>hdfs lsSnapshottableDir</em></p><h4 id="查看某一个具体快照"><a href="#查看某一个具体快照" class="headerlink" title="查看某一个具体快照"></a>查看某一个具体快照</h4><p><em>创建快照时候，默认的文件夹是.snapshot 查看时候必须加上.snapshot才能看到里面备份的东西</em></p><p><em>hdfs dfs -ls 路径/.snapshot/</em></p><img src="https://s1.ax1x.com/2020/05/23/YvvR2D.png" alt="YvvR2D.png" border="0"><h4 id="快照对比"><a href="#快照对比" class="headerlink" title="快照对比"></a>快照对比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdfs snapshotDiff &lt;path&gt; &lt;fromSnapshot&gt; &lt;toSnapshot&gt;</span><br><span class="line">例如： </span><br><span class="line">执行命令 hdfs snapshotDiff  &#x2F;Workspace&#x2F;linlin bak1 bak2</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/05/23/YvvbPf.png" alt="YvvbPf.png" border="0"><h3 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h3><p><em>HDFS允许管理员给私人目录设置其下面文件夹和文件的总数量配额，或空间使用总量配额。所以HDFS配额的对象是目录，而非用户。如果需要实现用户级别的配额，则需要采用第三方系统进行逻辑管理并映射到文件夹配额。</em></p><h4 id="文件配额"><a href="#文件配额" class="headerlink" title="文件配额"></a>文件配额</h4><p><em>文件数配额指的是可以限制当前文件夹下，所有文件和文件夹的总数量</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建</span><br><span class="line">hdfs dfsadmin  -setQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br><span class="line">--删除</span><br><span class="line">hdfs dfsadmin -clrQuota &lt;directory&gt;...&lt;directory&gt;</span><br></pre></td></tr></table></figure><p><em>hdfs dfsadmin  -setQuota 3  /001/mydemo3</em></p><h4 id="空间配额"><a href="#空间配额" class="headerlink" title="空间配额"></a>空间配额</h4><p><em>空间配额指的是可以限制当前文件夹下，所有文件（包含子文件夹中的数据文件，会递归的去统计）的总大小</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin  -setSpaceQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br></pre></td></tr></table></figure><p><em>hdfs dfsadmin  -setSpaceQuota 134217728 /mydemo4</em></p><h3 id="报告文件系统的基本信息和统计信息"><a href="#报告文件系统的基本信息和统计信息" class="headerlink" title="报告文件系统的基本信息和统计信息"></a>报告文件系统的基本信息和统计信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure><h3 id="查看拓扑实验"><a href="#查看拓扑实验" class="headerlink" title="查看拓扑实验"></a>查看拓扑实验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -printTopology</span><br></pre></td></tr></table></figure><hr><blockquote><p>事常与人违，事总在人为</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> HDFS </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章添加图片</title>
      <link href="/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87.html"/>
      <url>/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="目前知道的和去尝试了的图片添加方式有以下几种"><a href="#目前知道的和去尝试了的图片添加方式有以下几种" class="headerlink" title="目前知道的和去尝试了的图片添加方式有以下几种:"></a>目前知道的和去尝试了的图片添加方式有以下几种:</h2><p><em>首先本地上传需要安装</em> <em>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save<em>，</em>这个为0.0.5版本，网上针对1.0.0(npm install hexo-asset-iamge –save)后期图片加载不出，大都用0.0.5版本</em></p><ul><li><strong>绝对路径</strong>：</li></ul><p><em>在source路径下创建images文件夹，图片保存在这里面</em></p><p><strong>格式:</strong></p><p><em>/images/图片名</em></p><ul><li><strong>相对路径</strong>(<em>在主页无法显示</em>)：</li></ul><p><em>根目录下的_config.yml里的post_asset_folder设置为true。创建文章时，会同时创建同名文件夹，把图片放在同名文件夹里，再在hexo文章里用相对路径引入图片</em></p><p><strong>格式：</strong></p><p><em>同名文件夹/图片名</em></p><p><strong>前两种针对图片在本地</strong></p><p><em>在线图片</em>：</p><ul><li><p><strong><a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床</a></strong>  </p></li><li><p><strong><a href="https://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">cloudinary</a></strong></p></li></ul><h2 id="用imgchr添加图片"><a href="#用imgchr添加图片" class="headerlink" title="用imgchr添加图片"></a>用imgchr添加图片</h2><p><em>imgchr可以无限使用，免费，且不会被删图，提供各种形式图片链接</em></p><p><a href="https://imgchr.com/i/8dGXwR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dGXwR.md.png" alt="8dGXwR.png" border="0"></a></p><p><a href="https://imgchr.com/i/8dJ87n" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dJ87n.th.png" alt="8dJ87n.png" border="0" width="200/"></a></p><ul><li><strong>图片设置宽度</strong></li></ul><p>&lt;img src=”url” width=100</p><hr><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN是什么?</title>
      <link href="/CDN%E6%98%AF%E4%BB%80%E4%B9%88.html"/>
      <url>/CDN%E6%98%AF%E4%BB%80%E4%B9%88.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h2><p><strong>英文名</strong>: <em>Content Delivery Network</em></p><p><strong>中文名</strong>: <em>内容分发网络</em></p><p><strong>网友解释</strong>：<em>CDN也称内容分发网络，其原理大概是将服务内容分发至全网加速节点，让用户从就近的服务器节点上获取内容，从而提高网站的访问速度。大部分服务商（如阿里云，网易蜂巢，京东云等）的CDN服务是按使用量收费的，也有一些服务商提供免费的CDN服务。</em></p><p><strong>阿里云解释</strong>：<em>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</em></p><p><strong>知乎高级解释</strong>：<a href="https://www.zhihu.com/question/36514327" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><h2 id="免费的CDN"><a href="#免费的CDN" class="headerlink" title="免费的CDN"></a>免费的CDN</h2><p><a href="https://blog.csdn.net/weixin_42779969/article/details/101194863" target="_blank" rel="external nofollow noopener noreferrer">url</a></p><hr><blockquote><p>有志者，事竟成</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> 加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next添加字数和阅读时长</title>
      <link href="/next%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF.html"/>
      <url>/next%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><ul><li><strong>把theme底下的_config.yml里对应的设置开启</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  min2read: true          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  totalcount: false       <span class="comment"># 网站 字数统计</span></span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><ul><li>安装hexo-wordcount插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：*</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount@2 --save</span><br></pre></td></tr></table></figure><ul><li><p><strong>这样设置后对应的只有数字，没有“字”和“分钟”。打开<em>themes/next/layout/_macro/post.swig</em>，再通过以下设置即可：</strong></p><p><em>添加“<strong>字</strong>”</em></p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><em>改为</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><em>添加“<strong>分钟</strong>”</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; </span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="external nofollow noopener noreferrer">引用</a></strong></p><hr><blockquote><p>提出正确的问题，往往等于解决了问题的一大半!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读时长 </tag>
            
            <tag> 字数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo遇到的异常</title>
      <link href="/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html"/>
      <url>/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><ul><li><strong>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</strong></li></ul><p>​       <em>解决：文章最前面的分类，标签等，冒号后面需要一个空格且三个下划线不能丢失</em></p><ul><li><p><strong>突然github上的hexo打不开</strong></p><p><em>解决：可能是网络原因，重连网络</em></p></li><li><p><strong>gitalk评论时显示gitalk Error: Validation Failed</strong></p><p><em>原因：我也碰到了这个问题，研究了一下，发现是文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。提一下个人想法，不知道行不行得通：文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了，也存在区分度</em></p><p><em>解决：</em></p><p>​    <em>法一：</em></p><p><em><a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="external nofollow noopener noreferrer">下载</a>这个，把里面的md5.min.js放到<strong>source\js\src</strong>目录中</em></p><p><em>修改gitalk.swig文件的中间内容为:</em></p><p>​    <em>法二：通过<a href="https://blog.csdn.net/qing_gee/article/details/100134998" target="_blank" rel="external nofollow noopener noreferrer">其他</a>的查询只需要在gitalk.swig文件里的clientID上面添加一行<strong>id: decodeURL(‘‘),</strong>就可以了(应该是通过url里的特定段落进行转码，使其变短).</em></p></li></ul><ul><li><strong>hexo文章添加本地图片(网上的url图片可以成功加载)时，在local和github上不显示的问题</strong></li></ul><p><em>解决:</em> 网上有通过安装<em>hexo-asset-image</em> 插件，开启主目录下<em>_config.yml<em>里的</em>post_asset_folder<em>开关，来实现图片上传问题。经过长时间的尝试，不管是用相对路径(在同名文件夹里)，绝对路径(images里)，还有的说法是</em>hexo-asset-image<em>的</em>1.0.0</em>[]版本有问题，换成<em>0.0.5</em>[ <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save],但最终都以失败告终。</p><p><em>网上存储图片的方案有<a href="https://www.jianshu.com/p/ce98fbff39ac" target="_blank" rel="external nofollow noopener noreferrer">CDN</a>服务。比如<a href="http://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</em></p><p><strong>Please make sure you have the correct access rights<br>and the repository exists.FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/d" target="_blank" rel="external nofollow noopener noreferrer">https://hexo.io/d</a>                                                                                                                               ocs/troubleshooting.html</strong></p><p><em>解决：可能是网络原因，网上有说是ssh密匙的原因</em></p><hr><blockquote><p>感觉只能解决现象问题，理论才能解决本质问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>该博客目前想要完成的的功能!</title>
      <link href="/%E8%AF%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%89%8D%E6%83%B3%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E7%9A%84%E5%8A%9F%E8%83%BD.html"/>
      <url>/%E8%AF%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%89%8D%E6%83%B3%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9a2339bdc25e481f700692307de5e7661f783b754676e1bd9710758018c5efb8">3b0ee004644fe5725283a0fb8fd319fd229a203a8f32ef388e81ba35aba38c7b549c54b886430361985baa19612254eae404b4c5f3507fd3f7282fe40a1d88392928ecd0e3e4b840a9c8d1ab21efc70ebb1037601d7468151b1acb10ac32327d8588dab9c926e12860011302ac54c50e92e08ee2b711a9d12590ed1e00c1e9d7339bbf6451493a4c85fd7bab524ea7c2e4cac6a7da5a0b55ee58722d2bca8d4e3fb9ccc4d687889f603d3b298292581793ceb6140bc9bcdb7f8d6071556b4189a81780b21ad0fa48177a1c9f6c3a6ce3d378af29d5c43fe7e16fe5ce4969a47c4bbe6a9ad4790deade3ab15d6bc50b6f882da2a01bf33c7f297113556fa970012f6304e6612f8395fdc47762835d638512b02a7f23e28dbd3d7d9926b02ce6bc8f58376b9ad9f895cbc1d5203f33ae7f5c5b03348d894be0c9cfb138006bed5fcc9e53012be4fb71659a0546a873f2d61512d652e0cf99bd03d419dca5a7172a087e01de104f64b71c5af669db0032dfa699dac4fc7af0aaed4eccb0d2ac5aafd1060bc71a4a96f8a0eae2b9b9a32d6636fc968640822a09df9860500ecf5a589882cd41acbc9d767e70c111ba5b2898ac78596b4c718364c9c65d1f377e0c57631e571b730190ecb0212f337d24d90b122abf6776ecca0f391d1482b2b473daab0547f84abd1ce2f61887c45ad7433e1959c8d25f7d7f77b3569ab0fa4409d82923ab8cdff8cc7e798cb2e247c81ff8fbc72efadd9f28399b63329113cf061e153d21ad48ce5c74f175c2c28493613f8e65f90395450d37952f6b81994c481dad97c9c56d9070f84d96e58b057350779a3712978c5f4255d31eecf7bf309f47bb0e3f679d3c52bbd8cf40648c193365148afe0c6821b5eccaefb717cfb3e7228210d8c3c409dedb678cfed112046ebe7ad2901d1e1671ba5168fde6292048ca63134c3682d4aed99b914639c0549ff7ca38eaabbda6b3e9a425eb9a07cc08d9ba4c11b1557d9781672b9087e368f3e46db36c01371a0f88c923977e95174ac26acbfd26604b344f355e455abf4b094400bca9921246dd8709379ce44821ea1ee59534f61e8aac306225da16e294edfbea1f79e6da4b52f59aaa6164a9ff1fe35ed383968528d67f99174cd235bcd6418ec829b673f782b3580e8b26448fa8b5eaedfebaa0d55b49460c44cc8585bc613968b6d5e4404e45869429fae351b03c222f2cc18c863f1a30d6ba51fb33dcc574c45058da3c4b6c0fd014903d8d994ec9b004c9d9ba1040f91c4470b1df613280b0cdd9aaf0640d5ce63aef573b3f1835af05f37a74d6c73dab4a2ab82de4a16b81db0d35b359b8fccfc2b0013426b6ac29ca704b955327d09f93ad5755014947cfebb1b2935203aa8fdc28d4144ed334f3d6782e7beb87474f50aa8119d2b4a06370dec8815c336ff053902ec3e9091a72025ab70052bfa7ade7bca7843c19d0348527dad254174d048b7d542922284f83f32a58846aef22585f3e9b54d2a272a5b765daafd5cf3aff90fac7e88bb3a415ab71fe75fd60e10b67819d7780d8b8853ba50a8a36ffd98e3befa04eac9b9b8b1975e4deae9b26a9a82542b4994e6b25aaa648ce69e26bb22bc2148bc1641674e23bd0e28212c63ecec30b9d094aa85f3ea64fe7ff76d961fda6304026832e2d2512d790ff197fb79d2917d74e93</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所思所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloworld</title>
      <link href="/helloworld.html"/>
      <url>/helloworld.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world  !"></a>Hello, world  !</h1><h3 id="写这篇文章的目的是介绍一下自己为什么要创建自己的博客？"><a href="#写这篇文章的目的是介绍一下自己为什么要创建自己的博客？" class="headerlink" title="写这篇文章的目的是介绍一下自己为什么要创建自己的博客？"></a>写这篇文章的目的是介绍一下自己为什么要创建自己的博客？</h3><ul><li><p><strong>记录自己的日常奇思妙想，督促自己去用行动实践</strong></p><p><em>自己是一个有时候蛮多想法的人，但大多都是一时兴致，后期并没有去用行动实践</em></p></li><li><p><strong>记录日常get的新技能</strong></p><p><em>自己很容易忘记所学的知识，虽然我可能记录下来，也不会去看(这是我应该去改变的)，但总比什么都没有好吧</em></p></li><li><p><strong>记录一些已经大二下学期了，什么都不会，什么也不知道</strong></p></li><li><p><strong>也用过CSDN，没认真去写过，但感觉给我的印象没有那么好</strong></p></li><li><p><strong>有一个自己的网站也挺好的，可以当做自己的一个朋友，常来这里吐槽</strong></p></li><li><p><strong>用过EverNote，但目前功能并不完善，还有很多BUG</strong></p></li><li><p><strong>最终还是想让更多的人看到</strong></p></li></ul><hr><blockquote><p>多少事，从来急，天地转，光阴迫，一年太久，只争朝夕。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所思所想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
