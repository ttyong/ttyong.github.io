<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>大数据开发工程师-第一周</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AC%AC%E4%B8%80%E5%91%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><h2 id="群里问答"><a href="#群里问答" class="headerlink" title="群里问答"></a>群里问答</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即系查询框架哪个用的多?</span><br><span class="line">	impala，Elasticsearch、Druid、Presto、ClickHouse等都可以</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你们写好的SparkStreaming测试是怎么测试?在本地测试还是扔到Yarn测试?</span><br><span class="line">	一般是在测试环境里面测</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先IDEA 本地跑一下自测,然后放到测试环境的HDFS上 让yarn调度一下么?</span><br><span class="line">	是的，在本地验证代码的正确性，在测试集群中验证代码业务流程层面的正确性</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对实时计算所涉及的事务、容错性、可靠性有深入的理解</span><br><span class="line"></span><br><span class="line">这种问题，面试的时候  一般怎么回答？</span><br><span class="line">	分析下一下实时计算中的几种语义级别，能讲清楚就差不多了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实时计算事务也应该是弱事务吧</span><br><span class="line">	是的，大数据的高性能和事务其实是有点矛盾的</span><br><span class="line">	事务很少问，容错性会问到，这个课程里面有讲到，就是那几种语义级别，至少一次，仅一次等</span><br></pre></td></tr></table></figure>

<h2 id="群里配置问答"><a href="#群里配置问答" class="headerlink" title="群里配置问答"></a>群里配置问答</h2><h3 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h3><p><a href="https://imgchr.com/i/sWu1zQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWu1zQ.md.jpg" alt="sWu1zQ.jpg" border="0"></a></p>
<p><em>解决：没有配置flume的日志，缺少log4j的配置，在flume的conf目录下</em></p>
<h2 id="虚拟机网络问题"><a href="#虚拟机网络问题" class="headerlink" title="虚拟机网络问题"></a>虚拟机网络问题</h2><h3 id="为什么我这样配置ping不同外网-本机也Ping不了？"><a href="#为什么我这样配置ping不同外网-本机也Ping不了？" class="headerlink" title="为什么我这样配置ping不同外网 本机也Ping不了？"></a>为什么我这样配置ping不同外网 本机也Ping不了？</h3><p><a href="https://imgchr.com/i/sWuXY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuXY8.jpg" alt="sWuXY8.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWuOFf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuOFf.md.jpg" alt="sWuOFf.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWuqTP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWuqTP.md.jpg" alt="sWuqTP.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/sWujfS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWujfS.md.jpg" alt="sWujfS.md.jpg" border="0"></a></p>
<p><em>解决：虚拟机防火墙需要关闭，虚拟机网卡为nat模式，配置后要重启</em></p>
<p><a href="https://imgchr.com/i/sWY4EQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/20/sWY4EQ.md.jpg" alt="sWY4EQ.jpg" border="0"></a></p>
<h3 id="vmnet8"><a href="#vmnet8" class="headerlink" title="vmnet8"></a>vmnet8</h3><p><em>我虚拟机和主机不在同一个网段 可能就靠这个vmnet8来做nat网络地址转换</em></p>
<p><em>解答：vmnet8是你的一块网卡，让你的虚拟机和你的物理机处于同一个网络，这样你的物理机和虚拟机可以互联互通，而你的虚拟机访问外网，就通过nat映射，使用你的物理机ip对外访问，NAT对应的还有PAT技术</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发工程师</category>
      </categories>
  </entry>
  <entry>
    <title>第六章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="构建数据仓库"><a href="#构建数据仓库" class="headerlink" title="构建数据仓库"></a>构建数据仓库</h1><p><strong>数组仓库的组成</strong>：维度表+事实表<br><strong>维度表</strong>：主要存放基础属性。<br><strong>事实表</strong>：主要存放各种业务数据</p>
<h2 id="构建维度表"><a href="#构建维度表" class="headerlink" title="构建维度表"></a>构建维度表</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第五章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Kettle作业设计"><a href="#Kettle作业设计" class="headerlink" title="Kettle作业设计"></a>Kettle作业设计</h1><h2 id="作业的概念及组成"><a href="#作业的概念及组成" class="headerlink" title="作业的概念及组成"></a>作业的概念及组成</h2><p><em>一个作业包含一个或多个作业项，这些作业项以某种顺序来执行。作业执行顺序由作业项之间的跳和每个作业项的执行结果来决定。</em></p>
<p><strong>组成</strong>：作业项、作业跳(跳)、注释</p>
<h3 id="作业项"><a href="#作业项" class="headerlink" title="作业项"></a>作业项</h3><p><strong>与转换的步骤相比</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有影子复制</span><br><span class="line">作业项之间传递一个结果对象</span><br><span class="line">可以并行执行</span><br><span class="line">后缀名：转换（ktr),作业（kjb)</span><br></pre></td></tr></table></figure>

<h3 id="跳"><a href="#跳" class="headerlink" title="跳"></a>跳</h3><p><strong>三种判断方式:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>两种状态</strong>：Enabled(可用)、Disabled(不可用)</p>
<h2 id="作业的创建及常用作业项"><a href="#作业的创建及常用作业项" class="headerlink" title="作业的创建及常用作业项"></a>作业的创建及常用作业项</h2><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><p>回溯<br>多路径和回溯：作业运行的结果不是唯一的；<br>并行执行</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>定义</strong>：任意长度的字符串值，有自己的作用范围；<br><strong>定义变量的两种方式</strong>：系统设置和用户自定义；<br>系统设置：Java虚拟机、Kettle的内部变量；<br>用户自定义：使用kettle.properties文件。在“设置变量”中设置作业项的属性、获取属性文件中的变量</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>监控</strong>包括<strong>日志和邮件</strong>两种方式<br><em>日志包含的级别及其对应内容：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nothing:</span><br><span class="line">Error:</span><br><span class="line">Basic:</span><br><span class="line">Detailed:</span><br><span class="line">Debug:</span><br><span class="line">Rowlevel:</span><br><span class="line">Minimal:</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第四章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>







<h1 id="第四章-数据清理"><a href="#第四章-数据清理" class="headerlink" title="第四章-数据清理"></a>第四章-数据清理</h1><h2 id="数据清理概述"><a href="#数据清理概述" class="headerlink" title="数据清理概述"></a>数据清理概述</h2><p><em>无论数据清理是在加载到数据仓库之前，还是在从数据仓库抽取数据时，都不可能跳过数据清理这个过程</em></p>
<h3 id="常用的数据清理步骤"><a href="#常用的数据清理步骤" class="headerlink" title="常用的数据清理步骤"></a>常用的数据清理步骤</h3><p><strong>kettle中几个常用数据清理步骤：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算器；</span><br><span class="line">字符串替换；</span><br><span class="line">字符串操作；</span><br><span class="line">字符串剪切：对字符串做剪切的功能；</span><br><span class="line">拆分字段；</span><br><span class="line">值映射；</span><br><span class="line">字段选择：可以对字段进行选择、删除、重命名等操作；</span><br><span class="line">去除重复记录和去除重复记录(哈希值)的两个步骤。</span><br></pre></td></tr></table></figure>

<h3 id="字符串清理"><a href="#字符串清理" class="headerlink" title="字符串清理"></a>字符串清理</h3><h3 id="字段清理"><a href="#字段清理" class="headerlink" title="字段清理"></a>字段清理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拆分字段成多行(列拆分为多行)：支持正则表达式；</span><br><span class="line">拆分字段；</span><br><span class="line">合并字段；</span><br><span class="line">字段选择： “选择和修改”、“移除”和“元数据”三个分类</span><br></pre></td></tr></table></figure>

<h4 id="列拆分为多行"><a href="#列拆分为多行" class="headerlink" title="列拆分为多行"></a>列拆分为多行</h4><p><a href="https://imgchr.com/i/sBjjIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/16/sBjjIA.png" alt="sBjjIA.png" border="0"></a></p>
<h4 id="拆分字段"><a href="#拆分字段" class="headerlink" title="拆分字段"></a>拆分字段</h4><img src="https://s3.ax1x.com/2021/01/16/sBvwLD.png" alt="sBvwLD.png" border="0">

<h2 id="数据排重"><a href="#数据排重" class="headerlink" title="数据排重"></a>数据排重</h2><h3 id="如何识别重复数据"><a href="#如何识别重复数据" class="headerlink" title="如何识别重复数据"></a>如何识别重复数据</h3><p><em>数据是否指的同一客观实体</em></p>
<p><strong>重复数据分为两类：</strong>完全重复数据，不完全重复数据</p>
<p><strong>完全重复数据</strong>：两个数据行的数据完全一致</p>
<p><strong>不完全重复数据：</strong>客观上表示现实世界的同一实体，但由于表达方式不同或拼写错误等原因，导致数据存在多条重复</p>
<h3 id="去除完全重复数据"><a href="#去除完全重复数据" class="headerlink" title="去除完全重复数据"></a>去除完全重复数据</h3><h4 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h4><p><em>只能处理事先排好序的数据</em></p>
<h4 id="去除重复记录-哈希值"><a href="#去除重复记录-哈希值" class="headerlink" title="去除重复记录(哈希值)"></a>去除重复记录(哈希值)</h4><h3 id="去除不完全重复数据"><a href="#去除不完全重复数据" class="headerlink" title="去除不完全重复数据"></a>去除不完全重复数据</h3><h2 id="使用脚本组件进行数据清理"><a href="#使用脚本组件进行数据清理" class="headerlink" title="使用脚本组件进行数据清理"></a>使用脚本组件进行数据清理</h2><h3 id="使用JavaScript代码组件清理数据"><a href="#使用JavaScript代码组件清理数据" class="headerlink" title="使用JavaScript代码组件清理数据"></a>使用JavaScript代码组件清理数据</h3><h3 id="使用正则表达式组件清理数据"><a href="#使用正则表达式组件清理数据" class="headerlink" title="使用正则表达式组件清理数据"></a>使用正则表达式组件清理数据</h3><h3 id="使用其它脚本组件清理数据"><a href="#使用其它脚本组件清理数据" class="headerlink" title="使用其它脚本组件清理数据"></a>使用其它脚本组件清理数据</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第三章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第三章-基于kettle的数据导入与导出"><a href="#第三章-基于kettle的数据导入与导出" class="headerlink" title="第三章-基于kettle的数据导入与导出"></a>第三章-基于kettle的数据导入与导出</h1><h2 id="基于文件的数据导入与导出"><a href="#基于文件的数据导入与导出" class="headerlink" title="基于文件的数据导入与导出"></a>基于文件的数据导入与导出</h2><h3 id="文本文件的导入与导出"><a href="#文本文件的导入与导出" class="headerlink" title="文本文件的导入与导出"></a>文本文件的导入与导出</h3><p><strong>文本文件分类</strong>：分隔符文件；固定宽度文件</p>
<h3 id="文本文件的导入与导出案例"><a href="#文本文件的导入与导出案例" class="headerlink" title="文本文件的导入与导出案例"></a>文本文件的导入与导出案例</h3><h3 id="Excel文件的导入与导出"><a href="#Excel文件的导入与导出" class="headerlink" title="Excel文件的导入与导出"></a>Excel文件的导入与导出</h3><p><em>Excel文件：分为<strong>结构化的表格数据</strong>和<strong>非结构化的表格数据</strong>；对于非结构化表格数据，可能表里包含有多个字段值的列或者有重复的一组字段等</em></p>
<h3 id="Excel文件的导入与导出案例"><a href="#Excel文件的导入与导出案例" class="headerlink" title="Excel文件的导入与导出案例"></a>Excel文件的导入与导出案例</h3><h3 id="XML文件的导入与导出"><a href="#XML文件的导入与导出" class="headerlink" title="XML文件的导入与导出"></a>XML文件的导入与导出</h3><h3 id="XML文件的导入与导出案例"><a href="#XML文件的导入与导出案例" class="headerlink" title="XML文件的导入与导出案例"></a>XML文件的导入与导出案例</h3><h3 id="JSON文件的导入与导出"><a href="#JSON文件的导入与导出" class="headerlink" title="JSON文件的导入与导出"></a>JSON文件的导入与导出</h3><h3 id="JSON文件的导入与导出案例"><a href="#JSON文件的导入与导出案例" class="headerlink" title="JSON文件的导入与导出案例"></a>JSON文件的导入与导出案例</h3><h2 id="基于数据库的数据导入与导出"><a href="#基于数据库的数据导入与导出" class="headerlink" title="基于数据库的数据导入与导出"></a>基于数据库的数据导入与导出</h2><h3 id="关系型数据库的数据导入与导出"><a href="#关系型数据库的数据导入与导出" class="headerlink" title="关系型数据库的数据导入与导出"></a>关系型数据库的数据导入与导出</h3><p><em>面对关系型数据库，Kettle可以利用“表输入”、“表输出”步骤完成导入和导出</em></p>
<h3 id="MySQL数据库的数据导入与导出"><a href="#MySQL数据库的数据导入与导出" class="headerlink" title="MySQL数据库的数据导入与导出"></a>MySQL数据库的数据导入与导出</h3><p><em>“一般”选项卡常用的连接参数含义(主机名、数据库名称、端口号、用户名和密码)</em></p>
<h2 id="基于CDC变更数据的导入与导出"><a href="#基于CDC变更数据的导入与导出" class="headerlink" title="基于CDC变更数据的导入与导出"></a>基于CDC变更数据的导入与导出</h2><p><em>识别出变化的数据并只导入这部分数据被称为变化捕获数据(CDC)</em></p>
<h3 id="基于源数据的CDC"><a href="#基于源数据的CDC" class="headerlink" title="基于源数据的CDC"></a>基于源数据的CDC</h3><p><em>基于源数据的CDC：最常见的两个属性(时间戳、自增序列)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 缺点</span><br><span class="line">1.只有源数据中包含了插入时间和更新时间两个属性列，才能区分插入时间和更新时间</span><br><span class="line">2.不能捕获物理删除，只能捕获逻辑删除</span><br><span class="line">3.如果同一个时间周期内，数据被更新多次，那么只能同步最后一次更新操作，中间的更新操作都无法导入</span><br><span class="line">4.时间戳和基于序列的CDC操作不适合用于实时场景下数据导入，一般用于批量操作</span><br></pre></td></tr></table></figure>



<h3 id="基于源数据的CDC案例"><a href="#基于源数据的CDC案例" class="headerlink" title="基于源数据的CDC案例"></a>基于源数据的CDC案例</h3><h3 id="基于自增序列的源数据CDC案例"><a href="#基于自增序列的源数据CDC案例" class="headerlink" title="基于自增序列的源数据CDC案例"></a>基于自增序列的源数据CDC案例</h3><h3 id="基于触发器的CDC"><a href="#基于触发器的CDC" class="headerlink" title="基于触发器的CDC"></a>基于触发器的CDC</h3><h3 id="基于触发器的CDC的案例"><a href="#基于触发器的CDC的案例" class="headerlink" title="基于触发器的CDC的案例"></a>基于触发器的CDC的案例</h3><h3 id="基于快照的CDC"><a href="#基于快照的CDC" class="headerlink" title="基于快照的CDC"></a>基于快照的CDC</h3><h3 id="基于快照的CDC案例"><a href="#基于快照的CDC案例" class="headerlink" title="基于快照的CDC案例"></a>基于快照的CDC案例</h3><h3 id="基于日志的CDC"><a href="#基于日志的CDC" class="headerlink" title="基于日志的CDC"></a>基于日志的CDC</h3><h3 id="基于日志的CDC案例"><a href="#基于日志的CDC案例" class="headerlink" title="基于日志的CDC案例"></a>基于日志的CDC案例</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第二章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第二章-kettle的初步使用"><a href="#第二章-kettle的初步使用" class="headerlink" title="第二章-kettle的初步使用"></a>第二章-kettle的初步使用</h1><h2 id="kettle安装"><a href="#kettle安装" class="headerlink" title="kettle安装"></a>kettle安装</h2><h3 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h3><h3 id="kettle的下载安装与spoon的启动"><a href="#kettle的下载安装与spoon的启动" class="headerlink" title="kettle的下载安装与spoon的启动"></a>kettle的下载安装与spoon的启动</h3><h2 id="kettle的使用"><a href="#kettle的使用" class="headerlink" title="kettle的使用"></a>kettle的使用</h2><h3 id="转换的基本概念"><a href="#转换的基本概念" class="headerlink" title="转换的基本概念"></a>转换的基本概念</h3><p><strong>转换</strong>是ETL解决方案中最主要的部分，它负责处理抽取、转换、加载各阶段对数据行的各种操作</p>
<p><strong>组成</strong>：步骤、跳、注释</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><strong>步骤</strong>是转换中的基本组成部分，是一个图形化的组件</p>
<p><em>关键特性：(四点)，最主要的一点是步骤的名字唯一</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 步骤的四个主要特性</span><br><span class="line">1.步骤的名字唯一</span><br><span class="line">2.每个步骤都会读，写数据行（生成步骤是例外，他只能写数据行）</span><br><span class="line">3.步骤之间通过跳进行数据行的单向传输</span><br><span class="line">4.大多数步骤都可以有多个输出跳</span><br><span class="line">5.在运行转换时，一个线程运行一个步骤，所有步骤的线程几乎同时进行</span><br></pre></td></tr></table></figure>



<h4 id="转换的跳"><a href="#转换的跳" class="headerlink" title="转换的跳"></a>转换的跳</h4><p><em>跳定义了步骤之间进行数据传输的单向通道</em></p>
<p><strong>从执行角度看</strong>：不可能定义执行的顺序和起点步骤、终点步骤；<br><strong>从功能角度看</strong>：有明确的起点步骤和终点步骤</p>
<h4 id="数据行"><a href="#数据行" class="headerlink" title="数据行"></a>数据行</h4><p><em>在kettle里数据的单位是<strong>行</strong>.</em></p>
<p>一个数据行是<strong>零</strong>到<strong>多个字段</strong>的结合，是kettle的数据单位，简称行。</p>
<p><strong>字段</strong>包括的<strong>数据类型</strong>：<strong>7大类</strong>(String、Number、Integer、Date、Boolean、Binary)</p>
<h3 id="第一个转换案例"><a href="#第一个转换案例" class="headerlink" title="第一个转换案例"></a>第一个转换案例</h3><h4 id="创建转换"><a href="#创建转换" class="headerlink" title="创建转换"></a>创建转换</h4><h4 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h4><h4 id="可视化编程"><a href="#可视化编程" class="headerlink" title="可视化编程"></a>可视化编程</h4><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><h4 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h4><h4 id="主对象树"><a href="#主对象树" class="headerlink" title="主对象树"></a>主对象树</h4><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p><strong>环境变量</strong>：全局的，对所有转换和作业有效</p>
<h5 id="命名参数配置"><a href="#命名参数配置" class="headerlink" title="命名参数配置"></a>命名参数配置</h5><p><strong>命名参数</strong>：局部的，仅对当前转换和作业有效</p>
<h5 id="定时启动转换"><a href="#定时启动转换" class="headerlink" title="定时启动转换"></a>定时启动转换</h5><p><em>在windows下，可以使用控制面板中的计划任务执行批处理</em></p>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;d d:\data-integration</span><br><span class="line">pan &#x2F;file&#x3D;xxxxx.ktr &#x2F;level&#x3D;Dtailed &#x2F;logfile&#x3D;xxx.log0</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数描述表</span><br><span class="line">参数名   	  参数值   		          作用</span><br><span class="line">file		文件名					指定转换或作业的文件名</span><br><span class="line">level		Error, Nothing,		  指定日志级别</span><br><span class="line">			Detail,Debug,Rowlevel	</span><br><span class="line">logfile		日志文件名	指定转换或作业的日志文件名</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-大数据预处理技术</title>
    <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第一章-数据预处理概述"><a href="#第一章-数据预处理概述" class="headerlink" title="第一章-数据预处理概述"></a>第一章-数据预处理概述</h1><h2 id="数据与处理的背景与目的"><a href="#数据与处理的背景与目的" class="headerlink" title="数据与处理的背景与目的"></a>数据与处理的背景与目的</h2><h3 id="数据预处理背景：数据质量"><a href="#数据预处理背景：数据质量" class="headerlink" title="数据预处理背景：数据质量"></a>数据预处理背景：数据质量</h3><p><em>高质量数据：能满足应用要求</em></p>
<p><em>数据质量涉及的因素：<strong>准确性，完整性，一致性，时效性，相关性，可信性，可解释性</strong>.</em></p>
<h4 id="数据库和数据仓库的角度"><a href="#数据库和数据仓库的角度" class="headerlink" title="数据库和数据仓库的角度"></a>数据库和数据仓库的角度</h4><p><em>当今世界大型数据库和数据仓库的共同缺点是存在<strong>不正确</strong>，<strong>不完整</strong>，<strong>不一致</strong>.</em></p>
<h4 id="应用角度"><a href="#应用角度" class="headerlink" title="应用角度"></a>应用角度</h4><p><em>时效性，相关性</em></p>
<h4 id="用户角度"><a href="#用户角度" class="headerlink" title="用户角度"></a>用户角度</h4><p><em>可信性，可解释性</em></p>
<h3 id="数据预处理目的"><a href="#数据预处理目的" class="headerlink" title="数据预处理目的"></a>数据预处理目的</h3><p><em>在数据挖掘之前，必须对收集的原始数据进行预处理，达到改善数据的质量，提高数据挖掘过程的准确率和效率的目的</em></p>
<h2 id="数据预处理流程"><a href="#数据预处理流程" class="headerlink" title="数据预处理流程"></a>数据预处理流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始数据采集&#x3D;&gt;数据清理&#x3D;&gt;数据集成&#x3D;》数据转换&#x3D;&gt;数据规约</span><br></pre></td></tr></table></figure>

<p><em>这里的流程顺序不用必须严格按照1/2/3/4顺序进行</em></p>
<h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><p><strong>脏数据</strong>：由于重复录入，并发处理等不规范的操作，导致产生不完整，不准确的，无效的数据。<br><strong>脏数据</strong>划分为<strong>缺省值</strong>和<strong>噪声</strong>(噪声是被测量变量的随机误差或方差）</p>
<p><em>数据清理：填充缺失值、光滑噪声和识别离群点</em></p>
<h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><h4 id="噪声数据"><a href="#噪声数据" class="headerlink" title="噪声数据"></a>噪声数据</h4><h4 id="不一致数据"><a href="#不一致数据" class="headerlink" title="不一致数据"></a>不一致数据</h4><h3 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h3><p><em>合并来自多个数据源的数据</em></p>
<h4 id="实体识别问题"><a href="#实体识别问题" class="headerlink" title="实体识别问题"></a>实体识别问题</h4><h4 id="冗余和相关分析"><a href="#冗余和相关分析" class="headerlink" title="冗余和相关分析"></a>冗余和相关分析</h4><h4 id="元组重复"><a href="#元组重复" class="headerlink" title="元组重复"></a>元组重复</h4><h4 id="数据值冲突的检测与处理"><a href="#数据值冲突的检测与处理" class="headerlink" title="数据值冲突的检测与处理"></a>数据值冲突的检测与处理</h4><h3 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h3><p><em>在数据预处理阶段，<strong>数据被变换或统一</strong>，使挖掘过程可能更有效，挖掘的模式可能更容易理解</em></p>
<h4 id="数据变换策略"><a href="#数据变换策略" class="headerlink" title="数据变换策略"></a>数据变换策略</h4><h4 id="通过规范化变换数据"><a href="#通过规范化变换数据" class="headerlink" title="通过规范化变换数据"></a>通过规范化变换数据</h4><h4 id="通过分箱离散化"><a href="#通过分箱离散化" class="headerlink" title="通过分箱离散化"></a>通过分箱离散化</h4><h4 id="通过直方图分析离散化"><a href="#通过直方图分析离散化" class="headerlink" title="通过直方图分析离散化"></a>通过直方图分析离散化</h4><h4 id="通过聚类，决策树和相关分析离散化"><a href="#通过聚类，决策树和相关分析离散化" class="headerlink" title="通过聚类，决策树和相关分析离散化"></a>通过聚类，决策树和相关分析离散化</h4><h4 id="标称数据的概念分层产生"><a href="#标称数据的概念分层产生" class="headerlink" title="标称数据的概念分层产生"></a>标称数据的概念分层产生</h4><h3 id="数据规约"><a href="#数据规约" class="headerlink" title="数据规约"></a>数据规约</h3><p><em>尽可能保持数据原貌的前提下，最大限度地精简数据量</em></p>
<p><strong>数据规约的策略</strong>：维规约、数量规约、数据压缩</p>
<h2 id="数据预处理的工具"><a href="#数据预处理的工具" class="headerlink" title="数据预处理的工具"></a>数据预处理的工具</h2><p><strong>工具类手段</strong>：Kettle<br><strong>编程类手段</strong>：Python语言</p>
<hr>
<blockquote>
<p>死并非生的对立面，是生的一部分永存。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第五章-MongoDB基础</title>
    <url>/%E7%AC%AC%E4%BA%94%E7%AB%A0-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B8%8E%E5%BA%94%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第五章-MongoDB基础"><a href="#第五章-MongoDB基础" class="headerlink" title="第五章-MongoDB基础"></a>第五章-MongoDB基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><em>开源数据库，是目前NoSQL数据库中使用最广泛的数据库之一</em></p>
<p><em>是一个开源文档数据库，是用C++语言编写的非关系型数据库</em></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="文档数据模型"><a href="#文档数据模型" class="headerlink" title="文档数据模型"></a>文档数据模型</h3><p><em>传统的关系型数据库需要对表结构进行预先定义和严格的要求，而这样的严格要求，导致了处理数据的过程更加繁琐，甚至降低了执行效率。在数据量达到一定规模的情况下，传统关系型数据库反应迟钝。</em></p>
<p><em>文档存储支持对结构化数据的访问，与关系模型不同的是，文档存储没有强制的架构。文档存储以封包键值对的方式进行存储，文档存储模型支持嵌套结构</em></p>
<p><em>文档数据库无需事先定义数据存储结构</em>、</p>
<h3 id="文档存储结构"><a href="#文档存储结构" class="headerlink" title="文档存储结构"></a>文档存储结构</h3><p><em>文档存储结构可分为四个层次：键值对，文档，集合，数据库</em></p>
<h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p><em>文档型数据库存储结构的基本单位，具体包含了数据和类型</em></p>
<p><em>键为字符串类型，值为五种基本类型，数组，日期，嵌套</em></p>
<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><em>文档是MongoDB的核心概念，是数据的基本单元</em></p>
<p><em>是一组有序的键值对集合</em></p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><em>MongoDB将文档存储在集合中，一个集合是一些文档构成的集合</em></p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><em>在MongoDB中，数据库有集合组成</em></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><em>MongoDB所采用的数据格式称为BSON，是一种基于JSON的二进制序列化格式</em></p>
<p><em>MongoDB改进的主要特性有下面三点：</em></p>
<p><em>(1) 更快的遍历速度</em></p>
<p><em>(2) 操作更加简单</em></p>
<p><em>(3) 支持更多的数据类型</em></p>
<h3 id="MongoDB的安装与测试"><a href="#MongoDB的安装与测试" class="headerlink" title="MongoDB的安装与测试"></a>MongoDB的安装与测试</h3><h2 id="数据库与集合的基本操作"><a href="#数据库与集合的基本操作" class="headerlink" title="数据库与集合的基本操作"></a>数据库与集合的基本操作</h2><h3 id="数据库命名规则"><a href="#数据库命名规则" class="headerlink" title="数据库命名规则"></a>数据库命名规则</h3><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="创建自定义数据库"><a href="#创建自定义数据库" class="headerlink" title="创建自定义数据库"></a>创建自定义数据库</h4><p><em>没有则创建该数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDB</span><br></pre></td></tr></table></figure>

<h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h4 id="统计数据库信息"><a href="#统计数据库信息" class="headerlink" title="统计数据库信息"></a>统计数据库信息</h4><p><em>操作之前，要先切到该数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test</span><br><span class="line">db.stats()</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<h4 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h4><p><em>查看当前数据库下的所有集合</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.getCollectionNames()</span><br></pre></td></tr></table></figure>



<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="集合名称的命名规则"><a href="#集合名称的命名规则" class="headerlink" title="集合名称的命名规则"></a>集合名称的命名规则</h4><h4 id="集合操作-1"><a href="#集合操作-1" class="headerlink" title="集合操作"></a>集合操作</h4><p><em>有显示和隐式创建集合两种方法</em></p>
<h5 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h5><p><em>capped</em>:<em>上限集合，是否限制大小</em></p>
<p><em>max<em>：</em>最大文档数，可选</em></p>
<p><em>size<em>：</em>具体集合大小，如果capped为True，则它必须命名</em></p>
<h5 id="显示创建"><a href="#显示创建" class="headerlink" title="显示创建"></a>显示创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use myDatabase</span><br><span class="line">db.createCollection(&quot;mycl&quot;,&#123;capped:true, size:6142800, max:10000&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="隐式创建"><a href="#隐式创建" class="headerlink" title="隐式创建"></a>隐式创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.mycl.insert(&#123;&quot;name&quot;:&quot;tom&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="集合的其它操作"><a href="#集合的其它操作" class="headerlink" title="集合的其它操作"></a>集合的其它操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="文档的基本操作"><a href="#文档的基本操作" class="headerlink" title="文档的基本操作"></a>文档的基本操作</h2><h3 id="文档的键定义规则"><a href="#文档的键定义规则" class="headerlink" title="文档的键定义规则"></a>文档的键定义规则</h3><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>NoSQL数据库原理与与应用</category>
      </categories>
  </entry>
  <entry>
    <title>第一章-NoSQL数据库原理与应用</title>
    <url>/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0NoSQL%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B8%8E%E5%BA%94%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="第一章-NoSQL数据库原理与应用"><a href="#第一章-NoSQL数据库原理与应用" class="headerlink" title="第一章-NoSQL数据库原理与应用"></a>第一章-NoSQL数据库原理与应用</h1><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><p><em>由数据库，数据库管理系统，应用程序，用户组成</em></p>
<h3 id="数据库系统的基本概念"><a href="#数据库系统的基本概念" class="headerlink" title="数据库系统的基本概念"></a>数据库系统的基本概念</h3><h4 id="数据库DBS"><a href="#数据库DBS" class="headerlink" title="数据库DBS"></a>数据库DBS</h4><p><em>是长期存储在计算机内，<strong>有组织</strong>，<strong>统一管理的</strong>，可以<strong>表现为多种形式的</strong>，<strong>可共享</strong>的数据集合</em></p>
<p><em>数据库根据不同的逻辑模型可以分为三种：层次型，网状型，关系型</em></p>
<p><em>层次型：简单，冗余度过高</em></p>
<p><em>网状型：随着应用范围的扩展，数据库的结构变得越来越复杂</em></p>
<p><em>关系型：二维表格来表示实体集合以及数据间的联系的一种模型</em></p>
<h4 id="数据库管理系统DBMS"><a href="#数据库管理系统DBMS" class="headerlink" title="数据库管理系统DBMS"></a>数据库管理系统DBMS</h4><p><em>是一种操作和管理数据库的大型软件，用于建立，使用和维护数据库</em></p>
<h5 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h5><p><em>DBMS提供数据定义语言DDL，供用户定义，创建和修改数据库的结构</em></p>
<h5 id="数据操纵"><a href="#数据操纵" class="headerlink" title="数据操纵"></a>数据操纵</h5><p><em>DBMS提供数据操纵语言DML，实现用户对数据的操纵功能，包括对数据库数据的插入，删除，更新等操作</em></p>
<h5 id="数据库的运行管理"><a href="#数据库的运行管理" class="headerlink" title="数据库的运行管理"></a>数据库的运行管理</h5><h5 id="数据组织，存储与管理"><a href="#数据组织，存储与管理" class="headerlink" title="数据组织，存储与管理"></a>数据组织，存储与管理</h5><h5 id="数据库的维护"><a href="#数据库的维护" class="headerlink" title="数据库的维护"></a>数据库的维护</h5><h5 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h5><h4 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h4><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><h4 id="关系型数据库的基本概念"><a href="#关系型数据库的基本概念" class="headerlink" title="关系型数据库的基本概念"></a>关系型数据库的基本概念</h4><p><em>在关系型数据库中，实体以及实体间的联系均由单一的结构类型表示，这种逻辑结构是一张二维表</em></p>
<h4 id="结构化查询语言"><a href="#结构化查询语言" class="headerlink" title="结构化查询语言"></a>结构化查询语言</h4><p><em>关系型数据库的核心是其结构化查询语言SQL，SQL涵盖数据的定义，操纵，查询，控制，是一个综合的，通用的且简单易懂的数据库管理语言</em></p>
<h5 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h5><p><em>CREATE，DROP，ALTER</em></p>
<h5 id="数据查询语言DQL"><a href="#数据查询语言DQL" class="headerlink" title="数据查询语言DQL"></a>数据查询语言DQL</h5><p><em>SELECT</em></p>
<h5 id="数据操纵语言"><a href="#数据操纵语言" class="headerlink" title="数据操纵语言"></a>数据操纵语言</h5><p><em>INSERT，DELETE，UPDATE</em></p>
<h5 id="数据控制语言DCL"><a href="#数据控制语言DCL" class="headerlink" title="数据控制语言DCL"></a>数据控制语言DCL</h5><p><em>是对数据访问权进行控制的指令</em></p>
<h4 id="关系型数据库的优缺点"><a href="#关系型数据库的优缺点" class="headerlink" title="关系型数据库的优缺点"></a>关系型数据库的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p><em>易于理解，使用方便，易于维护</em></p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p><em>高并发读写能力差，对海量数据的读写效率低，扩展性差</em></p>
<h3 id="NoSQL数据库的特点"><a href="#NoSQL数据库的特点" class="headerlink" title="NoSQL数据库的特点"></a>NoSQL数据库的特点</h3><p><em>最初为满足互联网时代的业务需求而产生。互联网时代具有大量化，多样化，快速化等特点。数据不仅仅是传统的结构化数据，还包含大量非结构化和半结构化数据，关系型数据库无法存储此类数据</em></p>
<h4 id="灵活的数据模型"><a href="#灵活的数据模型" class="headerlink" title="灵活的数据模型"></a>灵活的数据模型</h4><h4 id="可伸缩性强"><a href="#可伸缩性强" class="headerlink" title="可伸缩性强"></a>可伸缩性强</h4><p><em>关系型数据库：中心化，是纵向扩展而不是横向扩展的。这使得它们不适合那些需要简单且动态可伸缩性的应用</em></p>
<p><em>NoSQL数据库从一开始就是分布式，横向扩展的，因此非常适合互联网应用分布式的特性</em></p>
<h4 id="自动分片"><a href="#自动分片" class="headerlink" title="自动分片"></a>自动分片</h4><h4 id="自动复制"><a href="#自动复制" class="headerlink" title="自动复制"></a>自动复制</h4><h2 id="分布式数据库的数据管理"><a href="#分布式数据库的数据管理" class="headerlink" title="分布式数据库的数据管理"></a>分布式数据库的数据管理</h2><h3 id="分布式数据处理"><a href="#分布式数据处理" class="headerlink" title="分布式数据处理"></a>分布式数据处理</h3><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p><em>CAP理论是指在一个分布式系统中，一致性C，可用性A，分区容错性P，三者不可兼得</em></p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="一致性C"><a href="#一致性C" class="headerlink" title="一致性C"></a>一致性C</h5><p><em>是指更新操作成功后，所有节点在同一时间的数据完全一致</em></p>
<p><em>一致性在并发读写时才会出现的问题</em></p>
<h5 id="可用性A"><a href="#可用性A" class="headerlink" title="可用性A"></a>可用性A</h5><p><em>即用户访问数据时，系统能否在正常响应时间返回结果</em></p>
<p><em>在通常情况下，可用性与分布式数据冗余，负载均衡等有很大的关联</em></p>
<h5 id="分区容错性P"><a href="#分区容错性P" class="headerlink" title="分区容错性P"></a>分区容错性P</h5><p><em>即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务</em></p>
<h4 id="相互关联"><a href="#相互关联" class="headerlink" title="相互关联"></a>相互关联</h4><h5 id="CA-without-P"><a href="#CA-without-P" class="headerlink" title="CA without P"></a>CA without P</h5><h5 id="CP-without-A"><a href="#CP-without-A" class="headerlink" title="CP without A"></a>CP without A</h5><h5 id="PA-without-C"><a href="#PA-without-C" class="headerlink" title="PA without C"></a>PA without C</h5><h3 id="ACID与BASE"><a href="#ACID与BASE" class="headerlink" title="ACID与BASE"></a>ACID与BASE</h3><h4 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h4><h4 id="BASE原理"><a href="#BASE原理" class="headerlink" title="BASE原理"></a>BASE原理</h4><h3 id="NoSQL数据库分类"><a href="#NoSQL数据库分类" class="headerlink" title="NoSQL数据库分类"></a>NoSQL数据库分类</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>NoSQL数据库原理与应用</category>
      </categories>
  </entry>
  <entry>
    <title>第八章-基于python的数据整理</title>
    <url>/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第八章-基于python的数据整理"><a href="#第八章-基于python的数据整理" class="headerlink" title="第八章-基于python的数据整理"></a>第八章-基于python的数据整理</h1><h2 id="合并多个数据集"><a href="#合并多个数据集" class="headerlink" title="合并多个数据集"></a>合并多个数据集</h2><p><em>pandas提供以下几种方法合并多个数据集：</em></p>
<p><strong>pandas.merge</strong>:<em>基于一个键或多个键连接多个DataFrame的行</em></p>
<p><strong>pandas.concat</strong>:<em>按行或按列将不同的对象叠加到一起</em></p>
<p><strong>combine_first</strong>:<em>使用一个对象中的数据填充另一个对象中对应位置的缺失值</em></p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><em>默认连接为类似sql的inner join操作</em></p>
<p><em>利用how参数，实现其它连接方式，left join, right join, outer join</em></p>
<h4 id="不指明使用某一列作为连接键"><a href="#不指明使用某一列作为连接键" class="headerlink" title="不指明使用某一列作为连接键"></a>不指明使用某一列作为连接键</h4><p><em>在这种情况下使用重叠列作为键进行连接</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data2'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df2 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1, df2)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9SNY6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9SNY6.png" alt="s9SNY6.png" border="0"></a></p>
<h4 id="指明连接键"><a href="#指明连接键" class="headerlink" title="指明连接键"></a>指明连接键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 等同于上例</span><br><span class="line">pd.merge(df1,df2, on=<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用不同名的键连接"><a href="#使用不同名的键连接" class="headerlink" title="使用不同名的键连接"></a>使用不同名的键连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = DataFrame(&#123;<span class="string">'lkey'</span>:[<span class="string">'b'</span>,<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>,<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df4 = DaraFrame(&#123;<span class="string">'rkey'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1,df2, left_on=<span class="string">'lkey'</span>, right_on=<span class="string">'rkey'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9pOUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9pOUI.png" alt="s9pOUI.png" border="0"></a></p>
<h4 id="how参数"><a href="#how参数" class="headerlink" title="how参数"></a>how参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df1, df2, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s99YRK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s99YRK.png" alt="s99YRK.png" border="0"></a></p>
<h4 id="使用多个键连接"><a href="#使用多个键连接" class="headerlink" title="使用多个键连接"></a>使用多个键连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">                 <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line">                 <span class="string">'lval'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">right = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,<span class="string">'bar'</span>],</span><br><span class="line">                  <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>],</span><br><span class="line">                  <span class="string">'rval'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/s9FQl6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9FQl6.png" alt="s9FQl6.png" border="0"></a></p>
<h3 id="使用index进行DataFrame合并"><a href="#使用index进行DataFrame合并" class="headerlink" title="使用index进行DataFrame合并"></a>使用index进行DataFrame合并</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left1=DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">                <span class="string">'value'</span>:range(<span class="number">6</span>)&#125;)</span><br><span class="line">right1=DataFrame(&#123;<span class="string">'group_val'</span>:[<span class="number">3.5</span>, <span class="number">7</span>]&#125;,</span><br><span class="line">                 index=[<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">pd.merge(left1, right1, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCQuGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQuGT.png" alt="sCQuGT.png" border="0"></a></p>
<h3 id="沿着横轴或纵轴串接"><a href="#沿着横轴或纵轴串接" class="headerlink" title="沿着横轴或纵轴串接"></a>沿着横轴或纵轴串接</h3><h4 id="numpy的concatenate函数"><a href="#numpy的concatenate函数" class="headerlink" title="numpy的concatenate函数"></a>numpy的concatenate函数</h4><p><em>NumPy库的concatenate函数用于串接起NumPy的原生数组</em></p>
<p><em>axis参数默认为0，沿着竖轴连接</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">np.concatenate([arr, arr], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCQ7oq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQ7oq.png" alt="sCQ7oq.png" border="0"></a></p>
<h4 id="pandas的concat函数"><a href="#pandas的concat函数" class="headerlink" title="pandas的concat函数"></a>pandas的concat函数</h4><h5 id="用于Series数据类型"><a href="#用于Series数据类型" class="headerlink" title="用于Series数据类型"></a>用于Series数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s2 = Series([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">pd.concat([s1, s2])</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">	a <span class="number">0</span></span><br><span class="line">    b <span class="number">1</span></span><br><span class="line">    c <span class="number">2</span></span><br><span class="line">    d <span class="number">3</span></span><br><span class="line">    e <span class="number">4</span></span><br><span class="line">pd.concat([s1, s2], axis=<span class="number">1</span>) // 此时得到DataFrame对象，连接方式为outer join</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sC1JC6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC1JC6.png" alt="sC1JC6.png" border="0"></a></p>
<p><em>可以通过join参数修改连接方式</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s3= Series([<span class="number">5</span>,<span class="number">6</span>], index=[<span class="string">'f'</span>,<span class="string">'g'</span>])</span><br><span class="line">s4 = pd.concat([s1*<span class="number">5</span>,s3])</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>)</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sC8qHJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC8qHJ.png" alt="sC8qHJ.png" border="0"></a></p>
<h5 id="用于DataFrame数据类型"><a href="#用于DataFrame数据类型" class="headerlink" title="用于DataFrame数据类型"></a>用于DataFrame数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df2 = DataFrame(<span class="number">5</span>+np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'c'</span>], columns=[<span class="string">'three'</span>,<span class="string">'four'</span>])</span><br><span class="line">pd.concat([df1, df2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCbLlj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCbLlj.png" alt="sCbLlj.png" border="0"></a></p>
<h2 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h2><p><em>数据重塑：是指转换输入的数据结构，使其适合后续的分析</em></p>
<p><em>pandas提供了数据重塑的基本操作，这些操作被用于二维度表格数据</em></p>
<h3 id="多级索引数据的重塑"><a href="#多级索引数据的重塑" class="headerlink" title="多级索引数据的重塑"></a>多级索引数据的重塑</h3><p><em>DataFrame可以设置多级索引。对于多级索引的数据，pandas的stack方法将数据集的列旋转为行</em></p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=DataFrame(np.arange(<span class="number">6.</span>reshape((<span class="number">2</span>,<span class="number">3</span>)),index=pd.Index([<span class="string">'ohio'</span>,<span class="string">'colorado'</span>], name=<span class="string">'state'</span>), columns=pd.Index([<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>], name=<span class="string">'number'</span>))</span><br><span class="line">&gt;&gt;&gt;data.stack()</span><br></pre></td></tr></table></figure>

<h4 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a>unstack</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = data.stack()</span><br><span class="line">result = data.unstack()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCXL5V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCXL5V.png" alt="sCXL5V.png" border="0"></a></p>
<p><em>默认情况下转换内层级别索引，通过传递一个级别的标号或级别的别称，可以指定要转换的级别，以下两种操作方式：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.unstack(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.unstack(<span class="string">'state'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCxoKe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCxoKe.png" alt="sCxoKe.png" border="0"></a></p>
<h3 id="应用pivot方法重塑数据"><a href="#应用pivot方法重塑数据" class="headerlink" title="应用pivot方法重塑数据"></a>应用pivot方法重塑数据</h3><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="移除重复数据"><a href="#移除重复数据" class="headerlink" title="移除重复数据"></a>移除重复数据</h3><p><em>这两个方法默认以整行判断，也可以指定进行部分列判断重复</em></p>
<h4 id="duplicated"><a href="#duplicated" class="headerlink" title="duplicated()"></a>duplicated()</h4><p><em>判断是否重复，返回一个bool型series</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = DataFrame(&#123;<span class="string">'k1'</span>:[<span class="string">'zhongxing'</span>,<span class="string">'Huawei'</span>]*<span class="number">3</span>+[<span class="string">'Huawei'</span>], <span class="string">'k2'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data.duplicated()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sCzXw9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sCzXw9.png" alt="sCzXw9.png" border="0"></a></p>
<h4 id="drop-duplicates"><a href="#drop-duplicates" class="headerlink" title="drop_duplicates()"></a>drop_duplicates()</h4><p><em>删除重复行</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.drop_duplicates()</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/sPSCQO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/04/sPSCQO.png" alt="sPSCQO.png" border="0"></a></p>
<h3 id="利用函数或隐射进行数据转换"><a href="#利用函数或隐射进行数据转换" class="headerlink" title="利用函数或隐射进行数据转换"></a>利用函数或隐射进行数据转换</h3><h3 id="值转换"><a href="#值转换" class="headerlink" title="值转换"></a>值转换</h3><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><h3 id="离散化和面元划分"><a href="#离散化和面元划分" class="headerlink" title="离散化和面元划分"></a>离散化和面元划分</h3><h3 id="检测或过滤异常值"><a href="#检测或过滤异常值" class="headerlink" title="检测或过滤异常值"></a>检测或过滤异常值</h3><h3 id="排列和随机采样"><a href="#排列和随机采样" class="headerlink" title="排列和随机采样"></a>排列和随机采样</h3><h3 id="计算指标-哑变量"><a href="#计算指标-哑变量" class="headerlink" title="计算指标/哑变量"></a>计算指标/哑变量</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
  </entry>
  <entry>
    <title>第七章-基于python的数据导入与导出</title>
    <url>/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第七章-基于python的数据导入与导出"><a href="#第七章-基于python的数据导入与导出" class="headerlink" title="第七章-基于python的数据导入与导出"></a>第七章-基于python的数据导入与导出</h1><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p><em>pandas是python的一个开源库，提供了高性能且易于使用的数据结构及数据分析工具</em></p>
<p><a href="https://www.pypandas.cn/" target="_blank" rel="external nofollow noopener noreferrer">pandas中文文档</a></p>
<p><a href="https://pandas.pydata.org/docs/" target="_blank" rel="external nofollow noopener noreferrer">pandas官方文档</a></p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><em>处理一维数据</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<h4 id="index和values属性"><a href="#index和values属性" class="headerlink" title="index和values属性"></a>index和values属性</h4><p><em>通过Series的index和values属性获取元素值和index值</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.index</span><br><span class="line">&gt;&gt;&gt;RangeIndex(start=<span class="number">0</span>, stop=<span class="number">3</span>, step=<span class="number">1</span>)</span><br><span class="line">s.values</span><br><span class="line">&gt;&gt;&gt;array([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<h4 id="使用自己提供的index"><a href="#使用自己提供的index" class="headerlink" title="使用自己提供的index"></a>使用自己提供的index</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = Series([<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>], index = [<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line">&gt;&gt;&gt;s2</span><br><span class="line">&gt;&gt;&gt;a <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;d <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;dtype:int64</span><br><span class="line">&gt;&gt;&gt;s2.index</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><h5 id="访问单个"><a href="#访问单个" class="headerlink" title="访问单个"></a>访问单个</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[<span class="string">'a'</span>] // <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h5 id="访问多个"><a href="#访问多个" class="headerlink" title="访问多个"></a>访问多个</h5><p><em>返回新的Series对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]] </span><br><span class="line">a <span class="number">2</span></span><br><span class="line">b <span class="number">8</span></span><br><span class="line">d <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="Series和实数做算数运算"><a href="#Series和实数做算数运算" class="headerlink" title="Series和实数做算数运算"></a>Series和实数做算数运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s*<span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">16</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>



<h4 id="Series和实数做逻辑运算"><a href="#Series和实数做逻辑运算" class="headerlink" title="Series和实数做逻辑运算"></a>Series和实数做逻辑运算</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s&gt;<span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="literal">False</span></span><br><span class="line"><span class="number">1</span> <span class="literal">False</span></span><br><span class="line"><span class="number">2</span> <span class="literal">True</span></span><br><span class="line"><span class="number">3</span> <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>

<h4 id="bool序列来过滤Series对象"><a href="#bool序列来过滤Series对象" class="headerlink" title="bool序列来过滤Series对象"></a>bool序列来过滤Series对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s[s&gt;<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><em>除了可以将Series看成类似数组的结构，也可以看成定长且有序的map</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = Series(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;<span class="string">'a'</span> <span class="keyword">in</span> s3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="修改值和index"><a href="#修改值和index" class="headerlink" title="修改值和index"></a>修改值和index</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line">s.index = [<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h2 id="文本文件的导入与导出"><a href="#文本文件的导入与导出" class="headerlink" title="文本文件的导入与导出"></a>文本文件的导入与导出</h2><h3 id="导入CSV文件"><a href="#导入CSV文件" class="headerlink" title="导入CSV文件"></a>导入CSV文件</h3><p><em>CSV文件：一种简单的文本，广泛用于存储表格格式的行列数据</em></p>
<p><em>pandas提供read_csv()，read_table()两种方式导入csv文件，返回结果为DataFrame类型</em></p>
<h4 id="read-csv"><a href="#read-csv" class="headerlink" title="read_csv()"></a>read_csv()</h4><p><em>默认分隔符为’,’，且只能读入这种分隔符的csv文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!type mycsv.csv</span><br><span class="line">df = pd.read_csv(<span class="string">'mycsv.csv'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="read-table"><a href="#read-table" class="headerlink" title="read_table()"></a>read_table()</h4><p><em>默认分隔符为’\t’，可以读入其它分隔符CSV文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">'mycsv.csv'</span>, sep=<span class="string">','</span>)</span><br></pre></td></tr></table></figure>

<h5 id="待读取文件没属性列名称"><a href="#待读取文件没属性列名称" class="headerlink" title="待读取文件没属性列名称"></a>待读取文件没属性列名称</h5><p><em>自动以数字零开始，取名属性列</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'....csv'</span>, header=<span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> ....</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>....</span><br></pre></td></tr></table></figure>

<h5 id="自己取名列名"><a href="#自己取名列名" class="headerlink" title="自己取名列名"></a>自己取名列名</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names = [.....])</span><br></pre></td></tr></table></figure>

<h5 id="以某一列为index"><a href="#以某一列为index" class="headerlink" title="以某一列为index"></a>以某一列为index</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names=[....], index_col=<span class="string">'某一列的名字'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, sep=<span class="string">'/s+'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="当第一行比后续行少一个"><a href="#当第一行比后续行少一个" class="headerlink" title="当第一行比后续行少一个"></a>当第一行比后续行少一个</h5><p><em>则相当于已有了index和属性名</em></p>
<h4 id="read-csv和read-table的其它参数"><a href="#read-csv和read-table的其它参数" class="headerlink" title="read_csv和read_table的其它参数"></a>read_csv和read_table的其它参数</h4><h5 id="skiprows"><a href="#skiprows" class="headerlink" title="skiprows"></a>skiprows</h5><p><em>用于文件中的一些无用行</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, skiprows=[<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>



<h5 id="nrows"><a href="#nrows" class="headerlink" title="nrows"></a>nrows</h5><p><em>只显示前n行</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, nrows=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p><em>默认用NaN填写缺失值</em></p>
<h5 id="isnull"><a href="#isnull" class="headerlink" title="isnull()"></a>isnull()</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.isnull(dataframe对象)</span><br></pre></td></tr></table></figure>



<h3 id="导出CSV文件"><a href="#导出CSV文件" class="headerlink" title="导出CSV文件"></a>导出CSV文件</h3><h3 id="JSON格式数据的导入与导出"><a href="#JSON格式数据的导入与导出" class="headerlink" title="JSON格式数据的导入与导出"></a>JSON格式数据的导入与导出</h3><h2 id="二进制文件的导入与导出"><a href="#二进制文件的导入与导出" class="headerlink" title="二进制文件的导入与导出"></a>二进制文件的导入与导出</h2><p><em>ASCII文件也称为<strong>文本文件</strong>，这du种文件在磁盘中存放时每个字符对应一个字节，用于存放对应的ASCII码。例如，数5678的存储形式为：5 6 7 8<br><strong>二进制文件</strong>是按二进制的编码方式来存放文件的。 例如， 数5678的存储形式为： 00010110 00101110只占二个字节。二进制文件虽然也可在屏幕上显示， 但其内容无法读懂。C系统在处理这些文件时，并不区分类型，都看成是字符流，按字节进行处理。 输入输出字符流的开始和结束只由程序控制而不受物理符号(如回车符)的控制。 因此也把这种文件称作“流式文件”。</em></p>
<p><strong>二进制文件类型很多，都有自己独特的存储方式。处理这些文件可能涉及非常复杂的过程。由于二进制文件格式复杂且不通用，数据导入工作应尽可能避免使用程序直接处理二进制格式文件</strong></p>
<h3 id="ExcelFile类型"><a href="#ExcelFile类型" class="headerlink" title="ExcelFile类型"></a>ExcelFile类型</h3><p><em>pandas通过<strong>ExcelFile类型</strong>提供对Excel文件的基本支持</em></p>
<p><em>ExcelFile类在内部使用<strong>xlrd</strong>和<strong>openpyxl包</strong>来操作Excel文件，需要提前安装</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">xls = pd.ExcelFile(<span class="string">'mydata.xls'</span>) // 首先导入excel文件，需要创建ExcelFile实例</span><br><span class="line">df = xls.parse(<span class="string">'mysheet'</span>) // 加入mydata.xls存在一个mysheet的表格，使用parse来解析它，获得一个dataframe对象</span><br></pre></td></tr></table></figure>

<h2 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(pf).to_excel(<span class="string">'out.xlsx'</span>, sheet_name=<span class="string">'mydata'</span>,index=<span class="literal">False</span>,header=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



<h2 id="数据库的导入与导出"><a href="#数据库的导入与导出" class="headerlink" title="数据库的导入与导出"></a>数据库的导入与导出</h2><h3 id="关系型数据库的导入和导出"><a href="#关系型数据库的导入和导出" class="headerlink" title="关系型数据库的导入和导出"></a>关系型数据库的导入和导出</h3><h3 id="非关系型数据库的导入和导出"><a href="#非关系型数据库的导入和导出" class="headerlink" title="非关系型数据库的导入和导出"></a>非关系型数据库的导入和导出</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>大数据预处理技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>账单金额P图</title>
    <url>/%E8%B4%A6%E5%8D%95%E9%87%91%E9%A2%9DP%E5%9B%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="账单金额P图"><a href="#账单金额P图" class="headerlink" title="账单金额P图"></a>账单金额P图</h1><p><a href="https://jingyan.baidu.com/article/066074d6497b38c3c21cb028.html" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>PS</category>
      </categories>
  </entry>
  <entry>
    <title>排序算法-直接插入排序</title>
    <url>/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><p><a href="https://imgchr.com/i/0T6DFf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6DFf.png" alt="0T6DFf.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/0T6sfS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6sfS.png" alt="0T6sfS.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/0T6jTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6jTx.md.png" alt="0T6jTx.png" border="0"></a></p>
<h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(l, new)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">        <span class="keyword">if</span> l[i] &gt;= new:</span><br><span class="line">            l.insert(i, new)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l.append(new)  <span class="comment"># 新知识当for循环正常退出，没有遇到break的前提下，会执行else；如果遇到了就不执行else</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = list(range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line">    print(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        l = insert_sort(l, random.randint(<span class="number">1</span>, <span class="number">200</span>))</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	insert_sort(a, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, tmp;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line">		tmp = a[i];</span><br><span class="line">		<span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp&lt;a[j])&#123;</span><br><span class="line">				a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">		a[j+<span class="number">1</span>]=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    length = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="keyword">if</span> i!=minIndex:</span><br><span class="line">            arr[minIndex], arr[i] = arr[i], arr[minIndex]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    print(arr)</span><br><span class="line">    selectSort(arr)</span><br><span class="line">    print(arr)</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>直接插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-高级计算机语言和编译器</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%AB%98%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="高级计算机语言和编译器"><a href="#高级计算机语言和编译器" class="headerlink" title="高级计算机语言和编译器"></a>高级计算机语言和编译器</h1><h2 id="高级计算机语言"><a href="#高级计算机语言" class="headerlink" title="高级计算机语言"></a>高级计算机语言</h2><p><em>高级计算机语言编程，在更抽象地层面贴近编程者思维，不用考虑计算机机器指令，使编程变得更加容易</em></p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><em>高级计算机语言编写的程序在计算机看来，是一堆没用的指令，需要编译器将程序编译成机器码</em></p>
<p><em>而且不同cpu厂商生产的处理器的指令系统和编码格式不同；其它机型编译后的机器码不能在另一个机型上使用；所以有对应不同处理器的编译器</em></p>
<blockquote>
<p>The more endeavor you make, the more luck you will gain !</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>数据挖掘与机器学习-实验一</title>
    <url>/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E9%AA%8C%E4%B8%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据挖掘与机器学习-实验一"><a href="#数据挖掘与机器学习-实验一" class="headerlink" title="数据挖掘与机器学习-实验一"></a>数据挖掘与机器学习-实验一</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="三种数据类型"><a href="#三种数据类型" class="headerlink" title="三种数据类型"></a>三种数据类型</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="date-range"><a href="#date-range" class="headerlink" title="date_range"></a>date_range</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, periods=<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(periods=<span class="number">4</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="loadtxt"><a href="#loadtxt" class="headerlink" title="loadtxt"></a>loadtxt</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_file = <span class="string">r"xxx.txt"</span></span><br><span class="line">data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br></pre></td></tr></table></figure>



<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP2###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_data_to_timeseries</span><span class="params">(input_file, column, verbose=False)</span>:</span></span><br><span class="line">    <span class="comment"># 导入数据</span></span><br><span class="line">    data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># 确定索引的开始与结束时间</span></span><br><span class="line">    start_date = str(int(data[<span class="number">0</span>,<span class="number">0</span>])) + <span class="string">'-'</span> + str(int(data[<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line">    end_date = str(int(data[<span class="number">-1</span>,<span class="number">0</span>] + <span class="number">1</span>)) + <span class="string">'-'</span> + str(int(data[<span class="number">-1</span>,<span class="number">1</span>] % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">    <span class="comment">###问题一：完善函数###</span></span><br><span class="line">    <span class="comment">###提示：通过pandas的date_range函数获取索引###</span></span><br><span class="line"></span><br><span class="line">    date_time_index = pd.date_range(start=start_date, end=end_date, freq=<span class="string">'M'</span>)</span><br><span class="line">    data_timeseries = pd.Series(data[:,column], index=date_time_index)</span><br><span class="line">    <span class="keyword">return</span> data_timeseries</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP3###</span></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">input_file = <span class="string">r'C:\Users\Ty\Desktop\实验手册-实验二pandas\实验手册-实验二pandas\data.txt'</span></span><br><span class="line">column_num = <span class="number">2</span></span><br><span class="line">data_timeseries = convert_data_to_timeseries(input_file, column_num)</span><br><span class="line"><span class="comment"># Plot方法成图</span></span><br><span class="line">data_timeseries.plot()</span><br><span class="line">plt.title(<span class="string">'Input data'</span>)</span><br><span class="line"><span class="comment"># # 图像太密集了，我们换一个时间范围</span></span><br><span class="line">start = <span class="string">'2007-2'</span></span><br><span class="line">end = <span class="string">'2007-11'</span></span><br><span class="line">plt.figure()</span><br><span class="line">data_timeseries[start:end].plot()</span><br><span class="line">plt.title(<span class="string">'Data from '</span> + start + <span class="string">' to '</span> + end)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP4###</span></span><br><span class="line"><span class="comment"># ###问题二：将数据的第三,四列转换为二维数据结构dataframe,索引为时间###</span></span><br><span class="line">data1 = convert_data_to_timeseries(input_file, <span class="number">2</span>)</span><br><span class="line">data2 = convert_data_to_timeseries(input_file, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 将两组数据同时成图</span></span><br><span class="line">pd.dataframe[<span class="string">'1955'</span>:<span class="string">'1960'</span>].plot()</span><br><span class="line">plt.title(<span class="string">'Data overlapped on top of each other'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP5###</span></span><br><span class="line"><span class="comment"># # 查看两组数据是否有线性关联</span></span><br><span class="line">plt.figure()</span><br><span class="line">difference = pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'first'</span>] - pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'second'</span>]</span><br><span class="line">difference.plot()</span><br><span class="line">plt.title(<span class="string">'Difference (first - second)'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP6###</span></span><br><span class="line"><span class="comment">###问题三：请统计两组数组的最大最小值和均值###</span></span><br><span class="line"><span class="comment">###问题三：计算数据的相关系数，调用corr函数###</span></span><br><span class="line">print(<span class="string">'\nMaximum:\n'</span>, pd.dataframe.max())</span><br><span class="line">print(<span class="string">'\nMinimum:\n'</span>, pd.dataframe.min())</span><br><span class="line">print(<span class="string">'\nMean:\n'</span>, pd.dataframe.mean())</span><br><span class="line">print(<span class="string">'\nCorrelation coefficients:\n'</span>, pd.dataframe.corr())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP7###</span></span><br><span class="line"><span class="comment"># 打印两组数据相关性</span></span><br><span class="line">plt.figure()</span><br><span class="line">pd.rolling_corr(pd.dataframe[<span class="string">'first'</span>], pd.dataframe[<span class="string">'second'</span>], window=<span class="number">60</span>).plot()</span><br><span class="line">pd.dataframe[<span class="string">'first'</span>].rolling(<span class="number">60</span>).corr(pd.dataframe[<span class="string">'second'</span>]).plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-数学函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-地址</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>数据库原理与应用-hbase</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-hbase.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h1><h2 id="hbase安装"><a href="#hbase安装" class="headerlink" title="hbase安装"></a>hbase安装</h2><h2 id="hbase命令"><a href="#hbase命令" class="headerlink" title="hbase命令"></a>hbase命令</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create &#39;user&#39;, &#39;info1&#39;, &#39;info2&#39;</span><br></pre></td></tr></table></figure>



<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><em>put ‘表名’, ‘rowKey’, ‘列族 : 列’  ,  ‘值’</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">put &#39;user&#39;, &#39;1234&#39;, &#39;info1:Name&#39;, &#39;ttyong&#39;</span><br></pre></td></tr></table></figure>



<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p><em>delete ‘表名’,‘行名’,‘列族：列’ 来删除某个记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>deleteall ‘表名’,’rowkey’来删除整行记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>truncate ‘表名’来清空表所有的记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><em>put就是重写一遍，进行覆盖，hbase没有修改，都是追加，即对相同rowKey、列族和列名的数据再次添加即为数据的更新</em></p>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p><em>scan ‘表名’来查看表的所有记录</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get  ‘表名’ , ‘rowKey’ 来查看某个rowKey下的所有记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get ‘表名’,’rowkey’,’列族’来查看某个rowKey列族的记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>get ‘表名’,’rowkey’,’列族：列’来查看rowKey列族的某个列记录</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="查看存在的表"><a href="#查看存在的表" class="headerlink" title="查看存在的表"></a>查看存在的表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list &#39;user&#39;</span><br></pre></td></tr></table></figure>



<h3 id="查看表的具体结构"><a href="#查看表的具体结构" class="headerlink" title="查看表的具体结构"></a>查看表的具体结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe &#39;user&#39;</span><br></pre></td></tr></table></figure>



<h2 id="hbase遇到的问题"><a href="#hbase遇到的问题" class="headerlink" title="hbase遇到的问题"></a>hbase遇到的问题</h2><p><a href="https://imgchr.com/i/wTZSzQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/20/wTZSzQ.md.png" alt="wTZSzQ.md.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/09/20/wTZ0eI.png" alt="wTZ0eI.png" border="0">

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><img src="https://s1.ax1x.com/2020/09/20/wTVzRg.png" alt="wTVzRg.png" border="0">

<p><em>1.将regionservers里的localhost改为虚拟机名字</em></p>
<p><em>2.将hadoop的namenode的tmp文件删除(有更改为固定路径，就删除更改后的文件)，然后重新格式化</em></p>
<p><em>3.hbase的hbase-site.xml里的端口改为hadoop端口一致的8020</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库原理与应用</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-strcpy</title>
    <url>/C%E8%AF%AD%E8%A8%80-strcpy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-strcmp</title>
    <url>/C%E8%AF%AD%E8%A8%80-strcmp.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-文件输入输出常用函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="文件输入输出常用函数"><a href="#文件输入输出常用函数" class="headerlink" title="文件输入输出常用函数"></a>文件输入输出常用函数</h1><h2 id="getc，gets，getchar"><a href="#getc，gets，getchar" class="headerlink" title="getc，gets，getchar"></a>getc，gets，getchar</h2><h3 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h3><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p><em>1）baigets()用于从标准输入流stdin读入一个du整行（以’\n’或EOF）结束，写入ptr指向的字符数组，并返回这个指针；出错或遇到文件结束时则返回NULL。行末的’\n’从流中取出，但不写入数组。gets()不检查被写入的数组大小</em></p>
<h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h3><p><em>getchar()用于从标准输入流stdin读入一个字符，并返回这个字符。如果读到文件结尾，则返回EOF。注意到EOF不能用char类型表示，所以getchar()函数返回的是一个int型的数。使用时也应该注意这一点</em></p>
<p><em>读取一个字符，包括dao车键也会被读成一个字符</em></p>
<h3 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h3><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><h3 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h3><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-二进制I/O:write函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-fwrite%E5%92%8Cfread%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="fwrite和fread"><a href="#fwrite和fread" class="headerlink" title="fwrite和fread"></a>fwrite和fread</h1><p><em>文件中以二进制形式存储，可以保证数值的精确</em></p>
<p><em>这两个函数以二进制形式处理数据</em></p>
<p><em>正常情况下返回的值，就是设置模块的值；如果出错返回值会比nmemb的值小</em></p>
<h2 id="fwrite函数"><a href="#fwrite函数" class="headerlink" title="fwrite函数"></a>fwrite函数</h2><p><em>二进制数据写入文件</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fwrite(ptr, size, nmemb, fp) // ptr读取数据的地址;size 单位是字节，可以用sizeof的返回值; nmemb 待写入数据块的数量;fp待写入文件地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写入字符串</span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">256</span>];</span><br><span class="line">fwrite(<span class="built_in">buffer</span>, <span class="number">256</span>, <span class="number">1</span>, fp) <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写入数字</span></span><br><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp)</span><br></pre></td></tr></table></figure>

<p><em>以上调用把earnings数组中的数据写入文件，数据被分成10块，每块都是double的大小</em></p>
<p><a href="https://imgchr.com/i/wjMMhF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wjMMhF.md.png" alt="wjMMhF.png" border="0"></a></p>
<h2 id="fread函数"><a href="#fread函数" class="headerlink" title="fread函数"></a>fread函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fread(ptr, <span class="built_in">size</span>, nmemb, fp);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fread(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp); <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-feof函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-feof%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="feof和ferror函数"><a href="#feof和ferror函数" class="headerlink" title="feof和ferror函数"></a>feof和ferror函数</h1><h2 id="feof"><a href="#feof" class="headerlink" title="feof"></a>feof</h2><p><em>其功能是检测流上的文件结束符，如果文件结束，则返回非0值，否则返回0（即，文件结束：返回非0值；文件未结束：返回0值)</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ferror"><a href="#ferror" class="headerlink" title="ferror"></a>ferror</h2><p><em>读写错误，ferror返回一个非零值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构-图的深度优先和广度优先访问</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E8%AE%BF%E9%97%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="图的深度优先和广度优先访问"><a href="#图的深度优先和广度优先访问" class="headerlink" title="图的深度优先和广度优先访问"></a>图的深度优先和广度优先访问</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/fkyyly/article/details/83313843" target="_blank" rel="external nofollow noopener noreferrer">url1</a></p>
<p><a href>url2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-exit和return</title>
    <url>/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-getc和getchar和putc和putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="getc和getchar和putc和putchar"><a href="#getc和getchar和putc和putchar" class="headerlink" title="getc和getchar和putc和putchar"></a>getc和getchar和putc和putchar</h1><h2 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h2><p><em>从fp指针处获取一个字符</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ch = getc(fp);</span><br></pre></td></tr></table></figure>

<h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p><em>从输入缓存中读取个字符</em></p>
<a href="/C%E8%AF%AD%E8%A8%80-getchar%E5%92%8Cputchar.html" title="C语言-getchar和putchar">C语言-getchar和putchar</a>

<h2 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h2><p><em>将字符写入到FILE指针fpout指向的文件中</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">putc(ch, fpout);</span><br></pre></td></tr></table></figure>

<h2 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(ch);</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-文件输入输出</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="文件输入-输出"><a href="#文件输入-输出" class="headerlink" title="文件输入\输出"></a>文件输入\输出</h1><p><em>判断文件结束feof函数，移动文件指针位置fseek函数，获得文件位置ftell函数，文件位置移到开头rewind函数，文件字符输入输出fgetc函数和fputc函数，文件输入输出fscanf函数和fprintf函数，文件字符串输入输出fgets函数和fputs函数，读写二进制文件fread函数和fwrite函数</em></p>
<h2 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen()函数"></a>fopen()函数</h2><p><em>打开一个文件，返回文件指针，并不是真的指向文件，而是缓冲区信息, 也有可能返回NULL和空指针</em></p>
<p><em>文件指针是一种指向FILE的指针，在stdlib.h中定义了</em></p>
<h3 id="fopen的模式字符串"><a href="#fopen的模式字符串" class="headerlink" title="fopen的模式字符串"></a>fopen的模式字符串</h3><p><a href="https://imgchr.com/i/dLomOf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dLomOf.md.jpg" alt="dLomOf.jpg" border="0"></a></p>
<h2 id="getc函数和putc函数"><a href="#getc函数和putc函数" class="headerlink" title="getc函数和putc函数"></a>getc函数和putc函数</h2><p><em>getc获得的是字符地址，putc第一个参数为字符地址</em></p>
<h3 id="getc-函数"><a href="#getc-函数" class="headerlink" title="getc()函数"></a>getc()函数</h3><p><em>是一种用来检查文件是否读完的函数，超过时，会返回EOF</em><br><em>EOF是一个特殊的数值</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">ch = getc(fp);</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    ch = getc(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上面等价于</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(ch=getc(fp)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="putc函数"><a href="#putc函数" class="headerlink" title="putc函数"></a>putc函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// putc(ch, fpout)</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">ch = getc(fp)</span><br><span class="line">putc(ch, <span class="built_in">stdout</span>) <span class="comment">// 相当于putchar(ch)</span></span><br></pre></td></tr></table></figure>

<h2 id="标准文件指针"><a href="#标准文件指针" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dzEjV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/01/dzEjV1.md.jpg" alt="dzEjV1.jpg" border="0"></a></p>
<h2 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose()函数"></a>fclose()函数</h2><p><em>关闭fp指针指向的文件，成功关闭文件返回0，失败返回EOF</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"xxxx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    FILE * in, *out;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">char</span> name[LEN];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:	%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(in=fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))==<span class="literal">NULL</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"I couldn't open the file: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">      	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(name, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcat</span>(name, <span class="string">".red"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(out=fopen(name, <span class="string">"w"</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cant create output file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getc(in)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count++%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">			putc(ch, out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(in)!=<span class="number">0</span>||fclose(out)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Errot in closing files\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>使用stderr指针把错误消息发送到标准错误文件，这是一个标准的C惯例</em></p>
<h2 id="标准文件指针-1"><a href="#标准文件指针-1" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dXP02t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dXP02t.md.jpg" alt="dXP02t.jpg" border="0"></a></p>
<h2 id="fprintf，fscanf"><a href="#fprintf，fscanf" class="headerlink" title="fprintf，fscanf"></a>fprintf，fscanf</h2><p><em>第一个参数为指针；putc为最后一个为指针</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">10</span>] = <span class="string">"good morning"</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> words[MAX];</span><br><span class="line">	FILE * fp;</span><br><span class="line">	<span class="keyword">if</span>(fp=fopen(<span class="string">"words.txt"</span>, <span class="string">"a+"</span>))&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Can not open \"words\" file\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(gets(words)!=<span class="literal">NULL</span>&amp;&amp;words[<span class="number">0</span>]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br><span class="line">	&#125;</span><br><span class="line">	rewind(fp);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words)==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(words);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error closing file\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p><em>使光标回到文件开头</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rewind(fp);</span><br></pre></td></tr></table></figure>



<h2 id="fgets-fputs"><a href="#fgets-fputs" class="headerlink" title="fgets(), fputs()"></a>fgets(), fputs()</h2><h3 id="fgets和gets"><a href="#fgets和gets" class="headerlink" title="fgets和gets"></a>fgets和gets</h3><p><em>gets只能提供一个参数</em></p>
<p><em>fgets可以提供三个参数，第一个：用于存储输入的地址；第二个：是整数，控制输入的最大字符串长度；第三个：文件指针，要读取的文件</em></p>
<p><em>gets从输入读取赋值后把换行符删除；fgets从文件读入并赋值，换行符也会读取</em></p>
<p><em>fgets读取到它所遇到的第一个换行符，或者最大长度前一个字符，或者文件结尾</em></p>
<p><em>如果fgets在达到最大字符长度之前读完了一行，它会在字符串空字符前添加一个换行符</em></p>
<p><em>fgets和gets在遇到EOF时都会返回NULL，因此可以用来检查文件结束</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fgets(buf, MAX, fp) buf是一个字符数组名称</span></span><br></pre></td></tr></table></figure>

<h3 id="puts和fputs"><a href="#puts和fputs" class="headerlink" title="puts和fputs"></a>puts和fputs</h3><p><em>puts自动换行</em></p>
<p><em>fputs接受两个参数，第一个是字符串地址，第二个文件指针</em></p>
<p><em>由于fgets保留换行符，fputs不添加换行符，所以它们可以配合得很好</em></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAX];</span><br><span class="line">    <span class="keyword">while</span>(fgets(arr, MAX, <span class="built_in">stdin</span>)!=<span class="literal">NULL</span>&amp;&amp;arr[<span class="number">0</span>]!=<span class="string">'\n'</span>)&#123;</span><br><span class="line">		<span class="built_in">fputs</span>(arr, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br></pre></td></tr></table></figure>

<p><em>如果输入的超过了最大长度减1，则一次只读取19个，循环下一次再读取</em></p>
<h2 id="fseek和ftell"><a href="#fseek和ftell" class="headerlink" title="fseek和ftell"></a>fseek和ftell</h2><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek()"></a>fseek()</h3><p><em>fseek可以将fopen打开的文件的光标移到任意位置</em></p>
<p><em>如果正常返回0；试图超过文件范围-1</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fseek(FILE指针，偏移量，起点位置) 偏移量必须为long类型，可以是正负零</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">fseek(fp, <span class="number">-1L</span>, SEEK_END); <span class="comment">// 从文件末尾退回1个字节</span></span><br><span class="line">fseek(fp, <span class="number">5L</span>, SEEK_CUR);</span><br></pre></td></tr></table></figure>

<h4 id="文件的起点模式"><a href="#文件的起点模式" class="headerlink" title="文件的起点模式"></a>文件的起点模式</h4><p><a href="https://imgchr.com/i/wPeMYd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/03/wPeMYd.md.jpg" alt="wPeMYd.jpg" border="0"></a></p>
<h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell()"></a>ftell()</h3><p><em>ftell以一个long值类型返回文件的当前位置</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> last;</span><br><span class="line">last = ftell(fp);</span><br></pre></td></tr></table></figure>

<h3 id="配合使用"><a href="#配合使用" class="headerlink" title="配合使用"></a>配合使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 50</span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">long</span> last, count;</span><br><span class="line">    FILE*fp;</span><br><span class="line">    <span class="keyword">char</span> file[LEN];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the file name:	"</span>);</span><br><span class="line">    gets(file)</span><br><span class="line">    <span class="keyword">if</span>(fopen(file, <span class="string">"rb"</span>))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Can't open %s"</span>, file);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(fp, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    last = ftell(fp);</span><br><span class="line">    <span class="keyword">for</span>(count=<span class="number">1L</span>, count&lt;last, count++)&#123;</span><br><span class="line">		fseek(fp, -count, SEEK_END);</span><br><span class="line">        ch = getc(fp);</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fread-和fwrite"><a href="#fread-和fwrite" class="headerlink" title="fread()和fwrite()"></a>fread()和fwrite()</h2><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-typedef</title>
    <url>/C%E8%AF%AD%E8%A8%80-typedef.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-指针</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><em>指针是一个值为地址的变量</em></p>
<p><em>被调函数虽然只是用它自己的局部变量，不可以对调用函数的变量的值进行修改；但使用指针时，可以被修改</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br></pre></td></tr></table></figure>



<h2 id="int-p-中-p和p的差别"><a href="#int-p-中-p和p的差别" class="headerlink" title="int *p 中 *p和p的差别"></a>int *p 中 *p和p的差别</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*p可以当做变量来用;*的作用是取后面地址p里面的数值</span><br><span class="line">p是当作地址来使用</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*p++ 和 (*p)++的之间的差别</span><br><span class="line">    *p++是 地址会变化。</span><br><span class="line"></span><br><span class="line">	(*p)++ 是数值会要变化</span><br></pre></td></tr></table></figure>

<h2 id="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"><a href="#数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。" class="headerlink" title="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"></a>数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。</h2><hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-间接运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%97%B4%E6%8E%A5%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="间接运算符"><a href="#间接运算符" class="headerlink" title="间接运算符"></a>间接运算符</h1><p><em>获得地址所指向的值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-地址运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="地址运算符-amp"><a href="#地址运算符-amp" class="headerlink" title="地址运算符&amp;"></a>地址运算符&amp;</h1><p><em>可以使用&amp;获得变量的内存地址</em></p>
<p><em>%p是地址输出说明符</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-递归</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%80%92%E5%BD%92.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line">    fun(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">    <span class="keyword">if</span> (n&lt;<span class="number">5</span>)</span><br><span class="line">    	fun(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p><em>调用语句在函数最后，return之前</em></p>
<p><em>最简单的递归形式</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="使用函数的必要性"><a href="#使用函数的必要性" class="headerlink" title="使用函数的必要性"></a>使用函数的必要性</h2><p><em>一次编写，多出使用，避免重复编写</em></p>
<p><em>模块化，已阅读，修改，编写</em></p>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h2 id="声明函数原型"><a href="#声明函数原型" class="headerlink" title="声明函数原型"></a>声明函数原型</h2><p><em>在调用自定义函数时，都必须在main外面或里面声明函数原型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 声明函数原型</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">	fun1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h2><p><em>定义函数是，有多个参数，用逗号隔开；参数名前要带变量类型；不能像声明同类型变量时，一次声明多个变量</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure>



<h2 id="带参数的函数原型声明"><a href="#带参数的函数原型声明" class="headerlink" title="带参数的函数原型声明"></a>带参数的函数原型声明</h2><p><em>可以省略原型中的参数名，只带类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p><em>函数原型中参数的名字</em></p>
<h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p><em>调用时赋给形参的具体值</em></p>
<h2 id="调用函数和被调用函数"><a href="#调用函数和被调用函数" class="headerlink" title="调用函数和被调用函数"></a>调用函数和被调用函数</h2><p><em>因为被调函数使用的值是从调用函数复制来的值，所以在被调函数中修改值，外层的值不会改变</em></p>
<h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p><em>可以在函数执行中返回值，然后该语句块结束</em></p>
<h2 id="不确定参数的函数"><a href="#不确定参数的函数" class="headerlink" title="不确定参数的函数"></a>不确定参数的函数</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-结构数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-嵌套结构</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h1><p><em>一个结构不能包含它自己；但可以包含它自己结构的指针；也可以包含另一个结构</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> first[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> second[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span></span><br><span class="line">    <span class="keyword">char</span> favfood[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> job[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-putchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-某些程序编程技巧</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%9F%90%E4%BA%9B%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="某些程序编程技巧"><a href="#某些程序编程技巧" class="headerlink" title="某些程序编程技巧"></a>某些程序编程技巧</h1><h2 id="循环用gets赋值时退出循环"><a href="#循环用gets赋值时退出循环" class="headerlink" title="循环用gets赋值时退出循环"></a>循环用gets赋值时退出循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(gets(arr1)!=<span class="literal">NULL</span>&amp;&amp;arr1!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">x</span><br><span class="line">x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>第一个条件当gets试图超出文件读取时返会NULL；第二个条件，避免用户没有输入直接回车</em></p>
<h2 id="gets-和scanf一起使用时"><a href="#gets-和scanf一起使用时" class="headerlink" title="gets()和scanf一起使用时"></a>gets()和scanf一起使用时</h2><p><em>由于scanf不会对缓冲输入区中删除最后的回车；如果此时再使用gets，就会导致gets不会读取用户输入，直接停止。所以在使用gets()前要对缓冲区中的\n删除，如下操作：</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>， arr)</span><br><span class="line"><span class="keyword">while</span>(getchar()!=<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">gets(xxx)</span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-getchar和putchar</title>
    <url>/C%E8%AF%AD%E8%A8%80-getchar%E5%92%8Cputchar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h1><p><em>可以从输入缓冲区读取一个字符，并作为返回值</em></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar(); <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">putchar</span>(ch); <span class="comment">// a</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch); </span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; <span class="meta">#agd</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&gt;&gt;&gt; <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;      <span class="comment">// 5输完回车，光标应该在这一行，但getchar读取缓冲区scanf执行后未删除的‘/n’,跳到下一行，缓冲区空，输入进入后面的循环</span></span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;fgsh#</span><br><span class="line">&gt;&gt;&gt;fgsh</span><br></pre></td></tr></table></figure>

<h2 id="getchar和缓冲区链接"><a href="#getchar和缓冲区链接" class="headerlink" title="getchar和缓冲区链接"></a>getchar和缓冲区链接</h2><p><a href="https://blog.csdn.net/gxyqn626/article/details/79253238" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://blog.csdn.net/lws123253/article/details/79848373" target="_blank" rel="external nofollow noopener noreferrer">URL2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-C语言中分配了动态内存后一定要释放吗？</title>
    <url>/C%E8%AF%AD%E8%A8%80-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%88%86%E9%85%8D%E4%BA%86%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%90%8E%E4%B8%80%E5%AE%9A%E8%A6%81%E9%87%8A%E6%94%BE%E5%90%97%EF%BC%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="C语言中分配了动态内存后一定要释放吗？"><a href="#C语言中分配了动态内存后一定要释放吗？" class="headerlink" title="C语言中分配了动态内存后一定要释放吗？"></a>C语言中分配了动态内存后一定要释放吗？</h1><p><em>好的开发习惯是使用后就释放</em></p>
<h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><em>运行过程中手动分配很少的内存，这样的程序不使用free()也不会太影响系统性能；程序结束后操作系统会自动释放内存</em></p>
<h2 id="开发大项目"><a href="#开发大项目" class="headerlink" title="开发大项目"></a>开发大项目</h2><p><em>程序中需要分配大量的内存，如果使用后不释放，可能会造成系统崩溃</em></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/lyw736632087/article/details/80346536" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-sizeof</title>
    <url>/C%E8%AF%AD%E8%A8%80-sizeof.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p><em>以字节为单位给出对象的大小</em></p>
<p><strong>测类型必须要括号；测具体量可有可无；但最好所有都带括号</strong></p>
<h2 id="有括号"><a href="#有括号" class="headerlink" title="有括号"></a>有括号</h2><p><em>测类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">siezeof (<span class="keyword">char</span>);</span><br><span class="line">siezeof (<span class="keyword">float</span>);</span><br></pre></td></tr></table></figure>



<h2 id="无括号"><a href="#无括号" class="headerlink" title="无括号"></a>无括号</h2><p><em>测具体量；也可以有括号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">sizeof</span> a <span class="comment">// sizeof (a)</span></span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C语言-字符串</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><em>和java语言一样，严格用双引号代表字符串，单引号代表字符</em></p>
<p><em>在C语言中没有专门为字符串定义变量类型；用字符数组存储字符串，字符数组实际存储的元素个数要比字符串元素个数多一，因为字符数组最后会存储一个空字符\0</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"xfssef"</span>;</span><br></pre></td></tr></table></figure>



<h2 id="strlen和sizeof"><a href="#strlen和sizeof" class="headerlink" title="strlen和sizeof"></a>strlen和sizeof</h2><p><em>都可以用来计算字符串的长度，但是差异却很大</em></p>
<h3 id="当定义字符串时没有明确说明字符串多长"><a href="#当定义字符串时没有明确说明字符串多长" class="headerlink" title="当定义字符串时没有明确说明字符串多长"></a>当定义字符串时没有明确说明字符串多长</h3><p><em>strlen会给出准确答案，但sizeof会比strlen大1，这是因为它算上了空白符</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="当定义字符串时明确说明字符串多长"><a href="#当定义字符串时明确说明字符串多长" class="headerlink" title="当定义字符串时明确说明字符串多长"></a>当定义字符串时明确说明字符串多长</h3><p><em>sizeof会给出字符数组的大小，strlen给出准确值</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">40</span>] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure>

<h2 id="strcpy和strcat"><a href="#strcpy和strcat" class="headerlink" title="strcpy和strcat"></a>strcpy和strcat</h2><p><em>strcpy是为字符串赋值；strcat字符串后面添加字符串</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(arr, <span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">strcat</span>(arr, <span class="string">".red"</span>);</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-malloc</title>
    <url>/C%E8%AF%AD%E8%A8%80-malloc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-gets和scanf</title>
    <url>/C%E8%AF%AD%E8%A8%80-gets%E5%92%8Cscanf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="gets-get-string"><a href="#gets-get-string" class="headerlink" title="gets(get string)"></a>gets(get string)</h1><h2 id="gets和scanf的区别"><a href="#gets和scanf的区别" class="headerlink" title="gets和scanf的区别"></a>gets和scanf的区别</h2><h3 id="字符串的读入"><a href="#字符串的读入" class="headerlink" title="字符串的读入"></a>字符串的读入</h3><p><em>gets可以直接读取包含空格的字符串；而scanf当读到空格等就停止读取</em></p>
<h3 id="给字符变量赋值"><a href="#给字符变量赋值" class="headerlink" title="给字符变量赋值"></a>给字符变量赋值</h3><p><em>gets可以传参的类型为：字符指针变量；字符数组</em></p>
<p><em>gets从输入缓冲区读入字符串存储到字符指针变量或字符数组所指向的内存空间</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为字符指针</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> * fp = str;</span><br><span class="line">gets(fp)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为字符数组</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">10</span>];</span><br><span class="line">gets(arr)</span><br></pre></td></tr></table></figure>

<h2 id="是否清空本次输入的回车"><a href="#是否清空本次输入的回车" class="headerlink" title="是否清空本次输入的回车"></a>是否清空本次输入的回车</h2><p><strong>gets</strong>：<em>会自动清除输入缓冲区的回车</em></p>
<p><strong>scanf</strong>：<em>不会</em></p>
<p><strong>案例:</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1);  </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br></pre></td></tr></table></figure>

<h3 id="使用getchar清除缓冲区的回车"><a href="#使用getchar清除缓冲区的回车" class="headerlink" title="使用getchar清除缓冲区的回车"></a>使用getchar清除缓冲区的回车</h3>

<h2 id="scanf博客链接"><a href="#scanf博客链接" class="headerlink" title="scanf博客链接"></a>scanf博客链接</h2><a href="/C%E8%AF%AD%E8%A8%80-printf%E5%92%8Cscanf.html" title="C语言-printf和scanf">C语言-printf和scanf</a>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-puts</title>
    <url>/C%E8%AF%AD%E8%A8%80-puts.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h1><p><em>其实和printf差不多；但printf比puts更强大，更加灵活</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"abcdef"</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"abcdef\n"</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<em>注意puts输出时会自动换行</em></p>
<p><strong>注意当puts的参数为字符指针或字符数组时，只能有字符指针名或字符数组名</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">char</span> * str2 = <span class="string">"efg"</span>;</span><br><span class="line"><span class="built_in">puts</span>(str1); <span class="comment">// "abcd"</span></span><br><span class="line"><span class="built_in">puts</span>(str2); <span class="comment">// "efg"</span></span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-链表</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><em>案例：当有很多结构对象时，我们可以选择用数组来存储  ,可以用数组存储结构指针，在一定程度上减小了内存浪费；再进一步可以用链表来完成</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">library</span>[<span class="title">MAXLEN</span>];</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAXLEN; i++)&#123;</span><br><span class="line">		library[i] = (struct book *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct book));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TSIZE  30</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">film</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">int</span> rating; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="comment">// 输入创建链表</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter movie title:	"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">current</span>, *<span class="title">head</span>, *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="keyword">char</span> input[TSIZE];</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(gets(input) != <span class="literal">NULL</span> &amp;&amp; input[<span class="number">0</span>] != <span class="string">'\0'</span>)&#123;</span><br><span class="line">        current = (struct film *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(struct film));</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">            head = current;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev -&gt; next = current;</span><br><span class="line">    	current -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(current-&gt;title, input);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter your rating &lt;0-10&gt;:	"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;current-&gt;rating);</span><br><span class="line">        <span class="comment">// / scanf不会自动清除输入缓冲区的换行符 </span></span><br><span class="line">        <span class="keyword">while</span>(getchar()!=<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter next moive title(empty line to stop):	"</span>);</span><br><span class="line">        prev = current;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示链表</span></span><br><span class="line">    <span class="keyword">if</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Here is the movie list:	\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"No data Entered.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"moive: %s Rating: %d\n"</span>, current-&gt;title, current-&gt;rating);</span><br><span class="line">        current= current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任务完成，释放分配空间</span></span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Bye\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Here is the movie list:	\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"No data Entered.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"moive: %s Rating: %d\n"</span>, current-&gt;title, current-&gt;rating);</span><br><span class="line">        current= current-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">current = head;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><em>元素个数确定；所有元素类型相同</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int numbers[10];</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><em>不初始化，元素值为无意义值；部分赋值，其它的为0</em></p>
<p><em>不允许用一个数组赋值另一个数组</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">int numbers[5] &#x3D; &#123;1,2,3,4,5&#125;;</span><br><span class="line">numbers[0]&#x3D; 5;</span><br><span class="line">2.</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define months 12</span><br><span class="line"></span><br><span class="line">int days[months]&#x3D;&#123;31, 29, 31, 30, 31,30,31,31,30,31,30,31&#125;; &#x2F;&#x2F; 用标识符常量来代表大小，修改时很方便</span><br><span class="line">3.</span><br><span class="line">int months[] &#x3D; &#123;1, 2, 3&#125;; &#x2F;&#x2F; 数组大小由括号类个数确定</span><br></pre></td></tr></table></figure>

<h2 id="指定初始化项目-C99"><a href="#指定初始化项目-C99" class="headerlink" title="指定初始化项目(C99)"></a>指定初始化项目(C99)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int months[5] &#x3D; &#123;[4]&#x3D;30&#125;;</span><br><span class="line"></span><br><span class="line">int days[10] &#x3D; &#123;1, 2 ,[1]&#x3D;1,2,3,4,[6]&#x3D;5,6,7,8,9&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="设置为只读"><a href="#设置为只读" class="headerlink" title="设置为只读"></a>设置为只读</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const int months[5] &#x3D; &#123;31, 29, 31,30,31&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p><em>当定义时是没有给出数组明确大小；可以用sizeof</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int months[] &#x3D; &#123;1, 2, 3, 4&#125;;</span><br><span class="line">int i;</span><br><span class="line">&#x2F;&#x2F; sizeof后跟对象后字节大小，下例用总大小&#x2F;单个大小</span><br><span class="line">for(i&#x3D;0; i&lt;sizeof months&#x2F;sizeof months[0]; i++)&#123;</span><br><span class="line">xxx</span><br><span class="line">    xx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><em>采用索引对应每一个元素</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numbers[0];</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<em>索引不能超过正确范围；超过编译器不能检查出错误，有时可能程序能够正常运行，但会结果会出错，最糟糕会导致计算机锁死或重启</em></p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[2][2]&#x3D;&#123;&#123;1,2&#125;,&#123;1,2&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">(*(a+<span class="number">1</span>))[<span class="number">2</span>]; <span class="comment">// *(a+1)[2]  中括号的优先级比*高</span></span><br><span class="line">*(*(a+<span class="number">1</span>)+<span class="number">2</span>); </span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>]变成*(a+<span class="number">2</span>); a[<span class="number">2</span>][<span class="number">3</span>]变成 (*(a+<span class="number">2</span>))[<span class="number">3</span>]再可以变成 *(*(a+<span class="number">2</span>)+<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h2 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>[5];</span></span><br></pre></td></tr></table></figure>



<h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p><em>在没学链表之前可以这么做</em></p>
<p><em>可以避免一次malloc申请一片连续的存储空间</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">fp</span>;</span></span><br><span class="line">fp = (struct book *) <span class="built_in">malloc</span>(<span class="number">5</span>*<span class="keyword">sizeof</span>(struct book));</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">fp</span>[<span class="title">MAX</span>];</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">    fp[i]=(struct book *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct book));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-结构</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><em>感觉跟其它语言的类拥有很多属性一样</em></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTITLE 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AUTHOR 12</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[maxtitle];</span><br><span class="line">    <span class="keyword">char</span> author[author];</span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>;</span> <span class="comment">//声明单个</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library1</span>，<span class="title">library2</span>;</span> <span class="comment">//声明多个</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> * <span class="title">ptbook</span>;</span><span class="comment">// 声明一个指针指向该结构</span></span><br></pre></td></tr></table></figure>

<h2 id="定义和声明放一起"><a href="#定义和声明放一起" class="headerlink" title="定义和声明放一起"></a>定义和声明放一起</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[maxtitle];</span><br><span class="line">    <span class="keyword">char</span> author[author];</span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line">&#125; library; <span class="comment">//这时省略book标记也可以</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><em>可以和初始化数组类似的方法初始化</em></p>
<p><strong>注意</strong>：<em>初始化的每一条项目必须与成员类型相同；赋值顺序要和定义的一样</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span> = &#123;</span></span><br><span class="line">    <span class="string">"the pirate and the deious damsel"</span>,</span><br><span class="line">    <span class="string">"renee vivote"</span>,</span><br><span class="line">    <span class="number">1.95</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line">gets(library.title); <span class="comment">//将输入的值赋给title</span></span><br></pre></td></tr></table></figure>



<h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构变量.成员名称</span></span><br><span class="line">library.title;</span><br></pre></td></tr></table></figure>



<h2 id="结构的指定初始化项目"><a href="#结构的指定初始化项目" class="headerlink" title="结构的指定初始化项目"></a>结构的指定初始化项目</h2><p><em>跟数组的初始化项目类似</em></p>
<p><strong>赋值顺序不一定要和定义的一样</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span> = &#123;</span></span><br><span class="line">    .title = <span class="string">"fxxx"</span>,</span><br><span class="line">    .value = <span class="number">12.5</span>,</span><br><span class="line">    .author = <span class="string">"xxx"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h2><a href="/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html" title="C语言-嵌套结构">C语言-嵌套结构</a>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>结构</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-指针和数组</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p><em>指针提供一种用来使用地址的符号方法</em></p>
<p><strong>数组的名称就是该数组首元素的地址</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line">arr = &amp;arr[<span class="number">0</span>]; <span class="comment">//&amp;:地址运算符</span></span><br></pre></td></tr></table></figure>

<p><em>arr和&amp;arr[0]都表示该数组的首元素内存地址</em></p>
<p><strong>声明指针时前面必须写对象类型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>*pti;</span><br><span class="line">pti=arr;<span class="comment">//数组地址赋给指针</span></span><br></pre></td></tr></table></figure>

<p><em>对一个指针加1，是对该指针增加一个存储单元；对于数组来说是对应到下一个元素地址；所以声明指针时要指明类型</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> nu[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> * pti;</span><br><span class="line">  pti = nu;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, pti); <span class="comment">//000000000062FE00</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p"</span>, pti+<span class="number">1</span>); <span class="comment">//000000000062FE04</span></span><br><span class="line">  &#125;					<span class="comment">//刚好一个int类型的数据是4个字节</span></span><br></pre></td></tr></table></figure>

<p><strong>对指针加1等价于对指针的值加上它指向的对象的字节大小</strong></p>
<p><strong>在指针前使用’星号‘可以得到它指向的值</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">*(arr+<span class="number">2</span>) = arr[<span class="number">2</span>]; <span class="comment">//这里的arr的地址就是指针</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-预处理指令</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h1><h2 id="include-lt-stdio-h-gt"><a href="#include-lt-stdio-h-gt" class="headerlink" title="#include &lt;stdio.h&gt;"></a>#include &lt;stdio.h&gt;</h2><h2 id="define-MONTHS-12"><a href="#define-MONTHS-12" class="headerlink" title="#define MONTHS 12"></a>#define MONTHS 12</h2><p><em>标识符常量</em></p>
<p><strong>必须大写</strong></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>火车订票系统-主函数设计</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E4%B8%BB%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>火车订票系统-具备的功能</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E5%85%B7%E5%A4%87%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="具备的功能"><a href="#具备的功能" class="headerlink" title="具备的功能"></a>具备的功能</h1><h2 id="插入火车信息"><a href="#插入火车信息" class="headerlink" title="插入火车信息"></a>插入火车信息</h2><h2 id="修改火车信息"><a href="#修改火车信息" class="headerlink" title="修改火车信息"></a>修改火车信息</h2><h2 id="查询火车信息"><a href="#查询火车信息" class="headerlink" title="查询火车信息"></a>查询火车信息</h2><h2 id="显示车次信息"><a href="#显示车次信息" class="headerlink" title="显示车次信息"></a>显示车次信息</h2><h2 id="订票功能"><a href="#订票功能" class="headerlink" title="订票功能"></a>订票功能</h2><h2 id="保存火车和订票信息"><a href="#保存火车和订票信息" class="headerlink" title="保存火车和订票信息"></a>保存火车和订票信息</h2><p><a href="https://imgchr.com/i/dfCwDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/26/dfCwDS.md.jpg" alt="dfCwDS.jpg" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>火车订票系统</tag>
      </tags>
  </entry>
  <entry>
    <title>火车订票系统-预处理模块设计</title>
    <url>/%E7%81%AB%E8%BD%A6%E8%AE%A2%E7%A5%A8%E7%B3%BB%E7%BB%9F-%E9%A2%84%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="预处理模块设计"><a href="#预处理模块设计" class="headerlink" title="预处理模块设计"></a>预处理模块设计</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><h2 id="火车和订票人结构体链表"><a href="#火车和订票人结构体链表" class="headerlink" title="火车和订票人结构体链表"></a>火车和订票人结构体链表</h2><h2 id="火车和订票人信息链表"><a href="#火车和订票人信息链表" class="headerlink" title="火车和订票人信息链表"></a>火车和订票人信息链表</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>火车订票系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-基本常识</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%AF%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="C语言基本常识"><a href="#C语言基本常识" class="headerlink" title="C语言基本常识"></a>C语言基本常识</h1><h2 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h2><h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="在数值变量前加-amp-得到它的地址，在指针变量前加-得到值"><a href="#在数值变量前加-amp-得到它的地址，在指针变量前加-得到值" class="headerlink" title="在数值变量前加&amp;得到它的地址，在指针变量前加*得到值"></a>在数值变量前加&amp;得到它的地址，在指针变量前加*得到值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * c, <span class="keyword">int</span> * a, <span class="keyword">int</span> * b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>, b=<span class="number">0</span>;</span><br><span class="line">	gets(str);</span><br><span class="line">	fun(str, &amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"upper %d lower %d"</span>, a, b);</span><br><span class="line">	getch();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * c, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(*c)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">'A'</span>&lt;=*c &amp;&amp; *c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">			(*a)++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">'a'</span>&lt;=*c &amp;&amp; *c&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">			(*b)++;</span><br><span class="line">		&#125;</span><br><span class="line">		c++;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="字符串变量就是第一个字符的地址，等价于在变量前加-amp"><a href="#字符串变量就是第一个字符的地址，等价于在变量前加-amp" class="headerlink" title="字符串变量就是第一个字符的地址，等价于在变量前加&amp;"></a>字符串变量就是第一个字符的地址，等价于在变量前加&amp;</h3><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环当中必须是两个分号，千万不要忘记"><a href="#for循环当中必须是两个分号，千万不要忘记" class="headerlink" title="for循环当中必须是两个分号，千万不要忘记"></a>for循环当中必须是两个分号，千万不要忘记</h3><h3 id="do-while-循环的后一个while-的分号一定不能够丢"><a href="#do-while-循环的后一个while-的分号一定不能够丢" class="headerlink" title="do-while()循环的后一个while();的分号一定不能够丢"></a>do-while()循环的后一个while();的分号一定不能够丢</h3><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="while-c-getchar-’-n’-和-while-c-getchar-’-n’-的差别"><a href="#while-c-getchar-’-n’-和-while-c-getchar-’-n’-的差别" class="headerlink" title="while((c=getchar())!=’\n’)和 while(c=getchar() !=’\n’)的差别"></a>while((c=getchar())!=’\n’)和 while(c=getchar() !=’\n’)的差别</h3><p><em>先看a = 3 != 2 和(a=3)!=2 的区别：(!=号的级别高于=号 所以个先计算 3!=2) 个a的数值是得到的1;第二个a的数值是3</em></p>
<h3 id="“-int-f“表示将f中的值强制类型转换为整型，即将13-8的小数部分舍掉，转换为13"><a href="#“-int-f“表示将f中的值强制类型转换为整型，即将13-8的小数部分舍掉，转换为13" class="headerlink" title="“(int)f“表示将f中的值强制类型转换为整型，即将13.8的小数部分舍掉，转换为13"></a>“(int)f“表示将f中的值强制类型转换为整型，即将13.8的小数部分舍掉，转换为13</h3><h3 id="文件操作中的W"><a href="#文件操作中的W" class="headerlink" title="文件操作中的W"></a>文件操作中的W</h3><p><em>是指如果文件存在时且有内容，则清零；没有则创建</em></p>
<p><em>只是在打开文件时这样操作，打开后的连续写入，并不会清零</em></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组的中括号中不能为变量，可以是整型常量"><a href="#定义数组的中括号中不能为变量，可以是整型常量" class="headerlink" title="定义数组的中括号中不能为变量，可以是整型常量"></a>定义数组的中括号中不能为变量，可以是整型常量</h3><h3 id="定义数组是如果没有指明元素个数，则必须在初始化时赋值"><a href="#定义数组是如果没有指明元素个数，则必须在初始化时赋值" class="headerlink" title="定义数组是如果没有指明元素个数，则必须在初始化时赋值"></a>定义数组是如果没有指明元素个数，则必须在初始化时赋值</h3><h3 id="数组名为数组第一个元素的地址"><a href="#数组名为数组第一个元素的地址" class="headerlink" title="数组名为数组第一个元素的地址"></a>数组名为数组第一个元素的地址</h3><h3 id="对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定"><a href="#对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定" class="headerlink" title="对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定"></a>对数组进行初始化，要么两个维度都不写，由赋值的数组确定，或者第二维可以不写，第一维要写，再由赋值数组确定</h3><p><em>二维数组的定义方式。第一维的大小由以下方法判断： ①当初值的个数能被第二维的常量表达式的值除尽时，所得商数就是第一维的大小； ②当初值的个数不能被第二维的常量表达式的值除尽时，则第一维的大小：所得的商数+1</em></p>
<p><em>二维数组的一维大小，即指二维数组的行数</em></p>
<p><em>二维数组初始化时可以省略行数，但不能省略列数</em></p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="结构定义后可以直接在尾括号的后面加要定义的变量"><a href="#结构定义后可以直接在尾括号的后面加要定义的变量" class="headerlink" title="结构定义后可以直接在尾括号的后面加要定义的变量"></a>结构定义后可以直接在尾括号的后面加要定义的变量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">xxxx</span><br><span class="line">&#125;stu;</span><br></pre></td></tr></table></figure>

<h3 id="对结构成员变量的引用"><a href="#对结构成员变量的引用" class="headerlink" title="对结构成员变量的引用"></a>对结构成员变量的引用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;stu, *p;</span><br><span class="line">p=&amp;stu;</span><br><span class="line">&gt;&gt;&gt;stu.age</span><br><span class="line">&gt;&gt;&gt;p-&gt;age</span><br><span class="line">&gt;&gt;&gt;(*p).age</span><br></pre></td></tr></table></figure>

<h3 id="结构的实例变量不是地址"><a href="#结构的实例变量不是地址" class="headerlink" title="结构的实例变量不是地址"></a>结构的实例变量不是地址</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>, *<span class="title">p</span>;</span></span><br><span class="line">	p=&amp;stu;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,(*p).age);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><h3 id="的优先级高于"><a href="#的优先级高于" class="headerlink" title="!=的优先级高于=="></a>!=的优先级高于==</h3><h3 id="的优先级低于-’-’"><a href="#的优先级低于-’-’" class="headerlink" title="*的优先级低于[],’.’"></a>*的优先级低于[],’.’</h3><h3 id="java优先级"><a href="#java优先级" class="headerlink" title="java优先级"></a>java优先级</h3><p><a href="https://imgchr.com/i/wj13cQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj13cQ.md.jpg" alt="wj13cQ.jpg" border="0"></a></p>
<h3 id="c语言优先级"><a href="#c语言优先级" class="headerlink" title="c语言优先级"></a>c语言优先级</h3><p><a href="https://imgchr.com/i/wj3QV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3QV1.png" alt="wj3QV1.png" border="0"></a><br><a href="https://imgchr.com/i/wj3KbR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3KbR.md.png" alt="wj3KbR.md.png" border="0"></a></p>
<h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><h3 id="用单引号表示字符，双引号表示字符串"><a href="#用单引号表示字符，双引号表示字符串" class="headerlink" title="用单引号表示字符，双引号表示字符串"></a>用单引号表示字符，双引号表示字符串</h3><h3 id="char-x-”hello”-y-‘h’-’e’-’a’-’b’-’e’"><a href="#char-x-”hello”-y-‘h’-’e’-’a’-’b’-’e’" class="headerlink" title="char x[]=”hello”, y[]={‘h’,’e’,’a’,’b’,’e’}"></a>char x[]=”hello”, y[]={‘h’,’e’,’a’,’b’,’e’}</h3><p><em>x的长度为6，y的长度为5</em></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数形参类型为数组时"><a href="#函数形参类型为数组时" class="headerlink" title="函数形参类型为数组时"></a>函数形参类型为数组时</h3><p><em>可以像声明数组那样定义形参，也可以用数组元素类型的指针</em></p>
<h3 id="形参赋值"><a href="#形参赋值" class="headerlink" title="形参赋值"></a>形参赋值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">float</span> *p1,<span class="keyword">float</span> *p2,<span class="keyword">float</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123; s = (<span class="keyword">float</span> *)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>)); <span class="comment">//s此时已经不bai再指向a了</span></span><br><span class="line">*s = *p1 + *p2 ++; <span class="comment">// 这句话相当du于 *s=*p1+*p2;*p2=*p2+1;</span></span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123; <span class="keyword">float</span> a[<span class="number">2</span>] = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>&#125;,b[<span class="number">2</span>] = &#123;<span class="number">10.0</span>,<span class="number">20.0</span>&#125;,*s = a;</span><br><span class="line">fun(a,b,s); <span class="built_in">printf</span>(<span class="string">"%5.2f\n"</span>,*s); <span class="comment">//函数中s被指向另一个地址，所以a的内容zhi没变化，此处daos仍是指向a, 此处*s等价于a[0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>关键在这一句<br>s = (float <em>)calloc(1,sizeof(float));<br>给s新分配空间了<br>而主函数中s指向的还是数组a<br>你如果把这句话去掉结果就是11.10了</em></em></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><em>其实就是为变量开辟存储空间，标记存储地址，并赋初值的过程</em></p>
<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><em>不同进制只是为了方便使用，但最终落实到计算机上都是以二进制存储</em></p>
<h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><p><em>用0x或0X表示</em></p>
<h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p><em>%x</em></p>
<h4 id="显示前缀"><a href="#显示前缀" class="headerlink" title="显示前缀"></a>显示前缀</h4><p><em>%#X或%#x</em></p>
<h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><p><em>用0表示</em></p>
<h4 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h4><p><em>%o</em></p>
<h4 id="显示前缀-1"><a href="#显示前缀-1" class="headerlink" title="显示前缀"></a>显示前缀</h4><p><em>%#o</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %x %o"</span>, a); <span class="comment">// 100 144 64</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %#x %#o"</span>, a); <span class="comment">// 100 0144 0x64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C基本常识</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-头文件</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%A4%B4%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="用过的头文件"><a href="#用过的头文件" class="headerlink" title="用过的头文件"></a>用过的头文件</h1><h2 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a>stdio.h</h2><p><em>包含c语言标准库函数</em></p>
<p><em>FILE指针</em></p>
<h2 id="math-h"><a href="#math-h" class="headerlink" title="math.h"></a>math.h</h2><p><em>数学函数</em></p>
<h2 id="conio-h-consoel-input-output"><a href="#conio-h-consoel-input-output" class="headerlink" title="conio.h(consoel input/output)"></a>conio.h(consoel input/output)</h2><p><em>与控制台交互相关；显示，输入输出</em></p>
<h2 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a>stdlib.h</h2><p><em>malloc在这里面</em></p>
<h2 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h2><h2 id="头文件的使用"><a href="#头文件的使用" class="headerlink" title="头文件的使用"></a>头文件的使用</h2><p><em>如果程序分为很多文件，这样可能不同文件都会用到其它文件的函数，这时就需要对每个调用函数的文件进行函数原型声明；可以把所有的函数原型声明写在头文件里，然后在include导入就可以了；定义的常量也可以这样操作</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxx</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxx</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xxx.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> test.h</span></span><br></pre></td></tr></table></figure>











<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-犯得错误</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="犯的错误"><a href="#犯的错误" class="headerlink" title="犯的错误"></a>犯的错误</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p><em>括号里是分号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i; i&lt;<span class="number">100</span>; i++)</span><br></pre></td></tr></table></figure>



<h2 id="一次定义多个变量"><a href="#一次定义多个变量" class="headerlink" title="一次定义多个变量"></a>一次定义多个变量</h2><p><em>变量间用逗号</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br></pre></td></tr></table></figure>



<h2 id="scanf赋值"><a href="#scanf赋值" class="headerlink" title="scanf赋值"></a>scanf赋值</h2><p><em>赋值得用&amp;</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a)</span><br></pre></td></tr></table></figure>



<h2 id="define-MONTHS-12"><a href="#define-MONTHS-12" class="headerlink" title="#define MONTHS 12"></a>#define MONTHS 12</h2><p><em>标识符常量必须大写</em></p>
<h1 id="gets-arr1-NULL"><a href="#gets-arr1-NULL" class="headerlink" title="gets(arr1) !=NULL"></a>gets(arr1) !=NULL</h1><p><em>gets()试图超过文件结尾读取字符，这个表达式的值为NULL</em></p>
<h2 id="使用scanf对字符数组赋值时，不用-amp"><a href="#使用scanf对字符数组赋值时，不用-amp" class="headerlink" title="使用scanf对字符数组赋值时，不用&amp;"></a>使用scanf对字符数组赋值时，不用&amp;</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, arr)</span><br></pre></td></tr></table></figure>

<h2 id="指针和结构体变量"><a href="#指针和结构体变量" class="headerlink" title="指针和结构体变量"></a>指针和结构体变量</h2><p><a href="https://imgchr.com/i/0SBlJU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/24/0SBlJU.md.png" alt="0SBlJU.png" border="0"></a></p>
<h2 id="main函数参数"><a href="#main函数参数" class="headerlink" title="main函数参数"></a>main函数参数</h2><p><em>当有参数是，第一个参数是整数，第二个是字符串数组指针</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C犯的错误</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-求负数数的二进制</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%B1%82%E8%B4%9F%E6%95%B0%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="负数和二进制"><a href="#负数和二进制" class="headerlink" title="负数和二进制"></a>负数和二进制</h1><h2 id="求负数的二进制"><a href="#求负数的二进制" class="headerlink" title="求负数的二进制"></a>求负数的二进制</h2><p><a href="https://zhinan.sogou.com/guide/detail/?id=316513311050" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><em>先求绝对值的二进制，取反，加1</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5</span><br><span class="line">00000101</span><br><span class="line"></span><br><span class="line">11111010</span><br><span class="line"></span><br><span class="line">11111011</span><br></pre></td></tr></table></figure>

<h2 id="知道负数的二进制求十进制"><a href="#知道负数的二进制求十进制" class="headerlink" title="知道负数的二进制求十进制"></a>知道负数的二进制求十进制</h2><p><em>相反操作；先减1；再取反；在算</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-求一个十进制数的二进制</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%B1%82%E4%B8%80%E4%B8%AA%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="求一个十进制数的二进制"><a href="#求一个十进制数的二进制" class="headerlink" title="求一个十进制数的二进制"></a>求一个十进制数的二进制</h2><p><a href="https://zhinan.sogou.com/guide/detail/?id=316513311050" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-位运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><h2 id="位逻辑运算符"><a href="#位逻辑运算符" class="headerlink" title="位逻辑运算符"></a>位逻辑运算符</h2><h3 id="amp-位与运算符"><a href="#amp-位与运算符" class="headerlink" title="&amp; 位与运算符"></a>&amp; 位与运算符</h3><p><em>同一为1</em></p>
<h3 id="位或运算符"><a href="#位或运算符" class="headerlink" title="| 位或运算符"></a>| 位或运算符</h3><p><em>有1为1</em></p>
<h3 id="位非运算符"><a href="#位非运算符" class="headerlink" title="~ 位非运算符"></a>~ 位非运算符</h3><p><em>取反</em></p>
<h3 id="位异或运算符"><a href="#位异或运算符" class="headerlink" title="^ 位异或运算符"></a>^ 位异或运算符</h3><p><em>不同为1</em></p>
<h2 id="位位移运算符"><a href="#位位移运算符" class="headerlink" title="位位移运算符"></a>位位移运算符</h2><h3 id="lt-lt-位左移运算符"><a href="#lt-lt-位左移运算符" class="headerlink" title="&lt;&lt; 位左移运算符"></a>&lt;&lt; 位左移运算符</h3><p><em>对应的二进制数左去掉对应位数，右加对应位数0</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">12</span>; <span class="comment">//00001100</span></span><br><span class="line"><span class="keyword">int</span> result = value &lt;&lt; <span class="number">3</span> <span class="comment">// 01100000</span></span><br></pre></td></tr></table></figure>



<h3 id="gt-gt-位右移运算符"><a href="#gt-gt-位右移运算符" class="headerlink" title="&gt;&gt; 位右移运算符"></a>&gt;&gt; 位右移运算符</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-goto语句</title>
    <url>/c%E8%AF%AD%E8%A8%80-goto%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> there; <span class="comment">// 跳转到there标签</span></span><br><span class="line">xxx</span><br><span class="line">there: x = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x==<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">goto</span> w;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">goto</span> j;</span><br><span class="line"></span><br><span class="line">w:</span><br><span class="line">	xxx</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-switch语句</title>
    <url>/C%E8%AF%AD%E8%A8%80-switch%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p><em>没有匹配项，执行default；number要为整数，或表达式结果为整数的表达式</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">35</span>:</span><br><span class="line">        <span class="built_in">printf</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="built_in">printf</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-条件运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">condition ? expression : expression2</span><br></pre></td></tr></table></figure>

<p><em>条件为True，执行表达式1；条件为false，执行表达式2</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x = y &gt; <span class="number">7</span> ? <span class="number">50</span> : <span class="number">70</span> <span class="comment">// y大于7，x的值设置为50；否则x等于70</span></span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-逻辑运算符</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><h2 id><a href="#" class="headerlink" title="||"></a>||</h2><h2 id="！"><a href="#！" class="headerlink" title="！"></a>！</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-布尔值</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%B8%83%E5%B0%94%E5%80%BC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h1><p><em>任何非零数值赋给_Bool类型变量时，都是true；否则为false</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-强制类型转换</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-printf和scanf</title>
    <url>/C%E8%AF%AD%E8%A8%80-printf%E5%92%8Cscanf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="printf和scanf"><a href="#printf和scanf" class="headerlink" title="printf和scanf"></a>printf和scanf</h1><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%dkdjkfsj%f.2"</span>, <span class="number">20</span>, <span class="number">2.235</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"djfkjsl\n"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示一个数的十六进制，八进制</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%0, %X"</span>, <span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 小写x也可以</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#0, %#X"</span>, <span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 显示进制前缀</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%8d"</span>, <span class="number">15</span>) <span class="comment">// 8表示以8个固定位宽输出，没符号采用右对齐;若%-3d，采用左对齐</span></span><br><span class="line">    				<span class="comment">//15占两位，所以左边填6个空格</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%6.2f"</span>, <span class="number">1.123</span>) <span class="comment">// 空格空格空格1.12</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3f"</span>, <span class="number">1.1236</span>) <span class="comment">// 1.123</span></span><br></pre></td></tr></table></figure>

<p><em>打印字符，字符串可以不要第一个参数；但数值类型必须要第一个参数；打印字符也要第一个参数；最好是打印所有都带上第一个参数</em></p>
<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">float</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%.2f"</span>,&amp;b);</span><br></pre></td></tr></table></figure>

<p><strong>注意对字符数组赋值不需要&amp;</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, a)</span><br></pre></td></tr></table></figure>

<p><strong>scanf</strong>：<em>读入数据时，遇到空白符，制表符，换行符；就会停止读取，可以用gets替代</em></p>
<h2 id="gets链接"><a href="#gets链接" class="headerlink" title="gets链接"></a>gets链接</h2>









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-数据类型</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><em>K&amp;R给出了7个数据类型关键字；C90新增2个；C99有添加3个</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K&amp;R        C90       C99</span><br><span class="line">int		  signed	_Bool</span><br><span class="line">long 	  void		_Complex(复数)</span><br><span class="line">short %hd			_Imaginary(虚数)</span><br><span class="line">unsigned</span><br><span class="line">char</span><br><span class="line">float</span><br><span class="line">double</span><br></pre></td></tr></table></figure>

<p><em>short, long, unsigned, signed是整数类型的变式</em></p>
<h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p><em>之所以存在这么多种整型类型的原因是，整型可以有正负号和取值范围，再者满足不同情况选择不同类型</em></p>
<p><em>以二进制数存储</em></p>
<p><em>int(正负都可以), long, long long, unsigned(非负), signed(可以和有符号的其它类型搭用)</em></p>
<p><em>long的实际数据后要加L，unsigned long要加UL</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> b; %ld</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line"><span class="keyword">unsigned</span> c; <span class="comment">//用%u表示</span></span><br><span class="line"><span class="keyword">signed</span> short d;</span><br></pre></td></tr></table></figure>

<p><em>int类型溢出时，会从int能表示的最小负值开始重新赋值；unsigned无符号类型溢出从0开始</em></p>
<p><em>由于存储unsigned时没有符号位，所以unsigned要比int所能表示的范围大</em></p>
<h3 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span></span><br><span class="line">short</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="keyword">long</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span></span><br></pre></td></tr></table></figure>

<h3 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span></span><br><span class="line"><span class="keyword">unsigned</span> short</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br></pre></td></tr></table></figure>



<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p><em>拆分为小数和指数部分，分别存储</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">3200.0</span>  <span class="comment">// 0.32E4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %e"</span>) <span class="comment">// %f用十进制形式打印； %e用指数形式打印</span></span><br></pre></td></tr></table></figure>



<h2 id="字符char"><a href="#字符char" class="headerlink" title="字符char"></a>字符char</h2><p><em>用一个字节存储</em></p>
<p><em>用单引号；%c</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'C'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %d"</span>, a, a);</span><br></pre></td></tr></table></figure>



<h2 id="二进制，十进制，八进制，十六进制"><a href="#二进制，十进制，八进制，十六进制" class="headerlink" title="二进制，十进制，八进制，十六进制"></a>二进制，十进制，八进制，十六进制</h2><p><em>十六进制：0x，0X，%x</em></p>
<p><em>八进制：0，%o</em></p>
<p><em>需要显示前缀用：%#x，%#o</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %x %o"</span>, a, a, a ); <span class="comment">// 100 144 64</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %#x %#o"</span>, a, a, a ); <span class="comment">// 100 0144 0x64</span></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-多个函数</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="多个函数"><a href="#多个函数" class="headerlink" title="多个函数"></a>多个函数</h1><p><em>main()的位置可以是程序任意位置，但执行时总是它开始</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*说明*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 声明函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">butler</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	butler();</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">butler</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	xxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>易混淆单词</title>
    <url>/%E6%98%93%E6%B7%B7%E6%B7%86%E5%8D%95%E8%AF%8D.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="2020-8-12"><a href="#2020-8-12" class="headerlink" title="2020.8.12"></a>2020.8.12</h2><h3 id="superior-amp-senior-amp-junior"><a href="#superior-amp-senior-amp-junior" class="headerlink" title="superior&amp;senior&amp;junior"></a>superior&amp;senior&amp;junior</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">superior</span><br><span class="line">adj.</span><br><span class="line">	高级的；上级的；高质的</span><br><span class="line">n.</span><br><span class="line">	上级；上司</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="inhibit-amp-prohibit-amp-refrain-amp-inhabit"><a href="#inhibit-amp-prohibit-amp-refrain-amp-inhabit" class="headerlink" title="inhibit&amp;prohibit&amp;refrain&amp;inhabit"></a>inhibit&amp;prohibit&amp;refrain&amp;inhabit</h3><h3 id="trend-amp-tend-amp-tendency"><a href="#trend-amp-tend-amp-tendency" class="headerlink" title="trend&amp;tend&amp;tendency"></a>trend&amp;tend&amp;tendency</h3><h3 id="implicit-amp-explicit"><a href="#implicit-amp-explicit" class="headerlink" title="implicit&amp;explicit"></a>implicit&amp;explicit</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-第三章</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><em>==等等</em></p>
<p><em>关系运算结果为0或1</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">5</span>&gt;<span class="number">3</span>);  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">3</span>==<span class="number">5</span>);  <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>所有关系运算符的优先级比算术运算的优先级低，但比赋值高</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a = <span class="number">5</span>&gt;<span class="number">4</span>+<span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (xxxxx)&#123;</span><br><span class="line">	pass;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xxx)&#123;</span><br><span class="line">	pass</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-第二章</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="C程序的基本结构"><a href="#C程序的基本结构" class="headerlink" title="C程序的基本结构"></a>C程序的基本结构</h2><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p><strong>main()函数</strong>：<em>可以有其它函数，但必须以它开头</em></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="comment">/*xxxx*/</span></span><br><span class="line"><span class="comment">/*xxx</span></span><br><span class="line"><span class="comment">xxx*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xxxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>

<h4 id="花括号，程序体，代码块"><a href="#花括号，程序体，代码块" class="headerlink" title="花括号，程序体，代码块"></a>花括号，程序体，代码块</h4><p><em>必须用花括号</em></p>
<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p><em>名字是由数字，下划线，大小写字母，但开头必须以下划线或字母</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="声明变量-1"><a href="#声明变量-1" class="headerlink" title="声明变量"></a>声明变量</h3><p><em>可以一次性定义多个</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入金额(元)："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> change = <span class="number">100</span> - price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"找您%d元\n"</span>, change);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c, b</span><br></pre></td></tr></table></figure>



<h4 id="赋值和初始化"><a href="#赋值和初始化" class="headerlink" title="赋值和初始化"></a>赋值和初始化</h4><p><em>初始化不一定要在声明的地方赋值</em></p>
<p><em>不对变量初始化，它的值为地址</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">c, b = <span class="number">1</span>, <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<h4 id="变量输入"><a href="#变量输入" class="headerlink" title="变量输入"></a>变量输入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%a %b"</span>, &amp;a, &amp;b)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, a+b)</span><br></pre></td></tr></table></figure>

<p><em>这里的scanf会读入下一个整数，把值赋给price，注意有个&amp;</em></p>
<p><em>如果输入的不是一个数，则不会读取，输入的是浮点数取整数部分</em></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> amount = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p><em>const是一个修饰符；常量一旦初始化则不能再赋值</em></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p><em>整数运算的结果为整数如：9/3=3</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入你身高的尺数："</span>);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入你身高的寸数："</span>);</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你的身高为(米)：%f"</span>, (a+b/<span class="number">12.0</span>)*<span class="number">0.3048</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//double(双精度)和float(单精度)</span></span><br></pre></td></tr></table></figure>

<h3 id="整数和浮点数输入输出"><a href="#整数和浮点数输入输出" class="headerlink" title="整数和浮点数输入输出"></a>整数和浮点数输入输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">double</span> b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>, b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;b); <span class="comment">// 注意</span></span><br></pre></td></tr></table></figure>

<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// + - * / %</span></span><br></pre></td></tr></table></figure>

<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 乘除取余，大于加减，单目运算大于乘除(如取负)，赋值优先级最低</span></span><br><span class="line">a*-b 包含单目运算</span><br><span class="line">a*+b</span><br><span class="line"><span class="comment">// 赋值从右向左，</span></span><br></pre></td></tr></table></figure>

<h3 id="java优先级"><a href="#java优先级" class="headerlink" title="java优先级"></a>java优先级</h3><p><a href="https://imgchr.com/i/wj13cQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj13cQ.md.jpg" alt="wj13cQ.jpg" border="0"></a></p>
<h3 id="c语言优先级"><a href="#c语言优先级" class="headerlink" title="c语言优先级"></a>c语言优先级</h3><p><a href="https://imgchr.com/i/wj3QV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3QV1.png" alt="wj3QV1.png" border="0"></a><br><a href="https://imgchr.com/i/wj3KbR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wj3KbR.md.png" alt="wj3KbR.md.png" border="0"></a></p>
<h4 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// += , -=, *=, /=, %=</span></span><br></pre></td></tr></table></figure>

<h4 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ++, --</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">count++; <span class="comment">// 1</span></span><br><span class="line">count--; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p><em>它们无论在变量的前面的后面，变量的值都加一或减一</em></p>
<p><strong>注意</strong>：<em>++，–在变量后面，表示用变量之前的值去运算，但最后变量要变化1；在前面表示先变化1，再用新的值去运算</em></p>
<hr>
<blockquote>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>C语言-计算机和编程语言</title>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="计算机和编程语言"><a href="#计算机和编程语言" class="headerlink" title="计算机和编程语言"></a>计算机和编程语言</h2><h3 id="计算机工作的基本原理原理"><a href="#计算机工作的基本原理原理" class="headerlink" title="计算机工作的基本原理原理"></a>计算机工作的基本原理原理</h3><p><em>现代计算机可以分为几个部分：中央处理单元(CPU)；随机访问存储器(RAM)；永久存储器；外围设备</em></p>
<p><em>Cpu从内存中获取指令并执行</em></p>
<p><em>Cpu有很多寄存器作为工作区，一个寄存器可以保存一个数，保存了下一条指令的内存地址</em></p>
<p><em>计算机中存储的一切都是数字</em></p>
<h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p><em>机器语言-&gt;汇编语言-&gt;高级编程语言</em></p>
<h3 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h3><p><strong>解释</strong>：<em>借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行</em></p>
<p><strong>编译</strong>：<em>借助一个程序，就像一个翻译，把你的程序翻译成计算机能真正懂的语言–机器语言，写程序，然后，这个机器语言写的程序就能直接执行</em></p>
<p><strong>总的来说</strong>：<em>解释器解释编写的程序后，之后执行编写的程序还是要再解释；而编译则会生成一个新的程序，可以反复使用</em></p>
<p><strong>注意</strong>：<em>语言本身没有解释和编译之分</em></p>
<p><em>常说的解释\编译型语言只是它的常用执行方式</em></p>
<p><em>解释型语言具有特殊的计算能力</em></p>
<p><em>编译型语言有确定的运算性能</em></p>
<p><em>随着计算机的发展这两种类型的执行方式已经没有太大的区别</em></p>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="使用C语言的步骤"><a href="#使用C语言的步骤" class="headerlink" title="使用C语言的步骤"></a>使用C语言的步骤</h3><p><em>定义程序目标-&gt;设计程序-&gt;编写代码-&gt;编译-&gt;运行程序-&gt;测试和调试-&gt;维护和修改程序</em></p>
<p><strong>注意</strong>：<em>编译分为两步：编译和链接</em></p>
<p><em>编译器将程序生成目标代码(中间文件)，然后链接器将源代码所需的启动代码和库代码的机器码添加到中间文件，最终生成可执行文件</em></p>
<p><strong>源代码</strong>：</p>
<p><strong>目标代码</strong>：<em>缺少启动代码和库代码，不能执行</em></p>
<p><strong>可执行代码</strong>：<em>源代码对应的完整的机器码</em></p>
<img src="https://s1.ax1x.com/2020/08/01/a3gFjs.jpg" alt="a3gFjs.jpg" border="0">

<h3 id="C语言的特性"><a href="#C语言的特性" class="headerlink" title="C语言的特性"></a>C语言的特性</h3><h4 id="高效性"><a href="#高效性" class="headerlink" title="高效性"></a>高效性</h4><p><em>C语言表现出通常汇编语言才具有的精细控制能力</em></p>
<h4 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h4><p><em>可以不加修改或少量修改，然后在其它系统上运行</em></p>
<h4 id="强大的功能和灵活性"><a href="#强大的功能和灵活性" class="headerlink" title="强大的功能和灵活性"></a>强大的功能和灵活性</h4><p><em>很多系统上的编译器是由C语言编写，所以最终都是以C程序负责生成最后的可执行文件</em></p>
<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><p><em>现代的编程语言语法相差不大，可以说是C-like语言</em></p>
<p><em>Fortran(第一个高级编程语言)-&gt;BCPL-&gt;B-&gt;C</em></p>
<p><em>BCPL和B都支持指针间接方式，所以C也支持</em></p>
<p><em>C还受PL/I和PDP-11的影响</em></p>
<p><em>工业语言：底层开发工作者常使用</em></p>
<h3 id="C的发展与标准"><a href="#C的发展与标准" class="headerlink" title="C的发展与标准"></a>C的发展与标准</h3><p><em>1989年ANSI发布第一个标准-ANSI C</em></p>
<p><em>1990年ISO接受ANSI的标准-C89</em></p>
<p><em>C89-C95-C99</em></p>
<h3 id="C语言的作用"><a href="#C语言的作用" class="headerlink" title="C语言的作用"></a>C语言的作用</h3><p><em>在某些方面具有不可替代的地位，如操作系统</em></p>
<p><em>嵌入式系统</em></p>
<p><em>驱动程序</em></p>
<p><em>底层驱动，图像引擎，图像处理，声音效果</em></p>
<h3 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h3><p><em>1.编辑器+编译器</em></p>
<p><em>2.IDE</em></p>
<p><strong>推荐</strong>：<em>MS Visual studio Express</em></p>
<p><em>Dev C++</em></p>
<p><em>Xcode</em></p>
<p><em>Eclipse-CDT</em></p>
<p><em>geany(和MinGW一起)</em></p>
<p><em>Sublime(和MinGW一起)</em></p>
<p><em>vim/emacs(和MinGW一起)</em></p>
<h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; /*stdio.h是C编译包的一部分内容*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;  <span class="comment">/*void在较新的语法里支持，表示无参数; int为返回类型；main为函数名*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"2+5=%d"</span>, <span class="number">2</span>+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>/n为将光标移到输出的下一行</em></p>
<p><strong>#include</strong>：<em>C预处理指令(编译器编译之前需要预处理)</em><br><strong>stdio.h</strong>：<em>C编译包的一部分，是头文件(指引编译器把你的程序正确结合在一起)</em></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-2二十四点</title>
    <url>/CSP-2%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%82%B9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="二十四点"><a href="#二十四点" class="headerlink" title="二十四点"></a>二十四点</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><em>三十分错误代码</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOut</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'x'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'x'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] * li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'/'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'/'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] // li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'+'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'+'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] + li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'-'</span> <span class="keyword">in</span> li:</span><br><span class="line">            index = li.index(<span class="string">'-'</span>)</span><br><span class="line">            outcome = (li[index - <span class="number">1</span>] - li[index + <span class="number">1</span>])</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.pop(index - <span class="number">1</span>)</span><br><span class="line">            li.insert(index - <span class="number">1</span>, outcome)</span><br><span class="line">    <span class="keyword">return</span> li[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(li), <span class="number">2</span>):</span><br><span class="line">        li[i] = int(li[i])</span><br><span class="line">    outcome = getOut(li)</span><br><span class="line">    <span class="keyword">if</span> outcome == <span class="number">24</span>:</span><br><span class="line">        print(<span class="string">'Yes'</span>)</span><br><span class="line">    <span class="keyword">if</span> outcome != <span class="number">24</span>:</span><br><span class="line">        print(<span class="string">'No'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    li = list(input())</span><br><span class="line">    judge(li)</span><br></pre></td></tr></table></figure>

<h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><p><em>使用eval函数</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    str=input().replace(<span class="string">'x'</span>, <span class="string">'*'</span>).replace(<span class="string">'/'</span>, <span class="string">'//'</span>)</span><br><span class="line">    <span class="keyword">if</span> eval(str)==<span class="number">24</span>:</span><br><span class="line">        print(<span class="string">"Yes"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"No"</span>)</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CSP-1小中大</title>
    <url>/CSP-1%E5%B0%8F%E4%B8%AD%E5%A4%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="小中大"><a href="#小中大" class="headerlink" title="小中大"></a>小中大</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n = int(input())</span><br><span class="line">out_li = []</span><br><span class="line">li = list(map(int, input().split()))</span><br><span class="line">li.sort()</span><br><span class="line">max = li[<span class="number">-1</span>]</span><br><span class="line">min = li[<span class="number">0</span>]</span><br><span class="line">out_li.append(max)</span><br><span class="line">out_li.append(min)</span><br><span class="line"><span class="keyword">if</span> len(li)%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    median = li[(len(li)+<span class="number">1</span>)//<span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line">    out_li.append(median)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    median = (li[len(li) // <span class="number">2</span> - <span class="number">1</span>] + li[len(li) // <span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">    string = str(median)</span><br><span class="line">    <span class="keyword">if</span> string[<span class="number">-1</span>] != <span class="string">'0'</span>:</span><br><span class="line">        out_li.append(median)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out_li.append(int(median))</span><br><span class="line">out_li.sort(reverse=<span class="number">1</span>)</span><br><span class="line">print(*out_li)</span><br></pre></td></tr></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="python中-和"><a href="#python中-和" class="headerlink" title="python中/和//"></a>python中/和//</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中用’/‘做除号结果为负</span></span><br><span class="line"><span class="number">5</span> / <span class="number">2</span>  <span class="comment"># 2.5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># // 整除</span></span><br><span class="line"><span class="number">5</span> // <span class="number">2</span> <span class="comment"># 等于2</span></span><br><span class="line">但其中一个为float时结果为float</span><br></pre></td></tr></table></figure>

<h3 id="round四舍五入"><a href="#round四舍五入" class="headerlink" title="round四舍五入"></a>round四舍五入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">round(5.021, 1) # 参数2为保留的位数</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为整数"><a href="#判断是否为整数" class="headerlink" title="判断是否为整数"></a>判断是否为整数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> <span class="keyword">is</span> int:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="数值排序sort"><a href="#数值排序sort" class="headerlink" title="数值排序sort"></a>数值排序sort</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = []</span><br><span class="line">li.sort() <span class="comment"># 默认为升序</span></span><br><span class="line">li.sort(reverse=<span class="number">0</span>) <span class="comment"># 升序</span></span><br><span class="line">li.sort(reverse=<span class="number">1</span>) <span class="comment"># 为大于零的整数为降序</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-2回收站选址</title>
    <url>/CSP-2%E5%9B%9E%E6%94%B6%E7%AB%99%E9%80%89%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="回收站选址"><a href="#回收站选址" class="headerlink" title="回收站选址"></a>回收站选址</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">trashDict=[]</span><br><span class="line">listKeys=[]</span><br><span class="line">listScoreCount=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toStr</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(x)+<span class="string">' '</span>+str(y)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toFind</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> toStr(x+<span class="number">1</span>,y) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x<span class="number">-1</span>,y) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict <span class="keyword">and</span>\</span><br><span class="line">           toStr(x,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getScore</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> toStr(x+<span class="number">1</span>,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x+<span class="number">1</span>,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x<span class="number">-1</span>,y+<span class="number">1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toStr(x<span class="number">-1</span>,y<span class="number">-1</span>) <span class="keyword">in</span> trashDict:</span><br><span class="line">            score+=<span class="number">1</span></span><br><span class="line">        listScoreCount[score]+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    temp_a,temp_b=map(int,input().split(<span class="string">' '</span>))</span><br><span class="line">    listKeys.append(temp_a)</span><br><span class="line">    listKeys.append(temp_b)</span><br><span class="line">    trashDict.append(toStr(temp_a,temp_b))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>*n,<span class="number">2</span>):</span><br><span class="line">    x,y=listKeys[j],listKeys[j+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> toFind(x,y):</span><br><span class="line">        getScore(x,y)</span><br><span class="line"> </span><br><span class="line">print(*listScoreCount,sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>



<h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><p><em>两个例子都通过但只有40分，不知道怎么回事</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">li_out = [<span class="number">0</span>]*<span class="number">5</span></span><br><span class="line">li_point = []</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    p = list(map(int, input().split()))</span><br><span class="line">    li_point.append(p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_point:</span><br><span class="line">    <span class="keyword">if</span> [i[<span class="number">0</span>], i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>], i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]] <span class="keyword">in</span> li_point <span class="keyword">and</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]] <span class="keyword">in</span> li_point:</span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]+<span class="number">1</span>, i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]+<span class="number">1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> [i[<span class="number">0</span>]<span class="number">-1</span>, i[<span class="number">1</span>]<span class="number">-1</span>] <span class="keyword">in</span> li_point:</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m &gt; <span class="number">0</span>:</span><br><span class="line">            li_out[m] += <span class="number">1</span></span><br><span class="line">            m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_out:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速打印列表里的值并换行输出</span></span><br><span class="line">print(*list, sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-1报数</title>
    <url>/CSP-1%E6%8A%A5%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="报数"><a href="#报数" class="headerlink" title="报数"></a>报数</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">a = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (n + m):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) <span class="keyword">or</span> (str(<span class="number">7</span>) <span class="keyword">in</span> list(str(i))):</span><br><span class="line">        a[i % <span class="number">4</span> - <span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">rec_num = <span class="number">0</span></span><br><span class="line">rec_n = <span class="number">0</span></span><br><span class="line">li = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> rec_n == n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> index &gt; <span class="number">3</span>:</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">    rec_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> rec_num % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> str(<span class="number">7</span>) <span class="keyword">in</span> list(str(rec_num)):</span><br><span class="line">        li[index] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rec_n += <span class="number">1</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p><em>数字中包含7理解成就是数字7</em></p>
<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">0</span>]*<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><em>用报出的数加跳过的数，作为循环条件</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
  </entry>
  <entry>
    <title>现在完成时</title>
    <url>/%E8%8B%B1%E8%AF%AD-%E7%8E%B0%E5%9C%A8%E5%AE%8C%E6%88%90%E6%97%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h1><p><a href="https://www.mofangge.xin/html/qDetail/03/c2/201206/0dbsc203116202.html" target="_blank" rel="external nofollow noopener noreferrer">完成时</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>过去式</title>
    <url>/%E8%8B%B1%E8%AF%AD-%E8%BF%87%E5%8E%BB%E5%BC%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="过去式"><a href="#过去式" class="headerlink" title="过去式"></a>过去式</h1><p><a href="https://www.mofangge.xin/html/qDetail/03/c2/201206/0dbsc203116202.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CPS-稀疏向量</title>
    <url>/CSP-2%E7%A8%80%E7%96%8F%E5%90%91%E9%87%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h1><p><em>用python用了几种方法都只有60分，原因是超时，可能是python本身慢的原因，网上有用C做满分的</em></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">n, us, vs = map(int, input().split())</span><br><span class="line">u1 = []</span><br><span class="line">u2 = []</span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(us + vs):</span><br><span class="line">    inp = map(int, input().split())</span><br><span class="line">    a, b = inp</span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &lt;= us:</span><br><span class="line">        u1.append(a)</span><br><span class="line">        u2.append(b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">in</span> u1:</span><br><span class="line">            out += u2[u1.index(a)]*b</span><br><span class="line"></span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, us, vs = map(int, input().split())</span><br><span class="line">u = list(<span class="number">0</span> <span class="keyword">for</span> m <span class="keyword">in</span> range(n))</span><br><span class="line">v = u.copy()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(us + vs):</span><br><span class="line">    inp = list(map(int, input().split()))</span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &lt;= us:</span><br><span class="line">        u[inp[<span class="number">0</span>]<span class="number">-1</span>] = inp[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v[inp[<span class="number">0</span>]<span class="number">-1</span>] = inp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    out += u[i]*v[i]</span><br><span class="line"></span><br><span class="line">out = sum(a*b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(u, v))</span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>



<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = [x,x,x]</span><br><span class="line">v = [x,x,x]</span><br><span class="line">out = sum(a*b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(u,v))</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>稀疏向量</tag>
      </tags>
  </entry>
  <entry>
    <title>FSP-线性分类器</title>
    <url>/CSP-1%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h1><h2 id="百度代码"><a href="#百度代码" class="headerlink" title="百度代码"></a>百度代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># θ0 +θ1x +θ2y =0</span></span><br><span class="line"><span class="comment"># y=(-θ0-θ1x)/θ2</span></span><br><span class="line"></span><br><span class="line">p_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qurey</span><span class="params">(in_list)</span>:</span></span><br><span class="line">    flag_gt = <span class="number">-1</span></span><br><span class="line">    flag_lt = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p_list:</span><br><span class="line">        <span class="keyword">if</span> (in_list[<span class="number">0</span>] + in_list[<span class="number">1</span>] * int(i[<span class="number">0</span>]) + in_list[<span class="number">2</span>] * int(i[<span class="number">1</span>])) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flag_gt == <span class="number">-1</span>:</span><br><span class="line">                flag_gt = i[<span class="number">2</span>]</span><br><span class="line">                flag_lt = <span class="string">'B'</span> <span class="keyword">if</span> i[<span class="number">2</span>] == <span class="string">'A'</span> <span class="keyword">else</span> <span class="string">'A'</span></span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">2</span>] != flag_gt:</span><br><span class="line">                print(<span class="string">'No'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (in_list[<span class="number">0</span>] + in_list[<span class="number">1</span>] * int(i[<span class="number">0</span>]) + in_list[<span class="number">2</span>] * int(i[<span class="number">1</span>])) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> flag_lt == <span class="number">-1</span>:</span><br><span class="line">                flag_lt = i[<span class="number">2</span>]</span><br><span class="line">                flag_gt = <span class="string">'B'</span> <span class="keyword">if</span> i[<span class="number">2</span>] == <span class="string">'A'</span> <span class="keyword">else</span> <span class="string">'A'</span></span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">2</span>] != flag_lt:</span><br><span class="line">                print(<span class="string">'No'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Yes'</span>)</span><br><span class="line"></span><br><span class="line">n,m = map(int,input().split())</span><br><span class="line"><span class="comment"># ilist=list(map(int,input().split()))</span></span><br><span class="line"><span class="comment"># n=ilist[0]</span></span><br><span class="line"><span class="comment"># m=ilist[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    p_list.append(list(input().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    qurey(list(map(int, input().split())))</span><br></pre></td></tr></table></figure>

<h2 id="参考和多次修改后的自己的代码"><a href="#参考和多次修改后的自己的代码" class="headerlink" title="参考和多次修改后的自己的代码"></a>参考和多次修改后的自己的代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0 = $0 + $1x + $2y</span></span><br><span class="line">n, m = map(int, input().split(<span class="string">" "</span>))</span><br><span class="line">list_p = []</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= n:</span><br><span class="line">    list_p.append(input().split(<span class="string">" "</span>))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a_list = []</span><br><span class="line">b_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(erg)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> list_p[:n]:</span><br><span class="line">        <span class="keyword">if</span> erg[<span class="number">0</span>] + erg[<span class="number">1</span>]*int(element[<span class="number">0</span>]) + erg[<span class="number">2</span>]*int(element[<span class="number">1</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">            a_list.append(element[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> erg[<span class="number">0</span>] + erg[<span class="number">1</span>]*int(element[<span class="number">0</span>]) + erg[<span class="number">2</span>]*int(element[<span class="number">1</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">            b_list.append(element[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">if</span> len(set(a_list)) &gt; <span class="number">1</span> <span class="keyword">or</span> len(set(b_list)) &gt; <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'No'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'Yes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">    func(list(map(int, input().split())))</span><br><span class="line">    a_list.clear()</span><br><span class="line">    b_list.clear()</span><br></pre></td></tr></table></figure>

<h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><h3 id="list-not-callable"><a href="#list-not-callable" class="headerlink" title="list not callable"></a>list not callable</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = xxxx</span><br><span class="line">erg = list(map(int, input().split()))</span><br></pre></td></tr></table></figure>

<p><em>这里犯的错误是变量名称list和python的list重名了</em></p>
<h3 id="其它错误"><a href="#其它错误" class="headerlink" title="其它错误"></a>其它错误</h3><p><em>在用a_list和b_list存储每一次参数条件下的点的类型A或者B时；当到下一个参数时，忘记将它们清空</em></p>
<p><em>最开始用break替代的return，导致在某次参数条件下不能完全切割，会出现两个结果；break虽然导致循环结束，但后面的代码还会执行；return在一个函数中，一旦执行函数结束</em></p>
<p><em>有时做的过程中对if条件造成的后果没有想全</em></p>
<p><em>一定要想清楚正确的逻辑后，再在代码中实现正确逻辑</em></p>
<p><em>一定要调试</em></p>
<h2 id="学会的python知识"><a href="#学会的python知识" class="headerlink" title="学会的python知识"></a>学会的python知识</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, m = map(int, input.split()) <span class="comment"># 右边为一个map对象</span></span><br><span class="line">input.split() <span class="comment"># 以一个或多个空格分割，得到结果为列表</span></span><br><span class="line"><span class="string">' a   11 2 '</span>.split() <span class="comment"># a 11 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中的三元运算符</span></span><br><span class="line">a = <span class="number">60</span></span><br><span class="line">b = <span class="number">60</span> <span class="keyword">if</span> a == <span class="number">60</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>We are love life, not because we are used to lifing, but because we are used to loving.</p>
</blockquote>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>线性分类器</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第三章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h1><h2 id="动词的种类"><a href="#动词的种类" class="headerlink" title="动词的种类"></a>动词的种类</h2><h3 id="主语-完全不及物动词"><a href="#主语-完全不及物动词" class="headerlink" title="主语 + 完全不及物动词"></a>主语 + 完全不及物动词</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He fainted</span><br></pre></td></tr></table></figure>

<h3 id="主语-不完全不及物动词-表语"><a href="#主语-不完全不及物动词-表语" class="headerlink" title="主语 + 不完全不及物动词 + 表语"></a>主语 + 不完全不及物动词 + 表语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is a gentleman</span><br></pre></td></tr></table></figure>

<h3 id="主语-完全及物动词-宾语"><a href="#主语-完全及物动词-宾语" class="headerlink" title="主语 + 完全及物动词 + 宾语"></a>主语 + 完全及物动词 + 宾语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love her</span><br></pre></td></tr></table></figure>

<h3 id="主语-不完全及物动词-宾语-宾语补语"><a href="#主语-不完全及物动词-宾语-宾语补语" class="headerlink" title="主语 + 不完全及物动词 + 宾语 + 宾语补语"></a>主语 + 不完全及物动词 + 宾语 + 宾语补语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He made me angery</span><br></pre></td></tr></table></figure>

<h3 id="主语-授予动词-间接宾语-直接宾语"><a href="#主语-授予动词-间接宾语-直接宾语" class="headerlink" title="主语 + 授予动词 + 间接宾语 + 直接宾语"></a>主语 + 授予动词 + 间接宾语 + 直接宾语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He gave me a book</span><br></pre></td></tr></table></figure>

<h3 id="判断动词为及物或不及物"><a href="#判断动词为及物或不及物" class="headerlink" title="判断动词为及物或不及物"></a>判断动词为及物或不及物</h3><p><em>我__他</em></p>
<p><em>他被我__</em></p>
<h2 id="完全不及物动词vi"><a href="#完全不及物动词vi" class="headerlink" title="完全不及物动词vi."></a>完全不及物动词vi.</h2><h3 id="主语-vi"><a href="#主语-vi" class="headerlink" title="主语 + vi."></a>主语 + vi.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">something happened</span><br><span class="line">something will happen</span><br><span class="line">something has happened</span><br></pre></td></tr></table></figure>

<h3 id="主语-be-vi-的现在分词-即V-ing"><a href="#主语-be-vi-的现在分词-即V-ing" class="headerlink" title="主语 + be + vi.的现在分词(即V-ing)"></a>主语 + be + vi.的现在分词(即V-ing)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">something was happening 对</span><br><span class="line">something was happened 错</span><br></pre></td></tr></table></figure>

<p><em>由上可知，不及物动词，没有被动形式</em></p>
<h2 id="完全及物动词vt"><a href="#完全及物动词vt" class="headerlink" title="完全及物动词vt."></a>完全及物动词vt.</h2><p><em>加了宾语意思很完整的动词</em></p>
<h3 id="完全及物动词出现的形态有四种"><a href="#完全及物动词出现的形态有四种" class="headerlink" title="完全及物动词出现的形态有四种"></a>完全及物动词出现的形态有四种</h3><h4 id="a-主语-vt-宾语"><a href="#a-主语-vt-宾语" class="headerlink" title="a. 主语 + vt. + 宾语"></a>a. 主语 + vt. + 宾语</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I wrote a book</span><br></pre></td></tr></table></figure>

<h4 id="b-主语-be-vt-的现在分词-宾语-正在…"><a href="#b-主语-be-vt-的现在分词-宾语-正在…" class="headerlink" title="b. 主语 + be + vt.的现在分词 + 宾语(正在….)"></a>b. 主语 + be + vt.的现在分词 + 宾语(正在….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was writing a book</span><br></pre></td></tr></table></figure>

<h4 id="c-主语-be-vt-的过去分词-被…"><a href="#c-主语-be-vt-的过去分词-被…" class="headerlink" title="c. 主语 + be + vt.的过去分词(被….)"></a>c. 主语 + be + vt.的过去分词(被….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The book was written by me</span><br></pre></td></tr></table></figure>

<h4 id="d-主语-be-being-vt-的过去分词-正在被…"><a href="#d-主语-be-being-vt-的过去分词-正在被…" class="headerlink" title="d. 主语 + be + being + vt.的过去分词(正在被….)"></a>d. 主语 + be + being + vt.的过去分词(正在被….)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The book was being written by me</span><br></pre></td></tr></table></figure>

<h3 id="表意愿的动词应以不定式短语作宾语"><a href="#表意愿的动词应以不定式短语作宾语" class="headerlink" title="表意愿的动词应以不定式短语作宾语"></a>表意愿的动词应以不定式短语作宾语</h3><p><strong>常用的表‘意愿’的动词如下:</strong></p>
<p><em>want, hope希望, wish希望, expect期望, long渴望, aspire渴望, desire渴望, refuse拒绝</em></p>
<p><strong>三个一，两个希望，三个渴望</strong></p>
<p><strong>注意</strong>：<em>anticipate亦表‘期待’，但仅可用动名词作其宾语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I except to see him again</span><br><span class="line">&#x3D; I anticipate seeing him again</span><br><span class="line">&#x3D; I&#39;m looking forward to seeing him again</span><br></pre></td></tr></table></figure>

<h3 id="下列完全及物动词一律以动名词作宾语"><a href="#下列完全及物动词一律以动名词作宾语" class="headerlink" title="下列完全及物动词一律以动名词作宾语"></a>下列完全及物动词一律以动名词作宾语</h3><p><em>consider考虑，imagine想象，enjoy喜欢，dislike不喜欢，resent痛恨，suggest建议，recommend建议，avoid避免，escape逃避，risk冒险，deny否认，admit承认，mind在乎，practice练习，finish完成，quit停止，戒除</em></p>
<p><a href="https://imgchr.com/i/UgbGcT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/18/UgbGcT.md.png" alt="UgbGcT.png" border="0"></a></p>
<h3 id="下列动词可接不定式和动名词作宾语，但意义有别"><a href="#下列动词可接不定式和动名词作宾语，但意义有别" class="headerlink" title="下列动词可接不定式和动名词作宾语，但意义有别"></a>下列动词可接不定式和动名词作宾语，但意义有别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forget to V 忘了要...</span><br><span class="line">forget V-ing 忘了曾...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remember to V 记得要...</span><br><span class="line">remember V-ing 记得曾...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regret to V 抱歉要</span><br><span class="line">regret V-ing 后悔曾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop to v 停下原有的工作以便从事...</span><br><span class="line">stop v-ing 停止做...</span><br></pre></td></tr></table></figure>

<h3 id="下列动词可用不定式或动名词作宾语，意思不变"><a href="#下列动词可用不定式或动名词作宾语，意思不变" class="headerlink" title="下列动词可用不定式或动名词作宾语，意思不变"></a>下列动词可用不定式或动名词作宾语，意思不变</h3><p><em>continue继续，start开始，begin开始，like喜欢，love爱，hate恨</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;ll continue to do it</span><br><span class="line">&#x3D; I&#39;ll continue doing it</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I love to sing</span><br><span class="line">&#x3D; I love singing</span><br></pre></td></tr></table></figure>

<h2 id="不完全不及物动词"><a href="#不完全不及物动词" class="headerlink" title="不完全不及物动词"></a>不完全不及物动词</h2><p><em>不完全不及物动词仍是不及物动词，唯意思不完全，因而不能单独存在</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He become happy</span><br><span class="line">He become a good student</span><br></pre></td></tr></table></figure>

<h3 id="不完全不及物动词可分为四种"><a href="#不完全不及物动词可分为四种" class="headerlink" title="不完全不及物动词可分为四种"></a>不完全不及物动词可分为四种</h3><h4 id="a-be动词"><a href="#a-be动词" class="headerlink" title="a. be动词"></a>a. be动词</h4><p><em>1）是：以名词，动名词，不定式，名词性从句，名词短语作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is a great hero</span><br><span class="line">The problem with him is that he has no courage</span><br><span class="line">My hobby is singing</span><br><span class="line">The question is when to set off</span><br><span class="line">My goal is to be an English teacher</span><br></pre></td></tr></table></figure>

<p><em>2）无意义：以形容词或形容词用的分词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He is clever, while I am stupid</span><br><span class="line">I was tired out after all the work</span><br><span class="line">That girl is charming</span><br></pre></td></tr></table></figure>

<p><em>3）正在…：与现在分词形成进行时</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">when he come, I was writing a letter</span><br><span class="line">I am studying now, please don&#39;t bother me</span><br></pre></td></tr></table></figure>

<p><em>4）正在被…：与现在分词的被动语态(即being + 过去分词)形成被动进行时</em></p>
<h4 id="b-表‘变成’-become-turn-get-fall-go-的动词"><a href="#b-表‘变成’-become-turn-get-fall-go-的动词" class="headerlink" title="b. 表‘变成’(become, turn, get,fall, go)的动词"></a>b. 表‘变成’(become, turn, get,fall, go)的动词</h4><p><em>become可用任何名词，形容词，或可作形容词用的分词(可译为…的)作表语</em></p>
<p><em>turn亦可表’变成’，通常只表‘颜色’或‘生气’的形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Autumn is around the corner, and leaves are turn yellow</span><br><span class="line">His face turned pale at the sight of his father</span><br></pre></td></tr></table></figure>

<p><em>get也可以表‘变成’，通常只用表‘生气’的形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">she got mad&#x2F;angery when he learned that Mary was about to ditch him</span><br></pre></td></tr></table></figure>

<p><em>get之后亦可以置过去分词，表‘受到/被…’</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He got&#x2F;was hurt in the traffic accident.</span><br></pre></td></tr></table></figure>

<p><em>get用于进行时的结构中时，可用任何形容词的比较级作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Under Mr. Wang&#39;s guidance, John&#39;s English is getting better</span><br></pre></td></tr></table></figure>

<p><em>fall表‘变成’时，仅限于与ill, sick, prey, victim等少数形容词或名词连用</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fall ill &#x3D; fall sick 生病</span><br><span class="line">fall prey to ... &#x3D; fall victim to ... 饱受...之害</span><br></pre></td></tr></table></figure>

<p><em>go表‘变成’时，多与表‘生气’，食物‘坏掉’或‘破产’等形容词连用</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mad 变生气起来</span><br><span class="line">go bad 食物馊了</span><br><span class="line">go bankrupt 破产了</span><br></pre></td></tr></table></figure>



<h4 id="c-表‘似乎’-seem-的动词"><a href="#c-表‘似乎’-seem-的动词" class="headerlink" title="c. 表‘似乎’(seem)的动词"></a>c. 表‘似乎’(seem)的动词</h4><p><em>此类动词乃指seem或appear，均表’似乎‘，用法相同</em></p>
<p><em>1）seem之后用不定式短语作表语，由下列句型变化而成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it seems that he works hard</span><br><span class="line">&#x3D;he seems to work hard</span><br></pre></td></tr></table></figure>

<p><em>2）seem之后有to be时，to be可省略</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it seems that they are nice people</span><br><span class="line">&#x3D; they seem (to be) nice people</span><br></pre></td></tr></table></figure>



<h4 id="d-感官动词"><a href="#d-感官动词" class="headerlink" title="d. 感官动词"></a>d. 感官动词</h4><p><em>感官动词一共有五个，一律译为’…起来‘，后面接形容词作表语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">look 看起来</span><br><span class="line">sound 听起来</span><br><span class="line">smell 闻起来</span><br><span class="line">taste 尝起来</span><br><span class="line">feel 感觉起来</span><br></pre></td></tr></table></figure>

<p><em>在以上感官动词后加like方可接名词</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The cloth feels like silk</span><br><span class="line">it sounds like a good idea</span><br></pre></td></tr></table></figure>

<p><em>注意feel like之后也可接动名词，表’想要….‘</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I feel like dancing</span><br></pre></td></tr></table></figure>

<h2 id="不完全及物动词"><a href="#不完全及物动词" class="headerlink" title="不完全及物动词"></a>不完全及物动词</h2><p><em>仍然是及物动词，但加了宾语后意思不完整，还需要加宾语补语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make 制造时是完全及物动词</span><br><span class="line">He made a chair</span><br><span class="line">make ‘使’或‘叫’时为不完全及物动词</span><br><span class="line">He made Mary happy</span><br></pre></td></tr></table></figure>

<h3 id="不完全及物动词的种类"><a href="#不完全及物动词的种类" class="headerlink" title="不完全及物动词的种类"></a>不完全及物动词的种类</h3><h4 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h4><p><em>1）叫…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make&#x2F;have + 宾语 + 原形动词</span><br><span class="line">&#x3D; get + 宾语 + to v</span><br></pre></td></tr></table></figure>

<p><em>2）让…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let + 宾语 + 原形动词</span><br><span class="line">&#x3D; allow&#x2F;permit + 宾语 + to v</span><br></pre></td></tr></table></figure>

<p><em>3）强迫/要求…</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">force&#x2F;compel&#x2F;require&#x2F;ask&#x2F;urge&#x2F;encourage&#x2F;want&#x2F;tell&#x2F;expect&#x2F;wish... + 宾语 + to v</span><br></pre></td></tr></table></figure>



<h4 id="知觉动词"><a href="#知觉动词" class="headerlink" title="知觉动词"></a>知觉动词</h4><h4 id="任命动词"><a href="#任命动词" class="headerlink" title="任命动词"></a>任命动词</h4><h4 id="认定动词"><a href="#认定动词" class="headerlink" title="认定动词"></a>认定动词</h4><h4 id="转变动词"><a href="#转变动词" class="headerlink" title="转变动词"></a>转变动词</h4><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第二章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="主语"><a href="#主语" class="headerlink" title="主语"></a>主语</h1><h2 id="主语的类别"><a href="#主语的类别" class="headerlink" title="主语的类别"></a>主语的类别</h2><p><em>可做主语的词类具有名词的特征，包括名词，代词，动名词，不定式短语，名词性从句，名词短语等</em></p>
<h3 id="名词作主语"><a href="#名词作主语" class="headerlink" title="名词作主语"></a>名词作主语</h3><h3 id="代词作主语"><a href="#代词作主语" class="headerlink" title="代词作主语"></a>代词作主语</h3><p><em>he, she, I, they, you, we等</em></p>
<h3 id="动名词或不定式短语作主语"><a href="#动名词或不定式短语作主语" class="headerlink" title="动名词或不定式短语作主语"></a>动名词或不定式短语作主语</h3><p><em>在英文中动词不能直接作主语，需要将它转换成<strong>不定式</strong>(表示未做过的事(如理想，梦想，目的，计划等))或<strong>动名词</strong>(表示已经做过的事或经验)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Working with him is fun</span><br><span class="line"></span><br><span class="line">To kiss her is my dream</span><br></pre></td></tr></table></figure>

<h4 id="防止动名词或不定式短语作主语导致主语过长"><a href="#防止动名词或不定式短语作主语导致主语过长" class="headerlink" title="防止动名词或不定式短语作主语导致主语过长"></a>防止动名词或不定式短语作主语导致主语过长</h4><p><em>用<strong>it</strong>代替它，将真正的主语放到句子最后；动名词移到句尾时，要改为不定式短语</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listening to music is my hobby.</span><br><span class="line">&#x3D; It is my hobby to listen to music</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To buy a house for my patents is one of my plans</span><br><span class="line">&#x3D; It is one of my plans to buy a house for parents.</span><br></pre></td></tr></table></figure>

<h3 id="名词性从句作主语"><a href="#名词性从句作主语" class="headerlink" title="名词性从句作主语"></a>名词性从句作主语</h3><p><em>英语中句子不能直接作主语，需要写成名词性从句</em></p>
<h4 id="名词性从句的种类"><a href="#名词性从句的种类" class="headerlink" title="名词性从句的种类"></a>名词性从句的种类</h4><h5 id="that从句"><a href="#that从句" class="headerlink" title="that从句"></a>that从句</h5><p><em>在陈述句前直接加上<strong>that</strong>。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">He doesn&#39;t study -&gt; that he doesn&#39;t study</span><br></pre></td></tr></table></figure>



<h5 id="whether从句"><a href="#whether从句" class="headerlink" title="whether从句"></a>whether从句</h5><p><em>由一般疑问句变成，当一be动词开头时，be动词还原，再在句首加whether；当由一般助动词(may，will, mus, have, should, can)开头，助动词还原，前面冠以whether；当以do，does,  did助动词开头时，去掉它，动词写为应有的时态和人称变化，再加whether</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="特殊疑问词引导的名词性从句"><a href="#特殊疑问词引导的名词性从句" class="headerlink" title="特殊疑问词引导的名词性从句"></a>特殊疑问词引导的名词性从句</h5><p><em>特殊疑问词(what, which, who, where, when, how, why)</em></p>
<p><em>问句有be动词时，be动词还原，保留疑问词</em></p>
<p><em>问句有一般助动词时，还原助动词，保留疑问词</em></p>
<p><em>问句有do, does, did等助动词时，删除，再还原动词时态和人称变化</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">when will they do it? -&gt; when they will do it</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is there a man there? -&gt; whether there is a man there</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">he never tells lies -&gt; that he never tells lies</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">how did it happen? -&gt; how it happened</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">has he finished the work? -&gt; he has finished the work</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong>：<em>当who, what, which为疑问代词，若在句中作主语，则变成名词性从句时，结构不变</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">who did it? -&gt; who did it?</span><br></pre></td></tr></table></figure>

<h4 id="名词性从句作主语时应该注意的事项"><a href="#名词性从句作主语时应该注意的事项" class="headerlink" title="名词性从句作主语时应该注意的事项"></a>名词性从句作主语时应该注意的事项</h4><p><em>导致主语过长，可以用it代替，真正的主语置于句末</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">that he never lies is true</span><br><span class="line">&#x3D; it is true that he never lies.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whether he can do it remains to be seen</span><br><span class="line">&#x3D; it remains to be seen whether he can do it</span><br></pre></td></tr></table></figure>

<h3 id="名词短语作主语"><a href="#名词短语作主语" class="headerlink" title="名词短语作主语"></a>名词短语作主语</h3><p><em>名词短语由：疑问词+不定式短语。由名词性从句简写而成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">where to live is not dicided yet.</span><br><span class="line">&#x3D; where we will live is not decided ye.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whether to go depends on how much money we have</span><br><span class="line">&#x3D; whether we will go depends on how much money we have</span><br></pre></td></tr></table></figure>

<h3 id="表距离的地方副词短语亦可作主语"><a href="#表距离的地方副词短语亦可作主语" class="headerlink" title="表距离的地方副词短语亦可作主语"></a>表距离的地方副词短语亦可作主语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Shanghai to Beijing is about 1000 kilometers.</span><br><span class="line">&#x3D; it is about 1000 kilometers from Shanghai to Beijing</span><br></pre></td></tr></table></figure>

<h2 id="细谈名词性从句的功能"><a href="#细谈名词性从句的功能" class="headerlink" title="细谈名词性从句的功能"></a>细谈名词性从句的功能</h2><h3 id="名词性从句都可以作主语"><a href="#名词性从句都可以作主语" class="headerlink" title="名词性从句都可以作主语"></a>名词性从句都可以作主语</h3><h3 id="名词性从句都可以作动词宾语"><a href="#名词性从句都可以作动词宾语" class="headerlink" title="名词性从句都可以作动词宾语"></a>名词性从句都可以作动词宾语</h3><h3 id="名词性从句作介词宾语仅’慧怡’可以"><a href="#名词性从句作介词宾语仅’慧怡’可以" class="headerlink" title="名词性从句作介词宾语仅’慧怡’可以"></a>名词性从句作介词宾语仅’慧怡’可以</h3><p><em>若that从句要作介词宾语，那么要对作适当改变, 有如下几种方法：</em></p>
<p><em>a. 介词 + the fact + that从句(that从句作the fact 的同位语)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m worried about the fact that he doesn&#39;t study.</span><br></pre></td></tr></table></figure>

<p><em>b. 删除that，从句主语变所有格，动词变动名词</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was surprised at that he sang so well 错</span><br><span class="line">I was surprised at his singing so well 对</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m worried about that he doesn&#39;t study 错</span><br><span class="line">I’m worried about his not studing 对</span><br><span class="line">-- that从句若有don&#39;t, doesn&#39;t, didn&#39;t时， 只保留not即可</span><br></pre></td></tr></table></figure>

<p><em>be + 形容词 + that从句</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I was surprised at that he sang so well </span><br><span class="line">I was surprised that he sang so well</span><br></pre></td></tr></table></figure>

<h3 id="名词性从句都可以置于be动词之后"><a href="#名词性从句都可以置于be动词之后" class="headerlink" title="名词性从句都可以置于be动词之后"></a>名词性从句都可以置于be动词之后</h3><h3 id="whether从句使用注意事项"><a href="#whether从句使用注意事项" class="headerlink" title="whether从句使用注意事项"></a>whether从句使用注意事项</h3><p><em>whether可与or not连用，也可以将or not省略；作宾语时可以将whether换成if，作主语或介词宾语时不可以替换</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I don&#39;t know whether he&#39;ll come</span><br><span class="line">&#x3D; I don&#39;t know whether or not he&#39;ll come</span><br><span class="line">&#x3D; I don&#39;t know whether he&#39;ll come or not</span><br><span class="line">&#x3D; I don&#39;t know if he&#39;ll come</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>赖世雄英语语法-第一章</title>
    <url>/%E8%B5%96%E4%B8%96%E9%9B%84%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="构成句子的基本要素"><a href="#构成句子的基本要素" class="headerlink" title="构成句子的基本要素"></a>构成句子的基本要素</h1><h2 id="任何句子均由主语-Subject-S-及动词-Verb-V-形成"><a href="#任何句子均由主语-Subject-S-及动词-Verb-V-形成" class="headerlink" title="任何句子均由主语(Subject, S)及动词(Verb, V)形成"></a>任何句子均由主语(Subject, S)及动词(Verb, V)形成</h2><h2 id="句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句"><a href="#句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句" class="headerlink" title="句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句"></a>句子有时可以省略主语，但动词却始终不能省略，否则就无法形成句子。省略主语时，之后的动词一定是原形动词，形成祈使句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You should come here &#x3D; Come here!</span><br><span class="line">You should be happy &#x3D; Be happy!</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>考研-常识</title>
    <url>/%E8%80%83%E7%A0%94-%E5%B8%B8%E8%AF%86.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="80960d200f671f95177a009e4ee97ce4f786fe051c73abeeea8612a921be02b8">fa929287840647684748c734b7149d312e0cf37d67749bd985e8a8965305f66bb7fa1399852268cdd999649177dbd07cf2adede30efc2ba2b9a70b42cb9536001c4f5c87083db9e5c61effb84c2058042750f63ecb870ca94d9f0bc650706862019d12464ceea2a5fb2a07cc939b21dbc1ec43a7a77018d1c61d361dd1c7c97bc2ad31c0dfb6845538f84357dfadf99f1a0310b3a9baba2c7a664f407f9a9fe2e1c97094e061bd5e00f95a2afc80abff04cd5774c8363aefd937ad05197a64576246a181c719f28d2158fd8a6f28afb43497f37719138faa90b2d620386535d76ae35df928c90da2b116c3dbb7b103cd8f0bffae1838ed8a47c85d247faef20eaea6c20d6a3ec3053acc9cb3003f9cbf4e7e2fbe1202b2bcf64c538c9730187a0eae51e38cff7f246c71b9c575bfb80c8ac79f1b16a22c0d35e1494594988d387c4d8d745797b69d485e5d0ea892702c5a44b2398c2bfdfbc323866e4ba2a35fd65c288f88aaa9b08df6998b6dac8d91a3fa041de810044d92e621bc9b3ee771813d9790b5777456fdf7a8403eecbb6dc24f495e27dae7372ac03887407c65d2bf06283c067f16cf92e43d2f93138a7969cb57b2dfe446b8b32781f433bbc1686a8b7704f1a126c6e9c0a170cf909e5fe823d452cc8a3126659b902bbe7728cc824334fdd53f7c60b5cde1ec02fdbc8ab9f7da91cd0d9b85db15862312c518eab7314f0a51be4f11aeed34ecc1754a6b63e40ddc0bff2a3e0613ea4299035f6ae838f199433a21912e7394a2cd2e6a5d1a08c10824cf75f16ec6612842c2181ed710c6fceb13664119dd8ac3f7ade093b1937c21d7e1e0031524da0d33b6a156f29ddafed72170f9dd14edb32ab309f74933d4913be3d41d32c067afe421fc506e649ef5af37cae582821036d409f125e41c19ad7caec77ef54ef9b7ddedac72c45aa5afcc4365cd284cc8bc9d8db8f3b1ca09c31fae3332d5913cfdd9b10dccba62e299841d00d41652291911b1ef59218a06b0b7d96dfc780e74a7ebd8bd6b0a2e6d257be4329d007f7365e3c57e6b97a3a2179324468c77371257b1767d88dc1f8cc718717a558bf119b49c614a3bf2e203cd61a041a1b3349424c196abf293b61213cdbb1cdaae0ae27a4904c511382907d110d3dbb20e27380c8d6cb03fdfef98824dd0fc8da636147dfae281a055fe9770fa8912f14fa47fcf9a779efad565b62d8ab2ea766c7777f2b88c8e55b8f68705ad1fb7b05e8dee425f420c32052c775884a0e0f568c6daa2d38154c50a4ba68c20731914098f02a3d406832f9b9f8cdaf520297dc64fd78c88eaa8c269471550a5febde30cc3a87f13fbe43a4d5e203ed886cc1e67b77149ea144e48b2265593f23e6953164e6be57059a525b0f2259951ff461fb0dafd9566ff8582b8adcbd52843c02b9c93b08faccce166cd115ffc2e962b9a61516e6755d840cc4ce26064e2f263fb8e7cb3602850e96a3e14ef02bd88de8a1ad2ed6f66dcd3367c0745114f4edf41ad587644865aec549d7e6da30d18321e137b75b13dc0b40849d9e03552b2cb902bf6ed5194cf10967cbab64a45e6b86c0fb3807277e65559664df74378698c4ed0b376d6946b581fb2eccdd9793f9621745594f2e343901c140771833bad66bff1136668d449cd4bb4be6a4734b540b1c62c8c58413074777c3c4a7b400040aa948cabc3702988c80cbe9b64c8a50e811a9618caa153f487edec31ca099e0cb0172d03f5bb94c6c56f96805d3aac60d306098ef69e4555c4c0cdb1ee431cfa461736ac16c7e2c08e5351141e327ad8c8ca959494ed8f66b2e3a98763cdee25d10bf07557ed9469c5329cafcd016e0da98bd0c0a54d249d854c526fd310aa4557f1e867701e3bb7d352d68371321bfc5f04c760b20ebcf0af597d13759fa57030e6d119295d425d16d2630a265d1342709cc9ed1ad7b5c0becdb5767116741a561fef4d2909219de4c7a008fc0cb68e193fa3c9f7b039e10f5265f73b18635dc321266888bc8902c375b5e42a36629d39f961f4eaa4f4ffbc135deb7e6d83ffeacadd82bc38d8b47adb5648fb3beda8d1f9f4840a6af48ee44009bf7e00c68fdc0c9742c02a9a3d797f6d467224ca81e8289c0372a40c3cbc04f160f57c53f7b1ace961ba1edc962fece32a3294a0bc065a46e6423501b01c1bfc634dbc812395f0ce8c1aa63a2ed0ebdfd5e8698e27d8b5d126fbec9c1b3d5b851efedfd8b1f34e5a951e4be426d59b2f535087ba416e14cb50f578d0b2743c69d47c42021e751262a5637e1709499e7b7d053677ec9fe02b46c296a48963f2ee715565ce2d4ddffa1400fd7bcc3697552b09dfc482bdc66583f383f00f95d332cf9ccc17e920c693992334d7e6a5fc04f3cc04201f122f8c26271065d6a6aca08ff2714bb49e1c2477f5c7a833eca6d990033a8d244e95c41eb6896c5a97b240e557a621c9eb2dd0b8fbc340cc570ce799311db3c1dea3f029ccab7fd6fd4bda3e117fe52a6027823ac947d0c0362d2d6b9814f3bc4835f61f6a770b51fa99ce425f017c415f5133c9e2d22c6deb101349bbe735ce70ba88978a04b997dc916348e37d2da0e6f876d5b752377062a6962e194b29b2c1abcfd767eaab4672713ff9dd74f195d9089a74d1a9a1ca4782491e644e4f975896c301f1bee5b230def3246ce7efce6d3e99987acdec0b9cdf3b519b94b875c49a495b8098ddebf972301cd639e9bf7e1b083174d3e11af7873f10485c260f5fd327e17acfc446d3196733b13b49b0728f9bb03e17ac6a59</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>电脑常用快捷键</title>
    <url>/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- CTRL + SHIFT + ESC</span><br><span class="line"></span><br><span class="line">-- 电脑任务栏 + 右键 -&gt; 任务管理器</span><br><span class="line"></span><br><span class="line">-- CTRL + ALT + DEL</span><br></pre></td></tr></table></figure>

<h2 id="Google浏览器恢复被关闭的选项卡"><a href="#Google浏览器恢复被关闭的选项卡" class="headerlink" title="Google浏览器恢复被关闭的选项卡"></a>Google浏览器恢复被关闭的选项卡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CTRL + SHIFT + T</span><br></pre></td></tr></table></figure>















<hr>
<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机设置固定IP地址</title>
    <url>/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="为虚拟机设置固定IP地址"><a href="#为虚拟机设置固定IP地址" class="headerlink" title="为虚拟机设置固定IP地址"></a>为虚拟机设置固定IP地址</h2><p><a href="https://blog.csdn.net/ys_230014/article/details/80311121" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop大数据技术-第二章</title>
    <url>/hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Hadoop环境配置"><a href="#Hadoop环境配置" class="headerlink" title="Hadoop环境配置"></a>Hadoop环境配置</h1><h3 id="三种安装方式"><a href="#三种安装方式" class="headerlink" title="三种安装方式"></a>三种安装方式</h3><h3 id="单击模式"><a href="#单击模式" class="headerlink" title="单击模式"></a>单击模式</h3><p><em>使用一个独立java进程</em></p>
<p><em>hadoop运行在一个主机上。没有分布式文件系统，直接对本地操作系统文件进行读写</em></p>
<p><em>默认安装模式</em></p>
<p><em>一般用于本地mapreduce程序调试</em></p>
<h3 id="伪分布模式"><a href="#伪分布模式" class="headerlink" title="伪分布模式"></a>伪分布模式</h3><p><em>运行在一台主机上；使用多个java进程</em></p>
<p><em>模仿完全分布式的各个节点；具有完全分布式的所有功能；常用于调试程序</em></p>
<h3 id="完全分布式模式"><a href="#完全分布式模式" class="headerlink" title="完全分布式模式"></a>完全分布式模式</h3><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><h3 id="Unbuntu安装"><a href="#Unbuntu安装" class="headerlink" title="Unbuntu安装"></a>Unbuntu安装</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure>



<h4 id="SSH安装"><a href="#SSH安装" class="headerlink" title="SSH安装"></a>SSH安装</h4><p><em>SSH 是 Secure Shell 的缩写，它是一种建立在应用层基础上的安全协议。 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。 利用 SSH 协议可以有效防止远程管理过程中的信息泄露。</em></p>
<h5 id="安装SSH客户端软件"><a href="#安装SSH客户端软件" class="headerlink" title="安装SSH客户端软件"></a>安装SSH客户端软件</h5><p><em>Ubuntu 操作系统默认安装有 SSH 客户端软件，通过以下命令查看是否已安装，如果返回包含“openssh-client”的字样，说明已经安装 SSH 客户端软件</em></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l | grep ssh // 查看</span><br><span class="line">sudo apt-get install openssh-client</span><br></pre></td></tr></table></figure>



<h5 id="安装SSH服务端软件"><a href="#安装SSH服务端软件" class="headerlink" title="安装SSH服务端软件"></a>安装SSH服务端软件</h5><p><em>Ubuntu 操作系统默认没有安装 SSH 服务端软件</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo /etc/init.d/ssh restart // 重启ssh服务</span><br></pre></td></tr></table></figure>

<h4 id="安装Xshell及Xftp-secureCRT"><a href="#安装Xshell及Xftp-secureCRT" class="headerlink" title="安装Xshell及Xftp/secureCRT"></a>安装Xshell及Xftp/secureCRT</h4><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p><em>Hadoop 是基于 Java 语言开发的，运行 Hadoop 需要安装 JDK</em></p>
<p><em>本地系统下载jdk，通过secureCRT上传至Uubuntu</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 解压</span><br><span class="line">tar -zxvf jdk-xxxxx.tar.gz  // 不同压缩格式，解压命名不同</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 建立软链接，便于后续使用</span><br><span class="line">ln -s jdkxxxx jdk</span><br></pre></td></tr></table></figure>

<h5 id="配置jdk环境变量"><a href="#配置jdk环境变量" class="headerlink" title="配置jdk环境变量"></a>配置jdk环境变量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">// 内容</span><br><span class="line">export JAVA_HOME=~/jdk</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:.</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>

<h5 id="使配置生效并检验"><a href="#使配置生效并检验" class="headerlink" title="使配置生效并检验"></a>使配置生效并检验</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第一章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p><em>21世纪的重要特征：<strong>数字化</strong>，<strong>信息化</strong>，<strong>网络化</strong>。网络为核心的信息时代</em></p>
<p><em>三种熟悉的网络：*</em>电信网，有线电视，计算机网络***</p>
<p><strong>电信网</strong>：<em>电报，电话，传真</em></p>
<p><strong>计算机网络</strong>：<em>使用户能够在计算机之间传送数据文件</em></p>
<p><strong>Internet的译名</strong>：<em>互联网(使用得更广泛，各种计算机网络互连起来)，因特网</em></p>
<p><em>计算机能够为用户提供连通服务，其重要的两个特征：<strong>连通性和共享性</strong>.</em></p>
<h2 id="互联网概述"><a href="#互联网概述" class="headerlink" title="互联网概述"></a>互联网概述</h2><h3 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h3><p><em>计算机网络由若干<strong>结点</strong>和<strong>连接这些结点的链路</strong>组成</em></p>
<p><em>结点可以是计算机，服务器，集线器，交换机，路由器等</em></p>
<p><em>网络还可以用*</em>路由器<strong>连接起来，形成更大的网络，称为</strong>互连网***</p>
<p><em>网络把许多计算机连接在一起，而互联网把许多网络通过路由器连接起来。网络中的计算机又叫做主机</em></p>
<h3 id="互联网基础结构发展的三个阶段"><a href="#互联网基础结构发展的三个阶段" class="headerlink" title="互联网基础结构发展的三个阶段"></a>互联网基础结构发展的三个阶段</h3><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><p><em>1969年，美国，ARPANET产生</em></p>
<p><em>单个网络ARPANET向互联网发展的的阶段</em></p>
<p><em>1983年，使用TCP/IP协议将使用协议了的网络连接起来，这就是互联网的诞生时间</em></p>
<p><strong>internet和Internet的区别</strong>：<em>小写的是由多个计算机网络互连而成的计算机网络；大写的是世界范围内众多网络连接而成的，它采用TCP/IP协议作为通信规则，且前身是ARPANET</em></p>
<h4 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h4><p><em>这个阶段的特点是建成了<strong>三级结构的互联网</strong>，NSFNET</em></p>
<p><em>NSFNET分为：主干网，地区网，校园网(或企业网)</em></p>
<h4 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h4><p><em>这个阶段的特点是逐渐形成了*</em>多层次ISP结构的互联网***</p>
<p><strong>ISP</strong>:<em>互联网服务提供商或互联网服务提供商(Internet services provider)</em></p>
<p><em>ISP可以向互联网管理机构申请很多IP地址</em></p>
<p><em>ISP根据服务面积大小和拥有的IP数量可以分为：主干ISP，地区ISP，本地ISP(企业，非盈利机构)</em></p>
<p><em>本地ISP直接服务用户，本地ISP可以连接到地区ISP，也可以连接到主干ISP</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-zookeeper</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-zookeeper.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><h2 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h2><p><em>HDFS、 YARN、 HBase 等，从架构上看，它们有相似点，即一个 Master（主）节点，多个 Slave（从）节点。这样的架构存在严重的缺陷——<strong>单点故障问题</strong>。单点即一个主节点，单点故障是指当只有一个主节点，若主节点宕机，整个集群将无法使用</em>  </p>
<p><em>对于 Hadoop 1.x， Apache Hadoop 官方没有较好的方案解决单点故障问题。 Hadoop 2.x 则有了 *</em>HDFS HA（ High Availability），即 HDFS 高可用性<strong>。</strong>其基本思想是：<strong>多个主节点，一个节点Active（活动），其他节点 Standby（备用）。一旦处于活动状态的节点宕机，会通过一个叫 Failover（故障切换）的机制，实现一个主节点失效而无法运作时，另一个节点可自动接手原失效系统所执行的工作。</strong>实现故障切换的一个核心角色就是 ZooKeeper***  </p>
<p><em>ZooKeeper 是一个高可用的<strong>分布式数据管理和协调框架</strong>，并且能够很好地保证分布式环境中数据的一致性</em></p>
<p><em>根据google chubby论文开发</em></p>
<h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><h2 id="zookeeper的基本原理"><a href="#zookeeper的基本原理" class="headerlink" title="zookeeper的基本原理"></a>zookeeper的基本原理</h2><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-hive</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hive.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p><em>命令后要加‘；‘</em></p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int,deptno int) row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="从hdfs导入数据到hive表"><a href="#从hdfs导入数据到hive表" class="headerlink" title="从hdfs导入数据到hive表"></a>从hdfs导入数据到hive表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data inpath &#39;&#x2F;001&#x2F;hive&#x2F;emp.csv&#39; into table emp001;</span><br></pre></td></tr></table></figure>

<h2 id="建立分区"><a href="#建立分区" class="headerlink" title="建立分区"></a>建立分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_part001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int) partitioned by (deptno int)row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="向分区中导入数据"><a href="#向分区中导入数据" class="headerlink" title="向分区中导入数据"></a>向分区中导入数据</h2><p><em>建立分区的作用：建立分区可以理解为给hive表建立了一个索引，查询hive表时可以以分区作为条件，而不需要遍历整张表</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table emp_part001 partition(deptno&#x3D;10) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;10;</span><br><span class="line">insert into table emp_part001 partition(deptno&#x3D;20) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;20;</span><br><span class="line">insert into table emp_part001 partition(deptno&#x3D;30) select empno,ename,job,mgr,hiredate,sal,comm from emp001 where deptno&#x3D;30;</span><br></pre></td></tr></table></figure>

<h2 id="建立桶表"><a href="#建立桶表" class="headerlink" title="建立桶表"></a>建立桶表</h2><p><em>建立桶表的作用：对于每一个表（table）或者分区， Hive可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。Hive也是针对某一列进行桶的组织。Hive采用对列值哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中。所谓Hive中的分桶，实际就是指的MapReduce中的分区。根据Reduce的数量，分成不同个数的文件</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_bucket001(empno int,ename string,job string,mgr int,hiredate string,sal int,comm int,deptno int)clustered by (job) into 4 buckets row format delimited fields terminated by &#39;,&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="查看hive表的设计"><a href="#查看hive表的设计" class="headerlink" title="查看hive表的设计"></a>查看hive表的设计</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe tablename;</span><br></pre></td></tr></table></figure>

<h2 id="查看hive中的所有数据库"><a href="#查看hive中的所有数据库" class="headerlink" title="查看hive中的所有数据库"></a>查看hive中的所有数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h3 id="查看hive中的所有表"><a href="#查看hive中的所有表" class="headerlink" title="查看hive中的所有表"></a>查看hive中的所有表</h3><p><em>先要使用具体某一个数据库</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use databaseName;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>python库-re库</title>
    <url>/python%E5%BA%93-re%E5%BA%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><em>在字符串中查找符合正则表达式的，返回第一位置的结果；结果为match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, String, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern正则表达式 </span></span><br><span class="line"><span class="comment"># String 字符串 </span></span><br><span class="line"><span class="comment"># flags正则表达式的控制情况</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flag常用标记</span></span><br><span class="line">re.I  <span class="comment"># re.IGNORECASE 忽略正则表达式中的大小写</span></span><br><span class="line">re.M  <span class="comment"># RE.MUTILINE 正则中^操作符能够将字符串的每行当作匹配开始</span></span><br><span class="line">re.S  <span class="comment"># RE.DOTALL 正则表达式中‘.’可以表示任意单个字符，默认除换行符</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match = re.search(<span class="string">r'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT 234567'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><em>从字符串开始位置匹配正则表达式，匹配则返回match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, String, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match=re.match(<span class="string">r'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT  100085'</span>)</span><br><span class="line"><span class="comment"># 报错没有得到匹配结果</span></span><br></pre></td></tr></table></figure>

<h3 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LS = re.findall(<span class="string">'[1-9]/d&#123;5&#125;'</span>, <span class="string">'BIT 12345 BIT 23567'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'12345'</span>, <span class="string">'23567'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p><em>返回所有匹配结果，以列表形式返回</em></p>
<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p><em>以正则表达式分割字符串，返回列表</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># maxsplit最大切割数，剩下部分按整体输出</span></span><br></pre></td></tr></table></figure>

<h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer()"></a>finditer()</h3><p><em>搜索字符串，返回一个匹配结果的迭代类型；match对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]/d&#123;5&#125;, '</span>BIT100081 TSU100084<span class="string">'):</span></span><br><span class="line"><span class="string">	print(m.group(0))</span></span><br></pre></td></tr></table></figure>

<h3 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h3><p><em>替换所有匹配结果的字符串，返回替换后字符串</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># repl 替换的字符串</span></span><br><span class="line"><span class="comment"># count 最大替换次数</span></span><br></pre></td></tr></table></figure>



<h2 id="面向对象的方法"><a href="#面向对象的方法" class="headerlink" title="面向对象的方法"></a>面向对象的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regex = re.compile(pattern, flag=<span class="number">0</span>)</span><br><span class="line">rst = regex.search(String)</span><br></pre></td></tr></table></figure>

<h2 id="match对象"><a href="#match对象" class="headerlink" title="match对象"></a>match对象</h2><h3 id="match对象的属性"><a href="#match对象的属性" class="headerlink" title="match对象的属性"></a>match对象的属性</h3><ul>
<li>String  待匹配的字符串</li>
<li>re  匹配时使用的pattern对象</li>
<li>pos  正则表达式搜索文本的开始位置</li>
<li>endpos  正则表达式搜索文本的结束位置</li>
</ul>
<h2 id="match对象的方法"><a href="#match对象的方法" class="headerlink" title="match对象的方法"></a>match对象的方法</h2><ul>
<li>group() 返回匹配的字符串</li>
<li>start()  匹配字符串的开始位置</li>
<li>end()  匹配字符串的结束位置</li>
<li>span() 返回(start(), end())</li>
</ul>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>re库</tag>
      </tags>
  </entry>
  <entry>
    <title>python解析库-bs4</title>
    <url>/python%E8%A7%A3%E6%9E%90%E5%BA%93-bs4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Beautiful-Soup库"><a href="#Beautiful-Soup库" class="headerlink" title="Beautiful Soup库"></a>Beautiful Soup库</h1><p><em>具有解析，遍历，维护“标签树”的功能的功能库</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>) <span class="comment"># 解析器可以是其它的</span></span><br></pre></td></tr></table></figure>

<h2 id="五种基本元素"><a href="#五种基本元素" class="headerlink" title="五种基本元素"></a>五种基本元素</h2><p><em>tag, name, attributes, navigableString, comment</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.标签名 <span class="comment"># 得到标签</span></span><br><span class="line">tag.name <span class="comment"># 得到标签名</span></span><br><span class="line">tag.attrs <span class="comment"># 得到标签属性</span></span><br><span class="line">comment <span class="comment"># 标签内的字符串，注释部分，一种特殊的comment类型</span></span><br></pre></td></tr></table></figure>

<h2 id="非find的常用方法"><a href="#非find的常用方法" class="headerlink" title="非find的常用方法"></a>非find的常用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.title</span><br><span class="line">soup.标签名</span><br><span class="line">soup.标签名.name</span><br><span class="line">soup.标签名.parent.name</span><br><span class="line">tag.attris[<span class="string">'属性名'</span>] <span class="comment"># tag.attris['href'], tag.attris['.class']</span></span><br></pre></td></tr></table></figure>

<h2 id="标签树"><a href="#标签树" class="headerlink" title="标签树"></a>标签树</h2><h3 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.contents <span class="comment"># 得到子节点列表</span></span><br><span class="line">tag.children <span class="comment"># 得到子节点的迭代类型</span></span><br><span class="line">tag.descendents <span class="comment"># 子孙节点的迭代类型</span></span><br></pre></td></tr></table></figure>

<h3 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.parent <span class="comment"># 父亲标签</span></span><br><span class="line">tag.parents <span class="comment"># 先辈标签的迭代类型</span></span><br></pre></td></tr></table></figure>

<h3 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag.next_sibling <span class="comment"># 下一个平行节点</span></span><br><span class="line">tag.next_siblings <span class="comment"># 得到所有下一个平行节点的迭代类型</span></span><br><span class="line">tag.previous_sibling <span class="comment"># 上一个平行节点</span></span><br><span class="line">tag.previous_siblings <span class="comment"># 得到所有上一个平行节点的迭代类型</span></span><br></pre></td></tr></table></figure>

<h2 id="使soup更加规则"><a href="#使soup更加规则" class="headerlink" title="使soup更加规则"></a>使soup更加规则</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.prettify()</span><br></pre></td></tr></table></figure>

<h2 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接口</span></span><br><span class="line">soup.find_all(name, attrs, recursive, String, kwarg**)</span><br><span class="line"><span class="comment"># recursive是否递归查询，默认为True</span></span><br><span class="line"><span class="comment"># String标签内的字符串</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用正则表达式匹配符合对应名字的标签名</span></span><br><span class="line">tags = soup.find_all(re.compile(<span class="string">'xxx'</span>))</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    print(tag.name)</span><br><span class="line"><span class="comment"># 标签内字符串检索</span></span><br><span class="line">soup.find_all(String=re.compile(<span class="string">'python'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><h2 id="find-parents"><a href="#find-parents" class="headerlink" title="find_parents()"></a>find_parents()</h2><h2 id="find-parent"><a href="#find-parent" class="headerlink" title="find_parent()"></a>find_parent()</h2><h2 id="find-next-sibling"><a href="#find-next-sibling" class="headerlink" title="find_next_sibling()"></a>find_next_sibling()</h2><h2 id="find-next-siblings"><a href="#find-next-siblings" class="headerlink" title="find_next_siblings()"></a>find_next_siblings()</h2><h2 id="find-previous-sibling"><a href="#find-previous-sibling" class="headerlink" title="find_previous_sibling()"></a>find_previous_sibling()</h2><h2 id="find-previous-siblings"><a href="#find-previous-siblings" class="headerlink" title="find_previous_siblings()"></a>find_previous_siblings()</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>bs4</tag>
        <tag>beautifulSoup</tag>
      </tags>
  </entry>
  <entry>
    <title>python库-操作Excel</title>
    <url>/python%E5%BA%93-%E6%93%8D%E4%BD%9CExcel.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>


<h1 id="python库-操作Excel"><a href="#python库-操作Excel" class="headerlink" title="python库-操作Excel"></a>python库-操作Excel</h1><h2 id="openpyxl库"><a href="#openpyxl库" class="headerlink" title="openpyxl库"></a>openpyxl库</h2><p><em>三个基本概念：workbooks(工作簿)，sheets(表), cells(单元格)</em></p>
<p><em>不支持打开xls格式的EXECL文件</em></p>
<h3 id="打开EXCEL"><a href="#打开EXCEL" class="headerlink" title="打开EXCEL"></a>打开EXCEL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> WorkBook</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">'路径.xlsx'</span>) <span class="comment"># 得到workbook对象</span></span><br><span class="line">sheetnames = wb.sheetnames <span class="comment"># 得到workbook里面的表名</span></span><br><span class="line">ws = wb[sheetnames[index]] <span class="comment"># 得到sheet表</span></span><br><span class="line">ws.cell(row, column).value <span class="comment"># 得到某行某列单元格的值</span></span><br><span class="line">ws.cell(row, column).value = <span class="string">'xxxx'</span> <span class="comment"># 重赋值</span></span><br><span class="line"><span class="comment"># 以行迭代指定单元格</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">3</span>, max_row=<span class="number">5</span>, min_col=<span class="number">2</span>, max_col=<span class="number">5</span>):</span><br><span class="line">    print(*[r.values <span class="keyword">for</span> r <span class="keyword">in</span> row])</span><br><span class="line"><span class="comment"># 以列迭代指定单元格</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> ws.iter_cols(min_row=<span class="number">3</span>, max_row=<span class="number">5</span>, min_col=<span class="number">2</span>, max_col=<span class="number">5</span>):</span><br><span class="line">    print(*[c.values <span class="keyword">for</span> c <span class="keyword">in</span> col])</span><br><span class="line">wb.save(<span class="string">'xxx.xlsx'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="创建EXCEL"><a href="#创建EXCEL" class="headerlink" title="创建EXCEL"></a>创建EXCEL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = WorkBook()</span><br><span class="line">ws = wb.active</span><br><span class="line">ws.cell(<span class="number">1</span>,<span class="number">1</span>).value = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">6</span>):</span><br><span class="line">        ws.cell(i+<span class="number">1</span>, j+<span class="number">1</span>).value = i*j</span><br><span class="line">wb.save(<span class="string">'xxx.xlsx'</span>)</span><br></pre></td></tr></table></figure>





<h2 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop启动后jps没有namenode</title>
    <url>/hadoop%E5%90%AF%E5%8A%A8%E5%90%8Ejps%E6%B2%A1%E6%9C%89namenode.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="hadoop启动后jps没有namenode"><a href="#hadoop启动后jps没有namenode" class="headerlink" title="hadoop启动后jps没有namenode"></a>hadoop启动后jps没有namenode</h2><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/81265784" target="_blank" rel="external nofollow noopener noreferrer">解决链接</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-SQL_Server</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL-Server.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h1><p><a href="https://www.51zxw.net/List.aspx?cid=492" target="_blank" rel="external nofollow noopener noreferrer">https://www.51zxw.net/List.aspx?cid=492</a></p>
<p> SQL Server 是<a href="https://baike.baidu.com/item/Microsoft/125917" target="_blank" rel="external nofollow noopener noreferrer">Microsoft</a> 公司推出的<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="external nofollow noopener noreferrer">关系型数据库管理系统</a>。具有使用<a href="https://baike.baidu.com/item/方便" target="_blank" rel="external nofollow noopener noreferrer">方便</a>可伸缩性好与相关<a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="external nofollow noopener noreferrer">软件</a>集成<a href="https://baike.baidu.com/item/程度/70052" target="_blank" rel="external nofollow noopener noreferrer">程度</a>高等<a href="https://baike.baidu.com/item/优点/884953" target="_blank" rel="external nofollow noopener noreferrer">优点</a>，可跨越从<a href="https://baike.baidu.com/item/运行/5480697" target="_blank" rel="external nofollow noopener noreferrer">运行</a>Microsoft Windows 98 的膝上型<a href="https://baike.baidu.com/item/电脑/124859" target="_blank" rel="external nofollow noopener noreferrer">电脑</a>到运行Microsoft Windows 2012 的大型多处理器的服务器等多种平台使用。</p>
<h2 id="启动SQL-Server服务"><a href="#启动SQL-Server服务" class="headerlink" title="启动SQL Server服务"></a>启动SQL Server服务</h2><p>1.在控制面板服务中启动</p>
<p>2.开始中找到sql的服务配置文件</p>
<p>3.cmd命令启动 net start /stop mssqlserver</p>
<h2 id="SQL-Server身份验证"><a href="#SQL-Server身份验证" class="headerlink" title="SQL Server身份验证"></a>SQL Server身份验证</h2><p>1.local/./127.0.0.1/IP地址</p>
<p>2.</p>
<ul>
<li><p>windows</p>
</li>
<li><p>Sql   </p>
<p>18456 安装时验证选择的问题   18470 账户启动问题</p>
</li>
</ul>
<hr>
<blockquote>
<p>明智的放弃胜过盲目的执著。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机无法联网</title>
    <url>/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="虚拟机无法联网"><a href="#虚拟机无法联网" class="headerlink" title="虚拟机无法联网"></a>虚拟机无法联网</h2><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><a href="https://blog.csdn.net/wuhuimin521/article/details/80992530" target="_blank" rel="external nofollow noopener noreferrer">方案链接</a></p>
<p><a href="https://blog.csdn.net/wolf_soul/article/details/46409323" target="_blank" rel="external nofollow noopener noreferrer">url2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop大数据技术-第八章</title>
    <url>/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF-%E7%AC%AC%E5%85%AB%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h1><h2 id="Sqoop简介"><a href="#Sqoop简介" class="headerlink" title="Sqoop简介"></a>Sqoop简介</h2><p><em>Sqoop是一个在关系型数据库与Hadoop数据存储和处理平台进行数据导入\导出的工具</em></p>
<p><em>Sqoop脚本最终会转换为mapreduce程序</em></p>
<h2 id="Sqoop基本原理"><a href="#Sqoop基本原理" class="headerlink" title="Sqoop基本原理"></a>Sqoop基本原理</h2><p><em>有sqoop1和sqoop2；sqoop1更加稳定</em></p>
<p><em>Sqoop1使用Sqoop客户端直接提交任务，通过CLI控制台或API方式访问数据时，在命令或脚本中需要指定用户数据库名及密码</em></p>
<p><strong>import原理</strong>：<em>从传统数据库获取元数据信息，把导入功能转换为只有Map的MapReduce作业，在map中有很多Map，每个Map读取一片数据，进而并行地复制到HDFS,HBSE或HIVE中的数据导入到关系型数据库</em></p>
<p><strong>Export原理</strong>：<em>获取导出表的schema,meta信息，与hadoop中的字段匹配，多个Map作业并行运行，将HDFS,HBASE或HIVE中的数据导出到关系型数据库</em></p>
<p><a href="https://imgchr.com/i/ttSV7d" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/02/ttSV7d.md.jpg" alt="ttSV7d.md.jpg" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/06/02/ttSeAA.md.jpg" alt="ttSeAA.md.jpg" border="0">



<h2 id="Sqoop的安装与部署"><a href="#Sqoop的安装与部署" class="headerlink" title="Sqoop的安装与部署"></a>Sqoop的安装与部署</h2><h2 id="Sqoop应用"><a href="#Sqoop应用" class="headerlink" title="Sqoop应用"></a>Sqoop应用</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-用SQL创建数据库</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%94%A8SQL%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<img src="https://s1.ax1x.com/2020/06/04/tBE71f.png" alt="tBE71f.png" border="0">

<p>​                                    <a href="https://imgchr.com/i/tBExNn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/04/tBExNn.png" alt="tBExNn.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/06/04/tBEQTs.png" alt="tBEQTs.png" border="0">





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库系统概述</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h1><h2 id="其他课程与本课程的关系"><a href="#其他课程与本课程的关系" class="headerlink" title="其他课程与本课程的关系"></a>其他课程与本课程的关系</h2><ul>
<li>离散数学</li>
<li>数据结构</li>
<li>编译原理</li>
<li>操作系统</li>
<li>软件工程</li>
</ul>
<h2 id="需要学习"><a href="#需要学习" class="headerlink" title="需要学习"></a>需要学习</h2><ul>
<li>数据库基础</li>
<li>数据库设计</li>
<li>数据库应用程序开发</li>
<li>数据库存储与控制</li>
</ul>
<h2 id="数据库的-4-个基本概念"><a href="#数据库的-4-个基本概念" class="headerlink" title="数据库的 4 个基本概念"></a>数据库的 4 个基本概念</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p><strong>数据是数据库存储的基本对象</strong></p>
<p><strong>信息与数据既有联系，又有区别。数据是信息的表现形式和载体</strong></p>
<p><strong>数据是数据库存储的基本对象</strong></p>
<p><strong>描述事物的符号记录称为数据</strong></p>
<p><strong>数据的含义称为数据的语义，数据与其语义密不可分</strong></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>什么是数据库</strong>：有相互关系和关联的数据的集合</p>
<p>表</p>
<p>行/元组/</p>
<p>列/属性/数据项</p>
<p><strong>数据库是长期存储在计算机内，有组织，可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织，描述和存储，具有较小的冗余度，较高的数据独立性和易扩展性，并可为各种用户共享</strong></p>
<p><strong>简单地说数据库具有可共享，有组织，永久存储的特点</strong></p>
<h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p><em>科学的组织和存储数据，如何高效底维护和获取数据</em></p>
<p><strong>数据库管理系统必须具有将数据库从错误状态恢复到某一已知的正确状态的功能，这就是数据库的恢复功能</strong></p>
<p><strong>数据库管理系统</strong>：操作和管理数据库的大型软件<br><strong>数据库管理系统的主要功能:</strong>  </p>
<ul>
<li>数据定义功能: 具有数据定义语言(Data Definition Language, DDL)</li>
<li>数据组织，存储和管理（提供了多种方法）</li>
<li>数据操纵功能（用户操纵数据， Data Manipulation Language, DML）</li>
<li>数据库的事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
<li>其它功能</li>
</ul>
<h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p><em>由数据库，数据库管理系统，应用程序和数据库管理员(DBA)组成的存储，管理，处理和维护数据的系统</em></p>
<p><em>在一般不引起混淆的情况下，一般把数据库系统叫做数据库</em></p>
<p><a href="https://imgchr.com/i/tBiPPK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/04/tBiPPK.md.png" alt="tBiPPK.png" border="0"></a></p>
<h4 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h4><ul>
<li>数据结构化(实现整体数据的结构化，这是数据库的主要特征，也是数据库系统与文件系统的本质区别)</li>
<li>数据冗余度低，高共享，独立，易扩充</li>
<li>数据由数据库管理系统统一管理和控制(数据的安全性的保护，完整性的检查，并发控制，数据库恢复)</li>
</ul>
<h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ul>
<li>数据库(有相互关系关联的数据的集合)  </li>
<li>数据库管理系统(DBMS管理数据的一种系统软件) </li>
<li>数据库应用(DBAP)  ·数据库管理员(DBA) </li>
<li>计算机基本系统</li>
</ul>
<h3 id="数据库管理技术及其发展"><a href="#数据库管理技术及其发展" class="headerlink" title="数据库管理技术及其发展"></a>数据库管理技术及其发展</h3><p><strong>人工管理阶段-》文件系统阶段-》数据库系统阶段</strong></p>
<p><em>从文件管理系统到数据库系统标志着数据管理技术的飞跃</em></p>
<h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><ul>
<li>数据不能长期存储</li>
<li>应用程序管理数据</li>
<li>数据不能共享</li>
<li>数据不具有独立性</li>
</ul>
<h4 id="文件系统管理阶段"><a href="#文件系统管理阶段" class="headerlink" title="文件系统管理阶段"></a>文件系统管理阶段</h4><ul>
<li>数据可以长期存储</li>
<li>有简单的数据管理功能</li>
<li>数据共享能力差</li>
<li>数据不具有独立性</li>
</ul>
<h4 id="数据库系统管理阶段"><a href="#数据库系统管理阶段" class="headerlink" title="数据库系统管理阶段"></a>数据库系统管理阶段</h4><ul>
<li>采用复杂的结构化的数据模型</li>
<li>数据独立性高</li>
<li>数据共享程度高，冗余度低</li>
<li>数据由DBMS统一管理和控制</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p><em>数 据 模 型 (data model)也是一种模型，它是对现实世界数据特征的抽象</em></p>
<p><strong>三大经典数据模型</strong>：表，树，图</p>
<h3 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h3><p><em>第一类是概念模型，第二类是逻辑模型和物理模型</em></p>
<p><em>首先将现实世界抽象为信息世界，然后将信息世界转换为机器世界</em></p>
<h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p><em>概念模型实际上是现实世界到机器世界的一个中间层次</em></p>
<h4 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h4><h5 id="实-体-entity"><a href="#实-体-entity" class="headerlink" title="实 体 (entity)"></a>实 体 (entity)</h5><p><em>客观存在并可相互区别的事物称为实体</em></p>
<h5 id="属-性-attribute"><a href="#属-性-attribute" class="headerlink" title="属 性 (attribute)"></a>属 性 (attribute)</h5><p><em>实体所具有的某一特性称为属性</em></p>
<h5 id="码-key"><a href="#码-key" class="headerlink" title="码 (key)"></a>码 (key)</h5><p><em>唯一标识实体的属性集称为码</em></p>
<h5 id="实-体-型-entitytype"><a href="#实-体-型-entitytype" class="headerlink" title="实 体 型 (entitytype)"></a>实 体 型 (entitytype)</h5><p><em>具有相同属性的实体必然具有共同的特征和性质。用实体名及其属性名集合来抽象和<br>刻画同类实体，称为实体型。</em></p>
<h5 id="实-体-集-entityset"><a href="#实-体-集-entityset" class="headerlink" title="实 体 集 (entityset)"></a>实 体 集 (entityset)</h5><h5 id="联-系-relationship"><a href="#联-系-relationship" class="headerlink" title="联 系 (relationship)"></a>联 系 (relationship)</h5><p><em>实体之间的联系通常是指不同实体集之间的联系</em></p>
<p><em>实体之间的联系有一对一、 一对多和多对多等多种类型</em></p>
<h4 id="概念模型的一种表示方法：实体-联系方法"><a href="#概念模型的一种表示方法：实体-联系方法" class="headerlink" title="概念模型的一种表示方法：实体-联系方法"></a>概念模型的一种表示方法：实体-联系方法</h4><p><em>概念模型的表示方法很多，其中最为常用的是P.P.S.Chen于 1976年提出的<br>*</em>实体 -联系方法** (Entity-Relationship approach 该方法用 E-R 图 (E-R diagram )来描述现实世界的概念模型， <strong>E -R 方法</strong>也称为<strong>E -R 模型*</strong> </p>
<h4 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h4><p><em>数据模型通常由数据结构、数据操作和数据的完整性约束条件三部分组成</em>  </p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><strong>E.F.Codd提出了”关系”及关系模型</strong></p>
<h3 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h3><ul>
<li>数据定义语言(DDL)：包括数据库模式定义和数据库存储结构与存取方法定义两方面</li>
<li>数据操作语言(DML): 嵌入式主语言和交互式命令语言</li>
</ul>
<p>例行程序语言翻译处理程序系统运行控制程序公用程序</p>
<h3 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h3><h4 id="内部体系结构"><a href="#内部体系结构" class="headerlink" title="内部体系结构"></a>内部体系结构</h4><ul>
<li>三层模式结构  </li>
</ul>
<h4 id="外部体系结构"><a href="#外部体系结构" class="headerlink" title="外部体系结构"></a>外部体系结构</h4><ul>
<li>集中式结构  </li>
<li>分布式结构  </li>
<li>客户端/服务器结构等</li>
</ul>
<h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p><strong>外部级</strong>: 最接近用户，是单个用户索能看到的数据特征  </p>
<p><strong>概念级</strong>: 涉及到所有用户的数据定义，也就是全局性的数据视图，全局数据视图称为概念模式  </p>
<p><strong>内部级</strong>: 最接近物理存储设备，涉及到物理数据存储的结构，物理存储数据视图的描述称为内模式</p>
<p>数据库的三级模式结构是对数据的三个抽象级别， 它把数据的具体组织留给DBMS去做，用户只要抽象地处理数据，而不必关心数据在计算机中的表示和存储</p>
<p>关系模型的三个要素:基本结构基本操作完整性约束</p>
<hr>
<blockquote>
<p>看似不起波澜的日复一日，会突然在某一天让人看到坚持的意义。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第六章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%85%AD%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><h3 id="域名系统概述"><a href="#域名系统概述" class="headerlink" title="域名系统概述"></a>域名系统概述</h3><p><strong>DNS</strong>是一个分布式系统(单个计算机出现错误，也不会妨碍整个系统的运行)</p>
<p><strong>域名系统</strong>是互联网使用的命名系统，用于<strong>把机器名字转换成IP地址</strong></p>
<p><strong>DNS</strong>使大多数名字都在本地进行<strong>解析</strong>，仅少量解析需要在互联网上通信，因此DNS效率很高</p>
<h3 id="互联网的域名结构"><a href="#互联网的域名结构" class="headerlink" title="互联网的域名结构"></a>互联网的域名结构</h3><p><em>级别最低的域名写在最左边，而最高级的域名写在最右边</em></p>
<p><strong>顶级域名分为三类:</strong>国家顶级域名nTLD；通用顶级域名gTLD；基础结构域名infrastructure domain</p>
<p><a href="https://imgchr.com/i/t83I2D" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t83I2D.md.jpg" alt="t83I2D.jpg" border="0"></a></p>
<h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p><strong>根域名服务器</strong></p>
<p><em>层次最高的域名服务器，也是最重要的域名服务器</em></p>
<p><em>所有根域名服务器都知道所有的顶级域名服务器的域名和IP地址</em></p>
<p><strong>顶级域名服务器</strong></p>
<p><strong>权限域名服务器</strong></p>
<p><strong>本地域名服务器</strong></p>
<p><em>当一台主机发出DNS查询请求时，这个请求报文就发给本地域名服务器</em></p>
<h4 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h4><h5 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h5><h5 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h5><p><a href="https://imgchr.com/i/t8Gw1U" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t8Gw1U.md.jpg" alt="t8Gw1U.jpg" border="0"></a></p>
<h4 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h4><p><em>为了提高DNS查询效率，并减轻根域名服务器的负担和减少互联网的DNS查询数量，在域名服务器中广泛使用<strong>高速缓存</strong>。</em></p>
<h2 id="文件传送协议-FTP"><a href="#文件传送协议-FTP" class="headerlink" title="文件传送协议 FTP"></a>文件传送协议 FTP</h2><h3 id="FTP概述"><a href="#FTP概述" class="headerlink" title="FTP概述"></a>FTP概述</h3><p><strong>文件传输协议</strong>FTP是互联网上使用得最广泛的文件传输协议</p>
<h3 id="FTP的基本工作原理"><a href="#FTP的基本工作原理" class="headerlink" title="FTP的基本工作原理"></a>FTP的基本工作原理</h3><p>服务器端有两个从属进程：<strong>控制进程</strong>和<strong>数据传输进程</strong></p>
<p>在进行文件传输时，FTP的客户和服务器之间要建立两个并行的<strong>TCP连接</strong>：<strong>控制连接和数据连接</strong>。<strong>控制进程会在整个进程保持打开</strong></p>
<p><a href="https://imgchr.com/i/t8JOaR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/01/t8JOaR.md.jpg" alt="t8JOaR.jpg" border="0"></a></p>
<h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><h3 id="万维网概述"><a href="#万维网概述" class="headerlink" title="万维网概述"></a>万维网概述</h3><p><em>world wide web</em></p>
<p><strong>URL</strong>:统一资源定位符</p>
<p><strong>HTTP</strong>:超文本传输协议</p>
<h4 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL"></a>统一资源定位符URL</h4><h5 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用HTTP的URL"><a href="#使用HTTP的URL" class="headerlink" title="使用HTTP的URL"></a>使用HTTP的URL</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt; --端口默认是80可以省略</span><br></pre></td></tr></table></figure>

<h4 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h4><p><em>HTTP协议是无状态的</em></p>
<p><strong>HTTP/1.0的缺点</strong>是：非持续连接</p>
<p><strong>HTTP/1.1:</strong>持续连接</p>
<h4 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h4><h5 id="超文本标记语言HTML"><a href="#超文本标记语言HTML" class="headerlink" title="超文本标记语言HTML"></a>超文本标记语言HTML</h5><h4 id="万维网的信息检索系统"><a href="#万维网的信息检索系统" class="headerlink" title="万维网的信息检索系统"></a>万维网的信息检索系统</h4><h5 id="全文检索搜索"><a href="#全文检索搜索" class="headerlink" title="全文检索搜索"></a>全文检索搜索</h5><h5 id="分类目录搜索"><a href="#分类目录搜索" class="headerlink" title="分类目录搜索"></a>分类目录搜索</h5><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p><em>主要由三个主要组件组成：*</em>用户代理<strong>；</strong>邮件服务器<strong>；</strong>邮局协议***</p>
<h3 id="读取邮件协议POP3和IMAP"><a href="#读取邮件协议POP3和IMAP" class="headerlink" title="读取邮件协议POP3和IMAP"></a>读取邮件协议POP3和IMAP</h3><h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><p><em>是一个非常简单，功能非常有限的邮件读取协议</em></p>
<p><em>POP3协议的一个特点是只要用户从POP3服务器读取了邮件，POP3服务器就把该邮件删除</em></p>
<h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><p><strong>IMAP</strong>最大的好处就是用户可以在不同的地方使用不同的计算机随时阅读和处理自己在邮件服务器中的邮件</p>
<h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><p><em>这种机制允许一台计算机加入新的网络和获取IP地址而不需要手工参与</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>数值分析-插值与拟合</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="插值与拟合"><a href="#插值与拟合" class="headerlink" title="插值与拟合"></a>插值与拟合</h1><h2 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h2><h3 id="线性插值与抛物插值"><a href="#线性插值与抛物插值" class="headerlink" title="线性插值与抛物插值"></a>线性插值与抛物插值</h3><h3 id="n次插值基函数"><a href="#n次插值基函数" class="headerlink" title="n次插值基函数"></a>n次插值基函数</h3><p><a href="https://imgchr.com/i/tZgy38" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/tZgy38.md.jpg" alt="tZgy38.md.jpg" border="0"></a></p>
<h4 id="n次拉格朗日插值多项式"><a href="#n次拉格朗日插值多项式" class="headerlink" title="n次拉格朗日插值多项式"></a>n次拉格朗日插值多项式</h4><img src="https://s1.ax1x.com/2020/05/28/tZgs9f.md.jpg" alt="tZgs9f.md.jpg" border="0">

<h4 id="n次插值多项式"><a href="#n次插值多项式" class="headerlink" title="n次插值多项式"></a>n次插值多项式</h4><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/tASce1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASce1.md.png" alt="tASce1.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/tASWFK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tASWFK.md.png" alt="tASWFK.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/tApiT0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApiT0.md.jpg" alt="tApiT0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/tApPwq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/27/tApPwq.md.jpg" alt="tApPwq.md.jpg" border="0"></a></p>
<p><a href="https://imgchr.com/i/teSKzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/28/teSKzT.md.jpg" alt="teSKzT.jpg" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库完整性</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h1><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p><strong>触 发 器</strong> (trig g er)<em>是用户定义在关系表上的一类由事件驱动的特殊过程</em></p>
<p><em>一旦定义，触发器将被保存在数据库服务器中</em></p>
<p> <em>任何用户对表的增、删 、改操作均由<strong>服务器自动激活相应的触发器</strong>，在关系数据库管理系统核心层进行集中的完整性控制</em>  </p>
<p><em>触发器类似于约束，但是比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</em>  </p>
<h3 id="定义触发器"><a href="#定义触发器" class="headerlink" title="定义触发器"></a>定义触发器</h3><p><strong>触发器又叫做事件-条件-动作(event-condition-action) 规则</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> &lt;触发器名&gt;</span><br><span class="line"><span class="keyword">ON</span> &#123;表名|视图名&#125;</span><br><span class="line">[<span class="keyword">WITH</span> ENCRYPTION]</span><br><span class="line">&#123;<span class="keyword">FOR</span>|<span class="keyword">AFTER</span>|INSTEAD <span class="keyword">OF</span>&#125;&#123;[<span class="keyword">INSERT</span>][,][<span class="keyword">UPDATE</span>][,][<span class="keyword">DELETE</span>]&#125;</span><br><span class="line">[<span class="keyword">NOT</span> <span class="keyword">FOR</span> <span class="keyword">REPLICATION</span>]</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">[<span class="keyword">SQL</span>语句]</span><br></pre></td></tr></table></figure>

<h4 id="INSERT触发器"><a href="#INSERT触发器" class="headerlink" title="INSERT触发器"></a>INSERT触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiijpD.png" alt="tiijpD.png" border="0">

<p>​                                                        <a href="https://imgchr.com/i/tiFfEt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiFfEt.md.png" alt="tiFfEt.png" border="0"></a></p>
<p><em>cast强制转换；print只能输出字符类型；@@rowcount返回影响条数</em></p>
<img src="https://s1.ax1x.com/2020/05/26/tiVcJP.png" alt="tiVcJP.png" border="0">

<p><em>ROLLBACK TRAN返回上一个版本</em></p>
<h4 id="DELETE触发器"><a href="#DELETE触发器" class="headerlink" title="DELETE触发器"></a>DELETE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tiZIXD.png" alt="tiZIXD.png" border="0">

<img src="https://s1.ax1x.com/2020/05/26/timuxf.png" alt="timuxf.png" border="0">

<h4 id="UPDATE触发器"><a href="#UPDATE触发器" class="headerlink" title="UPDATE触发器"></a>UPDATE触发器</h4><img src="https://s1.ax1x.com/2020/05/26/tinqAJ.png" alt="tinqAJ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/27/tAmi7D.png" alt="tAmi7D.png" border="0">

<img src="https://s1.ax1x.com/2020/05/26/tiMOhj.png" alt="tiMOhj.png" border="0">

<h4 id="INSTEAD-OF触发器"><a href="#INSTEAD-OF触发器" class="headerlink" title="INSTEAD OF触发器"></a>INSTEAD OF触发器</h4><img src="https://s1.ax1x.com/2020/05/27/tAM2Je.png" alt="tAM2Je.png" border="0">

<h3 id="修改和删除触发器"><a href="#修改和删除触发器" class="headerlink" title="修改和删除触发器"></a>修改和删除触发器</h3><img src="https://s1.ax1x.com/2020/05/27/tAQFW4.png" alt="tAQFW4.png" border="0">

<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库创建</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h1><h2 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h2><h2 id="SQl创建"><a href="#SQl创建" class="headerlink" title="SQl创建"></a>SQl创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> StudentInfo <span class="comment">--创建数据库名字</span></span><br><span class="line"><span class="keyword">on</span> primary <span class="comment">--主文件组</span></span><br><span class="line">(</span><br><span class="line">   <span class="keyword">name</span> = <span class="string">'StudentInfo'</span>, <span class="comment">--数据库文件的逻辑名字；</span></span><br><span class="line">   filename=<span class="string">'E:\mydata\ StudentInfo.mdf'</span>,</span><br><span class="line">   <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">   <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">   filegrowth=<span class="number">1</span>mb</span><br><span class="line">   ),</span><br><span class="line">   (</span><br><span class="line">       <span class="keyword">name</span>=<span class="string">'StudentInfo_log'</span>,  <span class="comment">-- 次要文件名字，不能和主文件名字相同</span></span><br><span class="line">       filename=<span class="string">' E:\mydata\StudentInfo_log.ldf'</span>,</span><br><span class="line">       <span class="keyword">size</span>=<span class="number">10</span>mb,</span><br><span class="line">       <span class="keyword">maxsize</span>=<span class="number">50</span>mb,</span><br><span class="line">       filegrowth=<span class="number">1</span>mb</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第七章Flume</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%83%E7%AB%A0Flume.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Flume-了解"><a href="#Flume-了解" class="headerlink" title="Flume(了解)"></a>Flume(了解)</h1><p><em>用于采集数据</em></p>
<h2 id="Flume-产生的背景"><a href="#Flume-产生的背景" class="headerlink" title="Flume 产生的背景"></a>Flume 产生的背景</h2><p><em>通过中间系统，将数据推送到 HDFS 或类似的存储系统是很普遍的。这些系统能在数据生产者和最终目的地之间起缓冲作用，使得偶然突发写入 HDFS 和 HBase 集群的请求，变得可以持续而平稳</em>    </p>
<h2 id="Flume-简介"><a href="#Flume-简介" class="headerlink" title="Flume 简介"></a>Flume 简介</h2><p><em>Flume 是 Cloudera 提供的一个高可用、高可靠、分布式的海量日志采集、聚合和传输的系统</em></p>
<p><em>Apache Flume 是一个系统，用于从大量数据生产商那里移动海量数据到存储、索引或分析数据的系统</em>  </p>
<h2 id="Flume-安装"><a href="#Flume-安装" class="headerlink" title="Flume 安装"></a>Flume 安装</h2><p><em>不支持windows安装</em></p>
<p><em>需要配置环境变量</em></p>
<h2 id="Flume的架构"><a href="#Flume的架构" class="headerlink" title="Flume的架构"></a>Flume的架构</h2><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p><em>Flume 运行的核心是 Agent。 Agent 本身是一个 Java 进程，也是 Flume 中最小的独立运行单位，运行在日志收集节点。</em></p>
<p>  Flume核心Agent = source(采集) + channel(缓存数据) + sink(保存日志)</p>
<p><em>一般一个机器运行一个Agent， 但在一个Agent中可以包含多个Source，channel和sink</em></p>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><p><em>Flume 基于数据流进行设计，数据流由事件（ Event）贯穿始终。<strong>事件作为 Flume 的基本数据单位</strong>，携带日志数据（以字节数组形式）并且携带有头信息，由 Agent 外部的数据源（如图 7-2 中的 Web Server）生成</em> </p>
<h2 id="Flume-应用"><a href="#Flume-应用" class="headerlink" title="Flume 应用"></a>Flume 应用</h2><h3 id="Flume的组件类型及其配置"><a href="#Flume的组件类型及其配置" class="headerlink" title="Flume的组件类型及其配置"></a>Flume的组件类型及其配置</h3><h2 id="Flume的配置方法"><a href="#Flume的配置方法" class="headerlink" title="Flume的配置方法"></a>Flume的配置方法</h2><p><em>一定义，三配置</em></p>
<p><a href="https://imgchr.com/i/t9LHeJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9LHeJ.md.png" alt="t9LHeJ.png" border="0"></a></p>
<h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>maven安装</title>
    <url>/maven%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>linux相关命令</title>
    <url>/linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>IDM破解</title>
    <url>/IDM%E7%A0%B4%E8%A7%A3.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c3ef0d90e9668753b03184dba9152b88e6ab9dc08dda5f22d54c42d05f7d410c">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64a1d59c1284dd092db131f60ca15fd43a800f4bdb3c18f5d23ebc2112ac0b618dcd4f911f4730f9b33f62f7e9ecfdc11c40f360b63c1b8e7ab3a73a1ff9ee0249570b2a0e8539b47afc9a9a68ea748b47f07157c7bdda91ed044c7e52f10a72953e369a665131ef1bc7e69beeafba612807b1a951f7fc0a823be343e0fc92441470330495c08320ab53e0459713ddd945fa53450de67a4eca1c25f7ab3d3598d7a9c29f47c8727ba30eb0124add458d34fcb47b330ce962059e3134d1212e9bb0dd63d0486999ed46688b2836aaa87e642d673aca5df700dcf8357e472f25ae48e2b561e642de3b5f9ba6029dd151b5545bf2b7c999d411a514fe9c6242e5798679904f162359bb5dbe7ac8d1588d7237</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>激活</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-sql执行过程遇到的异常</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="存储过程变量输出"><a href="#存储过程变量输出" class="headerlink" title="存储过程变量输出"></a>存储过程变量输出</h2><h2 id="1-格式转换"><a href="#1-格式转换" class="headerlink" title="1.格式转换"></a>1.格式转换</h2><p>CAST(XXX AS XXX)</p>
<h2 id="2-查看存在的存储过程"><a href="#2-查看存在的存储过程" class="headerlink" title="2.查看存在的存储过程"></a>2.查看存在的存储过程</h2><p><a href="https://www.cnblogs.com/sunliyuan/p/6625862.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="3-触发器中For-和-after等同"><a href="#3-触发器中For-和-after等同" class="headerlink" title="3.触发器中For 和 after等同"></a>3.触发器中For 和 after等同</h2><h2 id="4-当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"><a href="#4-当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除" class="headerlink" title="4.当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除"></a>4.当一个表的某属性被另一个表某属性引用时，删除第一个表的元组，默认不能执行，可以设置为级联删除</h2><p><em>选中要操作的表，右键-&gt;设计-&gt;顶部的关系按钮-&gt;insert和update规范-&gt;设置为级联操作</em></p>
<h2 id="5-关闭保存要求重新创建表的更改"><a href="#5-关闭保存要求重新创建表的更改" class="headerlink" title="5.关闭保存要求重新创建表的更改"></a>5.关闭保存要求重新创建表的更改</h2><p><em>工具-&gt;选项-&gt;designer-&gt;</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据库编程</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h1><h2 id="SQL-Server编程结构"><a href="#SQL-Server编程结构" class="headerlink" title="SQL Server编程结构"></a>SQL Server编程结构</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="声明局部变量"><a href="#声明局部变量" class="headerlink" title="声明局部变量"></a>声明局部变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @局部变量名 数据类型</span><br><span class="line">[， @局部变量名 数据类型]</span><br></pre></td></tr></table></figure>

<p><em>可以同时定义多个变量，中间用逗号隔开</em></p>
<h4 id="赋值局部变量"><a href="#赋值局部变量" class="headerlink" title="赋值局部变量"></a>赋值局部变量</h4><p><em>为局部变量赋值可以用SET或SELECT语句</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @变量名=表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>,..,列n</span><br><span class="line">@变量名=表达式</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>

<p><em>注: 如果SELECT语句返回多个值，则局部变量取最后一个返回值。例：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @Sname = Sname </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex = <span class="string">'男'</span></span><br></pre></td></tr></table></figure>

<h4 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h4><h5 id="Print语句"><a href="#Print语句" class="headerlink" title="Print语句"></a>Print语句</h5><p><em>print语句只能显示字符数据类型</em></p>
<h5 id><a href="#" class="headerlink" title></a></h5><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注释文本*/</span></span><br><span class="line">或</span><br><span class="line"><span class="comment">-- 注释文本</span></span><br></pre></td></tr></table></figure>

<h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p><em>批处理是成组执行的一条或多条T-SQL指令</em></p>
<p><em>GO语句用于指定批处理语句的结束处，单独使用一行。本身不是T-SQL的部分</em></p>
<p><strong>注意</strong>：</p>
<p>不能在同一个批处理处，先删除，后使用</p>
<p>不在在同一个批处理处，先修改，后使用</p>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="BEGIN…END"><a href="#BEGIN…END" class="headerlink" title="BEGIN…END"></a>BEGIN…END</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">语句</span><br><span class="line">....</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h4 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h4><h5 id="IF-THEN语句"><a href="#IF-THEN语句" class="headerlink" title="IF-THEN语句"></a>IF-THEN语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">	Sequence_of_statements;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure>

<h5 id="IF-THEN-ELSE语句"><a href="#IF-THEN-ELSE语句" class="headerlink" title="IF-THEN-ELSE语句"></a>IF-THEN-ELSE语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF condition THEN</span><br><span class="line">	Sequence_of_statements1;</span><br><span class="line">ELSE</span><br><span class="line">	Sequence_of_statements2;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure>

<h5 id="嵌套的IF语句"><a href="#嵌套的IF语句" class="headerlink" title="嵌套的IF语句"></a>嵌套的IF语句</h5><p><em>在THEN和ELSE子句中还可以包含IF语句</em></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Y5Mhaq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y5Mhaq.th.png" alt="Y5Mhaq.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/20/YTFdDP.png" alt="YTFdDP.png" border="0">

<h4 id="WHILE"><a href="#WHILE" class="headerlink" title="WHILE"></a>WHILE</h4><h4 id="GOTO"><a href="#GOTO" class="headerlink" title="GOTO"></a>GOTO</h4><h4 id="WAITFOR"><a href="#WAITFOR" class="headerlink" title="WAITFOR"></a>WAITFOR</h4><h4 id="RETURN"><a href="#RETURN" class="headerlink" title="RETURN"></a>RETURN</h4><h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><h2 id="存储过程-重点"><a href="#存储过程-重点" class="headerlink" title="存储过程(重点)"></a>存储过程(重点)</h2><p><em>过程化 SQ L块主要有两种类型，即命名块和匿名块</em></p>
<p><em>匿名块每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQ L块中调用</em></p>
<p>  <em>过程和函数是命名块，它们被编译后保存在数据库中，称 为持久性存储模块) ,可以被反复调用，运行速度较快</em></p>
<h3 id="存储过程的基本概念"><a href="#存储过程的基本概念" class="headerlink" title="存储过程的基本概念"></a>存储过程的基本概念</h3><p><em>存储过程是由过程化SQ L 语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，因此称它为存储过程，使用时只要调用即可</em>  </p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>存储过程降低了客户机和服务器之间的通信量  </p>
<p>运行效率高  </p>
<p>方便实施企业规则  </p>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名([@参数<span class="number">1</span> 类型,.., @参数n 类型)</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--参数不带括号也可以</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名</span><br><span class="line">@参数<span class="number">1</span> 类型,.., @参数n 类型</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure>



<p><em>可简写成PROC</em></p>
<h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> aa</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>



<h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><img src="https://s1.ax1x.com/2020/05/19/Y5Y8jf.png" alt="Y5Y8jf.png" border="0">

<img src="https://s1.ax1x.com/2020/05/20/YTuBVA.png" alt="YTuBVA.png" border="0">

<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><img src="https://s1.ax1x.com/2020/05/20/YTkJaT.png" alt="YTkJaT.png" border="0">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> exp4</span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'%...'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 @pno=<span class="string">'....'</span></span><br><span class="line"><span class="keyword">EXECUTE</span> exp4 <span class="string">'...'</span>, <span class="string">'...'</span></span><br></pre></td></tr></table></figure>



<h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><img src="https://s1.ax1x.com/2020/05/19/Y5dghQ.png" alt="Y5dghQ.png" border="0">

<p><em>可简写成EXEC</em></p>
<h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名<span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h4 id="重编译"><a href="#重编译" class="headerlink" title="重编译"></a>重编译</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名(参数)</span><br><span class="line"><span class="keyword">AS</span></span><br></pre></td></tr></table></figure>

<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 过程名;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><em>和存储过程一样都是持久性存储模块；不同的是函数要指定返回类型</em></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名([参数<span class="number">1</span>, ..., 参数n]) <span class="keyword">RETURNS</span>&lt;类型&gt;</span><br><span class="line"><span class="keyword">AS</span> &lt;过程化<span class="keyword">SQL</span>块&gt;</span><br></pre></td></tr></table></figure>

<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span>/<span class="keyword">SELECT</span> 函数名([参数<span class="number">1</span>, ..., 参数n])</span><br></pre></td></tr></table></figure>



<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 过程名 <span class="number">1</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> 过程名 <span class="number">2</span>; <span class="comment">--重命名</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> 函数名 COMPILE; <span class="comment">--重新编译一个函数</span></span><br></pre></td></tr></table></figure>

<h2 id="过程化SQL中的游标"><a href="#过程化SQL中的游标" class="headerlink" title="过程化SQL中的游标"></a>过程化SQL中的游标</h2><hr>
<blockquote>
<p>你未必万丈光芒，但始终温暖有光。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-好友推荐</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E5%92%8C%E5%AE%9E%E8%B7%B5-%E5%A5%BD%E5%8F%8B%E6%8E%A8%E8%8D%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="好友推荐"><a href="#好友推荐" class="headerlink" title="好友推荐"></a>好友推荐</h2><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><a href="https://imgchr.com/i/Y4YlJ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/19/Y4YlJ1.md.png" alt="Y4YlJ1.png" border="0"></a></p>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h4><p><em>以每个人为对象，统计直接关系</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tom cat hello hadoop</span><br><span class="line">cat tom hive</span><br><span class="line">hive cat hadoop world hello mr</span><br><span class="line">mr hive hello</span><br><span class="line">world hadoop hive hello mr</span><br><span class="line">hadoop hive tom world</span><br><span class="line">hello world tom hive mr</span><br></pre></td></tr></table></figure>



<h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><h5 id="map阶段输出数据"><a href="#map阶段输出数据" class="headerlink" title="map阶段输出数据"></a>map阶段输出数据</h5><p><em>以key-value的形式，表示两个人的直接或间接关系(0代表直接，1代表间接)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#39;tom_cat&#39;: 0&gt;, &lt;&#39;tom_hello&#39;: 0&gt;, &lt;&#39;tom_hadoop&#39;: 0&gt;, &lt;&#39;cat_hello&#39;: 1&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;, &lt;&#39;hello_hadoop&#39;: 1&gt;</span><br><span class="line">&lt;&#39;cat_tom&#39;: 0&gt;， &lt;&#39;cat_hive&#39;: 0&gt;， &lt;&#39;tom_hive&#39;: 1&gt;</span><br><span class="line">&lt;&#39;hive_cat&#39;: 0&gt;, &lt;&#39;hive_hadoop&#39;: 0&gt;, &lt;&#39;hive_world&#39;: 0&gt;, &lt;&#39;hive_hello&#39;: 0&gt;, &lt;&#39;hive_mr&#39;: 0&gt;, &lt;&#39;cat_hadoop&#39;: 1&gt;,&lt;&#39;cat_world&#39;: 1&gt; ,&lt;&#39;cat_hello&#39;: 1&gt; ,&lt;&#39;cat_mr&#39;: 1&gt; ,&lt;&#39;hadoop_world&#39;: 1&gt;, &lt;&#39;hadoop_hello&#39;: 1&gt;, &lt;&#39;hadoop_mr&#39;: 1&gt;, &lt;&#39;world_hello&#39;: 1&gt;, &lt;&#39;world_mr&#39;: 1&gt;, &lt;&#39;hello_mr&#39;: 1&gt;,</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><em>通过Map函数形成两个人的关系，要注意升序还是降序，确保一致性</em></p>
<h5 id="reduce阶段传入数据"><a href="#reduce阶段传入数据" class="headerlink" title="reduce阶段传入数据"></a>reduce阶段传入数据</h5><p><em>key中两个人的顺序不同，记为同一个关系</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tom_cat:（0,1,0,0,0）&gt;,&lt;tom_hadoop:(1,1,1)&gt;,&lt;tom_hive:(1,1,1,1,1,1)&gt;,&lt;tom_world:(1,1,1,1,1,1)&gt;，</span><br><span class="line">&lt;hadoop_world:(1,1,1,1)&gt;,&lt;hadoop_hello:(0,1,1)&gt;</span><br></pre></td></tr></table></figure>

<h5 id="reduce阶段传出数据"><a href="#reduce阶段传出数据" class="headerlink" title="reduce阶段传出数据"></a>reduce阶段传出数据</h5><p><em>传出间接关系拥有的共同好友</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat_hadoop	2</span><br><span class="line">cat_hello	2</span><br><span class="line">cat_mr	1</span><br><span class="line">cat_world	1</span><br><span class="line">hadoop_hello	3</span><br><span class="line">hadoop_mr	1</span><br><span class="line">hive_tom	3</span><br><span class="line">mr_tom	1</span><br><span class="line">mr_world	2</span><br><span class="line">tom_world	2</span><br></pre></td></tr></table></figure>

<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><h6 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	Text key2 = <span class="keyword">new</span> Text();</span><br><span class="line">	IntWritable value2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span>	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">		String data = value.toString();</span><br><span class="line">		String list[] = data.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; list.length-<span class="number">1</span>; m++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> n = m + <span class="number">1</span>; n &lt; list.length; n++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(m == <span class="number">0</span>) &#123;</span><br><span class="line">					String outcome = linkStr(list[<span class="number">0</span>], list[n]);</span><br><span class="line">					key2.set(outcome);</span><br><span class="line">					value2.set(<span class="number">0</span>);</span><br><span class="line">					context.write(key2, value2);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					String outcome = linkStr(list[m], list[n]);</span><br><span class="line">					key2.set(outcome);</span><br><span class="line">					value2.set(<span class="number">1</span>);</span><br><span class="line">					context.write(key2, value2);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">linkStr</span><span class="params">(String a1, String a2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a1.compareTo(a2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> a1+<span class="string">"_"</span>+a2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a2+<span class="string">"_"</span>+a1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable v4 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k3, Iterable&lt;IntWritable&gt; v3, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(IntWritable value:v3) &#123;</span><br><span class="line">			<span class="keyword">if</span>(value.get() == <span class="number">1</span>)&#123;</span><br><span class="line">				total += <span class="number">1</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				flag = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			v4.set(total);</span><br><span class="line">			context.write(k3, v4);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountMain;</span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountMapper;</span><br><span class="line"><span class="keyword">import</span> sudo.edu.hadoop.mapreduce.wordCount.wordCountReducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">recommendFriendMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(recommendFriendMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setMapperClass(recommendFriendMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setReducerClass(recommendFriendReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><img src="https://s1.ax1x.com/2020/06/03/tdPuiF.md.png" alt="tdPuiF.md.png" border="0"></p>
<h4 id="对XX-XX后续处理"><a href="#对XX-XX后续处理" class="headerlink" title="对XX_XX后续处理"></a>对XX_XX后续处理</h4><p><em>不需要reduce阶段；对前阶段得到的数据xx_xx进行处理</em></p>
<h5 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RecommentResInfo-序列化，排序，人物类"><a href="#RecommentResInfo-序列化，排序，人物类" class="headerlink" title="RecommentResInfo(序列化，排序，人物类)"></a>RecommentResInfo(序列化，排序，人物类)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.recommendFriend2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">RecommentResInfo</span>, <span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">	RecommentResInfo keySend = <span class="keyword">new</span> RecommentResInfo();</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable k1, Text v1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// 数据</span></span><br><span class="line">		<span class="comment">//xx_xx 5</span></span><br><span class="line">		String line = v1.toString();</span><br><span class="line">		String words[] = line.split(<span class="string">"\t"</span>);</span><br><span class="line">		String personStr = words[<span class="number">0</span>];</span><br><span class="line">		String[] ps = personStr.split(<span class="string">"_"</span>);</span><br><span class="line">		String p1Str = ps[<span class="number">0</span>];</span><br><span class="line">		String p2Str = ps[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> comNum = Integer.parseInt(words[<span class="number">1</span>]);</span><br><span class="line">		keySend.setName(p1Str);</span><br><span class="line">		keySend.setRecommentName(p2Str);</span><br><span class="line">		keySend.setCommonNum(comNum);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">		keySend.setName(p2Str);</span><br><span class="line">		keySend.setRecommentName(p1Str);</span><br><span class="line">		context.write(keySend, NullWritable.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p><a href="https://imgchr.com/i/tdPKG4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/06/03/tdPKG4.png" alt="tdPKG4.png" border="0"></a></p>
<hr>
<blockquote>
<p>每个人心中都有一团火，不过路过的人只看到了烟。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>好友推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第五章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章-运输层"></a>第五章-运输层</h2><p><em>网络层是为主机之间提供逻辑通信，<br>运输层为应用进程之间提供端到端的逻辑通信</em></p>
<h3 id="运输层的作用"><a href="#运输层的作用" class="headerlink" title="运输层的作用"></a>运输层的作用</h3><p><em>运输层为应用进程之间提供端到端的逻辑通信</em></p>
<p><em>在一台主机中经常有多个应用进程同时分别和另一台主机中的多个应用进程通信。<br>这表明运输层有一个很重要的<strong>功能——复用</strong> (multiplexing)和分用</em></p>
<p><a href="https://imgchr.com/i/tp8cdg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tp8cdg.md.png" alt="tp8cdg.png" border="0"></a></p>
<h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3><p><em>运行在计算机中的进程是用进程<strong>标识符</strong>来标志的</em></p>
<p><em>但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符</em></p>
<p><em>必须用统一的方法对 TCP/IP 体系的应用进程进行标志</em></p>
<p><em>解决这个问题的方法就是在运输层使用<strong>协议端口号</strong> (protocol port number)，或通常简称为<strong>端口</strong> (port)</em></p>
<h4 id="软件端口与硬件端口"><a href="#软件端口与硬件端口" class="headerlink" title="软件端口与硬件端口"></a>软件端口与硬件端口</h4><p><em>在协议栈层间的抽象的协议端口是*</em>软件端口<strong>。<br>路由器或交换机上的端口是</strong>硬件端口***</p>
<h4 id="TCP-IP-运输层端口"><a href="#TCP-IP-运输层端口" class="headerlink" title="TCP/IP 运输层端口"></a>TCP/IP 运输层端口</h4><p><em>端口用一个 16 位端口号进行标志</em></p>
<p><em>端口号只具有<strong>本地意义</strong>，即端口号只是为了标志<strong>本计算机应用层中的各进程</strong>。<br>在互联网中，不同计算机的相同端口号是没有联系的</em></p>
<h4 id="两大类端口"><a href="#两大类端口" class="headerlink" title="两大类端口"></a>两大类端口</h4><h5 id="服务器端使用的端口号"><a href="#服务器端使用的端口号" class="headerlink" title="服务器端使用的端口号"></a>服务器端使用的端口号</h5><p>熟知端口，数值一般为 0<del>1023。<br>登记端口号，数值为 1024</del>49151</p>
<h5 id="客户端使用的端口号"><a href="#客户端使用的端口号" class="headerlink" title="客户端使用的端口号"></a>客户端使用的端口号</h5><p><em>又称为短暂端口号，数值为 49152~65535，留给客户进程选择暂时使用</em></p>
<h3 id="用户数据报协议-UDP-User-Datagram-Protocol"><a href="#用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="用户数据报协议 UDP (User Datagram Protocol)"></a>用户数据报协议 UDP (User Datagram Protocol)</h3><p><em>面向连接的 TCP 协议</em></p>
<p><em>采用无连接的 UDP 协议</em></p>
<p><em>传送的数据单位协议是 *</em>UDP 报文<strong>或</strong>用户数据报***</p>
<p><strong>UDP实时性更好</strong></p>
<h4 id="UDP-的主要特点"><a href="#UDP-的主要特点" class="headerlink" title="UDP 的主要特点"></a>UDP 的主要特点</h4><p>(1) UDP 是无连接的</p>
<p>(2) UDP 使用尽最大努力交付</p>
<p>(3) UDP 是面向报文的(UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。)</p>
<p>(4) UDP 没有拥塞控制</p>
<p>(5) UDP 支持一对一、一对多、多对一和多对多</p>
<p>的交互通信。<br>(6) UDP 的首部开销小</p>
<h4 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h4><p><em>用户数据报=首部+数据部分</em></p>
<p><em>首部<strong>8个字节</strong>：源端口，目的端口，长度，检验和</em></p>
<p><a href="https://imgchr.com/i/YWYcjg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYcjg.md.png" alt="YWYcjg.md.png" border="0"></a></p>
<h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><img src="https://s1.ax1x.com/2020/05/18/YWY2uQ.png" alt="YWY2uQ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/18/YWasaj.jpg" alt="YWasaj.jpg" border="0">

<p><a href="https://imgchr.com/i/YWYRBj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWYRBj.png" alt="YWYRBj.png" border="0"></a></p>
<p><em>目的端口小的是服务器，大的是客户机</em></p>
<img src="https://s1.ax1x.com/2020/05/25/tp83M6.md.png" alt="tp83M6.png" border="0">

<h3 id="传输控制协议-TCP-Transmission-Control-Protocol-概述"><a href="#传输控制协议-TCP-Transmission-Control-Protocol-概述" class="headerlink" title="传输控制协议 TCP (Transmission Control Protocol)概述"></a>传输控制协议 TCP (Transmission Control Protocol)概述</h3><p><em>传送的数据单位协议是 TCP 报文段 (segment)</em></p>
<h4 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h4><p><em>TCP 是*</em>面向连接的<strong>运输层协议。<br>每一条 TCP 连接</strong>只能有两个端点** (endpoint)，每一条 TCP 连接<strong>只能是点对点</strong>的（一对一）。<br>TCP 提供<strong>可靠交付</strong>的服务。<br>TCP 提供<strong>全双工</strong>通信。<br><strong>面向字节流：*</strong></p>
<p><em>TCP 中的“流”(stream)指的是流入或流出进程的字节序列</em></p>
<p><em>“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流</em></p>
<h5 id="TCP-面向流的概念"><a href="#TCP-面向流的概念" class="headerlink" title="TCP 面向流的概念"></a>TCP 面向流的概念</h5><p><em>不保证发送方和接收方数据块具有对应大小的关系，但字节流完全一样</em></p>
<p><em>TCP 不关心应用进程一次把多长的报文发送到 TCP 缓存。<br>TCP 对连续的字节流进行分段，形成 TCP 报文段</em></p>
<h4 id="注-意"><a href="#注-意" class="headerlink" title="注 意"></a>注 意</h4><p><em>TCP 连接是一条虚连接</em></p>
<p><em>TCP 对应用进程一次把多长的报文发送到TCP 的缓存中是不关心的</em></p>
<p><em>TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）</em></p>
<p><em>TCP 可把太长的数据块划分短一些再传送</em></p>
<p><em>TCP 也可等待积累有足够多的字节后再构成报文段发送出去</em></p>
<h4 id="TCP-的连接"><a href="#TCP-的连接" class="headerlink" title="TCP 的连接"></a>TCP 的连接</h4><p><em>TCP 连接的端点叫做套接字 (socket) 或插口</em></p>
<p><em>端口号拼接到 (contatenated with) IP 地址即构成了套接字</em></p>
<h3 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h3><p><em>理想的传输条件有以下两个特点：<br>(1) 传输信道不产生差错。<br>(2) 不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据</em></p>
<p><strong>然而实际的网络都不具备以上两个理想条件</strong></p>
<h5 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h5><p><em>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组</em></p>
<p><em>全双工通信的双方既是发送方也是接收方</em></p>
<h6 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h6><img src="https://s1.ax1x.com/2020/05/25/t98ruV.png" alt="t98ruV.png" border="0">

<h6 id="出现差错"><a href="#出现差错" class="headerlink" title="出现差错"></a>出现差错</h6><p><em>当以某一方为接收方时，可能出现：*</em>收到，检查异常，丢弃<strong>；</strong>传输过程丢失<strong>。此时接收方不会做出相应，为了确保能够正确接收，使用</strong>超时重传***</p>
<h6 id="确认丢失和确认迟到"><a href="#确认丢失和确认迟到" class="headerlink" title="确认丢失和确认迟到"></a>确认丢失和确认迟到</h6><p><strong>确认丢失</strong></p>
<p><strong>确认迟到</strong></p>
<p><em>接收方发送的确认，接收方在规定时间没有收到</em></p>
<p><em>处理方法是：A 会收到重复的确认。对重复的确认的处理很简单：收下后就丢弃。<br>B 仍然会收到重复的 M1，并且同样要丢弃重复的 M1，并重传确认分组</em></p>
<h5 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h5><p><em>连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置</em></p>
<h5 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h5><p><em>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。*</em>因此 TCP 首部的最小长度是 20 字节。***</p>
<img src="https://s1.ax1x.com/2020/05/25/t9YQ39.png" alt="t9YQ39.png" border="0">

<p><strong>序号字段</strong>——<em>占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号</em></p>
<h6 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h6><p><strong>运输连接有三个阶段</strong>：<em>连接建立，数据传送，连接释放</em></p>
<p><em>TCP连接建立</em>：三报文握手机制</p>
<p><em>TCP连接释放：</em> 四报文握手机制</p>
<p><a href="https://imgchr.com/i/t9QSzV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9QSzV.md.jpg" alt="t9QSzV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MzR0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MzR0.md.jpg" alt="t9MzR0.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/t9MxGq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/t9MxGq.md.jpg" alt="t9MxGq.md.jpg" border="0"></a></p>
<h3 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h3><h4 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h4><h4 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h4><h3 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h3><p><em>超时：初始门限减半，拥塞窗口变为1；3个ACK：拥塞窗口减半</em></p>
<p><em>轮次就是指发送一个数据出去，收到确认回来</em></p>
<p><em>有多少个拥塞窗口，就可以发送多少个报文段</em></p>
<p><em>指数增长时，超过门限，可以等于</em></p>
<p><a href="https://imgchr.com/i/tiTrxU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTrxU.md.png" alt="tiTrxU.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTD2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTD2T.md.png" alt="tiTD2T.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiTBGV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiTBGV.md.png" alt="tiTBGV.md.png" border="0"></a><br><a href="https://imgchr.com/i/tiT0P0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/26/tiT0P0.md.png" alt="tiT0P0.md.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>线性代数-第一章</title>
    <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h2><h3 id="二阶与三阶行列式"><a href="#二阶与三阶行列式" class="headerlink" title="二阶与三阶行列式"></a>二阶与三阶行列式</h3><p><a href="https://imgchr.com/i/YyoAun" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoAun.png" alt="YyoAun.png" border="0"></a><br><a href="https://imgchr.com/i/YyoEBq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YyoEBq.md.png" alt="YyoEBq.md.png" border="0"></a></p>
<h3 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h3><p>*<em>性质 1 行列式与它的转置行列式相等.  *</em></p>
<p>*<em>性质 2 对换行列式的两行（列） ， 行列式变号  *</em></p>
<p><strong>推论 如果行列式两行(列)完全相同，则此行列式为0</strong></p>
<p><strong>性质3 行列式的某一行(列)中所有的元素都乘以同一数k,等于k乘以这个行列式</strong></p>
<p> <strong>推论 行列式中某一行(列)的所有元素的公因子可以提到行列式记号的外面</strong></p>
<p><strong>性质4 行列式中如果有两行（列） 元素成比例， 则此行列式等于零</strong></p>
<p><strong>性质5 若行列式的某一行（列） 的元素都是两数之和， 例如第 i 行的元素都是两数之和</strong></p>
<p><strong>性质 6 把行列式的某一行（列） 的各元素乘同一数然后加到另一行（列） 对<br>应的元素上去， 行列式不变</strong></p>
<h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><p><em>对于 n 个不同的元素， 先规定各元素之间有一个标准次序（例如 n 个不同的<br>自然数， 可规定由小到大为标准次序）， 于是在这 n 个元素的任一排列中， 当某一<br>对元素的先后次序与标准次序不同时， 就说它构成 1 个逆序.一个排列中所有逆<br>序的总数叫做这个排列的逆序数</em></p>
<h3 id="上三角法求矩阵"><a href="#上三角法求矩阵" class="headerlink" title="上三角法求矩阵"></a>上三角法求矩阵</h3><p><em>等于主对角线的乘积</em></p>
<h3 id="行列式按行-列-展开"><a href="#行列式按行-列-展开" class="headerlink" title="行列式按行(列)展开"></a>行列式按行(列)展开</h3><p><em>行列式等于它的任一行(列)的各元素与其对应的代数余子式乘积之和</em></p>
<p><em>行列式某一行（列） 的元素与另一行（列） 的对应元素的代数余子式<br>乘积之和等于零</em></p>
<img src="https://s1.ax1x.com/2020/05/16/Y6bih6.png" alt="Y6bih6.png" border="0">

<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><em>当常数项 b1， b2， …， bm 不全为零时， 线性方程组（1） 叫做<strong>n元非齐次线性方程组</strong>.</em></p>
<p><strong>n 元齐次线性方程组</strong></p>
<p><em>n 元齐次线性方程组一定有零解，可能有非零解</em></p>
<p><em>元素是实数的矩阵称为实矩阵， 元素是复数的矩阵称为复矩阵</em></p>
<p><em>只有一行的矩阵A =（a1，a2… an）称为<strong>行矩阵</strong>， 又称<strong>行向量</strong>.</em></p>
<p><em>只有一列的矩阵称为<strong>列矩阵</strong>， 又称<strong>列向量*</strong>.</em></p>
<p>  A 称为<strong>系数矩阵</strong>， x 称为<strong>未知数矩阵</strong>， b 称为<strong>常数项矩阵</strong>， B 称为<strong>增广矩阵</strong></p>
<p><strong>对角矩阵</strong>， <em>简称对角阵.对角阵也记作:</em><br>$$<br>A = diag（λ1， λ2， …， λn）<br>$$<br>   <em>位矩阵， 简称单位阵</em></p>
<h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h4><p>（i） A +B = B +A；<br>（ii） （A +B） + C = A +（B +C） </p>
<h4 id="数与矩阵相乘"><a href="#数与矩阵相乘" class="headerlink" title="数与矩阵相乘"></a>数与矩阵相乘</h4><p><a href="https://imgchr.com/i/YcBNOe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/16/YcBNOe.png" alt="YcBNOe.png" border="0"></a></p>
<p>（i） （λμ)A =λ（μA） ；<br>（ii） （λ +μ） A =λA +μA；<br>（iii） λ（A +B） =λA +λ B.  </p>
<h4 id="矩阵乘矩阵"><a href="#矩阵乘矩阵" class="headerlink" title="矩阵乘矩阵"></a>矩阵乘矩阵</h4><p><em>定义4 设A=（ai）j 是一个m×s矩阵， B=（bi）j 是一个s×n矩阵， 那么规定矩<br>阵 A 与矩阵 B 的乘积是一个 m×n 矩阵 C =（cij）</em></p>
<p><strong>必须注意： 只有当第一个矩阵（左矩阵） 的列数等于第二个矩阵（右矩阵） 的<br>行数时， 两个矩阵才能相乘</strong></p>
<p>*<em>总之， 矩阵的乘法不满足交换律， 即在一般情形下， A B≠ BA *</em><br>$$<br>（i） （A B） C = A（B C） ；<br>$$</p>
<p>$$<br>（ii） λ（A B） =（λA） B = A（λB） （其中λ 为数） ；<br>$$</p>
<p>$$<br>（iii） A（B + C） = A B +A C， （B + C） A = BA + CA.<br>$$</p>
<p>$$<br>对于单位矩阵 E， 容易验证E m A m × n = A m × n， A m × n E n = A m × n，或简写成E A = A E = A .<br>$$</p>
<h4 id="矩阵的幂"><a href="#矩阵的幂" class="headerlink" title="矩阵的幂"></a>矩阵的幂</h4><p>$$<br>A kA l = A k+l， （A k） l = A kl<br>$$</p>
<p>$$<br>又因矩阵乘法一般不满足交换律， 所以对于两个 n 阶矩阵 A与 B， 一般说来（A B） k≠ A k B k， 只有当 A 与 B 可交换时， 才有（A B） k = A k B k<br>$$</p>
<p><em>例如（A +B） 2 = A 2 +2A B + B 2、 （A - B） （A + B） = A 2 - B 2 等公式， 也只有当 A与 B 可交换时才成立</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>sql语句异常</title>
    <url>/sql%E8%AF%AD%E5%8F%A5%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="CREATE-VIEW-不是在查询语句第一行"><a href="#CREATE-VIEW-不是在查询语句第一行" class="headerlink" title="CREATE VIEW 不是在查询语句第一行"></a>CREATE VIEW 不是在查询语句第一行</h2><p><em>前面加一个go</em></p>
<h2 id="CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用"><a href="#CASCADE-RESTRICT-在sql-server中只能用于定义时，删除时不能用" class="headerlink" title="CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用"></a>CASCADE/RESTRICT 在sql server中只能用于定义时，删除时不能用</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-空值</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E7%A9%BA%E5%80%BC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p><em>所谓空值就是<strong>不知道</strong>或 <strong>不存在</strong>或 <strong>无意义</strong>的值。</em></p>
<p>SQ L语言中允许某些元组的某些属性在一定情况下取空值。 一般有以下几种情况：<br>•该属性应该有一个值，但目前不知道它的具体值。例如，某学生的年龄属性，因为<br>学生登记表漏填了，不知道该学生年龄，因此取空值。<br>•该属性不应该有值。例如，缺考学生的成绩为空，因为他没有参加考试。<br>. 由于某种原因不便于填写。例如， 一个人的电话号码不想让大家知道，则取空值。  </p>
<h3 id="空值的产生"><a href="#空值的产生" class="headerlink" title="空值的产生"></a>空值的产生</h3><h4 id="插入时默认空值"><a href="#插入时默认空值" class="headerlink" title="插入时默认空值"></a>插入时默认空值</h4><h4 id="显示写入空值"><a href="#显示写入空值" class="headerlink" title="显示写入空值"></a>显示写入空值</h4><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><h4 id="空值的关系运算"><a href="#空值的关系运算" class="headerlink" title="空值的关系运算"></a>空值的关系运算</h4><h3 id="空值判断"><a href="#空值判断" class="headerlink" title="空值判断"></a>空值判断</h3><p><strong>IS NULL OR IS NOT NULL</strong></p>
<h3 id="空值的约束"><a href="#空值的约束" class="headerlink" title="空值的约束"></a>空值的约束</h3><p><em>有not null ，加了UNIQUE限制的属性</em></p>
<h3 id="空值的算数运算，比较运算和逻辑运算"><a href="#空值的算数运算，比较运算和逻辑运算" class="headerlink" title="空值的算数运算，比较运算和逻辑运算"></a>空值的算数运算，比较运算和逻辑运算</h3><p><em>空值与空值运算为空值；空值与另一个值为<strong>UNKNOWN</strong>.</em></p>
<p><em>有了<strong>UNKNOWN</strong>后常见的二值逻辑就由TRUE,FALSE变成了三值</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-视图</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E8%A7%86%E5%9B%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><em>视图是从<strong>一个或几个基本表</strong>（或视图）导出的表</em></p>
<p><em>它与基本表不同，是一个<strong>虚表</strong>.</em></p>
<p><em>数据库中只<strong>*存放视图的定义</strong>，而<strong>不存放视图对应的数据</strong>，这些数据仍存放在原来的基本表中。所以一旦基本表中的数据发生变化，从视图中查询出的数据也就随之改变了</em></p>
<p><em>视图就像一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化</em></p>
<p><em>视图一经定义，就可以和基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但对视图的更新（增 、删 、改）操作则有一定的限制</em></p>
<p><em>如果已有视图建立在基本表上，这时修改基本表属性，可能导致视图不能运作；可以先删除视图，建立新视图</em></p>
<h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;视图名&gt;[ （&lt;列名&gt; ［,&lt;列名&gt;］ …）]</span><br><span class="line"><span class="keyword">AS</span> &lt;子查询&gt;</span><br><span class="line">［<span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>］;</span><br></pre></td></tr></table></figure>

<p><em>子查询<strong>可以是任意的SELECT语句</strong>，是否可以含有ORDER B Y 子句和 DISTINCT<br>短语，则取决于具体系统的实现(<strong>通常不能用ODER BY 和 DISTINCT</strong>)</em></p>
<p><strong>WITH CHECK OPTION</strong>表<em>示对视图进行 UPDATE、 INSERT和 DELETE操作时要<br>保证更新、插入或删除的行<strong>满足视图定义中的谓词条件（即子查询中的条件表达式</strong>）</em></p>
<p><em>组成视图的属性列名或者全部省略或者全部指定，没有第三种选择</em></p>
<p>但在下列三种情况下<strong>必须明确指定组成视图的所有列名</strong>：<br>（1） 某个目标列不是单纯的属性名，而是聚集函数或列表达式<br>（2 ） 多表连接时选出了几个同名列作为视图的字段<br>（3 ） 需要在视图中为某个列启用新的更合适的名字  </p>
<h4 id="建立在一个基本表"><a href="#建立在一个基本表" class="headerlink" title="建立在一个基本表"></a>建立在一个基本表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="comment">/*由于在定义IS_Student视图时加上了 WITH CHECK OPT1ON子句，以后对该视图进</span></span><br><span class="line"><span class="comment">行插入、修改和删除操作时，关系数据库管理系统会自动加上Sdept='IS'的条件。*/</span></span><br></pre></td></tr></table></figure>

<p><em>关系数据库管理系统执行CREATE VIEW 语句的结果只是把视图的定义存入<strong>数据字<br>典</strong>，<strong>并不执行其中的SELECT语句。只是在</strong>对视图查询时，才按视图的定义从基本表中将数据査出</em>  </p>
<p><em>若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但<br>保留了主码，则称这类视图为<strong>行列子集视图</strong>。 IS_Student视图就是一个行列子集视图</em></p>
<h4 id="建立在多个基本表"><a href="#建立在多个基本表" class="headerlink" title="建立在多个基本表"></a>建立在多个基本表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Sl(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">Student.Sno=SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>

<p><em>由于视图IS_S1的属性列中包含了 Student表 与 SC 表的同名列Sno ,所以必须在视图名后面明确说明视图的各个属性列名。</em></p>
<p><em>由基本数据经过各种计算派生出的数据一般是不存储的。这些派生属性由于在基本表中并不实际存在，也称它们为虚拟列。带虚拟列的视图也称为<strong>带表达式的视图</strong>。</em>    </p>
<h4 id="建立在一个视图上"><a href="#建立在一个视图上" class="headerlink" title="建立在一个视图上"></a>建立在一个视图上</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Grade&gt;=<span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<h4 id="建立在多个视图上"><a href="#建立在多个视图上" class="headerlink" title="建立在多个视图上"></a>建立在多个视图上</h4><h4 id="分组视图"><a href="#分组视图" class="headerlink" title="分组视图"></a>分组视图</h4><p><em>GROUP BY 子句的查询来定义视图，这种视图称为分组视图</em></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno,Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*由于AS子句中SELECT语句的目标列平均成绩是通过作用聚集函数得到的，所CREATE VIEW 中必须明确定义组成S_G 视图的各个属性列名。 S_G 是一个分组视图*/</span></span><br></pre></td></tr></table></figure>

<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;视图名&gt; ［<span class="keyword">CASCADE</span>］ ;</span><br></pre></td></tr></table></figure>

<p><em>视图删除后<strong>视图的定义将从数据字典中删除</strong>。如果该视图上还导出了其他视图，则使用 <strong>CASCADE级联</strong>删除语句把该视图和由它导出的所有视图一起删除</em></p>
<p> <em>基本表删除后，由该基本表导出的所有视图均无法使用了，但是视图的定义没有从<br>字典中清除。删除这些视图定义需要显式地使用DROP VIEW 语句</em></p>
<h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p><em>与查询基本表差不多</em></p>
<p><em>关系数据库管理系统执行对视图的查询时，<strong>首先</strong>进行有效性检查，检查查询中涉及的表 、视图等是否存在。<strong>如果存在，则</strong>从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，<strong>转换成等价的对基本表的查询</strong>，然后再执行修正了的查询。这一转换过程称为<strong>视图消解</strong>(view resolution)</em> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="number">20</span>;</span><br><span class="line"><span class="comment">/*本例转换后的查询语句为*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'lS'</span> <span class="keyword">AND</span> Sage&lt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><strong>而有时候可能出现转换错误</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg&gt;=<span class="number">90</span>;</span><br><span class="line"><span class="comment">/*将本例中的查询语句与定义S_G 视图的子查询结合，形成下列查询语句：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">AVG</span>(Grade)&gt;=<span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>

<p><em>WHERE子句中是不能用聚集函数作为条件表达式的，因此执行此修正后的查询<br>将会出现语法错误</em></p>
<p><em>目前多数关系数据库系统对<strong>行列子集视图</strong>的查询均能进行正确转换。但对非行列<br>子 集 视 图 的 查 询  就 不 一 定 能 做 转 换 了 ，因此这类查询应该直接对<strong>基本表</strong>进行 。</em>  </p>
<p><em>定义视图并查询视图与基于派生表的查询是有区别的。视图一旦定义，其定义将永<br>久保存在数据字典中，之后的所有查询都可以直接引用该视图。而派生表只是在语句执行时临时定义，语句执行后该定义即被删除</em>  </p>
<h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span>;</span><br><span class="line">转换后的更新语句为</span><br><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sname=<span class="string">'刘辰'</span>，</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215122'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> IS_Student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'201215129'</span>, <span class="string">'丁赵新'</span>,<span class="number">20</span>);</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Student(Sno,Sname,Sage,Sdept)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'2O1215129'</span>,<span class="string">'赵新'</span>,<span class="number">20</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span>；</span><br><span class="line">转换为对基本表的更新：</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215129'</span> <span class="keyword">AND</span> Sdept=<span class="string">'IS'</span>;</span><br></pre></td></tr></table></figure>

<p><em>在关系数据库中，<strong>并不是所有的视图都是可更新的</strong>，因为有些视图的更新不能唯一地有意义地转换成对相应基本表的更新</em></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G（Sno,Gavg）</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="keyword">AVG</span>（Grade）</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*如果想把视图S_G 中学号为“ 201215121 ” 的学生的平均成绩改成9 0 分 ， SQL语句如下：*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> S_G</span><br><span class="line"><span class="keyword">SET</span> Gavg=<span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'20121512'</span>；</span><br></pre></td></tr></table></figure>

<p><em>但这个对视图的更新是无法转换成对基本表S C 的更新的，因为系统无法修改各科成绩，以使平均成绩成为90。所 以 S_G 视图是不可更新的。</em></p>
<p><em>一般地，行列子集视图是可更新的</em>  </p>
<h4 id="受限更新"><a href="#受限更新" class="headerlink" title="受限更新"></a>受限更新</h4><p><strong>例如， DB2规定:</strong><br>（1 ） 若视图是由两个以上基本表导出的，则此视图不允许更新。<br>（2 ） 若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和 UPDATE操作，但允许执行DELETE操作。<br>（3 ） 若视图的字段来自<strong>聚集函数</strong>，则此视图不允许更新。<br>（4 ） 若视图定义中含有<strong>GROUP BY</strong>子句，则此视图不允许更新。<br>（5） 若视图定义中含有<strong>DISTINCT</strong>短语，则此视图不允许更新。<br>（6 ）若视图定义中<strong>有嵌套查询，并且内层查询的FROM 子句</strong>中涉及的表也是导出该视图的基本表，则此视图不允许更新。  </p>
<h3 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h3><ul>
<li>视图能够简化用户的操作  </li>
<li>视图使用户能以多种角度看待同一数据  </li>
<li>视图对重构数据库提供了一定程度的逻辑独立性  </li>
<li>视图能够对机密数据提供安全保护  </li>
<li>适当利用视图可以更清晰地表达查询  </li>
</ul>
<h3 id="视图查看"><a href="#视图查看" class="headerlink" title="视图查看"></a>视图查看</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_helptext 视图名</span><br></pre></td></tr></table></figure>

<h3 id="视图加密"><a href="#视图加密" class="headerlink" title="视图加密"></a>视图加密</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">.......</span><br><span class="line"><span class="keyword">WITH</span> ENCRYPTION <span class="comment">-- 加密</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sp_helptext 视图名 报错</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>即使慢，驰而不息，纵会落后，纵会失败，但一定可以达到他所向的目标。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第六章Hbase, Hive, Pig</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%85%AD%E7%AB%A0Hbase,%20Hive,%20Pig.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Hbase-Hive-Pig"><a href="#Hbase-Hive-Pig" class="headerlink" title="Hbase, Hive, Pig"></a>Hbase, Hive, Pig</h1><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p><em>采用列式存储</em></p>
<h3 id="Hbase简介"><a href="#Hbase简介" class="headerlink" title="Hbase简介"></a>Hbase简介</h3><p><em>HBase是一个分布式的、面向列的开源数据库，该技术来源于Google论文。HBase在Hadoop之上提供了类似于Bigtable的能力。</em></p>
<h4 id="HBase的特性"><a href="#HBase的特性" class="headerlink" title="HBase的特性"></a>HBase的特性</h4><p><strong>伸缩性</strong>：表可以很“高”（数十亿个数据行），可以很“宽”（数百万个列）。<br><strong>自动分区</strong>：当表增长时，表会自动分裂成Region，并分布到可用节点上。<br><strong>线性扩展和对于新节点的自动处理</strong>：增加节点，指它指向RegionServer，Region自动负载均衡。<br><strong>普通商用硬件支持</strong><br><strong>容错</strong>：HBase在Hadoop的文件系统之上，利用了Hadoop的文件系统（HDFS）提供的容错能力。<br><strong>检索性能</strong>：HBase是一个数据模型，类似于谷歌的大表设计，可以提供快速随机访问海量结构化数据。</p>
<h4 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h4><h5 id="关系型数据库和Hbase对比"><a href="#关系型数据库和Hbase对比" class="headerlink" title="关系型数据库和Hbase对比"></a>关系型数据库和Hbase对比</h5><p><a href="https://imgchr.com/i/YJQCZQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQCZQ.md.png" alt="YJQCZQ.png" border="0"></a></p>
<h5 id="列族存储的概念"><a href="#列族存储的概念" class="headerlink" title="列族存储的概念"></a>列族存储的概念</h5><p><a href="https://imgchr.com/i/YJQReg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YJQReg.md.png" alt="YJQReg.png" border="0"></a></p>
<h5 id="HBase的数据模型"><a href="#HBase的数据模型" class="headerlink" title="HBase的数据模型"></a>HBase的数据模型</h5><p><a href="https://imgchr.com/i/Yf6q8e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf6q8e.md.png" alt="Yf6q8e.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/11/YJ3xYj.png" alt="YJ3xYj.png" border="0">

<h6 id="列数据属性"><a href="#列数据属性" class="headerlink" title="列数据属性"></a>列数据属性</h6><img src="https://s1.ax1x.com/2020/05/11/YJ8Yhd.png" alt="YJ8Yhd.png" border="0">



<h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p><em>Hbase的Table中的所有行都按照row key的字典序排列</em></p>
<p><em>Table 在行的方向上分割为多个Region。Region是HBase中分布式存储和负载均衡的最小单元</em></p>
<p><em>不同Region分布到不同RegionServer上</em></p>
<h4 id="Region分裂-Split"><a href="#Region分裂-Split" class="headerlink" title="Region分裂(Split)"></a>Region分裂(Split)</h4><p><a href="https://imgchr.com/i/YfgIfO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfgIfO.png" alt="YfgIfO.png" border="0"></a></p>
<h3 id="行式存储和列式存储"><a href="#行式存储和列式存储" class="headerlink" title="行式存储和列式存储"></a>行式存储和列式存储</h3><img src="https://s1.ax1x.com/2020/05/11/YJmulD.png" alt="YJmulD.png" border="0">

<h4 id="OLTP-amp-OLAP"><a href="#OLTP-amp-OLAP" class="headerlink" title="OLTP &amp; OLAP"></a>OLTP &amp; OLAP</h4><h5 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h5><p><em>On-Line Transaction Processing（联机事务处理过程）。<br>也称为面向交易的处理过程，其基本特征是前台接收的用户数据可以立即传送到计算中心进行处理，并在很短的时间内给出处理结果，是对用户操作快速响应的方式之一。</em></p>
<p><em>典型案例：银行转账</em></p>
<p>（1）对于单列，获取频率较高，就使用列式存储。<br>（2）如果针对多列查询，使用并行处理查询效率也是很高，可采用列式存储。<br>（3）对于大数据的环境，利于数据压缩和线性扩展，也可以采用列式存储。<br>（4）事务使用率不高，数据量非常大。<br>（5）对于更新某些行的频率不高，也可以选择列式存储</p>
<h5 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h5><p><em>On-Line Analytic Processing（联机分析处理过程）。<br>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</em></p>
<p><em>典型案例：商品推荐</em></p>
<p>（1）关系之间的解决方案，表与表之关联大，可以采用行式存储。主键–外键<br>（2）强事务特性，如消费、资金的业务。<br>（3）如数据小于千万级，可考虑行式存储</p>
<p><strong>OLTP是用于事务和查询处理<br>OLAP用于数据分析</strong></p>
<h2 id="PIG"><a href="#PIG" class="headerlink" title="PIG"></a>PIG</h2><h2 id="HIVE-重点"><a href="#HIVE-重点" class="headerlink" title="HIVE(重点)"></a>HIVE(重点)</h2><h3 id="Hive简介"><a href="#Hive简介" class="headerlink" title="Hive简介"></a>Hive简介</h3><p><em>Hive是基于Hadoop的一个<strong>数据仓库工具</strong>，可以将<strong>结构化的</strong>数据文件映射为一张<strong>数据库表</strong>，并提供简单的<strong>sql</strong>查询功能，可以将sql语句转换为MapReduce任务进行运行</em></p>
<p><em>Hive是一个翻译器：SQL —&gt; Hive引擎  —&gt; MapReduce程序</em></p>
<p><em>Hive是构建在HDFS上的一个数据仓库（Data Warehouse）</em></p>
<h4 id="为什么要使用Hive？"><a href="#为什么要使用Hive？" class="headerlink" title="为什么要使用Hive？"></a>为什么要使用Hive？</h4><p>直接使用 MapReduce 所面临的问题：<br>　　1、人员学习成本太高<br>　　2、项目周期要求太短<br>　　3、MapReduce实现复杂查询逻辑开发难度太大<br>为什么要使用 Hive：<br>　    1、更友好的接口：操作接口采用类 SQL 的语法，提供快速开发的能力。<br>         2、更低的学习成本：避免了写 MapReduce，减少开发人员的学习成本，使<br>                DBA、运维人员可以通过SQL来实现操作大数据。<br>         3、更好的扩展性：可自由扩展集群规模而无需重启服务，还支持用户自定<br>               义函数。　　　　</p>
<h3 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h3><h4 id="Metastore三种运行模式"><a href="#Metastore三种运行模式" class="headerlink" title="Metastore三种运行模式"></a>Metastore三种运行模式</h4><img src="https://s1.ax1x.com/2020/05/18/Yf53HH.png" alt="Yf53HH.png" border="0">

<h4 id="了解Metastore配置属性"><a href="#了解Metastore配置属性" class="headerlink" title="了解Metastore配置属性"></a>了解Metastore配置属性</h4><img src="https://s1.ax1x.com/2020/05/18/YfIfJI.png" alt="YfIfJI.png" border="0">

<h4 id="安装Hive-1"><a href="#安装Hive-1" class="headerlink" title="安装Hive"></a>安装Hive</h4><img src="https://s1.ax1x.com/2020/05/18/YfoHc6.png" alt="YfoHc6.png" border="0">

<h3 id="Hive的架构与工作原理"><a href="#Hive的架构与工作原理" class="headerlink" title="Hive的架构与工作原理"></a>Hive的架构与工作原理</h3><h4 id="Hive体系结构"><a href="#Hive体系结构" class="headerlink" title="Hive体系结构"></a>Hive体系结构</h4><p><a href="https://imgchr.com/i/YfTbPs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfTbPs.md.png" alt="YfTbPs.png" border="0"></a></p>
<p><em>CLI(终端)：常采用这个</em></p>
<h4 id="Hive工作原理"><a href="#Hive工作原理" class="headerlink" title="Hive工作原理"></a>Hive工作原理</h4><p><a href="https://imgchr.com/i/Yf7rQ0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yf7rQ0.md.png" alt="Yf7rQ0.png" border="0"></a></p>
<h4 id="Hive与传统数据库的比较"><a href="#Hive与传统数据库的比较" class="headerlink" title="Hive与传统数据库的比较"></a>Hive与传统数据库的比较</h4><img src="https://s1.ax1x.com/2020/05/18/YfHiTg.png" alt="YfHiTg.png" border="0">



<h3 id="HiveQL"><a href="#HiveQL" class="headerlink" title="HiveQL"></a>HiveQL</h3><h4 id="Hive支持的数据类型"><a href="#Hive支持的数据类型" class="headerlink" title="Hive支持的数据类型"></a>Hive支持的数据类型</h4><img src="https://s1.ax1x.com/2020/05/18/YfbJUg.md.png" alt="YfbJUg.png" border="0">

<h4 id="建表命令"><a href="#建表命令" class="headerlink" title="建表命令"></a>建表命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名（...）</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/YfL639" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfL639.md.png" alt="YfL639.png" border="0"></a></p>
<h4 id="数据加载命名"><a href="#数据加载命名" class="headerlink" title="数据加载命名"></a>数据加载命名</h4><h5 id="导入HDFS数据"><a href="#导入HDFS数据" class="headerlink" title="导入HDFS数据"></a>导入HDFS数据</h5><p><a href="https://imgchr.com/i/YfXdFU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfXdFU.png" alt="YfXdFU.png" border="0"></a></p>
<p><em>会把hdfs中对应文件移动到hive仓库中</em></p>
<h5 id="导入本地数据"><a href="#导入本地数据" class="headerlink" title="导入本地数据"></a>导入本地数据</h5><img src="https://s1.ax1x.com/2020/05/18/YfXUoT.png" alt="YfXUoT.png" border="0">

<p><em>复制</em></p>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><h5 id="内部表-托管表"><a href="#内部表-托管表" class="headerlink" title="内部表(托管表)"></a>内部表(托管表)</h5><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YfjLuR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfjLuR.md.png" alt="YfjLuR.md.png" border="0"></a></p>
<h6 id="创建内部表"><a href="#创建内部表" class="headerlink" title="创建内部表"></a>创建内部表</h6><img src="https://s1.ax1x.com/2020/05/18/Yfjbv9.md.png" alt="Yfjbv9.md.png" border="0">



<h5 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h5><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/Yfx0fS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yfx0fS.md.png" alt="Yfx0fS.md.png" border="0"></a></p>
<h6 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建外部表</h6><p><a href="https://imgchr.com/i/YfxwY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfxwY8.md.png" alt="YfxwY8.md.png" border="0"></a></p>
<h5 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h5><p><a href="https://imgchr.com/i/YfzCnA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzCnA.md.png" alt="YfzCnA.png" border="0"></a></p>
<h5 id="桶表"><a href="#桶表" class="headerlink" title="桶表"></a>桶表</h5><p><a href="https://imgchr.com/i/YfzQ7q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzQ7q.md.png" alt="YfzQ7q.png" border="0"></a></p>
<h5 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h5><p><a href="https://imgchr.com/i/YfzfHI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YfzfHI.md.png" alt="YfzfHI.png" border="0"></a></p>
<h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><p><a href="https://imgchr.com/i/YhSlKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSlKH.md.png" alt="YhSlKH.md.png" border="0"></a></p>
<h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><p><a href="https://imgchr.com/i/YhSMxe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhSMxe.md.png" alt="YhSMxe.md.png" border="0"></a></p>
<h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h5><h6 id><a href="#" class="headerlink" title></a><a href="https://imgchr.com/i/YhpZLj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpZLj.md.png" alt="YhpZLj.png" border="0"></a></h6><p><a href="https://imgchr.com/i/YhpWkt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YhpWkt.png" alt="YhpWkt.png" border="0"></a></p>
<h6 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h6><p><a href="https://imgchr.com/i/Yh9pX4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9pX4.png" alt="Yh9pX4.png" border="0"></a></p>
<p><strong>Hive不支持数据删除和修改</strong></p>
<h5 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h5><p><a href="https://imgchr.com/i/Yh9BEn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9BEn.md.png" alt="Yh9BEn.md.png" border="0"></a><br><a href="https://imgchr.com/i/Yh9r40" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/Yh9r40.md.png" alt="Yh9r40.md.png" border="0"></a></p>
<h5 id="Hive如何调优"><a href="#Hive如何调优" class="headerlink" title="Hive如何调优"></a>Hive如何调优</h5><p><img src="https://s1.ax1x.com/2020/05/18/Yh9DNq.md.png" alt="Yh9DNq.md.png" border="0"></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hbase</tag>
        <tag>Hive</tag>
        <tag>Pig</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-第二章</title>
    <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><em>在内存中需要分配连续的存储空间</em></p>
<p><em>支持顺序访问和随机访问</em></p>
<p><strong>数组擅长随机访问，链表擅长删除和插入</strong></p>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><em>链表中的元素可以存储在内存中任何地方</em></p>
<p><em>只支持顺序访问</em></p>
<p><em>每个元素存储了下一个元素的位置，将每个元素连接起来</em></p>
<p><em>对于需要直接定位到某个元素，链表比数组效率要低，因为需要上一个元素知道下一个元素的地址</em></p>
<p><em>删除和插入操作，链表比数组跟高效</em></p>
<p><em>删除一定会成功，插入不一定，因为可能内存不够</em></p>
<img src="https://s1.ax1x.com/2020/05/10/Y3zj9x.png" alt="Y3zj9x.png" border="0">

<p><em>链表和数组混合使用</em></p>
<h3 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h3><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>算法-第一章</title>
    <url>/%E7%AE%97%E6%B3%95-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p><em>算法是一组完成任务的指令。任何代码都可以叫做算法</em></p>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p><em>二分查找时一种算法，其输入是一个<strong>有序</strong>的元素列表</em></p>
<h4 id="次数"><a href="#次数" class="headerlink" title="次数"></a>次数</h4><p><em>1到100的数字集，只需要<strong>7步</strong>就可以找到正确的数值</em></p>
<p><em>一般而言，对于包含n个元素的列表，用二分查找最多需：</em><br>$$<br>log2n<br>$$</p>
<h4 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, item)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        guess = list[mid]</span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h4 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h4><p>简单查询(线性时间)：O(n)</p>
<p>二分查找(对数时间)：O(log2n)</p>
<h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p><em>大O表示法能够比较操作次数，它指出了算法运行时间的增速</em></p>
<p><em>表示的是最糟糕情况下的时间</em></p>
<p><strong>除最糟糕情况下的运行时间外，还应该考虑平均情况的运行时间，这是很重要的</strong></p>
<p><em>大O表示法并不考虑乘以，除以，加上，减去的数字</em></p>
<p><em>常见的五种大O运行时间：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(log2n)  对数时间  二分查找</span><br><span class="line"></span><br><span class="line">O(n)  线性时间，简单查找</span><br><span class="line"></span><br><span class="line">O(n*log2n)  快速排序</span><br><span class="line"></span><br><span class="line">O(n^2)  一种速度较慢的排序方法</span><br><span class="line"></span><br><span class="line">O(n!)  旅行商问题</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/Y17M6I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/10/Y17M6I.md.png" alt="Y17M6I.png" border="0"></a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><em>算法的速度并非指时间，而是操作数的增速</em></p>
<p><em>谈论算法的时间时，我们说的是输入的增加，其运行时间以什么样的速度增加</em></p>
<p><em>算法的时间并不以秒为单位</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter常用组件目录</title>
    <url>/tkinter%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9B%AE%E5%BD%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<p><a href="https://www.cnblogs.com/kongzhagen/p/6145437.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/kongzhagen/p/6145437.html</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
  </entry>
  <entry>
    <title>tkinter之checkbutton</title>
    <url>/tkinter%E4%B9%8Bcheckbutton.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="checkbutton"><a href="#checkbutton" class="headerlink" title="checkbutton"></a>checkbutton</h2><h3 id="状态值"><a href="#状态值" class="headerlink" title="状态值"></a>状态值</h3><p><em>具有on和off两种状态</em></p>
<h4 id="设置状态值为0-1"><a href="#设置状态值为0-1" class="headerlink" title="设置状态值为0,1"></a>设置状态值为0,1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">on为<span class="number">1</span>， off为<span class="number">0</span></span><br><span class="line">intvar = IntVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=intvar, command=...)</span><br></pre></td></tr></table></figure>

<h4 id="设置状态值为设置的值"><a href="#设置状态值为设置的值" class="headerlink" title="设置状态值为设置的值"></a>设置状态值为设置的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stringVar = StringVar()</span><br><span class="line">checkbt = Checkbutton(root, text=<span class="string">''</span>, varibale=stringVar, onvalue=<span class="string">'AA'</span>, offvalue=<span class="string">'BB'</span>, command=...)</span><br></pre></td></tr></table></figure>

<h3 id="获取复选框文本值"><a href="#获取复选框文本值" class="headerlink" title="获取复选框文本值"></a>获取复选框文本值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = checkbutton[<span class="string">'text'</span>]</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
  </entry>
  <entry>
    <title>tkinter之Text</title>
    <url>/tkinter%E4%B9%8BText.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Tkinter"><a href="#Tkinter" class="headerlink" title="Tkinter"></a>Tkinter</h1><p><em>Text（文本）组件用于显示和处理多行文本。在 Tkinter 的所有组件中，Text 组件显得异常强大和灵活，适用于多种任务。虽然该组件的主要目的是显示多行文本，但它常常也被用于作为简单的文本编辑器和网页浏览器使用</em></p>
<p><em>Text 组件用于显示文本文档，包含纯文本或格式化文本（使用不同字体，嵌入图片，显示链接，甚至是带 CSS 格式的 HTML 等）</em></p>
<h2 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"Python.com!"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>

<h4 id="指定标签"><a href="#指定标签" class="headerlink" title="指定标签"></a>指定标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 tag</span></span><br><span class="line">text.tag_config(<span class="string">"tag_1"</span>, backgroun=<span class="string">"yellow"</span>, foreground=<span class="string">"red"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># "insert" 索引表示插入光标当前的位置</span></span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love "</span>)</span><br><span class="line">text.insert(<span class="string">"end"</span>, <span class="string">"FishC.com!"</span>, <span class="string">"tag_1"</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><em>在 Text 组件中插入对象，可以使用 window_create() 和 image_create() 方法</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"I love Python!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"哎呀，我被点了一下~"</span>)</span><br><span class="line">    </span><br><span class="line">b1 = tk.Button(text, text=<span class="string">"点我点我"</span>, command=show)</span><br><span class="line">text.window_create(<span class="string">"insert"</span>, window=b1)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h2><h3 id="全部内容"><a href="#全部内容" class="headerlink" title="全部内容"></a>全部内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.delete(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除一个对象"><a href="#删除一个对象" class="headerlink" title="删除一个对象"></a>删除一个对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.delete(object)</span><br></pre></td></tr></table></figure>



<h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">contents = text.get(<span class="number">1.0</span>, <span class="string">"end"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><p><em>index() 方法用于将所有支持的“索引”格式（请参考下方【Indexes 用法】）转换为“行.列”格式的索引号</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">print(text.index(<span class="string">"insert"</span>))</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="mark-set"><a href="#mark-set" class="headerlink" title="mark_set()"></a>mark_set()</h2><p><em>如果你需要跟踪一个位置，那么你可以将该位置“标记”下来</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line"> </span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">5</span>)</span><br><span class="line">text.pack()</span><br><span class="line"> </span><br><span class="line">text.insert(<span class="string">"insert"</span>, <span class="string">"You are good!"</span>)</span><br><span class="line">text.mark_set(<span class="string">"here"</span>, <span class="string">'1.8'</span>)</span><br><span class="line">text.insert(<span class="string">"here"</span>, <span class="string">"very "</span>)</span><br><span class="line"> </span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>



<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h2 id="文本换行输入"><a href="#文本换行输入" class="headerlink" title="文本换行输入"></a>文本换行输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.insert(END/INSERT, <span class="string">'..../n'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.insert(...)</span><br><span class="line">text.insert(INSERT, <span class="string">'/n'</span>)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
      <tags>
        <tag>Text</tag>
      </tags>
  </entry>
  <entry>
    <title>java笔记</title>
    <url>/java%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="eclipse代码快速排版"><a href="#eclipse代码快速排版" class="headerlink" title="eclipse代码快速排版"></a>eclipse代码快速排版</h2><p><em>ctrl+shif+f</em></p>
<h2 id><a href="#" class="headerlink" title></a></h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>排版</tag>
        <tag>对齐</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop笔记</title>
    <url>/hadoop%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="eclipse关联hadoop源码"><a href="#eclipse关联hadoop源码" class="headerlink" title="eclipse关联hadoop源码"></a>eclipse关联hadoop源码</h2><p><em>解压hadoop-2.7.1-src.tar.gz</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzf hadoop-2.7.1-src.tar.gz*</span><br></pre></td></tr></table></figure>

<p><em>eclipse选择解压后的文件</em></p>
<h2 id><a href="#" class="headerlink" title></a></h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop源码</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据更新</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入元组"><a href="#插入元组" class="headerlink" title="插入元组"></a>插入元组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*全部属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME</span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*必须和表的顺序相同*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*特定属性插入值*/</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> TABLENAME(...) <span class="comment">/*属性顺序可以和表的顺序不同*/</span></span><br><span class="line"><span class="keyword">VALUES</span>(...) <span class="comment">/*要和上面顺序相同;用单引号*/</span></span><br></pre></td></tr></table></figure>

<p><em>不赋值的话会默认赋空值；也可以显示的赋NULL</em></p>
<h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">INTO</span> ＜表名＞ ［(＜属性列<span class="number">1</span>＞ ［,＜属性列<span class="number">2</span>＞…］ )</span><br><span class="line">子査询；</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="keyword">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure>

<p><em>可以转换为连接操作</em></p>
<h4 id="SELECT…INTO"><a href="#SELECT…INTO" class="headerlink" title="SELECT…INTO"></a>SELECT…INTO</h4><p><em>将一个表中的数据插入到另一个表</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> newTable</span><br><span class="line"><span class="keyword">FROM</span> oldTable</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure>



<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> ＜表名＞</span><br><span class="line"><span class="keyword">SET</span>＜列名＞=＜表达式＞ ［,＜列名＞=＜表达式＞］ …</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure>

<h4 id="修改某一个元组的值"><a href="#修改某一个元组的值" class="headerlink" title="修改某一个元组的值"></a>修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage=<span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'2012J5121'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="修改多个元组的值"><a href="#修改多个元组的值" class="headerlink" title="修改多个元组的值"></a>修改多个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student116</span><br><span class="line"><span class="keyword">SET</span> Sage=Sage+l;</span><br></pre></td></tr></table></figure>

<h4 id="带子查询的修改语句"><a href="#带子查询的修改语句" class="headerlink" title="带子查询的修改语句"></a>带子查询的修改语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SC</span><br><span class="line"><span class="keyword">SET</span> Grade=O</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/05/06/YAbXIf.png" alt="YAbXIf.png" border="0">

<p><em>可以转换为连接操作</em></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> ＜表名＞</span><br><span class="line">［<span class="keyword">WHERE</span> ＜条件＞］;</span><br></pre></td></tr></table></figure>

<h4 id="删除某一个元组的值"><a href="#删除某一个元组的值" class="headerlink" title="删除某一个元组的值"></a>删除某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno=<span class="string">'201215128'</span>；</span><br></pre></td></tr></table></figure>

<h4 id="删除多个元组"><a href="#删除多个元组" class="headerlink" title="删除多个元组"></a>删除多个元组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>

<h4 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h4> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">( SELETE Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure>

<p><em>注意：删除操作不可以用连接代替</em></p>
<img src="https://s1.ax1x.com/2020/05/06/YAOGxe.png" alt="YAOGxe.png" border="0">









<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据更新</tag>
      </tags>
  </entry>
  <entry>
    <title>高数</title>
    <url>/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><h3 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h3><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p><em>定义：设X,Y是两个非空集合，如果存在一个法则，使得X中的每一个元素按照法则f,在Y中都有唯一的元素y与之对应，那么则称f为从X到Y的<strong>映射</strong>.</em></p>
<p><em>元素y称为x(在映射f下)的像；x称为元素y在(在映射f下)的<strong>原像</strong>.</em></p>
<p><em>可能是一对多</em></p>
<p><strong>满射</strong>：<em>Y中每一个元素都是X中某元素的像</em></p>
<p><strong>单射</strong>：<em>像只有唯一的原像</em></p>
<p><strong>一一映射</strong>：<em>既是单射又是满射</em></p>
<p><em>映射又叫算子</em></p>
<p><em>非空数集X到数集Y的映射又称为X上的泛函</em></p>
<p><em>非空数集X到数集X的映射称为X上的转换</em></p>
<p><em>非空实数集X到实数集Y的映射又称为X上的函数</em></p>
<h4 id="逆映射与复合映射"><a href="#逆映射与复合映射" class="headerlink" title="逆映射与复合映射"></a>逆映射与复合映射</h4><p><em>单射才存在逆映射</em></p>
<p><em>映射的值域作为逆映射的定义域</em></p>
<p><em>复合映射的条件是，g的值域必须包含在f的定义域内</em></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><em>实数到实数的映射</em></p>
<p><strong>构成函数的条件</strong>：<em>定义域和对应法则</em></p>
<p><em>两个函数相同的条件：定义域和法则都相同</em></p>
<h2 id="证明一个点左右的连续性"><a href="#证明一个点左右的连续性" class="headerlink" title="证明一个点左右的连续性"></a>证明一个点左右的连续性</h2><p><em>左右极限相等且等于该点函数值，则函数在该点连续</em></p>
<h2 id="三次方程求解方法"><a href="#三次方程求解方法" class="headerlink" title="三次方程求解方法"></a>三次方程求解方法</h2><h3 id="因式分解"><a href="#因式分解" class="headerlink" title="因式分解"></a>因式分解</h3><h3 id="先算出一个根"><a href="#先算出一个根" class="headerlink" title="先算出一个根"></a>先算出一个根</h3><p><a href="https://imgchr.com/i/YG0nTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0nTx.md.png" alt="YG0nTx.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><img src="https://s1.ax1x.com/2020/05/05/YkPeFs.png" alt="YkPeFs.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkPgfI.png" alt="YkPgfI.png" border="0">

<h3 id="三阶行列式的求法"><a href="#三阶行列式的求法" class="headerlink" title="三阶行列式的求法"></a>三阶行列式的求法</h3><img src="https://s1.ax1x.com/2020/05/11/YGUkq0.png" alt="YGUkq0.png" border="0">

<h3 id="按某一行某一列展开计算"><a href="#按某一行某一列展开计算" class="headerlink" title="按某一行某一列展开计算"></a>按某一行某一列展开计算</h3><p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.jpg" border="0"></a></p>
<h3 id="转换为上三角矩阵"><a href="#转换为上三角矩阵" class="headerlink" title="转换为上三角矩阵"></a>转换为上三角矩阵</h3><p><em>结果等于主对角线的乘积</em></p>
<h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h2><p><em>把矩阵元素aij放到aji的位置</em></p>
<img src="https://s1.ax1x.com/2020/05/06/YkOa01.png" alt="YkOa01.png" border="0">

<h2 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h2><p><em>二阶矩阵的伴随矩阵等于：主对角线对换，副对角线变号</em></p>
<img src="https://s1.ax1x.com/2020/05/05/Yki9AJ.png" alt="Yki9AJ.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkFUsK.png" alt="YkFUsK.png" border="0">

<img src="https://s1.ax1x.com/2020/05/05/YkFXeU.png" alt="YkFXeU.png" border="0">

<h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><em>设A为n阶矩阵，若存在n阶矩阵B使得:AB=BA=E(单位矩阵)，则称A是可逆的且矩阵B是矩阵A的逆矩阵</em></p>
<h3 id="逆矩阵唯一性证明"><a href="#逆矩阵唯一性证明" class="headerlink" title="逆矩阵唯一性证明"></a>逆矩阵唯一性证明</h3><p><strong>若A是可逆矩阵，则A的逆矩阵是唯一的。证明：</strong></p>
<img src="https://s1.ax1x.com/2020/05/05/YFxDm9.png" alt="YFxDm9.png" border="0">

<p><a href="https://imgchr.com/i/YkZSHK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/05/YkZeDP.png" alt="YkZeDP.png" border="0"></a></p>
<h3 id="求逆矩阵"><a href="#求逆矩阵" class="headerlink" title="求逆矩阵"></a>求逆矩阵</h3><h4 id="定义求"><a href="#定义求" class="headerlink" title="定义求"></a>定义求</h4><h4 id="初等变换法"><a href="#初等变换法" class="headerlink" title="初等变换法"></a>初等变换法</h4><p><a href="https://imgchr.com/i/Noo00A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/Noo00A.md.png" alt="Noo00A.md.png" border="0"></a><br><a href="https://imgchr.com/i/Noorkt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/Noorkt.md.png" alt="Noorkt.md.png" border="0"></a></p>
<h4 id="伴随阵法"><a href="#伴随阵法" class="headerlink" title="伴随阵法"></a>伴随阵法</h4><img src="https://s1.ax1x.com/2020/05/05/YkAlC9.png" alt="YkAlC9.png" border="0">



<p><a href="https://imgchr.com/i/NooBTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/07/01/NooBTI.md.png" alt="NooBTI.md.png" border="0"></a></p>
<h3 id="矩阵的特征值和特征向量"><a href="#矩阵的特征值和特征向量" class="headerlink" title="矩阵的特征值和特征向量"></a>矩阵的特征值和特征向量</h3><p><a href="https://imgchr.com/i/YGGEy6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGEy6.md.png" alt="YGGEy6.md.png" border="0"></a><br><a href="https://imgchr.com/i/YGGAQx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGAQx.png" alt="YGGAQx.png" border="0"></a><br><a href="https://imgchr.com/i/YGGeeO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGeeO.png" alt="YGGeeO.png" border="0"></a><br><a href="https://imgchr.com/i/YGGVOK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGVOK.png" alt="YGGVOK.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YGGOtH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGGOtH.md.jpg" alt="YGGOtH.jpg" border="0"></a></p>
<h2 id="奇异方程和非奇异方程"><a href="#奇异方程和非奇异方程" class="headerlink" title="奇异方程和非奇异方程"></a>奇异方程和非奇异方程</h2><p><em>奇异方程的行列式为0</em></p>
<hr>
<blockquote>
<p>授人以鱼，不如授人以渔。</p>
</blockquote>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
  </entry>
  <entry>
    <title>成语</title>
    <url>/%E6%88%90%E8%AF%AD%E7%BE%8E%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="舌灿莲花"><a href="#舌灿莲花" class="headerlink" title="舌灿莲花"></a>舌灿莲花</h2><p><em>形容人口才好，口齿伶俐，能说善道，有如莲花般地美妙</em></p>
<h2 id="絮聒不休"><a href="#絮聒不休" class="headerlink" title="絮聒不休"></a>絮聒不休</h2><p><em>多形容，话多，不停歇，没完没了</em></p>
<h2 id="吐佳言如锯木屑，霏霏不绝"><a href="#吐佳言如锯木屑，霏霏不绝" class="headerlink" title="吐佳言如锯木屑，霏霏不绝"></a>吐佳言如锯木屑，霏霏不绝</h2><h2 id="谈霏玉屑"><a href="#谈霏玉屑" class="headerlink" title="谈霏玉屑"></a>谈霏玉屑</h2><p><em>谈话时美好的言辞像玉的碎末纷纷洒落一样。言谈美妙，滔滔不绝</em></p>
<h2 id="话如连珠"><a href="#话如连珠" class="headerlink" title="话如连珠"></a>话如连珠</h2><p>​p>
<h2 id="音容并茂"><a href="#音容并茂" class="headerlink" title="音容并茂"></a>音容并茂</h2><p><em>说话时语言和表情都十分丰富</em></p>
<h2 id="钳口结舌"><a href="#钳口结舌" class="headerlink" title="钳口结舌"></a>钳口结舌</h2><p><em>形容理屈词穷说不出话来。也指慑于淫威不敢讲话</em></p>
<h2 id="三缄其口"><a href="#三缄其口" class="headerlink" title="三缄其口"></a>三缄其口</h2><p><em>形容说话谨慎。现在也形容不肯或不敢开口</em></p>
<hr>
<blockquote>
<p>善谈和健谈不同，健谈者能使四座生春，但多少有点霸道，善谈者尽管舌灿莲花，但总还要给别人留些说话的机会。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>梗</title>
    <url>/%E6%A2%97.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="df3bed18e79639a00c58eaa8fa452a73c16ab9a76af713393f49259efaccb1a4">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64ed98635955ff914dfbe25cec259276237b1327efd81f383834728fef1e8afba3218913fdd54a9ca502f12266e02d96c73e4b1405909e55c355646e2e51b73b9f742bc5c4d026844017c1dc1abe0abe8bea7c41a7c76dc1afe6ba4195fec5c19a83645fb43d5557e4dbc1fd1daf4aa92eca4f845ab0e200d8842c98ee8844ba1cce4296a2e3a093b360e07ba70232606fb6d97b982797749578b7bff718a2c49a400505c02804fecf4852e59eb989047f7040747d993d76d2fccc2af366cb4554c3fb72670dc960c443d846d2c8b1da204fca1365e30c5e2a26801c953f464cd05868f15c5dc65a67c8481e2b8eb7d702c7450cd52879cac4a0f2aa8026d338a07c982410a69d0eb4b5a8b779a645d62f698658d57e334ef419c84191f548c90a2b785b903e75ee355f52536c7c98b0e6b4874dad713407673cbf63275982a776f59ca77e0618aa1658b11160ea1c31586b9d31ae9f45d7da7984b3730c0a42f0dfee8d97213a49244c24eb340e35153494038e474b470c6872b947ac0cdda064903e677795ce58803122c7b7f7f4374eb6dcb7ec352362a4812aff6859ef4f9e9cab3b79cdb46b2b804fa348fcf3d54d6fdf62836da2d062bc82a208fd05815a5ee69a58dd9eacbda59cd39df3762be0e5b9e0c9b86f91796c08ef78b370de14ef24f0ea62d46daccdfbaf952ea85a08ad1322aebfdd91fd22c538cd147f21efcacaabd8ca5a433696d0112154908a7845437cc6a25ca29b257bea477f7a0824121d98a7bb25cdd1c4d942b4c205ff3a5446a1504eb2b281dd4e7733c10324049ba6d86cede0ed85cd019a536f9998f23164cb102e5b5a93127bba2c7c7d5db00506a59adb8ff88cff518a9272c8508aa12c4fd0cf60ba6348f593c1c53b0b983080f599424fa593dbe7c963a9dce73d3ecc3ad43546644cbe19c781f86057636f31ca09c76dbf399308126d1be4669bc620d764b3ae69aa26f131a97bd72bcdd5c5eace8d17aa583d12f51c1c830d1e1836cf2c2859b548369b57db98c7c8d633d32811c17359366e2f9dc974f716c0453cbd100906ff8363f664135df0e8fca985e9fb8223d7134febb14720f4ee9023ea63174d1d7ee7a322c7df7b3f7b3b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>梗</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop理论课-第一章</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%80%E7%AB%A0(%E5%88%9D%E8%AF%86%20Hadoop%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF).html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="初识-Hadoop-大数据技术"><a href="#初识-Hadoop-大数据技术" class="headerlink" title="初识 Hadoop 大数据技术"></a>初识 Hadoop 大数据技术</h2><h3 id="大数据技术概述"><a href="#大数据技术概述" class="headerlink" title="大数据技术概述"></a>大数据技术概述</h3><h4 id="大数据产生的背景"><a href="#大数据产生的背景" class="headerlink" title="大数据产生的背景"></a>大数据产生的背景</h4><p><em>计算机诞生; 互联网发展</em>  </p>
<h4 id="大数据的定义"><a href="#大数据的定义" class="headerlink" title="大数据的定义"></a>大数据的定义</h4><p>“大数据”是一个<strong>涵盖多种技术的概念</strong>，简单地说，是指无法在一定时间内用常规软件工具对<br>其内容进行抓取、管理和处理的数据集合。     </p>
<p>IBM 公司将“大数据”理念定义为 4 个 V，即<strong>大量化( Volume）、多样化（ Variety）、快速化（ Velocity）及由此产生的价值（ Value）</strong>。  </p>
<ul>
<li>数据体量大：大数据的数据量从 TB 级别跃升到 PB 级别。</li>
<li>数据类型多：大数据的数据类型包括前文提到的网络日志、视频、图片、地理位置信息等。</li>
<li>处理速度快： 1 秒定律。最后这一点是大数据技术与传统数据挖掘技术的本质区别。</li>
<li>价值密度低：以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒  </li>
</ul>
<h4 id="大数据技术的发展"><a href="#大数据技术的发展" class="headerlink" title="大数据技术的发展"></a>大数据技术的发展</h4><p><em>大数据技术要面对的基本问题，也是最核心的问题，就是海量数据<strong>如何可靠存储和如何高效计算的问题</strong>。</em>  </p>
<h3 id="Google-的“三驾马车”"><a href="#Google-的“三驾马车”" class="headerlink" title="Google 的“三驾马车”"></a>Google 的“三驾马车”</h3><h4 id="GFS-的思想"><a href="#GFS-的思想" class="headerlink" title="GFS 的思想"></a>GFS 的思想</h4><p><em>论文“The Google File System”描述了一个分布式文件系统的设计思路</em></p>
<p><em>从交互实体上划分，分布式文件系统有两个基本组成部分，一个是<strong>客户端（ Client）</strong>，一个是<strong>服务端（ Server）</strong>.</em>  </p>
<p><em>如果客户端把文件上传到服务端，但是服务端的硬盘不够大，怎么办？ 多加硬盘，或多增加主机</em> </p>
<p><em>数据的存储可靠性怎么保证？ 数据冗余存储</em> </p>
<p><em>主机或硬盘如何被管理起来?  管理节点</em></p>
<p><em>GFS 解决这些问题的思路是这样的，增加一个<strong>管理节点</strong>，去管理这些存放数据的主机。存放数据的主机称为<strong>数据节点</strong>。 而上传的文件会按<strong>固定的大小进行分块</strong>。 数据节点上保存的是<strong>数据块</strong>，而非独立的文件。数据块<strong>冗余度默认是 3</strong>。<strong>上传文件时</strong>，客户端先连接管理节点，管理节点生成数据块的信息，包括文件名、文件大小、上传时间、数据块的位置信息等。这些信息称为<strong>文件的元信息</strong>，它会保存在管理节点。客户端获取这些元信息之后，就开始把数据块一个个上传。客户端把数据块先上传到第一个数据节点，然后，在管理节点的管理下，通过水平复制，复制几份数据块到其他节点，最终达到冗余度的要求。<strong>水平复制需要考虑两个要求：可靠性、可用性</strong>.</em></p>
<p><a href="https://imgchr.com/i/YSnxw4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnxw4.md.png" alt="YSnxw4.md.png" border="0"></a><br><a href="https://imgchr.com/i/YSnvmF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/YSnvmF.md.png" alt="YSnvmF.md.png" border="0"></a></p>
<h4 id="MapReduce-的思想"><a href="#MapReduce-的思想" class="headerlink" title="MapReduce 的思想"></a>MapReduce 的思想</h4><p><em>PageRank，即网页排名，又称网页级别</em>  </p>
<p><em>MapReduce 采用“分而治之”的思想，把对大规模数据集的操作，分发给一个主节点管理下的各个子节点共同完成，然后整合各个子节点的中间结果，得到最终的计算结果。简而言之， MapReduce 就是“分散任务，汇总结果”</em> </p>
<h4 id="BigTable的思想"><a href="#BigTable的思想" class="headerlink" title="BigTable的思想"></a>BigTable的思想</h4><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>vmware安装tools</title>
    <url>/vmware%E5%AE%89%E8%A3%85tools.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="安装vmware-tools"><a href="#安装vmware-tools" class="headerlink" title="安装vmware tools"></a>安装vmware tools</h2><h3 id="选择Linux-iso"><a href="#选择Linux-iso" class="headerlink" title="选择Linux.iso"></a>选择Linux.iso</h3><p><em>关闭vmware重新打开，编辑虚拟系统设置-&gt;CD/DVD-&gt;浏览-&gt;选择linux.iso(在vmware的安装路径下，可以复制到虚拟系统镜像文件iso处-&gt;确定)</em></p>
<p><a href="https://imgchr.com/i/J4YiTO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4YiTO.md.png" alt="J4YiTO.png" border="0"></a></p>
<h3 id="安装Tools"><a href="#安装Tools" class="headerlink" title="安装Tools"></a>安装Tools</h3><p><em>打开虚拟系统-&gt;桌面-&gt;左侧导航栏的CD/DVD-&gt;复制里面的tools压缩包到桌面-&gt;右键选择extract here-&gt;打开解压后文件-&gt;shift + 右键-&gt;open terminal -&gt; sudo ./vmware-install.pl-&gt;根据提示成功安装</em></p>
<p><a href="https://imgchr.com/i/J4tgPg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tgPg.md.png" alt="J4tgPg.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/J4tR2j" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4tR2j.md.png" alt="J4tR2j.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/J4t2GQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4t2GQ.md.png" alt="J4t2GQ.md.png" border="0"></a></p>
<h3 id><a href="#" class="headerlink" title></a></h3><hr>
<blockquote>
<p>随意春芳歇，王孙自可留。</p>
</blockquote>
]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>vmware</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析-方程组</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%96%B9%E7%A8%8B%E7%BB%84.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h1><h2 id="高斯消去法"><a href="#高斯消去法" class="headerlink" title="高斯消去法"></a>高斯消去法</h2><p><em>难于求解或求高精度的解</em></p>
<h3 id="朴素的高斯消去法"><a href="#朴素的高斯消去法" class="headerlink" title="朴素的高斯消去法"></a>朴素的高斯消去法</h3><p><strong>主元</strong>：主对角线上的元素</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="消去步骤"><a href="#消去步骤" class="headerlink" title="消去步骤"></a>消去步骤</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><img src="https://s1.ax1x.com/2020/05/02/JjR2DO.png" alt="JjR2DO.png" border="0">

<p><em>没有在aij的位置放零是因为后续不会用到该值，提高效率</em></p>
<p><em>当遇到主元为零是程序会终止</em></p>
<h5 id="回代或向后求解"><a href="#回代或向后求解" class="headerlink" title="回代或向后求解"></a>回代或向后求解</h5><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><p><a href="https://imgchr.com/i/JjfqAg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0"></a></p>
<h4 id="操作次数"><a href="#操作次数" class="headerlink" title="操作次数"></a>操作次数</h4><p><em>对消去步骤和回代步骤的计算次数进行统计</em></p>
<h5 id="高斯消去法中消去步骤的操作次数"><a href="#高斯消去法中消去步骤的操作次数" class="headerlink" title="高斯消去法中消去步骤的操作次数"></a>高斯消去法中消去步骤的操作次数</h5><p><em>把第一列转化为0，需要(2n+1)(n-1)次计算：</em></p>
<p>（1+n+n)(n-1)</p>
<img src="https://s1.ax1x.com/2020/04/26/JcgErR.png" alt="JcgErR.png" border="0">

<p>n个方程n个未知数的消去计算，可以在2/3n^3+1/2n^2-7/6n次操作后完成</p>
<h6 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h6><p>O(n^3)</p>
<h5 id="高斯消去法中回代步骤的操作次数"><a href="#高斯消去法中回代步骤的操作次数" class="headerlink" title="高斯消去法中回代步骤的操作次数"></a>高斯消去法中回代步骤的操作次数</h5><p><a href="https://imgchr.com/i/JjfHHS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/JjfHHS.png" alt="JjfHHS.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/05/02/JjfqAg.md.png" alt="JjfqAg.md.png" border="0">

<p><em>n个 方 程 n个 未 知 数 的 三 角 形 系 统 的 回 代 过 程 可 以 使 用 n^2次操作完成</em></p>
<p>*<em>当n很大时，消去步骤的低阶可以省略; 换 句 话 说 ， 对 于 “，在 复 杂 度 计 算 中 的 低 阶 项 对 于 算 法 运 行 时 间 的 估 计 没 有 大的 影 响 ，并可以忽略.  *</em></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/Jj7rPU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/02/Jj7rPU.png" alt="Jj7rPU.png" border="0"></a></p>
<h2 id="高斯主元素消去法"><a href="#高斯主元素消去法" class="headerlink" title="高斯主元素消去法"></a>高斯主元素消去法</h2><p><em>由高斯消去法知道在消元过程中可能出现的情况主元素为0，这时消去法将无法进行；即使主元素但很小时，用其作除数，会导致其他元素数量级的严重增长和舍入误差的扩散，最后也使得计算解不可靠</em></p>
<h2 id="LU分解"><a href="#LU分解" class="headerlink" title="LU分解"></a>LU分解</h2><h3 id="LU分解过程"><a href="#LU分解过程" class="headerlink" title="LU分解过程"></a>LU分解过程</h3><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p><em>在高斯消去法的基础上把0的位置写上倍数</em></p>
<p><a href="https://imgchr.com/i/JorlBF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorlBF.md.png" alt="JorlBF.png" border="0"></a></p>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p><code>Amn = Lm1U1n + Lm2U2n + ...+ Umn</code></p>
<p><a href="https://imgchr.com/i/JorhDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/JorhDS.md.jpg" alt="JorhDS.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/Jorfu8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/29/Jorfu8.md.jpg" alt="Jorfu8.md.jpg" border="0"></a></p>
<h3 id="使用LU分解回代"><a href="#使用LU分解回代" class="headerlink" title="使用LU分解回代"></a>使用LU分解回代</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ax &#x3D; b</span><br><span class="line">LUx &#x3D; b</span><br><span class="line">Ly &#x3D; b 法二可以直接最初把b也写上，最后b这一列就是y</span><br><span class="line">Ux &#x3D; y</span><br><span class="line">求出x</span><br></pre></td></tr></table></figure>

<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><h2 id="追赶法"><a href="#追赶法" class="headerlink" title="追赶法"></a>追赶法</h2><p><em>在一些实际问题中， 例如解常微分方程边值问题，热传导方程以及船体数学放样中建立三次样条函数等，都会要求解系数矩阵为<strong>对角占优的三对角线方程组</strong>.</em></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><img src="https://s1.ax1x.com/2020/05/06/YAFFk4.jpg" alt="YAFFk4.jpg" border="0">

<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><img src="https://s1.ax1x.com/2020/05/06/YAiQWn.jpg" alt="YAiQWn.jpg" border="0">



<img src="https://s1.ax1x.com/2020/05/06/YAVNGQ.jpg" alt="YAVNGQ.jpg" border="0">



<h2 id="向量与矩阵的范数"><a href="#向量与矩阵的范数" class="headerlink" title="向量与矩阵的范数"></a>向量与矩阵的范数</h2><h3 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h3><p><a href="https://imgchr.com/i/YWr0s0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWr0s0.png" alt="YWr0s0.png" border="0"></a></p>
<h3 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h3><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><a href="https://imgchr.com/i/YGw0y9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGw0y9.md.png" alt="YGw0y9.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YG0CkV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YG0CkV.md.jpg" alt="YG0CkV.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwOSg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwOSg.md.jpg" alt="YGwOSg.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YGwbY8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/11/YGwbY8.jpg" alt="YGwbY8.jpg" border="0"></a></p>
<h3 id="条件数"><a href="#条件数" class="headerlink" title="条件数."></a>条件数.</h3><p><em>与矩阵的范数有关</em></p>
<img src="https://s1.ax1x.com/2020/05/11/YGsegO.md.jpg" alt="YGsegO.jpg" border="0">



<h2 id="线性方程组的迭代方法"><a href="#线性方程组的迭代方法" class="headerlink" title="线性方程组的迭代方法"></a>线性方程组的迭代方法</h2><h3 id="雅可比迭代法-Jacobi"><a href="#雅可比迭代法-Jacobi" class="headerlink" title="雅可比迭代法(Jacobi)"></a>雅可比迭代法(Jacobi)</h3><p><em>1.将线性方程组的第i个方程中的第i个变量用其它n-1个变量表示出来，生成迭代方程组</em></p>
<p><em>2.取定初始向量，依次迭代</em></p>
<p>3.</p>
<p><a href="https://imgchr.com/i/YWrfQ1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWrfQ1.md.png" alt="YWrfQ1.png" border="0"></a></p>
<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p><a href="https://imgchr.com/i/YWHe2t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHe2t.md.jpg" alt="YWHe2t.md.jpg" border="0"></a><br><a href="https://imgchr.com/i/YWHZ8I" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHZ8I.md.jpg" alt="YWHZ8I.md.jpg" border="0"></a></p>
<h3 id="Jacobi迭代格式矩阵形式"><a href="#Jacobi迭代格式矩阵形式" class="headerlink" title="Jacobi迭代格式矩阵形式"></a>Jacobi迭代格式矩阵形式</h3><p><a href="https://imgchr.com/i/tpx4OO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/25/tpx4OO.md.jpg" alt="tpx4OO.jpg" border="0"></a></p>
<h3 id="高斯-赛德尔迭代法-Gauss-Seidel"><a href="#高斯-赛德尔迭代法-Gauss-Seidel" class="headerlink" title="高斯-赛德尔迭代法(Gauss-Seidel)"></a>高斯-赛德尔迭代法(Gauss-Seidel)</h3><p><em>对雅克比迭代法的改进，用以求出的新值代替旧值</em></p>
<h4 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/YWHCDO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/18/YWHCDO.md.jpg" alt="YWHCDO.jpg" border="0"></a></p>
<h3 id="逐次超松弛迭代法-SOR"><a href="#逐次超松弛迭代法-SOR" class="headerlink" title="逐次超松弛迭代法(SOR)"></a>逐次超松弛迭代法(SOR)</h3><p><em>针对收敛速度慢的情况。逐次超松弛迭代法是高斯-赛德尔的特殊情况</em></p>
<p><a href="https://imgchr.com/i/YoZEgH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/20/YoZEgH.md.jpg" alt="YoZEgH.jpg" border="0"></a></p>


<h3 id="迭代法的收敛性"><a href="#迭代法的收敛性" class="headerlink" title="迭代法的收敛性"></a>迭代法的收敛性</h3><p><strong>定理3.11(迭代法的基本定理)：</strong> <em>对任意初值x(0)均收敛的充分必要条件是p(B) &lt; 1</em></p>
<p><strong>推论 2</strong>：</p>
<p><em>Jacobi迭代法收敛的充分必要条件是：</em></p>
<p><em>Gauss-Seidel迭代法收敛的充分必要条件是：</em></p>
<p><em>SOR</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络-第四章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p><em>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。<br>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？</em></p>
<h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><p><em>让网络负责可靠交付</em></p>
<p><em>使用面向连接的通信方式</em></p>
<p><em>通信之前先建立虚电路 (Virtual Circuit)，以保证双方通信所需的一切网络资源</em></p>
<p><em>H1 发送给 H2 的所有分组都沿着同一条虚电路传送</em></p>
<p><strong>分组，存储转发，虚拟连接</strong></p>
<h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><p><em>网络层向上只提供<strong>简单灵活的、无连接的、尽最大努力交付</strong>的数据报服务</em></p>
<p><em>网络层不提供服务质量的承诺</em></p>
<h4 id="尽最大努力交付"><a href="#尽最大努力交付" class="headerlink" title="尽最大努力交付"></a>尽最大努力交付</h4><p><em>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉</em></p>
<p><em>如果主机（即端系统）中的进程之间的<strong>通信需要是可靠的，那么就由网络的主机中的运输层</strong>负责可靠交付（包括差错处理、流量控制等）</em></p>
<p><em>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用</em></p>
<p><em>H1 发送给 H2</em>的<strong>分组可能沿着不同路径传送</strong></p>
<h3 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h3><p><a href="https://imgchr.com/i/JRyK1g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRyK1g.md.png" alt="JRyK1g.png" border="0"></a></p>
<h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><p><em>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一</em></p>
<p>与 IP 协议配套使用的还有三个协议：</p>
<ul>
<li>地址解析协议 ARP<pre><code>(Address Resolution Protocol)</code></pre></li>
<li>网际控制报文协议 ICMP<br>   (Internet Control Message Protocol)</li>
<li>网际组管理协议 IGMP<br>   (Internet Group Management Protocol)</li>
</ul>
<p><a href="https://imgchr.com/i/JR6GKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JR6GKH.png" alt="JR6GKH.png" border="0"></a></p>
<h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>将网络互相连接起来要使用一些中间设备。<br>中间设备又称为<strong>中间系统或中继 (relay)系统</strong>。<br>有以下五种不同的中间设备：</p>
<ul>
<li>物理层中继系统：转发器 (repeater)。 </li>
<li>数据链路层中继系统：网桥 或 桥接器 (bridge)。</li>
<li>网络层中继系统：路由器 (router)。</li>
<li>网桥和路由器的混合物：桥路器 (brouter)。</li>
<li>网络层以上的中继系统：网关 (gateway)。</li>
</ul>
<h4 id="网络互连使用路由器"><a href="#网络互连使用路由器" class="headerlink" title="网络互连使用路由器"></a>网络互连使用路由器</h4><p><em>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。<br>网关由于比较复杂，目前使用得较少。<br><strong>网络互连都是指用路由器进行网络互连和路由选择</strong>。<br>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关</em></p>
<h4 id="互连网络与虚拟互连网络"><a href="#互连网络与虚拟互连网络" class="headerlink" title="互连网络与虚拟互连网络"></a>互连网络与虚拟互连网络</h4><img src="https://s1.ax1x.com/2020/04/27/JRcqXQ.png" alt="JRcqXQ.png" border="0">

<h4 id="虚拟互连网络的意义"><a href="#虚拟互连网络的意义" class="headerlink" title="虚拟互连网络的意义"></a>虚拟互连网络的意义</h4><p><strong>所谓虚拟互连网络也就是逻辑互连网络，利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络</strong>。</p>
<p>使用 IP 协议的虚拟互连网络可简称为<strong>IP 网</strong></p>
<p><strong>使用虚拟互连网络的好处是</strong>：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节</p>
<p>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的互联网 (Internet)</p>
<h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3><h4 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="IP 地址及其表示方法"></a>IP 地址及其表示方法</h4><p><em>IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是<strong>唯一的32 位</strong> 的标识符</em></p>
<p><em>IP 地址现在由<strong>互联网名字和数字分配机构</strong>ICANN (Internet Corporation for Assigned Names and Numbers)进行分配</em></p>
<h4 id="IP-地址的编址方法"><a href="#IP-地址的编址方法" class="headerlink" title="IP 地址的编址方法"></a>IP 地址的编址方法</h4><ul>
<li>分类IP 地址。这是最基本的编址方法，在 1981 年就通过了相应的标准协议。</li>
<li>子网的划分。这是对最基本的编址方法的改进，其标准[RFC 950] 在 1985 年通过。</li>
<li>构成超网。这是比较新的无分类编址方法。1993 年提出后很快就得到推广应用</li>
</ul>
<h5 id="分类-IP-地址"><a href="#分类-IP-地址" class="headerlink" title="分类 IP 地址"></a>分类 IP 地址</h5><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）</p>
<img src="https://s1.ax1x.com/2020/04/27/JR24Rf.png" alt="JR24Rf.png" border="0">

<p><em>总位数是确定的，而网络号和主机号不是确定长度</em></p>
<p><a href="https://imgchr.com/i/JRo5rV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRo5rV.png" alt="JRo5rV.png" border="0"></a></p>
<p><em>主机号有多少位就有2^(n-m)-2个主机，网络号就有2^(32-n)-2个网段</em></p>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><a href="https://imgchr.com/i/JRoxr6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoxr6.png" alt="JRoxr6.png" border="0"></a><br><a href="https://imgchr.com/i/JRovKx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRovKx.png" alt="JRovKx.png" border="0"></a><br><a href="https://imgchr.com/i/JRoXx1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JRoXx1.png" alt="JRoXx1.png" border="0"></a></p>
<h3 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h3><p><em>IP 地址与硬件地址是不同的地址</em></p>
<p>从层次的角度看：</p>
<ul>
<li>硬件地址（或物理地址）是数据链路层和物理层使用的地址</li>
<li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址（称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的）</li>
</ul>
<p><a href="https://imgchr.com/i/J5Ni9g" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5Ni9g.md.png" alt="J5Ni9g.png" border="0"></a></p>
<p><strong>对应abce类IP地址的默认子网掩码是把网络号全部写为1，主机号为0</strong></p>
<p><strong>路由器的 IP 地址并不出现在 IP 数据报的首部中</strong></p>
<p><strong>在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报</strong></p>
<img src="https://s1.ax1x.com/2020/05/17/YRV6xK.png" alt="YRV6xK.png" border="0">

<h3 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h3><p><em>已经知道了一个机器（主机或路由器）的IP地址，如何找出其相应的硬件地址？地址解析协议 ARP 就是用来解决这样的问题的</em></p>
<p><strong>ARP 作用：从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址</strong></p>
<p>ARP IP-&gt;MAC</p>
<p>RARP MAC-&gt;IP</p>
<p>ARP分组请求</p>
<h4 id="ARP-高速缓存的作用"><a href="#ARP-高速缓存的作用" class="headerlink" title="ARP 高速缓存的作用"></a>ARP 高速缓存的作用</h4><p><em>存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量</em></p>
<p>TTL:地址映射有效时间</p>
<p>发送广播：前面全为1，后面全为1</p>
<p>发送ARP为广播传输，响应为1对1</p>
<p><a href="https://imgchr.com/i/J5y8JI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5y8JI.md.png" alt="J5y8JI.png" border="0"></a></p>
<p>以太网1500字节  数据1480</p>
<p>生存时间：防止无限传输</p>
<h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3><p><a href="https://imgchr.com/i/J5HxAI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5HxAI.md.png" alt="J5HxAI.png" border="0"></a></p>
<p><em>IP数据报=首部+数据部分</em></p>
<p><em>首部=固定部分+可变部分</em></p>
<p><em>固定部分=20字节，是IP数据报必须有的部分；可选字段长度可变</em></p>
<p><strong>版本</strong>：<em>IP协议版本</em></p>
<p><strong>首部长度</strong>：<em>占四个位，最大15个单位，单位为4个字节；所以首部长度最多60个字节</em></p>
<p><strong>总长度</strong>：<em>16位；单位为字节；数据报最长长度为2^16 - 1=65535字节</em></p>
<p><strong>总长度必须不超过最大传送单元 MTU（我们规定不能超过1500字节）</strong></p>
<p><strong>标识</strong>：<em>同一数据包的切片相同</em></p>
<p><strong>标志</strong>：<em>占3位；目前只有前两位有意义。<br>标志字段的最低位是 <strong>MF</strong> (More Fragment)。MF =1 表示后面“还有分片”。MF =0 表示最后一个分片。<br>标志字段中间的一位是 <strong>DF</strong> (Don’t Fragment) 。只有当 DF = 0 时才允许分片</em></p>
<p><strong>片偏移</strong>：<em>占13 位，指出：较长的分组在分片后<br>某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位</em></p>
<p><strong>生存时间</strong>：<em>生存时间——占8 位，记为 TTL (Time To Live)，<br>指示数据报在网络中可通过的路由器数的最大值</em></p>
<h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://imgchr.com/i/J5OPgK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OPgK.md.png" alt="J5OPgK.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5OC36" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5OC36.md.png" alt="J5OC36.md.png" border="0"></a><br><a href="https://imgchr.com/i/J5O99x" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J5O99x.md.png" alt="J5O99x.md.png" border="0"></a></p>
<h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><h3 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h3><h3 id="无分类编址-CIDR-考点"><a href="#无分类编址-CIDR-考点" class="headerlink" title="无分类编址 CIDR(考点)"></a>无分类编址 CIDR(考点)</h3><img src="https://s1.ax1x.com/2020/05/11/YGuunJ.png" alt="1" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGumX4.png" alt="2" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGuKB9.png" alt="3" border="0">
<img src="https://s1.ax1x.com/2020/05/11/YGuVpT.png" alt="4" border="0">



<h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><h3 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h3><h4 id="RIP-协议的三个特点"><a href="#RIP-协议的三个特点" class="headerlink" title="RIP 协议的三个特点"></a>RIP 协议的三个特点</h4><p>(1) 仅和相邻路由器交换信息。<br>(2) 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。<br>(3) 按固定的时间间隔交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</p>
<h3 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h3><h4 id="三个要点"><a href="#三个要点" class="headerlink" title="三个要点"></a>三个要点</h4><ul>
<li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li>
<li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<br>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 </li>
<li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</li>
</ul>
<h3 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h3><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p><em>比IPv4地址数扩大2^96倍</em></p>
<h3 id="IPv6-的地址"><a href="#IPv6-的地址" class="headerlink" title="IPv6 的地址"></a>IPv6 的地址</h3><h4 id="冒号十六进制记法"><a href="#冒号十六进制记法" class="headerlink" title="冒号十六进制记法"></a>冒号十六进制记法</h4><h4 id="零省略"><a href="#零省略" class="headerlink" title="零省略"></a>零省略</h4><h4 id="零压缩"><a href="#零压缩" class="headerlink" title="零压缩"></a>零压缩</h4><p><em>只能零压缩一次</em></p>
<h4 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h4><p><a href="https://imgchr.com/i/YNGoHP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNGoHP.md.png" alt="YNGoHP.md.png" border="0"></a><br><a href="https://imgchr.com/i/YNG7Af" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/12/YNG7Af.md.png" alt="YNG7Af.md.png" border="0"></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>网站点击流数据分析</title>
    <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%8C%E4%B8%9A%E9%83%A8%E7%BD%B2-%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E6%B5%81%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="网站点击流数据分析项目业务背景"><a href="#网站点击流数据分析项目业务背景" class="headerlink" title="网站点击流数据分析项目业务背景"></a>网站点击流数据分析项目业务背景</h1><h2 id="什么是点击流数据"><a href="#什么是点击流数据" class="headerlink" title="什么是点击流数据"></a>什么是点击流数据</h2><h3 id="WEB访问日志"><a href="#WEB访问日志" class="headerlink" title="WEB访问日志"></a>WEB访问日志</h3><p><em>即指用户访问网站时的所有访问、浏览、点击行为数据</em></p>
<h4 id="日志的生成渠道："><a href="#日志的生成渠道：" class="headerlink" title="日志的生成渠道："></a>日志的生成渠道：</h4><ul>
<li><p>是网站的web服务器所记录的web访问日志；</p>
</li>
<li><p>是通过在页面嵌入自定义的js代码来获取用户的所有访问行为（比如鼠标悬停的位置，点击的页面组件等），然后通过ajax请求到后台记录日志；这种方式所能采集的信息最全面；</p>
</li>
<li><p>通过在页面上埋点1像素的图片，将相关页面访问信息请求到后台记录日志；</p>
</li>
</ul>
<h4 id="日志数据内容详述"><a href="#日志数据内容详述" class="headerlink" title="日志数据内容详述"></a>日志数据内容详述</h4><p>在实际操作中，有以下几个方面的数据可以被采集：</p>
<ul>
<li><p><strong>访客的系统属性特征</strong>。比如所采用的操作系统、浏览器、域名和访问速度等。</p>
</li>
<li><p><strong>访问特征</strong>。包括停留时间、点击的URL等。</p>
</li>
<li><p><strong>来源特征</strong>。包括网络内容信息类型、内容分类和来访URL等。</p>
</li>
<li><p><strong>产品特征</strong>。包括所访问的产品编号、产品类别、产品颜色、产品价格、产品利润、产品数量和特价等级等</p>
</li>
</ul>
<h3 id="点击流数据模型"><a href="#点击流数据模型" class="headerlink" title="点击流数据模型"></a>点击流数据模型</h3><p><code>点击流这个概念更注重用户浏览网站的整个流程，网站日志中记录的用户点击就像是图上的“点”，而点击流更像是将这些“点”串起来形成的“线”</code></p>
<p><strong>点击流数据是由网站日志中整理得到的</strong></p>
<h4 id="点击流模型生成"><a href="#点击流模型生成" class="headerlink" title="点击流模型生成"></a>点击流模型生成</h4><p><em>点击流数据在具体操作上是由散点状的点击日志数据梳理所得，从而，点击数据在数据建模时应该存在两张模型表（Pageviews和visits)</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JaZcUU.png" alt="JaZcUU.png" border="0">

<p><em>这就是点击流模型。当WEB日志转化成点击流数据的时候，很多网站分析度量的计算变得简单了，这就是点击流的“魔力”所在。基于点击流数据我们可以统计出许多常见的网站分析度量</em></p>
<h2 id="网站流量数据分析的意义"><a href="#网站流量数据分析的意义" class="headerlink" title="网站流量数据分析的意义"></a>网站流量数据分析的意义</h2><p><em>网站流量统计分析，可以帮助网站管理员、运营人员、推广人员等实时获取网站流量信息，并从流量来源、网站内容、网站访客特性等多方面提供网站分析的数据依据。从而<strong>帮助提高网站流量，提升网站用户体验，让访客更多的沉淀下来变成会员或客户，通过更少的投入获取最大化的收入</strong>.</em></p>
<p><strong>终极目标是：改善网站(电商、社交、电影、小说)的运营，获取更高投资回报率（ROI）</strong></p>
<h3 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h3><ul>
<li><p>辅助改进网络的拓扑设计，提高性能</p>
</li>
<li><p>在有高度相关性的节点之间安排快速有效的访问路径</p>
</li>
<li><p>帮助企业更好地设计网站主页和安排网页内容</p>
</li>
</ul>
<h3 id="业务上"><a href="#业务上" class="headerlink" title="业务上"></a>业务上</h3><ul>
<li><p>帮助企业改善市场营销决策，如把广告放在适当的Web页面上。</p>
</li>
<li><p>优化页面及业务流程设计，提高流量转化率。</p>
</li>
<li><p>帮助企业更好地根据客户的兴趣来安排内容。</p>
</li>
<li><p>帮助企业对客户群进行细分，针对不同客户制定个性化的促销策略等</p>
</li>
</ul>
<h2 id="如何进行网站流量分析"><a href="#如何进行网站流量分析" class="headerlink" title="如何进行网站流量分析"></a>如何进行网站流量分析</h2><p><em>流量分析整体来说是一个内涵非常丰富的体系，其整体过程是一个金字塔结构</em></p>
<h3 id="流量分析模型举例"><a href="#流量分析模型举例" class="headerlink" title="流量分析模型举例"></a>流量分析模型举例</h3><h4 id="网站流量质量分析"><a href="#网站流量质量分析" class="headerlink" title="网站流量质量分析"></a>网站流量质量分析</h4><p><em>流量并不是越多越好，应该更加看重流量的质量，换句话来说就是流量可以为我们带来多少收入</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JauesA.png" alt="JauesA.png" border="0">

<h4 id="网站流量多维度细分"><a href="#网站流量多维度细分" class="headerlink" title="网站流量多维度细分"></a>网站流量多维度细分</h4><p><em>细分是指通过不同维度对指标进行分割，查看同一个指标在不同维度下的表现，进而找出有问题的那部分指标，对这部分指标进行优化</em></p>
<img src="https://s1.ax1x.com/2020/04/23/JauuZt.png" alt="JauuZt.png" border="0">

<h4 id="网站内容及导航分析"><a href="#网站内容及导航分析" class="headerlink" title="网站内容及导航分析"></a>网站内容及导航分析</h4><p><em>对于所有网站来说，页面都可以被划分为三个类别: 导航页，功能页， 内容页</em></p>
<p><em>比如从内容导航分析中，以下两类行为就是网站运营者不希望看到的行为：</em></p>
<img src="https://s1.ax1x.com/2020/04/23/Jauli8.png" alt="Jauli8.png" border="0">

<h4 id="网站转化及漏斗分析"><a href="#网站转化及漏斗分析" class="headerlink" title="网站转化及漏斗分析"></a>网站转化及漏斗分析</h4><p><em>所谓<strong>转化</strong>，即网站业务流程中的一个封闭渠道，引导用户按照流程最终实现业务目标（比如商品成交）；而<strong>漏斗模型</strong>则是指进入渠道的用户在各环节递进过程中逐渐流失的形象描述；</em></p>
<p><a href="https://imgchr.com/i/JaMg56" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMg56.png" alt="JaMg56.png" border="0"></a><br><a href="https://imgchr.com/i/JaMcUx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/23/JaMcUx.png" alt="JaMcUx.png" border="0"></a></p>
<h3 id="流量分析常见指标"><a href="#流量分析常见指标" class="headerlink" title="流量分析常见指标"></a>流量分析常见指标</h3><h4 id="基础分析（PV-IP-UV）"><a href="#基础分析（PV-IP-UV）" class="headerlink" title="基础分析（PV,IP,UV）"></a>基础分析（PV,IP,UV）</h4><p><em>page view: 同一个人一天浏览一个网站的多少网页，重复的只算一条</em></p>
<p><em>unique visitor: 同一天，只记录第一次进入网站的具有独立IP的访问者，重复访问不计</em></p>
<p><em>PR：pageRank，网页的级别技术。用于标识一个网站的流行程度。来源google</em></p>
<p><strong>Ø</strong> <strong><em>\</em>趋势分析**</strong>：根据选定的时段，提供网站流量数据，通过流量趋势变化形态，为您分析网站访客的访问规律、网站发展状况提供参考。</p>
<p><strong>Ø</strong> <strong><em>\</em>对比分析**</strong>：根据选定的两个对比时段，提供网站流量在时间上的纵向对比报表，帮您发现网站发展状况、发展规律、流量变化率等。</p>
<p><strong>Ø</strong> <strong><em>\</em>当前在线**</strong>：提供当前时刻站点上的访客量，以及最近15分钟流量、来源、受访、访客变化情况等，方便用户及时了解当前网站流量状况。</p>
<p><strong>Ø</strong> <strong><em>\</em>访问明细**</strong>：提供最近7日的访客访问记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照来源、搜索词等条件进行筛选。 通过访问明细，用户可以详细了解网站流量的累计过程，从而为用户快速找出流量变动原因提供最原始、最准确的依据</p>
<h4 id="来源分析"><a href="#来源分析" class="headerlink" title="来源分析"></a>来源分析</h4><p><strong><em>\</em>来源分类**</strong></p>
<p><strong><em>\</em>搜索引擎**</strong></p>
<p><strong><em>\</em>搜索词**</strong></p>
<p><strong><em>\</em>最近7日的访客搜索记录**</strong></p>
<p><strong><em>\</em>来路域名**</strong></p>
<p><strong><em>\</em>来路页面**</strong></p>
<p><strong><em>\</em>来源升降榜**</strong></p>
<h4 id="受访分析"><a href="#受访分析" class="headerlink" title="受访分析"></a>受访分析</h4><p><strong><em>\</em>受访域名**</strong></p>
<p><strong><em>\</em>受访页面**</strong></p>
<p><strong><em>\</em>受访升降榜**</strong></p>
<p><strong><em>\</em>热点图**</strong></p>
<p><strong><em>\</em>用户视点**</strong></p>
<p><strong><em>\</em>访问轨迹**</strong></p>
<h4 id="访客分析"><a href="#访客分析" class="headerlink" title="访客分析"></a>访客分析</h4><p><strong><em>\</em>地区运营商**</strong></p>
<p><strong><em>\</em>终端详情**</strong></p>
<p><strong><em>\</em>新老访客**</strong></p>
<p><strong><em>\</em>忠诚度**</strong></p>
<p><strong><em>\</em>活跃度**</strong></p>
<h4 id="转化路径分析"><a href="#转化路径分析" class="headerlink" title="转化路径分析"></a>转化路径分析</h4><h5 id="转化定义"><a href="#转化定义" class="headerlink" title="转化定义"></a>转化定义</h5><p><em>访客在您的网站完成了某项您期望的活动，记为一次转化，如注册或下载</em></p>
<h5 id="路径分析"><a href="#路径分析" class="headerlink" title="路径分析"></a>路径分析</h5><p><em>根据设置的特定路线，监测某一流程的完成转化情况，算出每步的转换率和流失率数据，如注册流程，购买流程等</em></p>
<h2 id="整体技术流程及架构"><a href="#整体技术流程及架构" class="headerlink" title="整体技术流程及架构"></a>整体技术流程及架构</h2><h3 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h3><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><p><em>将各服务器上生成的点击流日志通过实时或批量的方式汇聚到HDFS文件系统中</em></p>
<p><em>当然，一个综合分析系统，数据源可能不仅包含**</em>*点击流数据*<strong><em>，还有数据库中的</em></strong>*业务数据*<strong><em>（如用户信息、商品信息、订单信息等）及对分析有益的</em></strong>*外部数据****</p>
<h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p><em>通过mapreduce程序对采集到的点击流数据进行预处理，比如清洗，格式整理，滤除脏数据等</em></p>
<h4 id="数据入库"><a href="#数据入库" class="headerlink" title="数据入库"></a>数据入库</h4><p><em>将预处理之后的数据导入到HIVE仓库中相应的库和表中</em></p>
<h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><p><em>项目的核心内容，即根据需求开发ETL分析语句，得出各种统计结果</em></p>
<h4 id="数据展现"><a href="#数据展现" class="headerlink" title="数据展现"></a>数据展现</h4><p><em>将分析所得数据进行可视化</em></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h2 id="模块开发"><a href="#模块开发" class="headerlink" title="模块开发"></a>模块开发</h2><h3 id="生成log表"><a href="#生成log表" class="headerlink" title="生成log表"></a>生成log表</h3><h3 id="生成pageview表"><a href="#生成pageview表" class="headerlink" title="生成pageview表"></a>生成pageview表</h3><h4 id="WeblogPreProcess类"><a href="#WeblogPreProcess类" class="headerlink" title="WeblogPreProcess类"></a>WeblogPreProcess类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mr.pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogBean;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.bigdata.hive.mrbean.WebLogParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理原始日志，过滤出真实pv请求</span></span><br><span class="line"><span class="comment"> * 转换时间格式</span></span><br><span class="line"><span class="comment"> * 对缺失字段填充默认值</span></span><br><span class="line"><span class="comment"> * 对记录标记valid和invalid</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeblogPreProcessMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="comment">//用来存储网站url分类数据</span></span><br><span class="line">		Set&lt;String&gt; pages = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		Text k = <span class="keyword">new</span> Text();</span><br><span class="line">		NullWritable v = NullWritable.get();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 从外部加载网站url分类数据</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			pages.add(<span class="string">"/about"</span>);</span><br><span class="line">			pages.add(<span class="string">"/black-ip-list/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/cassandra-clustor/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/finance-rhive-repurchase/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-family-roadmap/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-hive-intro/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-zookeeper-intro/"</span>);</span><br><span class="line">			pages.add(<span class="string">"/hadoop-mahout-roadmap/"</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">			String line = value.toString();</span><br><span class="line">			WebLogBean webLogBean = WebLogParser.parser(line);</span><br><span class="line">			<span class="comment">// 过滤js/图片/css等静态资源</span></span><br><span class="line">			WebLogParser.filtStaticResource(webLogBean, pages);</span><br><span class="line">			<span class="comment">/* if (!webLogBean.isValid()) return; */</span></span><br><span class="line">			k.set(webLogBean.toString());</span><br><span class="line">			context.write(k, v);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">		job.setJarByClass(WeblogPreProcess<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		job.setMapperClass(WeblogPreProcessMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//		 FileInputFormat.setInputPaths(job, new Path(args[0]));</span></span><br><span class="line"><span class="comment">//		 FileOutputFormat.setOutputPath(job, new Path(args[1]));</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/input"</span>));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(<span class="string">"c:/weblog/output"</span>));</span><br><span class="line"></span><br><span class="line">		job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="WebLogParser类"><a href="#WebLogParser类" class="headerlink" title="WebLogParser类"></a>WebLogParser类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"dd/MMM/yyyy:HH:mm:ss"</span>, Locale.US);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.US);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebLogBean <span class="title">parser</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">		WebLogBean webLogBean = <span class="keyword">new</span> WebLogBean();</span><br><span class="line">		String[] arr = line.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">if</span> (arr.length &gt; <span class="number">11</span>) &#123;</span><br><span class="line">			webLogBean.setRemote_addr(arr[<span class="number">0</span>]);</span><br><span class="line">			webLogBean.setRemote_user(arr[<span class="number">1</span>]);</span><br><span class="line">			String time_local = formatDate(arr[<span class="number">3</span>].substring(<span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>==time_local) time_local=<span class="string">"-invalid_time-"</span>;</span><br><span class="line">			webLogBean.setTime_local(time_local);</span><br><span class="line">			webLogBean.setRequest(arr[<span class="number">6</span>]);</span><br><span class="line">			webLogBean.setStatus(arr[<span class="number">8</span>]);</span><br><span class="line">			webLogBean.setBody_bytes_sent(arr[<span class="number">9</span>]);</span><br><span class="line">			webLogBean.setHttp_referer(arr[<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果useragent元素较多，拼接useragent</span></span><br><span class="line">			<span class="keyword">if</span> (arr.length &gt; <span class="number">12</span>) &#123;</span><br><span class="line">				StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">11</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">					sb.append(arr[i]);</span><br><span class="line">				&#125;</span><br><span class="line">				webLogBean.setHttp_user_agent(sb.toString());</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				webLogBean.setHttp_user_agent(arr[<span class="number">11</span>]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Integer.parseInt(webLogBean.getStatus()) &gt;= <span class="number">400</span>) &#123;<span class="comment">// 大于400，HTTP错误</span></span><br><span class="line">				webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(<span class="string">"-invalid_time-"</span>.equals(webLogBean.getTime_local()))&#123;</span><br><span class="line">				webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			webLogBean.setValid(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> webLogBean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filtStaticResource</span><span class="params">(WebLogBean bean, Set&lt;String&gt; pages)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pages.contains(bean.getRequest())) &#123;</span><br><span class="line">			bean.setValid(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> df2.format(df1.parse(time_local));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="WebLogBean类"><a href="#WebLogBean类" class="headerlink" title="WebLogBean类"></a>WebLogBean类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.bigdata.hive.mrbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对接外部数据的层，表结构定义最好跟外部数据源保持一致</span></span><br><span class="line"><span class="comment"> * 术语： 贴源表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;<span class="comment">// 判断数据是否合法</span></span><br><span class="line">	<span class="keyword">private</span> String remote_addr;<span class="comment">// 记录客户端的ip地址</span></span><br><span class="line">	<span class="keyword">private</span> String remote_user;<span class="comment">// 记录客户端用户名称,忽略属性"-"</span></span><br><span class="line">	<span class="keyword">private</span> String time_local;<span class="comment">// 记录访问时间与时区</span></span><br><span class="line">	<span class="keyword">private</span> String request;<span class="comment">// 记录请求的url与http协议</span></span><br><span class="line">	<span class="keyword">private</span> String status;<span class="comment">// 记录请求状态；成功是200</span></span><br><span class="line">	<span class="keyword">private</span> String body_bytes_sent;<span class="comment">// 记录发送给客户端文件主体内容大小</span></span><br><span class="line">	<span class="keyword">private</span> String http_referer;<span class="comment">// 用来记录从那个页面链接访问过来的</span></span><br><span class="line">	<span class="keyword">private</span> String http_user_agent;<span class="comment">// 记录客户浏览器的相关信息</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">boolean</span> valid,String remote_addr, String remote_user, String time_local, String request, String status, String body_bytes_sent, String http_referer, String http_user_agent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = valid;</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line">		<span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line">		<span class="keyword">this</span>.time_local = time_local;</span><br><span class="line">		<span class="keyword">this</span>.request = request;</span><br><span class="line">		<span class="keyword">this</span>.status = status;</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line">		<span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRemote_addr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_addr</span><span class="params">(String remote_addr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRemote_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> remote_user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemote_user</span><span class="params">(String remote_user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.remote_user = remote_user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTime_local</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.time_local;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime_local</span><span class="params">(String time_local)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.time_local = time_local;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> request;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.request = request;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.status = status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBody_bytes_sent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> body_bytes_sent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody_bytes_sent</span><span class="params">(String body_bytes_sent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = body_bytes_sent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getHttp_referer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> http_referer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_referer</span><span class="params">(String http_referer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.http_referer = http_referer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getHttp_user_agent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttp_user_agent</span><span class="params">(String http_user_agent)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = http_user_agent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> valid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValid</span><span class="params">(<span class="keyword">boolean</span> valid)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = valid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.append(<span class="keyword">this</span>.valid);</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_addr());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRemote_user());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getTime_local());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getRequest());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getStatus());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getBody_bytes_sent());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_referer());</span><br><span class="line">		sb.append(<span class="string">"\001"</span>).append(<span class="keyword">this</span>.getHttp_user_agent());</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.valid = in.readBoolean();</span><br><span class="line">		<span class="keyword">this</span>.remote_addr = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.remote_user = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.time_local = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.request = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.status = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.body_bytes_sent = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.http_referer = in.readUTF();</span><br><span class="line">		<span class="keyword">this</span>.http_user_agent = in.readUTF();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		out.writeBoolean(<span class="keyword">this</span>.valid);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==remote_addr?<span class="string">""</span>:remote_addr);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==remote_user?<span class="string">""</span>:remote_user);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==time_local?<span class="string">""</span>:time_local);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==request?<span class="string">""</span>:request);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==status?<span class="string">""</span>:status);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==body_bytes_sent?<span class="string">""</span>:body_bytes_sent);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==http_referer?<span class="string">""</span>:http_referer);</span><br><span class="line">		out.writeUTF(<span class="keyword">null</span>==http_user_agent?<span class="string">""</span>:http_user_agent);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生成visit表"><a href="#生成visit表" class="headerlink" title="生成visit表"></a>生成visit表</h3><hr>
<blockquote>
<p>世上所有的惊喜和好运，等于你的人品乘以你的努力。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据行业项目部署实战</category>
      </categories>
      <tags>
        <tag>大数据行业项目部署实战</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-hdfs</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-hdfs.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="HDFS实验"><a href="#HDFS实验" class="headerlink" title="HDFS实验"></a>HDFS实验</h1><h2 id="通过Java-API操作HDFS"><a href="#通过Java-API操作HDFS" class="headerlink" title="通过Java API操作HDFS"></a>通过Java API操作HDFS</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="导入hdfs的jar包"><a href="#导入hdfs的jar包" class="headerlink" title="导入hdfs的jar包"></a>导入hdfs的jar包</h4><p>1.<em>将/usr/…/share/common下；/usr/…/share/common/lib下；/usr/…/share/hdfs/下的jar包导入到hadoop项目下的lib</em></p>
<p>2.<em>eclipse的项目单击右键build path-&gt;configure..-&gt;libraries-&gt;external jars</em></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">putFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	Path src = <span class="keyword">new</span> Path(<span class="string">"/home/ttyong/Public/java/wordCount.txt"</span>);</span><br><span class="line">	Path dst = <span class="keyword">new</span> Path(<span class="string">"/mydir/"</span>);</span><br><span class="line">	fs.copyFromLocalFile(src, dst);</span><br><span class="line">	fs.close();</span><br><span class="line">	System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流拷贝上传</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">putFile_HDFS_byLiuKaoBei</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"/home/ttyong/Public/java/salaryTotal.txt"</span>);</span><br><span class="line">	OutputStream os = fs.create(<span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>));</span><br><span class="line">	IOUtils.copyBytes(is, os, <span class="number">1024</span>);</span><br><span class="line">	is.close();</span><br><span class="line">	os.close();</span><br><span class="line">	fs.close();</span><br><span class="line">	System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		Path src = <span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>);</span><br><span class="line">		Path dst = <span class="keyword">new</span> Path(<span class="string">"/home/ttyong/Public/java/test4.txt"</span>);</span><br><span class="line">		System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"root"</span>);</span><br><span class="line">		fs.copyToLocalFile(src, dst); <span class="comment">//linux</span></span><br><span class="line">		fs.close();</span><br><span class="line">		System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流拷贝下载</span></span><br><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getFile_HDFS_ByLiukaobei</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		InputStream is = fs.open(<span class="keyword">new</span> Path(<span class="string">"/mydir/salaryTotal.txt"</span>));</span><br><span class="line">		OutputStream os = <span class="keyword">new</span> 		       FileOutputStream(<span class="string">"/home/ttyong/Public/java/test5.txt"</span>);</span><br><span class="line">		IOUtils.copyBytes(is, os, <span class="number">1024</span>);</span><br><span class="line">		is.close();</span><br><span class="line">		os.close();</span><br><span class="line">		fs.close();</span><br><span class="line">		System.out.println(<span class="string">"upload successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"root"</span>);</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">		FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">		Path path = <span class="keyword">new</span> Path(<span class="string">"/mydir/test2.txt"</span>);</span><br><span class="line">		FSDataOutputStream os = fs.create(path);</span><br><span class="line">		os.writeBytes(<span class="string">"hello HDFS"</span>);</span><br><span class="line">		os.close();</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sugon.edu.hadoop.hdfs;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteFile_HDFS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">	URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://192.168.206.129:8020"</span>);</span><br><span class="line">	FileSystem fs = FileSystem.get(uri, conf, <span class="string">"ttyong"</span>);</span><br><span class="line">	Path path = <span class="keyword">new</span> Path(<span class="string">"/mydir/test2.txt"</span>);</span><br><span class="line">	fs.delete(path);</span><br><span class="line">	fs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="shell命令访问HDFS"><a href="#shell命令访问HDFS" class="headerlink" title="shell命令访问HDFS"></a>shell命令访问HDFS</h2><h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hdfs</tag>
        <tag>实验课</tag>
      </tags>
  </entry>
  <entry>
    <title>java相关异常</title>
    <url>/java%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="在eclipse里创建java项目，里面没有src"><a href="#在eclipse里创建java项目，里面没有src" class="headerlink" title="在eclipse里创建java项目，里面没有src"></a>在eclipse里创建java项目，里面没有src</h2><p><em>创建项目时不要选择<strong>use project folder as root for sources and class files</strong>.</em></p>
<p>##</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop实验课-mapreduce</title>
    <url>/hadoop%E5%AE%9E%E9%AA%8C%E8%AF%BE-mapreduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="MapReduce实验"><a href="#MapReduce实验" class="headerlink" title="MapReduce实验"></a>MapReduce实验</h2><h3 id="wordcount"><a href="#wordcount" class="headerlink" title="wordcount"></a>wordcount</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h5><p><em>1.将mapreduce的jar包复制到eclipse的hadoop项目的lib里</em></p>
<p><em>/usr/hadoop/…/share/mapreduce/</em></p>
<p><em>/home/…/hadoop/lib/</em></p>
<p><em>2.打开eclipse，在项目上单击右键，build path -&gt; configure ..-&gt;libraries-&gt;add external jars</em></p>
<h4 id="编写wordcount的map-和reduce-函数"><a href="#编写wordcount的map-和reduce-函数" class="headerlink" title="编写wordcount的map()和reduce()函数"></a>编写wordcount的map()和reduce()函数</h4><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		String data = value.toString();</span><br><span class="line">		String[] words = data.split(<span class="string">" "</span>);</span><br><span class="line">		<span class="keyword">for</span>(String w: words) &#123;</span><br><span class="line">			context.write(<span class="keyword">new</span> Text(w), <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text k3, Iterable&lt;IntWritable&gt; v3,</span></span></span><br><span class="line"><span class="function"><span class="params">			Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(IntWritable v : v3) &#123;</span><br><span class="line">			total += v.get();</span><br><span class="line">		&#125;</span><br><span class="line">		context.write(k3, <span class="keyword">new</span> IntWritable(total));		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.wordCount;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordCountMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// </span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(wordCountMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setMapperClass(wordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		job.setReducerClass(wordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="各部门员工薪水总和"><a href="#各部门员工薪水总和" class="headerlink" title="各部门员工薪水总和"></a>各部门员工薪水总和</h3><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p><em>序列化是一种将内存中Java对象转化为其它可存储文件或可跨越计算机传输数据流的一种技术</em></p>
<h4 id="Employee"><a href="#Employee" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">//创建员工对象</span></span><br><span class="line">	Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">	IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		k2.set(e.getDeptno());	</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">		context.write(k2,e); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">			total += v.getSal();</span><br><span class="line">		&#125;</span><br><span class="line">		value.set(total);</span><br><span class="line">		<span class="comment">//输出：          部门号   总额</span></span><br><span class="line">		context.write(k3, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employeeDemo.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个job</span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">		job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">		job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		<span class="comment">//执行任务</span></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p><em>Mapper 划分数据的过程称作为分区（ Partition），负责实现划分的数据的类称为 Partitioner。</em></p>
<p><em>MapReduce 默认的 Partitioner 是 HashPartitioner</em></p>
<h4 id="partitioner"><a href="#partitioner" class="headerlink" title="partitioner"></a>partitioner</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 建立自己的分区规则：根据员工的部门号进行分区</span></span><br><span class="line"><span class="comment">* 根据 Map 的输出 k2 v2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalPatitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* numPartition 参数：建立多少个分区</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(IntWritable k2, Employee v2, <span class="keyword">int</span> numPartition)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如何建立分区</span></span><br><span class="line"><span class="keyword">if</span>(v2.getDeptno() == <span class="number">10</span>)&#123;</span><br><span class="line"><span class="comment">//放入 1 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(v2.getDeptno() == <span class="number">20</span>)&#123;</span><br><span class="line"><span class="comment">//放入 2 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>%numPartition;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//放入 0 号分区中</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>%numPartition;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Employee-1"><a href="#Employee-1" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Writable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line"><span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line"><span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empno = empno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.comm = comm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k1 v1 k2 v2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">//创建员工对象</span></span><br><span class="line">	Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">	IntWritable k2 = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line"><span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置员工的属性</span></span><br><span class="line"><span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line"><span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		k2.set(e.getDeptno());	</span><br><span class="line"><span class="comment">//输出： k2 部门号 v2 员工对象</span></span><br><span class="line">		context.write(k2,e); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Reducer-1"><a href="#Reducer-1" class="headerlink" title="Reducer"></a>Reducer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">Employee</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">	IntWritable value = <span class="keyword">new</span> IntWritable();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable k3, Iterable&lt;Employee&gt; v3,Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//对v3求和，得到该部门的工资总额</span></span><br><span class="line">		<span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(Employee v:v3)&#123;</span><br><span class="line">			total += v.getSal();</span><br><span class="line">		&#125;</span><br><span class="line">		value.set(total);</span><br><span class="line">		<span class="comment">//输出：          部门号   总额</span></span><br><span class="line">		context.write(k3, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.partitioner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">salaryTotalMain</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个job</span></span><br><span class="line">		Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">		job.setJarByClass(salaryTotalMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的mapper和输出的类型k2 v2</span></span><br><span class="line">		job.setMapperClass(salaryTotalMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapOutputValueClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 指定任务的分区规则;指定建立几个分区</span></span><br><span class="line">		job.setPartitionerClass(salaryTotalPatitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//指定job的reducer和输出的类型  k4   v4</span></span><br><span class="line">		job.setReducerClass(salaryTotalReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//指定job的输入和输出的路径</span></span><br><span class="line">		FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">		<span class="comment">//执行任务</span></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><a href="https://imgchr.com/i/YntMjJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntMjJ.md.png" alt="YntMjJ.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/YntKc4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/08/YntKc4.md.png" alt="YntKc4.md.png" border="0"></a></p>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><em>又要排序又要序列化直接继承WritableComparable类; 这个接口继承自writable和comparable接口</em></p>
<h4 id="Main-2"><a href="#Main-2" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建一个 job</span></span><br><span class="line">Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">job.setJarByClass(EmployeeSortMain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的 mapper 和输出的类型 k2 v2</span></span><br><span class="line">job.setMapperClass(EmployeeSortMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputKeyClass(Employee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//指定 job 的输入和输出的路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"><span class="comment">//执行任务</span></span><br><span class="line">job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="comment">//7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Employee</span>,</span></span><br><span class="line"><span class="class"><span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key1, Text value1, Context context)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//数据： 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line">		String data = value1.toString();</span><br><span class="line">		<span class="comment">//分词</span></span><br><span class="line">		String[] words = data.split(<span class="string">","</span>);</span><br><span class="line">		<span class="comment">//创建员工对象</span></span><br><span class="line">		Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">		<span class="comment">//设置员工的属性</span></span><br><span class="line">		<span class="comment">//员工号</span></span><br><span class="line">		e.setEmpno(Integer.parseInt(words[<span class="number">0</span>]));</span><br><span class="line">		<span class="comment">//姓名</span></span><br><span class="line">		e.setEname(words[<span class="number">1</span>]);</span><br><span class="line">		<span class="comment">//职位</span></span><br><span class="line">		e.setJob(words[<span class="number">2</span>]);</span><br><span class="line">		<span class="comment">//老板号（注意：可能没有老板号）</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			e.setMgr(Integer.parseInt(words[<span class="number">3</span>]));</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">			<span class="comment">//没有老板号</span></span><br><span class="line">			e.setMgr(-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//入职日期</span></span><br><span class="line">		e.setHiredate(words[<span class="number">4</span>]);</span><br><span class="line">		<span class="comment">//月薪</span></span><br><span class="line">		e.setSal(Integer.parseInt(words[<span class="number">5</span>]));</span><br><span class="line">		<span class="comment">//奖金（注意：奖金也可能没有）</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			e.setComm(Integer.parseInt(words[<span class="number">6</span>]));</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">			<span class="comment">//没有奖金</span></span><br><span class="line">			e.setComm(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//部门号</span></span><br><span class="line">		e.setDeptno(Integer.parseInt(words[<span class="number">7</span>]));</span><br><span class="line">		<span class="comment">//输出</span></span><br><span class="line">		context.write(e, NullWritable.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Employee-2"><a href="#Employee-2" class="headerlink" title="Employee"></a>Employee</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sudo.edu.hadoop.mapreduce.employee.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="comment">//1．若要把 Employee 作为 key2，则需要实现序列化</span></span><br><span class="line"><span class="comment">//2．员工对象为 Employee 类，可被排序</span></span><br><span class="line"><span class="comment">//数据: 7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> empno;</span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="keyword">private</span> String job;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mgr;</span><br><span class="line"><span class="keyword">private</span> String hiredate;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> comm;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> deptno;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Employee [empno="</span> + empno + <span class="string">", ename="</span> + ename + <span class="string">", sal="</span> + sal + <span class="string">",</span></span><br><span class="line"><span class="string">			deptno="</span> + deptno + <span class="string">"]"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多个列的排序： select * from emp order by deptno,sal;</span></span><br><span class="line">        <span class="comment">//首先按照 deptno 排序</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.deptno &gt; o.getDeptno())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.deptno &lt; o.getDeptno())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果 deptno 相等，按照 sal 排序</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.sal &gt;= o.getSal())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="keyword">this</span>.empno = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.ename = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.job = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.mgr = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.hiredate = input.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.sal = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.comm = input.readInt();</span><br><span class="line">        <span class="keyword">this</span>.deptno = input.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.empno);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.ename);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.job);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.mgr);</span><br><span class="line">        output.writeUTF(<span class="keyword">this</span>.hiredate);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.sal);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.comm);</span><br><span class="line">        output.writeInt(<span class="keyword">this</span>.deptno);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(<span class="keyword">int</span> empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(<span class="keyword">int</span> mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(String hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(<span class="keyword">int</span> comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(<span class="keyword">int</span> deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>人穷没入群，言轻莫劝人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>实验课</tag>
        <tag>mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析-牛顿法</title>
    <url>/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h2 id="不动点迭代"><a href="#不动点迭代" class="headerlink" title="不动点迭代"></a>不动点迭代</h2><h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><img src="https://s1.ax1x.com/2020/04/26/J6OiVO.png" alt="J6OiVO.png" border="0">

<h3 id="简化牛顿法"><a href="#简化牛顿法" class="headerlink" title="简化牛顿法"></a>简化牛顿法</h3><p><a href="https://imgchr.com/i/JQVzCD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVzCD.md.png" alt="JQVzCD.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVXE6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVXE6.md.png" alt="JQVXE6.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVv4O" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVv4O.md.png" alt="JQVv4O.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVjUK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVjUK.md.png" alt="JQVjUK.md.png" border="0"></a><br><a href="https://imgchr.com/i/JQVLHx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/20/JQVLHx.md.png" alt="JQVLHx.md.png" border="0"></a></p>
<h3 id="牛顿下山法"><a href="#牛顿下山法" class="headerlink" title="牛顿下山法"></a>牛顿下山法</h3><h3 id="重根情形"><a href="#重根情形" class="headerlink" title="重根情形"></a>重根情形</h3><h2 id="弦截法"><a href="#弦截法" class="headerlink" title="弦截法"></a>弦截法</h2><h3 id="单点弦截法"><a href="#单点弦截法" class="headerlink" title="单点弦截法"></a>单点弦截法</h3><h3 id="两点弦截法"><a href="#两点弦截法" class="headerlink" title="两点弦截法"></a>两点弦截法</h3><img src="https://s1.ax1x.com/2020/04/26/J6LDgI.png" alt="J6LDgI.png" border="0">

<p><a href="https://blog.csdn.net/qq_40991687/article/details/102004533" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/qq_40991687/article/details/102004533</a></p>
<hr>
<blockquote>
<p>能够摄取必要营养的人要比吃得很多的人更健康，同样地，真正的学者往往不是读了很多书的人，而是读了有用的书的人。</p>
</blockquote>
]]></content>
      <categories>
        <category>数值分析</category>
      </categories>
      <tags>
        <tag>牛顿法</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop理论课-第五章Mapreduce</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%BA%94%E7%AB%A0Mapreduce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h1><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><h3 id="MapReduce是什么？"><a href="#MapReduce是什么？" class="headerlink" title="MapReduce是什么？"></a>MapReduce是什么？</h3><p><em>Mapreduce是一种简化并行计算的编程模型，用于进行大数据量的计算</em></p>
<p><a href="https://imgchr.com/i/GjRro8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRro8.md.png" alt="GjRro8.md.png" border="0"></a></p>
<h3 id="MapReduce设计思想"><a href="#MapReduce设计思想" class="headerlink" title="MapReduce设计思想"></a>MapReduce设计思想</h3><p><a href="https://imgchr.com/i/GjRDdf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjRDdf.md.png" alt="GjRDdf.md.png" border="0"></a></p>
<h3 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h3><h4 id="易于编程"><a href="#易于编程" class="headerlink" title="易于编程"></a>易于编程</h4><h4 id="良好的扩展性"><a href="#良好的扩展性" class="headerlink" title="良好的扩展性"></a>良好的扩展性</h4><h4 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h4><h4 id="擅长对PB级以上海量数据进行离线处理"><a href="#擅长对PB级以上海量数据进行离线处理" class="headerlink" title="擅长对PB级以上海量数据进行离线处理"></a>擅长对PB级以上海量数据进行离线处理</h4><h3 id="MapReduce不擅长的场景"><a href="#MapReduce不擅长的场景" class="headerlink" title="MapReduce不擅长的场景"></a>MapReduce不擅长的场景</h3><h4 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h4><p><em>MapReduce无法像MySQL一样，在毫秒或秒级内返回结果</em></p>
<h4 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h4><p><em>流式计算的输入数据是动态的，而MapReduce的输入数据集是静态的，动态变化</em></p>
<h4 id="DAG-有向图-计算"><a href="#DAG-有向图-计算" class="headerlink" title="DAG(有向图)计算"></a>DAG(有向图)计算</h4><h2 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h2><h3 id="初识MapReduce模型"><a href="#初识MapReduce模型" class="headerlink" title="初识MapReduce模型"></a>初识MapReduce模型</h3><p><a href="https://imgchr.com/i/GjhcWD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhcWD.md.png" alt="GjhcWD.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjhLlQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjhLlQ.md.png" alt="GjhLlQ.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gj4f9U" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj4f9U.md.png" alt="Gj4f9U.png" border="0"></a></p>
<p><em>MR原语:  相同的key为一组，调用一次reduce方法，迭代计算这一组数据</em></p>
<h3 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h3><p><a href="https://imgchr.com/i/Gj5Vgg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5Vgg.md.png" alt="Gj5Vgg.png" border="0"></a></p>
<h3 id="MapReduce模型要点"><a href="#MapReduce模型要点" class="headerlink" title="MapReduce模型要点"></a>MapReduce模型要点</h3><p><a href="https://imgchr.com/i/Gj5cKH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj5cKH.md.png" alt="Gj5cKH.png" border="0"></a></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p><a href="https://imgchr.com/i/Gj7nzT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj7nzT.md.png" alt="Gj7nzT.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gj72Sf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gj72Sf.md.png" alt="Gj72Sf.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjHgE9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjHgE9.md.png" alt="GjHgE9.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gjq4mD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjq4mD.md.png" alt="Gjq4mD.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjvqL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjvqL6.md.png" alt="GjvqL6.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GjxUp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjxUp9.md.png" alt="GjxUp9.png" border="0"></a></p>
<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p><a href="https://imgchr.com/i/Gjzi9J" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gjzi9J.png" alt="Gjzi9J.png" border="0"></a><br><a href="https://imgchr.com/i/GjzCh4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GjzCh4.md.png" alt="GjzCh4.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GvSbyn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSbyn.md.png" alt="GvSbyn.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvSqLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvSqLq.md.png" alt="GvSqLq.md.png" border="0"></a></p>
<h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p><em>序列化和反序列化</em></p>
<p><a href="https://imgchr.com/i/Gvpr7V" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gvpr7V.md.png" alt="Gvpr7V.md.png" border="0"></a><br><a href="https://imgchr.com/i/GvpykT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvpykT.md.png" alt="GvpykT.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/Gv9oKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9oKs.md.png" alt="Gv9oKs.md.png" border="0"></a><br><a href="https://imgchr.com/i/Gv9Trn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/Gv9Trn.md.png" alt="Gv9Trn.md.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GvCtMj" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/13/GvCtMj.md.png" alt="GvCtMj.png" border="0"></a></p>
<h2 id="MapReduce进阶"><a href="#MapReduce进阶" class="headerlink" title="MapReduce进阶"></a>MapReduce进阶</h2><h3 id="mapreduce的输入格式"><a href="#mapreduce的输入格式" class="headerlink" title="mapreduce的输入格式"></a>mapreduce的输入格式</h3><h4 id="物理分片"><a href="#物理分片" class="headerlink" title="物理分片"></a>物理分片</h4><p><em>分割会严格按照设定大小128m或字数分割，可能会造成不符合逻辑的分割</em></p>
<h4 id="逻辑分片"><a href="#逻辑分片" class="headerlink" title="逻辑分片"></a>逻辑分片</h4><h5 id="inputFormat提供一下两个功能："><a href="#inputFormat提供一下两个功能：" class="headerlink" title="inputFormat提供一下两个功能："></a>inputFormat提供一下两个功能：</h5><ul>
<li>数据切分，获得SplitInput（逻辑切片） ，FileInputFormat.getSplits()获取到。</li>
<li>为Mapper提供输入数据</li>
</ul>
<p><em>有多少个SplitInput，就有多少个Mapper<br>TextInputFormat 是默认InputFormat</em></p>
<img src="https://s1.ax1x.com/2020/04/26/JgmCzn.png" alt="JgmCzn.png" border="0">

<p><em>getSplits 方法负责将一个大数据逻辑分成许多片，但每个分片只是一个逻辑上的定义，仅是提供了一个如何将数据分片的方法，并没有物理上的独立存储</em></p>
<p> <em>createRecordReader 方法返回一个 RecordReader 对象，实现了类似的迭代器功能，将某个InputSplit 解析成一个个 key/value 对</em></p>
<h5 id="定位记录边界"><a href="#定位记录边界" class="headerlink" title="定位记录边界"></a>定位记录边界</h5><p><em>为了能识别一条完整的记录，应该添加一些同步标示，如 TextInputFormat 的标示是换行符</em>  </p>
<h4 id="InputFormat-接口实现类"><a href="#InputFormat-接口实现类" class="headerlink" title="InputFormat 接口实现类"></a>InputFormat 接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnVXt.png" alt="JgnVXt.png" border="0">

<h3 id="mapreduce的输出格式"><a href="#mapreduce的输出格式" class="headerlink" title="mapreduce的输出格式"></a>mapreduce的输出格式</h3><h4 id="outputFormat接口"><a href="#outputFormat接口" class="headerlink" title="outputFormat接口"></a>outputFormat接口</h4><p><em>OutputFormat主要用于描述输出数据的格式，通过RecordWriter能够将用户提供的key/value对写入特定格式的文件中</em></p>
<p>（1）TextOutputFormt调用toString()方法把它们转换为字符串<br>（2）NullWritable来省略输出的key或value</p>
<h4 id="outputFormat接口实现类"><a href="#outputFormat接口实现类" class="headerlink" title="outputFormat接口实现类"></a>outputFormat接口实现类</h4><img src="https://s1.ax1x.com/2020/04/26/JgnRAO.png" alt="JgnRAO.png" border="0">



<p><strong>排序</strong>：<em>排序是针对map输出里面的key，没会对value排序；map输出和reduce输入都有排序；作用是提高效率</em></p>
<h3 id="分区Partition"><a href="#分区Partition" class="headerlink" title="分区Partition"></a>分区Partition</h3><h4 id="Partition定义："><a href="#Partition定义：" class="headerlink" title="Partition定义："></a>Partition定义：</h4><p>Mapper任务划分数据的过程称作Partition。<br>负责实现数据的类称作Partitioner，默认的分区是Hash分区 (Hash Partition)</p>
<h4 id="Partition作用："><a href="#Partition作用：" class="headerlink" title="Partition作用："></a>Partition作用：</h4><p>将map阶段产生的所有&lt;key,value&gt;对分配给不同的Reducer 处理，可以将Reduce阶段的处理负载进行分摊</p>
<p><strong>Partition的数量决定Reducer的数量</strong></p>
<h4 id="Hash分区基本原理"><a href="#Hash分区基本原理" class="headerlink" title="Hash分区基本原理"></a>Hash分区基本原理</h4><p><em>计算某个值的hash值，如果结果相同，则放入同一个分区</em></p>
<p><em>Hash分区的作用：把数据打散进行存放，最终是为了避免热块</em></p>
<h4 id="合并Combiner"><a href="#合并Combiner" class="headerlink" title="合并Combiner"></a>合并Combiner</h4><p><em>减少Mapper输出到Reduce的数据量，缓解网络传输瓶颈，提高reducer的执行效率</em></p>
<p><em>需要注意的问题：一定要谨慎使用Combiner<br>有些情况不能使用Combiner —-&gt;  如：求平均值<br>保证引入Combiner以后，不能改变原来的逻辑</em></p>
<p><a href="https://imgchr.com/i/JfsWTI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsWTI.md.png" alt="JfsWTI.md.png" border="0"></a><br><a href="https://imgchr.com/i/JfsR0A" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/27/JfsR0A.md.png" alt="JfsR0A.md.png" border="0"></a></p>
<hr>
<blockquote>
<p>如果今天后悔昨天，那么明天就会后悔今天。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>pythonn文件在命令行包导入问题</title>
    <url>/pythonn%E6%96%87%E4%BB%B6%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8C%85%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="命令行下执行python找不包的解决方法"><a href="#命令行下执行python找不包的解决方法" class="headerlink" title="命令行下执行python找不包的解决方法"></a>命令行下执行python找不包的解决方法</h2><p>1.为什么会出现这样的问题?</p>
<p>包是向下搜索机制.</p>
<p>2.为什么idle中执行没有报找不到包的问题?</p>
<p>python搜索机制,在idle中是以项目为根路径, 所以它的搜索机制是从项目根路径开始向下搜索.</p>
<p>3.为什么命令行执行时会报找不到包的错误?</p>
<p>这是因为命令行执行的时候,是以当前执行的.py文件所在目录级别的下一级开始搜索. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line"></span><br><span class="line">.......web(一级目录)</span><br><span class="line"></span><br><span class="line">       ......sett(二级目录)</span><br><span class="line"></span><br><span class="line">       .......views(二级目录)</span><br><span class="line"></span><br><span class="line">       ......service.py(二级目录)  (这个命令行执行文件.  命令行运行时,提示找不到views以及sett中的包.)</span><br><span class="line"></span><br><span class="line">             .......包搜索级别(三级目录)</span><br></pre></td></tr></table></figure>



<p><strong>法一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">#将根目录加入sys.path中,解决命令行找不到包的问题</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">curPath = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">rootPath = os.path.split(curPath)[<span class="number">0</span>]</span><br><span class="line">sys.path.append(rootPath)</span><br><span class="line"><span class="comment">#########################################################</span></span><br></pre></td></tr></table></figure>

<p><em>以上增加到哪个级别要,根据实际情况,灵活运用.  其实目的就是指定一个顶级目录.来克服向下搜索包的问题.</em></p>
<p><strong>法二</strong></p>
<p><em>在web平级别新建一个py文件. 然后将要执行的py文件导入进去即可.(并不需要作其它操作,看实际情况.)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> service</span><br></pre></td></tr></table></figure>



<p><strong>法三</strong></p>
<p><em>cmd命令行进行项目根目录，采用相对路径去执行该py文件</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd</span><br><span class="line">cd d:\test_project</span><br><span class="line">./main.py  <span class="comment">#相对执行</span></span><br></pre></td></tr></table></figure>



<p><a href="https://www.cnblogs.com/yhleng/p/10330994.html" target="_blank" rel="external nofollow noopener noreferrer"><strong>原文</strong></a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>包导入</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h2><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">数字或字母</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">任意单个字符(除了换行符)</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">零个或多个字符</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">至少一个字符</td>
</tr>
<tr>
<td align="center">？</td>
<td align="center">零个或一个字符</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">前面的表达式匹配n次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配一个空格</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">转义字符</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">（匹配一行字符串的开头）^\d以数字开头</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">（匹配一行字符串的结尾）\d$以数字结尾</td>
</tr>
<tr>
<td align="center">[0-9a-zA-z\_]</td>
<td align="center">一个数字，字符或下划线</td>
</tr>
<tr>
<td align="center">[0-9a-zA-z\_]+</td>
<td align="center">如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等</td>
</tr>
<tr>
<td align="center">\A</td>
<td align="center">匹配字符串的开头</td>
</tr>
<tr>
<td align="center">\Z</td>
<td align="center">匹配字符串的结尾</td>
</tr>
<tr>
<td align="center">.*</td>
<td align="center">贪婪匹配</td>
</tr>
<tr>
<td align="center">.*？</td>
<td align="center">非贪婪匹配(在结尾时可能不会匹配)</td>
</tr>
</tbody></table>
<p><em>下划线是特殊字符需要转义</em></p>
<p><em>字母大写代表与小写意思相反</em></p>
<p><em>使用r’…’可以规避特殊字符</em></p>
<h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p><em>会从字符串的<strong>开头</strong>进行匹配，成功返回<strong>Match</strong>对象；失败返回<strong>None</strong>.</em></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.match(正则表达式，字符串，[修饰符])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">'hello, 122323 world _ this is a regex demo'</span></span><br><span class="line">result = re.match(<span class="string">r'^he.*(/d+).*demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="comment"># 因为.*为贪婪匹配，会尽可能多的匹配</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = <span class="string">'http://weibo.com/comment/KERGCN'</span></span><br><span class="line">result1 = re.match(<span class="string">r'http.*?comment(.*?)'</span>, content) <span class="comment"># 在结尾尽可能少的匹配</span></span><br><span class="line">result2 = re.match(<span class="string">r'http.*?/(.*?)/KERGCN'</span>, content)</span><br><span class="line">print(result1.group(<span class="number">1</span>))</span><br><span class="line">print(result2.group(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comment</span><br></pre></td></tr></table></figure>

<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table>
<thead>
<tr>
<th align="center">修饰符名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">re.I</td>
<td align="center">匹配对大小写不敏感</td>
</tr>
<tr>
<td align="center">re.L</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.M</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center">使.匹配任意字符</td>
</tr>
<tr>
<td align="center">re.U</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p><em>从字符串中寻找是否有匹配的片段；然后返回第一个匹配的结果</em></p>
<p><em>要注意绝大部分的html文本都会包含大量的换行符，所以尽量加上re.S修饰符，避免出现匹配不到的问题</em></p>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h3><p><em>用于把一个反复用的正则表达式生成对象</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = re.compile(regex)</span><br><span class="line">patter.search(<span class="string">'....'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><h4 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(patter, string, flag=<span class="number">0</span>) <span class="comment"># 返回列表</span></span><br></pre></td></tr></table></figure>



<h4 id="re-split"><a href="#re-split" class="headerlink" title="re.split()"></a>re.split()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h4 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer()"></a>re.finditer()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = re.finditer(pattern, string, flag=<span class="number">0</span>) <span class="comment"># 生成正则表达式匹配结果的生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>



<h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><strong>使用（）</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">result.group(<span class="number">0</span>) <span class="comment"># 获取的是原字符串</span></span><br><span class="line">result.group(NO.) <span class="comment"># 获取对应第几个子串</span></span><br><span class="line">result.groups() <span class="comment"># 返回生成的子串元组</span></span><br></pre></td></tr></table></figure>



<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p><em>正则表达式默认都是尽可能多的匹配</em></p>
<h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p><em>在后面加一个?</em></p>
<p>/d+?</p>
<p>.*?</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a b   c'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,]+'</span>, <span class="string">'a,b, c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</span><br><span class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>pip命令</title>
    <url>/pip%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --timeout 8000 package</span><br></pre></td></tr></table></figure>

<h3 id="使用镜像安装"><a href="#使用镜像安装" class="headerlink" title="使用镜像安装"></a>使用镜像安装</h3><h4 id="使用国内镜像源"><a href="#使用国内镜像源" class="headerlink" title="使用国内镜像源"></a>使用国内镜像源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install 包名 -i http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F; --trusted-host pypi.douban.com</span><br><span class="line">这个是豆瓣源</span><br><span class="line">--trusted-host pypi.douban.com 这是为了获得ssl证书的认证，要不然会报错</span><br></pre></td></tr></table></figure>

<p><strong>国内镜像源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">清华：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">阿里云：http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">华中理工大学：http:&#x2F;&#x2F;pypi.hustunique.com&#x2F;</span><br><span class="line"></span><br><span class="line">山东理工大学：http:&#x2F;&#x2F;pypi.sdutlinux.org&#x2F; </span><br><span class="line"></span><br><span class="line">豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="直接修改文件"><a href="#直接修改文件" class="headerlink" title="直接修改文件"></a>直接修改文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p><em>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini。内容同上。本机win10操作系统，目录：C:\Users\DELL\AppData\Roaming\pip\pip.ini</em></p>
<h3 id="pip更新"><a href="#pip更新" class="headerlink" title="pip更新"></a>pip更新</h3><h4 id="python-m-pip-install-–upgrade-pip"><a href="#python-m-pip-install-–upgrade-pip" class="headerlink" title="python -m pip install –upgrade pip"></a>python -m pip install –upgrade pip</h4><h3 id="python版本替换批量迁移模块"><a href="#python版本替换批量迁移模块" class="headerlink" title="python版本替换批量迁移模块"></a>python版本替换批量迁移模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 旧版本Scripts路径下执行</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"># 新版本Scripts路径下执行 </span><br><span class="line">pip install -r requirements.txt -i 镜像源</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- requirements.txt格式</span><br><span class="line">alembic&#x3D;&#x3D;0.8.6</span><br><span class="line">bleach&#x3D;&#x3D;1.4.3</span><br><span class="line">click&#x3D;&#x3D;6.6</span><br><span class="line">dominate&#x3D;&#x3D;2.2.1</span><br><span class="line">Flask&#x3D;&#x3D;0.11.1</span><br></pre></td></tr></table></figure>



<h3 id="包更新"><a href="#包更新" class="headerlink" title="包更新"></a>包更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -U 包名</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python乱码问题</title>
    <url>/python%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<p>一、在文件头部添加如下注释码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coding=&lt;encoding name&gt; 例如，可添加<span class="comment"># coding=utf-8</span></span><br></pre></td></tr></table></figure>



<p>二、在文件头部添加如下两行注释码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: &lt;encoding name&gt; -*- 例如，可添加# -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>



<p>三、在文件头部添加如下两行注释码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim: set fileencoding=&lt;encoding name&gt; : </span></span><br><span class="line">例如，可添加</span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br></pre></td></tr></table></figure>



<p>四、我们可以通过先把中文解码为unicode，然后在转化为gbk来解决这个问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'吃葡萄不吐葡萄皮儿'</span></span><br><span class="line">print(a..decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>))</span><br></pre></td></tr></table></figure>



<p>五、通过改变cmd命令行窗口的输出格式来解决这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chcp <span class="number">65001</span> 就是换成UTF<span class="number">-8</span>代码页</span><br><span class="line">chcp <span class="number">936</span> 可以换回默认的GBK</span><br></pre></td></tr></table></figure>

<p><em>但是这样就降低了脚本的兼容性，在其他环境运行的时候可能还会出现这样的错误</em></p>
<p>————————————————<br>版权声明：本文为CSDN博主「TTOP」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u013634961/article/details/38826189" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u013634961/article/details/38826189</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>python解析库-Xpath</title>
    <url>/python%E8%A7%A3%E6%9E%90%E5%BA%93-Xpath.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f542ab6385dc4a688c65a4a2978a7b295318ddfbad2d1c5cdc690f01c0c507a5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据库-pymongo</title>
    <url>/python%E6%95%B0%E6%8D%AE%E5%BA%93-pymongo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h2><p><strong>[官方文档](<a href="http://api.mongodb.com/python/current/api/pymongo/" target="_blank" rel="external nofollow noopener noreferrer">http://api.mongodb.com/python/current/api/pymongo/</a><br>collection.html)</strong>  </p>
<p><em>MongoDB是 由 C++语言编写的非关系型数据库，是一个基于分布式文件存储的开源数据库系统，其内容存储形式类似JSON对 象 ，它的字段值可以包含其他文档、数组及文档数组，非常灵活。</em></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><em>安装好pymongo并启动服务</em></p>
<h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>) </span><br><span class="line">等同于</span><br><span class="line">client = MogoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="指定数据库"><a href="#指定数据库" class="headerlink" title="指定数据库"></a>指定数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client.数据库名</span><br><span class="line">等同于</span><br><span class="line">db = client[<span class="string">'数据库名'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="指定集合"><a href="#指定集合" class="headerlink" title="指定集合"></a>指定集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection = db.集合名</span><br><span class="line">等同于</span><br><span class="line">collection = db[<span class="string">'集合名'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="insert-，-insert-one-insert-many"><a href="#insert-，-insert-one-insert-many" class="headerlink" title="insert()， insert_one(), insert_many()"></a>insert()， insert_one(), insert_many()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入单条</span></span><br><span class="line">result = collection.insert(&#123;<span class="string">''</span>:<span class="string">""</span>&#125;) <span class="comment"># 会自动为数据产生_id标识，并返回</span></span><br><span class="line"><span class="comment"># 插入多条</span></span><br><span class="line">result = collection.insert([&#123;&#125;, &#123;&#125;]) <span class="comment"># 返回_id集合</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">## python3.x推荐使用下列方式,返回的是InsertOneResult</span></span><br><span class="line">insert_one()</span><br><span class="line">insert_many()</span><br><span class="line">print(result.inserted_id)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure>



<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="find-find-one"><a href="#find-find-one" class="headerlink" title="find(), find_one()"></a>find(), find_one()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="comment"># 得到一个结果</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"a"</span>:<span class="string">"b"</span>&#125;) <span class="comment"># 没有返回None</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"_id"</span>:<span class="string">"ObjectId('1325645654')"</span>&#125;)</span><br><span class="line"><span class="comment"># 得到生成器对象</span></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:<span class="string">"20"</span>&#125;) <span class="comment"># pymongo.cursor</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;) <span class="comment"># 大于20的</span></span><br></pre></td></tr></table></figure>

<h5 id="随机查询"><a href="#随机查询" class="headerlink" title="随机查询"></a>随机查询</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">results = collection.aggregate([ &#123;<span class="string">'$sample'</span>: &#123;<span class="string">'size'</span>:<span class="number">2000</span>&#125;&#125;]) <span class="comment"># 生成生成器</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>





<h5 id="比较符"><a href="#比较符" class="headerlink" title="比较符"></a>比较符</h5><p><a href="https://imgchr.com/i/GyHdBV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/06/GyHdBV.png" alt="GyHdBV.png" border="0" width="600/"></a></p>
<h5 id="用正则表达式"><a href="#用正则表达式" class="headerlink" title="用正则表达式"></a>用正则表达式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find (&#123; <span class="string">'name'</span>: &#123;<span class="string">'$ regex'</span>:<span class="string">'^M.*'</span>&#125;&#125; )</span><br><span class="line"><span class="comment"># 这里使用$regex来指定正则匹配，人M.*代表以 M 开头的正则表达式。</span></span><br></pre></td></tr></table></figure>

<h5 id="功能符"><a href="#功能符" class="headerlink" title="功能符"></a>功能符</h5><img src="https://s1.ax1x.com/2020/04/06/GybBrt.png" alt="GybBrt.png" border="0" width="600/">



<h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = colletion.find().count()</span><br></pre></td></tr></table></figure>



<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = colletion.find().sort(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure>

<p><em>这里我们调用pymongo.ASCENDING指定升序。如果要降序排列，可以传入pymongo.DESCENDING</em>  </p>
<h3 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h3><h4 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> resuLt <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>, <span class="string">'Mike'</span>]</span><br></pre></td></tr></table></figure>

<p><em>值得注意的是，在数据库数量非常庞大的时候，如千万、亿级别，最好不要使用大的偏移量来查询数据，因为这样很可能导致内存溢出。此时可以使用类似如下操作来查询</em>  </p>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h4><p><em>设置结果个数</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line">运行结果如下：</span><br><span class="line">[<span class="string">'Kevin'</span>, <span class="string">'Mark'</span>]</span><br></pre></td></tr></table></figure>



<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">condition &#x3D; &#123;&quot;d&quot;: &#39;c&#39;&#125;</span><br><span class="line">dict &#x3D; colletion.find_one(condition)</span><br><span class="line">dict[&quot;a&quot;] &#x3D; &quot;b&quot;</span><br><span class="line">collection.update(condition, dict) &#x2F;&#x2F; 覆盖以前的所有</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&#123;&#39;ok&#39;: 1, &#39;nModified*: 1, &#39;n&#39;: 1, &#39;updatedExisting&#39;: True&#125;</span><br><span class="line"></span><br><span class="line">collection.update(condition, &#123;&#39;$set&#39;: dict&#125;) &#x2F;&#x2F; 只更新存在的字段，其它字段不会删除</span><br></pre></td></tr></table></figure>

<p><em>update( ) 方 法 其 实 也 是 官 方 不 推 荐 使 用 的 方 法 。这 里 也 分 为 update_one()方法和updatejnany()方法，用法更加严格，它们的第二个参数需要使用$类型操作符作为字典的键名</em></p>
<h4 id="update-one"><a href="#update-one" class="headerlink" title="update_one()"></a>update_one()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="update-many"><a href="#update-many" class="headerlink" title="update_many()"></a>update_many()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>其返回结果是UpdateResult类型。然后分别J调用 matched_count和 modified_count<br>属性，可以获得匹配的数据条数和影响的数据条数</em></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colletion.remove(condition)</span><br></pre></td></tr></table></figure>

<h4 id="delete-one"><a href="#delete-one" class="headerlink" title="delete_one()"></a>delete_one()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.delete_one(condtion)</span><br></pre></td></tr></table></figure>

<h4 id="delete-many"><a href="#delete-many" class="headerlink" title="delete_many()"></a>delete_many()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colletion.delete_one(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$lt'</span>: <span class="number">25</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><em>它们的返回结果 都 是 DeleteResult类型，可以调用deleted_count属性获取删除的数据条数。</em>  </p>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><em>另外， PyMongo 还提供了一些组合方法，女口find_one_and_delete()、 find_one_and_replace()和find_one_and_update(),它们是查找后删除、替换和更新操作，其用法与上述方法基本一致。另外，还可以对索引进行操作，相 关 方 法 有 create_index()、 create_indexes()和 drop_index()等。</em>  </p>
<hr>
<blockquote>
<p>钟表可以回到起点，但永远不会回到昨天。</p>
</blockquote>
]]></content>
      <categories>
        <category>python数据库</category>
      </categories>
      <tags>
        <tag>pymongo</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="20代表一个空格的意思"><a href="#20代表一个空格的意思" class="headerlink" title="%20代表一个空格的意思"></a>%20代表一个空格的意思</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>python的HTTP的请求库-Request</title>
    <url>/python%E7%9A%84HTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93-Request.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h1 id="Request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h1><p><em>常用的url请求库，是python的第三方库</em></p>
<p><a href="http://www.python-requests.org" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<p><a href="http://docs.python-requests.org/zh_CN/latest" target="_blank" rel="external nofollow noopener noreferrer">中文文档</a></p>
<h2 id="安装Request"><a href="#安装Request" class="headerlink" title="安装Request"></a>安装Request</h2><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> request</span><br></pre></td></tr></table></figure>

<h3 id="wheel安装"><a href="#wheel安装" class="headerlink" title="wheel安装"></a>wheel安装</h3><p><em>wheel是 <strong>Python</strong>的一种<strong>安装包</strong>，其后缀为<strong>.whl</strong>,在网速较差的情况下可以选择<strong>下载wheel文件</strong>再安装，<strong>然后直接用p ip3命令加文件名安装即可</strong>。不过在这之前<strong>需要先安装wheel库</strong>：</em>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install wheel</span><br></pre></td></tr></table></figure>

<p><em>然后在<strong>PyPI</strong>上下载对应的wheel文件。进入cmd中进入下载路径：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install xxxx.whl</span><br></pre></td></tr></table></figure>

<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p><em>如果你不想用pip来安装，或者想获取某一特定版本，可以<strong>选择下载源码</strong>安装。此种方式需要先找到此库的源码地址，然后下载下来再用命令安装</em></p>
<p>  <em>requests 项 目的地址是： <a href="https://github.com/kennethreitz/requests" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/kennethreitz/requests</a></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- git下载源代码</span><br><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;kennethieitz&#x2F;requests.git</span><br><span class="line"></span><br><span class="line">-- 或者使用curl下载</span><br><span class="line">curl -OL https:&#x2F;&#x2F;github.com&#x2F;kennethreitz&#x2F;:requests&#x2F;tmrba]l&#x2F;nimster</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">-- 下载下来之后，进入目录，执行如下命令即可安装：</span><br><span class="line"><span class="built_in">cd</span> requests</span><br><span class="line">python3 setup.py install</span><br><span class="line">-- 命令执行结束后即可完成requests的安装</span><br></pre></td></tr></table></figure>

<h2 id="Request库使用"><a href="#Request库使用" class="headerlink" title="Request库使用"></a>Request库使用</h2><p><em><a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 请求为get请求时作出响应，返回请求头信息</em></p>
<p><em>*<a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a>, 请求为get请求时作出响应，返回请求头信息</em></p>
<h3 id="七个主要方法"><a href="#七个主要方法" class="headerlink" title="七个主要方法"></a>七个主要方法</h3><p><em>request(), get(), head(), put(), post(), patch(), delete()</em></p>
<h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p><em>请求的链接为<a href="http://httpbin.org/get" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/get</a>, 该网站会判断如果客户端发起的是GET请求的话，它返回相应的请求信息</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">r = requests.get(url)</span><br></pre></td></tr></table></figure>

<h4 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h4><p><em>用于url添加参数</em></p>
<p><em>通常参数都是以字典形式存储的</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">r = requests.get(url, params=data)</span><br></pre></td></tr></table></figure>

<h4 id="headers参数"><a href="#headers参数" class="headerlink" title="headers参数"></a>headers参数</h4><p><em>里面有的字段可以是User-Agent, Cookies, Host等</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">headers = &#123;'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_ll_4) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line">Chrome/52・0.2743・116 Safari/537・36'</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>



<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><h5 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h5><p><em>返回类型实际上是*</em>str类型<strong>，但是它很特殊，是 **JSON格式的</strong>，调 用 jso n()方法，就可以将返回结果是JSON格式的字符串转化为<strong>字典*</strong>  </p>
<p><em>如果返回结果不是JSON格式，便会出现解析错误，抛出json.decoder.JSONDecodeErrar<br>异常</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">r = requests.get("http://httpbin.org/get")</span><br><span class="line">print(type(r.text))</span><br><span class="line">print(r.json())</span><br><span class="line">print(type(r.json())</span><br></pre></td></tr></table></figure>

<h5 id="r-text"><a href="#r-text" class="headerlink" title="r.text"></a>r.text</h5><h5 id="r-status-code"><a href="#r-status-code" class="headerlink" title="r.status_code"></a>r.status_code</h5><h5 id="r-encoding和r-apparent-encoding"><a href="#r-encoding和r-apparent-encoding" class="headerlink" title="r.encoding和r.apparent_encoding"></a>r.encoding和r.apparent_encoding</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- encoding 从header中猜测的编码方式</span><br><span class="line">-- apparent_encoding 从内容分析的编码格式</span><br><span class="line">r.encodeing = r.apparent_encoding</span><br></pre></td></tr></table></figure>

<h5 id="r-url"><a href="#r-url" class="headerlink" title="r.url"></a>r.url</h5><h5 id="r-content"><a href="#r-content" class="headerlink" title="r.content"></a>r.content</h5><h5 id="r-history"><a href="#r-history" class="headerlink" title="r.history"></a>r.history</h5><h5 id="r-cookies"><a href="#r-cookies" class="headerlink" title="r.cookies"></a>r.cookies</h5><h4 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h4><p><em>通常是直接返回html文本或json格式数据</em></p>
<h4 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h4><p><em>图片、音 频 、视频这些文件本质上都是由二进制码组成的，想要抓取它们，就要拿到它们的二进制码</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url) <span class="comment"># 假设这里是图片链接</span></span><br><span class="line">print(r.text) <span class="comment"># 乱码</span></span><br><span class="line">print(r.content) <span class="comment"># 二进制数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure>
<h4 id="内置状态码查询对象"><a href="#内置状态码查询对象" class="headerlink" title="内置状态码查询对象"></a>内置状态码查询对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> print(<span class="string">'requests Successfully'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br></pre></td></tr></table></figure>

<p><em>提交内容在form字段中</em></p>
<h4 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h4><p><em>方法和get响应结果差不多</em></p>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text) <span class="comment"># 在请求头的files字段</span></span><br></pre></td></tr></table></figure>

<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><h5 id="通过headers参数添加cookies"><a href="#通过headers参数添加cookies" class="headerlink" title="通过headers参数添加cookies"></a>通过headers参数添加cookies</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line">cookies = r.cookies  <span class="comment"># 可以发现它是RequestCookieJar类型。</span></span><br><span class="line">然 后 用 items。 方法将其转化为元组组成的列表</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以直接用Cookie来维持登录状态</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: <span class="string">'.....'</span>, <span class="string">'Host'</span>: <span class="string">'...'</span>, <span class="string">'User-Agent'</span>: <span class="string">'....'</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>

<h5 id="通过cookies模块"><a href="#通过cookies模块" class="headerlink" title="通过cookies模块"></a>通过cookies模块</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookies = <span class="string">'x=xxxx;x=xxxxx;x=xxxx'</span></span><br><span class="line">jar = requests.cookies.RquestsCookieJar()</span><br><span class="line">headers = &#123;<span class="string">'Host'</span>: <span class="string">'xxx'</span>, <span class="string">'User-Agent'</span>: <span class="string">'xxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies.split(<span class="string">';'</span>):</span><br><span class="line">    key, value = cooke.split(<span class="string">'='</span>, <span class="number">1</span>)</span><br><span class="line">    jar.set(key, value)</span><br><span class="line">r = requests.get(url, cookies=jar, headers=headers)</span><br></pre></td></tr></table></figure>

<h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><p><em>在 requests中，如果直接利用g et()或 post()等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的会话，也就是说相当于你用了两个浏览器打开了不同的页面</em></p>
<h5 id="请求时设置相同的Cookies"><a href="#请求时设置相同的Cookies" class="headerlink" title="请求时设置相同的Cookies"></a>请求时设置相同的Cookies</h5><p><em>这种方法比较麻烦</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例</span></span><br><span class="line">r1 = requests.post(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br><span class="line">r2 = requests.get(xxx, headers=&#123;...,<span class="string">'Cookies'</span>=<span class="string">'xxx'</span>,....&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text) <span class="comment"># &#123;"cookies": &#123;"number": "123456789"&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h4><p><em>requests还提供证书验证。当请求有些url时，会检查ssl证书，如12306</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line">/*requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', *tls_process_server_certificate',</span></span><br><span class="line"><span class="string">'certificate verify failed')],)"</span>,)*/</span><br></pre></td></tr></table></figure>

<p><em>请求一个HTTPS站点，但是证书验证错误，就会报错。可以通过设置*</em>verify参数<strong>的值为</strong>False***</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code) </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">/*/usr/local/lib/python3<span class="number">.6</span>/site-packages/urllib3/connectionpool.py:<span class="number">852</span>: InsecureRequestWarning: Unverified</span><br><span class="line">HTTPS request <span class="keyword">is</span> being made. Adding certificate verification <span class="keyword">is</span> strongly advised. See:</span><br><span class="line">https://urllib3•readthedocs.io/en/latest/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">InsecureRequestWarning)</span><br><span class="line"><span class="number">200</span>*/</span><br></pre></td></tr></table></figure>

<p><em>不过我们发现<strong>报了一个警告</strong>，它建议我们给它指定证书。我们可以通过<strong>设置忽略警告</strong>的方式来屏蔽这个警告</em>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置屏蔽</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requets.packages <span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(r.status_code) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 捕获警告到日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">logging.captureWarning(<span class="literal">True</span>)</span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定一个本地证书到客户端证书</span><br><span class="line">r &#x3D; requests.get(url, cert&#x3D;(&#39;&#x2F;path&#x2F;server.crt&#39;, &#39;&#x2F;path&#x2F;key&#39;))</span><br></pre></td></tr></table></figure>

<p><em>当然，我们也可以指定一个本地证书用作客户端证书，这可以是单个文件(包含密钥和证书)或<br>一个包含两个文件路径的元组。当然，上面的代码是演示实例，我 们 需 要 有crt和 key文件，并且指定它们的路径。注意，本地私有证书的key必须是解密状态，加密状态的key是不支持的</em></p>
<h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p><em>由于频繁访问，可能会被限制IP或封IP</em></p>
<p><em>网站可能会弹出验证码，或者跳转到登录认证页面，更甚者可能会宜接封禁客户端<br>的 I P , 导致一定时间段内无法访问</em></p>
<h5 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'xxxx'</span>, <span class="string">'https'</span>: <span class="string">'xxxx'</span>&#125;</span><br><span class="line">requets.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<p><em>若代理需要使用HTTP Basic A u th ,可以使用类似<a href="http://user:password@host:port这样的语法来设置代理" rel="external nofollow noopener noreferrer" target="_blank">http://user:password@host:port这样的语法来设置代理</a></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;<span class="string">'http'</span>: <span class="string">'http://user:password@10.10.1.10:3128'</span>&#125;  </span><br><span class="line"></span><br><span class="line">requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<h5 id="SOCKS协议代理"><a href="#SOCKS协议代理" class="headerlink" title="SOCKS协议代理"></a>SOCKS协议代理</h5><p><em>除了基本的HTTP代理外, requests还 支 持 SOCKS协议的代理</em></p>
<p><em>首先，需要 安 装 socks这个库</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="string">'requests[socks]'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies=&#123;<span class="string">'http'</span>:<span class="string">'socks5://user:password@host:port'</span>, <span class="string">'https'</span>: <span class="string">'socks5://user:password@host:port'</span>&#125;</span><br><span class="line">r = requests.get(url, proxies=proxies)</span><br></pre></td></tr></table></figure>

<h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><p><em>为了防止服务器不能及时响应，应该设置一个超时时间，即超过了这个时间还没有得到响应，那就报错。这需要用到timeout参数</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><em>实际上，请求分为两个阶段，即 连 接 (co n n e ct)和 读 取 ( read )<br>上面设置的tim eout将用作连接和读取这二者的tim eout总和</em></p>
<p><em>如果要分别指定，就可以传入一个元组：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url, timeout=(<span class="number">5</span>, <span class="number">11</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<p><em>如果想永久等待，可以直接将tim eout设置为 N on e,或者不设置直接留空，因为默认是None</em></p>
<hr>
<blockquote>
<p>有些路需要一个人走，有些事需要一个人扛，星光不问赶路人，时光不负有心人。</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>request库</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用用法积累</title>
    <url>/python%E7%94%A8%E6%B3%95%E7%A7%AF%E7%B4%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><h3 id="print-“a”-“b”-“c”-sep-’-n’"><a href="#print-“a”-“b”-“c”-sep-’-n’" class="headerlink" title="print(“a”, “b”, “c”, sep=’\n’)"></a>print(“a”, “b”, “c”, sep=’\n’)</h3><p><em>a, b, c隔行打印</em></p>
<h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><h3 id="isinstance-e-reason-socket-timeout"><a href="#isinstance-e-reason-socket-timeout" class="headerlink" title="isinstance(e.reason, socket.timeout)"></a>isinstance(e.reason, socket.timeout)</h3><p><em>是在urllib实例看到的</em></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变"><a href="#一个数组-不论是字符型还是数值型-，另一个元组引用它，更改新的元组后，旧元组也会改变" class="headerlink" title="一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变"></a>一个数组(不论是字符型还是数值型)，另一个元组引用它，更改新的元组后，旧元组也会改变</h3><h2 id="’xx’-join-‘a’-‘b’-‘c’"><a href="#’xx’-join-‘a’-‘b’-‘c’" class="headerlink" title="’xx’.join([‘a’, ‘b’, ‘c’])"></a>’xx’.join([‘a’, ‘b’, ‘c’])</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(’xx<span class="string">'.join(['</span>a<span class="string">', '</span><span class="string">b', '</span>c<span class="string">']))</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; axxbxxc</span></span><br></pre></td></tr></table></figure>

<h2 id="print-‘a’-‘b’-‘c’"><a href="#print-‘a’-‘b’-‘c’" class="headerlink" title="print(*[‘a’, ‘b’, ‘c’])"></a>print(*[‘a’, ‘b’, ‘c’])</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a b c</span><br></pre></td></tr></table></figure>



<h2 id="表达式-for-r-in-x"><a href="#表达式-for-r-in-x" class="headerlink" title="[表达式 for r in x]"></a>[表达式 for r in x]</h2><p><em>得到数组</em></p>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul>
<li>‘kdjkf%skdk%d’%(‘xxx’, 5)</li>
<li>‘{0}dfsef{1}’.format(4, 5)</li>
</ul>
<hr>
<blockquote>
<p>不见黄河心不死，不撞南墙头不回。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>常用用法</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫相关知识</title>
    <url>/python%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="HTTP和POST测试"><a href="#HTTP和POST测试" class="headerlink" title="HTTP和POST测试"></a>HTTP和POST测试</h2><p>​    <strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p>
<p>​    <strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p>
<h2 id="if-isinstance-e-reason-socket-timeout"><a href="#if-isinstance-e-reason-socket-timeout" class="headerlink" title="if isinstance(e.reason, socket.timeout)"></a>if isinstance(e.reason, socket.timeout)</h2><h2 id="一个标准的url格式"><a href="#一个标准的url格式" class="headerlink" title="一个标准的url格式"></a>一个标准的url格式</h2><p><strong>scheme://netloc/path;params?query#fragment</strong></p>
<p><em>//前面的就是scheme，代表协议；第一个/符号前面便是n e tlo c ,即域名，后面是 p a th ,即访问路径；分号;前面是param s,代表参数；问号?后面是查询条件query, 一般用作GET类型的URL；#后面是锚点，用于直接定位页面内部的下拉位置。</em></p>
<h2 id="网页标签属性值之间有空格，代表这是两个值"><a href="#网页标签属性值之间有空格，代表这是两个值" class="headerlink" title="网页标签属性值之间有空格，代表这是两个值"></a>网页标签属性值之间有空格，代表这是两个值</h2><p>**&lt;li class=”li li-first”xa href =”link.html”&gt;first item&lt;/ax/li&gt;  **</p>
<p><em>li和li-first就是两个不同的值</em></p>
<hr>
<blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>python的HTTP请求库-Urllib</title>
    <url>/python%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E5%BA%93-Urllib.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>





<h1 id="使用urrlib"><a href="#使用urrlib" class="headerlink" title="使用urrlib"></a>使用urrlib</h1><p><strong><a href="https://docs.python.Org/3/library/urllib.html" target="_blank" rel="external nofollow noopener noreferrer">Urllib官方文档</a></strong></p>
<p><em>是python的内置的HTTP请求库</em></p>
<p>python3不存在urllib2的说法，统一为urllib*</p>
<h2 id="包括如下四个模块："><a href="#包括如下四个模块：" class="headerlink" title="包括如下四个模块："></a>包括如下四个模块：</h2><ul>
<li>request</li>
</ul>
<p><em>它是最基本的HTTP请求模块，可以用来模拟发送请求。就像在浏览器里输入网址<br>然后回车一样，只需要给库方法传入U R L 以及额外的参数，就可以模拟实现这个过程了</em></p>
<ul>
<li>error</li>
</ul>
<p><em>异常处理模块，如果出现请求错误，我们可以捕获这些异常，然后进行重试或其他操<br>作以保证程序不会意外终止</em></p>
<ul>
<li>parse</li>
</ul>
<p><em>一个工具模块，提供了许多URL处理方法，比如拆分、解析 、合并等</em></p>
<ul>
<li>robotparser</li>
</ul>
<p><em>主要是用来识别网站的robots.txt文件，然后判断哪些网站可以爬，哪些网站不<br>可以爬，它其实用得比较少。</em></p>
<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p><em>使 用 urllib的 request模块，我们可以方便地实现请求的发送并得到响应</em></p>
<h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h3><p><strong><a href="https://docs.python.Org/3/library/urllib.request.htmlo" target="_blank" rel="external nofollow noopener noreferrer">urlopen()官方文档</a></strong></p>
<p><strong>urllib .request</strong>模 块 提 供 了 最 基 本 的 构 造HTTP请 求 的 方 法 ，利用它可以模拟浏览器的一个请求发 起 过 程 ，同 时 它 还 带 有 处 理<strong>授 权 验 证 (authenticaton )</strong>、<strong>重 定 向 (redirection)、 浏 览 器 Cookies</strong>以及其他内容 。</p>
<h4 id="请求方法urllib-request"><a href="#请求方法urllib-request" class="headerlink" title="请求方法urllib.request"></a>请求方法urllib.request</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line">print(type(response)) <span class="comment"># &lt;class 'http.client.HTTPResponse'&gt;</span></span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<h5 id="响应response常用方法"><a href="#响应response常用方法" class="headerlink" title="响应response常用方法"></a>响应response常用方法</h5><p><em>response是一个 HTTPResposne 类 型 的 对 象 ，主要包含 read(), readinto(), getheader(name),getheaders(), fileno ()等 方 法 ，以及 msg、 version, status, reason, debuglevel, closed 等 属 性 。</em>  </p>
<ul>
<li>read()</li>
</ul>
<p><em>获取响应体</em></p>
<ul>
<li>status</li>
</ul>
<p><em>响应状态码</em></p>
<ul>
<li>getheaders()</li>
</ul>
<p><em>获取响应头</em></p>
<ul>
<li>getheaders(‘server’)</li>
</ul>
<p><em>输入参数server，返回服务器类型</em></p>
<h5 id="链接传参"><a href="#链接传参" class="headerlink" title="链接传参"></a>链接传参</h5><p>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)  </p>
<ul>
<li>data</li>
</ul>
<p><em>data参数是可选的。如果要添加该参数，并且<strong>如果它是字节流编码格式的内容，即 bytes类型，则需要通过bytes()方法转化</strong>。另外，如果传递了这个参数，则它的请求方式就不再是GET方式，而是 POST方式</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf-8'</span>) <span class="comment"># urlencode()将字典转换为字符串；bytes()将字符串转换为字节流</span></span><br><span class="line">response = urllib.request.urlopen(url, data=data)</span><br></pre></td></tr></table></figure>



<p><strong><a href="http://httpbin.org" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org</a></strong>提供HTTP测试</p>
<p><strong><a href="http://httpbin.org/post" target="_blank" rel="external nofollow noopener noreferrer">http://httpbin.org/post</a></strong>提供POST测试</p>
<ul>
<li>timeout</li>
</ul>
<p><em>timeout参数用于设置超时时间，单位为秒，意思就是如果请求超出了设置的这个时间，还没有得到响应，就会抛出异常。如果不指定该参数，就会使用全局默认时间。</em>  </p>
<p><strong>超时报urllib.error.URLError</strong></p>
<p>使用try except:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(url, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">"Time Out"</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li>其它参数</li>
</ul>
<p><strong>context</strong></p>
<p><em>它必须是ssl.SSLContext类型，用来指定SSL设置</em></p>
<p><strong>cafile和capath</strong></p>
<p><em>这两个参数分别指定C A 证书和它的路径，这个在请求HTTPS链接时会<br>有用</em></p>
<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><em>urlopen只能用于简单的请求</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<p><em>可以发现，我们依然是用urlopen()方法来发送这个请求，只不过这次该方法的参数不再是URL,而是一个Request类型的对象。通过构造这个数据结构，一方面我们可以将请求独立成一个对象，另一方面可更加丰富和灵活地配置参数。</em></p>
<h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><p>  *<em>urllib.request.Request(url, data=None, headers={},origin_req_host=None, unverifiable=False, method=None)  *</em></p>
<ul>
<li>data</li>
</ul>
<p><em>data 如果要传，必须传bytes (字节流 )类型的 。如果它是字典，可以先用<br>urllib.parse 模块里的 urlencode()编码</em></p>
<ul>
<li>headers</li>
</ul>
<p><em>headers是一个字典，它就是请求头，我们可以在构造请求时通过headers参数直接构造，也可以通过调用请求实例的add_header()方法添加。</em>  </p>
<p><em>添加请求头最常用的用法就是通过修改User-Agent来伪装浏览器，默 认 的 User-Agent是Python-urllib,我们可以通过修改它来伪装浏览器。比如要伪装火狐浏览器，你可以把它设置为：</em><br><strong>Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11</strong>  </p>
<ul>
<li>origin_req_host</li>
</ul>
<p><em>origin_req_host指的是请求方的host名称或者IP 地址</em></p>
<ul>
<li>unverifiable</li>
</ul>
<p><em>unverifiable表示这个请求是否是无法验证的，默认是F a ls e ,意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个HTML文档中的图片，但是我们没有自动抓取图像的权限，这 时 u nverifiable的值就是True。</em>  </p>
<ul>
<li>method</li>
</ul>
<p><em>method是一个字符串，用来指示请求使用的方法，比如GET、 POST和 PUT等。</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">dict = &#123;<span class="string">"a"</span>: <span class="string">"b"</span>&#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(dict), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'.....'</span></span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url, data=data, headers=headers, method=<span class="string">'POST'</span>)</span><br><span class="line"><span class="comment"># request.add_header('user-agent')也可以</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br></pre></td></tr></table></figure>



<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>[handler官方文档](<a href="https://docs.python" target="_blank" rel="external nofollow noopener noreferrer">https://docs.python</a>.<br>org/3/library/urllib.request.html#urllib.request.BaseHandlero  )</p>
<p><em>上面无法处理代理，cookies的情况</em></p>
<p><em>简而言之，我们可以把它理解为各种处理器， 有专门处理登录验证的，有处理 Cookies的，有处理代理设置的。利用它们，我们几乎可以做到HTTP请求中所有的事情。</em>  </p>
<p><em>首先，介绍一下urllib.request模块里的BaseHandler类 ，它是所有其他Handler的父类， 它提供了最基本的方法，例如 default_open(). protocol_request()等。</em></p>
<p><strong>有各种Handler子类继承这个BaseHandler类，举例如下 ：</strong></p>
<p>□ HTTPDefaultErrorHandler： 用于处理HTTP响应错误，错误都会抛岀HTTPError类型的异常。<br>□ HTTPRedirectHandler: 用于处理重定向。<br>□ HTTPCookieProcessor: 用于处理 Cookies<br>□ ProxyHandler： 用于设置代理，默认代理为空。<br>□ HTTPPasswordMgr： 用于管理密码，它维护了用户名和密码的表。<br>□ HTTPBasicAuthHandler： 用于管理认证，如果一个链接打开时需要认证，那么可以用它来解决认证问题。  </p>
<h6 id="OpenerDirector"><a href="#OpenerDirector" class="headerlink" title="OpenerDirector"></a>OpenerDirector</h6><p><em>那么，为什么要引入Opener呢？因为需要实现更高级的功能。之前使用的Request和 urlopen()相当于类库为你封装好了极其常用的请求方法，利用它们可以完成基本的请求，但是现在不一样了，我们需要实现更高级的功能，所以需要深入一层进行配置，使用更底层的实例来完成操作，所以这里就用到了 0pener</em></p>
<p><strong>当打开网页弹出提示框要求输入密码，账号时：</strong></p>
<p><a href="https://imgchr.com/i/G0g65F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/G0g65F.png" alt="G0g65F.png" border="0"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line">url = <span class="string">'http://localhost:5000/'</span></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">p.add_password(<span class="literal">None</span>, url, username, password)</span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line">opener = build_opener(auth_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	result = opener.open(url)</span><br><span class="line">	html = result.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">	print(html)</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">	print(e.reason)</span><br></pre></td></tr></table></figure>



<h6 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line"><span class="string">'http'</span>: <span class="string">'http://127.0.0.1:9743'</span>,</span><br><span class="line"><span class="string">'https'</span>: <span class="string">'https://127.0.0.1:9743'</span></span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	response = opener.open(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">	print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">	print(e.reason)</span><br></pre></td></tr></table></figure>



<h6 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h6><p><em>Cookies的处理就需要相关的Handler 了</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">	print(item.name+<span class="string">"="</span>+item.value)</span><br></pre></td></tr></table></figure>



<h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><h3 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>





<h3 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h3><p><em>它是URLError的子类，专门用来处理HTTP请求错误</em></p>
<p> 有如下三个属性：</p>
<ul>
<li>code</li>
</ul>
<p><em>返 回 HTTP状态码，比如404表示网页不存在， 500表示服务器内部错误等。</em></p>
<ul>
<li>reason</li>
</ul>
<p><em>同父类一样，用于返回错误的原因。</em></p>
<ul>
<li>headers</li>
</ul>
<p><em>返回请求头。</em></p>
<h2 id="解析链接"><a href="#解析链接" class="headerlink" title="解析链接"></a>解析链接</h2><p><em>前面说过， urllib库里还提供了 parse模 块 ，它定义了处理URL的标准接口，例如实现URL各部分的抽取、合并以及链接转换。它支持如下协议的URL处 理 ： file, ftp、 gophers hdl、 http、 https、 imap、<br>mailto、 mms、 news、 nntp、 prosper。、 rsync、 rtsp、 rtspu、 sftp、 sip、 sips、 snews、 svn、 svn+ssh. telnet和 wais</em></p>
<h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse()"></a>urlparse()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"> result=urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line"> print(type(result), result)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.htmT, params='</span>use<span class="string">r', query='</span>id=<span class="number">5</span><span class="string">',</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="string">fragment='</span>comment<span class="string">')</span></span></span></span><br></pre></td></tr></table></figure>

<p><em>可以看到，返回结果是一个ParseResult类型的对象，它 包 含 6 个部分，分另U是 scheme, netloc.path、 param， squery， fragment</em></p>
<p><em>result可以用元组的概念，也可以用属性来获取各部分</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(result[<span class="number">0</span>], result.params)</span><br></pre></td></tr></table></figure>



<h4 id="urlparse-API"><a href="#urlparse-API" class="headerlink" title="urlparse API"></a>urlparse API</h4><p>urllib.parse.urlparse(urlstring, scheme=’ ‘,  allow_fragments=True)</p>
<ul>
<li>urlstring </li>
</ul>
<ul>
<li>scheme</li>
</ul>
<p><em>当传入的url没有协议时，可以指定scheme参数为http/https</em></p>
<p><em>当本身就有协议，有传参为不同的协议，则会输出本身的协议</em></p>
<ul>
<li>allow_fragments</li>
</ul>
<p><em>设置为false时，结果就不会有fragments这一部分</em></p>
<p><em>当参数为false且链接中没有params和query时，fragment便会解析为path内容的一部分</em></p>
<h3 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse()"></a>urlunparse()</h3><p><em>与urlparse()相反</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure>



<h3 id="urlsplit"><a href="#urlsplit" class="headerlink" title="urlsplit()"></a>urlsplit()</h3><p><em>这个方法和urlparse()方法非常相似，只不过它不再单独解析params这一部分，只返回5 个结果。上面例子中的params会合 并 到 path中。</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query*<span class="string">'id=5*,</span></span><br><span class="line"><span class="string">fragment』 comment'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="urlunsplit"><a href="#urlunsplit" class="headerlink" title="urlunsplit()"></a>urlunsplit()</h3><p><em>与 urlunparse()类似，它也是将链接各个部分组合成完整链接的方法，传入的参数也是一个可迭代对象，例如列表、元组等，唯一的区别是长度必须为5。</em>  </p>
<h3 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin()"></a>urljoin()</h3><p><em>有了 urlunparse()和 urlunsplit()方 法 ，我们可以完成链接的合并，不过前提必须要有特定长度的对象，链接的每一部分都要清晰分开。</em>  </p>
<p><em>生成链接还有另一个方法，那 就 是 urljoin()方法。我们可以提供一个base_url (基础链接)作为第一个参数，将新的链接作为第二个参数，该方法会分析base_url的 scheme, netloc和 path这 3个内容并对<strong>新链接缺失</strong>的部分进行补充</em> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html'</span>))</span><br><span class="line">print(u:rljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAO.html?question=2'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=abc'</span>, <span class="string">'https://cuiqingcai.com/index.php'</span>))</span><br><span class="line">print(urljoin('http://www.baidu.com，, '?category=2#comment'))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2J)</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">http://www.baidu.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/FAO.html?question=2</span></span><br><span class="line"><span class="string">https://cuiqingcai.com/index.php</span></span><br><span class="line"><span class="string">http://www. baidu. com?ca tego:ry=2#comme nt</span></span><br><span class="line"><span class="string">www.baidu.com?category=2#comment</span></span><br><span class="line"><span class="string">www.baidu.com?category=2</span></span><br></pre></td></tr></table></figure>

<p><em>可以发现， base_url提供了三项内容scheme, netloc和 path。 如果这3 项在新的链接里不存在，就予以补充；如果新的链接存在，就使用新的链接的部分。而 base_url中的 params、 query和 fragment<br>是不起作用的。</em>  </p>
<h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode()"></a>urlencode()</h3><p><em>它 在 构 造 GET请求参数的时候非常有用</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">'name'</span>: <span class="string">'germey'</span>,</span><br><span class="line"><span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br><span class="line">&gt;&gt;&gt; http://www.baidu.com?name=germey&amp;age=22</span><br></pre></td></tr></table></figure>



<h3 id="parse-qs"><a href="#parse-qs" class="headerlink" title="parse_qs()"></a>parse_qs()</h3><p><em>有了序列化，必然就有反序列化。如果我们有一串GET请求参数，利 用 parse_qs()方 法 ， 就可以将它转回字典，示例如下</em></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line">运行结果如下：</span><br><span class="line">&#123; <span class="string">'name'</span>: [<span class="string">'germey'</span>], <span class="string">'age'</span>: [<span class="string">'22'</span>]&#125;</span><br></pre></td></tr></table></figure>



<h3 id="parse-qsl"><a href="#parse-qsl" class="headerlink" title="parse_qsl()"></a>parse_qsl()</h3><p><em>另外，还 有 一 个 parse_qsl()方 法 ，它用于将参数转化为元组组成的列表</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=germey&amp;age=22'</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line">&gt;&gt;&gt;[(<span class="string">'name'</span>, <span class="string">'germey'</span>), (<span class="string">'age'</span>, <span class="string">'22'</span>)]</span><br></pre></td></tr></table></figure>



<h3 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h3><p><em>该方法可以将内容转化为U RL编码的格式。 U R L 中带有中文参数时，有时可能会导致乱码的问题 ，此时用这个方法可以将中文字符转化为URL编码</em>  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'壁纸'</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)</span><br><span class="line">prin t(url)</span><br><span class="line">&gt;&gt;&gt; https://www. baidu. com/s?wd=%E 5%A3%81%E7%BA%B8</span><br></pre></td></tr></table></figure>



<h3 id="unquote"><a href="#unquote" class="headerlink" title="unquote()"></a>unquote()</h3><p><em>有了 quote。 方法，当然还有unquote()方法，它可以进行URL解 码</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line">url = <span class="string">'https://www.baidu.com/s7wdn%E5%A3%81%E7%BA%B8'</span></span><br><span class="line">print(unquote(url))</span><br><span class="line">这是上面得到的URL编码后的结果，这里 利 用 unquote()方法还原，结果如下：</span><br><span class="line">https://www.baidu. com/s?wd=壁纸</span><br></pre></td></tr></table></figure>



<h2 id="分析Robots协议"><a href="#分析Robots协议" class="headerlink" title="分析Robots协议"></a>分析Robots协议</h2><h3 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h3><p><em>Robots协议也称作爬虫协议、机器人协议，它的全名叫作网络爬虫排除标准( Robots Exclusion Protocol) , 用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作robots.txt<br>的文本文件，一般放在网站的根目录下</em>  </p>
<p><em>robots.txt文件可以为空</em></p>
<p><em>一个爬虫爬取一个网站时，首先会看是否存在robots.txt,然后在按内容爬取；如果不存在则直接爬取</em></p>
<p><em>Allow 一 般 和 Disallow 一 起 使 用 ，一般不会单独使用</em></p>
<ul>
<li>禁止所有爬虫爬取任何目录</li>
</ul>
<p>User-agent: *<br>Disallow: /  </p>
<ul>
<li>允许所有爬虫爬取任意目录</li>
</ul>
<p>User-agent: *<br>Disallow:  </p>
<ul>
<li>禁止所有爬虫爬取某些目录</li>
</ul>
<p>User-agent: *<br>Disallow: /private/<br>Disallow: /tmp/  </p>
<ul>
<li>只允许某一个爬虫爬取爬取</li>
</ul>
<p>User-agent: Webcrawler<br>Disallow:<br>User-agent: *<br>Disallow: /  </p>
<h3 id="爬虫名称"><a href="#爬虫名称" class="headerlink" title="爬虫名称"></a>爬虫名称</h3><p><em>大家可能会疑惑，爬虫名是哪儿来的？为什么就叫这个名？其实它是有固定名字的了，比如百度的就叫作BaiduSpider</em></p>
  <img src="https://s1.ax1x.com/2020/04/05/GDPj7n.png" alt="GDPj7n.png" border="0">



<h3 id="robotparser"><a href="#robotparser" class="headerlink" title="robotparser"></a>robotparser</h3><p>*了 解 Robots协议之后， 我们就可以使用robotparser模块来解析robots.txt 了。该模块提供了一个类 R obotFileParser,它可以根据某网站的robots.txt文件来判断一个爬取爬虫是否有权限来爬取这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url)</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()</span><br><span class="line">rp.set_url(url)</span><br></pre></td></tr></table></figure>

<p>这个类常用方法：</p>
<ul>
<li><p>set_url</p>
<p><em>实例化这个类时传入了url，就不需要这个方法了</em></p>
</li>
<li><p>read()</p>
<p><em>读 取 robots.txt文件并进行分析。注意，这个方法执行一个读取和分析操作，如果不调用这个方法，接下来的 判 断 都 会 为F a ls e ,所以一定记得调用这个方法。这个方法不会返回任何内容，但是执行了读取操作。</em>  </p>
<p><strong>直接传入url和set_url()需要执行read(), 使用parse()不需要使用</strong></p>
</li>
<li><p>parse()</p>
</li>
</ul>
<p><em>用来解析robots.txt文件，传入的参数是robots.txt某些行的内容，它会按照robots.txt的语法规则来分析这些内容。</em>  </p>
<p><strong>传入的可以是数组，元组</strong></p>
<ul>
<li><p>can_fetch()</p>
<p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p>
</li>
<li><p>mtime()</p>
<p><em>该方法传入两个参数，第一个是U ser-agent,第二个是要抓取的URL。 返回的内容是该搜索引擎是否可以抓取这个U R L ,返回结果是True或 False。</em>  </p>
</li>
<li><p>modified()</p>
<p><em>它同样对长时间分析和抓取的搜索爬虫很有帮助，将当前时间设置为上次抓取和分析robots.txt的时间。</em>  </p>
</li>
</ul>
<p><em>使用can_fetch()</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser(<span class="string">'url/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'某个url'</span>))</span><br></pre></td></tr></table></figure>

<p><em>使用parse()</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotParser</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.parse(urlopen(<span class="string">'url/robots.txt'</span>).read().decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, url))</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>问候不一定要郑重其事，但一定要真诚感人。</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>urllib</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章内引用自己的文章</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%BC%95%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure>













<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>引用自己文章</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop理论课-第三章HDFS</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E4%B8%89%E7%AB%A0HDFS.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第三章HDFS"><a href="#第三章HDFS" class="headerlink" title="第三章HDFS"></a>第三章HDFS</h2><h3 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h3><p><em>HDFS是Google公司的GFS分布式文件系统的开源实现</em></p>
<p><em>HDFS是Apache Hadoop项目的一个子项目</em></p>
<p><em>支持海量数据存储，成百上千的计算机组成存储集群</em></p>
<p><em>HDFS可以在低成本的硬件之上，具有高容错，高可靠性，高扩展，高吞吐率等特征</em></p>
<p><em>非常适合大规模数据集的应用</em></p>
<h4 id="HDFS的生态圈"><a href="#HDFS的生态圈" class="headerlink" title="HDFS的生态圈"></a>HDFS的生态圈</h4><img src="https://s1.ax1x.com/2020/04/02/GGoFIJ.png" alt="GGoFIJ.png" border="0">

<h4 id="HDFS优点"><a href="#HDFS优点" class="headerlink" title="HDFS优点"></a>HDFS优点</h4><h5 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h5><p><em>数据自动保存多个副本</em></p>
<p><em>副本丢失后，自动恢复</em></p>
<h5 id="适合批处理"><a href="#适合批处理" class="headerlink" title="适合批处理"></a>适合批处理</h5><p><em>移动计算而非移动数据</em></p>
<p><em>移动位置暴露给计算框架</em></p>
<h5 id="适合大数据处理"><a href="#适合大数据处理" class="headerlink" title="适合大数据处理"></a>适合大数据处理</h5><p><em>GB, TB, 甚至PB级数据</em></p>
<p><em>百万规模以上的文件数量</em></p>
<p><em>10k+节点</em></p>
<h5 id="支持流式文件访问"><a href="#支持流式文件访问" class="headerlink" title="支持流式文件访问"></a>支持流式文件访问</h5><p><em>一次写入，多次读取</em></p>
<p><em>保证数据一致性</em></p>
<h5 id="可构建在廉价机器上"><a href="#可构建在廉价机器上" class="headerlink" title="可构建在廉价机器上"></a>可构建在廉价机器上</h5><p><em>通过多副本提高可靠性</em></p>
<p><em>提供容错和恢复机制</em></p>
<h4 id="HDFS缺点"><a href="#HDFS缺点" class="headerlink" title="HDFS缺点"></a>HDFS缺点</h4><h5 id="不适合低延迟数据访问"><a href="#不适合低延迟数据访问" class="headerlink" title="不适合低延迟数据访问"></a>不适合低延迟数据访问</h5><p><em>比如毫秒级</em></p>
<p><em>低延迟与高吞吐率</em></p>
<h5 id="不适合小文件存取"><a href="#不适合小文件存取" class="headerlink" title="不适合小文件存取"></a>不适合小文件存取</h5><p><em>占用NameNode大量内存</em></p>
<p><em>寻找时间超过读取时间</em></p>
<h5 id="不适合并发写入，文件随机修改"><a href="#不适合并发写入，文件随机修改" class="headerlink" title="不适合并发写入，文件随机修改"></a>不适合并发写入，文件随机修改</h5><p><em>一个文件只能有一个写入者</em></p>
<p><em>仅支持append(附加)</em></p>
<h3 id="HDFS的组成与架构"><a href="#HDFS的组成与架构" class="headerlink" title="HDFS的组成与架构"></a>HDFS的组成与架构</h3><h4 id="HDFS基本组件"><a href="#HDFS基本组件" class="headerlink" title="HDFS基本组件"></a>HDFS基本组件</h4><img src="https://s1.ax1x.com/2020/04/02/GGbSfJ.png" alt="GGbSfJ.png" border="0">

<h5 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h5><img src="https://s1.ax1x.com/2020/04/02/GGbXjI.png" alt="GGbXjI.png" border="0">

<p><em>edits是日志文件，包含一条条edit log; fsimage是最终结果</em></p>
<img src="https://s1.ax1x.com/2020/04/02/GJec5D.png" alt="GJec5D.png" border="0">

<h5 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h5><h6 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h6><img src="https://s1.ax1x.com/2020/04/02/GJmfFU.png" alt="GJmfFU.png" border="0">

<h6 id="分块原因"><a href="#分块原因" class="headerlink" title="分块原因"></a>分块原因</h6><ul>
<li>一个巨大文件一块磁盘空间不够</li>
<li>利于备份</li>
<li>提高吞吐量(并发读写，计算，利用不同节点存储，减少一个节点的负载)</li>
</ul>
<h6 id="DataNode的主要职责"><a href="#DataNode的主要职责" class="headerlink" title="DataNode的主要职责"></a>DataNode的主要职责</h6><p><a href="https://imgchr.com/i/GJuBKs" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJuBKs.md.png" alt="GJuBKs.png" border="0"></a></p>
<h6 id="机架感知与副本冗余存储策略"><a href="#机架感知与副本冗余存储策略" class="headerlink" title="机架感知与副本冗余存储策略"></a>机架感知与副本冗余存储策略</h6><img src="https://s1.ax1x.com/2020/04/02/GJ3Ebd.md.png" alt="GJ3Ebd.md.png" border="0">

<p><a href="https://imgchr.com/i/GJ3eUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ3eUI.md.png" alt="GJ3eUI.md.png" border="0"></a></p>
<h5 id="Secondary-NameNode"><a href="#Secondary-NameNode" class="headerlink" title="Secondary NameNode"></a>Secondary NameNode</h5><h6 id="Secondary-NameNode的职责"><a href="#Secondary-NameNode的职责" class="headerlink" title="Secondary NameNode的职责"></a>Secondary NameNode的职责</h6><p><a href="https://imgchr.com/i/GJ84f0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ84f0.md.png" alt="GJ84f0.png" border="0"></a></p>
<p><em>secondary namenode和namenode占用同样大的内存大小；在不同节点上</em></p>
<h6 id="Secondary-NameNode工作流程"><a href="#Secondary-NameNode工作流程" class="headerlink" title="Secondary NameNode工作流程"></a>Secondary NameNode工作流程</h6><p><a href="https://imgchr.com/i/GJGbgf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJGbgf.md.png" alt="GJGbgf.png" border="0"></a></p>
<h6 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h6><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200402153039014.png" alt="image-20200402153039014"></p>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p><a href="https://imgchr.com/i/GJt0Hg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJt0Hg.md.png" alt="GJt0Hg.png" border="0"></a></p>
<p><em>答案：edits。因为现在的fsimage保存的是最新也就是最近检查节点产生的fsimage；而现在的edits文件是保存的最近检查节点产生fsimage以来，Hdfs的操作信息</em></p>
<h4 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h4><img src="https://s1.ax1x.com/2020/04/02/GGbBn0.png" alt="GGbBn0.png" border="0">





<h3 id="操作HDFS"><a href="#操作HDFS" class="headerlink" title="操作HDFS"></a>操作HDFS</h3><h3 id="HDFS-web访问"><a href="#HDFS-web访问" class="headerlink" title="HDFS web访问"></a>HDFS web访问</h3><ul>
<li><p><strong>IP:50070</strong>访问NameNode</p>
</li>
<li><p><strong>IP:50090</strong>访问SecondaryNameNode</p>
</li>
</ul>
<h3 id="HDFS-shell访问"><a href="#HDFS-shell访问" class="headerlink" title="HDFS shell访问"></a>HDFS shell访问</h3><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS操作命令">第三章 shell命令操作HDFS-常用HDFS操作命令</a>

<h4 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h4><a href="/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html" title="第三章 shell命令操作HDFS-常用HDFS管理命令">第三章 shell命令操作HDFS-常用HDFS管理命令</a>

<h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><p><a href="https://imgchr.com/i/GJWkfx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJWkfx.md.png" alt="GJWkfx.png" border="0"></a></p>
<h4 id="Hadoop中三种shell命令"><a href="#Hadoop中三种shell命令" class="headerlink" title="Hadoop中三种shell命令"></a>Hadoop中三种shell命令</h4><p><a href="https://imgchr.com/i/GJ4lN9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4lN9.md.png" alt="GJ4lN9.png" border="0"></a></p>
<h3 id="JAVA-API端口访问"><a href="#JAVA-API端口访问" class="headerlink" title="JAVA API端口访问"></a>JAVA API端口访问</h3><p><a href="https://imgchr.com/i/GJ4o3q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ4o3q.md.png" alt="GJ4o3q.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GJIMWR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJIMWR.md.png" alt="GJIMWR.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GJ770f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJ770f.png" alt="GJ770f.png" border="0"></a></p>
<h3 id="HDFS工作原理"><a href="#HDFS工作原理" class="headerlink" title="HDFS工作原理"></a>HDFS工作原理</h3><h4 id="HDFS写文件流程"><a href="#HDFS写文件流程" class="headerlink" title="HDFS写文件流程"></a>HDFS写文件流程</h4><p><a href="https://imgchr.com/i/GdIN1e" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIN1e.md.png" alt="GdIN1e.md.png" border="0"></a><br><a href="https://imgchr.com/i/GdItpD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdItpD.md.png" alt="GdItpD.md.png" border="0"></a></p>
<h4 id="HDFS读文件流程"><a href="#HDFS读文件流程" class="headerlink" title="HDFS读文件流程"></a>HDFS读文件流程</h4><p><a href="https://imgchr.com/i/GdoSN6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoSN6.md.png" alt="GdoSN6.md.png" border="0"></a></p>
<h4 id="HDFS容错"><a href="#HDFS容错" class="headerlink" title="HDFS容错"></a>HDFS容错</h4><p><a href="https://imgchr.com/i/GdIzAx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdIzAx.md.png" alt="GdIzAx.md.png" border="0"></a></p>
<h5 id="NameNode出错"><a href="#NameNode出错" class="headerlink" title="NameNode出错"></a>NameNode出错</h5><p><a href="https://imgchr.com/i/Gdojxg" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gdojxg.md.png" alt="Gdojxg.md.png" border="0"></a></p>
<h5 id="DataNode出错"><a href="#DataNode出错" class="headerlink" title="DataNode出错"></a>DataNode出错</h5><p><a href="https://imgchr.com/i/GdoxMQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GdoxMQ.md.png" alt="GdoxMQ.md.png" border="0"></a></p>
<h5 id="数据出错"><a href="#数据出错" class="headerlink" title="数据出错"></a>数据出错</h5><p><a href="https://imgchr.com/i/Gd7rA1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gd7rA1.md.png" alt="Gd7rA1.png" border="0"></a></p>
<h3 id="HDFS的高级功能"><a href="#HDFS的高级功能" class="headerlink" title="HDFS的高级功能"></a>HDFS的高级功能</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p><a href="https://imgchr.com/i/GwS9eK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwS9eK.md.png" alt="GwS9eK.png" border="0"></a></p>
<h4 id="回收站"><a href="#回收站" class="headerlink" title="回收站"></a>回收站</h4><p><a href="https://imgchr.com/i/GwSVSA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSVSA.md.png" alt="GwSVSA.png" border="0"></a></p>
<h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><p><a href="https://imgchr.com/i/GwStO0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwStO0.md.png" alt="GwStO0.png" border="0"></a></p>
<h4 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h4><p><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><a href="https://imgchr.com/i/GwSsp9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwSsp9.png" alt="GwSsp9.png" border="0"></a></a></p>
<h4 id="HA-High-Availability高可用"><a href="#HA-High-Availability高可用" class="headerlink" title="HA(High Availability高可用)"></a>HA(High Availability高可用)</h4><p><a href="https://imgchr.com/i/Gwpn39" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gwpn39.md.png" alt="Gwpn39.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/GwpBHf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwpBHf.md.png" alt="GwpBHf.md.png" border="0"></a><br><a href="https://imgchr.com/i/GwprE8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwprE8.md.png" alt="GwprE8.md.png" border="0"></a></p>
<h4 id="联邦Federation"><a href="#联邦Federation" class="headerlink" title="联邦Federation"></a>联邦Federation</h4><h5 id="HDFS使用过程存在的问题"><a href="#HDFS使用过程存在的问题" class="headerlink" title="HDFS使用过程存在的问题"></a>HDFS使用过程存在的问题</h5><p><a href="https://imgchr.com/i/Gw9nIS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9nIS.png" alt="Gw9nIS.png" border="0"></a></p>
<h5 id="什么是Federation"><a href="#什么是Federation" class="headerlink" title="什么是Federation"></a>什么是Federation</h5><p><a href="https://imgchr.com/i/Gw9ma8" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9ma8.md.png" alt="Gw9ma8.md.png" border="0"></a></p>
<h5 id="联邦的优点"><a href="#联邦的优点" class="headerlink" title="联邦的优点"></a>联邦的优点</h5><p><a href="https://imgchr.com/i/Gw9fRH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/Gw9fRH.md.png" alt="Gw9fRH.png" border="0"></a></p>
<h4 id="HA与Federation的区别"><a href="#HA与Federation的区别" class="headerlink" title="HA与Federation的区别"></a>HA与Federation的区别</h4><p><a href="https://imgchr.com/i/GwC9e0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/04/GwC9e0.md.png" alt="GwC9e0.png" border="0"></a></p>
<hr>
<blockquote>
<p>直道相思了无益，未妨惆怅是清狂。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据定义</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-SQL%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><h4 id="SQL的产生与发展"><a href="#SQL的产生与发展" class="headerlink" title="SQL的产生与发展"></a>SQL的产生与发展</h4><p><em>SQ L 是 在 1974年 由 Boyce和 Chamberlin提出的，最初叫 S e q u e l</em></p>
<p><em>1987 年，国际标准化组织 (International Organization for Standardization, I S O ) 也通过了这一标准.</em></p>
<p><em>同时，许多软件厂商对SQ L基本命令集还进行了不同程度的扩充和修改，又可以支持标准以外的一些功能特性</em></p>
<p><em>目前，没有一个数据库系统能够支持SQ L标准的所有概念和特性</em></p>
<h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><p><em>SQ L集数据查询(data query) ， 数据操纵 (data manipulation）数 据 定 义 (data definition)和 数 据 控 制 (data control)功能于一体</em></p>
<p><strong>主要特点</strong></p>
<ul>
<li><p>综合统一</p>
<p><em>SQL集数据定义语言、数据操纵语言、数据控制语言的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动，包括以下一系列操作要求：</em></p>
<p>・定义和修改、删除关系模式，定义和删除视图，插入数据，建立数据库。<br>・对数据库中的数据进行查询和更新。<br> • 数据库重构和维护。<br> • 数据库安全性、完整性控制，以及事务控制。<br>・嵌入式 SQL和 动 态 SQL定义。  </p>
</li>
<li><p>高度非过程化</p>
<p><em>非关系数据模型的数据操纵语言是“面向过程”的语言，用 “过程化”语言完成某项请求必须指定存取路径</em></p>
<p><em>而 用 SQL进行数据操作时，只要提 出 “做什么”，而无须指明’’怎么做”，因此无须了解存取路径。存取路径的选择以及SQ L 的操作过程由系统自动完成</em></p>
</li>
<li><p>面向集合的操作方式</p>
<p><em>非关系数据模型采用的是面向记录的操作方式，操作对象是一条记录(</em>例如查询所有平均成绩在8 0 分以上的学生姓名，用户必须一条一条地把满足条件的学生记录找出来 )</p>
<p><em>而 SQL采用集合操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合</em></p>
</li>
<li><p>以同一种语法结构提供多种使用方式</p>
<p><em>SQL既是独立的语言，又是嵌入式语言(可以使用单独的SQL,也可以使用高级语言，例如C,C++,JAVA等)</em></p>
</li>
<li><p>语言简洁，易学易用</p>
<p>*<em>完成核心功能只用了 9 个动词  *</em></p>
</li>
</ul>
<p><a href="https://imgchr.com/i/G1eqVe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1eqVe.png" alt="G1eqVe.png" border="0"></a></p>
<h4 id="SQL基本概念"><a href="#SQL基本概念" class="headerlink" title="SQL基本概念"></a>SQL基本概念</h4><p><em>支 持 SQ L 的关系数据库管理系统同样支持关系数据库三级模式结构</em></p>
<img src="https://s1.ax1x.com/2020/04/01/G1Qx2j.png" alt="G1Qx2j.png" border="0">

<p><strong>外模式包括若干视图和部分基本表</strong></p>
<p><strong>模式包括若干基本表</strong></p>
<p><strong>内模式包括若干存储文件</strong></p>
<p><em>基本表是本身独立存在的表，一个或多个基本表对应一个存储文件，一个表可以带若干索引，索引也存放在存储文件中</em></p>
<p><em>存储文件的逻辑结构组成了关系数据库的内模式</em></p>
<p><em>视图是从一个或几个基本表导出的表。它本身不独立存储在数据库中，即数据库中只存放视图的定义而不存放视图对应的数据。这些数据仍存放在导出视图的基本表中，因此视图是一个虚表。视图在概念上与基本表等同，用户可以在视图上再定义视图</em></p>
<hr>
<blockquote>
<p>不问花期，不负春光，向阳而生，自由盛放。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>数据库系统-数据查询</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="选择表中若干列"><a href="#选择表中若干列" class="headerlink" title="选择表中若干列"></a>选择表中若干列</h4><h5 id="指定列"><a href="#指定列" class="headerlink" title="指定列"></a>指定列</h5> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno,sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>



<h5 id="全部列"><a href="#全部列" class="headerlink" title="全部列"></a>全部列</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>



<h5 id="查询计算过得值"><a href="#查询计算过得值" class="headerlink" title="查询计算过得值"></a>查询计算过得值</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>子句的＜目标列表达式〉不仅可以是表中的属性列，也可以是表达式</span><br><span class="line"><span class="keyword">SELECT</span> Sname, <span class="number">2014</span>-Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<p><em>目标表达水不仅可以是算数表达式，也可以是字符串常量，函数等</em></p>
<h5 id="修改查询列标题"><a href="#修改查询列标题" class="headerlink" title="修改查询列标题"></a>修改查询列标题</h5><p><em>用户可以通过指定别名来改变查询结果的列标题，这对于含算术表达式、常量、函数名的目标列表达式尤为有用</em> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname [<span class="keyword">AS</span>] newName</span><br></pre></td></tr></table></figure>



<h4 id="选择表中的若干元组"><a href="#选择表中的若干元组" class="headerlink" title="选择表中的若干元组"></a>选择表中的若干元组</h4><p><em>系统查询的思路是，将关系中的所有元组一一进行条件匹配，然后在输出。当数据量大时，这种思路就不太合适了。可以创建索引解决</em></p>
<h5 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>



<h5 id="查询满足条件的元组"><a href="#查询满足条件的元组" class="headerlink" title="查询满足条件的元组"></a>查询满足条件的元组</h5><p><em>通过<strong>WHERE</strong>来实现</em></p>
<p>查询条件：</p>
<img src="https://s1.ax1x.com/2020/04/01/G3sx3j.png" alt="G3sx3j.png" border="0">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">'CS'</span>,<span class="string">'MA'</span>,<span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure>

<p><em>注意：’IS’ 有时不能用‘=’代替，如’IS NULL’</em></p>
<p><strong>字符匹配时，可以有通配符，如下：</strong></p>
<ul>
<li><p>_</p>
<p><em>代表任意单个字符</em></p>
</li>
<li><p>%</p>
<p><em>任意长度的字符，零个也包括</em></p>
</li>
</ul>
<p><em>当数据中本身就有通配符时，就需要用到ESCAPE ‘&lt;换码字符&gt;’</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,Credit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">'DB\_Design'</span> ESCAPE<span class="string">'\'</span>;</span><br></pre></td></tr></table></figure>



<h5 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h5><p><em>默认升序ASC</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'3'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<p><em>可以既有升序又有降序：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A, B </span><br><span class="line"><span class="keyword">FROM</span> DD</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> A, B <span class="keyword">DESC</span>; //A可能是具有重复值，再重复值的情况下对B降序</span><br></pre></td></tr></table></figure>



<h5 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h5><h6 id="TOP-N"><a href="#TOP-N" class="headerlink" title="TOP N"></a>TOP N</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP N * </span><br><span class="line"><span class="keyword">FROM</span> SC</span><br></pre></td></tr></table></figure>

<h6 id="TOP-N-PERCENT"><a href="#TOP-N-PERCENT" class="headerlink" title="TOP N PERCENT"></a>TOP N PERCENT</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT TOP N PERCENT *</span><br><span class="line">FROM SC</span><br></pre></td></tr></table></figure>



<h5 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h5><p><em>聚集函数中除COUNT外，其它函数在计算过程中均省略NULL；WHERE子句中不能使用聚集函数</em></p>
<h6 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h6><p>COUNT(*)                                                  统计元组个数<br>COUNT（ [DISTINCT|ALL] ＜列名&gt;）  统计一列中值的个数</p>
<h6 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h6><p>SUM（ [DISTINCT|ALL] ＜列名&gt;）       计算一列值的总和（此列必须是数值型）<br>AVG（ [DISTINCT|ALL] ＜列名&gt;）        计算一列值的平均值（此列必须是数值型）</p>
<h6 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h6><p>MAX（ [DISTINCT|ALL] ＜列名&gt;）       求一列值中的最大值</p>
<h6 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h6><p>MIN（ [DISTINCTIALL] ＜列名&gt;）        求一列值中的最小值  </p>
<h5 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h5><p><em>GROUP B Y 子句将查询结果按<strong>某一列或多列</strong>的值分组，值相等的为一组。</em></p>
<p><em>分组后聚集函数将<strong>作用于每一个组</strong>，即每一组都有一个函数值。</em>  </p>
<p><em>如果分组后还要求按一定的条件对这些组进行筛选，最终只输出满足指定条件的组，则可以使用<strong>HAVING</strong>短语指定筛选条件。</em>  </p>
<p><strong>WHERE子 句 与 HAVING短语</strong>的<em>区别在于作用对象不同。 WHERE子句作用于基本表或视图，从中选择满足条件的元组。  HAVING短语作用于组，从中选择满足条件的组</em></p>
<p><em>WHERE子句中是<strong>不能用聚集函数</strong>作为条件表达式的</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询课程号及相应选课人数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> cno, <span class="keyword">COUNT</span>(sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cno</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询选取三门课程以上的学生学号*/</span></span><br><span class="line"><span class="keyword">SELECT</span> sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(sno) &gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*查询平均成绩大于等于90 分的学生学号和平均成绩。*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, <span class="keyword">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(Grade) &gt;= <span class="number">90</span></span><br></pre></td></tr></table></figure>

<p><em>不一定是group by 单个属性</em></p>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="等值与非等值连接"><a href="#等值与非等值连接" class="headerlink" title="等值与非等值连接"></a>等值与非等值连接</h4><p><em>连接查询的WHERE子句中用来连接两个表的条件称为<strong>连接条件</strong>或<strong>连接谓词</strong>，其一般格式为 :</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[＜表名1＞.] &lt;列名l&gt; &lt;比较运算符&gt; [＜表名2＞.] ＜列名2＞</span><br><span class="line"><span class="comment">/*其中比较运算符主要有=、＞、＜、＞=、＜=、！= (或o ) 等*/</span></span><br></pre></td></tr></table></figure>

<p><em>当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。</em></p>
<p><strong>这就是嵌套循环连接算法</strong>： <em>一个表的全部元组的某个属性一一去和另一个元组的某个属性进行比较</em></p>
<h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.*, SC.*</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure>

<p><em>结果中两个Sno都存在</em></p>
<p><em>一 条 SQ L语句可以同时<strong>完成选择</strong>和<strong>连接查询</strong>，这 时 WHERE子句是由<strong>连接谓词和选择谓词组成的复合条件</strong>。</em>  </p>
<h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h5><p><em>若在等值连接中把目标列中重复的属性列去掉则为自然连接。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade</span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno</span><br></pre></td></tr></table></figure>

<p><em>结果只保留一个Sno</em></p>
<h5 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h5><p><em>Course表取两个别名，一个是 F IR S T ,另一个是SECOND。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>,Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno=SECOND.Cno;</span><br></pre></td></tr></table></figure>



<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><em>有 时 想 以 Student表为主体列出每个学生的基本情况及其选课情况。若某个学生没有选课，仍 把 Student的悬浮元组保存在结果关系中，而 在 S C 表的属性上填空值NULL ,这时就需要使用外连接</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (Student.Sno=SC.Sno);</span><br><span class="line"><span class="comment">/*也可以使用USING來去掉结果中的重复值： FROM Student LEFT OUTER JOIN SC USING (Sno);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*RIGHT OUTER JOIN ON 右连接</span></span><br><span class="line"><span class="comment">FULL OUTER JOIN ON 全连接</span></span><br><span class="line"><span class="comment">LEFT OUTER JOIN ON 左连接*/</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/GzUTIA" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/14/GzUTIA.md.png" alt="GzUTIA.png" border="0"></a></p>
<p><strong>左外连接</strong>列<em>出左边关系(如本例Student)中所有的元组，<strong>右外连接</strong>列出右边关系中所有的元组。</em>  </p>
<h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno=SC.Sno <span class="keyword">AND</span> SC.Cno=Course.Cno;</span><br></pre></td></tr></table></figure>

<h5 id="XXX-INNER-JOIN-XXX-ON-…"><a href="#XXX-INNER-JOIN-XXX-ON-…" class="headerlink" title="XXX INNER  JOIN XXX ON(…..)"></a>XXX INNER  JOIN XXX ON(…..)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.Sno=SC.Sno)</span><br></pre></td></tr></table></figure>

<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每门课程的被选修情况和课程的名字。</span></span><br><span class="line"><span class="keyword">SELECT</span> SC.*, Cname  </span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Courses <span class="keyword">ON</span> SC.Cno=Courses.Cno</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询选修了课程的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(Students.Sname)  </span><br><span class="line"><span class="keyword">FROM</span> Students <span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span> (Students.Sno=Sc.Sno)</span><br></pre></td></tr></table></figure>



<h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p><em>在 SQL语言中，一 个 SELECT-FROM-WHERE语句称为一个<strong>查询块</strong>。将一个查询块嵌套在另一个查询块的<strong>WHERE子句或 HAVING短语</strong>的条件中的查询称为嵌套查询(nested query )</em>   </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="comment">/*外层查询或父査询*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sno <span class="comment">/*内层查询或子査询*/</span></span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Cno= <span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>

<p><em>SQ L语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。需要特别指出的是，<strong>子查询的 SELECT语句中不能使用ORDER B Y 子句</strong>， ORDER B Y 子句只能对最终查询结果排序。</em> </p>
<p><strong>大多数嵌套查询可以用连接查询代替</strong></p>
<h4 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h4><p><em>在嵌套查询中，子查询的结果往往是一个集合，所 以 谓 词 IN 是嵌套查询中最经常使用的谓词。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept <span class="comment">/*例 3.55 的解法一*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sdept</span><br><span class="line">	<span class="keyword">FROM</span> Student</span><br><span class="line">	<span class="keyword">WHERE</span> Sname=<span class="string">'刘晨，)；</span></span><br></pre></td></tr></table></figure>

<p><em>本例中，子查询的查询条件不依赖于父查询，称为<strong>不相关子查询</strong>。如果子查询的查询条件依赖于父查询，这类子查询称为<strong>相关子查询</strong>(correlated subquery) , 整个查询语句称为<strong>相关嵌套查询</strong>(correlated nested query) 语句</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sl.Sno,Sl.Sname,Sl.Sdept <span class="comment">/*例 3.55 的解法二 */</span></span><br><span class="line"><span class="keyword">FROM</span> Student SI,Student S2</span><br><span class="line"><span class="keyword">WHERE</span> Sl.Sdept=S2.Sdept <span class="keyword">AND</span> S2.Sname=<span class="string">'刘晨'</span>；</span><br></pre></td></tr></table></figure>

<p><em>可见，实现同一个查询请求可以有多种方法，当然不同的方法其执行效率可能会有差别 ，甚至会差别很大。这就是数据库编程人员应该掌握的数据库性能调优技术</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student ③ 最后在Student关系中</span><br><span class="line">				取tLl Sno 和 Sname</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">	(<span class="keyword">SELECT</span> Sno		② 然 后 在 SC 关系中找出</span><br><span class="line">	 <span class="keyword">FROM</span> SC				选修了 <span class="number">3</span> 号课程的学生学号</span><br><span class="line">	 <span class="keyword">WHERE</span> Cno <span class="keyword">IN</span>				</span><br><span class="line">		(<span class="keyword">SELECT</span> Cno				① 首 先 在 Course关系中</span><br><span class="line">		 <span class="keyword">FROM</span> Course				找 出 “信息系统”的课</span><br><span class="line">		 <span class="keyword">WHERE</span> Cname=’信息系统<span class="string">'		 程号，结果为3 号</span></span><br><span class="line"><span class="string">		)；</span></span><br><span class="line"><span class="string">/*等价于*/</span></span><br><span class="line"><span class="string">SELECT Student.Sno,Sname</span></span><br><span class="line"><span class="string">FROM Student,SC,Course</span></span><br><span class="line"><span class="string">WHERE Student.Sno=SC.Sno AND</span></span><br><span class="line"><span class="string">SC.Cno=Course.Cno AND</span></span><br><span class="line"><span class="string">Course.Cname='</span>信息系统<span class="string">'；</span></span><br></pre></td></tr></table></figure>

<p><em>有些嵌套查询可以用连接运算替代，有些是不能替代的</em></p>
<img src="https://s1.ax1x.com/2020/04/22/JtBRK0.png" alt="JtBRK0.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/JtBgvq.png" alt="JtBgvq.png" border="0">



<img src="https://s1.ax1x.com/2020/04/22/Jt0I1I.png" alt="Jt0I1I.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/Jt059A.png" alt="Jt059A.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/Jt0hhd.png" alt="Jt0hhd.png" border="0">

<h4 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h4><p><em>可以用&gt;,&lt;,&gt;=,&lt;=,!=或&lt;&gt;等比较运算符</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno ,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade ＞=(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(Grade) <span class="comment">/*某学生的平均成绩*/</span></span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno=x.Sno);</span><br><span class="line"><span class="comment">/*执行过程是，外层先取一个元组，传递给内层，内层得到平均值，在外层执行*/</span></span><br></pre></td></tr></table></figure>

<p><em>该值是与父查询相关的，因此这类查询称为相关子查询</em></p>
<p><em>求解相关子查询不能像求解不相关子查询那样一次将子查询求解出来，然后求解父查询</em></p>
  <img src="https://s1.ax1x.com/2020/04/22/JtD4yt.png" alt="JtD4yt.png" border="0">

<img src="https://s1.ax1x.com/2020/04/22/JtDhQI.png" alt="JtDhQI.png" border="0">

<h4 id="带有ANY-SOME-或ALL谓词的子查询"><a href="#带有ANY-SOME-或ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或ALL谓词的子查询"></a>带有ANY(SOME)或ALL谓词的子查询</h4><p><a href="https://imgchr.com/i/Jml6iT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jml6iT.png" alt="Jml6iT.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;<span class="keyword">ANY</span> (<span class="keyword">SELECT</span> Sage  <span class="comment">/*这里也可以用MAX()代替*/</span></span><br><span class="line">	<span class="keyword">FROM</span> Student</span><br><span class="line">	<span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept &lt;&gt; <span class="string">'CS'</span> ; <span class="comment">/*注意这是父査询块中的条件*/</span></span><br></pre></td></tr></table></figure>

<p><em>用ANY后形成集合</em></p>
<p><em>事实上，用聚集函数实现子查询通常比直接用ANY或ALL查询效率要高。ANY,ALL与聚集函数的对应关系如表：</em></p>
<p><a href="https://imgchr.com/i/Jm32r9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/18/Jm32r9.md.png" alt="Jm32r9.png" border="0"></a></p>
<img src="https://s1.ax1x.com/2020/04/21/J8twwt.png" alt="J8twwt.png" border="0">



<img src="https://s1.ax1x.com/2020/04/21/J8YXi8.png" alt="J8YXi8.png" border="0">

<h4 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h4><p><em>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真假值TRUE,FALSE</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">	（<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>）;</span><br></pre></td></tr></table></figure>

<p><em>这也是相关子查询。先取一个外层的元组</em></p>
<p><em>由 EXISTS引出的子查询，其目标列表达式通常都用**, 因为带 EXISTS的子查询只返回真值或假值，给出列名无实际意义</em></p>
<img src="https://s1.ax1x.com/2020/04/22/JtskE8.png" alt="JtskE8.png" border="0">



<p><em>与 EXISTS谓词相对应的是NOT EXISTS谓词。使用存在量词<strong>NOT EXISTS</strong>后，若内层查询结果为空，则外层的WHERE子句返回真值，否则返回假值</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">	(<span class="keyword">SELECT</span> *</span><br><span class="line">	<span class="keyword">FROM</span> SC</span><br><span class="line">	<span class="keyword">WHERE</span> Sno=Student.Sno <span class="keyword">AND</span> Cno=<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>

<p><em>由于带EXISTS量词的相关子査询只关心内层查询是否有返回值，并不需要查具体值,因此其效率并不一定低于不相关子查询，有时是高效的方法</em>  </p>
<h4 id="用EXISTS-NOT-EXISTS实现全称量词"><a href="#用EXISTS-NOT-EXISTS实现全称量词" class="headerlink" title="用EXISTS/NOT EXISTS实现全称量词"></a>用EXISTS/NOT EXISTS实现全称量词</h4><p><a href="https://imgchr.com/i/JD4C0P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD4C0P.png" alt="JD4C0P.png" border="0"></a><br><a href="https://imgchr.com/i/JD49mt" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/24/JD49mt.png" alt="JD49mt.png" border="0"></a></p>
<h4 id="用EXISTS-NOT-EXISTS实现逻辑蕴涵"><a href="#用EXISTS-NOT-EXISTS实现逻辑蕴涵" class="headerlink" title="用EXISTS/NOT EXISTS实现逻辑蕴涵"></a>用EXISTS/NOT EXISTS实现逻辑蕴涵</h4><p><a href="https://imgchr.com/i/JzutVH" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzutVH.md.png" alt="JzutVH.md.png" border="0"></a><br><a href="https://imgchr.com/i/Jzu8KO" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/Jzu8KO.md.png" alt="Jzu8KO.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuJqe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuJqe.md.png" alt="JzuJqe.md.png" border="0"></a><br><a href="https://imgchr.com/i/JzuGrD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/03/JzuGrD.md.png" alt="JzuGrD.md.png" border="0"></a></p>
<h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h3><p><em>UNION , INTERSECT, EXCEPT</em></p>
<p><em>列数相等，对应属性相同</em></p>
<p><em>属性名无关，属性名取第一个结果属性名</em></p>
<p><em>自动除去重复; 不去重UNION ALL</em></p>
<p><em>最后使用ORDER BY(写在最后)；可以用数字代替对应第几个属性，ORDER BY 3</em></p>
<h4 id="UNION并"><a href="#UNION并" class="headerlink" title="UNION并"></a>UNION并</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'1'</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno=<span class="string">'2'</span></span><br></pre></td></tr></table></figure>



<h4 id="INTERSECT交"><a href="#INTERSECT交" class="headerlink" title="INTERSECT交"></a>INTERSECT交</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage&lt;=<span class="number">19</span></span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/04/28/J5Po2d.png" alt="J5Po2d.png" border="0">

<h4 id="EXCEPT差"><a href="#EXCEPT差" class="headerlink" title="EXCEPT差"></a>EXCEPT差</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'CS'</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage &lt;=<span class="number">19</span>;</span><br></pre></td></tr></table></figure>



<h3 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h3><p><em>子查询不仅可以出现在WHERE子句中，还可以出现在FROM 子句中，这时子查询生成的<strong>临时派生表(derived table )</strong>成为主查询的查询对象</em></p>
<img src="https://s1.ax1x.com/2020/04/30/JbxGT0.png" alt="JbxGT0.png" border="0">

<p><em>有top的子查询可以把order by放在子查询</em></p>
<p><a href="https://imgchr.com/i/JqSNM4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/30/JqSNM4.png" alt="JqSNM4.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC, (<span class="keyword">SELECT</span> Sno, <span class="keyword">Avg</span>(Grade) <span class="keyword">FROM</span> SC <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno)</span><br><span class="line"><span class="keyword">AS</span> Avg_sc(avg_sno,avg_grade) // 生成表Avg_sc,具有两个属性</span><br><span class="line"><span class="keyword">WHERE</span> SC.Sno = Avg_sc.avg_sno <span class="keyword">and</span> SC.Grade ＞= Avg_sc.avg grade</span><br></pre></td></tr></table></figure>

<p><em>如果子查询中没有聚集函数，派生表可以不指定属性列</em></p>
<p><em>通 过 FROM 子句生成派生表时， A S 关键字可以省略，但必须为派生<br>关系指定一个别名</em></p>
<hr>
<blockquote>
<p>从此无心爱良夜，任他明月下西楼。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据查询</tag>
        <tag>SELECT</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-数据定义</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h3 id="数据定义-CREAT-DROP-ALTER"><a href="#数据定义-CREAT-DROP-ALTER" class="headerlink" title="数据定义(CREAT, DROP, ALTER)"></a>数据定义(CREAT, DROP, ALTER)</h3><p><em>关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式、表 、视图和索引等。因此 SQ L 的数据定义功能包括模式定义、表定义、视图和索引的定义。</em></p>
<img src="https://s1.ax1x.com/2020/04/01/G1lRLq.png" alt="G1lRLq.png" border="0">

<p><strong>不支持模式修改，视图修改；只有重新删除创建</strong></p>
<p><strong>标准的SQL也不支持索引创建，商用关系数据库提供索引机制和相关语句</strong></p>
<p><em>一个关系数据库管理系统的 实 例 （instance）中可以建立多个数据库，一个数据库中可以建立多个模式， 一个模式下通常包括多个表、视图和索引等数据库对象</em></p>
<h4 id="模式定义与删除"><a href="#模式定义与删除" class="headerlink" title="模式定义与删除"></a>模式定义与删除</h4><h5 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h5><p><em>CREATE SCHEMA＜模式名＞AUTHORIZATION ＜用户名 &gt;</em></p>
<p><strong>如果没有指定＜模式名&gt;，那么＜模式名&gt;隐含为＜用户名 &gt;</strong></p>
<p><em>要创建模式，调用该命令的用户必须<strong>拥有数据库管理员权限</strong>，或者获得了数据库管理员授予的CREATE SCHEMA的权限</em>  </p>
<p><em>定义模式实际上定义了一个<strong>命名空间</strong>，在这个空间中可以进一步定义该模式包含的数据库对象，例如基本表、视图、索引等  。也就是说用户可以在创建模式的同时在这个模式定义中进一步创建基本表、视图，定义授权。即 ：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span>＜模式名＞AUTHORIZATION ＜用户名 &gt; ［＜表定义子句＞ |＜视图定义子句＞|＜授权定义子句 &gt;］</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1 (<span class="keyword">COL</span> <span class="number">1</span> <span class="built_in">SMALLINT</span>,</span><br><span class="line">COL2 <span class="built_in">INT</span>,</span><br><span class="line">COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure>



<h5 id="模式删除"><a href="#模式删除" class="headerlink" title="模式删除"></a>模式删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> &lt;模式名&gt; &lt;<span class="keyword">CASCADE</span> | RESTRICT&gt;</span><br></pre></td></tr></table></figure>

<p><em>其 中 CASCADE和 RESTRICT两者<strong>必选其一</strong>。<strong>选择了 CASCADE (级联)</strong>，表示在删除模式的同时把该模式中所有的数据库对象全部删除；<strong>选择了 RESTRICT (限制)</strong>，表示如果该模式中已经定义了下属的数据库对象(如表、视图等)，则拒绝该删除语句的执行。</em></p>
<h4 id="基本表定义，删除，修改"><a href="#基本表定义，删除，修改" class="headerlink" title="基本表定义，删除，修改"></a>基本表定义，删除，修改</h4><p><em>创建了一个模式就建立了一个数据库的命名空间，一个框架。在这个空间中首先要定义的是该模式包含的数据库基本表</em></p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;(＜列名＞＜数据类型＞［列级完整性约束条件］</span><br><span class="line">［,＜列名＞＜数据类型＞［列级完整性约束条件］］</span><br><span class="line">                  ...</span><br><span class="line">［,＜表级完整性约束条件＞］) ；</span><br></pre></td></tr></table></figure>

<p><em>完整性约束条件被存入系统的<strong>数据字典中</strong>，当用户操作表中数据时由关系数据库管理系统自动检查该操作是否违背这些完整性约束条件。<strong>如果完整性约束条件涉及该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级</strong>。</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno <span class="built_in">CHAR</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>, <span class="comment">/*严列级完整性约束条件， Cno是主码*/</span></span><br><span class="line"> Cname <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="comment">/*列级完整性约束条件， Cname不能取空值*/</span></span><br><span class="line">Cpno <span class="built_in">CHAR</span>(<span class="number">4</span>), <span class="comment">/* Cpno的 含 义 是 先 修 课 */</span></span><br><span class="line">Ccredit <span class="built_in">SMALLINT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cpno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， Cpno是外码，被参照表是Course ,被参照列是Cno */</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure>

<p><strong>由上可知外键和参照的表可以是同一个表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno <span class="built_in">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade <span class="built_in">SMALLINT</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (Sno, Cno), <span class="comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"><span class="comment">/*表级完整性约束条件， S no是外码，被参照表是Student */</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="comment">/*表级完整性约束条件， C n o 是外码，被参照表是Course*/</span></span><br><span class="line">)；</span><br></pre></td></tr></table></figure>



<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><img src="https://s1.ax1x.com/2020/04/01/G1UblT.png" alt="G1UblT.png" border="0">

<p><a href="https://imgchr.com/i/G1aM1f" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aM1f.md.png" alt="G1aM1f.md.png" border="0"></a></p>
<p><strong>文本类型</strong></p>
<p><a href="https://imgchr.com/i/G1aljS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aljS.md.png" alt="G1aljS.md.png" border="0"></a></p>
<p><strong>时间类型</strong></p>
<p><a href="https://imgchr.com/i/G1aK9P" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/01/G1aK9P.md.png" alt="G1aK9P.md.png" border="0"></a></p>
<h5 id="模式与表"><a href="#模式与表" class="headerlink" title="模式与表"></a>模式与表</h5><p><strong>设置表所属模式的三种方式：</strong></p>
<ul>
<li>选择模式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"S-T"</span>.Student(...)</span><br></pre></td></tr></table></figure>



<ul>
<li>创建模式时创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="keyword">TEST</span> AUTHORIZATION ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABL(</span><br><span class="line">	COL1 <span class="built_in">SMALLINT</span>,</span><br><span class="line">	COL2 <span class="built_in">INT</span>,</span><br><span class="line">	COL3 <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">	COL4 <span class="built_in">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">	COL5 <span class="built_in">DECIMAL</span>(<span class="number">52</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure>

<ul>
<li><p>系统根据搜索路径（search path） 来确定该对象所属的模式  </p>
<p><em>搜索路径包含一组模式列表，关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名。若搜索路径中的模式名都不存在，系统将给出错误。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*显示当前搜索路径*/</span></span><br><span class="line"><span class="keyword">SHOW</span> search_path;</span><br><span class="line"><span class="comment">/*搜索路径的当前默认值是$user, PUBLIC。 其含义是首先搜索与用户名相同的模式名，如果该模式名不存在，则使用PUBLIC模式。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据库管理员也可以设置搜索路径，例如：*/</span></span><br><span class="line"><span class="keyword">SET</span> search_path <span class="keyword">TO</span> <span class="string">"S-T"</span>, <span class="keyword">PUBLIC</span>;</span><br><span class="line"><span class="comment">/*然后，定义基本表：*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student (...)；</span><br><span class="line"><span class="comment">/*实际结果是建立了 S-T.Student基本表。因为关系数据库管理系统发现搜索路径中第一个模式名S-T 存在，就把该模式作为基本表Student所属的模式。*/</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="基本表修改"><a href="#基本表修改" class="headerlink" title="基本表修改"></a>基本表修改</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ＜表名＞</span><br><span class="line"><span class="comment">-- 增加属性</span></span><br><span class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] ＜新列名＞ ＜数据类型＞ [完整性约束]]</span><br><span class="line">[<span class="keyword">ADD</span>＜表级完整性约束＞] <span class="comment">-- ALTER TABLE Course ADD UNIQUE(Cname);</span></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] ＜列名＞ [<span class="keyword">CASCADE</span>|RESTRICT]]</span><br><span class="line"><span class="comment">--删除约束</span></span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span>＜完整性约束名＞ [RESTRICT | <span class="keyword">CASCADE</span> ]]</span><br><span class="line"><span class="comment">-- 修改列</span></span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> ＜列名＞＜数据类型＞] ;</span><br></pre></td></tr></table></figure>



<h5 id="基本表删除"><a href="#基本表删除" class="headerlink" title="基本表删除"></a>基本表删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt; [RESTRICT | <span class="keyword">CASCADE</span>];</span><br></pre></td></tr></table></figure>

<p><em>若 选 择 RESTRICT ,则该表的删除是有限制条件的。</em></p>
<p><em>若 选 择 CASCADE ,则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。因此执行删除基本表的操作一定要格外小心。</em>  </p>
<p><strong>注意 ：不同的数据库产品在遵循 SQL 标准的基础上具体实现细节和处理策略会与标准有差别。</strong>  </p>
<h4 id="视图建立和删除"><a href="#视图建立和删除" class="headerlink" title="视图建立和删除"></a>视图建立和删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student <span class="comment">/* Student 表上建立视图*/</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept=<span class="string">'IS'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT; <span class="comment">/*删除 Student 表引</span></span><br><span class="line"><span class="comment">-ERROR: cannot drop table Student because other objects depend on it*/</span></span><br><span class="line"><span class="comment">/* 系统返回错误信息，存在依赖该表的对象，此表不能被删除》*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student <span class="keyword">CASCADE</span>; <span class="comment">/*删除 Student 表*/</span></span><br><span class="line">—NOTICE: <span class="keyword">drop</span> cascades <span class="keyword">to</span> <span class="keyword">view</span> <span class="keyword">IS</span> Student <span class="comment">/*系统返回提示，此表上的视图也被删除*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> IS_Student;</span><br><span class="line"><span class="comment">--ERROR: relation " IS Student " does not exist</span></span><br></pre></td></tr></table></figure>





<h4 id="索引的建立和删除"><a href="#索引的建立和删除" class="headerlink" title="索引的建立和删除"></a>索引的建立和删除</h4><p><em>当表的数据量比较大时，查询操作会比较耗时。建立索引是加快查询速度的有效手段。  类似于图书后面的索引，能快速定位到需要查询的内容。用户可以根据应用环境的需要在基本表上建立一个或多个索引，以提供多种存取路径，加快查找速度。</em>    </p>
<p><em>数据库索引有多种类型，常见索引包括<strong>顺序文件上的索引</strong>、<strong>B+树索引</strong>、<strong>散 列 （hash）索引</strong>、<strong>位图索引</strong>等。</em>  </p>
<ul>
<li>顺序文件上的索引是针对按指定属性值升序或降序存储的关系，在该属性<br>上建立一个顺序索引文件，索引文件由属性值和相应的元组指针组成。  </li>
<li>B+树索引是将索引属性组织成B+树形式， B+树的叶结点为属性值和相应的元组指针。 B+树索引具有动态平衡的<br>优点。</li>
<li>散列索引是建立若干个桶，将索引属性按照其散列函数值映射到相应桶中，桶中存放索引属性值和相应的元组指针。散列索引具有查找速度快的特点。 </li>
<li>位图索引是用位向量记录索引属性中可能出现的值，每个位向量对应一个可能值  </li>
</ul>
<p><em>索引虽然能够加速数据库查询，但需要占用一定的存储空间，当基本表更新时，索引要进行相应的维护，这些都会增加数据库的负担,因此要根据实际应用的需要有选择地创建索引。目前SQ L标准中没有涉及索引,一般说来，建立与删除索引由数据库管理员或表的属主（owner）, 即建立表的人，负责<br>完成。用户不必也不能显式地选择索引。索引是关系数据库管理系统的内部实现技术，属于内模式的范畴。</em>  </p>
<h5 id="索引建立"><a href="#索引建立" class="headerlink" title="索引建立"></a>索引建立</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span> &lt;索引名&gt;</span><br><span class="line"><span class="keyword">ON</span>＜表名＞（＜列名＞[＜次序＞] [＜列名＞ [＜次序＞]]•••）;</span><br><span class="line"><span class="comment">/*UNIQUE表明此索引的每一个索引值只对应唯一的数据记录。</span></span><br><span class="line"><span class="comment">CLUSTER表示要建立的索引是聚簇索引。*/</span></span><br></pre></td></tr></table></figure>

<p><em>索引可以建立在该表的一列或多列上，各列名之间用逗号分隔。每个＜列名&gt;后面还可以用＜次序 &gt;指定索引值的排列次序，可 选 ASC （升序 ）或 DESC （降序），默认值为ASC。</em>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Stusno <span class="keyword">ON</span> Student（Sno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Coucno <span class="keyword">ON</span> Course（Cno）;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> SCno <span class="keyword">ON</span> SC（Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>）;</span><br></pre></td></tr></table></figure>



<h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> ＜旧索引名＞  <span class="keyword">RENAME</span> <span class="keyword">TO</span> ＜新索引名＞ ；</span><br></pre></td></tr></table></figure>



<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> ＜索引名＞；</span><br></pre></td></tr></table></figure>



<h4 id="数字字典"><a href="#数字字典" class="headerlink" title="数字字典"></a>数字字典</h4><p><em>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息,包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行SQ L 的数据定义语句时，实际上就是在更新数据字<br>典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</em>  </p>
<hr>
<blockquote>
<p>最惬意的时候，往往是失败的开始。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>数据定义</tag>
        <tag>CREATE</tag>
        <tag>DROP</tag>
        <tag>ALTER</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop理论课-第四章</title>
    <url>/hadoop%E7%90%86%E8%AE%BA%E8%AF%BE-%E7%AC%AC%E5%9B%9B%E7%AB%A0YARN.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="第四章-YARN"><a href="#第四章-YARN" class="headerlink" title="第四章  YARN"></a>第四章  YARN</h2><h3 id="YARN-简介"><a href="#YARN-简介" class="headerlink" title="YARN 简介"></a>YARN 简介</h3><p><em>是针对MapReduce1 的缺点开发的</em></p>
<h4 id="MapReduce1工作流程"><a href="#MapReduce1工作流程" class="headerlink" title="MapReduce1工作流程"></a>MapReduce1工作流程</h4><img src="https://s1.ax1x.com/2020/03/30/GnMq0J.png" alt="GnMq0J.png" border="0">

<p><em>MapReduce1 当任务过多时，不利于系统扩展；难以支持其他的框架；JobTracker单点故障</em></p>
<h4 id="MapReduce2"><a href="#MapReduce2" class="headerlink" title="MapReduce2"></a>MapReduce2</h4><img src="https://s1.ax1x.com/2020/03/30/GnQhHH.png" alt="GnQhHH.png" border="0">

<h4 id="YARN-进程"><a href="#YARN-进程" class="headerlink" title="YARN 进程"></a>YARN 进程</h4><p>ResourceManager</p>
<p>NodeManager</p>
<h4 id="什么是YARN"><a href="#什么是YARN" class="headerlink" title="什么是YARN"></a>什么是YARN</h4><p><em>YARN ：Yet Another Resource Negotiator，另一种资源协调者。<br><strong>最初</strong>是为了改善MapReduce的实现，<strong>但也</strong>是一种资源调度框架，具有通用性，可为上层应用提供统一的资源管理和调度，可以支持其他的分布式计算模式（如Spark）。<br>它的引入为集群在利用率、资`源统一管理和数据共享等方面带来了巨大好处。</em></p>
<h3 id="YARN架构"><a href="#YARN架构" class="headerlink" title="YARN架构"></a>YARN架构</h3><img src="https://s1.ax1x.com/2020/03/30/GnUQz9.png" alt="GnUQz9.png" border="0">



<h4 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 Container"></a>容器 Container</h4><p><em>Container是YARN中资源的抽象，它封装了某个节点上的多维度资源。</em></p>
<p><em>YARN中资源包括内存、CPU、磁盘输入输出等等</em></p>
<h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h4><p><em>负责资源分配和管理</em></p>
<p><em>主要由调度器和应用程序管理器两个组件组成</em></p>
<ul>
<li>调度器（Scheduler）：<pre><code>调度器根据资源情况为应用程序分配封装在Container中的资源。</code></pre></li>
<li>应用程序管理器（Application Manager）：<pre><code>应用程序管理器负责管理整个系统中所有应用程序</code></pre></li>
</ul>
<h4 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h4><p><em>是每个节点上的资源和任务管理器</em></p>
<ul>
<li>定时向ResourceManager汇报本节点上的资源使用情况和各个Container的运行状态；</li>
<li>接收并处理来自ApplicationManager的Container启动/停止等请求。</li>
</ul>
<h4 id="ApplicationMaster（主应用"><a href="#ApplicationMaster（主应用" class="headerlink" title="ApplicationMaster（主应用)"></a>ApplicationMaster（主应用)</h4><p>ApplicationMaster是一个详细的框架库，它结合从 ResourceManager 获得的资源和 NodeManager 协同工作来运行和监控任务。<br>用户提交的每一个应用程序均包含一个ApplicationMaster。<br>主要功能包括：<br>1)、与ResourceManager调度器协商以获取抽象资源（Container）；<br>2)、负责应用的监控，跟踪应用执行状态，重启失败任务等；<br>3)、与NodeManager协同工作完成Task的执行和监控。</p>
<h4 id="YARN中应用运行机制-流程"><a href="#YARN中应用运行机制-流程" class="headerlink" title="YARN中应用运行机制(流程)"></a>YARN中应用运行机制(流程)</h4><p><a href="https://imgchr.com/i/GnDCGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnDCGT.md.png" alt="GnDCGT.md.png" border="0"></a></p>
<h4 id="YARN中任务进度监控"><a href="#YARN中任务进度监控" class="headerlink" title="YARN中任务进度监控"></a>YARN中任务进度监控</h4><p><a href="https://imgchr.com/i/GnD9iV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/GnD9iV.md.png" alt="GnD9iV.md.png" border="0"></a></p>
<h4 id><a href="#" class="headerlink" title></a></h4><h4 id="MapReduce1与YARN组成对比"><a href="#MapReduce1与YARN组成对比" class="headerlink" title="MapReduce1与YARN组成对比"></a>MapReduce1与YARN组成对比</h4><img src="https://s1.ax1x.com/2020/03/30/GnDzOH.png" alt="GnDzOH.png" border="0">

<h4 id="Yarn对MapReduce运行性能提升"><a href="#Yarn对MapReduce运行性能提升" class="headerlink" title="Yarn对MapReduce运行性能提升"></a>Yarn对MapReduce运行性能提升</h4><p>主要特点： ResourceManager与Application Master分离</p>
<p>性能提升:可以扩展支持10,000个节点，100,000个任务</p>
<h4 id="YARN调度器"><a href="#YARN调度器" class="headerlink" title="YARN调度器"></a>YARN调度器</h4><h5 id="FIFO-Scheduler"><a href="#FIFO-Scheduler" class="headerlink" title="FIFO Scheduler"></a>FIFO Scheduler</h5><p><em>最简单的调度器，任务先提交先执行</em></p>
<h5 id="Capacity-Scheduler"><a href="#Capacity-Scheduler" class="headerlink" title="Capacity Scheduler"></a>Capacity Scheduler</h5><p><em>分成多个队列，每个队列占用一定资源，可以看作是FIFO Scheduler的多队列版本</em></p>
<p><em>每个队列可以限制资源使用量。但是，队列间的资源分配以使用量作排列依据，使得容量小的队列有竞争优势</em></p>
<p><em>注意：如果不限制某队列最大容量，则运行过程中，它可以占用全部资源。</em><br><a href="https://imgchr.com/i/GI7Jx0" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7Jx0.png" alt="GI7Jx0.png" border="0"></a></p>
<h5 id="Fair-Scheduler"><a href="#Fair-Scheduler" class="headerlink" title="Fair Scheduler"></a>Fair Scheduler</h5><p><em>假设每个任务具有相同的优先级，平均分配系统的资源</em></p>
<p>单队列</p>
<img src="https://s1.ax1x.com/2020/03/30/GnyELQ.md.png" alt="GnyELQ.md.png" border="0">

<p>多队列</p>
<p><a href="https://imgchr.com/i/Gnyeds" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/30/Gnyeds.md.png" alt="Gnyeds.md.png" border="0"></a></p>
<h4 id="三种调度器比较"><a href="#三种调度器比较" class="headerlink" title="三种调度器比较"></a>三种调度器比较</h4><p><a href="https://imgchr.com/i/GI7G2q" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/10/GI7G2q.md.png" alt="GI7G2q.md.png" border="0"></a></p>
<hr>
<blockquote>
<p>世界上那些最容易的事情中，拖延时间最不费力。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第三章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8d0c041640136eea626ec79f15110e5b6761ecaa6d678c94984a1fd70f569b08"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>透明传输</tag>
        <tag>封装成帧</tag>
        <tag>循环冗余检测CRC</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo更改颜色</title>
    <url>/hexo%E6%9B%B4%E6%94%B9%E9%A2%9C%E8%89%B2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

















<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>廖雪峰教程笔记-面向对象编程</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2f79175af739970e2f287b1140c118c78124150522b2f8f8490863698abaa221">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e9060601837a3b7d58a98a12a3b23653cc1b22693614743e7121d4abf7ec00690b778145473446c0203349185b74d37c73c1f85abc23b8c58ecc0873225deb7c2a4e5f3c9a9d9a90c4edb160688bc0234fab9623956111967f6c9204893b52f8ea629d44745be2e90a06893935dfe4e70cd6b08c250a4f2ae1b1925c91be1a69c8f226fe0bdf46080f64635228bfbaa1ca98fcc15ab604413ace54899ab1dbba8fd2496271e113cf09f932453736caa3f673e632dd7a80d20374892f3722c692c1271e9f07bf1d36613ccc07dbb87673c65e154d0af8fc6a5f80162661ee1526a73ebdd666ffad5eaa11d9fafce98373813bf8792e8bd7a7c2946e72602278fdeafc1ec25ad607f545a8b27094879a15b82cc3efa0c7a2ae1a26366ac71f1c832290505fcf1a7866b6eab184b30bc9e2b87b389f03ff80f209e6ace410d91603fa89dfff5d593d42410b5d8430abc8ab3621814bc5765fde80387d71c2dc41d6ef7734de9eab8ea9d18e1663e492cc51899248a6b70bc7696166107463af1e5d63a80b9a82c3f1b82c90405586505764a0652b9d6c488a1824cc80d09832be467d18683650c2c178059e2f3caad0ebabe3e8e0c7c11728df46546797f83843af73ed4b71ba55e74f62af0c262fde902045b10f295ac7730cea21466062c7e162f9944a059838198a914ec13d12bd0398830d2e96a52fa55cf51c2ee76b067b7944a5d2967910ec31ace042a180e089186c44cda36fb43ebbb41b7e1672a8fe40bba0880c035eb2395d819b3c43990958a5e0153409279870a36f2f647dbdeab87713b1acf3262272d10c4f61aca5eb0d33a70f0ed1c35a4b74f0636d608af84b13b3755ed76d33065d4f81e50fb051fd544d131637a17a2777fca836dcca1280080c4e48d9add3df420de8359b8406a9ac8865cadca163c30900fcbb3a3e6b952a297052d33105ab6a2c3495c53a5d9c6d54477ffc4f6b969a1dd8701d37a8f54a1a49fc6d748813ae72dcb71d263613b1d52660fe0e0cc4d8a5197f0e22a452ab7adfa67f8d372ad528166b55d6846374d34586697b60e11ac4c21d2dce2d77c6c624ba14c1d66fa228bc90317d7827246f1390e3bc48b11c22aa2107e584a083ab2823d89add8665a1089eb13d6b802dfd03ce9addd734b93a1aa10e8f6caf0ea1437ddf54a54f699a14f70bb1198c8572bb3e8daaecffadfd598e0a8e6e1c4b5c88e6b1adc89697f1e7280e429977de7f3f4fa5e0babf54847584aa2109b65cee60629ebdd18c76af2a92f08eb72234ffb495eb32919587ca7b254372513e25b5f0955e31a90586a0b63b3681da03f9c20ffeb95ff5ed0ace703a32cbfd9f81d9cfbcb9dbdeb2ec95faeb573fccd442aa47417d48c588b23c3b742f297f2eeef392ffe2721f6e47fbb2814571395fada7a0194051e6561be4e46fa75b065ac01eb37fb79fcaf9b063cc98d23e4a5d04a57cee7df700e6c4739d0f3ad132ab4441735951bacd8a3ad3ab24c26c09f71c9e4761510bd118f6d4c0ec86829ea16ac861d3e29f9e25ee62222ad1daff6ac8cfa88e52a6dfc14a3015f85f8226cf24e8ab923727ea79a6a7b11bc77ae93b82e29ddbcc043ab0b8dcd4c21fecb2a59dc29162084d6be55cac63c30fee8b99021357511b3b551fcfb35a16c7d455be742f9a59e302dcd17fa12d3beeb208babf5e6ea70325e2ddfb0dbc3ce1b54c947a834e0484265355401099b497423e64a9e18309335256a60ccdb99d7179d796b4f5d5a47a891370868a636e4003d4a976aa148392a450f9968c8f4da90cf2575baa1e7435b69a6c9cbed5e981e2188202fba3312ac5b9290a33441c882dfe39de07873bbe7d2c6396dcb81797cd5288f0ebb620bd808dc33610cfd09e5c0b3af79393d87d0b50d039362639ecf546088292756fefba5caef86a45b7006c1085a46a31010ff4870de24c8c7823081ba74b470b7ecabe717c1086abedb7fd2aaec2d85e84b8cb3f88538fcf838b69bdce3848441a7ee4e1ee14c522f5132966352d49ed71646bf675adacf0a7e5a202a88fa56a5564b9d3d791b6f241633f6775fafb8e63a1a82c6823741cae559df5bae044d40d08be445d37222dd8838dd2131192ba58d731216cb40e586c5bc41396cb5d631b698f0b6a54ed5d3f1114981fa78d159d0dafc1ed22cecc29423830310ddeade32eb874cb7a5b5c55235700ebdbb421f5c24d2906b898093dd60bea76c776b9bc342f2297727ad1f47e61224525575c495d1071ac062fbfe880898aaf69a69da393e2788e12299291c316206d97b7c74d8ff6342804a1054da80ed334c2b4588fa570340985510e9136fa2349ad846d7acb55ccf0a3631af03726d350f219c6fcf3b9235ed183da5267c4eeaaa157f7ded96dc06bea964a588dc1f9ee7d9a8b1fb61b3c53df7de8690af8fd1fd0d15203e130a955def9da92be74c8f252ca2b9a1042cdd031f0fcf882fcfd2a138cb8694c3a0bb83fed72e276e989044d0d9fb426e9e726427df1ec95a1d383fc5fde57f955fd86dd42c148f2675df63e7c2eceab035012f80e6162fb039f2bc5553af5508e26e9cec941763168c742e150f1bc40d2a4f2d41b2b7ccc5146c161d10fa6c2160d42e24064b242aa7d2cab46efd89858b33ef4e6b48685d78abec1b81a1dbb72f8803c458627cc2dfd920a2ab5e398eb093d6b5ec09a667fd33cabc48d1ad3f1c2879b10265934ca1d9a3311c181092a4bb31ab3f921449238d3d1320ada7c606baf4659c21e0d89032f1ec7a8a9348a129f9d2d179b6b967b3f748306aaa4b51865935cf6fa7cf3eec5eee94860a0788c7f4b02c7ecb719763c8f04fc87e76eecec1227d60776676bcc741acff112f47388497f152ffdd0516c512cd992a0beb66168e67fc5d6c105ffb64e022e046b941185314f439217ccec45c737dbedfe7004aa0a206ed01c39d65ec8ead8be5fb912a5ef5b14ec9d8e5f62539cfb080974d39718d0284dc1fbc6f6082cc48fb85bd3aaf784fd24e20cdbf6fa3a2b2c77d072d19a803c73255dc912b0fcc9b22ab6b5dc05010a53ae7a6f995249090e6898996acef530ff0384e7069a7d3b3dc31ad697e54549ed000323e29b36e15fe2e219afdbde177003cf68e67a5f5d50248eb0d91a069cf456ef5bf3368b76ce84c42202767c2840dc72d919a0bf1315dcb63729051ca78b1afda560f9c30ed7c6631518afd020ef443e00d378231e0937fab7f84c590229d1112ad94648ab5094af987b3667f26df8dd4c3442af5cf6702fad9bab85a28fcd450204f8d2de158deb0edc26f6f2284dced87f7c2c6ae4d7c4efaa414bb53e01bb068fb0ed63cebde671c809c09bb7ce4e6e4945a331beff096cfeb5d108dceec10c21463af7be9e4cdd67cfdc9c0eba1d7231e9f3630032ded5cc7f2acfae1c7927d1f84965608791214548da5e9e93dbc3503082aff19f12dc0f356247273122fd34e82b6880425a31cb2f2f584977b52206fad9fcb00a3e635d80f14bc78606f15b5588aaaa3e160682e7221a468875b199b89977567e164aa8c7a61cfc152aad62b98b7a3656e5aadd863e60282867068896b846a4a62b518849efe5a262e9ac00e63d230352531f9487005aebc04754dc033e5b7ab2212eb4b406931dac8c835d46e191209b792bdcbdca19378178d76f98366d165770988b9c65214cac3b680882bff3250e5408b106d0e2d675eee0a9af79e9ebac89c54883844d4fc03ebb35c4254d1ff21251d7199420148aa1c93288437558e0bd744d18760e09eeae34c1bf269369a84857ed951c3a5302fe19f1285cb7d415b3f16821053821ef8240f26606ee162a94a4a6f1fa9e7642f85aa5f2d9c68e0e01c1dd32e3e6a1fd5eb977e4fc3189cd010b4d74b70836825548c9cf143c1527b1c29fc41826379715b81fe70e3f27218b3d55bc2882e546b300164736ad1c0c7c8ede7f2756a336dbbf0e2bbd8f7a7596dbeba4cbe30e2f8b5c142a67fb3b31455deb63e36b5c571a770a0ca351f9d24551a1cb713eb1544529b7f634ccfa0afa300e2a2c158b8e728ac4270f699a30e60951927ff5725edd035daab6e929a76ba08d4edfc22b6b731b642327504205b7dcd59945bf407944f192d0b06515aaf85e35cbbb28beac3e8adfef2b9df70a272112f42bc9c87c5bdc50544df6bdac4c076d8a0d43089048c9ce6b848e04686aaaa609eed84eb166bef34e6935cad9bbebefef9b3507655b13f586f40c293ff4e631846a81c09aa3f721ee961cd01b02146079029057e7da80febead9f672cea00b0c7e4b24d7960ddc8be0410a3fc4b0ed85b8aab8226494b7e5c93f60afc3754ea4ae2b441dd2cf06d61365ae12953b0d85edcd10a4163a99d7ec46c6e2a82684f8f4a01de1da96dc572933d57ef79ea3e0916167369d6fedbd4b3b8f577451f98cf1bf500f5277ceb6dcde04543266b25997c2d2f1235c3f45e4194713d0b430b5bbd99ec68f0a21d38790f3ec5b33cf092b61be3859149d78d35cf0de272555230eb68ddee29be6e823d06d7b994583753b234cda8f8e4bef1f35b52b5b322a0ec638a29ea240b798519a151ea72e82871447faa6008aeb57efa8f8584e811d3b2a63fad5b53602ca64b9c6a42aa991f4859d22ae4606cc7ca9409c3cec79dabd4fa59297bd8490e69e0de5c62a9f502e4658b2713aa5e5fd200783403482c6768f8744c9b40cfe167a8e003dfc67231c82f1e933bb3e00da536639301eafbfd28fbe806422cb357a137fa947680ee4c342034a6558522d2bb0ae01d32f9127daab9f03a640ec82ef9a4e2b531025d1a87e541f313f3d6a2c30e2c2c4cc98a15df41fcb2b8e1d141d3adef9392c035ec3e311b366d23f00a7ad1a4cc96da8c152716bacf88d9b4c161e12b6398b766c568887d895f51f5290336d66ff82cbfb1b4bc1b7a3519ecb559d2f4a4fe4dbcd95a4672fed1968b6ad957df0c48da883b1a8f56d1123e74de47e898dcccba675e5a41fbd8b710bbee35997874b784708400f499b7d081defd131cb983a785a7d2b8ff53dd73e5d56f2e47e7752b248ba619d445533a5a3c1932d78a7893221be1eeb1baba666404d9965293c60a27d663d9d545e4509804c419f8d572f579309eb31ee164cec5012c33440f1193077f68b7e72e9d7e999e9c68324310983c7fe4bcce0e27ea5755a1f75412e228ee00ea0e37210b1524e8508d75e9484cac9d361f176d80b598afc32cf9b66c94d91f40bebb168f217b5f3f18ad8e35a84f578eb70adbad30031d6ffdb8ea3a044f4f064bcb9272f9e3be34611e2410f668a77f27f27d1274e51cf83f5a18f70a3d6979d67ed8575786d0a4084f06831360b0f7c21c4c9583639fe819d5b6bc765cd20a4082c7a575b6b363d64ad467a00c45b6c698562bc5b6b07646c550398627880ef0ce623e04b50840c00d1dd4f34cce9af1563d9e964d870d9e379059054a00ac8cdbf90b5f481ec8fafde5b4961685b9653d0b45b5302b70416dfb8357a6a585210ef20e14d9f347775a0a9cf6268afb0607ae65e3831b7022ec20ab80e74341510db5f49c866bf4b65b849d1f94abef887eb3b1fd7c30c7284e6508a39e2ac1fd7bd5eec7ffdb9e80d0a2498545665be12c87d22220c1a3290945e624bc3cf6d8b62853aef5caae85cb9ac2a0736dbc738f0100b952ca24b4f64b832bf9ca63e862e71747786d2b9976552ca2022cab272f4b5c08df7bc07f2a1a79434f1fdba8e9482ffeede172d1d3e37f6d878a2e39d5717280057104ab7b3eaacb8f37ac6f51ac8ebd2a739f41a3202615a431325d79df1df40697442dc3df68a34df4679d458c4a470fc0e8dc96c768282271eef0bcb626f4e99a148374b4aaf108c9ae6c06a7cdb9cc91d53cf892b5d7a1104234470de6f93761a3620c3e5b31be51a848b487d13a825e061fc898418fb9b0059d0bc2ef21e5473b4abe06969be8d444cd42bb3d4aef8ebc35f339ffc9a43dd3b333dbca424b0acd2e5852150f014ed37e46570f220729905e197ab981f98cefb36a12f5ea3ef35b8f3630567c7c3aac14bec54a0c760519f2dee4db1827f562634dcfd0c00c8cc2844bd7ab72f0a6f9a9cc5d09df062cb58d8f504757795de433c025e269382c3e28aaddb55a9407e4cb3964bdd806ff8f3133f2fe258f2cb21aae33740ecfa8c76a3bf670bad5df664cfef3556f1766b77f4aedc8a1a0a301d333f18db307a7d50582f8204e220544f848ea761383972f2ee0cc1ddde25744e4e8890664cb39f6a57e9dac207d8ff78e813860d1c0af7e1cfce06c407e40a2f805b856a6c6b7301411ebdf6db68d9f446df15a4385a3ffe8307cb11d192572208ecab4818658cd937f6e923b929ce18b49c8407ef480e4f0df990a7e2a7cfd1f1ee296e25689fe2244d172be0fc3814d8321422a892b46aff98382be567fb581284371dc5308244e5638907709178526868dc3a919268920905d85d67a8a57779768cedb05842c3adac0b37c81b388422d2f16671bc5d6d7f6b98e3607fbf5c06dc896ab3238c53e08cc34a4001737434292a91d0b98e3fd986b46b2568ca2b63b770401d1bca3e50e565505fe322e69ed0910007e670d405b642c95734b83a864eace4ec0295eaf0553276a4d0d3cff29ce706f0bf7cafcd59b4c989e6df5e12de2dce20dd650d26382277001040ba0d65a15fa88b94e36fecaee71918179f21f03df8628a3cb93c19c603a78af187a98d0db3368669d71650768bff1d94baa1670699b971c06a6db1ae40ea7d6f05fdd0778d45e1c9aa1262a8cbd794c148b60333e9142db2452704ce01b00fc369a260abfcc38a73cc91f3121678330d1e45df7fc37ba2415ca621fccb33be8eaf99f4b35c93556a0e673dda673e171fd99d864c26b4808f91bdc0be214d4456c79249ca36fc6c076d3da95b82a237c32e65e5bdfd2843b68cb5374c5fd61fa7007dc8350340c6f2fe342b3f7fb0ab13265c78870165e760792d38988143ef5ff8c98553219a8f1f4e58841dc8037111133007a734231bbb6985248055e540e7d373dc36cbb27aab30a476d9c689d41696ef5749a1191d4e3ce6e9a54f289d64403d35b490b6911bec0b7356cb9fa0731cfb690ec6663036838d61475a70e09612e71320024aacdf1011cccb8a36e9b5380db4fb1b5ce077c94018c2ca74da50201f2a0a7bab4025975b001a7ac67dc3bcf20272279a4b97918f2028e8e059729417090e8a4c26d5dc3947091d61e2f5561dd342e22337b531aecb6ac58f58b33498a879e7c3ffadccfb7c9df815b49eab5854c0407762150f178e2315fb8bea2e150f258c2467a8445103a8d3ce0b682f5231030f8c89e9b906012f2396c7a60d5c80628fb10f15486c793fa50730dd45914ef624b9ad3b5726edd5dc8649e4b08a73ff36f2faadb2c93b77075a5f7d68767866d8425a5b0b32ba5dfc9bac2fb4419479cc53339937fb2593b4066f9f23c5e82e77ba31b5917fd02a001b11e2bd729787ca82ed976913642b1c513bd4a2df2f44a4a820a3c0d6cc6096083f14d80b8e721ca67dc58025e52e171158749c52a0ee1d46da99b817689857dfadd61669f8699072e6146710cbde81c19540195e83e41793b393835242bce80e927b2879367b1eee01ca139c7bf3c9074080ab32ad1ea84b9cf8e54068cd37ddb84c477e9e06c04065cc428721286473a3aad3675d95c49b65e29e1a8c6a51f717adfa8b5aaafbbd8128df69a04b9c3c73cd50f0ce9088994c0d48c06684fa602b564f4e2b9b23a91cb2c9065f9c5bd5b2745b08bd054df9572e94a296029e6980dc9ef76bb49289225fedb7b59df506a0df3e733cf098e132676f778bd00c0061a1bb71e1ea971f9574721f79190a0685984e45a36d24ef19c26bcf3d6034fbede07a5aa95f333f2e313b3bc3808e1e1dc7dfc43e879472ef44bb8437d59dfde35cb2bcaabb0cda3c43a9d14677d8ea59465c75b9693de719fd82ad8240bb1b351166f4db8e1b699acc3fec2fa9c2e41815fbe5ee9ed29dbd0e754a409ea57b6c9b23daa44ff1dfead23b7b4beb19327a94ab4955e4f89a67178273e4e3874d21cd02a336eb7315391a8053c67805e08daf80c65a4c59c1ad5fb922d16792ac515dfee82ce4395b6531c2794c1d112c4a4eb67f75036a8bb119973c37e261745040888d775bc504a0a1048dcb026177e5c82c144fc694348c7d265520978d91ef6fa466de9e6dc00253b32b9ffc0190f1333c2ca04e6da88a9e83c01995aca7c7f5ef20908332912d33c9327c23f47729bf589c4c9df4342aaacac54d282953bed14dc024aeb57d1a6a089e3cdae6f91584302486522aeb82218802ec7835a06c626c11bb2564c3c4c382d55296e427d4917f946731475df7f3bcf9c8212ab957c628f13fd681c8c4981b9faea19552929ef35286badb0bc7fe41a097d75b42efcf879e31b1bde13d0951c3fb7cd1be32897054253bbd5b838e8bee5253f066f0cf2c1a01bedc0fa30ce79ae425d7534b496420639d338931ecf4f2cbb127b6df581a990e0bc3a24939bbdd66aa53cc41e8acf8ce47758f7341339e852d3caf3702ef286ecd8a5ec9f43aea8e104ffb047ee6a371724df42c2b233546875f7c6f1f0d72bffac5ebb139bdf83885427af11608a5a993e48fa6b0ea6c4af495fa1c4e770b37b0a1fcb049bf5f326f7cd0c1df1defaa8e6e07d2916efd82c1476e254b1b1ad222b057f2456da2259ae3856359c8ac8f513502a5dc285d5efc381a12140a93176407c5d69fd86d2d2cbef898483f9b2a6bcf234c8be1a3277fed577bb33e4a944bebb796da88533f6a89b3e6db8849558788b7a21ee2dff0455f6e3a211d6af9894b84c4ac3cd7464dc63193811b3388b30c5cd99303a9c212c46be144fdd3cb2206cb621c0b9c5b812aaf2393644e3227bfab73c2d8cc98c02fd3e8d486ac9369d4bdaa323b22edb9ee02a2a1993f75dbb8e03fe6de174c749d0b4da6877db6a3f6c57081bd0fff83b3fbbc7571996992fe1514d12f951a83467b9399cc23c9c160a2eb128f1566b3ddccdd695baf6f01ebfe761dfd909f029282c3e3cc3dbe89b32c9abe366092d2b74bec6462bb113975d563daa07826462743f970400f10ded17ef5b141499763e0531d7b95f65c8980ee30637fd8a05d88bc2f82b3852aaf69d22616ec65f8a8ed9c0fea70f01987694b6f26eb57fde47919f66752cf2fcb1d5eabe4435314e54ba5af6f9ebd3ee1eaa088f56bd07aacf58529204ebf5bb590075f1e75a55f0d8cc1f062a947dc485b3613ac4080951fe3ca16bd8e080764f35888b5f29ce1b9a150cb1c9263ecb219e501d251a6ca0597279e7a671b50c46001f8988c681298a4021c846d69b84d0a55cb9e11058fefa8fd9962015843572c1682cd1bc5f1296e423e10f3fecf7c8387f1100ea7cac0483c94250b36fe021d837f2277a80a1adf721f55c8e6e91a469c57d867bd2f24173e3dd85b580fbff46d1d1b79502f58bae1507925f90169a882a26ea63afb40effb210c539c054412302b1c2daceff4f8a56a9e474ccf00619f89a0d58eebe670704d5fb2016ec61fa6bc409361b221309c2158f96350adbd874c23c2295a955bca8040a2ffd900f58c822aa48f0754dc9de1ff11979c5b540c810cbd3c6132ddfe1ad3f1333c61b872c57ce00db1e73b9d6570857e0e3909c619edeb2267354415e6943ae0cebf1e6b8214c32e04c91ab97262496b9a9bc07d6cc48ee758eee7104936b73935c621916ea7559a251fcd79d3dce63827edc0991690b43f333dd6f8b513cb7a7f00e02d87b41fb30104da7bf683a1a7f09a180b44c61cd83c101e8725c9e6f57dc1a852261fcb3aaeac4818128b56d2689bba8da2f15c92cddc3f455525598f53fc934d1feff9d4caa0ee35445925b49cd7e4aefc35fb7972f2007c6b96b30ec734aef5a2d351c45d670a6fda4027eeef827c9d94e1484c01a7d50de26efcaa53b105b4199ca78a58b501e1c1f6bf626a840cdc38e293ece0ad4423f47eac4d6331f8f195f6b02f5a597d63fc7d067dff4cdb9df34744aedf4fa5a2a16b2f317ce93854205f17f2cd76b0bce3426094e37e7ebbb2f6def6235bd34ecd6efd1421349a1f38137e9e1101163719a3234722b6df8edd53de692ef6ea78c9bddc36e65f95b9aa425b9e720caaceca9189fca29c4788471232c13ea8cf56cd6efd277d35a8bae32544e6fdee6500c9cff6e63d934c753b98426d42dc0c84b80e4f1c7a639c9cb4da35f370a75c8a0e287772cfece9ec7d5238488a73b38e97c2475fa0f947afc7e82aeb67c484ab3dfbefbb7bc62cca0a918b1f311188dc71771f9424e0b16ffe386dd8b5bd160b4c95ad663096e899ee459649048581b9df7d22eb9949b9acedd49c1321ee5968b71ba5850dc330abd088d47b31086da57fa575c6ade93193a66d29442c1d8537ba0948fef0f788041dbe27627b32474f6718f845fcfeef905d37d7ab8a690a1e6debd85dd3f27b8b2ce93d5816078d9e6970e1e8a7413d1a31c1ad76e06f34c767ab5d7fd40d61ae51f62b93fb9e49da7774975e335e5eb8156ec19e040dd21c5dcfe18cf1cc03dd2a5f6bb5c0141055a9d87555cd73caacb46830f7366d044d689a7e2702f020929445585219688b218b29b8d1e8a16ac9695ced86a50ef07b08a9a4defd4a52b4461e7a25264604538ecffeafdee704a7abf394af6561eafb32b1c70ef773adb9e83a51d6534ec9838ba4c633dfba73acffb84e325d41533ed118b920c469e78116c7c147b2e61b11626310f622508b4756fd4b2c1e24576fcce80c269c6feb7cdac2fb595cd09323e584a5b38d63ec395fd263c3f97ad1e2a969bb509807d6a985e667c9dd40fc03fd38a82ae33bcba96dbef14b57fdc532264778eae0c5d3ee042a9052b58e59c9ad6e014ffaf5d032b09e2a3ff16f57ba03d0c8000764f87fbc6ca63a2d4bb2fbbfe17e8dcb82d00b4055669ae6ffaf04a6701c47b998857f038e9d01a764dbde22ce7cd9fcb8b1572e425a15aa09b369e97c1508327ccac0758bb0e55bc987fc625ec8cca462085a849d24ba8ce6d572b6a54c89bd7257f00f4fe56b01e867cf6e3469da7513b9cbe6e40b7813cc4684fdc6cb3e17c57344fb489c06854bacc821f5323336c8fc4202d2d522d0f108e48429375e7d09c5fc3a9854808b416a6ac2c868b5aafa53c0e27089d26a43bea846789da32f959f19b4412ce0873127e6b108676ab220aa2abd403d740d8fdf00446da9109695e6515714a22e0a671184c01724d7635d10b96cd49366fc5a1da48ff2c03d757b100dbac52d52707f4d587bc16cda96cae4b14bbb81a26ee156e1d7886b229d18e3fef258a97b7da2</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统-关系代数</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><h3 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h3><p><em>并，交，差是要属性一样才可以操作</em></p>
<h4 id="并-union"><a href="#并-union" class="headerlink" title="并(union)"></a>并(union)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8tqs.png" alt="8X8tqs.png" border="0" width="400/">



<h4 id="差-except"><a href="#差-except" class="headerlink" title="差(except)"></a>差(except)</h4><img src="https://s1.ax1x.com/2020/03/25/8X8cL9.png" alt="8X8cL9.png" border="0" width="400/">

<h4 id="交-intersection"><a href="#交-intersection" class="headerlink" title="交(intersection)"></a>交(intersection)</h4><img src="https://s1.ax1x.com/2020/03/25/8XGKOJ.png" alt="8XGKOJ.png" border="0" width="400/">

<h4 id="笛卡尔积-cartesian-product"><a href="#笛卡尔积-cartesian-product" class="headerlink" title="笛卡尔积(cartesian product)"></a>笛卡尔积(cartesian product)</h4><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><h4 id="选择-selection"><a href="#选择-selection" class="headerlink" title="选择(selection)"></a>选择(selection)</h4><p>  σ条件(R)</p>
<p><em>行操作</em></p>
<h4 id="投影-projection"><a href="#投影-projection" class="headerlink" title="投影(projection)"></a>投影(projection)</h4><p>​    π条件(R)</p>
<p><em>投影操作是从列的角度进行的操作</em></p>
<h4 id="连接-join"><a href="#连接-join" class="headerlink" title="连接(join)"></a>连接(join)</h4><h5 id="theta连接，θ"><a href="#theta连接，θ" class="headerlink" title="theta连接，θ"></a><em>theta连接，θ</em></h5><img src="https://s1.ax1x.com/2020/03/25/8X1CLR.png" alt="8X1CLR.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XlxWF.png" alt="8XlxWF.png" border="0" width="400/">

<h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a><em>等值连接</em></h5><h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a><em>自然连接</em></h5><p><em>是特殊的等值连接</em></p>
<p><em>要具有相同属性，且值相同的进行连接</em></p>
<img src="https://s1.ax1x.com/2020/03/25/8XMblj.png" alt="8XMblj.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XQYAf.png" alt="8XQYAf.png" border="0" width="400/">

<img src="https://s1.ax1x.com/2020/03/25/8XQhv9.png" alt="8XQhv9.png" border="0" width="400/">



<h4 id="除操作"><a href="#除操作" class="headerlink" title="除操作"></a>除操作</h4><p><em>除的那个关系是被除关系的真子集,  值要相等才可以</em></p>
<img src="https://s1.ax1x.com/2020/03/25/8X1fmR.png" alt="8X1fmR.png" border="0" width="400/">



<hr>
<blockquote>
<p>阳光温热，岁月静好，你还未来，我怎敢老去。 —-张爱玲</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
  </entry>
  <entry>
    <title>崔庆--才python爬虫之App爬取</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BApp%E7%88%AC%E5%8F%96.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4c5cdb013fe4eda6d814edae87916c536e9bdb372d8a49eed05b2a46a05c35de">b0c437b3beff531915a15d7156f4a2ccab261e2a563e90527e1e6bd77213d64fbe99135195d702c34891935ba5641f292e9eaae659e4a78885e910bf5d11695ae1db0432f21468845f73c5aa8f40db4dbe4d56a87e6ce9aa5b142ab4b9a0efb31f2746f55dbdde7eaf2b5e84e6dadeb134944a06770f37b260ed47938dd51f95177a7c8dbedcf1c030c06bd0de3b7a9a5859bba8fdc3e3ee1332acabcbd4156c336e4d6ca6f55f50f980fb2729097f5a8d5e5ca0ec1fd749e633f1dd9bb76fb6280d79a70aeb2deb7062d4b4be47dba8de5fa25834c14ab43dfbd17f7108681bba25760fc98bf588932c0d9e90606018bf205fe8416fc330a8c8e7124a3ecd64727f492a16332d0dce5661e52cc0cffa3b9cfbad66463bd014e7d028c2d90dcf14440de7dcf0568a3915cbc38c00566af561f5d270d1028517dc69d6d453781ca4f45f36e481eeb0d7e1860a011d4821157a3f83f23bb78ca1cdb498bb8f4aa21b15fcaa1cfe8a514a53bb01c26122991add1d92182cade8ab647e339c40044b77328b4d3547aa251880575f336a3b803fc6bcd25308a2ea7469136811ca3c42ef23b795687d90c91535c4b987789e263813fc832ea9831e2fd725256bdd009880d143ab4aa04393b1ca9504f489e8462427948b29905f088fc7db6d6ca58ece9b6c3cc37342ad8de3f6ad8c0a35e08c2738ac5067d0500eba510d1fcd2da3f4f478a2fe63b528a2f41bd5f9cd7bf58ae3a168e9df3bbf4dfdeb78856d93c059890552940327e55caeffa8272aad571bd1a324b684bfb397b63eea748c23b236a44c08f8b7f08980ba4c667d7a3ca588e5db42ab09ee7473201893b28776bfb946944332f699d16474305cef2009740addc1812f89c96004af6d5b0788243005a61474e5022b35ac6e8d10cc63bb3c24b8a0ae31560d36c17da3799b97531f88e423f884ee04878c99ed50998dee49a708a47a8078263ea309aea445a54c25694ac6785d83ea4e52d199bac53c07b5711385993330acd505bff4a103443936a764089fb95b1edca9ea343ef07f1215be49aee6abe438a4c57ab80489566ac1a9d540fdbea3a8ea1d25c03e93faa8e9e59a2a1fefdf9677348522262cef3b6fd2630bc249aa91174b05da54ced9aab53d78a43c8053850ea4f3ca0db9924823d66613e1d32a254a4cde05a06f9f9d720cd216372f26ea90c8f707c17e09fd2a2f94a061a0c494d6c9cc5fe2990e6b4e02c075e8a4a4e5f3cfc339011a5bad0a9d788e8e4d6688e6d8d6ae08cbb7b3c7e2403f20cc7a343c31fb2fb00a7bee62698e215f3e0f28ee0ecfabbc30fd96206583185b1d7b1b0638ac7c68899524d5e3b273af0de8b9958d47afc376e6b08a08ae377ed60545732f7af2b26fbc9eb5f7e977d68f32ddccdf13c091080a89bb232199341787740011a3039385f0fbe15e155f2d3d5ff43c43673903991444fb5b3023d7c3cb5f719edd88f97d883e35398cec8e23681a0af898aa9fedd42186475017f03dab11016b4155432e67d1f6cdd12b18f53017919f62105ce05cdb4291737df82cb63c1960f8edaa42b0ce810738f2686146045b7af6522d92261abb10304a00f5444772bec2ccdd12140d6523368f1c846932ec11a56d01ce8f5087bdc18a1afcfe1638f1cd7045dfdae0c05d63b8d267af3d57df9fc8997c29df16d96571dbd1c390cfbc46c05e43a08f3f95d90168f48808ddb3300c3e6a0ae95e74c4af11a3d7811f1a284400381328260e70ea87da1c8cabdd1b8afad523c250bc521f0b9ff26bacce57e0a375e252a93aac7f8d58bb2ac5932fb0ab7b43e05484376584dc329485ca7483b031b101ed8ed79b676e728a72b3543fe3736f33277e7be7c75d562b939121f8c3d35b9aae4ca6d0e2219aba0a21bc3bd4824d6ebf144e66ef997c1472d0a6f2f666db255b69e033ffd73bdec3326029c467086aa1cd0be84c0eea8b40dad9c0c1a4b6f841c595ee3f1e07c0f93e23cf3054b65438066f61d4f5be7a184bb84641905efdc1ad606f79f774baee9bfce1e90a357f13f564a42e83b104ecca63db5bb263489586364b90f3519f2cc02a672d85474178ece1ddf010c3c17742861412da3afb581f3f5669256d448091176e44178c17f69e5291f6f3038a2b9a10d38138d88d90b543f497f3c3dcffbc01b28446c03a121a272dabc1a34d15dae4fb388075a9937a8315d0dfcf51d5aacf1765857d131858da60a08c197051ed070a4e794f65aa55689569f8f7d2f9e5831110807742b3ab8436ec69b4c1a686111128d38eae84053db9b5019041b2c9e35dc139147d0b4d2c673fdfcad550eecaaa3e479b4b5444797386c6b0559a9d7e279e90fe3eba94da4ef6be3050b0eddbb6c224f5f597b00ecaae190eb23f853951a7afa7b8e3b69afd81a34f097e9434ee9ee3f6350a44ae8be9f003eb490112a95f1aced0ccbbf1204a04e3c9e6ed18cac26b7b1d1e13dfb860ff61f6cf70601370995792170ae1eea5b57430bc2af9844402e59a5e982b4a04ecfa4126f2232b72874da887d8aae47dfccc04f77ad5472ae8a65a6248699fb53866117fa82a1ae522821ad10af67855bb10c4e96751c200efc055ec89d179f8f35e217b291235a324ae9a1796aa430a11834748e9404bc7624d3e36eeb4ad9184a27b222a2180c446a2d7c9c1acb465d459c7e1446f9f4d0d088dfa178f984b13cccef8fc6a97922312114464288b5fdb224dea109ce0932772c21e5bf5b9708f06dd888dd8ba54b8071cfc3d9ba6f4b9551cde5e519423e7b3ef7fd78f44552b4899155b78d978e69faad71565a6939f235f8523448e4faa2a23d9622655880dc099aa5d240892d90c1a9265213ac912d23142c0751bf45d885026388294fbe2061393bffdb0323e2d0b7c5eac290d48b5d4523e1e34918106c49a51dc1e0a56903a3ae645451d208f201495d90e63a926347fe0595aeea140d1be94546aef93e68bef7a9a6eec81b604256c79c9c4691bbc6627741d225acd21717bdd2fd6943755168ba18d221a0c8fb61a0bdf6ad8a2dc4ea9532d81d4816d2fe5bc152a241c6b4fc6ce9a2d33f2f24f004b1a24b45e578d3d2e738bf91e4f2d8350ed1c813c9802eea6c20a90d33c247c02c16626a6e3d513d7729afa6f6b219766fd2ee793887cf5c99e89d65ef0d2894dc6084b038253b55c50ae162631e09e9552a9dcb30955055214c48262c994544dcc0a86d4e33b8ac1c8af0eb0ecb593d5ba53112b04d3a6c766b81c713b9c3467f1a7a60738f67d28f35c9e99308ffa199e567d67e2569dd6d86d6e404a56ae046e483e4b68ada2be399d8e37df342e321b77dc4446013d410f8c3b8c885d53d91a4355bee3ed064bae958141f8c92da486e6a5231549f777cacdd15e6ab7f95dd9cf598e9be35cea63dc86c83d0cec9db180f4b48fa092f83f74cfd82094316054c36e6d3a7e52b76c74e7a4bb122eb151f5a6c2fbd7398b115149934020282a2b928f2f38c4a80a2476656c01a9c0565ccfe8c8d7c062561167443d450b32d3de4e1c8dc4c084f91046ecd938c5aa620a4c1ec9d1ec3e5efac918bed6a60981ea837779ebf55e9423d7bd1193aacfd01ac9d826abb15d0cb23dfcc1018b5ad170a89aaf35404ec118d77e410a219f87d7a10a4014442d5b45cfa2e3406594b50d9cffda4c3c31655524c341cb9b044f4dfcf65ddf89383e396b64c145033b2a8b0fe53c1311cfdc20f21c39760b9ad63db345b61ca04922bd4692561031913143eb88d4f1e229d97c64b403a6dd03fa941638f4fa6c0e2bf7c4123a101b686a5118b9d1bab264b7a57639ebe065cd60c768f854629487adbaf8e3c6fd41714aa7ec2482fc5983be3396babdd5f889dcfe0228bd421793bc2a5e815d75f676ed42e362bcb3a670c17c08b805333161acad93ac6dc5c85069e687fbe2232f24a65e35173b260ce0671024bdf1cfff621c86df01d824679cca84d1abd2d88a160f1836c6739afe1aa549686e74976150e0929f71a9353efa52f3936fa24f1821221164c3bfdf4d6f9d2cd86e3d687dc140536d2302cb00f281edee47b42503e4cdb1519d1ed2d2e72defe5b50410b0c70b6e80bc4be10f4fe9768021e55230e4f03e82c93df592cc0bf2ea95b8cae494e35bce9d9ed71ac82863b39ceebf3f294e149c59a06ffb35c164de3fbd3e276704e43321f43f13fb8208e4886a9f9817efdf018ed1e608be22321ac8c3fbc01cb27412f9efc4256240f2a7edb13c476dcd32d25133665b46bf79111be2daf59b2298c2be050b714becd250dc8c99b11712283dfc64d1ae666a2e2eea0273afa134c757ae78dcf7a32991c1e2c97dcbbc8472c4488e944538cce346c4418e1b0cd855b5704772790da10640b4d4fef5ae07d9d4f23027182cb8f2323da53bd99d733f51867f02f7b2b61536516c1b4af4d09003dad24764b4f8f0b2464b0795774cbfc3f757889387a32eeba777f995dcf6417f4f01cd33dded80d9ab31732bd0715c72ae5ecedd1c24b95fcdc461f016c0bd8f0dec1029f9b1a483b2b2519ae688e6a7f867b5116fbd0a5fdf539a05de05945da6c4200cf2ce5a77ed787aeafc7feee1e0ea19ab88f1e85c9663ec4e5e6c74b846a7d59b3f0239eda6c3f342405bf00ec824940f1c796a25340e4161d0fe359bbe628257f59a884ae0b5cded68bbcb622d91c5d624bf69bc5af9e97ac1a8983409fc63933b0900ef7ea60c7fe9bc3b449385e5e8354d03b0df3cb3743827ce456bba6cef1720ba5351ca3d1aa9f940ccb2f6635ebd8f94f5d309adbc8bd1df2ea21e7e514361512b36ea166b2d24c724e6623eb95d69050ce09573c279cf183e51a7e2b55385f0bbf57b78280464970f108db63836a69a5cd8f68ff38775e3cbf57f01f60f0e1cca35a58ddedfc2afa8f1e413b539151da8a46b203c5488da8ceea2235a9c69499008fc2ae01f1967071dd4d388e40f15a50f45a49d6f790a6adc96883b6b4199e905fe3ea4bbd857f2aa6317088eb7b03f2389e4b5c782e9f5698976860f95fa892c87207adcb579c797cb37eb7db10d62c9bc1004e7944ee500668a483cc6939124ff003711453ad50de64552ef1f0d082ad132fdb690ed5054a3be316a5c3013268ca107af61c0dea241316df88de697bb4ac99dd695aac2b02b87b75553a7bb8048fe8d1ab1fc6a6c257b0c2a865dfd0f9e76ccbebedbb54ce5b1398cfcd7d0e4ca868fee2f1300a2136ca136b3a93377bf1311a04bb4fb65bc9b7992901fb5118e95c1b93cf54bd96f501a050c75f5dd7ce11716324f4febe36d9b92d00cc9389333312b8666c2fa939bdad774ed827e530f13e700918eff60dd0d6d5afc39424646b2c7558f447844dabf554cbc39b1fe89a447c4991bb841e261317964051cf9ecf8eaec35cdbe11b412f6fd84afea68b2db1a6955069965427daee045b19f870f4fa419fefab71768a428ae76eec7dd9c679402e71c17c0882faa31b50afb8ac4c8168d33de88f8387ff7d3e31d9fc7f67d8d88020dd4ed7cc33820c8efc0bd85564d9100ca8ed7051d678e2aacd121223c14166eab205b4a7d6006c57b0fedfe4b91b556613421bb8d5f925670f6c520ffe1e2d49117f18b1a8f852a70e23fd6b8ddd6177080de9d9090dfb6464ecb23cd7bc210c6c49ed08eb7c97b3cb4884f32f12b93d58b5d64570bdbcf94a0313d86efa0592df9ab35bd6e606a523c1ea8d60ecfe1cec17fca2b42bb3147384c162f4cac3dc677be6f3374dfff005b9cd31862f7260099fc646c5339142858b3e4f8cad8d8ca43c16fe48d533d17c0793d56cc121c1450f2e9582d810ba2d77ffa8f2f4e9351d33fc217f2c5e3899f2733e21e53cd9ebeb207a61915031c561c1d964801f729775727efde83bf0da2288a123a2802cbd855e2860dc5024b12867cd7fd9c95e1ed1bcffb7c6b202d088029c85a4106784cb286289f6b32069cb6be70a4d0dff45a9c1f75ffb8c98da7b9b66d2706c74d789dbb7685c3543e95270c03f784586dc1a5d35b7ead1da74551ea8d3f4957c4eb0335881eca4c342b7dcab5f5f90c6e3132b9dc4fb4db65ccc98ccca3e2e5a7f076f50e4f56a7a6d40cadd2c22a2a3f2d8e138d9cd0813ebda96fa24e521cd97fd888a8552162aa7e2e1945a408a330c8267ac5a3260daf6b76659f0be5f8281101bee5cd91b22c3fba7a5617feddb35b9b2b9104be695a3d080afda4f6aff363e451ab1a62966bd6094cf0ad4ef80add2e521199c9b0dda97900d420a6527a9af59173b56efcefa1db64add4230d6b37be1138c66fee77a2458a22b8f08f315454f205bf631298c5019c13b3650d038727ea9052fbed075960edbbcb41d7a96beeffd0ed350b197d43cf39ce0eaaead920b6973bc2ef1dacfc11e9651115a1839574869201fd8bdb232130afea74b3732c0be9ba39136cc16ffe23c150d826f2717db11c3503db7e9a89e00df2106a8acbfad5c1d18af7dfcc4518d7048b3758c08cd58e624620b73fa6d6fa935b20e6c61ea6b2752a8e92fd3c43186f8c6b1a875e78b4d77615d9304b5ce90dd6e1ce9c3e9bd415941496ee127ef9b94d4888286f828159d3f7f17609b070dc0d662dd5e46dea9a1b6653dd8a9efe82da25a6d4831109f22b4f755ac7ba14173ee48b70ae23490a7106d821f72eeeee9c8e0949881c37c5300f8a043209dab72120be8578eb60538ba3bc27c29a031040bd2bf7307ca5594b92b4db7a4bc8d2367f7442338d6a327571b32f7f0618e24de0837e293b23f1e9e1061aced792f4c73f56c06b59da0404db3052fdb7de0b0bd905a97e9e0a13fe80419f560e9cd6dde362176c0cf847510f849804a29dd2f1c407d17df5a7640996016e2c017948518a2d0e6fb663412dae58495d8bff3cf1bebc2f28de4d457cf6e545769e2ea84d269d9955dde639b0cde451e2baba754ac158bed45e6d189889ab74372e81ca0bffdaf32a435088eae41f7f1d90314db0b55f9b3046effdea75900d667199c36e4fa521e2b8931cce522584249d19b21e20f71e86d5acd0dc0bd9a4d579ca85eb519fb55546aa895a999d7131e78d4cbbe7c3c0c0a6ced8d699a889561525da51417789dda109d03510449d524559f5b6c55f5ca8ff10c10c429b99fd0aa4149d0f38a2124312bd54a5c07aa22ec3ecdf25a23fffb580cd92116f12a0052fa482701bb76946d7e0004807801d3d537d0d40c25dc910c9485e0dff31f4e5c8565f231fa0a06be9bf389e15a950a4862ec122dc25ba33f5ec52678ce533ed6a18bb43c35881f34c4246c64ef29e95d8cf96736d05fab55f80ddb973bd86c8c6b998e44090b80483313e365e1141aaefe0e50fa5be285ad75f299e706b33d6856b5da34513834b59473259a8f1cdb962c0664b52456ef5aa38a76b49d55564ebf857d8cc89517b17c57940877105a9cd7ca172186d3e5695d93b7792624ce58f55edf9ba9406de248d93ca7bf0052db3f7315b846a0ca96fb996f473826d77660315cd40432fc6e2ad3f8ed8b8f799e9fa6a385311790b675d3a51e5e367d0102b1330439d8685f560c64c9797e90767807821a09a7f62d411ba8ee87e86a62c32c875e4ee1e160599cc34d0e84adc2665b7da4fd5120477a1676831f23e8c685632f44c446e6646212168536d9d709b9d0e17966e954ab37ca12bb6b07a5da1875385e7301aebdcbe94ae97a5f5cae2a378072a4b94d1bc30fdd579d91339332c3943159083f6cd0e5bd573f031e89ef18f2ce5bc0b00be508a508866eab9089763eb651d8492c37732664e3bca16fafd5b17ca270b8515e6f0ec04b5556c8f20c66f2a52564e3698fbaea05b654244a68d0326e1ee4e8684545ed7eee42e754eb487d3a7a5f9fb1f58d0583815cca1d8264d53bc825af3df154efe6ce6bcffd9c3f7d915c4e20980a2151186c154b4fd02be369b741eb45dbc2d355444219a10b20cdf7b781dab08edfc214088f74c07be9d3a33e419cf6477ff55be972c41c3da3d5bdc5c654d5ab9ab56cf77002dbf780b63b5ab63968eb0e1b4a54e16753d236aa1f6622bc1d6787399da2507c971be47d2a2644feb4d81c4320a8fd2ebbde2c08911efd930d771c9213e50f289228d89c8fe339e3d50b73366d8c00e6f21328af2094b339d9edfb342b24ca81acbd26e7f790d4259f421334c536d84579ef268ab53ffc58a21b4eba39dce9cf52b2a06033748db88e00751dce2f8a2af0be3e4f85304b761c9a48756dd835075b207ad997933e8fff56e8d094fe95689a8063744387d3105df777cd1107a6403776d39f844b69b4ef2a93304b85b0ca2832a0db95971d1e23f28b0068086456af89ade1eb2ac96af69ac081ac02b50f315cf869f13cbe13497b2d9e04bb34960f82dc130ea97d0e4453253d7ede8bd17146c82f524a68f9c8afda7426c10bd69dfceb21eaeefb471b12da1e279b87a2466db4bb9b7ed2bc1b9ca8f6fcd2111385c3f3ebea74eadba37140b250473ada97f42393e6f18ac4c5257c3ac8ec651b9dd15599eac1c3df1fd9c50a349ba5ee2134c9169f3a220e45921cfebc8e8479b3a38d1aab363611b1b7e7bcceef3caaf8a3c76d3037f0c92ec342c2c76829b24035fe1843ff84b8b373eb386f8f215699c3a88fe4bdc284274d02e28822d9606ea5ca83f2a0d462982310afd98eddb7e8c2b349e20ae1757bdf25c2af5f34695ea2ce9b04aa41f083dab82087b49814b871eef62d86b94dd8a145c8b213f4a79ce8c51ed738760e67006e36290bf8bb4e54ec47063654f6223ee3840d03f4b027bf6165d14e5e506f836ef508cf85a39f4b05c3c6fd0e3a9e2d3348e62dbe8ce737d89d31b10d0d5d3c50281e75b0cb45bbf86e5cdf3219bb5301201638b44ef698e0a083ce5fd921d360a23e7d7f2ac69c1aa853be0b8344775ad1bd306a5489c821b99e245f4c45a0f8139df21a106472276d0505a675a2fa331bf1c3a1d56b3b0406b6547f2220e17c2cec746070f30a680b36334fbffd2055da2ffe88dfc7d26579e0f1a4fd71dfd17740300fdf9c26fc80fd1aa5188060708bcd5be56c659158657c84413d1bedfcbc1bad121763bc7a1f086bb31d58b3e7aea73ef7208fe9221dc4b4614ada271a7616138a614a111ba7e9ede82a0c7644bd03a58e0a07fcfcb73430f479a24bdb3edc24427ca51d8741be5df3574d8c060542dd8a8c49192b36455fe7b7add6fc0e2e6c273568342f64249e41315ba5ef69ae70eac61716deb2d130c20e82d2c0340e660de646d9723c36e4aec1e7244034e0c613a0e8846132d238f25b5d20826d8ad5543f746b6c390d85c9a0d719941bc6341cbec629644dc0c71982029aae0ab70bcf6e4d62725a6f5ce07397b998ef43a512c282e222f43cd42becdc8609c0253b868382c5f3417c5e8ef5c3584b42c77893dd34794e2e29961cd668868937c110a1bbb7c6b1faf703c1dde7bc07f61efd727efe4482e217576ae762d0cb09fc2881dc4e7d07c063dfa002eb18a5e22382d857ad11ce427bb3749fc514f8229fcd0dc5431cc899f50b03e94d77b8b1d2423fcd7e4b359c0709144c77089fed782ad26ee4ce61347134d823e5593758f661c5bfab656496295fb039e53184a03c91e284e0c0f438ce7a1f27791aa7c2dfcb39f59780d914280612ac63538de3052e20d4c5585912c5492159c5ed587674aae0653b80c72394a321c252b4083ea964da8117ac1c519306e82b2d3c68e9d835904a47c40e67445eb5f482f01a2105bdaae7fee52d8316956eefeb61ad01102e2563610bdb7094f5ffbed32251827a27a873d8c6decfbfc5583be51846bb7202cab1b39cd03755b4ac3b8d68296370a21e22ac50e5a22bb7ec77d4059d08b01a2b16846eaeeb9ebe62092108158af15f7ffe34e754bcf11867feaeb111171385f1d656bceaba456bb6fdfbc75c03eb16b9df0f0d5090a8a34959901212a9e249d732fd9d826cb3b794ec88331c10ddf718876f1e8e785984f9484d6a1bfff2542a7d8ba567740fa24bf8a9b7bc9c1d1f75f3e53e080584768783e0ce50365db9ff39777b79fdadf8192880a010d171e54d0868a311ea2b1c7dbc4b1d1551dcfbeef83d43e9343e1940c37bba6e9ba63c0c9d8d00782e8dc14bdd4ffd4cb58c28ff1d0a4ed8f5b0fb1298044600e5853f959e9e8b36d80b28f1d7f176fd5212c7871e675010135f00ba491f0804066f826c30e9e30a331d14398ad8087cc779cd045d2ad4498df557011244d13eafc7d4c7592be681132df487761142ff9bd8126eb04a149d92018ff0985fe2f4cfab36c62adafd00090413e5d1f5a08b318ad7dceb89031a470ae6e7094e93b7ab6edbe5bbd09509f21a59013bcb3aab52881184ad85c4da51a9363ebe6d3a9e721328e1bf563c657664f0c0e4113a0599aa27c29fbae9af71552b8c841f408ab175ecda271ed13b3013ec4ffd3f021a6618c7ae18905aee1c12758333b64d86baaac715ceee947245ca24b4d5c24d7ff67ae19ceb5c6b9b3f6919040d9674bc108a35a06c53cba56e5f7850a424ab01d495f3283a10835e0e8889c85d189a8af6eba7b072a5584c39c82793cb7c330a3ed331749069f57eca27990af8a9c18002bdf71d8385e6adafa625f9c8ac10de81ea66353325359b0f993b6c7a76cdcd0f0e48d20ca4b0200e4b70a6470ef7ef5f31ea88908f5ab199bd5ff465044a6692a4690b716e51b5a157a8106ee061900c50a2ffe75b74aed9ff595894d717bdaa31e75eafeb91d42246c8d0a2a9837edfb85b576f62fdd2aebe630732a9a96fd634168dfa9807e581cd3b7681f79669cf5ab1e25bc785852c1cad607a149d25416ca84be06caf19ba009c6d5ffcae3f7c6fc5dc4af1b8722bb8492404c937b9ab1ace76b6badfc5ef32c81c58f28d5b2c3919e55c6a8cd20af7ba5188d59ed90f0a0b388b19a016a5ae3989c7735c352ae8ebc9fed0cbbc477adacf0a9d8b73e5f7a314d948e0bc4e87a1a7544c14901a2c48ef8d775f3af59f1b91016c739d59891ccc27e4693b7d22b59276e873c6498aa43da1525f8add11bd4f984dc4f5fcf19366b12ac881ebb7bcffaeda07b58f624a96dccd226d670da73121dcaf821953efcef5937420b6c2a278ad6798ecf08202b7513c8580796b899194b1867286a2420ea3d4cb4de67b41ce3a4866888632b9f707b3ef03ecce5fca5a1fc1813ec482d76d5972c774bf9f53caa12ac4b4febdfd2dd081189c69b5afe133f5baf6f59dd8005a11f3367ede1c1ad8256342a70dbcf5e1c388713d55bc25a5501277749d9d2efedc9943688d5700ecd1a420abe3c10ab2aa8daf961d03218eff5f080bb73bb30c4da9d28e17c5dd95a2b4db6f12f12204f603bd5e4ac6ad5bd8b0502c68eb7afebb217f3b7be508ca5e7d74a390fcde3330316cedd89926c349f3bb493163995aa40f0f2a5aeec695d321ea6e6d4fb9bd7c60ab359f797c550b9fcc4dc3795f2ed5b5305087c423799f5d3833c07808d7078d1fa8eb828f7d8eec2eab89321ba22313b9ebcabab3575b239faecbbd02f46c38d1f17c08b1ee2a402c8289b94353e2c88d7055481d1c779b534bc2bf1581fe27b96c60c4c5b50b08915de2d4c8d06dcf9a468c38f68c7485cbf2dde14d1e54ebe988dc2a837743ee78b57e7756eec6ed95a947f09192b837292fbfcc27277921ac929d04bc7785e5c0dca096c3705b3067708811c9bcc79aa0f21c8585f7f752102a886ef8ee68507c6f7a02b3ced806878805891d7bb7cc9f93dd805d03675c14193b74a23a562f8c3df082129be0295ae14a40d3999acf1c1527f4e75b53b4bce045f1757501779ff2a5d64b8f4e07d1fbeaca86de6ac33050a2d589e4268964faee85fb7336274b1b2df7952f5e873c372cb0cfc9fc3d3c58f0c31ec364f9cc0cf8be96762d2ab02fa1da2d2b49fca39365dd7a039d2df9f526fa9745827ecbac306b8dedb2e72b7ff4b1362622944f07f790c167a8f9addcc4f0b3d323da455c28f7aec4811390db4f1b1769d7f917acd90a112d046ef3c85ccf331a84b7ec3d96b72e626daa8503166a4ccb2a93c91da2faf82f4e17a77b4aa4f8e01bddac206135e849f6c26b7c1a47d6a3d0c5dd861cdbc77cf57d90e7494688bbe85afa195dd4df1fe5bbc6d5d62a76c28515a53435809ac638a14d21448d0d0292d0cf276fbd1091cce2a17eb7449697cad5ac4b67d1501b7cc3cca0d3a6d818e0cfcf564cddf2975926d552bd4e7959ab85af8fcada783cda4d694402ff0c525b385ba4cc44c1341d1405a30003c46c1cc7d3c7a8d186f4ac59cac905a0382c83496c68f864e4a2c480ca08475d65be4f39e69ba9846d1af0c6f4f98ea2dadbeb31908152fa92f28d915ee4aa511821287aea720bc45a636ba198083529d4f63cd2bebf0dbba03a94c05c1d621b510d2865980acaea211d3a8f648447b1fce7ad8cbba07b8bd8c113a4bc79e04aecb4b0a27fd174e84c7bf9124d43fd175f851c7e00a1150daee18b56acd0d9a8ce2453ca08097e2e4303aa12088de513b1c5a832277ef93222e99fea4270451895a3d2c81d9e33ae41fbd1b9e6bc483e13bdda27aa4251bc47349618e7dc17def241cc475987f68160049f41330e519ab71d89b1b2ee879ffb6e1268e0b027514c1312f7800dccb1d7695f03f19aedd691041794f53db85b22f7ed8a7393b3ec376012a04098611d23b5ef2889bc73995ca6cd2ea360da19f8c677eab6a9b8d90c21afaae653d6087d77e0737aebd74bef9400d81db6c59b2cb2f63ae1bcd028b462a31a0972f1afbb5cb6e9e6ecbdac18df430a058ce859bca673f3aa5e92c30b722f72bfe935ba8ed239766050730525ab03fa099ace18b27c6295e59f24ccff0a7858a23e5c592385151b8db0fa1e0bf800aaad27774d7f8d1b2ebcfc50f8e68943a96d3bb24f1e052f5faad950f6da1d226e26e2a19c94d8e4f1ab6b652efcaba0b5b34267071b8af7b0e8f5a3ad150a4224378a36146e862888fc826239dac5a7070075c556c12415c65b3980f21be7443aa4edd19ffbfa6e7e4efcf6a0719314f1d11c4e5bd44253733a4ea8f00686a2a35733d829a02681148cdf122ab6d5efa8a148192d2c7ae6d12a74cf4c12799a57fc7dbfa3d6196c9401950a385ddc33a5560754871490975b37fc382160d278ef0c7cddf93840fbb457ed16dc35eddab697f9d9318d16f20cc98ea887c4bb276aa8cc521d84fc4d151de4679fc848d0d773acee1b98bd1e5fbd976ab0440ee919903965f8c22270454a405db57cfb674d4352c8cb747e5f8a151c6278d0149eba6576145b17a94b1e0697588bbfbea1f0319ae232bd257405972ad78c1d29a59217eaca38bb0081208a113a08e40ec07fc8f1fec597944242e221f95588b826187956c3bf317b900d75cfd9c0e520d97172499b3e7054128935aeebc605213a3c3ecccb16c0423e1cc4e0cf4fd5c251d3b3c6bf06949aab1b2fa55aa6c7a312c6e270ea06e58c359dc3b2e401ef4526b315985f6f8a73d4d0f0eff19219a7176d2d50601e84c3e6bf868a7e416ee3df8465dae87b74062a37178fdcdc2812b8ff2b714fe5bd005c86ce73c0feccc83f3aa132330217db9ce53372902f3e73ce0984035463a83d7339aa738a398755fbcfa65f6a25477464362c403631a626fc859b56e749dd8548cc3893d13b67eefb81d76f20c1a362aba61155499e95f18e5d8ba7830c7149998d2c0cfa075debcae067251b8c7ae563edbe6c6557aad20c8f5aad74b74b7cd22de3b3c7686e86ffdbd911b4612e09412fcce9148e6e86e25c0fc62137552e9dfefea58d9732675061ffc1d75f554a36c2b850ac97774917d15c46f375b61db7e4c7c616def2d6c4314a12ab5ef762b3ddbf6a1a3a8940bedcc4536c597cae08b6742b556240151424718936bd1ffa06cf70c0bdc341611f1f105270c30d146fd794ff9bf92db6c4e7379739dcda860ec985d50734cb888e862170d305b3486e7d898a61ed6ef9b9a5909566553d8995f290f229836c951f7fb1bf64961993d8c610b8dfc1e4fdf3dfc0cf5b2f857ab9251a3286f84802de50c4061208fe35882d4fccf40df9378a35d5f31e0a6d9b665863d318ce075fb4a06eeed310686dded84d925d7dd0c26e8faaa2340792475884590dfa7b8a3e5676cccfaeb3bb31e4f8ae6330f4ec0c8d83df7bda5b22893a8eec2f8328048edcb449cfb5416b16b555808c81bf725620b2122263b2d0d2b75887eee09387d221cc27cae23ad30e4e1e4b94ac535e383aa3eee810a742c604bfcd8b854d2a8bc4b3ce193e3f0a66838b86cfeaddf305402332f6890cd99554e84673200719ceae879688fdbcbe710af9f22fb5f6ebd5526b94914c45f848f0625a352bd0f9fc9cd295fd257803b758092542088ca6dcbe0703e0f5e5dd647086f46a1a50882092addd65218984e177bde7f88316273b14a7ed72183659e3008ecfb770ec3fc5fd63fe19aab908e161ca0cca3d49d7c8ed3a4eab71ce061ccbc704f49d0346edd5cf724075584b48798fcafeab83dc0fa5a815ae3e7e76988c2c5e4a95c6ceab5b8f629013ed785c26cea8c8c049f6cbe8ea8cbd2a44a3f8e21ba1a995c4274b66c9ea831171358944319ba3747e5f888701f8c44e4f6316aaa0f8db8ca4040f269d061547c8134048c69a401f329c4504bdcbd232f82b6d505fd6b512194093f9efb5bb2aa1ed962b80308dcd44aeb8c129ed601542906298eb663bac6cc7e435bdfab3365ff4671cb9dcca5cfa300236be0cc120a91159315148ddc3bea013b910a5e2630f067f2649ef314dde5a487aee53748f23c53c229402868b6490709c2ce9d1dea06c03f54dfdcfab060a0acfa0a5cbd5369b172bcbd1417e8a5e4d4e97843a553bbb86fea6c4e97ec2e346433e3bbc655243164021441c6e2e7e515778928ae6eec0a8fd239c3f5aab7be03dee2ab24d4fd38b9ef48bbf29f819b55dc026a8996e8738e9f0fbea5677fbca81099925160ba5de5f2bd3662a6fa73f39ef9bca88c834d9eea3681179f47fba22884338399fed47a54e8594b2b0d08da85000d483132c5eff33d4b4b30e28fbd1b4f96e80356ade5dcba0c3b772a3067d8444a420e918fba25cde8116512ddd7a91fac392940a559c488e8fe2cf9b35716682527c714a874b253a22de4cbb7ceabb98334e433a97cb766a9d1a54daa45f695ca4ce78da3d2e45bc34701e68ca4cbe435fa60c675c057b7b4433824a73c4ad433d50766033176c18cd625e55b14e3081e99fc6b9461f3c090ca4dedf96f996aa132c7bdb369fbe922c92f66ad09023fed0f0b9734c2fce3b26b54d461efee6931fc897ce437b9b6f8f4c308ff75b6b60eb312b8613300c5d98d00d0f2fba5335d7395e8d20483c043e3f8c67ee3e7a10583196bb970d7c041d1d7df82631486af04805bbbcf57bdecb4baf57da60bc288a6d435fa50b7aa9807fd62e22023aa1697391e81be62a8ccfaa9af7c5d76a47d24068aa46d5b32dd453ee7dcb733e808143ef8d728775fb5bb765e9d1bad4825623e1115f7e9ddb5f04c22b23e6e2ea8d902f7ceeaf6796a43c60e7e53665f783cd31457315b0b073e8a6e06301ad7d5f5427f4a608f53a1137daa1a65470becfc9070450650818eb4fb7447079d19ae8141606c0fd6c5b6841d017658aa6695a0dd4a16fd7f4c73e3484bbddc7a444156c89c5e38097f3d8167d4274d3367767ed4d6f732a96dbf8d1a988e5bfffda4e414af8fd96ce8a68136e9ddc0607723f0bb1fda262e43ce376eaa617ba720cf8c0d681c19441eb03f6ae7426fab4d0bc91e11a1a6e29d0c01f03c236622217aa7dfc31c21da30745e5cce6e40cb6772e24c3a3477e5ae4158c287b995f641465bdc330275639d416df5cf3bb1fa516897432903eb204c6b55ee5480fd99b062ca6ed319a23f56c21b1649f035e139b6450e76ef2a958997229ba02035147e83c7b0136c242370e12ce73bf1ab8c9e0d9aac115b2a02f6415466443324fa8c40c17580b98f8562a9d07998e68db97147a8f1440e27618d5ef9ee043ccbe0deceb40eabffd30816e76c1ff8697a9fcadb3bd05431de237575423232bf6abca6ef10a3a2279305ce537b5c14b6d245a7b930893c21db3c2212b9c648f58938d1f919669f2106a09bce023189a1702616e921e71b26243c469fc7c1888072476f501c807724b08bbb75253d63e528e28b3eebeb71c5de168668e5336e134c8354a8c55287e41206f0956029a0ce35423732279f5e737f0a65fa940eab3d0d9b73d428e4d434355e63ee84429ecdb6be9c8f5c29ed966c11ea9028d01862d89ef4058aefc1e9c8fd40a33df5600f3e034b506f836631ceef3d95d9773acc0a22e5e223f7e397f9df27c90da2fcee9d27927961fa1a441ac0bf6e55aee4a0577748f4570a58834e931af564f50e6ee16f7aeb3295b44b5d514aceb9df7425d60569912afffd6f1816d7d2012eec343a51498f709c86ecc32f4c9e949521fe8c1093bed554327e0c9af8763beaba923bff51deb78442d02463bc45fb288340853e39822bb2f16e6a0e2690ca5f8e68759e2ba46f9c1ba9a6a40469ab35adf916bfdc73bb73e5787cd2bfbada52d693db292521efe3828e0e1da43aa985c73267a026dd57d76e1d55421c54460b46adf4ebf9e422f1491e691a893dd627619dc55277de74a5625c4186c7c5887c1f466210b93856afdb70a4f64fc6674fd9115500f257f00b1c6adb6637294ca3f3c6ade5aabcab7b107da336492f982b5f1bd77c677b95d5679a8c7df27dd9f434310594eda40579eef73ad598f5440ec281d5b933b5b41e986e348a864817fd0ec4517874f5d80bed28a2324bb15a153518c532c5f2d4c72aa2bcd2204ee004b94cfb9fecdb7607b4c59e4feb725f194533a5ff4febc7aceec7490b904b4626f82a67fcb2fecbd6264f8fa738aee8b58f377e620f8b6e24eb9cab13cf4daf799c3c7bd9afc2416ad014bae37940efa58985804991139b1f265e7d1bf75b7f3f61f998095106b664cf8f51109408f25bf1112fd505124b8fbf0c6fd431ccbf29dd7e09684b355d4148d3f83be9459af01ebe1c5b8b2611792716d2120dae29b96d96d8879e8ed6fe1789ae8fef6e390a2cc8adaec7ac48ac8d7f58921ec3ca4090170d20495b0fd0a2b78089759072385b2a26fb7da069d7edbbb66bbe1acefafc4115d19e04120293b492f59c55f54bbd3109b35bdbab981db774ced954803889c9ac0e3a7864ac642d4781c6177a250036acacfd6ae71728ecfb756dff65441144da034b016f0197790098108ceb075ef6d218b8462a7b0811b548f5dbff27a10be72210ac06f11c5d82712b0501ceaaa34e7092acf3777b89fd445d9214360171d1e23cc46bd884dae18eead7c144441163c180c520037da08ad72ce46c83fd017ab8e1ca2807cbf78709ab3faa85679bb2ecfc86cd5c1bb757fa86025d6fb7f93e5c32b19e4bd2135c5a4cc3a8dfc28d9dbcab3f153f23f60db0f8e4a854257922b48ecde4d8fb58477d51d2e1514826aab341527ee3ea04342bacb884688f885b8cad697d452f2a16a48f6357b21d276cde50af5d76e4c0fbef53721d35f52133ad250eb349039c2b8acbf5db7dd9e8e19d0e102e964901f80a22075783421f65d05671f3a16f11dda02175ccf8b39d9a9ed372038d0321e481e4dda6ca38212d7ec5ed2e9f0737bdea177bff795feb3ff5b00667b341dddb2ff2a86ba9f7d1f40a74b6844d5a1a0a3c82be66d95f9b4c0d11c579b303da40ad601d3bb3a6ce909374afe105e8b0b7c55299dd998f8f9f6a2c7ca4e9fb1c47bb1ef1f967dc5361357701b2bc2c440d15c5e9a27e40382de6d717c68fafd575b6e2bd2c504c497fb98a209d7d54d57003a5f6ce37781ef20979465da1a63f0f1d7ea70b7a9895e3bba35e64bf2ce7f5f1b32442c979ac248485ab6f3db7cbfb025e6378b87ebb362ea7f4b6f92b2328437e973f438309637945668a76a6299f213cf02041ea8900329dbb76c0202ee8e856b4ef6c1ee1859428c47f5f53503e4593bf8b287a8540066b5684fbe58be1d13e04436a0530d8b424a41de75ddde15f8c9d9e82ffb628207fdb670fde77c36e736efedd905f4b7ac52390e64b71da68dd4ea7c337be75878683eb20656c5c777c3fbf5f2157fb18e723d0365fa3aa64a072fcf724461a6bb7f74c43f963e32390f1787ce8e9da495e56c1a301496ffb76a361c9965687d8905310ae1aaa56971e2b2fa19e70f549cbd8c02e465a890ba182b19f094bc7682caa1cd6b7768419bfb5be89e18c30a6de978a93c60fe878681d603123338d19127e1cf07d8d6c5ded1e4901595b14eaf3f3a94793c47e2a876119f19c73e2007c060e8f1bb8474a717ec0465acea3f955a759d2d08b1f5b8cb568e55fd04d2c7a9d087cd93aadb6f9d8c00e2f661963ecef49b74de4ed2841986ca4578f33890157a3aececf015ec3d5403342f335647b12802dea4c4f8c2b5c543e1f404e7a9745b3f0d33ed94bdcd9d7a7e84754423ef4070beeec41d40790f0106e257ae5b8386aa61d10ab65f3d4d775920d6df6a77a5b4c2e76033c1888791b4d678b6519afd08b6cb0c35f8e584706e9026018e3e5e81635739ae28c15fbc8c6c0f18201f2356577a9d6f7d84c89e004d41dc36f478c994d7060cf542f6a613d2d5e4e90f04f561ba83093674252dbf88e1718fb91b0b731228066dda9435cab850f75758b5f99a7e9ee8cf4ffc0de65a4c6d93dbb3f43e31d37e53f7dc921864c55d63d0f1a402e3b0b5a27a15c941ac836a39407821fc83f4593ce64a8de2ced4796eba358c63f7dd1f10552232c2a9b92acf98dd7673b6a6e92648e2a34071a3b3a9368a06389e0d166a9bec019f3f6c143c49070fcbfb13b08c531bb62babe2c9e085e831efa7b82f753e04d2fe6c1405a61efd323ec27602f96e3f689b1b8b93d90201df8b99c4882b3849e9bd215d429dd50f871536b3f5b2775bc74dbd2c6e01adc1fb76f47d7a2fe61e8543c1c6fef5fd57e25794e62649eb04fb798c633782023cc937c533fa3e150f3f55e9fa7b714072153bd19b290f241a6ac32351df86739417d7ae67af1cadbcf7030341a67f5db18026501fe52685df425636aea0fcf61334d192f0a637d70e4f06fc25225724d944c2f0c66d1acde4e64c69d21cb5e45aafad072fadbf948ce9884a0f7e6e615e4bb03668ea937cbcb5c6d7cbe0f211daec2614e7b4c2a15fc3d1d54001ed12ef291364637df8977d05e1e613f36daf11561bebbd36014813d5b10ca5e8454132450ba1bfdd6296f43b2b1f131ed5b586a63a3062eecaad8e3fef94db77449bbe77d9f3e9fc026ed4f346daafb1fadb3eacf6d714b48a7a568faca027f305ee105f103e68862b61b9c3d104183827b9181d072661fde5352125ef31486614ad79f68f07ddaabfccba5377f61aec5d8edeb422c0763cc0c0f60d7be0923aadbf3c88aba4fccd63bc6a98c763c23cab259e80242085212311125524dc8229f71d78086a1bc25b60b9176d1e5767a8db7220bfc9492d5512632d9c1beb37c1ee482181412ca35b46a39755e9fbce95d59a89213341f96790075d2c1e2b9b17ef7a1cbb436463f740acf8356a587344dce6c47b58f5bb9520e22b4a3664560ec849b6194ba31b6f478edf1b1a829992c2a8f6f6091f57daa1646d4d71ad83bcbfd9699abaf155b51dff5c53f1195c0587ba6487b2e53ce3fd3b21034f25232af146ec6c7bb0c8240e71e60f2dc878f6d45ee56ea7de22acf0f34f470e9d057c7e90430e84a2305d583ec50383ee09e2e85d193e11f6c9ee79b6865742bffb3b2e6b0d0b1673a26725531e3f9cca196ed5b9f84ecfc9359eeb9e70d40d59056ce9180fdfe3006d27d12b6b9edf04fde8dda37b98adc6b5d5a8cbb03965b69c2696a0f8c1d5ce2076fb8dc1c564551660852bc7d0d9c84aaefa156f3669a09679387522c62b2d72800285511254bd8184b1fc94544f83b0c045b56ce28830df5924b344f4f3824210001e80cc99d3c4beefef3c4f1f356efdfe5cbbe2082a2a8be0144bfae999d13a3f5f979ba4d58342819c1cd79eef5b25401e8f8bc5170c86121ceef2e4f4cd7d01690847d14e943ddaf8b660465bc7a0d03c547dbaf10</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>崔庆才</tag>
        <tag>python爬虫</tag>
        <tag>charless</tag>
      </tags>
  </entry>
  <entry>
    <title>崔庆才python爬虫之Charles安装</title>
    <url>/%E5%B4%94%E5%BA%86%E6%89%8Dpython%E7%88%AC%E8%99%AB%E4%B9%8BCharles%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>

<h2 id="抓包工具Charless安装"><a href="#抓包工具Charless安装" class="headerlink" title="抓包工具Charless安装"></a>抓包工具Charless安装</h2><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>官方网站: <a href="https://www.charlesproxy.com/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/</a></p>
<p>下载链接: <a href="https://www.charlesproxy.com/download/" target="_blank" rel="external nofollow noopener noreferrer">https://www.charlesproxy.com/download/</a></p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><em>可以免费使用30天，之后每次不能超过30分钟</em></p>
<h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p><em>Https通信协议应用越来越广泛，通过加密的数据无法识别</em></p>
<p><em>Charless运行在PC端，抓取的数据在移动端，所以电脑和手机都要安装证书</em></p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>*打开charless的help–&gt;ssl proxying–&gt;install charless root certificate–&gt;安装证书–&gt;将所有证书放入下列存储–&gt;受信任的根证书颁发机构</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>主机名：192.168.1.76</p>
<p>端口： 8888</p>
<p>手机上打开chls.pro/ssl,设置证书名</p>
<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>崔庆才</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰java教程笔记-快速入门</title>
    <url>/%E5%BB%96%E9%9B%AA%E5%B3%B0java%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="179cbe97b934e4a71d66298c99f8e7040392b2f0a719f0e9a34c7ee458a2c0ec"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>廖雪峰</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上一页和下一页乱码</title>
    <url>/hexo%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%92%8C%E4%B8%8B%E4%B8%80%E9%A1%B5%E4%B9%B1%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<script type="text/javascript" src="/js/src/bai.js"></script>



<h2 id="hexo上一页和下一页乱码"><a href="#hexo上一页和下一页乱码" class="headerlink" title="hexo上一页和下一页乱码"></a>hexo上一页和下一页乱码</h2><p><em>在themes\next\layout_partials\中，更改pagination.swig文件如下：</em></p>
<p><a href="https://imgchr.com/i/823CJe" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/823CJe.md.png" alt="823CJe.png" border="0" width="500/"></a></p>
<p><strong>更改为：</strong></p>
<img src="https://s1.ax1x.com/2020/03/20/828XE6.png" alt="828XE6.png" border="0">







<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO开启推送</title>
    <url>/hexo%E5%BC%80%E5%90%AF%E6%8E%A8%E9%80%81SEO.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启推送"><a href="#开启推送" class="headerlink" title="开启推送"></a>开启推送</h2><h3 id="网址递交"><a href="#网址递交" class="headerlink" title="网址递交"></a>网址递交</h3><p><em>将网站链接提交到百度，<a href="http://www.sousuoyinqingtijiao.com/baidu/tijiao/" target="_blank" rel="external nofollow noopener noreferrer">百度搜索引擎提交入口 </a>,然后验证你的网站，这一点网上有很详细的教程我就不复述了，验证确认你的网站后，继续验证你的网站的robots.txt和sitemap文件是否可用，一般都是可用的。</em></p>
<h2 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h2><p><em>把下面的代码放到D:\lang_blog\themes\next\source\js\src目录下，文件名为bai.js</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var bp &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    bp.src &#x3D; &#39;&#x2F;&#x2F;push.zhanzhang.baidu.com&#x2F;push.js&#39;;</span><br><span class="line">    var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p><em>在yourblog/scaffolds/post.md中，添加下面的代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;bai.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p><em>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</em></p>
<h2 id="手动推送"><a href="#手动推送" class="headerlink" title="手动推送"></a>手动推送</h2><p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>推送</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之开启压缩文件</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%BC%80%E5%90%AF%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启压缩文件"><a href="#开启压缩文件" class="headerlink" title="开启压缩文件"></a>开启压缩文件</h2><p><em>因为hexo生成的文件是静态html，里面占用了大量的空白符。使用gulp进行压缩接口提高访问速度并且降低内存。</em></p>
<p><em>在根目录下打开git bash输入如下命令:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br><span class="line">npm install gulp-concat</span><br><span class="line">npm install gulp-imagemin</span><br></pre></td></tr></table></figure>

<p><em>在根目录下创建gulpfile.js，内容如下:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;),</span><br><span class="line">    uglify &#x3D; require(&#39;gulp-uglify&#39;),</span><br><span class="line">    cssmin &#x3D; require(&#39;gulp-minify-css&#39;),</span><br><span class="line">    imagemin &#x3D; require(&#39;gulp-imagemin&#39;),</span><br><span class="line">    htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;),</span><br><span class="line">    htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">    concat &#x3D; require(&#39;gulp-concat&#39;);</span><br><span class="line">&#x2F;&#x2F;JS压缩</span><br><span class="line">gulp.task(&#39;uglify&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;js&#x2F;**&#x2F;.js&#39;,&#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;])&#x2F;&#x2F;只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;,&#39;!.&#x2F;public&#x2F;zuoxi&#x2F;**&#x2F;*.js&#39;,,&#39;!.&#x2F;public&#x2F;radio&#x2F;**&#x2F;*.js&#39;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;js&#39;));&#x2F;&#x2F;对应修改为.&#x2F;public即可</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-js压缩</span><br><span class="line">gulp.task(&#39;fancybox:js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 合并 JS</span><br><span class="line">gulp.task(&#39;jsall&#39;, function () &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    &#x2F;&#x2F; 压缩后重命名</span><br><span class="line">        .pipe(concat(&#39;app.js&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-css压缩</span><br><span class="line">gulp.task(&#39;fancybox:css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.css&#39;)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;CSS压缩</span><br><span class="line">gulp.task(&#39;cssmin&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;css&#x2F;main.css&#39;,&#39;!.&#x2F;public&#x2F;css&#x2F;*min.css&#39;])   </span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;css&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;图片压缩</span><br><span class="line">gulp.task(&#39;images&#39;, function() &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;uploads&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: false</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;uploads&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 html文件 public&#x2F;**&#x2F;*.hmtl 表示public下所有文件夹中html，包括当前目录</span><br><span class="line">    gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">      return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">             removeComments: true,</span><br><span class="line">             minifyJS: true,</span><br><span class="line">             minifyCSS: true,</span><br><span class="line">             minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">    &#125;);</span><br><span class="line">gulp.task(&#39;build&#39;, [&#39;uglify&#39;, &#39;cssmin&#39;, &#39;fancybox:js&#39;, &#39;fancybox:css&#39;, &#39;jsall&#39;,&#39;images&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;, &#39;minify-html&#39;</span><br></pre></td></tr></table></figure>

<p><em>在package.json文件中写入：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">“build”: “hexo clean &amp;&amp; hexo g &amp;&amp; gulp build ”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如图：</em></p>
<p><a href="https://imgchr.com/i/82S7dK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/82S7dK.png" alt="82S7dK.png" border="0"></a></p>
<p> <em>输入命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p><em>就可实现hexo clean ,hexo generator,压缩的功能，再hexo deploy，就可以了(这里我把hexo deploy一起放在了里面，可以直接完成全过程）</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>hexo</tag>
        <tag>压缩文件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之seo优化开启</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bseo%E4%BC%98%E5%8C%96%E5%BC%80%E5%90%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="开启seo优化选项"><a href="#开启seo优化选项" class="headerlink" title="开启seo优化选项"></a>开启seo优化选项</h2><p><em>/themes/next/config.yml中开启：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seo: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keywords:网站域名</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo优化</tag>
        <tag>开启</tag>
      </tags>
  </entry>
  <entry>
    <title>seo优化之准备工作</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="生成站点地图-sitemap-xml和baidusitemap-xml"><a href="#生成站点地图-sitemap-xml和baidusitemap-xml" class="headerlink" title="生成站点地图 sitemap.xml和baidusitemap.xml"></a>生成站点地图 sitemap.xml和baidusitemap.xml</h2><p><em>在根目录下，打开git bash输入如下命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save      </span><br><span class="line"></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>



<p><em>在站点目录的配置文件_config.yml中添加如下代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p><em>这样每次执行完heox generator,都会在/Public/里生成*</em>sitemap.xml<strong>和</strong>baidusitemap.xml***</p>
<h2 id="优化网页URL"><a href="#优化网页URL" class="headerlink" title="优化网页URL"></a>优化网页URL</h2><p><em>seo搜索引擎认为最优的网页是从主页点三次就可以到任何页面，但是默认生成的是：<strong>sitename/year/mounth/day/title</strong>四层结构，这样的结构不理由seo，爬虫经常爬取不到我们的文章，所以我们要将我们的url更改成sitename/title。配置站点文件_Config.xml如下：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;你的网站</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/8gUDFP" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/20/8gUDFP.png" alt="8gUDFP.png" border="0"></a></p>
<p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>hexo</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之s首页标题优化</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%87%E9%A2%98%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="首页标题优化"><a href="#首页标题优化" class="headerlink" title="首页标题优化"></a>首页标题优化</h2><p><em>seo最重要的是你的标题，一般搜索都是搜索你的标题。更改themes\next\layout\index.swig文件</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>改成</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>这时候你的首页会更符合网站名称 - 网站描述这习惯。</em></p>
<p><em>进阶，做了seo优化，把关键词也显示在title标题里，可改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意：别堆砌关键字，整个标题一般不超过80个字符，可以通过chinaz的seo综合查询检查。</em></p>
<p><a href="https://blog.csdn.net/lzy98/article/details/81140704" target="_blank" rel="external nofollow noopener noreferrer">参考文章1</a></p>
<p><a href="https://dp2px.com/2018/10/05/hexo-youhua/" target="_blank" rel="external nofollow noopener noreferrer">参考文章2</a></p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>标题优化</tag>
      </tags>
  </entry>
  <entry>
    <title>seo优化之关键词与描述</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%8E%E6%8F%8F%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="关键词与描述"><a href="#关键词与描述" class="headerlink" title="关键词与描述"></a>关键词与描述</h2><p><em>搜索引擎除了捉取标题外，页面的关键词和描述也会抓取</em></p>
<p><em>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键词和描述：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keywords: </span><br><span class="line">description:</span><br></pre></td></tr></table></figure>

<p><em>将以下代码去掉：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.description %&#125;</span><br><span class="line">  &#123;&#123; post.description &#125;&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-more-link text-center&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;btn&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">      &#123;&#123; __(&#39;post.read_more&#39;) &#125;&#125; &amp;raquo;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>否则首页的文章摘要就会变成文章的description，也就是没有文章预览那里的概述了</strong></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>优化</tag>
        <tag>关键词与描述</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的seo优化之nofollow</title>
    <url>/hexo%E7%9A%84seo%E4%BC%98%E5%8C%96%E4%B9%8Bnofollow.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="优化nofollow"><a href="#优化nofollow" class="headerlink" title="优化nofollow"></a>优化nofollow</h2><p><em>给非友情链接的出站链接添加 “nofollow” 标签，nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。</em></p>
<p><em>找到themes\next\layout_partials\footer.swig文件的：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot;&gt;Hexo&lt;&#x2F;a&gt;&#39;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot; rel&#x3D;&quot;external nofollow&gt;Hexo&lt;&#x2F;a&gt;&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><em>将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure>



<p><em>修改sidebar.swig文件，在themes\next\layout_macro，将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>将下面代码：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><em>改成：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;&#123;&#123; theme.creative_commons &#125;&#125;&#x2F;4.0&quot; class&#x3D;&quot;cc-opacity&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure>



<p><em>安装nofollow插件</em></p>
<p><em>减少出站链接能够有效防止权重分散，hexo有很方便的自动为出站链接添加nofollow的插件。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure>

<p><em>在站点配置文件加入：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line">    - www.langzi.fun</span><br><span class="line">    - 友链地址</span><br></pre></td></tr></table></figure>

<p><strong>这样例外的链接不会加上nofollow</strong></p>
<h2 id="robots-txt文件"><a href="#robots-txt文件" class="headerlink" title="robots.txt文件"></a>robots.txt文件</h2><p><em>创建blog/source/robots.txt文件，加入如下内容</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: * Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;categories&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;sitemap.xml</span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.langzi.fun&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>seo优化</tag>
        <tag>nofollw</tag>
      </tags>
  </entry>
  <entry>
    <title>npm相关异常</title>
    <url>/npm%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>npm install <a href="mailto:gulp@3.9.1" rel="external nofollow noopener noreferrer" target="_blank">gulp@3.9.1</a>时，npm ERR! Response timeout while trying to fetch <a href="https://registry.npmjs.org/gulp" target="_blank" rel="external nofollow noopener noreferrer">https://registry.npmjs.org/gulp</a>  (over 30000ms) npm ERR! A complete log of this run can be found in:</strong>                                                                                                                               </li>
</ul>
<p><em>解决：*npm chache clean –force,再换成手机热点就可以了</em></p>
<ul>
<li><strong>ReferenceError: primordials is not defined</strong></li>
</ul>
<p><em>解决：这是node和gulp版本不兼容的问题,解决连接<a href="https://blog.csdn.net/zxxzxx23/article/details/103000393" target="_blank" rel="external nofollow noopener noreferrer">在这里</a></em></p>
<p><em>我选择直接npm install <a href="mailto:node@11.15.0" rel="external nofollow noopener noreferrer" target="_blank">node@11.15.0</a></em>                        </p>
<blockquote>
<p>曾经以为非凡就是天赋激起的惊世骇浪，现在觉得非凡只是极平凡的认真和倔强。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>npm相关指令</title>
    <url>/npm%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>npm chache clean –force</strong></p>
<p><strong>npm install 包@版本</strong></p>
<blockquote>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>hexo某些功能,配置引用的文章</title>
    <url>/hexo%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%87%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/visugar/p/6821777.html</a></p>
<p><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="external nofollow noopener noreferrer">https://segmentfault.com/a/1190000017986794</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p>
<p><a href="https://blog.csdn.net/baidu_35145586/article/details/89033631" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/baidu_35145586/article/details/89033631</a></p>
<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><p>[URL](<a href="https://www.jianshu.com/p/93341c0aacbf" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT主题中添加网页音乐播放器功能 - 简书</a>)</p>
<p>[URL](<a href="https://aplayer.js.org/#/zh-Hans/?id=歌词" target="_blank" rel="external nofollow noopener noreferrer">首页 - APlayer</a>)</p>
<p><a href="[Hexo主题插入音乐之aplayer音乐播放器_网络_hushhw的博客-CSDN博客](https://blog.csdn.net/hushhw/article/details/88092728)">URL</a></p>
<p>[URL](<a href="https://huabuyu.net/Hexo-NexT-打造APlayer-HTML5-音乐播放器.html#使用" target="_blank" rel="external nofollow noopener noreferrer">Hexo NexT 打造APlayer HTML5 音乐播放器 | 一切归于平静</a>)</p>
<p>[URL](<a href="https://www.bzqll.com/2017/12/84.html" target="_blank" rel="external nofollow noopener noreferrer">hexo添加Aplayer音乐播放插件 - 鼻子亲了脸</a>)</p>
<p>[URL](<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">NexT主题添加音乐 - 简书</a>)</p>
<h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p><a href="https://segmentfault.com/a/1190000014085547" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><a href="https://www.jianshu.com/p/f58f68522db2" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="博客头像"><a href="#博客头像" class="headerlink" title="博客头像"></a>博客头像</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p>[url](<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external nofollow noopener noreferrer">hexo从零开始到搭建完整 - 爱吃面包的兰兰 - 博客园</a>)</p>
<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>url</strong></a></p>
<h2 id="字数，阅读时长，社交，打赏"><a href="#字数，阅读时长，社交，打赏" class="headerlink" title="字数，阅读时长，社交，打赏"></a>字数，阅读时长，社交，打赏</h2><h2 id="文章摘要显示"><a href="#文章摘要显示" class="headerlink" title="文章摘要显示"></a>文章摘要显示</h2><p><a href="https://dp2px.com/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<h2 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h2><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>引用</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章加密</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="普通加密"><a href="#普通加密" class="headerlink" title="普通加密"></a>普通加密</h2><p><em>这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。</em></p>
<p>在/themes/next/layout/custom/head.swig文件，<head></head>之间添加一下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#JavaScript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在文章头文件里添加上password:yourpassword就可以了</p>
<p><strong>缺点：容易被破解</strong></p>
<h2 id="hexo-blog-encrypt插件"><a href="#hexo-blog-encrypt插件" class="headerlink" title="hexo-blog-encrypt插件"></a>hexo-blog-encrypt插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm install –save hexo-blog-encrypt</p>
<h3 id="配置站点-config-yml文件"><a href="#配置站点-config-yml文件" class="headerlink" title="配置站点_config.yml文件"></a>配置站点_config.yml文件</h3><p><strong>加入一下内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p><strong>文章头部加入下面内容:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">keywords</span>: 博客文章密码</span><br><span class="line"><span class="selector-tag">password</span>: <span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">abstract</span>: 密码：<span class="selector-tag">TloveY</span></span><br><span class="line"><span class="selector-tag">message</span>:  输入密码，查看文章</span><br></pre></td></tr></table></figure>

<ul>
<li>password: 是该博客加密使用的密码</li>
<li>abstract: 是该博客的摘要，会显示在博客的列表页</li>
<li>message: 这个是博客查看时，密码输入框上面的描述性文字</li>
</ul>
<h3 id="使用自定义默认信息"><a href="#使用自定义默认信息" class="headerlink" title="使用自定义默认信息"></a>使用自定义默认信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure>

<p><em>这样不用每篇文章都写abstract，message</em></p>
<h3 id="对TOC加密-这是什么我也不懂"><a href="#对TOC加密-这是什么我也不懂" class="headerlink" title="对TOC加密(这是什么我也不懂)"></a>对TOC加密(这是什么我也不懂)</h3><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密</strong></a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer"><strong>文章加密2</strong></a></p>
<p><em>原文链接：<a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/Lancelot_Lewis/article/details/53422901</a></em></p>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://www.jianshu.com/p/be095c5fdeb7" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><a href="https://blog.csdn.net/Lancelot_Lewis/article/details/53422901" target="_blank" rel="external nofollow noopener noreferrer"><strong>URL</strong></a></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>encrypt</tag>
        <tag>TOC</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 java程序设计概述</title>
    <url>/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="24e26e4dc9a542a9f100644db6b1fd7e00b2617f9739bfd57038032f78c5ac10"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>概述</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo首页文章预显示设置</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E9%A2%84%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="预显示设置"><a href="#预显示设置" class="headerlink" title="预显示设置"></a>预显示设置</h2><h3 id="使用-lt-more-gt-手动截断"><a href="#使用-lt-more-gt-手动截断" class="headerlink" title="使用&lt;!-more-&gt;手动截断"></a>使用&lt;!-more-&gt;手动截断</h3><h3 id="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"><a href="#在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。" class="headerlink" title="在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。"></a>在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</h3><p><strong>在文章的 front-matter 中添加 description 和 photos 字段，如下图所示。如果不需要显示图片的话，可以把 photos 去掉。</strong></p>
<p><a href="https://imgchr.com/i/8DRTPI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRTPI.png" alt="8DRTPI.png" border="0" width="400/"></a></p>
<h3 id="自动形成摘录"><a href="#自动形成摘录" class="headerlink" title="自动形成摘录"></a>自动形成摘录</h3><p><strong>在主题配置文件_config.yml中auto_excerpt</strong></p>
<p><a href="https://imgchr.com/i/8DRDa9" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/19/8DRDa9.png" alt="8DRDa9.png" border="0"></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>预显示</tag>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客头像设置</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="博客头像设置"><a href="#博客头像设置" class="headerlink" title="博客头像设置"></a>博客头像设置</h2><h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p><strong>打开主题的_config.yml文件，在avatar处添加主题下/source/images/里的自己添加的图片</strong></p>
<p><a href="https://imgchr.com/i/8DcNvD" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcNvD.png" alt="8DcNvD.png" border="0"></a></p>
<p><strong>刷新成功显示</strong></p>
<p><a href="https://imgchr.com/i/8DcH2T" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DcH2T.png" alt="8DcH2T.png" border="0" height="250/"></a></p>
<h3 id="头像圆角并旋转"><a href="#头像圆角并旋转" class="headerlink" title="头像圆角并旋转"></a>头像圆角并旋转</h3><p><em>我就不搞这功能了，看着头晕</em></p>
<p><strong>打开主题下的 source\css_common\components\sidebar\sidebar-author.styl文件(不同版本和不同主题可能路径有些许不同，添加下面的代码即可</strong></p>
<p><code>.site-author-image {</code><br>  <code>display: block;</code><br>  <code>margin: 0 auto;</code><br>  <code>padding: $site-author-image-padding;</code><br>  <code>max-width: $site-author-image-width;</code><br>  <code>height: $site-author-image-height;</code><br>  <code>border: $site-author-image-border-width solid $site-author-image-border-color;</code><br>  <code>/* 头像圆形 */
  border-radius: 80px;
  -webkit-border-radius: 80px;
  -moz-border-radius: 80px;
  box-shadow: inset 0 -1px 0 #333sf;
  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</code><br>    <code>(1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</code></p>
<p>  <code>/* 鼠标经过头像旋转360度 */
  -webkit-transition: -webkit-transform 1.0s ease-out;
  -moz-transition: -moz-transform 1.0s ease-out;
  transition: transform 1.0s ease-out;
}
img:hover {
  /* 鼠标经过停止头像旋转</code><br>  <code>-webkit-animation-play-state:paused;</code><br>  <code>animation-play-state:paused;*/
  /* 鼠标经过头像旋转360度 */
  -webkit-transform: rotateZ(360deg);
  -moz-transform: rotateZ(360deg);
  transform: rotateZ(360deg);
}
/* Z 轴旋转动画 */</code><br><code>@-webkit-keyframes play {</code><br>  <code>0% {</code><br>    <code>-webkit-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-webkit-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@-moz-keyframes play {</code><br>  <code>0% {</code><br>    <code>-moz-transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>-moz-transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code><br><code>@keyframes play {</code><br>  <code>0% {</code><br>    <code>transform: rotateZ(0deg);</code><br>  <code>}</code><br>  <code>100% {</code><br>    <code>transform: rotateZ(-360deg);</code><br>  <code>}</code><br><code>}</code></p>
<hr>
<blockquote>
<p>他人生最大的失败就是听从于懒惰、怯懦与害羞。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>头像</tag>
        <tag>圆角</tag>
        <tag>旋转</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码生成和解码</title>
    <url>/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="草料二维码"><a href="#草料二维码" class="headerlink" title="草料二维码"></a>草料二维码</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://cli.im/" target="_blank" rel="external nofollow noopener noreferrer"><strong>草料二维码</strong></a></p>
<h3 id="总界面："><a href="#总界面：" class="headerlink" title="总界面："></a>总界面：</h3><p><a href="https://imgchr.com/i/8DwxLq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwxLq.md.png" alt="8DwxLq.png" border="0" width="400/"></a></p>
<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><h4 id="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"><a href="#支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码" class="headerlink" title="支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码"></a><em>支持将图片，EXCEL，视频，文字，文件，网址，音频，名片，app等生成二维码</em></h4><h4 id="二维码解码：生成对应资源的URL链接"><a href="#二维码解码：生成对应资源的URL链接" class="headerlink" title="二维码解码：生成对应资源的URL链接"></a><em>二维码解码</em>：生成对应资源的URL链接</h4><h4 id="二维码美化："><a href="#二维码美化：" class="headerlink" title="二维码美化："></a><em>二维码美化</em>：</h4><h5 id="快速美化器："><a href="#快速美化器：" class="headerlink" title="快速美化器："></a><em>快速美化器：</em></h5><p><a href="https://imgchr.com/i/8DwVVf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DwVVf.md.png" alt="8DwVVf.png" border="0" width="400/"></a></p>
<p><em>效果图</em></p>
<p><a href="https://imgchr.com/i/8Dd5UU" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8Dd5UU.md.png" alt="8Dd5UU.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdTC4" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdTC4.md.png" alt="8DdTC4.md.png" border="0" width="400"></a><br><a href="https://imgchr.com/i/8DdI5F" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdI5F.md.png" alt="8DdI5F.md.png" border="0" width="400"></a></p>
<h5 id="高级美化"><a href="#高级美化" class="headerlink" title="高级美化:"></a><em>高级美化:</em></h5><p><a href="https://imgchr.com/i/8DdvVK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8DdvVK.md.png" alt="8DdvVK.png" border="0" width="400/"></a></p>
<hr>
<blockquote>
<p>没有伞的孩子，必须努力奔跑!</p>
</blockquote>
]]></content>
      <tags>
        <tag>二维码</tag>
        <tag>解码</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo打赏评论字数时长</title>
    <url>/hexo%E6%89%93%E8%B5%8F%E8%AF%84%E8%AE%BA%E5%AD%97%E6%95%B0%E6%97%B6%E9%95%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
]]></content>
      <tags>
        <tag>打赏</tag>
        <tag>评论</tag>
        <tag>阅读时长</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo草稿功能</title>
    <url>/hexo%E8%8D%89%E7%A8%BF%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><em>草稿不会在博客上显示</em></p>
<h2 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h2><p><em>hexo new draft 草稿名</em></p>
<p>*生成的草稿在source/_drafts/文件夹中</p>
<h2 id="强行预览草稿"><a href="#强行预览草稿" class="headerlink" title="强行预览草稿"></a>强行预览草稿</h2><p><em>render_drafts:true/hexo server-drafts</em></p>
<h2 id="草稿变文章"><a href="#草稿变文章" class="headerlink" title="草稿变文章"></a>草稿变文章</h2><p><em>hexo publish [layout]</em></p>
<hr>
<blockquote>
<p>每天再多努力一点，每天坚持再久一点，你会发现很多事情没有那么难。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>草稿</tag>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title>URL直链和外链</title>
    <url>/URL%E7%9B%B4%E9%93%BE%E5%92%8C%E5%A4%96%E9%93%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="直链"><a href="#直链" class="headerlink" title="直链"></a>直链</h2><p><em>直链是文件在网盘中的HTTP地址，可以直接外部下载，不用进入资源分享页面，直接得到文件的URL地址，可以实现很多功能，例如音乐，视频，应用等文件直接外部发布，下载，播放。</em></p>
<h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><p><em>外链是网盘资源分享之后得到的一个资源分享地址，要进入这个外链地址才能下载资源。</em></p>
<h2 id="直链网盘网友推荐"><a href="#直链网盘网友推荐" class="headerlink" title="直链网盘网友推荐"></a>直链网盘网友推荐</h2><p><a href="https://www.baidu.com/s?wd=%E5%8D%8E%E4%B8%BA%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">华为网盘</a></p>
<p><a href="https://www.baidu.com/s?wd=%E5%92%95%E5%92%95%E7%BD%91%E7%9B%98&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">咕咕网盘</a></p>
<p><a href="https://www.baidu.com/s?wd=%E9%98%BF%E9%87%8C%E4%BA%91&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">阿里云</a></p>
<p><a href="https://www.zhihu.com/question/22861418/answer/138664832" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<p><em>用了几个直链的网盘，能真正做到的有华为网盘，咕咕网盘和阿里云</em></p>
<p><em>华为的直链不怎么推荐，价格贵，而且带宽低，最坑爹的一点是乱扣流量，例如文件有1G，一下子就扣1G流量，不管你下不下完。<br>阿里云的可以定制带宽，但是价格也就更高一些。<br>推荐用咕咕网盘的直链，流量便宜了很多，而且是下多少算不少流量，最牛的是可以包月不限流量。</em></p>
<blockquote>
<p>你不能要求拥有一个没有风暴的人生海洋，因为痛苦和磨难是人生的一部分。一个没有风暴的海洋，那不是海，是泥塘。</p>
</blockquote>
]]></content>
      <tags>
        <tag>直链</tag>
        <tag>外链</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-10_删除表</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-10_%E5%88%A0%E9%99%A4%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>视图</strong></p>
<p><em>表之间有关系时，先删除引用表</em></p>
<p><strong>SQL语句</strong></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>DROP TABLE 表名</code></p>
<p><em>检测表是否存在</em></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>SELECT * FROM sysobjects</code></p>
<p><code>IF EXISTS(SELECT * FROM sysobjects WHERE  name=&quot;表名&quot;)</code></p>
<p><code>DROP TABLE 表名</code></p>
<p><code>GO</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>删除表</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-8_删除约束</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-8-%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>视图状态下</strong></p>
<p><em>删除主外键关系:</em></p>
<p><em>删除主键</em></p>
<p><em>删除非空约束</em></p>
<p><em>删除检查约束</em></p>
<p><em>删除默认值</em></p>
<p><strong>SQL语句</strong></p>
<p><em>删除主键</em></p>
<p><code>USE 数据库名</code></p>
<p><code>GO</code></p>
<p><code>ALTER TABLE 表名</code></p>
<p><code>DROP CONSTRAINT 主键名</code></p>
<p><code>Go</code></p>
<p><em>删除检查约束</em></p>
<p><code>ALTER TABLE 表名</code></p>
<p><code>DROP CONSTRAINT 检查约束名</code></p>
<p><code>GO</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>约束</tag>
        <tag>删除</tag>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-5_约束类型</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-5_%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><a href="https://imgchr.com/i/80khvV" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80khvV.md.png" alt="80khvV.md.png" border="0"></a><br><a href="https://imgchr.com/i/80krDS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/80krDS.md.png" alt="80krDS.md.png" border="0"></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--实际运用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> YY(</span><br><span class="line">	a <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">    b <span class="built_in">char</span>(<span class="number">8</span>) <span class="keyword">default</span> <span class="string">'aaaaaaaa'</span></span><br><span class="line">    c <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    d <span class="built_in">int</span> <span class="keyword">check</span>(d=<span class="number">1</span>),</span><br><span class="line">    e <span class="keyword">unique</span>,</span><br><span class="line">    f <span class="built_in">int</span> <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="keyword">references</span> Student(Sno)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 外键参考另一个表的一个列，那个列必须是主键</span></span><br></pre></td></tr></table></figure>



<p><strong>视图状态下表属性单击右键：</strong></p>
<p><strong>设置主键</strong></p>
<p><strong>CKECK 约束</strong></p>
<p><strong>索引/键：</strong>设置是否唯一</p>
<p><strong>关系：</strong>两张表的外键关系</p>
<p><em>录入数据时，发生错误，会导致自增列的标号不符合预期</em></p>
<p><em>注意: 每次添加约束后记得保存</em></p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>约束类型</tag>
      </tags>
  </entry>
  <entry>
    <title>实验课5-4_SQL语句创建表</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E8%AF%BE5-4_SQL%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E8%A1%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><code>USE 数据库名</code></p>
<p><code>go</code></p>
<p><code>CREATE TABLE 表名</code></p>
<p><code>(</code></p>
<p><code>属性名 数据类型 约束</code></p>
<p><code>)</code></p>
]]></content>
      <categories>
        <category>数据库系统</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>创建表</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加音乐播放功能</title>
    <url>/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="使用APlayer插件"><a href="#使用APlayer插件" class="headerlink" title="使用APlayer插件"></a>使用APlayer插件</h2><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="external nofollow noopener noreferrer">APlayer</a></p>
<p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p>
<ul>
<li><strong>网易音乐外链地址</strong>：<a href="http://jump.bdimg.com/safecheck/index?url=x+Z5mMbGPAv7zFgtRCFyfwPeGQWa6UVU1tw+/GrGs/EwXO5bOUA0jYHGYubpEQmJ1OuvZ0jD4CE/i30mCFy3Dzy9jb8WhszlJ4wo1bk82HMS/4MX7uYcHlTSn+om/dlEmQx7lZYIASURsAoa108DVnY9qHh6BM0y" target="_blank" rel="external nofollow noopener noreferrer">http://music.163.com/song/media/outer/url?id=</a> .mp3</li>
</ul>
<p><em>在网页版的网易音乐中找到想要的音乐获取ID，粘贴到上面url的id=处就可以获取音乐的外链</em></p>
<ul>
<li><strong>实现过程：</strong></li>
</ul>
<ol>
<li><p>下载Aplayer文件解压，将里面的dist文件夹复制到themes\next\source文件夹下</p>
</li>
<li><p>在themes\next\source\dist\路径下，新建music.js文件，内容如下：</p>
</li>
</ol>
<p><code>const ap = new APlayer({</code><br>    <code>container: document.getElementById(&#39;aplayer&#39;),</code><br>    <code>fixed: true,</code><br>    <code>autoplay: false,</code><br>    <code>audio: [</code><br>      <code>{</code><br>        <code>name: &quot;You are my sunshine&quot;,</code><br>        <code>artist: &#39;Elizabeth Mitchell&#39;,</code><br>        <code>url: &#39;https://s1.ax1x.com/2020/03/18/8dQvnI.th.jpg&#39;,</code><br>        <code>cover: &#39;https://imgchr.com/i/8dQvnI&#39;,</code><br>      <code>},</code><br>      <code>{</code><br>        <code>name: &#39;Shallow&#39;,</code><br>        <code>artist: &#39;Lady Gaga/Bradley Cooper&#39;,</code><br>        <code>url: &#39;http://music.163.com/song/media/outer/url?id=1313096578.mp3&#39;,</code><br>        <code>cover: &#39;https://s1.ax1x.com/2020/03/18/8d1EGD.th.jpg&#39;,</code><br>      <code>},</code><br>    <code>]</code><br><code>});</code></p>
<ol start="3">
<li>在themes\next\layout_layout.swig文件最后(body标签里面），添加：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在hexo的左下面成功生成播放器</li>
<li>添加图片:把图片链接添加到第一次代码的对应歌曲处的图片链接里(我使用的是<a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床imgchr</a>,帮助上说的是无线存储，免费)。建议添加图片时，选着链接为缩略图的链接。</li>
<li>刷新，成功显示播放器并且可以正常显示图片和播放音乐</li>
</ol>
<p><a href="https://imgchr.com/i/8d8gV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8d8gV1.md.png" alt="8d8gV1.png" border="0"></a></p>
<ol start="7">
<li>歌词实现:</li>
</ol>
<ul>
<li><p>网易歌词<a href="https://www.zhihu.com/question/27638171/answer/146004899" target="_blank" rel="external nofollow noopener noreferrer">获取</a></p>
</li>
<li><p>待更新</p>
</li>
</ul>
<h2 id="使用网易外链播放器-歌曲很容易收版权限制"><a href="#使用网易外链播放器-歌曲很容易收版权限制" class="headerlink" title="使用网易外链播放器(歌曲很容易收版权限制)"></a>使用网易外链播放器(歌曲很容易收版权限制)</h2><p>**直接在网页版网易音乐里找到单曲或歌单，直接生成外链播放器的HTML。把HTML放到想要展示的地方就可以了</p>
<p><a href="https://imgchr.com/i/8wnJcn" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnJcn.md.png" alt="8wnJcn.md.png" border="0"></a><br><a href="https://imgchr.com/i/8wnG1s" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8wnG1s.md.png" alt="8wnG1s.md.png" border="0"></a></p>
<p><em>网易很容易受版权限制，无法生成外链播放器</em></p>
<h2 id="Aplayer的MeingJS"><a href="#Aplayer的MeingJS" class="headerlink" title="Aplayer的MeingJS"></a>Aplayer的MeingJS</h2><p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p>
<h2 id="使用html标签"><a href="#使用html标签" class="headerlink" title="使用html标签"></a>使用html标签</h2><p>写法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://music.163.com/song/media/outer/url?id=1313096578.mp3"</span> <span class="attr">style</span>=<span class="string">"max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;"</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">preload</span>=<span class="string">"meta"</span>&gt;</span>Your browser does not support the audio tag.<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用APlayer标签"><a href="#使用APlayer标签" class="headerlink" title="使用APlayer标签"></a>使用APlayer标签</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>





<p><strong>借鉴<a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="external nofollow noopener noreferrer">链接</a></strong></p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>音乐播放</tag>
        <tag>APlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-第二章</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id><a href="#" class="headerlink" title="."></a>.</h2><h2 id="物理层-重点是概念"><a href="#物理层-重点是概念" class="headerlink" title="物理层(重点是概念)"></a>物理层(重点是概念)</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><p><em>物理层考虑的是怎样才能在连接计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体</em></p>
<p><em>用于物理层的协议叫做*</em>物理层规程***</p>
<p><em>物理层的具体任务是确定与传输媒体的接口有关的一些特性，即：</em></p>
<ul>
<li><strong>机械特性</strong>:可见特征</li>
<li><strong>电气特性</strong>：电压范围</li>
<li><strong>功能特性</strong>: 某一电平电压表示何种意义</li>
<li><strong>过程特性</strong>： 指明不同功能的各种可能事件的出现顺序</li>
</ul>
<p><em>数据在计算机中多采用*</em>并行传输<strong>方式，在通信线路中传输方式一般为</strong>串行传输***</p>
<p><em>物理层协议种类多，是因为物理连接方式很多(<strong>点对点，多点连接或广播连接</strong>)，而传输媒体的种类也很多(如架空明线，双绞线，对称电缆，同轴电缆，光缆，以及各种波段的无线信道等)</em></p>
<h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><h4 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h4><p><em>一个数据通信系统可划分为三大部分，即*</em>原系统(或发送端，发送方)，传输系统(或传输网络)和目的系统(或接收端，接收方)</p>
<img src="https://s1.ax1x.com/2020/03/17/8a4Qtx.png" alt="8a4Qtx.png" border="0">

<p>​                                    <em>图2-1 数据通信系统的模型(也可以说它是计算机网络)</em></p>
<ul>
<li><p>源系统一般包括以下两个部分:</p>
<p>源点:<em>又称*</em>源站或信源***</p>
<p>发送器: <em>常源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输。典型的发送器就是<strong>调制器</strong>。现在很多PC 使用内置的调制解调器（包含调制器和解调器）,用户在PC 外面看不见调制解调器</em></p>
</li>
<li><p>目的系统一般也包括以下两部分:</p>
<p>接收器:<em>接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息。典型的接收器就是<strong>解调器</strong>，它把来自传输线路上的模拟信号进行解调，提取出在在发送端置入的消息，还原岀发送端产生的数字比特流</em> </p>
<p>终点:<em>终点役备从接收器获取传送来的数字比特流，然后进行信息输出（例如，把汉字在P C 屏幕上显示出来）。终点又称为*</em>目的站<strong>或</strong>信宿***</p>
</li>
<li><p>连接源系统和目的系统的可以是简单的传输线，也可以是复杂的网络系统</p>
</li>
</ul>
<p><strong>常用术语:</strong></p>
<p>通信的目的是传送<strong>信息</strong></p>
<p><strong>数据</strong>是运送信息的实体</p>
<p><strong>信号</strong>则是数据的电气的或电磁的表现</p>
<p><strong>根据信号中代表信息的参数的取值不同，信号可以分为两大类：</strong></p>
<p><em>模拟信号，或连续信号</em>  消息的参数的取值是连续的  </p>
<p><em>数字信号,  或离散信号</em>   消 息 的 参 数 的 取 值 是 离 散 的 。在使用吋间域(或简称为吋域)的波形表示数字信号吋，则代表不同离散数值的基本波形就称为码元。在使用二进制编码吋，只有两种不同的码元， 一种 代 表 0 状态而另一种 代 表 1 状态。  </p>
<h4 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h4><p>信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此， 一条通信线路往往包含…条发送信<br>道和一条接收信道。  </p>
<p><em>通过双方信息交互方式不同可以分为:</em></p>
<ul>
<li>单向通信，又称为单工通信  </li>
<li>双向交替通信，又称为半双工通信</li>
<li>双向同时通信，又称为全双工通信  </li>
</ul>
<p><strong>基带信号</strong>：<em>来自信源的信号 (像计算机输出的代表各种文字或<br>图像文件的数据信号都属于基带信号）</em></p>
<p><strong>调制</strong>:   <em>基带信号往往包含有较多的低频成分，甚至有直流成<br>分。而许多信道并不能传输这种低频分量或直流分量。为了解决这一问题</em></p>
<p>调制:</p>
<ul>
<li>基带调制：<em>一类是仅仅对基带信号的波形进行变换，使它能够与信道特性相适应 ，变换后的信号仍然是基带信号</em></li>
<li>带通调制：<em>另一类则需要使用载波(earner)进行调制，把基带信号的频率范围搬移到较高的频段以便在信道中传输</em>，经过载波调制后的信号称为带通信号（即仅在一段频率范围内能够通过信道）  </li>
</ul>
<p><strong>最基本的带通调制方法有:</strong></p>
<ul>
<li>调幅（AM）, 即载波的振幅随基带数字信号而变化。例如， 0 或 1 分别对应于无载波或有载波输出 </li>
<li>调频（FM）, 即载波的频率随基带数字信号而变化。例如， 0 或 1 分别对应于频率久或无。  </li>
<li>调相（PM）, 即载波的初始相位随基带数字信号而变化。例如， 0 或 1 分别对应于相位 0° 或 180°  </li>
</ul>
<p><em>为了达到更高的信息传输速率，必须采用技术上更为复杂的多元制的振幅相位混合调制方法。例如，*</em>正交振幅调制 QAM （Quadrature Amplitude Modulation）***</p>
<h4 id="提高数据传输速率的途径"><a href="#提高数据传输速率的途径" class="headerlink" title="提高数据传输速率的途径"></a>提高数据传输速率的途径</h4><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h4 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h4><h4 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h4><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="频道复用，时分复用和统计时分复用"><a href="#频道复用，时分复用和统计时分复用" class="headerlink" title="频道复用，时分复用和统计时分复用"></a>频道复用，时分复用和统计时分复用</h4><h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><h4 id="脉码调制体制"><a href="#脉码调制体制" class="headerlink" title="脉码调制体制"></a>脉码调制体制</h4><h4 id="同步光纤网SONET和同步数字系统SDH"><a href="#同步光纤网SONET和同步数字系统SDH" class="headerlink" title="同步光纤网SONET和同步数字系统SDH"></a>同步光纤网SONET和同步数字系统SDH</h4><h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><h4 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h4><h4 id="光纤同轴混合网"><a href="#光纤同轴混合网" class="headerlink" title="光纤同轴混合网"></a>光纤同轴混合网</h4><h4 id="FTTx技术"><a href="#FTTx技术" class="headerlink" title="FTTx技术"></a>FTTx技术</h4><blockquote>
<p>你给世界什么姿态，世界将还你什么样的人生。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>第二章</tag>
        <tag>物理层</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 shell命令操作HDFS-常用HDFS操作命令</title>
    <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><h3 id="常用的HDFS操作命令-hdfs-dfs"><a href="#常用的HDFS操作命令-hdfs-dfs" class="headerlink" title="常用的HDFS操作命令(hdfs dfs)"></a>常用的HDFS操作命令(hdfs dfs)</h3><h3 id="首先开启hdfs"><a href="#首先开启hdfs" class="headerlink" title="首先开启hdfs:"></a>首先开启hdfs:</h3><p>start-dfs.sh/start-all.sh</p>
<h3 id="用法查看："><a href="#用法查看：" class="headerlink" title="用法查看："></a>用法查看：</h3><p>hdfs dfs</p>
<h3 id="创建目录-p-表示会创建父目录"><a href="#创建目录-p-表示会创建父目录" class="headerlink" title="创建目录(-p 表示会创建父目录)"></a>创建目录(-p 表示会创建父目录)</h3><p>hdfs  dfs  -mkdir  /001</p>
<p>hdfs  dfs  -mkdir  /001/demo1   /001/demo2   /001/demo3 一次创建多个目录</p>
<p>hdfs  dfs  -mkdir  -p  /001/x/y  一次性创建多层目录</p>
<h3 id="列出子目录或子文件"><a href="#列出子目录或子文件" class="headerlink" title="列出子目录或子文件"></a>列出子目录或子文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls [-d][-h][-R] &lt;paths&gt;</span><br><span class="line">&#x2F;&#x2F; -d 返回 path; -h 人性化显示</span><br></pre></td></tr></table></figure>

<p>hdfs dfs -ls [path]</p>
<p>hdfs dfs -ls -R [path] 递归形式显示</p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><strong>将本地目录下的文件上传到HDFS上，并分别重命名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put [-f] [-p] &lt;localsrc&gt; &lt;dst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyFromLocal [-f] [-p] [-l] &lt;localsrc&gt; &lt;dst&gt;</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -put  本地文件名  hdfs路径</p>
<p>hdfs  dfs  -copyFromLocal  本地文件名  hdfs路径</p>
<p>例: hdfs  dfs  -put  text1.txt   /001/demo1/hdfs1.txt</p>
<p>例: hdfs  dfs  -copyFromLocal  text1.txt   /001/demo1/hdfs1.txt</p>
<h3 id="将本地文件移动到HDFS"><a href="#将本地文件移动到HDFS" class="headerlink" title="将本地文件移动到HDFS"></a>将本地文件移动到HDFS</h3><p>hdfs  dfs  -moveFromLocal  本地文件名  HDFS路径</p>
<h3 id="下载文件到本地"><a href="#下载文件到本地" class="headerlink" title="下载文件到本地"></a>下载文件到本地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get [-p] &lt;src&gt; &lt;localdst&gt;</span><br><span class="line"></span><br><span class="line">hdfs dfs -copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  copyToLocal  hdfs文件  本地path</p>
<p>hdfs  dfs  -get  hdfs文件  本地路径</p>
<h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -cat&#x2F;text[-ignoreCrc] &lt;src&gt;</span><br><span class="line"></span><br><span class="line">	  hdfs dfs -tail [-f]&lt;file&gt;</span><br><span class="line">-ignoreCrc：忽略循环检验失败的文件。</span><br><span class="line">-f：动态更新显示数据</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -cat  hdfs路径</p>
<p>hdfs  dfs  -text  hdfs路径</p>
<h3 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -rm [-f] [-r] &lt;src&gt;</span><br><span class="line">	-f：如果要删除的文件不存在，不显示错误信息。</span><br><span class="line">	-r&#x2F;R：级联删除目录下所有的文件和子目录文件</span><br></pre></td></tr></table></figure>

<p>参数r为递归删除</p>
<p>hdfs  dfs  -rm  -r  hdfs文件</p>
<h3 id="追写文件"><a href="#追写文件" class="headerlink" title="追写文件"></a>追写文件</h3><p><em>命令： hdfs dfs -appendToFile <localsrc> <dst><br>该命令将 localsrc 指向的本地文件内容写入目标文件 dst。如果 localsrc 是“-”，表示数据来自键盘输入， “Ctrc+c”组合键结束输入</dst></localsrc></em>  </p>
<h3 id="复制文件或文件夹"><a href="#复制文件或文件夹" class="headerlink" title="复制文件或文件夹"></a>复制文件或文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -cp [-f] [-p | -p[topax]] &lt;src&gt; &lt;dst&gt;</span><br><span class="line">-f：如果目标文件存在，将强行覆盖。</span><br><span class="line">-p：将保存文件的属性</span><br></pre></td></tr></table></figure>



<p>hdfs  dfs  -cp  hdfs文件/文件夹  hdfs文件名/hdfs文件夹</p>
<h3 id="文件或文件夹的移动"><a href="#文件或文件夹的移动" class="headerlink" title="文件或文件夹的移动"></a>文件或文件夹的移动</h3><p>hdfs  dfs  -mv  hdfs文件 hdfs路径/文件名</p>
<h3 id="使用touchz命令创建文件"><a href="#使用touchz命令创建文件" class="headerlink" title="使用touchz命令创建文件"></a>使用touchz命令创建文件</h3><p>hdfs  dfs   -touchz  文件</p>
<h3 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -du [-s] [-h] &lt;path&gt;</span><br><span class="line">按字节显示指定目录所占空间大小。</span><br><span class="line">-s：显示指定目录下文件总的大小。</span><br><span class="line">-h： h 指“human-readble”，表示按照人性化的单位显示文件大小</span><br></pre></td></tr></table></figure>



<p>hdfs  dfs  -du  hdfs文件</p>
<h3 id="count统计-显示：目录个数，文件个数，文件总计大小"><a href="#count统计-显示：目录个数，文件个数，文件总计大小" class="headerlink" title="count统计(显示：目录个数，文件个数，文件总计大小)"></a>count统计(显示：目录个数，文件个数，文件总计大小)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令： hdfs dfs -count [-q] [-h] &lt;path&gt;</span><br><span class="line">统计某个目录下的子目录与文件的个数及文件大小。统计的结果包含目录数、文件数、文件大小、路径</span><br></pre></td></tr></table></figure>

<p>hdfs  dfs  -count  hdfs文件夹</p>
<h3 id="获取扩展属性，设置扩展属性"><a href="#获取扩展属性，设置扩展属性" class="headerlink" title="获取扩展属性，设置扩展属性"></a>获取扩展属性，设置扩展属性</h3><p>hdfs  dfs  -setfattr  -n  user.from  -v  <a href="http://www.baidu.com" target="_blank" rel="external nofollow noopener noreferrer">http://www.baidu.com</a>  hdfs文件</p>
<p> <a href="https://blog.csdn.net/u013525455/article/details/52795025" target="_blank" rel="external nofollow noopener noreferrer">setfattr详解</a></p>
<p>hdfs  dfs  -getfattr  -d  hdfs文件</p>
<p><a href="https://imgchr.com/i/YvHNOx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/05/23/YvHNOx.md.png" alt="YvHNOx.png" border="0"></a></p>
<h3 id="文件合并再下载"><a href="#文件合并再下载" class="headerlink" title="文件合并再下载"></a>文件合并再下载</h3><p><em>将路径中的文件合并并命名下载</em></p>
<p>hdfs  dfs  -getmerge  文件夹  文件名</p>
<h3 id="追加数据文件末尾的指令"><a href="#追加数据文件末尾的指令" class="headerlink" title="追加数据文件末尾的指令"></a>追加数据文件末尾的指令</h3><p>hdfs  dfs  -appendToFile  本地文件  hdfs文件</p>
<h3 id="打印Block报告"><a href="#打印Block报告" class="headerlink" title="打印Block报告"></a>打印Block报告</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks</p>
<h3 id="打印文件块的位置信息-locations"><a href="#打印文件块的位置信息-locations" class="headerlink" title="打印文件块的位置信息(-locations)"></a>打印文件块的位置信息(-locations)</h3><p>hdfs fsck /user/hadoop/hadoop-2.7.3.tar.gz -files -blocks -locations</p>
<p><a href="https://imgchr.com/i/GJf7in" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/02/GJf7in.md.png" alt="GJf7in.png" border="0"></a></p>
<hr>
<blockquote>
<p>过去的别再遗憾</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop相关异常</title>
    <url>/hadoop%E7%9B%B8%E5%85%B3%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="text/javascript" src="/js/src/bai.js"></script>

<hr>
<h2 id="下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied"><a href="#下载文件到本地-get-hdfs1-txt-COPYING-Permission-denied" class="headerlink" title="下载文件到本地  get: /hdfs1.txt.COPYING (Permission denied)"></a>下载文件到本地  get: /hdfs1.txt.<em>COPYING</em> (Permission denied)</h2><p><strong>权限问题</strong></p>
<h2 id="使用java-api-操作hdfs时不能-端口拒绝访问call-from-…"><a href="#使用java-api-操作hdfs时不能-端口拒绝访问call-from-…" class="headerlink" title="使用java api 操作hdfs时不能 端口拒绝访问call from …"></a>使用java api 操作hdfs时不能 端口拒绝访问call from …</h2><ul>
<li>防火墙没有关闭</li>
</ul>
<p><em>sudo ufw status</em></p>
<p><em>sudo ufw disable</em></p>
<ul>
<li>hdfs没打开</li>
</ul>
<p>start-all.sh</p>
<h2 id="safeModeException"><a href="#safeModeException" class="headerlink" title="safeModeException"></a>safeModeException</h2><p><em>没有关闭安全模式：hdsf dfsadmin -safemode leave</em></p>
<p><em>状态：hdfs dfsadmin -safemode get</em></p>
<p><em>进入：hdfs dfsadmin -safemode enter</em></p>
<h2 id="使用JavaAPI操作HDFS创建目录和权限问题"><a href="#使用JavaAPI操作HDFS创建目录和权限问题" class="headerlink" title="使用JavaAPI操作HDFS创建目录和权限问题"></a>使用JavaAPI操作HDFS创建目录和权限问题</h2><p><strong>第一种方式：//指定当前用户为root用户</strong><br>             <strong>System.setProperty(“HADOOP_USER_NAME”, “root”);</strong></p>
<p>   <strong>第二种方式：通过java的-D方式参数，-D可以理解是取参数的，如图所示：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190103202106296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt="uri"></p>
<p><img src="https://img-blog.csdnimg.cn/20190103202137943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjUwOTEz,size_16,color_FFFFFF,t_70" alt></p>
<p> <strong>第三种方式：dfs.permissions –&gt;false ; 默认是ture,修改就行。</strong></p>
<p> <strong>第四种方式：命令 -chmod 改变hdfs的目录权限</strong></p>
<h2 id="java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs"><a href="#java-api-操作hdfs时需要关闭防火墙，安全模式，启动hdfs" class="headerlink" title="java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs"></a>java api 操作hdfs时需要关闭防火墙，安全模式，启动hdfs</h2><p><em>sudo ufw disable</em></p>
<p><em>hdfs dfs -safemode leave</em></p>
<p><em>start-dfs.sh</em></p>
<h2 id="hadoop命令行执行mapreduce作业时报错"><a href="#hadoop命令行执行mapreduce作业时报错" class="headerlink" title="hadoop命令行执行mapreduce作业时报错"></a>hadoop命令行执行mapreduce作业时报错</h2><h3 id="output输出路径已存在"><a href="#output输出路径已存在" class="headerlink" title="output输出路径已存在"></a>output输出路径已存在</h3><p><a href="https://imgchr.com/i/J4fDL6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fDL6.md.png" alt="J4fDL6.png" border="0"></a></p>
<p><strong>解决：</strong></p>
<p><em>输出路径不能已存在</em></p>
<p><em>命令中不需要主文件参数：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar xxx.jar input路径 output路径</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/J4fvyq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fvyq.md.png" alt="J4fvyq.md.png" border="0"></a><br><a href="https://imgchr.com/i/J4fjln" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/04/28/J4fjln.md.png" alt="J4fjln.md.png" border="0"></a></p>
<h2 id="使用java-api-操作hdfs时接口传字符，需要是双引号"><a href="#使用java-api-操作hdfs时接口传字符，需要是双引号" class="headerlink" title="使用java api 操作hdfs时接口传字符，需要是双引号"></a>使用java api 操作hdfs时接口传字符，需要是双引号</h2><blockquote>
<p>可以传达自己的思想，但是没必要同化他人。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 shell命令操作HDFS-常用HDFS管理命令</title>
    <url>/hadoop%E5%B8%B8%E7%94%A8HDFS%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><h3 id="查看hdfs所有管理命令"><a href="#查看hdfs所有管理命令" class="headerlink" title="查看hdfs所有管理命令"></a>查看hdfs所有管理命令</h3><p><em>hdfs dfsadmin</em></p>
<h3 id="查看命令用法"><a href="#查看命令用法" class="headerlink" title="查看命令用法"></a>查看命令用法</h3><p><em>hdfs dfsadmin -help</em></p>
<h3 id="安全模式相关练习实践"><a href="#安全模式相关练习实践" class="headerlink" title="安全模式相关练习实践"></a>安全模式相关练习实践</h3><p><em>首先要启动hdfs</em>: start-dfs.sh</p>
<p><em>hdfs dfsadmin -safemode enter</em> 进入安全模式</p>
<p><em>hdfs dfsadmin -safemode get</em>  获取状态</p>
<p><em>hdfs dfsadmin -safemode wait</em></p>
<p><em>hdfs dfsadmin -safemode leave</em>  退出</p>
<h3 id="快照相关练习实验"><a href="#快照相关练习实验" class="headerlink" title="快照相关练习实验"></a>快照相关练习实验</h3><p><a href="https://www.cnblogs.com/JackQ/p/4586663.html" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<p><em>Hdfs的快照（snapshot）是在某一时间点对指定文件系统拷贝，快照采用只读模式，可以对重要数据进行恢复、防止用户错误性的操作</em></p>
<p><em>快照是对文件数据进行保护的措施，可以对错误操作恢复数据。<strong>只能</strong>在允许的路径上创建快照，<strong>子路径</strong>也不可以。创建快照的路径不可以删除</em></p>
<p><strong>开启</strong></p>
<p><em>hdfs  dfsadmin  -allowSnapshot <smapshotdir></smapshotdir></em></p>
<p><strong>关闭</strong></p>
<p><em>hdfs  dfsadmin  -disallowSnapshot <snapshotdir></snapshotdir></em></p>
<p><strong>例</strong></p>
<p><em>hdfs  dfsadmin  -allowSnapshot  /001/mydemo</em></p>
<p><em>hdfs  dfsadmin  -disallowSnapshot /001/mydemo</em></p>
<p><strong>创建并命名</strong></p>
<p><em>hdfs  dfs  -createSnapshot  hdfs路径 名字</em></p>
<p><strong>删除</strong></p>
<p><em>hdfs dfs  -deleteSnapshot  hdfs路径 名字</em></p>
<p><strong>重命名</strong></p>
<p><em>hdfs dfs -renameSnapshot hdfs路径 oldname newname</em></p>
<h4 id="查看所有快照"><a href="#查看所有快照" class="headerlink" title="查看所有快照"></a>查看所有快照</h4><p><em>hdfs lsSnapshottableDir</em></p>
<h4 id="查看某一个具体快照"><a href="#查看某一个具体快照" class="headerlink" title="查看某一个具体快照"></a>查看某一个具体快照</h4><p><em>创建快照时候，默认的文件夹是.snapshot 查看时候必须加上.snapshot才能看到里面备份的东西</em></p>
<p><em>hdfs dfs -ls 路径/.snapshot/</em></p>
<img src="https://s1.ax1x.com/2020/05/23/YvvR2D.png" alt="YvvR2D.png" border="0">

<h4 id="快照对比"><a href="#快照对比" class="headerlink" title="快照对比"></a>快照对比</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs snapshotDiff &lt;path&gt; &lt;fromSnapshot&gt; &lt;toSnapshot&gt;</span><br><span class="line">例如： </span><br><span class="line">执行命令 hdfs snapshotDiff  &#x2F;Workspace&#x2F;linlin bak1 bak2</span><br></pre></td></tr></table></figure>

<img src="https://s1.ax1x.com/2020/05/23/YvvbPf.png" alt="YvvbPf.png" border="0">

<h3 id="配额"><a href="#配额" class="headerlink" title="配额"></a>配额</h3><p><em>HDFS允许管理员给私人目录设置其下面文件夹和文件的总数量配额，或空间使用总量配额。所以HDFS配额的对象是目录，而非用户。如果需要实现用户级别的配额，则需要采用第三方系统进行逻辑管理并映射到文件夹配额。</em></p>
<h4 id="文件配额"><a href="#文件配额" class="headerlink" title="文件配额"></a>文件配额</h4><p><em>文件数配额指的是可以限制当前文件夹下，所有文件和文件夹的总数量</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建</span><br><span class="line">hdfs dfsadmin  -setQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br><span class="line">--删除</span><br><span class="line">hdfs dfsadmin -clrQuota &lt;directory&gt;...&lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p><em>hdfs dfsadmin  -setQuota 3  /001/mydemo3</em></p>
<h4 id="空间配额"><a href="#空间配额" class="headerlink" title="空间配额"></a>空间配额</h4><p><em>空间配额指的是可以限制当前文件夹下，所有文件（包含子文件夹中的数据文件，会递归的去统计）的总大小</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin  -setSpaceQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;</span><br></pre></td></tr></table></figure>

<p><em>hdfs dfsadmin  -setSpaceQuota 134217728 /mydemo4</em></p>
<h3 id="报告文件系统的基本信息和统计信息"><a href="#报告文件系统的基本信息和统计信息" class="headerlink" title="报告文件系统的基本信息和统计信息"></a>报告文件系统的基本信息和统计信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure>

<h3 id="查看拓扑实验"><a href="#查看拓扑实验" class="headerlink" title="查看拓扑实验"></a>查看拓扑实验</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -printTopology</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p>事常与人违，事总在人为</p>
</blockquote>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>HDFS</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章添加图片</title>
    <url>/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="目前知道的和去尝试了的图片添加方式有以下几种"><a href="#目前知道的和去尝试了的图片添加方式有以下几种" class="headerlink" title="目前知道的和去尝试了的图片添加方式有以下几种:"></a>目前知道的和去尝试了的图片添加方式有以下几种:</h2><p><em>首先本地上传需要安装</em> <em>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save<em>，</em>这个为0.0.5版本，网上针对1.0.0(npm install hexo-asset-iamge –save)后期图片加载不出，大都用0.0.5版本</em></p>
<ul>
<li><strong>绝对路径</strong>：</li>
</ul>
<p><em>在source路径下创建images文件夹，图片保存在这里面</em></p>
<p><strong>格式:</strong></p>
<p><em>/images/图片名</em></p>
<ul>
<li><strong>相对路径</strong>(<em>在主页无法显示</em>)：</li>
</ul>
<p><em>根目录下的_config.yml里的post_asset_folder设置为true。创建文章时，会同时创建同名文件夹，把图片放在同名文件夹里，再在hexo文章里用相对路径引入图片</em></p>
<p><strong>格式：</strong></p>
<p><em>同名文件夹/图片名</em></p>
<p><strong>前两种针对图片在本地</strong></p>
<p><em>在线图片</em>：</p>
<ul>
<li><p><strong><a href="https://imgchr.com/" target="_blank" rel="external nofollow noopener noreferrer">图床</a></strong>  </p>
</li>
<li><p><strong><a href="https://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">cloudinary</a></strong></p>
</li>
</ul>
<h2 id="用imgchr添加图片"><a href="#用imgchr添加图片" class="headerlink" title="用imgchr添加图片"></a>用imgchr添加图片</h2><p><em>imgchr可以无限使用，免费，且不会被删图，提供各种形式图片链接</em></p>
<p><a href="https://imgchr.com/i/8dGXwR" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dGXwR.md.png" alt="8dGXwR.png" border="0"></a></p>
<p><a href="https://imgchr.com/i/8dJ87n" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/03/18/8dJ87n.th.png" alt="8dJ87n.png" border="0" width="200/"></a></p>
<ul>
<li><strong>图片设置宽度</strong></li>
</ul>
<p>&lt;img src=”url” width=100</p>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN是什么?</title>
    <url>/CDN%E6%98%AF%E4%BB%80%E4%B9%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN?"></a>什么是CDN?</h2><p><strong>英文名</strong>: <em>Content Delivery Network</em></p>
<p><strong>中文名</strong>: <em>内容分发网络</em></p>
<p><strong>网友解释</strong>：<em>CDN也称内容分发网络，其原理大概是将服务内容分发至全网加速节点，让用户从就近的服务器节点上获取内容，从而提高网站的访问速度。大部分服务商（如阿里云，网易蜂巢，京东云等）的CDN服务是按使用量收费的，也有一些服务商提供免费的CDN服务。</em></p>
<p><strong>阿里云解释</strong>：<em>将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</em></p>
<p><strong>知乎高级解释</strong>：<a href="https://www.zhihu.com/question/36514327" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<h2 id="免费的CDN"><a href="#免费的CDN" class="headerlink" title="免费的CDN"></a>免费的CDN</h2><p><a href="https://blog.csdn.net/weixin_42779969/article/details/101194863" target="_blank" rel="external nofollow noopener noreferrer">url</a></p>
<hr>
<blockquote>
<p>有志者，事竟成</p>
</blockquote>
]]></content>
      <tags>
        <tag>CDN</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>next添加字数和阅读时长</title>
    <url>/next%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>把theme底下的_config.yml里对应的设置开启</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  min2read: true          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  totalcount: false       <span class="comment"># 网站 字数统计</span></span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo-wordcount插件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：*</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount@2 --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>这样设置后对应的只有数字，没有“字”和“分钟”。打开<em>themes/next/layout/_macro/post.swig</em>，再通过以下设置即可：</strong></p>
<p><em>添加“<strong>字</strong>”</em></p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><em>改为</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><em>添加“<strong>分钟</strong>”</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; </span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>



<p><strong><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="external nofollow noopener noreferrer">引用</a></strong></p>
<hr>
<blockquote>
<p>提出正确的问题，往往等于解决了问题的一大半!</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>阅读时长</tag>
        <tag>字数</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo遇到的异常</title>
    <url>/hexo%E9%81%87%E5%88%B0%E7%9A%84%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<ul>
<li><strong>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</strong></li>
</ul>
<p>​       <em>解决：文章最前面的分类，标签等，冒号后面需要一个空格且三个下划线不能丢失</em></p>
<ul>
<li><p><strong>突然github上的hexo打不开</strong></p>
<p><em>解决：可能是网络原因，重连网络</em></p>
</li>
<li><p><strong>gitalk评论时显示gitalk Error: Validation Failed</strong></p>
<p><em>原因：我也碰到了这个问题，研究了一下，发现是文章名称经URL编码后添加到issues的label里，但是label的长度上限是50个字符，所以文章名有些长的都会生成label失败，也就没办法评论了。提一下个人想法，不知道行不行得通：文章名经URL编码后转MD5，然后再生成label,这样就不会超过长度了，也存在区分度</em></p>
<p><em>解决：</em></p>
<p>​    <em>法一：</em></p>
<p><em><a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="external nofollow noopener noreferrer">下载</a>这个，把里面的md5.min.js放到<strong>source\js\src</strong>目录中</em></p>
<p><em>修改gitalk.swig文件的中间内容为:</em></p>
<p>​    <em>法二：通过<a href="https://blog.csdn.net/qing_gee/article/details/100134998" target="_blank" rel="external nofollow noopener noreferrer">其他</a>的查询只需要在gitalk.swig文件里的clientID上面添加一行<strong>id: decodeURL(‘‘),</strong>就可以了(应该是通过url里的特定段落进行转码，使其变短).</em></p>
</li>
</ul>
<ul>
<li><strong>hexo文章添加本地图片(网上的url图片可以成功加载)时，在local和github上不显示的问题</strong></li>
</ul>
<p><em>解决:</em> 网上有通过安装<em>hexo-asset-image</em> 插件，开启主目录下<em>_config.yml<em>里的</em>post_asset_folder<em>开关，来实现图片上传问题。经过长时间的尝试，不管是用相对路径(在同名文件夹里)，绝对路径(images里)，还有的说法是</em>hexo-asset-image<em>的</em>1.0.0</em>[]版本有问题，换成<em>0.0.5</em>[ <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/CodeFalling/hexo-asset-image</a> –save],但最终都以失败告终。</p>
<p><em>网上存储图片的方案有<a href="https://www.jianshu.com/p/ce98fbff39ac" target="_blank" rel="external nofollow noopener noreferrer">CDN</a>服务。比如<a href="http://cloudinary.com/" target="_blank" rel="external nofollow noopener noreferrer">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</em></p>
<ul>
<li><strong>Please make sure you have the correct access rights<br>and the repository exists.FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/d" target="_blank" rel="external nofollow noopener noreferrer">https://hexo.io/d</a>                                                                                                                               ocs/troubleshooting.html</strong></li>
</ul>
<p><em>解决：可能是网络原因，网上有说是ssh密匙的原因</em></p>
<ul>
<li><strong>Connection reset by 192.30.255.112 fatal: Could not read from remote repository.  Please make sure y</strong></li>
</ul>
<p><em>原因：可能是ssh密匙过期</em></p>
<p><em><a href="https://www.cnblogs.com/youcong/p/11111397.html" target="_blank" rel="external nofollow noopener noreferrer">解决方法</a></em></p>
<hr>
<blockquote>
<p>感觉只能解决现象问题，理论才能解决本质问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>该博客目前想要完成的的功能!</title>
    <url>/%E8%AF%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%89%8D%E6%83%B3%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E7%9A%84%E5%8A%9F%E8%83%BD.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9a2339bdc25e481f700692307de5e7661f783b754676e1bd9710758018c5efb8">3b0ee004644fe5725283a0fb8fd319fd229a203a8f32ef388e81ba35aba38c7b549c54b886430361985baa19612254eae404b4c5f3507fd3f7282fe40a1d88392928ecd0e3e4b840a9c8d1ab21efc70ebb1037601d7468151b1acb10ac32327d8588dab9c926e12860011302ac54c50e92e08ee2b711a9d12590ed1e00c1e9d7339bbf6451493a4c85fd7bab524ea7c2e4cac6a7da5a0b55ee58722d2bca8d4e3fb9ccc4d687889f603d3b298292581793ceb6140bc9bcdb7f8d6071556b4189a81780b21ad0fa48177a1c9f6c3a6ce3d378af29d5c43fe7e16fe5ce4969a47c4bbe6a9ad4790deade3ab15d6bc50b6f882da2a01bf33c7f297113556fa970012f6304e6612f8395fdc47762835d638512b02a7f23e28dbd3d7d9926b02ce6bc8f58376b9ad9f895cbc1d5203f33ae7f5c5b03348d894be0c9cfb138006bed5fcc9e53012be4fb71659a0546a873f2d61512d652e0cf99bd03d419dca5a7172a087e01de104f64b71c5af669db0032dfa699dac4fc7af0aaed4eccb0d2ac5aafd1060bc71a4a96f8a0eae2b9b9a32d6636fc968640822a09df9860500ecf5a589882cd41acbc9d767e70c111ba5b2898ac78596b4c718364c9c65d1f377e0c57631e571b730190ecb0212f337d24d90b122abf6776ecca0f391d1482b2b473daab0547f84abd1ce2f61887c45ad7433e1959c8d25f7d7f77b3569ab0fa4409d82923ab8cdff8cc7e798cb2e247c81ff8fbc72efadd9f28399b63329113cf061e153d21ad48ce5c74f175c2c28493613f8e65f90395450d37952f6b81994c481dad97c9c56d9070f84d96e58b057350779a3712978c5f4255d31eecf7bf309f47bb0e3f679d3c52bbd8cf40648c193365148afe0c6821b5eccaefb717cfb3e7228210d8c3c409dedb678cfed112046ebe7ad2901d1e1671ba5168fde6292048ca63134c3682d4aed99b914639c0549ff7ca38eaabbda6b3e9a425eb9a07cc08d9ba4c11b1557d9781672b9087e368f3e46db36c01371a0f88c923977e95174ac26acbfd26604b344f355e455abf4b094400bca9921246dd8709379ce44821ea1ee59534f61e8aac306225da16e294edfbea1f79e6da4b52f59aaa6164a9ff1fe35ed383968528d67f99174cd235bcd6418ec829b673f782b3580e8b26448fa8b5eaedfebaa0d55b49460c44cc8585bc613968b6d5e4404e45869429fae351b03c222f2cc18c863f1a30d6ba51fb33dcc574c45058da3c4b6c0fd014903d8d994ec9b004c9d9ba1040f91c4470b1df613280b0cdd9aaf0640d5ce63aef573b3f1835af05f37a74d6c73dab4a2ab82de4a16b81db0d35b359b8fccfc2b0013426b6ac29ca704b955327d09f93ad5755014947cfebb1b2935203aa8fdc28d4144ed334f3d6782e7beb87474f50aa8119d2b4a06370dec8815c336ff053902ec3e9091a72025ab70052bfa7ade7bca7843c19d0348527dad254174d048b7d542922284f83f32a58846aef22585f3e9b54d2a272a5b765daafd5cf3aff90fac7e88bb3a415ab71fe75fd60e10b67819d7780d8b8853ba50a8a36ffd98e3befa04eac9b9b8b1975e4deae9b26a9a82542b4994e6b25aaa648ce69e26bb22bc2148bc1641674e23bd0e28212c63ecec30b9d094aa85f3ea64fe7ff76d961fda6304026832e2d2512d790ff197fb79d2917d74e93</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>所思所想</tag>
      </tags>
  </entry>
</search>
