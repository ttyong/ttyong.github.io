<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TianYong&#39;s Blog</title>
  
  <subtitle>比你优秀的人都努力，有什么理由不努力！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tianyong.fun/"/>
  <updated>2023-02-23T19:32:01.450Z</updated>
  <id>http://tianyong.fun/</id>
  
  <author>
    <name>TTYONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>林子雨 大数据技术原理与应用-第二章 大数据处理框架Hadoop</title>
    <link href="http://tianyong.fun/%E6%9E%97%E5%AD%90%E9%9B%A8-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6Hadoop.html"/>
    <id>http://tianyong.fun/%E6%9E%97%E5%AD%90%E9%9B%A8-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6Hadoop.html</id>
    <published>2023-02-23T19:03:02.000Z</published>
    <updated>2023-02-23T19:32:01.450Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第二章-大数据处理框架Hadoop"><a href="#第二章-大数据处理框架Hadoop" class="headerlink" title="第二章 大数据处理框架Hadoop"></a>第二章 大数据处理框架Hadoop</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">• Hadoop是Apache软件基金会旗下的一个开源分布式计算平台</span><br><span class="line">•Hadoop是基于Java语言开发的，具有很好的跨平台特性，并且可以</span><br><span class="line">部署在廉价的计算机集群中</span><br><span class="line">•Hadoop的核心是分布式文件系统HDFS（Hadoop Distributed File System）和MapReduce</span><br><span class="line">•Hadoop被公认为行业大数据标准开源软件，在分布式环境下提供了</span><br><span class="line">海量数据的处理能力</span><br><span class="line">•几乎所有主流厂商都围绕Hadoop提供开发工具、开源软件、商业化</span><br><span class="line">工具和技术服务，如谷歌、雅虎、微软、思科、淘宝等，都支持Hadoop</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240310867.png" alt="image-20230224031009725"></p><h3 id="Hadoop发展简史"><a href="#Hadoop发展简史" class="headerlink" title="Hadoop发展简史"></a>Hadoop发展简史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• Hadoop最初是由Apache Lucene项目的创始人Doug Cutting开发</span><br><span class="line">的文本搜索库。Hadoop源自始于2002年的Apache Nutch项目——一个开源的网络搜索引擎并且也是Lucene项目的一部分</span><br><span class="line">• 在2004年，Nutch项目也模仿GFS开发了自己的分布式文件系统</span><br><span class="line">NDFS（Nutch Distributed File System），也就是HDFS的前身</span><br><span class="line">• 2004年，谷歌公司又发表了另一篇具有深远影响的论文，阐述了</span><br><span class="line">MapReduce分布式编程思想</span><br><span class="line">• 2005年，Nutch开源实现了谷歌的MapReduce</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">• 到了2006年2月，Nutch中的NDFS和MapReduce开始独立出来，成为Lucene项目的一个子项目，称为Hadoop，同时，Doug Cutting加盟雅虎</span><br><span class="line">• 2008年1月，Hadoop正式成为Apache顶级项目，Hadoop也逐渐开始被雅虎之外的其他公司使用</span><br><span class="line">• 2008年4月，Hadoop打破世界纪录，成为最快排序1TB数据的系</span><br><span class="line">统，它采用一个由910个节点构成的集群进行运算，排序时间只用了209秒</span><br><span class="line">•在2009年5月，Hadoop更是把1TB数据排序时间缩短到62秒。</span><br><span class="line">Hadoop从此名声大震，迅速发展成为大数据时代最具影响力的开源分布式开发平台，并成为事实上的大数据处理标准</span><br></pre></td></tr></table></figure><h3 id="Hadoop的特性"><a href="#Hadoop的特性" class="headerlink" title="Hadoop的特性"></a>Hadoop的特性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• 高可靠性</span><br><span class="line">• 高效性</span><br><span class="line">• 高可扩展性</span><br><span class="line">• 高容错性</span><br><span class="line">• 成本低</span><br><span class="line">• 运行在Linux平台上</span><br><span class="line">• 支持多种编程语言</span><br></pre></td></tr></table></figure><h3 id="Hadoop的应用现状"><a href="#Hadoop的应用现状" class="headerlink" title="Hadoop的应用现状"></a>Hadoop的应用现状</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• Facebook作为全球知名的社交网站，Hadoop是非常理想的选择，</span><br><span class="line">Facebook主要将Hadoop平台用于日志处理、推荐系统和数据仓库等</span><br><span class="line">方面</span><br><span class="line">• 国内采用Hadoop的公司主要有百度、淘宝、网易、华为、中国移动</span><br><span class="line">等，其中，淘宝的Hadoop集群比较大</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240322387.png" alt="image-20230224032203188"></p><h3 id="Apache-Hadoop版本演变"><a href="#Apache-Hadoop版本演变" class="headerlink" title="Apache Hadoop版本演变"></a>Apache Hadoop版本演变</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">•Apache Hadoop版本分为两代，我们将第一代Hadoop称为Hadoop 1.0，第二代Hadoop称为Hadoop 2.0</span><br><span class="line">•第一代Hadoop包含三个大版本，分别是0.20.x，0.21.x和0.22.x，其中，0.20.x最后演化成1.0.x，变成了稳定版，而0.21.x和0.22.x则增加了NameNode HA等新的重大特性</span><br><span class="line">•第二代Hadoop包含两个版本，分别是0.23.x和2.x，它们完全不同于Hadoop 1.0，是一套全新的架构，均包含HDFS Federation和YARN两个系统，相比于0.23.x，2.x增加了NameNode HA和Wire-compatibility两个重大特性</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240330058.png" alt="image-20230224033028837"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据技术原理与应用" scheme="http://tianyong.fun/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="林子雨" scheme="http://tianyong.fun/tags/%E6%9E%97%E5%AD%90%E9%9B%A8/"/>
    
  </entry>
  
  <entry>
    <title>林子雨 大数据技术原理与应用-第一章 大数据概述</title>
    <link href="http://tianyong.fun/%E6%9E%97%E5%AD%90%E9%9B%A8-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A6%82%E8%BF%B0.html"/>
    <id>http://tianyong.fun/%E6%9E%97%E5%AD%90%E9%9B%A8-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A6%82%E8%BF%B0.html</id>
    <published>2023-02-23T13:09:33.000Z</published>
    <updated>2023-02-23T19:01:01.054Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第一章-大数据概述"><a href="#第一章-大数据概述" class="headerlink" title="第一章 大数据概述"></a>第一章 大数据概述</h1><h2 id="大数据时代"><a href="#大数据时代" class="headerlink" title="大数据时代"></a>大数据时代</h2><h3 id="三次信息化浪潮"><a href="#三次信息化浪潮" class="headerlink" title="三次信息化浪潮"></a>三次信息化浪潮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据IBM前首席执行官郭士纳的观点，IT领域每隔十五年就会迎来一次重大变革</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一次  1980前后 个人计算机 信息处理</span><br><span class="line">第二次  1995前后 互联网  信息传输</span><br><span class="line">第三次  2010前后 物联网、大数据、云计算 信息爆炸</span><br></pre></td></tr></table></figure><h3 id="信息科技为大数据时代提供技术支撑"><a href="#信息科技为大数据时代提供技术支撑" class="headerlink" title="信息科技为大数据时代提供技术支撑"></a>信息科技为大数据时代提供技术支撑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存储成本降低</span><br><span class="line">cpu计算速度提升</span><br><span class="line">网络带宽不断提升</span><br></pre></td></tr></table></figure><h3 id="信息产生方式的变革促成大数据时代的来临"><a href="#信息产生方式的变革促成大数据时代的来临" class="headerlink" title="信息产生方式的变革促成大数据时代的来临"></a>信息产生方式的变革促成大数据时代的来临</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运营式系统阶段(数据库管理数据)&#x3D;》用户原创内容阶段&#x3D;》感知式系统阶段</span><br></pre></td></tr></table></figure><h3 id="大数据的发展历程"><a href="#大数据的发展历程" class="headerlink" title="大数据的发展历程"></a>大数据的发展历程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一阶段：萌芽阶段 90年代-21世纪初 随着数据挖掘理论和数据库技术的逐步成熟，一批商业智能工具和知识管理技术开始被应用，如数据仓库、专家系统、知识管理系统等。</span><br><span class="line">第二阶段：成熟阶段 本世纪前十年 Web2.0应用迅猛发展，非结构化数据大量产生，传统处理方法难以应对，带动了大数据技术的快速突破，大数据解决方案逐渐走向成熟，形成了并行计算与分布式系统两大核心技术，谷歌的GFD和MapReduce等发数据技术受到追捧，Hadoop平台开始大行其道</span><br><span class="line">第三阶段：大规模应用期 2010以后 大数据应用渗透各行各业，数据驱动决策，信息社会智能化程度大幅提高</span><br></pre></td></tr></table></figure><h2 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h2><h3 id="Volume大量化"><a href="#Volume大量化" class="headerlink" title="Volume大量化"></a>Volume大量化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1byte&#x3D;8bit</span><br><span class="line">1kb&#x3D;1024byte</span><br><span class="line">1mb&#x3D;1024kb</span><br><span class="line">1GB&#x3D;1024mb</span><br><span class="line">1TB&#x3D;1024GB</span><br><span class="line">1PB&#x3D;1024TB</span><br><span class="line">1EB&#x3D;1024PB</span><br><span class="line">1ZB&#x3D;1024EB</span><br><span class="line">1YB&#x3D;1024ZB</span><br></pre></td></tr></table></figure><h3 id="Velocity迅速化"><a href="#Velocity迅速化" class="headerlink" title="Velocity迅速化"></a>Velocity迅速化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从数据的生成到消耗，时间窗口非常小，可用于生成决策的时间非常少</span><br><span class="line"></span><br><span class="line">1秒定律：这一点也是和传统的数据挖掘技术有着本质的不同</span><br></pre></td></tr></table></figure><h3 id="Variety多样化"><a href="#Variety多样化" class="headerlink" title="Variety多样化"></a>Variety多样化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大数据是由结构化和非结构化数据组成的</span><br><span class="line">– 10%的结构化数据，存储在数据库中</span><br><span class="line">– 90%的非结构化数据，它们与人类信</span><br><span class="line">息密切相关</span><br></pre></td></tr></table></figure><h3 id="Value价值密度低，商业价值高"><a href="#Value价值密度低，商业价值高" class="headerlink" title="Value价值密度低，商业价值高"></a>Value价值密度低，商业价值高</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒，但是具有很高的商业价值</span><br></pre></td></tr></table></figure><h2 id="大数据的影响"><a href="#大数据的影响" class="headerlink" title="大数据的影响"></a>大数据的影响</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在思维方式方面，大数据完全颠覆了传统的思维方式：</span><br><span class="line">– 全样而非抽样</span><br><span class="line">– 效率而非精确</span><br><span class="line">– 相关而非因果</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在社会发展方面，大数据决策逐渐成为一种新的决策方式，大数据应用有力促进了信息技术与各行业的深度融合，大数据开发大大推动了新技术和新应用的不断涌现</span><br><span class="line"></span><br><span class="line">在就业市场方面，大数据的兴起使得数据科学家成为热门职业</span><br><span class="line"></span><br><span class="line">在人才培养方面，大数据的兴起，将在很大程度上改变中国高校信息技术相关专业的现有教学和科研体制</span><br></pre></td></tr></table></figure><h2 id="大数据关键技术"><a href="#大数据关键技术" class="headerlink" title="大数据关键技术"></a>大数据关键技术</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240257655.png" alt="image-20230224025717471"></p><h3 id="两大核心技术"><a href="#两大核心技术" class="headerlink" title="两大核心技术"></a>两大核心技术</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分布式存储</span><br><span class="line"></span><br><span class="line">分布式处理</span><br></pre></td></tr></table></figure><h2 id="大数据计算模式及其产品"><a href="#大数据计算模式及其产品" class="headerlink" title="大数据计算模式及其产品"></a>大数据计算模式及其产品</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240256592.png" alt="image-20230224025628429"></p><h2 id="大数据产业"><a href="#大数据产业" class="headerlink" title="大数据产业"></a>大数据产业</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大数据产业是指一切与支撑大数据组织管理和价值发现相关的企业经济活动的集合</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240250827.png" alt="image-20230224025055674"></p><h2 id="大数据与云计算、物联网的关系"><a href="#大数据与云计算、物联网的关系" class="headerlink" title="大数据与云计算、物联网的关系"></a>大数据与云计算、物联网的关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">云计算、大数据和物联网代表了IT领域最新的技术发展趋势，三者相</span><br><span class="line">辅相成，既有联系又有区别</span><br></pre></td></tr></table></figure><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><h4 id="云计算概念"><a href="#云计算概念" class="headerlink" title="云计算概念"></a>云计算概念</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">云计算实现了通过网络提供可伸缩的、廉价的分布式计算能力，用户只需</span><br><span class="line">要在具备网络接入条件的地方，就可以随时随地获得所需的各种IT资源</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240218423.png" alt="image-20230224021822364"></p><h4 id="云计算关键技术"><a href="#云计算关键技术" class="headerlink" title="云计算关键技术"></a>云计算关键技术</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">云计算关键技术包括：虚拟化、分布式存储、分布式计算、多租户等</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240220141.png" alt="image-20230224022054090"></p><h4 id="云计算数据中心"><a href="#云计算数据中心" class="headerlink" title="云计算数据中心"></a>云计算数据中心</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">云计算数据中心是一整套复杂的设施，包括刀片服务器、宽带网络连</span><br><span class="line">接、环境控制设备、监控设备以及各种安全装置等</span><br><span class="line">• 数据中心是云计算的重要载体，为云计算提供计算、存储、带宽等各</span><br><span class="line">种硬件资源，为各种平台和应用提供运行支撑环境</span><br><span class="line">• 全国各地推进数据中心建设</span><br></pre></td></tr></table></figure><h4 id="云计算应用"><a href="#云计算应用" class="headerlink" title="云计算应用"></a>云计算应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">• 政务云上可以部署公共安全管理、容灾备份、城市管理、应急管理、智能交通、社会保障等应用，通过集约化建设、管理和运行，可以实现信</span><br><span class="line">息资源整合和政务资源共享，推动政务管理创新，加快向服务型政府转</span><br><span class="line">型</span><br><span class="line">• 教育云可以有效整合幼儿教育、中小学教育、高等教育以及继续教育等优质教育资源，逐步实现教育信息共享、教育资源共享及教育资源深度</span><br><span class="line">挖掘等目标</span><br><span class="line">• 中小企业云能够让企业以低廉的成本建立财务、供应链、客户关系等管理应用系统，大大降低企业信息化门槛，迅速提升企业信息化水平，增</span><br><span class="line">强企业市场竞争力</span><br><span class="line">• 医疗云可以推动医院与医院、医院与社区、医院与急救中心、医院与家庭之间的服务共享，并形成一套全新的医疗健康服务系统，从而有效地</span><br><span class="line">提高医疗保健的质量</span><br></pre></td></tr></table></figure><h3 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">物联网是物物相连的互联网，是互联网的延伸，它利用局部网络或互</span><br><span class="line">联网等通信技术把传感器、控制器、机器、人员和物等通过新的方式</span><br><span class="line">联在一起，形成人与物、物与物相联，实现信息化和远程管理控制</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240232718.png" alt="image-20230224023256443"></p><h4 id="物联网关键技术"><a href="#物联网关键技术" class="headerlink" title="物联网关键技术"></a>物联网关键技术</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">物联网中的关键技术包括识别和感知技术（二维码、RFID、传感器</span><br><span class="line">等）、网络与通信技术、数据挖掘与融合技术等</span><br></pre></td></tr></table></figure><h4 id="物联网的应用"><a href="#物联网的应用" class="headerlink" title="物联网的应用"></a>物联网的应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">物联网已经广泛应用于智能交通、智慧医疗、智能家居、环保监测、</span><br><span class="line">智能安防、智能物流、智能电网、智慧农业、智能工业等领域，对国</span><br><span class="line">民经济与社会发展起到了重要的推动作用</span><br></pre></td></tr></table></figure><h4 id="物联网产业"><a href="#物联网产业" class="headerlink" title="物联网产业"></a>物联网产业</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">完整的物联网产业链主要包括核心感应器件提供商、感知层末端设备</span><br><span class="line">提供商、网络提供商、软件与行业解决方案提供商、系统集成商、运</span><br><span class="line">营及服务提供商等六大环节</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240242090.png" alt="image-20230224024224902"></p><h3 id="大数据与云计算、物联网的关系-1"><a href="#大数据与云计算、物联网的关系-1" class="headerlink" title="大数据与云计算、物联网的关系"></a>大数据与云计算、物联网的关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">云计算、大数据和物联网代表了IT领域最新的技术发展趋势，三者既</span><br><span class="line">有区别又有联系</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/%E6%9E%97%E5%AD%90%E9%9B%A8%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/202302240244662.png" alt="image-20230224024448474"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据技术原理与应用" scheme="http://tianyong.fun/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="林子雨" scheme="http://tianyong.fun/tags/%E6%9E%97%E5%AD%90%E9%9B%A8/"/>
    
  </entry>
  
  <entry>
    <title>找工作遇到的常识问题</title>
    <link href="http://tianyong.fun/%E6%89%BE%E5%B7%A5%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%AF%86%E9%97%AE%E9%A2%98.html"/>
    <id>http://tianyong.fun/%E6%89%BE%E5%B7%A5%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%AF%86%E9%97%AE%E9%A2%98.html</id>
    <published>2023-02-05T07:16:09.000Z</published>
    <updated>2023-02-23T12:30:20.885Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="找工作遇到的常识问题"><a href="#找工作遇到的常识问题" class="headerlink" title="找工作遇到的常识问题"></a>找工作遇到的常识问题</h1><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">online analytical processing</span><br><span class="line">操作主体一般是运营、销售、市场等团队人员(通过对数据库数据得出结论性的东西)</span><br></pre></td></tr></table></figure><h3 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">online transaction processing</span><br><span class="line">操作主体一般是用户(主要是对数据库数据的增删改查)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_44087159/article/details/124477313" target="_blank" rel="external nofollow noopener noreferrer">参考来源</a></p><h3 id="ETL"><a href="#ETL" class="headerlink" title="ETL"></a>ETL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract transform load</span><br></pre></td></tr></table></figure><h3 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分布式的</span><br><span class="line">日志采集 聚集 传输系统</span><br></pre></td></tr></table></figure><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分布式的</span><br><span class="line">流处理平台</span><br></pre></td></tr></table></figure><h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">历史数据 批处理</span><br><span class="line">实时数据 流处理</span><br><span class="line">flink支持这两种的计算引擎</span><br></pre></td></tr></table></figure><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是建立在hadoop之上的数据仓库基础框架</span><br></pre></td></tr></table></figure><h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">natural language processing</span><br></pre></td></tr></table></figure><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">学它是因为spark要用到，其实也支持java，但scala比java更优</span><br><span class="line">与java类似</span><br></pre></td></tr></table></figure><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HBase是从hadoop中分离出来的nosql系统</span><br></pre></td></tr></table></figure><h3 id="CDH、HDP、CDP"><a href="#CDH、HDP、CDP" class="headerlink" title="CDH、HDP、CDP"></a>CDH、HDP、CDP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CDH:cloudera&#39;s distribution including apache hadoop</span><br><span class="line">HDP:Hortonworks Data Platform</span><br><span class="line">CDP:cloudera data platform(cloudera和hortonworks合并和推出的产品)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/chhyan-dream/p/16226081.html" target="_blank" rel="external nofollow noopener noreferrer">参考来源</a></p><h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch弹性搜索 搜索和分析引擎</span><br></pre></td></tr></table></figure><h3 id="Aireflow"><a href="#Aireflow" class="headerlink" title="Aireflow"></a>Aireflow</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Airflow是一个以编程方式编写，安排和监视工作流的平台。</span><br><span class="line">使用Airflow将工作流编写任务的有向无环图(DAG)。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_39658434/article/details/100897245" target="_blank" rel="external nofollow noopener noreferrer">参考来源</a></p><p><a href="https://baijiahao.baidu.com/s?id=1727510089901712755&wfr=spider&for=pc" target="_blank" rel="external nofollow noopener noreferrer">参考来源</a></p><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于解决单点故障的</span><br></pre></td></tr></table></figure><h3 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专门将关系型数据库中的数据导入到hadoop平台</span><br></pre></td></tr></table></figure><h3 id="DW、BI"><a href="#DW、BI" class="headerlink" title="DW、BI"></a>DW、BI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DW:data warehouse</span><br><span class="line">BI:business intelligence 使决策者能够对企业信息进行有效、合理分析和处理、为决策者提供可靠的依据。</span><br></pre></td></tr></table></figure><h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">support vector machine 支持向量机</span><br><span class="line">是一类按监督学习（supervised learning）方式对数据进行二元分类的广义线性分类器（generalized linear classifier），其决策边界是对学习样本求解的最大边距超平面（maximum-margin hyperplane）</span><br></pre></td></tr></table></figure><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Storm是Twitter开源的分布式实时大数据处理框架，被业界称为实时版Hadoop。</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/017980b9a25d" target="_blank" rel="external nofollow noopener noreferrer">参考来源</a></p><h3 id="Impala"><a href="#Impala" class="headerlink" title="Impala"></a>Impala</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Impala是Cloudera公司主导开发的新型查询系统，它提供SQL语义，能查询存储在Hadoop的HDFS和HBase中的PB级大数据。已有的Hive系统虽然也提供了SQL语义，但由于Hive底层执行使用的是MapReduce引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala的最大特点也是最大卖点就是它的快速。</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.1普通搜索：搜索，就是在任何场景下，找寻你想要的信息，这个时候，会输入一段你要搜索的关键字，然后就期望找到这个关键字相关的有些信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.2 用数据库做搜索</span><br><span class="line">用数据库来实现搜索，是不太靠谱的。通常来说，性能会很差的。</span><br><span class="line"></span><br><span class="line">会逐条扫描</span><br><span class="line"></span><br><span class="line">拿着关键词去搜索，第一一般无法将关键词拆分开来(如生化机，无法搜索出生化危机)，第二，当记录很多，且数据描述很长的话，效率会非常低</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.3 全文检索和Lucene</span><br><span class="line">(1)全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找(这个过程类似于通过字典中的检索字表查字的过程。)</span><br><span class="line"></span><br><span class="line">(2)lucene，就是一个jar包，里面包含了封装好的各种建立倒排索引，以及进行搜索的代码，包括各种算法。我们就用java开发的时候，引入lucene jar，然后基于lucene的api进行去进行开发就可以了。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.4 什么是Elasticsearch</span><br><span class="line">Elasticsearch，基于lucene，隐藏复杂性，提供简单易用的restful api接口、java api接口（还有其他语言的api接口）。</span><br><span class="line"></span><br><span class="line">Elasticsearch是一个实时分布式搜索和分析引擎。它用于全文搜索、结构化搜索、分析。</span><br><span class="line"></span><br><span class="line">全文检索：将非结构化数据中的一部分信息提取出来,重新组织,使其变得有一定结构,然后对此有一定结构的数据进行搜索,从而达到搜索相对较快的目的。</span><br><span class="line"></span><br><span class="line">结构化检索：我想搜索商品分类为日化用品的商品都有哪些，select * from products where category_id&#x3D;&#39;日化用品&#39;。</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/496682762" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Druid是一个专为大型数据集上的高性能切片和OLAP分析而设计的数据存储。</span><br><span class="line"></span><br><span class="line">Druid提供低延时的数据插入，实时的数据查询。</span><br></pre></td></tr></table></figure><p><a href="https://baijiahao.baidu.com/s?id=1715905517657199904&wfr=spider&for=pc" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p><h3 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Presto是一个开源的分布式SQL查询引擎，它以集群的方式运行，采用MPP架构，用在交互式分析查询场景下，可以将多种不同数据量级（从GB到PB）的数据源组合起来进行统一计算。Presto本身只是一个查询引擎，它通过connector的方式完成外部数据源的接入；也就是说通过使用Presto提供的ANSI标准SQL，可以完成多种数据源的标准化计算工作。</span><br></pre></td></tr></table></figure><h3 id="clickhouse"><a href="#clickhouse" class="headerlink" title="clickhouse"></a>clickhouse</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clickHouse是俄罗斯的 Yandex 公司于 2016 年开源的列式存储数据库，使用 C++ 语言编写；</span><br><span class="line"></span><br><span class="line">一款面向 OLAP 的数据库</span><br><span class="line">ClickHouse支持类SQL语言，提供了传统关系型数据的便利</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">专门用于 OLAP（联机分析处理），其性能惊人；</span><br><span class="line"></span><br><span class="line">高性能面向 OLAP 的数据库，不擅长的方面：</span><br><span class="line"></span><br><span class="line">不支持事务</span><br><span class="line">不擅长根据主键按行粒度进行查询（虽然支持），所以不应该把 ClickHouse 当做键值对数据库使用</span><br><span class="line">不擅长按行删除数据（虽然支持）</span><br><span class="line">对于 OLAP 数据库而言，上述这些能力不是重点，只能说这是为了极致的查询性能所做的权衡。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/huazhongkejidaxuezpp/article/details/128457477" target="_blank" rel="external nofollow noopener noreferrer">参考</a></p><h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h2><h3 id="ERP"><a href="#ERP" class="headerlink" title="ERP"></a>ERP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eterprise resource planning</span><br></pre></td></tr></table></figure><h3 id="BP"><a href="#BP" class="headerlink" title="BP"></a>BP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">business planning</span><br></pre></td></tr></table></figure><h3 id="BI"><a href="#BI" class="headerlink" title="BI"></a>BI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">business intelligence</span><br></pre></td></tr></table></figure><h3 id="Tableau、PowerBi"><a href="#Tableau、PowerBi" class="headerlink" title="Tableau、PowerBi"></a>Tableau、PowerBi</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一款可视化分析软件</span><br></pre></td></tr></table></figure><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是python编写的web微框架</span><br></pre></td></tr></table></figure><h3 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Office Automation 办公自动化</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="常识" scheme="http://tianyong.fun/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="常识" scheme="http://tianyong.fun/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>王道数据结构2022 课后习题-线性表</title>
    <link href="http://tianyong.fun/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022-%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98-%E7%BA%BF%E6%80%A7%E8%A1%A8.html"/>
    <id>http://tianyong.fun/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022-%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98-%E7%BA%BF%E6%80%A7%E8%A1%A8.html</id>
    <published>2022-10-24T10:01:13.000Z</published>
    <updated>2022-10-24T10:20:56.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="王道数据结构2022-课后习题-线性表"><a href="#王道数据结构2022-课后习题-线性表" class="headerlink" title="王道数据结构2022 课后习题-线性表"></a>王道数据结构2022 课后习题-线性表</h1><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6                          </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(LinkList &amp;L)</span></span>&#123;    </span><br><span class="line">LNode *l=L,*r=L-&gt;next,*q;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(l!=r)&#123; <span class="comment">// 之前写错,l-&gt;next可以取到r </span></span><br><span class="line"><span class="keyword">if</span>(r-&gt;next-&gt;data&lt;l-&gt;next-&gt;data)&#123;</span><br><span class="line">q=r-&gt;next;</span><br><span class="line">r-&gt;next=q-&gt;next;</span><br><span class="line"><span class="comment">//r=r-&gt;next; // 这种情况不需要将r后移 </span></span><br><span class="line">q-&gt;next=l-&gt;next;</span><br><span class="line">l-&gt;next=q;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(r-&gt;next-&gt;data&gt;r-&gt;data)&#123; <span class="comment">// 之前写成else，出错 </span></span><br><span class="line">r=r-&gt;next;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//没有break会出错 </span></span><br><span class="line">&#125;</span><br><span class="line">l=l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">l=L;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221024182047538.png" alt="image-20221024182047538"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="王道数据结构2022" scheme="http://tianyong.fun/categories/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022/"/>
    
    
      <category term="课后习题" scheme="http://tianyong.fun/tags/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>C语言-cin和cout</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-cin%E5%92%8Ccout.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-cin%E5%92%8Ccout.html</id>
    <published>2022-10-09T11:06:40.000Z</published>
    <updated>2022-10-09T11:06:40.353Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-枚举类型</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B.html</id>
    <published>2022-10-09T10:12:24.000Z</published>
    <updated>2022-10-09T10:52:17.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.不能直接对枚举变量赋整数值，需要将整数强制性转换</span><br></pre></td></tr></table></figure><h2 id="定义枚举类型和声明枚举变量"><a href="#定义枚举类型和声明枚举变量" class="headerlink" title="定义枚举类型和声明枚举变量"></a>定义枚举类型和声明枚举变量</h2><h3 id="先定义枚举类型，在定义枚举变量"><a href="#先定义枚举类型，在定义枚举变量" class="headerlink" title="先定义枚举类型，在定义枚举变量"></a>先定义枚举类型，在定义枚举变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">enum</span> Weekday&#123;mon,tue,wed,thu,fri,sat,sun&#125;; <span class="comment">// 枚举元素(枚举常量)的值从0开始</span></span><br><span class="line"><span class="keyword">enum</span> Weekday workday;</span><br><span class="line">workday=sun; <span class="comment">//workday=6</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义枚举类型的同时，声明枚举变量"><a href="#定义枚举类型的同时，声明枚举变量" class="headerlink" title="定义枚举类型的同时，声明枚举变量"></a>定义枚举类型的同时，声明枚举变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">enum</span> Weekday&#123;mon,tue,wed=<span class="number">5</span>,thu,fri,sat,sun&#125; workday; <span class="comment">// 枚举元素(枚举常量)的值从0开始依次以1递增,第三个从5开始以1递增</span></span><br><span class="line">workday=sun; <span class="comment">//workday=9</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不定义枚举类型，直接定义枚举变量"><a href="#不定义枚举类型，直接定义枚举变量" class="headerlink" title="不定义枚举类型，直接定义枚举变量"></a>不定义枚举类型，直接定义枚举变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">enum</span> &#123;mon,tue,wed,thu,fri,sat,sun&#125; workday; <span class="comment">// 枚举元素(枚举常量)的值从0开始</span></span><br><span class="line">workday=sun; <span class="comment">//workday=6</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举元素连续的枚举变量可以遍历"><a href="#枚举元素连续的枚举变量可以遍历" class="headerlink" title="枚举元素连续的枚举变量可以遍历"></a>枚举元素连续的枚举变量可以遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">enum</span> &#123;mon,tue,wed,thu,fri,sat,sun&#125; workday; <span class="comment">// 枚举元素(枚举常量)的值从0开始</span></span><br><span class="line"><span class="keyword">for</span>(workday=mon;workday&lt;=sun;day++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, workday);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在switch中的使用"><a href="#在switch中的使用" class="headerlink" title="在switch中的使用"></a>在switch中的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> color&#123;red,green,blue&#125; favorite_color;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;favorite_color); <span class="comment">// 但不能：favorite_color=1</span></span><br><span class="line">    <span class="keyword">switch</span>(favorite_color)&#123;</span><br><span class="line">        <span class="keyword">case</span> red:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> green:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> blue:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将整型转换成枚举"><a href="#将整型转换成枚举" class="headerlink" title="将整型转换成枚举"></a>将整型转换成枚举</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> color&#123;red,green,blue&#125; favorite_color;</span><br><span class="line">    <span class="comment">//scanf("%d",&amp;favorite_color);</span></span><br><span class="line">    favorite_color=(<span class="keyword">enum</span> color) <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span>(favorite_color)&#123;</span><br><span class="line">        <span class="keyword">case</span> red:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"xxx"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> green:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> blue:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用枚举元素作判断"><a href="#用枚举元素作判断" class="headerlink" title="用枚举元素作判断"></a>用枚举元素作判断</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> color&#123;red,green,blue&#125; favorite_color;</span><br><span class="line">    <span class="comment">//scanf("%d",&amp;favorite_color);</span></span><br><span class="line">    favorite_color=blue;</span><br><span class="line">    <span class="keyword">if</span>(favorite_color&gt;red)&#123; <span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据挖掘技术与应用-第九章 自然语言处理与NLTK</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%B8%8ENLTK.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%B8%8ENLTK.html</id>
    <published>2022-05-05T12:36:15.000Z</published>
    <updated>2022-05-06T03:01:18.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘技术与应用-第九章-自然语言处理与NLTK"><a href="#数据挖掘技术与应用-第九章-自然语言处理与NLTK" class="headerlink" title="数据挖掘技术与应用-第九章 自然语言处理与NLTK"></a>数据挖掘技术与应用-第九章 自然语言处理与NLTK</h1><h2 id="NLTK模块与自然语言处理"><a href="#NLTK模块与自然语言处理" class="headerlink" title="NLTK模块与自然语言处理"></a>NLTK模块与自然语言处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自然语言处理(Natural Language Processing, NLP)就是用计算机来处理、理解以及运用人类语言，它属于人工智能的一个分支，是计算机科学与语言学的交叉学科。</span><br></pre></td></tr></table></figure><h3 id="NLP的原因"><a href="#NLP的原因" class="headerlink" title="NLP的原因"></a>NLP的原因</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506095528321.png" alt="image-20220506095528321" style="zoom:80%;"><p>这些算法通常是挖掘文本数据的模式，以便用户从中了解文本内所蕴含的信息。人工智能公司大量地使用自然语言处理技术和文本分析来推送相关结果。</p><h3 id="NLP的应用"><a href="#NLP的应用" class="headerlink" title="NLP的应用"></a>NLP的应用</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506095640017.png" alt="image-20220506095640017"></p><p>搜索引擎、情感分析、主题建模、词性标注、实体识别等。</p><h3 id="常用的技术"><a href="#常用的技术" class="headerlink" title="常用的技术"></a>常用的技术</h3><h4 id="词条化"><a href="#词条化" class="headerlink" title="词条化"></a>词条化</h4><p>词条化：即形态学分割。简单地说，词条化就是把单词分成单个语素，并识别词素的种类。</p><h4 id="词干还原-词干提取"><a href="#词干还原-词干提取" class="headerlink" title="词干还原(词干提取)"></a>词干还原(词干提取)</h4><p>是指将不同词形的单词还原成其原型。 wolves-&gt;wolv</p><h4 id="词形还原-词形归并"><a href="#词形还原-词形归并" class="headerlink" title="词形还原(词形归并)"></a>词形还原(词形归并)</h4><p>是指将不同词性的单词还原成其原型。 wolves-&gt;wolf</p><h4 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h4><h4 id="句法分析"><a href="#句法分析" class="headerlink" title="句法分析"></a>句法分析</h4><p>确定给定句子的句法树(语法分析)。主流的方法有以下两种：<br>    依赖分析：致力于分析句子中的单词之间的关系(标记诸如主语，谓语之间的关系)<br>    选区分析：侧重于使用概率来构造解析树。</p><h4 id="断句"><a href="#断句" class="headerlink" title="断句"></a>断句</h4><p>给定一大块文本，找出句子的边界。通常用句点或其它标点符号来标记，但这些相同的字符，在特殊情况下也会用于其它目的。</p><h3 id="NLTK-Natural-Language-Toolkit-介绍"><a href="#NLTK-Natural-Language-Toolkit-介绍" class="headerlink" title="NLTK(Natural Language Toolkit)介绍"></a>NLTK(Natural Language Toolkit)介绍</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506102252495.png" alt="image-20220506102252495" style="zoom:80%;"><h4 id="NLTK安装"><a href="#NLTK安装" class="headerlink" title="NLTK安装"></a>NLTK安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure><h4 id="NLTK安装语料库"><a href="#NLTK安装语料库" class="headerlink" title="NLTK安装语料库"></a>NLTK安装语料库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download()</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/4445f8d7355d" target="_blank" rel="external nofollow noopener noreferrer">手动安装语料库</a></p><h4 id="中文分词资料"><a href="#中文分词资料" class="headerlink" title="中文分词资料"></a>中文分词资料</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506104043622.png" alt="image-20220506104043622" style="zoom:80%;"><h4 id="NLTK自带语料库"><a href="#NLTK自带语料库" class="headerlink" title="NLTK自带语料库"></a>NLTK自带语料库</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506104619100.png" alt="image-20220506104619100" style="zoom:80%;"><h2 id="自然语言处理的实现"><a href="#自然语言处理的实现" class="headerlink" title="自然语言处理的实现"></a>自然语言处理的实现</h2><h3 id="NLTK词条化"><a href="#NLTK词条化" class="headerlink" title="NLTK词条化"></a>NLTK词条化</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506105335895.png" alt="image-20220506105335895" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506105552817.png" alt="image-20220506105552817" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220506105601061.png" alt="image-20220506105601061" style="zoom:80%;"><h3 id="词干提取"><a href="#词干提取" class="headerlink" title="词干提取"></a>词干提取</h3><h3 id="词形还原"><a href="#词形还原" class="headerlink" title="词形还原"></a>词形还原</h3><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>大数据分析与内存计算-第一章 Spark简介与运行原理</title>
    <link href="http://tianyong.fun/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97-%E7%AC%AC%E4%B8%80%E7%AB%A0-Spark%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.html"/>
    <id>http://tianyong.fun/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97-%E7%AC%AC%E4%B8%80%E7%AB%A0-Spark%E7%AE%80%E4%BB%8B%E4%B8%8E%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.html</id>
    <published>2022-05-04T09:41:32.000Z</published>
    <updated>2022-05-05T15:48:51.057Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="大数据分析与内存计算-第一章-Spark简介与运行原理"><a href="#大数据分析与内存计算-第一章-Spark简介与运行原理" class="headerlink" title="大数据分析与内存计算-第一章 Spark简介与运行原理"></a>大数据分析与内存计算-第一章 Spark简介与运行原理</h1><h2 id="Spark是什么"><a href="#Spark是什么" class="headerlink" title="Spark是什么?"></a>Spark是什么?</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505232356261.png" alt="image-20220505232356261"></p><h3 id="Spark的特点"><a href="#Spark的特点" class="headerlink" title="Spark的特点"></a>Spark的特点</h3><h4 id="迅速"><a href="#迅速" class="headerlink" title="迅速"></a>迅速</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505232533845.png" alt="image-20220505232533845" style="zoom:80%;"><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505232947360.png" alt="image-20220505232947360" style="zoom:80%;"><h4 id="易用"><a href="#易用" class="headerlink" title="易用"></a>易用</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505233113800.png" alt="image-20220505233113800" style="zoom:80%;"><h4 id="支持多种资源管理器"><a href="#支持多种资源管理器" class="headerlink" title="支持多种资源管理器"></a>支持多种资源管理器</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505233206159.png" alt="image-20220505233206159" style="zoom:80%;"><h3 id="Spark与Hadoop的区别与联系"><a href="#Spark与Hadoop的区别与联系" class="headerlink" title="Spark与Hadoop的区别与联系"></a>Spark与Hadoop的区别与联系</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505233554318.png" alt="image-20220505233554318" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505233634896.png" alt="image-20220505233634896" style="zoom:80%;"><h3 id="Spark相对于Hadoop-MapReduce的优势"><a href="#Spark相对于Hadoop-MapReduce的优势" class="headerlink" title="Spark相对于Hadoop MapReduce的优势"></a>Spark相对于Hadoop MapReduce的优势</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505233848845.png" alt="image-20220505233848845" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505234056258.png" alt="image-20220505234056258" style="zoom:80%;"><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505234331876.png" alt="image-20220505234331876" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.计算都是基于内存，spark只是计算的中间结果缓存在内存</span><br><span class="line">2.任务量的不同也可能出现相反的速度</span><br><span class="line">3.Hadoop从设计之初就是基于可拓展的，他也可以采用别的计算引擎</span><br></pre></td></tr></table></figure><h3 id="Spark的用途"><a href="#Spark的用途" class="headerlink" title="Spark的用途"></a>Spark的用途</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505234653714.png" alt="image-20220505234653714" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505234821298.png" alt="image-20220505234821298"></p><h2 id="Spark的生态系统"><a href="#Spark的生态系统" class="headerlink" title="Spark的生态系统"></a>Spark的生态系统</h2><h2 id="Spark的架构与原理"><a href="#Spark的架构与原理" class="headerlink" title="Spark的架构与原理"></a>Spark的架构与原理</h2><h2 id="Spark-2-x新特性"><a href="#Spark-2-x新特性" class="headerlink" title="Spark 2.x新特性"></a>Spark 2.x新特性</h2><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>分布式数据库原理与应用-第一章 绪论</title>
    <link href="http://tianyong.fun/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA.html"/>
    <id>http://tianyong.fun/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA.html</id>
    <published>2022-05-04T09:40:33.000Z</published>
    <updated>2022-05-04T09:40:33.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据导入与预处理应用-第一章 数据预处理总述</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E9%A2%84%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%80%BB%E8%BF%B0.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E9%A2%84%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%80%BB%E8%BF%B0.html</id>
    <published>2022-05-04T09:39:20.000Z</published>
    <updated>2022-05-04T10:08:30.699Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>商务智能方法与应用-第一章 商务智能概述</title>
    <link href="http://tianyong.fun/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E6%96%B9%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E6%A6%82%E8%BF%B0.html"/>
    <id>http://tianyong.fun/%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E6%96%B9%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%95%86%E5%8A%A1%E6%99%BA%E8%83%BD%E6%A6%82%E8%BF%B0.html</id>
    <published>2022-05-04T09:37:15.000Z</published>
    <updated>2022-05-04T10:07:54.503Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第八章 图像数据分析</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</id>
    <published>2022-05-04T09:19:09.000Z</published>
    <updated>2022-05-05T12:32:55.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-第八章-图像数据分析"><a href="#数据挖掘与机器学习-第八章-图像数据分析" class="headerlink" title="数据挖掘与机器学习-第八章 图像数据分析"></a>数据挖掘与机器学习-第八章 图像数据分析</h1><h2 id="图像数据概论"><a href="#图像数据概论" class="headerlink" title="图像数据概论"></a>图像数据概论</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">根据图像的成像原理、成像技术以及存储方式可以将图像分为不同类型。</span><br><span class="line">根据记录方式不同图像可以分为模拟图像和数字图像。</span><br><span class="line">模拟图像是通过某种具有连续变化值的物理量(光、电强弱等)来记录图像亮度信息。</span><br><span class="line">数字图像是模拟图像数字化后得到的，又称为数码图像、数位图像。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据像素的取值不同，图像可以分为二值图像、8位图像、16位图像。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RGB彩色图像由三个数据通道构成，分别代表红、绿、蓝通道。而灰色图像只有一个通道。多光谱图像一般有几个到几十个通道。高光谱图像具有几十个到上百个通道，即为多通道。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图像不仅仅局限于人眼可以看到的可见光图像，而是覆盖了全球电磁波谱，包括超声波、电子显微镜和计算机产生的图像等。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505104522079.png" alt="image-20220505104522079"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505104650112.png" alt="image-20220505104650112" style="zoom: 80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505104752864.png" alt="image-20220505104752864"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505104833885.png" alt="image-20220505104833885"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505105009951.png" alt="image-20220505105009951"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505110842520.png" alt="image-20220505110842520"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505110934169.png" alt="image-20220505110934169"></p><h3 id="图像与机器学习"><a href="#图像与机器学习" class="headerlink" title="图像与机器学习"></a>图像与机器学习</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505111242492.png" alt="image-20220505111242492"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505111534955.png" alt="image-20220505111534955"></p><h3 id="图像分类的简单实现"><a href="#图像分类的简单实现" class="headerlink" title="图像分类的简单实现"></a>图像分类的简单实现</h3><p><a href="https://baijiahao.baidu.com/s?id=1717540520101533946&wfr=spider&for=pc" target="_blank" rel="external nofollow noopener noreferrer">opencv参考</a></p><p><a href="https://blog.csdn.net/qq_42627691/article/details/120283042" target="_blank" rel="external nofollow noopener noreferrer">opencv参考</a></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505135856516.png" alt="image-20220505135856516" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505135917115.png" alt="image-20220505135917115" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505140212293.png" alt="image-20220505140212293" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505141939205.png" alt="image-20220505141939205" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505152116658.png" alt="image-20220505152116658"></p><h4 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505152320729.png" alt="image-20220505152320729" style="zoom:80%;"><h4 id="图像混合"><a href="#图像混合" class="headerlink" title="图像混合"></a>图像混合</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505152505470.png" alt="image-20220505152505470" style="zoom:80%;"><h3 id="图像分类的困难和挑战"><a href="#图像分类的困难和挑战" class="headerlink" title="图像分类的困难和挑战"></a>图像分类的困难和挑战</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505142638471.png" alt="image-20220505142638471" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505142729063.png" alt="image-20220505142729063" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505142757551.png" alt="image-20220505142757551" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505143352333.png" alt="image-20220505143352333"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505143408143.png" alt="image-20220505143408143"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505145947911.png" alt="image-20220505145947911"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505150004124.png" alt="image-20220505150004124"></p><h3 id="图像分类的特征提取"><a href="#图像分类的特征提取" class="headerlink" title="图像分类的特征提取"></a>图像分类的特征提取</h3><h4 id="SIFT算法"><a href="#SIFT算法" class="headerlink" title="SIFT算法"></a>SIFT算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505150154247.png" alt="image-20220505150154247"></p><h4 id="FAST算法"><a href="#FAST算法" class="headerlink" title="FAST算法"></a>FAST算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505150345881.png" alt="image-20220505150345881"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505153426399.png" alt="image-20220505153426399" style="zoom:80%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">r'D:\2022-05-05 140442.png'</span>)</span><br><span class="line">img_gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">star=cv2.AgastFeatureDetector_create()</span><br><span class="line">keypoints=star.detect(img_gray,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">img_sift=np.copy(img)</span><br><span class="line">cv2.drawKeypoints(img,keypoints,img_sift)</span><br><span class="line">flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS</span><br><span class="line">cv2.imshow(<span class="string">'Input image'</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">'Star features'</span>, img_sift)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155117006.png" alt="image-20220505155117006" style="zoom:80%;"><h2 id="图像数据分析方法"><a href="#图像数据分析方法" class="headerlink" title="图像数据分析方法"></a>图像数据分析方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">广义的图像处理又称为图像工程，是与图像有关技术的总称，包括图像的采集、编码、传输、存储、生成、显示、输出、变换、增强、恢复和重建、分割、目标检测、表达和描述、特征提取、分类和识别、图像匹配、场景理解等。</span><br></pre></td></tr></table></figure><h3 id="图像工程的三个层级"><a href="#图像工程的三个层级" class="headerlink" title="图像工程的三个层级"></a>图像工程的三个层级</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505143942051.png" alt="image-20220505143942051" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">狭义的图像处理：包括图像采集和图像到图像的变换，主要作用是改善图像视觉效果和为图像分析级理解作初步的处理，包括对比度调节、图像编码、去噪以及各种滤波技术的研究、图像恢复和重建等。</span><br><span class="line"></span><br><span class="line">图像分析：是指从图像中提取感兴趣的数据，以及描述图像中的目标的特点，该层级输入是图像，输出是从图像中提取的边缘、轮廓等特征属性。</span><br><span class="line"></span><br><span class="line">图像理解：是在图像分析的基础上，利用模式识别和人工智能方法研究各目标的性质和相互关系，对图像中的目标进行分析、描述、分类和解释，一般输入为图像，输出为该图像的语义描述。</span><br></pre></td></tr></table></figure><h3 id="图像分析的常用方法"><a href="#图像分析的常用方法" class="headerlink" title="图像分析的常用方法"></a>图像分析的常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">图像变换：图像矩阵一般具有很高的维度，我们直接在空间域中进行处理计算量会很大。</span><br><span class="line"></span><br><span class="line">图像编码和压缩：可以减少描述图像的数据量，以便节省图像传输，处理时间，减少所占用的存储器容量。</span><br><span class="line"></span><br><span class="line">图像增强和复原：客观世界是三维空间，但一般图像是定义在二维区域上的，图像在反映三维世界的过程中必然丢失部分信息。即使是记录下来的信息也有可能失真，影响人的主观感受和物体识别等后续应用。</span><br><span class="line"></span><br><span class="line">图像分割：是提取图像中有意义的特征，包括图像中的边缘、区域等。</span><br><span class="line"></span><br><span class="line">图像描述和特征提取：图像描述是图像识别和理解的必要前提。</span><br><span class="line"></span><br><span class="line">图像分类：</span><br></pre></td></tr></table></figure><h2 id="图像识别案例-人脸识别"><a href="#图像识别案例-人脸识别" class="headerlink" title="图像识别案例-人脸识别"></a>图像识别案例-人脸识别</h2><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155458164.png" alt="image-20220505155458164" style="zoom: 67%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155522936.png" alt="image-20220505155522936" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155623129.png" alt="image-20220505155623129" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155815080.png" alt="image-20220505155815080" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505155937516.png" alt="image-20220505155937516" style="zoom:80%;"><h3 id="EigenFace算法"><a href="#EigenFace算法" class="headerlink" title="EigenFace算法"></a>EigenFace算法</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505160117642.png" alt="image-20220505160117642" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505160933131.png" alt="image-20220505160933131" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505160959822.png" alt="image-20220505160959822" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505161036893.png" alt="image-20220505161036893" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505161114349.png" alt="image-20220505161114349" style="zoom:80%;"><h3 id="人脸识别与PCA"><a href="#人脸识别与PCA" class="headerlink" title="人脸识别与PCA"></a>人脸识别与PCA</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505161755400.png" alt="image-20220505161755400"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505161832469.png" alt="image-20220505161832469" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505162139384.png" alt="image-20220505162139384"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505162208174.png" alt="image-20220505162208174"></p><h3 id="人脸识别算法实现"><a href="#人脸识别算法实现" class="headerlink" title="人脸识别算法实现"></a>人脸识别算法实现</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505162942747.png" alt="image-20220505162942747"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505162953625.png" alt="image-20220505162953625" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505163255359.png" alt="image-20220505163255359"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一张已知图片用于训练模型</span></span><br><span class="line">known_image = face_recognition.load_image_file(<span class="string">"C:/Users/gao20/Desktop/obama1.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取已知图片中的128维人脸编码（特征向量）</span></span><br><span class="line">obama_encoding = face_recognition.face_encodings(known_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一张未知图片用于训练模型</span></span><br><span class="line">unknown_image = face_recognition.load_image_file(<span class="string">"C:/Users/gao20/Desktop/obama2.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取未知图片中的128维人脸编码（特征向量）</span></span><br><span class="line">unknown_encoding = face_recognition.face_encodings(unknown_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 识别这两张照片的人能否匹配</span></span><br><span class="line">results = face_recognition.compare_faces([obama_encoding], unknown_encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断对比结果，True表示匹配上，False表示不匹配</span></span><br><span class="line"><span class="keyword">if</span> results[<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"It's a picture of Obama!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"It's not a picture of Obama!"</span>)</span><br></pre></td></tr></table></figure><h2 id="实验九-图像分析"><a href="#实验九-图像分析" class="headerlink" title="实验九 图像分析"></a>实验九 图像分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目一：简单的图像线性划分</span><br><span class="line"></span><br><span class="line">假设我们获取了2张图片（获取方式在文末），请使用opencv模块，读取图片并将图片转换为像素矩阵，比对两图片像素值。</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505165806201.png" alt="image-20220505165806201" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505170217073.png" alt="image-20220505170217073" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505170139006.png" alt="image-20220505170139006"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目二：使用Star特征检测器</span><br><span class="line">假设我们获取了1张图片（获取方式在文末），请使用opencv模块的Star特征检测器检测出图片的Star特征。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前面有个例子一样</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">题目三：人脸识别</span><br><span class="line"></span><br><span class="line">假设我们获取了几张人脸图片（获取方式在文末），请使用face_recognition模块实现简单的人脸识别功能。</span><br><span class="line"></span><br><span class="line">代码如下，请注意修改为自己的图片位置</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与例子类似</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505170727072.png" alt="image-20220505170727072" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505170754064.png" alt="image-20220505170754064"></p><h2 id="Python图像处理类库-PIL"><a href="#Python图像处理类库-PIL" class="headerlink" title="Python图像处理类库(PIL)"></a>Python图像处理类库(PIL)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它为Python解释器提供了大量的图像和图形处理功能，它能够对图像数据进行缩放、裁剪、旋转、滤波、颜色空间转换、对比度增强等，该类库支持多种图像格式的读写。PIL是python平台事实上的图像处理标准库。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些志愿者在PIL的基础上创建了兼容版本，名字叫做Pillow，它与PIL的使用方法基本相同，并加入了许多新的特性。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">借助PIL模块结合Numpy模块提供的向量，矩阵等数组对象的处理方法和线性代数函数，以及Scipy提供的数值积分、优化、统计、信号处理、图像处理等搞笑操作，我们可以完成大多数的图像分析任务。</span><br></pre></td></tr></table></figure><h3 id="Image模块"><a href="#Image模块" class="headerlink" title="Image模块"></a>Image模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im=image.open(<span class="string">'xxx.jpg'</span>)</span><br><span class="line">print(im.format,im.size,im.mode) <span class="comment"># 格式、大小、模式</span></span><br><span class="line"></span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505195406520.png" alt="image-20220505195406520" style="zoom:80%;"><h4 id="颜色空间转换"><a href="#颜色空间转换" class="headerlink" title="颜色空间转换"></a>颜色空间转换</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220505195428036.png" alt="image-20220505195428036" style="zoom:80%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">im_gray=im.convert(<span class="string">'L'</span>) <span class="comment"># 颜色空间转换，转为灰色</span></span><br><span class="line">im_gray.save(<span class="string">'xxx.png'</span>)</span><br></pre></td></tr></table></figure><h4 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 裁剪指定矩形区域</span><br><span class="line">box&#x3D;(66,66,190,190)</span><br><span class="line">region&#x3D;im.crop(box)</span><br><span class="line">region.save(&#39;xxxx.png&#39;)</span><br></pre></td></tr></table></figure><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><h5 id="固定角度"><a href="#固定角度" class="headerlink" title="固定角度"></a>固定角度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">region_90&#x3D;region.transpose(Image.ROTATE_90) # 90,180,270 也可以传入Image.FLIP_LEFT_RIGHT进行水平旋转，或传入Image.FLIP_TOP_BOTTOM进行垂直旋转</span><br><span class="line">region.save(...)</span><br></pre></td></tr></table></figure><h5 id="任意角度"><a href="#任意角度" class="headerlink" title="任意角度"></a>任意角度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">region_30=region.rotate(<span class="number">30</span>)</span><br><span class="line">region_30.save(...)</span><br></pre></td></tr></table></figure><h5 id="粘贴-paste"><a href="#粘贴-paste" class="headerlink" title="粘贴(paste)"></a>粘贴(paste)</h5><h5 id="波段处理"><a href="#波段处理" class="headerlink" title="波段处理"></a>波段处理</h5><h6 id="getbands"><a href="#getbands" class="headerlink" title="getbands()"></a>getbands()</h6><h6 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h6><h6 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h6><h5 id="像素处理-point"><a href="#像素处理-point" class="headerlink" title="像素处理(point())"></a>像素处理(point())</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以完成反色、线性拉伸、归一化等</span><br></pre></td></tr></table></figure><h5 id="图像的直方图-histogram"><a href="#图像的直方图-histogram" class="headerlink" title="图像的直方图(histogram())"></a>图像的直方图(histogram())</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以用来表示该图像的像素值的分布情况。</span><br></pre></td></tr></table></figure><h5 id="处理序列图像"><a href="#处理序列图像" class="headerlink" title="处理序列图像"></a>处理序列图像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即常见的动图，扩展名为。gif</span><br></pre></td></tr></table></figure><h5 id="维度处理"><a href="#维度处理" class="headerlink" title="维度处理"></a>维度处理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">机器学习算法要求样本的特征数据具有相同的维度。类似地，当我们采用机器学习算法进行图像数据分析师，每幅图像的特征数据也应具有相同的维度。通常有两种方式:</span><br><span class="line">1.裁剪或缩放为同高宽和颜色通道 resize()</span><br><span class="line">2.滤波技术或特征值提取算法得到相同维度的特征数据。</span><br></pre></td></tr></table></figure><h3 id="ImageFilter模块"><a href="#ImageFilter模块" class="headerlink" title="ImageFilter模块"></a>ImageFilter模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要进行滤波处理</span><br></pre></td></tr></table></figure><h3 id="ImageEnhance模块"><a href="#ImageEnhance模块" class="headerlink" title="ImageEnhance模块"></a>ImageEnhance模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更高级的图像增强</span><br></pre></td></tr></table></figure><h2 id="NumPy图像数据分析示例"><a href="#NumPy图像数据分析示例" class="headerlink" title="NumPy图像数据分析示例"></a>NumPy图像数据分析示例</h2><h2 id="SciPy图像数据分析示例"><a href="#SciPy图像数据分析示例" class="headerlink" title="SciPy图像数据分析示例"></a>SciPy图像数据分析示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SciPy是在Numpy基础上开发的用于数值运算的开源工具包。提供了许多高效的操作，可以实现数值积分、优化、统计、信号处理、图像处理等功能。</span><br></pre></td></tr></table></figure><h2 id="Scikit-image的特征提取模块"><a href="#Scikit-image的特征提取模块" class="headerlink" title="Scikit-image的特征提取模块"></a>Scikit-image的特征提取模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是用于图像处理的开源Python工具包，它包括颜色空间转换、滤波、图论、统计特征、形态学、图像恢复、分割、边缘、角点检测、几何变换等算法。特别是特征提取模块，使用户能更方便地从图像中提取特征。</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第七章 关联规则和协同过滤</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E5%92%8C%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E5%92%8C%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4.html</id>
    <published>2022-05-03T12:27:07.000Z</published>
    <updated>2022-05-05T02:41:43.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-第七章-关联规则和协同过滤"><a href="#数据挖掘与机器学习-第七章-关联规则和协同过滤" class="headerlink" title="数据挖掘与机器学习-第七章 关联规则和协同过滤"></a>数据挖掘与机器学习-第七章 关联规则和协同过滤</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">关联规则最早用于购物篮分析</span><br><span class="line"></span><br><span class="line">关联规则(Association Rules或Basket Analysis)是形如X-&gt;Y的蕴含式。其中，X和分别称为关联规则的先导(Antecedent，或Left-Hand-Side，LHS)和后继(Consequent或Right-Hand-Side,RHS)。</span><br><span class="line"></span><br><span class="line">关联规则利用其支持度和置信度从大量数据中挖掘出有价值的数据项之间的相互关系。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些常见概念:数据库D，事务T，项集I，支持度Confidence，置信度Support</span><br></pre></td></tr></table></figure><h2 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h2><h3 id="推荐算法目的"><a href="#推荐算法目的" class="headerlink" title="推荐算法目的"></a>推荐算法目的</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203033498.png" alt="image-20220503203033498" style="zoom:80%;"><h3 id="如何进行推荐"><a href="#如何进行推荐" class="headerlink" title="如何进行推荐"></a>如何进行推荐</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203210462.png" alt="image-20220503203210462"></p><h4 id="关联规则挖掘"><a href="#关联规则挖掘" class="headerlink" title="关联规则挖掘"></a>关联规则挖掘</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203351304.png" alt="image-20220503203351304" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203618438.png" alt="image-20220503203618438" style="zoom:80%;"><h4 id="啤酒尿布案例"><a href="#啤酒尿布案例" class="headerlink" title="啤酒尿布案例"></a>啤酒尿布案例</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203728962.png" alt="image-20220503203728962" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503203830348.png" alt="image-20220503203830348"></p><h4 id="关联规则的引言"><a href="#关联规则的引言" class="headerlink" title="关联规则的引言"></a>关联规则的引言</h4><h5 id="关联规则定义"><a href="#关联规则定义" class="headerlink" title="关联规则定义"></a>关联规则定义</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503204107481.png" alt="image-20220503204107481"></p><h5 id="关联规则度量"><a href="#关联规则度量" class="headerlink" title="关联规则度量"></a>关联规则度量</h5><h6 id="支持度"><a href="#支持度" class="headerlink" title="支持度"></a>支持度</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503204251715.png" alt="image-20220503204251715"></p><h6 id="置信度"><a href="#置信度" class="headerlink" title="置信度"></a>置信度</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503204641040.png" alt="image-20220503204641040"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503204744910.png" alt="image-20220503204744910"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果满足最小支持度阈值和最小置信度阈值，则我们认为关联规则是有效的。这些阈值可以认为设定。</span><br></pre></td></tr></table></figure><h4 id="关联规则挖掘的步骤"><a href="#关联规则挖掘的步骤" class="headerlink" title="关联规则挖掘的步骤"></a>关联规则挖掘的步骤</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503204911541.png" alt="image-20220503204911541"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503205415499.png" alt="image-20220503205415499"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503205538418.png" alt="image-20220503205538418"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503205828246.png" alt="image-20220503205828246"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关联规则的挖掘过程主要包含两个阶段：第一个阶段从资料集合中找出所有的高频项目组(Frequent Item)，第二阶段从这些高频项目组产生关联规则(Association Rule)。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一阶段高频的含义是是指某一项目组出现的频率相对于所有记录而言，必须达到某一水平。也就是支持度。</span><br><span class="line">一个满足最小支持度的k-itemset，称为高频K-项目组(Frequent k-itemset)，一般表示为Frequent k。算法从Frequent k项目组中再产生Frequent k+1，直到无法再找到更长的高频项目组为止。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二阶段：从高频项目组产生关联规则，这是利用前一步骤的高频k-项目组来产生规则，在最小置信度的条件门槛下，若一规则所求得的置信度满足最小置信度，称此规则为关联规则。</span><br></pre></td></tr></table></figure><h2 id="Apriori算法"><a href="#Apriori算法" class="headerlink" title="Apriori算法"></a>Apriori算法</h2><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210240246.png" alt="image-20220503210240246" style="zoom:80%;"><h3 id="apriori定律"><a href="#apriori定律" class="headerlink" title="apriori定律"></a>apriori定律</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210330591.png" alt="image-20220503210330591"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210443080.png" alt="image-20220503210443080"></p><h3 id="apriori算法"><a href="#apriori算法" class="headerlink" title="apriori算法"></a>apriori算法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210523821.png" alt="image-20220503210523821"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210639340.png" alt="image-20220503210639340"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503210922697.png" alt="image-20220503210922697"></p><h3 id="apriori算法核心思想"><a href="#apriori算法核心思想" class="headerlink" title="apriori算法核心思想"></a>apriori算法核心思想</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503211449052.png" alt="image-20220503211449052" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503212213358.png" alt="image-20220503212213358"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503212434808.png" alt="image-20220503212434808" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504103736736.png" alt="image-20220504103736736" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504103823217.png" alt="image-20220504103823217" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504103906853.png" alt="image-20220504103906853" style="zoom:80%;"><h3 id="apriori算法的缺点"><a href="#apriori算法的缺点" class="headerlink" title="apriori算法的缺点"></a>apriori算法的缺点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.对数据库的扫描次数过多</span><br><span class="line">2.会产生大量的中间项集</span><br><span class="line">3.采用唯一支持度</span><br><span class="line">4.算法的适应面窄</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主要改进方向:</span><br><span class="line">减少候选集产生</span><br><span class="line">降低无效的扫描库次数</span><br><span class="line">提高候选集与原数据的比较次数</span><br></pre></td></tr></table></figure><h3 id="apriori算法实现"><a href="#apriori算法实现" class="headerlink" title="apriori算法实现"></a>apriori算法实现</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165123328.png" alt="image-20220504165123328" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165203678.png" alt="image-20220504165203678" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165252234.png" alt="image-20220504165252234" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165335268.png" alt="image-20220504165335268" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165423507.png" alt="image-20220504165423507" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504165500970.png" alt="image-20220504165500970" style="zoom:80%;"><h2 id="协同过滤-基于用户"><a href="#协同过滤-基于用户" class="headerlink" title="协同过滤(基于用户)"></a>协同过滤(基于用户)</h2><h3 id="协同过滤-基于用户-1"><a href="#协同过滤-基于用户-1" class="headerlink" title="协同过滤(基于用户)"></a>协同过滤(基于用户)</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504111224639.png" alt="image-20220504111224639" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504111306768.png" alt="image-20220504111306768" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504111355397.png" alt="image-20220504111355397" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504111620461.png" alt="image-20220504111620461" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504112139300.png" alt="image-20220504112139300" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504112251678.png" alt="image-20220504112251678" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504112333799.png" alt="image-20220504112333799" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504112411626.png" alt="image-20220504112411626"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504112904173.png" alt="image-20220504112904173" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504113246629.png" alt="image-20220504113246629" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504113628453.png" alt="image-20220504113628453" style="zoom:80%;"><h3 id="协同过滤-基于物品"><a href="#协同过滤-基于物品" class="headerlink" title="协同过滤(基于物品)"></a>协同过滤(基于物品)</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504113744512.png" alt="image-20220504113744512" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504113953624.png" alt="image-20220504113953624" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114048120.png" alt="image-20220504114048120" style="zoom:80%;"><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220504114147730.png" alt="image-20220504114147730"></p><img src="C:\Users\Ty\AppData\Roaming\Typora\typora-user-images\image-20220504114252204.png" alt="image-20220504114252204" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114403470.png" alt="image-20220504114403470" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114610063.png" alt="image-20220504114610063" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114625553.png" alt="image-20220504114625553" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114654628.png" alt="image-20220504114654628" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114715624.png" alt="image-20220504114715624"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114744048.png" alt="image-20220504114744048"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114805601.png" alt="image-20220504114805601"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504114827492.png" alt="image-20220504114827492" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504115324968.png" alt="image-20220504115324968" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504115354970.png" alt="image-20220504115354970" style="zoom:80%;"><h3 id="实验八-协同过滤算法"><a href="#实验八-协同过滤算法" class="headerlink" title="实验八 协同过滤算法"></a>实验八 协同过滤算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【实验原理】</span><br><span class="line">协同过滤简单来说是利用某兴趣相投、拥有共同经验之群体的喜好来推荐用户感兴趣的信息，个人通过合作的机制给予信息相当程度的回应（如评分）并记录下来以达到过滤的目的进而帮助别人筛选信息，回应不一定局限于特别感兴趣的，特别不感兴趣信息的纪录也相当重要。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目：使用协同过滤（基于用户）构建简单的电影推荐系统</span><br><span class="line">假设我们以字典形式保存用户关于电影的评分数据，请构建一个电影推荐程序。</span><br><span class="line">STEP1：编写函数计算欧式距离字典数据中两两用户的欧式距离。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A dictionary of movie critics and their ratings of a small#</span></span><br><span class="line">critics=&#123;<span class="string">'A'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">3.5</span>,<span class="string">'唐人街探案'</span>:<span class="number">1.0</span>&#125;,</span><br><span class="line">        <span class="string">'B'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">2.5</span>,<span class="string">'唐人街探案'</span>:<span class="number">3.5</span>,<span class="string">'星球大战'</span>:<span class="number">3.0</span>,<span class="string">'寻龙诀'</span>:<span class="number">3.5</span>,<span class="string">'神探夏洛克'</span>:<span class="number">2.5</span>,<span class="string">'小门神'</span>:<span class="number">3.0</span>&#125;,</span><br><span class="line">         <span class="string">'C'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">3.0</span>,<span class="string">'唐人街探案'</span>:<span class="number">3.5</span>,<span class="string">'星球大战'</span>:<span class="number">1.5</span>,<span class="string">'寻龙诀'</span>:<span class="number">5.0</span>,<span class="string">'神探夏洛克'</span>:<span class="number">3.0</span>,<span class="string">'小门神'</span>:<span class="number">3.5</span>&#125;,</span><br><span class="line">         <span class="string">'D'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">2.5</span>,<span class="string">'唐人街探案'</span>:<span class="number">3.5</span>,<span class="string">'寻龙诀'</span>:<span class="number">3.5</span>,<span class="string">'神探夏洛克'</span>:<span class="number">4.0</span>&#125;,</span><br><span class="line">         <span class="string">'E'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">3.5</span>,<span class="string">'唐人街探案'</span>:<span class="number">2.0</span>,<span class="string">'星球大战'</span>:<span class="number">4.5</span>,<span class="string">'神探夏洛克'</span>:<span class="number">3.5</span>,<span class="string">'小门神'</span>:<span class="number">2.0</span>&#125;,</span><br><span class="line">         <span class="string">'F'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">3.0</span>,<span class="string">'唐人街探案'</span>:<span class="number">4.0</span>,<span class="string">'星球大战'</span>:<span class="number">2.0</span>,<span class="string">'寻龙诀'</span>:<span class="number">3.0</span>,<span class="string">'神探夏洛克'</span>:<span class="number">3.0</span>,<span class="string">'小门神'</span>:<span class="number">2.0</span>&#125;,</span><br><span class="line">         <span class="string">'G'</span>:&#123;<span class="string">'老炮儿'</span>:<span class="number">4.5</span>,<span class="string">'唐人街探案'</span>:<span class="number">1.5</span>,<span class="string">'星球大战'</span>:<span class="number">3.0</span>,<span class="string">'寻龙诀'</span>:<span class="number">5.0</span>,<span class="string">'神探夏洛克'</span>:<span class="number">3.5</span>&#125;&#125;</span><br><span class="line">print(critics[<span class="string">"B"</span>][<span class="string">'星球大战'</span>])</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns a distance-based similarity score for person1 and person2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_distance</span><span class="params">(prefs,person1,person2)</span>:</span></span><br><span class="line">    <span class="comment"># Get the list of shared_times</span></span><br><span class="line">    si=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> prefs[person1]:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> prefs[person2]:si[item]=<span class="number">1</span></span><br><span class="line">    <span class="comment"># if they have no rating in common, return 0</span></span><br><span class="line">    <span class="keyword">if</span> len(si)==<span class="number">0</span>:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># Add up the squares of all the differences</span></span><br><span class="line">    sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],<span class="number">2</span>) <span class="keyword">for</span> item <span class="keyword">in</span> prefs[person1] <span class="keyword">if</span> item <span class="keyword">in</span> prefs[person2]])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+sqrt(sum_of_squares))</span><br><span class="line">print(sim_distance(critics, <span class="string">'A'</span>, <span class="string">'B'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STEP2：编写函数依据欧式距离大小以及协同过滤算法（用户）实现电影的推荐。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gets recommendations for a person by using a weighted average</span></span><br><span class="line"><span class="comment"># of every other user's rankings</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRecommendations</span><span class="params">(prefs, person, similarity=sim_distance)</span>:</span></span><br><span class="line">    totals=&#123;&#125;</span><br><span class="line">    simSums=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> other <span class="keyword">in</span> prefs:</span><br><span class="line">        <span class="comment"># don't compare me to myself</span></span><br><span class="line">        <span class="keyword">if</span> other == person:<span class="keyword">continue</span></span><br><span class="line">        sim=similarity(prefs,person,other)</span><br><span class="line">        <span class="comment"># ignore scores of zero or lower</span></span><br><span class="line">        <span class="keyword">if</span> sim&lt;=<span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> prefs[other]:</span><br><span class="line">            <span class="comment"># only score movies I haven't seen yet</span></span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> prefs[person] <span class="keyword">or</span> prefs[person][item]==<span class="number">0</span>:</span><br><span class="line">                <span class="comment"># Similarity * Score</span></span><br><span class="line">                totals.setdefault(item,<span class="number">0</span>)</span><br><span class="line">                totals[item]+=prefs[other][item]*sim</span><br><span class="line">                <span class="comment"># Sum of similarities</span></span><br><span class="line">                simSums.setdefault(item,<span class="number">0</span>)</span><br><span class="line">                simSums[item]+=sim</span><br><span class="line">    <span class="comment"># Create the normalized list</span></span><br><span class="line">    rankings=[(total/simSums[item],item) <span class="keyword">for</span> item,total <span class="keyword">in</span> totals.items()]</span><br><span class="line">    <span class="comment"># Return the sorted list</span></span><br><span class="line">    rankings.sort()</span><br><span class="line">    rankings.reverse()</span><br><span class="line">    <span class="keyword">return</span> rankings</span><br><span class="line">print(getRecommendations(critics, <span class="string">'A'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220504163224086.png" alt="image-20220504163224086"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>赤裸裸的统计学 第一章</title>
    <link href="http://tianyong.fun/%E8%B5%A4%E8%A3%B8%E8%A3%B8%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%AD%A6-%E7%AC%AC%E4%B8%80%E7%AB%A0.html"/>
    <id>http://tianyong.fun/%E8%B5%A4%E8%A3%B8%E8%A3%B8%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%AD%A6-%E7%AC%AC%E4%B8%80%E7%AB%A0.html</id>
    <published>2022-05-03T04:43:28.000Z</published>
    <updated>2022-05-03T05:23:59.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="赤裸裸的统计学-第一章"><a href="#赤裸裸的统计学-第一章" class="headerlink" title="赤裸裸的统计学-第一章"></a>赤裸裸的统计学-第一章</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">案例:橄榄球运行动员，棒球运动员，基尼指数，传球效绩指数，击球指数，平均成绩点数，流浪者，</span><br></pre></td></tr></table></figure><h2 id="统计学的作用"><a href="#统计学的作用" class="headerlink" title="统计学的作用"></a>统计学的作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基尼指数:衡量社会分配是否公平的指标，最小为0，最大为1</span><br><span class="line">传球效绩指数:例(橄榄球四分卫表现)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">统计学可以帮助我们处理数据，而数据是披着华丽外衣的信息。</span><br><span class="line">统计学是我们分析信息获得有意义结果的最有力工具。</span><br><span class="line">统计学的一个核心功能就是使用手中已有的数据进行合理推测，以回答那些我们还未掌握所有信息的‘大‘问题</span><br></pre></td></tr></table></figure><h2 id="统计学如何赋予原始数据意义"><a href="#统计学如何赋予原始数据意义" class="headerlink" title="统计学如何赋予原始数据意义"></a>统计学如何赋予原始数据意义</h2><h3 id="描述性数据-击球率与大学学分"><a href="#描述性数据-击球率与大学学分" class="headerlink" title="描述性数据-击球率与大学学分"></a>描述性数据-击球率与大学学分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">棒球运动的击球率大小可以显示一个运动员是否优秀</span><br><span class="line">GPA平均成绩点数:可以比较两个学生谁更优秀(也可能不准确，比如课程难度不同)</span><br></pre></td></tr></table></figure><h2 id="用抽样数据解决大问题"><a href="#用抽样数据解决大问题" class="headerlink" title="用抽样数据解决大问题"></a>用抽样数据解决大问题</h2><h2 id="统计学劣势"><a href="#统计学劣势" class="headerlink" title="统计学劣势"></a>统计学劣势</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据可能太片面，特殊情况可能没考虑，会丢失一些细节和内容。</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="统计学" scheme="http://tianyong.fun/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第六章 无监督学习</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.html</id>
    <published>2022-05-01T11:03:08.000Z</published>
    <updated>2022-05-05T02:41:38.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-第六章-无监督学习"><a href="#数据挖掘与机器学习-第六章-无监督学习" class="headerlink" title="数据挖掘与机器学习-第六章 无监督学习"></a>数据挖掘与机器学习-第六章 无监督学习</h1><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501190951624.png" alt="image-20220501190951624"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501191007822.png" alt="image-20220501191007822" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501191415249.png" alt="image-20220501191415249" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501191433623.png" alt="image-20220501191433623" style="zoom:80%;"><h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><h3 id="聚类算法概述"><a href="#聚类算法概述" class="headerlink" title="聚类算法概述"></a>聚类算法概述</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501191820991.png" alt="image-20220501191820991" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193524211.png" alt="image-20220501193524211" style="zoom:80%;"><h4 id="聚类算法的功能"><a href="#聚类算法的功能" class="headerlink" title="聚类算法的功能"></a>聚类算法的功能</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501192004496.png" alt="image-20220501192004496" style="zoom:80%;"><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501192136152.png" alt="image-20220501192136152" style="zoom:80%;"><h4 id="聚类算法评判指标"><a href="#聚类算法评判指标" class="headerlink" title="聚类算法评判指标"></a>聚类算法评判指标</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501192338381.png" alt="image-20220501192338381" style="zoom:80%;"><h3 id="聚类中的数据结构"><a href="#聚类中的数据结构" class="headerlink" title="聚类中的数据结构"></a>聚类中的数据结构</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501192727185.png" alt="image-20220501192727185" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193145739.png" alt="image-20220501193145739"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193302490.png" alt="image-20220501193302490"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193651567.png" alt="image-20220501193651567" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193917612.png" alt="image-20220501193917612" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501193958301.png" alt="image-20220501193958301" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501194602336.png" alt="image-20220501194602336" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501194631285.png" alt="image-20220501194631285" style="zoom:80%;"><h3 id="划分聚类"><a href="#划分聚类" class="headerlink" title="划分聚类"></a>划分聚类</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501201310322.png" alt="image-20220501201310322" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501201335554.png" alt="image-20220501201335554" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501201535367.png" alt="image-20220501201535367"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501201928871.png" alt="image-20220501201928871"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501202124441.png" alt="image-20220501202124441"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501202300544.png" alt="image-20220501202300544"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501202448532.png" alt="image-20220501202448532" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501202723681.png" alt="image-20220501202723681"></p><h4 id="K-means的结束"><a href="#K-means的结束" class="headerlink" title="K-means的结束"></a>K-means的结束</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501203112501.png" alt="image-20220501203112501"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501203347291.png" alt="image-20220501203347291"></p><h4 id="初始质心对K-means聚类的影响"><a href="#初始质心对K-means聚类的影响" class="headerlink" title="初始质心对K-means聚类的影响"></a>初始质心对K-means聚类的影响</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501203612942.png" alt="image-20220501203612942"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204039193.png" alt="image-20220501204039193"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204157961.png" alt="image-20220501204157961" style="zoom:80%;"><h4 id="k值对K-means聚类影响"><a href="#k值对K-means聚类影响" class="headerlink" title="k值对K-means聚类影响"></a>k值对K-means聚类影响</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204434926.png" alt="image-20220501204434926" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204544635.png" alt="image-20220501204544635"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205311328.png" alt="image-20220501205311328"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205412746.png" alt="image-20220501205412746" style="zoom:80%;"><h4 id="K均值算法运行注意注意"><a href="#K均值算法运行注意注意" class="headerlink" title="K均值算法运行注意注意"></a>K均值算法运行注意注意</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204631882.png" alt="image-20220501204631882"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204800712.png" alt="image-20220501204800712"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204845099.png" alt="image-20220501204845099" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501204917651.png" alt="image-20220501204917651"></p><h4 id="K-means的局限"><a href="#K-means的局限" class="headerlink" title="K-means的局限"></a>K-means的局限</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205520990.png" alt="image-20220501205520990"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205831554.png" alt="image-20220501205831554"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205114718.png" alt="image-20220501205114718" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205640485.png" alt="image-20220501205640485"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205655388.png" alt="image-20220501205655388" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210728445.png" alt="image-20220501210728445" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210750702.png" alt="image-20220501210750702" style="zoom:80%;"><h3 id="层次聚类"><a href="#层次聚类" class="headerlink" title="层次聚类"></a>层次聚类</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501205956115.png" alt="image-20220501205956115" style="zoom:80%;"><h4 id="凝聚层次聚类"><a href="#凝聚层次聚类" class="headerlink" title="凝聚层次聚类"></a>凝聚层次聚类</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210057792.png" alt="image-20220501210057792"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210257323.png" alt="image-20220501210257323" style="zoom:80%;"><h4 id="分裂层次聚类"><a href="#分裂层次聚类" class="headerlink" title="分裂层次聚类"></a>分裂层次聚类</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210157413.png" alt="image-20220501210157413"></p><h4 id="层次聚类运行过程"><a href="#层次聚类运行过程" class="headerlink" title="层次聚类运行过程"></a>层次聚类运行过程</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501210617952.png" alt="image-20220501210617952" style="zoom:80%;"><h4 id="层次聚类问题"><a href="#层次聚类问题" class="headerlink" title="层次聚类问题"></a>层次聚类问题</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211009912.png" alt="image-20220501211009912"></p><h5 id="簇间相似度"><a href="#簇间相似度" class="headerlink" title="簇间相似度"></a>簇间相似度</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211120687.png" alt="image-20220501211120687"></p><h6 id="MIN-单连接"><a href="#MIN-单连接" class="headerlink" title="MIN(单连接)"></a>MIN(单连接)</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211241313.png" alt="image-20220501211241313"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211525185.png" alt="image-20220501211525185" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211730793.png" alt="image-20220501211730793"></p><h6 id="MAX-全连接"><a href="#MAX-全连接" class="headerlink" title="MAX(全连接)"></a>MAX(全连接)</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501211835185.png" alt="image-20220501211835185" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212028190.png" alt="image-20220501212028190" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212205387.png" alt="image-20220501212205387"></p><h6 id="组平均"><a href="#组平均" class="headerlink" title="组平均"></a>组平均</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212312263.png" alt="image-20220501212312263"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212341282.png" alt="image-20220501212341282"></p><h6 id="质心距离"><a href="#质心距离" class="headerlink" title="质心距离"></a>质心距离</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212410882.png" alt="image-20220501212410882"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212432114.png" alt="image-20220501212432114"></p><h4 id="层次聚类特点"><a href="#层次聚类特点" class="headerlink" title="层次聚类特点"></a>层次聚类特点</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212525238.png" alt="image-20220501212525238"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220501212554701.png" alt="image-20220501212554701"></p><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220502230526521.png" alt="image-20220502230526521"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502230608684.png" alt="image-20220502230608684" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502230621659.png" alt="image-20220502230621659" style="zoom:80%;"><h3 id="密度聚类"><a href="#密度聚类" class="headerlink" title="密度聚类"></a>密度聚类</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502230804936.png" alt="image-20220502230804936" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502230837133.png" alt="image-20220502230837133" style="zoom:80%;"><h4 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231725538.png" alt="image-20220502231725538" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231754409.png" alt="image-20220502231754409" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231830373.png" alt="image-20220502231830373" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231942230.png" alt="image-20220502231942230" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231106481.png" alt="image-20220502231106481"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502231225481.png" alt="image-20220502231225481" style="zoom:80%;"><h5 id="直接密度可达和密度可达"><a href="#直接密度可达和密度可达" class="headerlink" title="直接密度可达和密度可达"></a>直接密度可达和密度可达</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502232403856.png" alt="image-20220502232403856"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502232657432.png" alt="image-20220502232657432" style="zoom:80%;"><h5 id="密度相连"><a href="#密度相连" class="headerlink" title="密度相连"></a>密度相连</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502232809663.png" alt="image-20220502232809663"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502233103676.png" alt="image-20220502233103676" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502233507139.png" alt="image-20220502233507139" style="zoom:80%;"><h4 id="DBSCAN算法"><a href="#DBSCAN算法" class="headerlink" title="DBSCAN算法"></a>DBSCAN算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502233715789.png" alt="image-20220502233715789"></p><h5 id="DBSCAN优势"><a href="#DBSCAN优势" class="headerlink" title="DBSCAN优势"></a>DBSCAN优势</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502233937292.png" alt="image-20220502233937292"></p><h5 id="DBSCAN劣势"><a href="#DBSCAN劣势" class="headerlink" title="DBSCAN劣势"></a>DBSCAN劣势</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502234018714.png" alt="image-20220502234018714" style="zoom:80%;"><h3 id="聚类质量"><a href="#聚类质量" class="headerlink" title="聚类质量"></a>聚类质量</h3><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502234305030.png" alt="image-20220502234305030" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220502234406008.png" alt="image-20220502234406008" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503104338542.png" alt="image-20220503104338542" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503104426208.png" alt="image-20220503104426208" style="zoom:80%;"><h2 id="实验六-聚类算法"><a href="#实验六-聚类算法" class="headerlink" title="实验六 聚类算法"></a>实验六 聚类算法</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503115501342.png" alt="image-20220503115501342">    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> misc</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> cluster</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP1###</span></span><br><span class="line"><span class="comment">#compress_image函数实现图片压缩功能，compress_image函数将每个像素作为一个元素进行聚类，以此减少其颜色个数。</span></span><br><span class="line"><span class="comment">#参数img是图片传入的接口，因此我们需要知道变量img的数据结构，请自行查看。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_image</span><span class="params">(img,num_cluster)</span>:</span></span><br><span class="line">    <span class="comment"># 思考，聚类算法对输入的数据结构要求如何？</span></span><br><span class="line">    <span class="comment"># STEP1.1：将img结构进行转换即每个像素作为一个元素，使之能符合聚类算法数据输入的要求。</span></span><br><span class="line">    X=img.reshape((<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 创建KMeans聚类模型，并训练。</span></span><br><span class="line">    kmeans=cluster.KMeans(n_clusters=num_cluster,n_init=<span class="number">4</span>,random_state=<span class="number">5</span>)</span><br><span class="line">    kmeans.fit(X)</span><br><span class="line">    <span class="comment"># STEP1.2：分别获取每个数据聚类后的label，以及每个label的质心。</span></span><br><span class="line">    labels=kmeans.labels_</span><br><span class="line">    centroids=kmeans.cluster_centers_.squeeze()</span><br><span class="line">    <span class="comment"># STEP1.3：使用质心的数值代替原数据的label值，那么我们将获得一个新的图像。</span></span><br><span class="line">    <span class="comment"># 提示，使用numpy的choose函数进行进行质心值的代替，reshape函数回复原图片的数据结构，并返回结果。</span></span><br><span class="line">    input_image_compressed=np.choose(labels,centroids).reshape(img.reshape)</span><br><span class="line">    <span class="keyword">return</span> input_image_compressed</span><br><span class="line"></span><br><span class="line"><span class="comment">### STEP2</span></span><br><span class="line"><span class="comment">#plot_image函数打印图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_image</span><span class="params">(img,title)</span>:</span></span><br><span class="line">    vmin=img.min()</span><br><span class="line">    vmax=img.max()</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.imshow(img,cmap=plt.cm.gray,vmin=vmin,vmax=vmax)</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP3###</span></span><br><span class="line"><span class="comment">#读入图片，设置压缩率，实现压缩</span></span><br><span class="line"><span class="comment">#设置图片的路径和压缩比例</span></span><br><span class="line">input_file=<span class="string">r"D:\重庆第二师范学院\2020秋大三上\数据挖掘与机器学习 程雪峰\实验六 聚类算法\flower.jpg"</span></span><br><span class="line">num_bits=<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span>&lt;=num_bits&lt;=<span class="number">8</span>:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'Number of bits should be between 1 and 8'</span>)</span><br><span class="line">num_clusters = np.power(<span class="number">2</span>,num_bits)</span><br><span class="line"><span class="comment"># 输出压缩比例</span></span><br><span class="line">compression_rate = round(<span class="number">100</span>*(<span class="number">8.0</span>-num_bits)/<span class="number">8.0</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"\nThe size of the image will be reduced by a factor of"</span>)</span><br><span class="line">print(<span class="string">"\nCompression rate = "</span>+str(compression_rate)+<span class="string">"%"</span>)</span><br><span class="line"><span class="comment"># 加载需要压缩的图片</span></span><br><span class="line">input_image=misc.imread(input_file,<span class="literal">True</span>).astype(np.uint8)</span><br><span class="line"><span class="comment"># 原始图像的输出</span></span><br><span class="line">plot_image(input_image,<span class="string">'Original image'</span>)</span><br><span class="line"><span class="comment"># 压缩后的图像输出</span></span><br><span class="line">input_image_compressed=compress_image(input_image,num_clusters)</span><br><span class="line">plot_image(input_image_compressed,<span class="string">'Compressed image; compression rate = '</span>+str(compression_rate)+<span class="string">'%'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="实验七-集成学习"><a href="#实验七-集成学习" class="headerlink" title="实验七 集成学习"></a>实验七 集成学习</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">决策树(Decision Tree）是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于等于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503194259180.png" alt="image-20220503194259180"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目一：分析影响房价的因素</span><br><span class="line">我们现在需要使用决策树来对房价的因素进行分析发现哪个属性最重要，在前面实验中我们已经熟悉了波士顿房价这个数据集，这个数据集由13个属性，以及一个价格所组成，房子的属性影响价格的走势，但是每一个属性的重要程度是不一样的，回想决策树的原理，我们可以使用决策树帮我们判别出特征属性的重要程度。提示：使用决策树回归器DecisionTreeRegressor的feature_importances_ 方法。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error,explained_variance_score</span><br><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># Load housing data</span></span><br><span class="line">    housing_data=datasets.load_boston()</span><br><span class="line">    <span class="comment"># Shuffle the data</span></span><br><span class="line">    X,y=shuffle(housing_data.data,housing_data.target,random_state=<span class="number">7</span>)</span><br><span class="line">    <span class="comment"># Split the data 80/20 (80% for training, 20% for testing)</span></span><br><span class="line">    num_training=int(<span class="number">0.8</span>*len(X))</span><br><span class="line">    X_train,y_train=X[:num_training],y[:num_training]</span><br><span class="line">    X_test,y_test=X[num_training:],y[num_training:]</span><br><span class="line">    <span class="comment"># Fit decision tree regression model</span></span><br><span class="line">    dt_regressor=DecisionTreeRegressor(max_depth=<span class="number">4</span>)</span><br><span class="line">    dt_regressor.fit(X_train,y_train)</span><br><span class="line">    <span class="comment"># Evaluate performance of Decision Tree regressor</span></span><br><span class="line">    y_pre_dt=dt_regressor.predict(X_test)</span><br><span class="line">    mse=mean_squared_error(y_test,y_pre_dt)</span><br><span class="line">    evs=explained_variance_score(y_test,y_pre_dt)</span><br><span class="line">    print(<span class="string">"\n#### Decision Tree performance ####"</span>)</span><br><span class="line">    print(<span class="string">"Mean squared error ="</span>,round(mse, <span class="number">2</span>))</span><br><span class="line">    print(<span class="string">"Explained variance score ="</span>,round(evs,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot relative feature importances</span></span><br><span class="line">    feature_importance = <span class="number">100.0</span>*(dt_regressor.feature_importances_/max(dt_regressor.feature_importances_))</span><br><span class="line">    <span class="comment"># Sort the values and flip them</span></span><br><span class="line">    index_sorted=np.flipud(np.argsort(feature_importance))</span><br><span class="line">    <span class="comment"># Arrange the X ticks</span></span><br><span class="line">    pos=np.arange(index_sorted.shape[<span class="number">0</span>])+<span class="number">0.5</span></span><br><span class="line">    <span class="comment"># Plot the bar graph</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.bar(pos,feature_importance[index_sorted],align=<span class="string">'center'</span>)</span><br><span class="line">    plt.xticks(pos,housing_data.feature_names[index_sorted])</span><br><span class="line">    plt.ylabel(<span class="string">'Relative Importance'</span>)</span><br><span class="line">    plt.title(<span class="string">'Decision Tree regressor'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503195924871.png" alt="image-20220503195924871" style="zoom:80%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目二：随机森林</span><br><span class="line">使用sklearn自带数据集digits进行练习，请将数据集划分为训练与测试集，分别使用决策树和随机森林算法对数据digits的训练集进行分类，比较决策树算法和随机森林算法的表现，并思考是否可以继续提升随机森林算法的表现？该如何实现呢？</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line">dig = datasets.load_digits()</span><br><span class="line">X_train,X_test,Y_train,Y_test=train_test_split(dig.data,dig.target,test_size=<span class="number">0.4</span>,random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dtc=DecisionTreeClassifier()</span><br><span class="line">rfc=RandomForestClassifier()</span><br><span class="line">rfc2=RandomForestClassifier(n_estimators=<span class="number">200</span>,max_features=<span class="number">8</span>)</span><br><span class="line">dtc_pre=dtc.fit(X_train,Y_train).predict(X_test)</span><br><span class="line">rfc_pre=rfc.fit(X_train,Y_train).predict(X_test)</span><br><span class="line">rfc2_pre=rfc2.fit(X_train,Y_train).predict(X_test)</span><br><span class="line">print(metrics.accuracy_score(Y_test,dtc_pre))</span><br><span class="line">print(metrics.accuracy_score(Y_test,rfc_pre))</span><br><span class="line">print(metrics.accuracy_score(Y_test,rfc2_pre))</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503201744350.png" alt="image-20220503201744350" style="zoom:80%;"><h2 id="数据降维"><a href="#数据降维" class="headerlink" title="数据降维"></a>数据降维</h2><h3 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503105529797.png" alt="image-20220503105529797"></p><h3 id="现实中的数据"><a href="#现实中的数据" class="headerlink" title="现实中的数据"></a>现实中的数据</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503105543965.png" alt="image-20220503105543965"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503105606469.png" alt="image-20220503105606469"></p><h3 id="降维的必要性"><a href="#降维的必要性" class="headerlink" title="降维的必要性"></a>降维的必要性</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503105704085.png" alt="image-20220503105704085"></p><h3 id="特征维度减少的方法"><a href="#特征维度减少的方法" class="headerlink" title="特征维度减少的方法"></a>特征维度减少的方法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503105812789.png" alt="image-20220503105812789"></p><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110033101.png" alt="image-20220503110033101" style="zoom:80%;"><h4 id="特征选择代码实现"><a href="#特征选择代码实现" class="headerlink" title="特征选择代码实现"></a>特征选择代码实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110216627.png" alt="image-20220503110216627"></p><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110324120.png" alt="image-20220503110324120"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110355824.png" alt="image-20220503110355824" style="zoom:80%;"><h4 id="常用的降维方法"><a href="#常用的降维方法" class="headerlink" title="常用的降维方法"></a>常用的降维方法</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110454902.png" alt="image-20220503110454902" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+独立成分分析</span><br></pre></td></tr></table></figure><h5 id="PCA算法"><a href="#PCA算法" class="headerlink" title="PCA算法"></a>PCA算法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110559964.png" alt="image-20220503110559964"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110708437.png" alt="image-20220503110708437" style="zoom:80%;"><h6 id="PCA算法过程"><a href="#PCA算法过程" class="headerlink" title="PCA算法过程"></a>PCA算法过程</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503110925058.png" alt="image-20220503110925058" style="zoom:80%;"><h6 id="PCA算法的特点"><a href="#PCA算法的特点" class="headerlink" title="PCA算法的特点"></a>PCA算法的特点</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503111042035.png" alt="image-20220503111042035" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCA对象非常有用，但对大型数据集有一定限制。最大的限制是PCA仅支持批处理，这意味着所有要处理的数据必须适合主内存。IncrementalPCA对象使用不同的处理形式使PCA允许部分计算。</span><br></pre></td></tr></table></figure><h6 id="PCA代码实现"><a href="#PCA代码实现" class="headerlink" title="PCA代码实现"></a>PCA代码实现</h6><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503111113897.png" alt="image-20220503111113897" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503163502436.png" alt="image-20220503163502436" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503111206374.png" alt="image-20220503111206374" style="zoom:80%;"><h6 id="Incremental-PCA实现"><a href="#Incremental-PCA实现" class="headerlink" title="Incremental PCA实现"></a>Incremental PCA实现</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCA对象非常有用，但对大型数据集有一定限制。最大的限制是PCA仅支持批处理，这意味着所有要处理的数据必须适合主内存。IncrementalPCA对象使用不同的处理形式使PCA允许部分计算。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA,IncrementalPCA</span><br><span class="line">iris=load_iris()</span><br><span class="line">x=iris.data</span><br><span class="line">y=iris.target</span><br><span class="line">n_components=<span class="number">2</span></span><br><span class="line">ipca=IncrementalPCA(n_components=n_components,batch_size=<span class="number">10</span>)</span><br><span class="line">X_ipca=ipca.fit_transform(x)</span><br><span class="line">pca=PCA(n_components=n_components)</span><br><span class="line">X_pca=pca.fit_transform(x)</span><br><span class="line">colors=[<span class="string">'navy'</span>,<span class="string">'turquoise'</span>,<span class="string">'darkorange'</span>]</span><br><span class="line"><span class="keyword">for</span> X_transformed,title <span class="keyword">in</span> [(X_ipca,<span class="string">'Incremental PCA'</span>),(X_pca,<span class="string">"PCA"</span>)]:</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> color,i,target_name <span class="keyword">in</span> zip(colors,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],iris.target_names):</span><br><span class="line">        plt.scatter(X_transformed[y==i,<span class="number">0</span>],X_transformed[y==i,<span class="number">1</span>],color=color,lw=<span class="number">2</span>,label=target_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Incremental"</span> <span class="keyword">in</span> title:</span><br><span class="line">        err=np.abs(np.abs(X_pca)-np.abs(X_ipca)).mean()</span><br><span class="line">        plt.title(title+<span class="string">' of iris dataset\nMean absolute unsigned error% .6f'</span>% err)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.title(title+<span class="string">' of iris dataset'</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'best'</span>,shadow=<span class="literal">False</span>,scatterpoints=<span class="number">1</span>)</span><br><span class="line">    plt.axis([<span class="number">-4</span>,<span class="number">4</span>,<span class="number">-1.5</span>,<span class="number">1.5</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503172833866.png" alt="image-20220503172833866" style="zoom: 67%;"><h5 id="FA-因子分析-算法"><a href="#FA-因子分析-算法" class="headerlink" title="FA(因子分析)算法"></a>FA(因子分析)算法</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503174033270.png" alt="image-20220503174033270" style="zoom: 67%;"><h5 id="LCA-独立成分分析-算法"><a href="#LCA-独立成分分析-算法" class="headerlink" title="LCA(独立成分分析)算法"></a>LCA(独立成分分析)算法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line">X,y=make_blobs(n_samples=<span class="number">10000</span>,n_features=<span class="number">3</span>,centers=[[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]],cluster_std=[<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.2</span>]</span><br><span class="line">               ,random_state=<span class="number">9</span>)</span><br><span class="line">fig=plt.figure()</span><br><span class="line">ax=Axes3D(fig,rect=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],elev=<span class="number">30</span>,azim=<span class="number">20</span>)</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],X[:,<span class="number">2</span>],marker=<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> FastICA</span><br><span class="line">ica=FastICA(n_components=<span class="number">2</span>)</span><br><span class="line">ica.fit(X)</span><br><span class="line">X_new=ica.fit_transform(X)</span><br><span class="line">print(len(X_new[:,<span class="number">0</span>]),len(X_new[:,<span class="number">1</span>]))</span><br><span class="line">ax1=fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">plt.scatter(X_new[:,<span class="number">0</span>],X_new[:,<span class="number">1</span>],marker=<span class="string">'.'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220503175412127.png" alt="image-20220503175412127" style="zoom:80%;"><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
      <category term="聚类算法" scheme="http://tianyong.fun/tags/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="降维" scheme="http://tianyong.fun/tags/%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第五章 回归分析</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90.html</id>
    <published>2022-04-24T14:35:07.000Z</published>
    <updated>2023-02-23T19:34:04.704Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第五章-回归分析"><a href="#第五章-回归分析" class="headerlink" title="第五章 回归分析"></a>第五章 回归分析</h1><h2 id="回归预测"><a href="#回归预测" class="headerlink" title="回归预测"></a>回归预测</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224555655.png" alt="image-20220424224555655"></p><h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224738273.png" alt="image-20220424224738273"></p><h3 id="回归分析案例"><a href="#回归分析案例" class="headerlink" title="回归分析案例"></a>回归分析案例</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224844325.png" alt="image-20220424224844325"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424224913177.png" alt="image-20220424224913177"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225050000.png" alt="image-20220424225050000"></p><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225337145.png" alt="image-20220424225337145"></p><h3 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225547631.png" alt="image-20220424225547631"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225719095.png" alt="image-20220424225719095"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424225923412.png" alt="image-20220424225923412"></p><h4 id="一元线性回归举例"><a href="#一元线性回归举例" class="headerlink" title="一元线性回归举例"></a>一元线性回归举例</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230101753.png" alt="image-20220424230101753"></p><h4 id="两种拟合方法"><a href="#两种拟合方法" class="headerlink" title="两种拟合方法"></a>两种拟合方法</h4><h5 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230229501.png" alt="image-20220424230229501"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230548674.png" alt="image-20220424230548674"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231526375.png" alt="image-20220424231526375"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231602615.png" alt="image-20220424231602615"></p><h5 id="矩阵法"><a href="#矩阵法" class="headerlink" title="矩阵法"></a>矩阵法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424230924197.png" alt="image-20220424230924197"></p><h4 id="一元线性回归实现"><a href="#一元线性回归实现" class="headerlink" title="一元线性回归实现"></a>一元线性回归实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424231700142.png" alt="image-20220424231700142"></p><h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425094610688.png" alt="image-20220425094610688"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425094712702.png" alt="image-20220425094712702"></p><h4 id="多元线性回归实现"><a href="#多元线性回归实现" class="headerlink" title="多元线性回归实现"></a>多元线性回归实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425094843356.png" alt="image-20220425094843356"></p><h3 id="线性回归的优缺点"><a href="#线性回归的优缺点" class="headerlink" title="线性回归的优缺点"></a>线性回归的优缺点</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425095223132.png" alt="image-20220425095223132"></p><h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="C:%5CUsers%5CTy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220425094457073.png" alt="image-20220425094457073"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425100244538.png" alt="image-20220425100244538"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425100507719.png" alt="image-20220425100507719"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425100557590.png" alt="image-20220425100557590"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425100634277.png" alt="image-20220425100634277"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425101045788.png" alt="image-20220425101045788"></p><h3 id="一元高阶多项式回归模型"><a href="#一元高阶多项式回归模型" class="headerlink" title="一元高阶多项式回归模型"></a>一元高阶多项式回归模型</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425095525139.png" alt="image-20220425095525139"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425095624334.png" alt="image-20220425095624334"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425100018772.png" alt="image-20220425100018772"></p><h3 id="多元高阶多项式回归"><a href="#多元高阶多项式回归" class="headerlink" title="多元高阶多项式回归"></a>多元高阶多项式回归</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425095758239.png" alt="image-20220425095758239"></p><h3 id="线性回归问题"><a href="#线性回归问题" class="headerlink" title="线性回归问题"></a>线性回归问题</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425101346403.png" alt="image-20220425101346403"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425101519320.png" alt="image-20220425101519320"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425101627689.png" alt="image-20220425101627689"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425101712142.png" alt="image-20220425101712142"></p><h3 id="Ridge回归-岭回归-和Lasso回归"><a href="#Ridge回归-岭回归-和Lasso回归" class="headerlink" title="Ridge回归(岭回归)和Lasso回归"></a>Ridge回归(岭回归)和Lasso回归</h3><p><a href="https://zhuanlan.zhihu.com/p/377988205" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102142547.png" alt="image-20220425102142547"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102216445.png" alt="image-20220425102216445"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102228012.png" alt="image-20220425102228012"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102240198.png" alt="image-20220425102240198"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102300640.png" alt="image-20220425102300640"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102310632.png" alt="image-20220425102310632"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425102322151.png" alt="image-20220425102322151"></p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425103548710.png" alt="image-20220425103548710"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425103617138.png" alt="image-20220425103617138"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425103628538.png" alt="image-20220425103628538"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425103845049.png" alt="image-20220425103845049"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425104214155.png" alt="image-20220425104214155"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425104231389.png" alt="image-20220425104231389"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425104248335.png" alt="image-20220425104248335"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425104526768.png" alt="image-20220425104526768"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425104552244.png" alt="image-20220425104552244"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105101730.png" alt="image-20220425105101730"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105148410.png" alt="image-20220425105148410"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105714235.png" alt="image-20220425105714235"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105759609.png" alt="image-20220425105759609"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105918963.png" alt="image-20220425105918963"></p><h3 id="逻辑回归的优点"><a href="#逻辑回归的优点" class="headerlink" title="逻辑回归的优点"></a>逻辑回归的优点</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425105954993.png" alt="image-20220425105954993"></p><h3 id="逻辑回归的缺点"><a href="#逻辑回归的缺点" class="headerlink" title="逻辑回归的缺点"></a>逻辑回归的缺点</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425110050073.png" alt="image-20220425110050073"></p><p>决策树(ID3+C4.5+CART)</p><p>支持向量机(SVM)</p><h2 id="实验5-回归算法"><a href="#实验5-回归算法" class="headerlink" title="实验5 回归算法"></a>实验5 回归算法</h2><h3 id="题目一-Boston房价-线性回归和多项式回归"><a href="#题目一-Boston房价-线性回归和多项式回归" class="headerlink" title="题目一 Boston房价(线性回归和多项式回归)"></a>题目一 Boston房价(线性回归和多项式回归)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">本实验中我们将对波士顿房价的数据集进行回归算法训练：在机器学习章节中我们已经创建过最简单的回归模型，我们在此回顾一下：</span><br><span class="line">LinearRegression 会调用 fit 方法来拟合数组 X， y，并且将线性模型的系数存储在其成员变量 coef_ 中：</span><br><span class="line">from sklearn import linear_model</span><br><span class="line">reg &#x3D; linear_model.LinearRegression()</span><br><span class="line">print(reg.fit ([[0, 0], [1, 1], [2, 2]], [0, 1, 2]))</span><br><span class="line">print(reg.coef_)</span><br><span class="line">print(reg.predict([[1, 2]]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">题目一：使用线性和多项式回归算法进行房价预测</span><br><span class="line"></span><br><span class="line">STEP1：加载波士顿房价数据集，并且将数据集分割为训练集和测试集。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STEP2：创建线性回归模型和多项式回归模型并进行训练，创建多项式回归模型并进行训练，在这里我们已经对线性回归模型比较熟悉了，但是多项式回归模型如何创建？在此我们可以将原始数据转换其多项式特征值后再使用线性回归训练构成多项式回归模型。提示：使用PolynomialFeatures方法将数据进行转换</span><br><span class="line"></span><br><span class="line">STEP3：使用模型进行预测并计算其mse。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426184314952.png" alt="image-20220426184314952"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426190103888.png" alt="image-20220426190103888"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426190825293.png" alt="image-20220426190825293"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426190812968.png" alt="image-20220426190812968"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boston房价数据集：data一共有<span class="number">506</span>组样本，每个样本<span class="number">14</span>个属性；target一共有<span class="number">506</span>组</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426193838158.png" alt="image-20220426193838158"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426193855354.png" alt="image-20220426193855354"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###STEP 1###</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line">data, target = datasets.load_boston(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,target,random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP 2###</span></span><br><span class="line">linear_model = LinearRegression()</span><br><span class="line">linear_model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">model=PolynomialFeatures(degree=<span class="number">2</span>)</span><br><span class="line">x_transformed=model.fit_transform(x_train)</span><br><span class="line">poly_linear_model = LinearRegression()</span><br><span class="line">poly_linear_model.fit(x_transformed,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP 3###</span></span><br><span class="line">y_predict=linear_model.predict(x_test)</span><br><span class="line">x_test1=model.fit_transform(x_test)</span><br><span class="line">y_hat=poly_linear_model.predict(x_test1)</span><br><span class="line">linear_mse=np.average((y_predict-np.array(y_test))**<span class="number">2</span>)</span><br><span class="line">poly_mse = np.average((y_hat-np.array(y_test))**<span class="number">2</span>)</span><br><span class="line">print(linear_mse, poly_mse)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426193922803.png" alt="image-20220426193922803"></p><p><a href="https://www.it610.com/article/1289309028811350016.htm" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p><h3 id="题目二-Boston房价-Ridge回归算法"><a href="#题目二-Boston房价-Ridge回归算法" class="headerlink" title="题目二  Boston房价(Ridge回归算法)"></a>题目二  Boston房价(Ridge回归算法)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">题目二：使用Ridge回归算法进行房价预测</span><br><span class="line">线性回归的主要问题是对异常值敏感，在真实世界的数据收集过程中，经常会遇到错误的度量结果，而线性回归使用的普通最小二乘法，其目标是使平方误差最小化，这时，由于异常值误差的绝对值很大，会引起问题，破坏模型。</span><br><span class="line">Ridge 回归通过对系数的大小施加惩罚来解决普通最小二乘法的一些问题，请自行了解Ridge 回归算法，以及与线性算法的区别。</span><br><span class="line">STEP1：加载数据集，并且将数据集分割为训练集和测试集。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STEP2：创建Ridge回归模型，请了解sklearn中Ridge模型的alpha参数，参考：http:&#x2F;&#x2F;sklearn.apachecn.org&#x2F;cn&#x2F;0.19.0&#x2F;modules&#x2F;generated&#x2F;sklearn.linear_model.Ridge.html#sklearn.linear_model.Ridge。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STEP3：寻找Ridge最优参数alpha，创建参数优化器GridSearchCV，将参数model，param_grid传入，GridSearchCV是为了寻找出model的alpha最优参数，请了解sklearn中GridSearchCV的model，param_grid参数，参考：http:&#x2F;&#x2F;sklearn.apachecn.org&#x2F;cn&#x2F;0.19.0&#x2F;modules&#x2F;generated&#x2F;sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STEP4：使用最优参数的Ridge模型进行预测，计算其MSE，并从图像中观察预测值是</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426193949270.png" alt="image-20220426193949270"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426194005962.png" alt="image-20220426194005962"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426194018670.png" alt="image-20220426194018670"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### STEP 1 ###</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">data,target=datasets.load_boston(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,target,random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### STEP 2###</span></span><br><span class="line">model = Ridge()</span><br><span class="line">alpha_can=np.logspace(<span class="number">-3</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### STEP 3###</span></span><br><span class="line">ridge_model=GridSearchCV(model, param_grid=&#123;<span class="string">'alpha'</span>:alpha_can&#125;)</span><br><span class="line">ridge_model.fit(data,target)</span><br><span class="line">print(<span class="string">'证参数: \n'</span>, ridge_model.best_params_)</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP 4###</span></span><br><span class="line">y_hat=ridge_model.predict(x_test)</span><br><span class="line">mse=np.average((y_hat-np.array(y_test))**<span class="number">2</span>)</span><br><span class="line">rmse=np.sqrt(mse)</span><br><span class="line">t=np.arange(len(x_test))</span><br><span class="line">plt.plot(t,y_test,<span class="string">'r-'</span>,linewidth=<span class="number">2</span>,label=<span class="string">'Test'</span>)</span><br><span class="line">plt.plot(t,y_hat,<span class="string">'g-'</span>,linewidth=<span class="number">2</span>,label=<span class="string">'Predict'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426195436322.png" alt="image-20220426195436322"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
      <category term="回归算法" scheme="http://tianyong.fun/tags/%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第四章 分类算法</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95.html</id>
    <published>2022-04-23T12:51:34.000Z</published>
    <updated>2022-05-05T02:41:54.986Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第四章-分类算法"><a href="#第四章-分类算法" class="headerlink" title="第四章 分类算法"></a>第四章 分类算法</h1><h2 id="分类算法概述"><a href="#分类算法概述" class="headerlink" title="分类算法概述"></a>分类算法概述</h2><h3 id="分类的定义"><a href="#分类的定义" class="headerlink" title="分类的定义"></a>分类的定义</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205910301.png" alt="image-20220423205910301"></p><h3 id="分类的应用"><a href="#分类的应用" class="headerlink" title="分类的应用"></a>分类的应用</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210010708.png" alt="image-20220423210010708"></p><h3 id="什么样的数据适合分类？"><a href="#什么样的数据适合分类？" class="headerlink" title="什么样的数据适合分类？"></a>什么样的数据适合分类？</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205438985.png" alt="image-20220423205438985"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205536080.png" alt="image-20220423205536080"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423205553795.png" alt="image-20220423205553795"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210255075.png" alt="image-20220423210255075"></p><h3 id="分类器的构建标准"><a href="#分类器的构建标准" class="headerlink" title="分类器的构建标准"></a>分类器的构建标准</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222634239.png" alt="image-20220423222634239"></p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222816691.png" alt="image-20220423222816691" style="zoom:80%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423222843876.png" alt="image-20220423222843876" style="zoom:80%;"><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210406604.png" alt="image-20220423210406604"></p><h2 id="朴素贝叶斯算法-NB"><a href="#朴素贝叶斯算法-NB" class="headerlink" title="朴素贝叶斯算法(NB)"></a>朴素贝叶斯算法(NB)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423210906433.png" alt="image-20220423210906433"></p><h3 id="频率-amp-概率"><a href="#频率-amp-概率" class="headerlink" title="频率&amp;概率"></a>频率&amp;概率</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211214265.png" alt="image-20220423211214265"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211200738.png" alt="image-20220423211200738"></p><h3 id="先验概率-amp-后验概率-amp-条件概率"><a href="#先验概率-amp-后验概率-amp-条件概率" class="headerlink" title="先验概率 &amp; 后验概率 &amp; 条件概率"></a>先验概率 &amp; 后验概率 &amp; 条件概率</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211255437.png" alt="image-20220423211255437"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211406624.png" alt="image-20220423211406624"></p><h3 id="贝叶斯算法的核心"><a href="#贝叶斯算法的核心" class="headerlink" title="贝叶斯算法的核心"></a>贝叶斯算法的核心</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423211754348.png" alt="image-20220423211754348"></p><h3 id="多项式朴素贝叶斯算法-Naive-Bayes"><a href="#多项式朴素贝叶斯算法-Naive-Bayes" class="headerlink" title="多项式朴素贝叶斯算法(Naive Bayes)"></a>多项式朴素贝叶斯算法(Naive Bayes)</h3><h4 id="朴素贝叶斯案例"><a href="#朴素贝叶斯案例" class="headerlink" title="朴素贝叶斯案例"></a>朴素贝叶斯案例</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233036616.png" alt="image-20220423233036616"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233153735.png" alt="image-20220423233153735"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233216892.png" alt="image-20220423233216892"></p><h4 id="朴素贝叶斯分类算法"><a href="#朴素贝叶斯分类算法" class="headerlink" title="朴素贝叶斯分类算法"></a>朴素贝叶斯分类算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423232843432.png" alt="image-20220423232843432"></p><h3 id="高斯分布朴素贝叶斯算法"><a href="#高斯分布朴素贝叶斯算法" class="headerlink" title="高斯分布朴素贝叶斯算法"></a>高斯分布朴素贝叶斯算法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233437441.png" alt="image-20220423233437441"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233645001.png" alt="image-20220423233645001"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423233934867.png" alt="image-20220423233934867"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234236933.png" alt="image-20220423234236933"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234447246.png" alt="image-20220423234447246"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423235523805.png" alt="image-20220423235523805"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234701473.png" alt="image-20220423234701473"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423234842350.png" alt="image-20220423234842350"></p><h2 id="K近邻算法-KNN"><a href="#K近邻算法-KNN" class="headerlink" title="K近邻算法(KNN)"></a>K近邻算法(KNN)</h2><h4 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113315121.png" alt="image-20220424113315121"></p><h4 id="维度"><a href="#维度" class="headerlink" title="维度"></a>维度</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113409264.png" alt="image-20220424113409264"></p><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424112817814.png" alt="image-20220424112817814" style="zoom:80%;"><h4 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113525899.png" alt="image-20220424113525899"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424112851183.png" alt="image-20220424112851183"></p><h5 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a>欧氏距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113633832.png" alt="image-20220424113633832"></p><h5 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113839988.png" alt="image-20220424113839988"></p><h5 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114447305.png" alt="image-20220424114447305"></p><h5 id="闵可夫斯基距离"><a href="#闵可夫斯基距离" class="headerlink" title="闵可夫斯基距离"></a>闵可夫斯基距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114615988.png" alt="image-20220424114615988"></p><h5 id="杰卡德距离"><a href="#杰卡德距离" class="headerlink" title="杰卡德距离"></a>杰卡德距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114753868.png" alt="image-20220424114753868"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114902226.png" alt="image-20220424114902226"></p><h5 id="余弦距离"><a href="#余弦距离" class="headerlink" title="余弦距离"></a>余弦距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424114954666.png" alt="image-20220424114954666"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115224915.png" alt="image-20220424115224915"></p><h5 id="相关距离"><a href="#相关距离" class="headerlink" title="相关距离"></a>相关距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115436723.png" alt="image-20220424115436723"></p><h5 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115458359.png" alt="image-20220424115458359"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115509099.png" alt="image-20220424115509099"></p><h5 id="距离总结"><a href="#距离总结" class="headerlink" title="距离总结"></a>距离总结</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115710684.png" alt="image-20220424115710684"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115730672.png" alt="image-20220424115730672"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115922126.png" alt="image-20220424115922126"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115929505.png" alt="image-20220424115929505"></p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424113002694.png" alt="image-20220424113002694"></p><h2 id><a href="#" class="headerlink" title></a><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115944637.png" alt="image-20220424115944637"></h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424115953912.png" alt="image-20220424115953912"></p><h5 id="最近邻算法"><a href="#最近邻算法" class="headerlink" title="最近邻算法"></a>最近邻算法</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424121809756.png" alt="image-20220424121809756"></p><h4 id="K近邻算法"><a href="#K近邻算法" class="headerlink" title="K近邻算法"></a>K近邻算法</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424121907864.png" alt="image-20220424121907864"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122045644.png" alt="image-20220424122045644"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122248692.png" alt="image-20220424122248692"></p><h5 id="K值的影响"><a href="#K值的影响" class="headerlink" title="K值的影响"></a>K值的影响</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122328955.png" alt="image-20220424122328955"></p><h5 id="常用的距离"><a href="#常用的距离" class="headerlink" title="常用的距离"></a>常用的距离</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122349211.png" alt="image-20220424122349211"></p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122521591.png" alt="image-20220424122521591"></p><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122844497.png" alt="image-20220424122844497"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122858657.png" alt="image-20220424122858657"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424122912176.png" alt="image-20220424122912176"></p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424123157511.png" alt="image-20220424123157511"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424123304029.png" alt="image-20220424123304029"></p><h2 id="多类问题的分类"><a href="#多类问题的分类" class="headerlink" title="多类问题的分类"></a>多类问题的分类</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221609739.png" alt="image-20220424221609739"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221731390.png" alt="image-20220424221731390"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220424221810933.png" alt="image-20220424221810933"></p><h2 id="实验四-分类算法"><a href="#实验四-分类算法" class="headerlink" title="实验四 分类算法"></a>实验四 分类算法</h2><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425113052503.png" alt="image-20220425113052503"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425111240273.png" alt="image-20220425111240273"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425111253702.png" alt="image-20220425111253702"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425113112690.png" alt="image-20220425113112690"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425113558681.png" alt="image-20220425113558681"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425125001738.png" alt="image-20220425125001738"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">input_file=<span class="string">r'D:\重庆第二师范学院\2020秋大三上\数据挖掘与机器学习 程雪峰\实验四\实验四 分类算法\数据源\adult.data.txt'</span></span><br><span class="line">X=[]</span><br><span class="line">Y=[]</span><br><span class="line">num_lessthan50k=<span class="number">0</span></span><br><span class="line">num_morethan50k=<span class="number">0</span></span><br><span class="line">num_threshold=<span class="number">30000</span></span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'?'</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        data=line[:<span class="number">-1</span>].split(<span class="string">', '</span>)</span><br><span class="line">        <span class="keyword">if</span> (data[<span class="number">-1</span>]==<span class="string">'&lt;=50K'</span>) <span class="keyword">and</span> (num_lessthan50k&lt;num_threshold):</span><br><span class="line">            X.append(data)</span><br><span class="line">            num_lessthan50k=num_lessthan50k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (data[<span class="number">-1</span>]==<span class="string">'&gt;50K'</span>) <span class="keyword">and</span> (num_morethan50k&lt;num_threshold):</span><br><span class="line">            Y.append(data)</span><br><span class="line">            num_morethan50k=num_morethan50k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> num_lessthan50k&gt;=num_threshold <span class="keyword">and</span> num_morethan50k&gt;=num_threshold:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">a=np.array(X)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425123730771.png" alt="image-20220425123730771"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425124639268.png" alt="image-20220425124639268"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">label_encoder=[]</span><br><span class="line">X_encoded=np.empty(X.shape)</span><br><span class="line"><span class="keyword">for</span> i,item <span class="keyword">in</span> enumerate(X[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">if</span> item.isdigit():</span><br><span class="line">        X_encoded[:,i] = X[:,i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        le=preprocessing.LabelEncoder()</span><br><span class="line">        label_encoder.append(le)</span><br><span class="line">        X_encoded[:,i]=label_encoder[<span class="number">-1</span>].fit_transform(X[:,i])</span><br><span class="line">X=X_encoded[:,:<span class="number">-1</span>].astype(int)</span><br><span class="line">y=X_encoded[:,<span class="number">-1</span>].astype(int)</span><br><span class="line">print(X)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426180354403.png" alt="image-20220426180354403"></p><p>[<a href="https://www.cnblogs.com/sench/p/10134094.html" target="_blank" rel="external nofollow noopener noreferrer">preprocessing.LabelEncoder的使用</a>]</p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425130640763.png" alt="image-20220425130640763"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ###STEP3###</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score, train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.25</span>,random_state=<span class="number">5</span>)</span><br><span class="line">classifier_gaussiannb=GaussianNB()</span><br><span class="line">classifier_gaussiannb.fit(x_train,y_train)</span><br><span class="line">y_test_pred=classifier_gaussiannb.predict(x_test)</span><br><span class="line">f1=cross_val_score(classifier_gaussiannb,x,y,scoring=<span class="string">'f1_weighted'</span>,cv=<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'F1 score:'</span>+str(round(<span class="number">100</span>*f1.mean(),<span class="number">2</span>))+<span class="string">"%"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426180410228.png" alt="image-20220426180410228"></p><p><a href="https://blog.csdn.net/rocling/article/details/93336487" target="_blank" rel="external nofollow noopener noreferrer">交叉验证</a></p><p><a href="https://blog.csdn.net/weixin_42691585/article/details/113971857" target="_blank" rel="external nofollow noopener noreferrer">交叉验证</a></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220425130705085.png" alt="image-20220425130705085"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###STEP4###</span></span><br><span class="line"><span class="comment"># 创建个例，将其进行同样编码处理</span></span><br><span class="line">input_data = [<span class="string">'39'</span>, <span class="string">'State-gov'</span>, <span class="string">'77516'</span>, <span class="string">'Bachelors'</span>, <span class="string">'13'</span>, <span class="string">'Never-married'</span>, <span class="string">'Adm-clerical'</span>, <span class="string">'Not-in-family'</span>, <span class="string">'White'</span>, <span class="string">'Male'</span>, <span class="string">'2174'</span>, <span class="string">'0'</span>, <span class="string">'40'</span>, <span class="string">'United-States'</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">input_data_encoded = [<span class="number">-1</span>] * len(input_data)</span><br><span class="line"><span class="keyword">for</span> i,item <span class="keyword">in</span> enumerate(input_data):</span><br><span class="line">    <span class="keyword">if</span> item.isdigit():</span><br><span class="line">        input_data_encoded[i] = int(input_data[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input_data_encoded[i] = int(label_encoder[count].transform([input_data[i]]))</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">input_data_encoded = np.array(input_data_encoded)</span><br><span class="line"><span class="comment">#将个体进行预测分类，并输出结果</span></span><br><span class="line">output_class = classifier_gaussiannb.predict(input_data_encoded.reshape(<span class="number">1</span>,<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">print</span> (label_encoder[<span class="number">-1</span>].inverse_transform(output_class)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220426181449680.png" alt="image-20220426181449680"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
      <category term="分类算法" scheme="http://tianyong.fun/tags/%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第三章 Sklearn</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6-Sklearn.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6-Sklearn.html</id>
    <published>2022-04-23T09:35:38.000Z</published>
    <updated>2022-05-05T02:41:48.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-第三章"><a href="#数据挖掘与机器学习-第三章" class="headerlink" title="数据挖掘与机器学习-第三章"></a>数据挖掘与机器学习-第三章</h1><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.机器学习的英文名称叫Machine Learning，简称ML，该领域主要研究的是如何使计算机能够模拟人类的学习行为从而获得新的知识。</span><br><span class="line">2简单来说，机器学习就是让计算机从大量的数据中学习到相关的规律和逻辑，然后利用学习来的规律来预测以后的未知事物</span><br></pre></td></tr></table></figure><h2 id="机器学习库Sklearn"><a href="#机器学习库Sklearn" class="headerlink" title="机器学习库Sklearn"></a>机器学习库Sklearn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.sklearn是机器学习中一个常用的python第三方模块，网址：http:&#x2F;&#x2F;scikit-learn.org&#x2F;stable&#x2F;index.html </span><br><span class="line">2.里面对一些常用的机器学习方法进行了封装，不需要都实现所有的算法，只需要3.简单的调用sklearn里的模块就可以实现机器学习任务。</span><br><span class="line">行业占有率大，spark等采用相同框架</span><br></pre></td></tr></table></figure><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174246094.png" alt="image-20220423174246094"></p><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174401518.png" alt="image-20220423174401518"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174417804.png" alt="image-20220423174417804"></p><p><a href="https://blog.csdn.net/qq_34271349/article/details/119685889" target="_blank" rel="external nofollow noopener noreferrer">实例参考</a></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris:鸢尾花案例  一共150个样本</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174751371.png" alt="image-20220423174751371"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174801962.png" alt="image-20220423174801962"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175253299.png" alt="image-20220423175253299"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175330998.png" alt="image-20220423175330998"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一共150个样本</span><br><span class="line">target：保存鸢尾花类别，一共三类，每类50个数据</span><br><span class="line">data：一个数据4个属性 花萼长度，花萼宽度，花瓣长度，花瓣宽度4个属性预测鸢尾花卉属于（Setosa，Versicolour，Virginica）三个种类中的哪一类。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Little_Fire/article/details/81062447" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p><h4 id="分割数据"><a href="#分割数据" class="headerlink" title="分割数据"></a>分割数据</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423181720747.png" alt="image-20220423181720747"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423174813212.png" alt="image-20220423174813212"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175603476.png" alt="image-20220423175603476"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423175629915.png" alt="image-20220423175629915"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180041821.png" alt="image-20220423180041821"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_size:表示分配给40%的数据给测试数据集</span><br><span class="line">random_state:表示对随机种子的使用情况</span><br></pre></td></tr></table></figure><h4 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180200685.png" alt="image-20220423180200685"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423180220677.png" alt="image-20220423180220677"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183223046.png" alt="image-20220423183223046"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持向量机，因为英文名为 support vector machine，故一般简称为SVM。他是一种常用的判别方法，在机器学习领域是一个有监督的学习模式，通常用来进行模型识别，分类，回归分析以及异常值检测。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wj-1314/p/12899598.html" target="_blank" rel="external nofollow noopener noreferrer">SVM参考</a></p><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183355521.png" alt="image-20220423183355521"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183612565.png" alt="image-20220423183612565"></p><h4 id="使用模型预测"><a href="#使用模型预测" class="headerlink" title="使用模型预测"></a>使用模型预测</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183757610.png" alt="image-20220423183757610"></p><h4 id="机器学习的评测指标"><a href="#机器学习的评测指标" class="headerlink" title="机器学习的评测指标"></a>机器学习的评测指标</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184039500.png" alt="image-20220423184039500"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423183935327.png" alt="image-20220423183935327"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184140390.png" alt="image-20220423184140390"></p><h5 id="分类常用指标"><a href="#分类常用指标" class="headerlink" title="分类常用指标"></a>分类常用指标</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423184554295.png" alt="image-20220423184554295"></p><h5 id="回归常用指标"><a href="#回归常用指标" class="headerlink" title="回归常用指标"></a>回归常用指标</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185051245.png" alt="image-20220423185051245"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185702540.png" alt="image-20220423185702540"></p><h4 id="学习评测方法"><a href="#学习评测方法" class="headerlink" title="学习评测方法"></a>学习评测方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在训练集上表现良好的模型，在测试集上还是可能表现得不好，进而推翻模型</span><br><span class="line">解决:在测试集上预测前，先在验证集上验证，也就是要将数据划分为测试集、验证集、测试集</span><br><span class="line">问题:导致可用数据进一步减少-&gt;解决方法交叉验证</span><br></pre></td></tr></table></figure><h5 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h5><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423190111433.png" alt="image-20220423190111433"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423185902277.png" alt="image-20220423185902277"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423190659673.png" alt="image-20220423190659673"></p><h6 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证"></a>K折交叉验证</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每一个小的数据集都会作为测试集和训练集</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423191530093.png" alt="image-20220423191530093"></p><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423191929992.png" alt="image-20220423191929992"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192711660.png" alt="image-20220423192711660"></p><h4 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h4><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192112660.png" alt="image-20220423192112660"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192224478.png" alt="image-20220423192224478"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423192407184.png" alt="image-20220423192407184"></p><h2 id="机器学习存在的问题过拟合"><a href="#机器学习存在的问题过拟合" class="headerlink" title="机器学习存在的问题过拟合"></a>机器学习存在的问题过拟合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">过拟合:“你想的太多了”</span><br><span class="line">欠拟合：“你太天真了”</span><br></pre></td></tr></table></figure><h3 id="拟合问题的原因"><a href="#拟合问题的原因" class="headerlink" title="拟合问题的原因"></a>拟合问题的原因</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204734730.png" alt="image-20220423204734730"></p><h3 id="拟合问题的解决办法"><a href="#拟合问题的解决办法" class="headerlink" title="拟合问题的解决办法"></a>拟合问题的解决办法</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204829461.png" alt="image-20220423204829461"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423204906923.png" alt="image-20220423204906923"></p><h2 id="实验三-boston房价"><a href="#实验三-boston房价" class="headerlink" title="实验三 boston房价"></a>实验三 boston房价</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data中有506个样本，每个样本13个指标</span><br><span class="line">target中有506个，应该是每个城市的分数</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423195715972.png" alt="image-20220423195715972"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423195745757.png" alt="image-20220423195745757"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200105027.png" alt="image-20220423200105027"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200133168.png" alt="image-20220423200133168"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200151194.png" alt="image-20220423200151194"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200614292.png" alt="image-20220423200614292"></p><h2 id="方法积累"><a href="#方法积累" class="headerlink" title="方法积累"></a>方法积累</h2><h3 id="快速查看数据结构"><a href="#快速查看数据结构" class="headerlink" title="快速查看数据结构"></a>快速查看数据结构</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423200957877.png" alt="image-20220423200957877"></p><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423201241781.png" alt="image-20220423201241781"></p><h3 id="查看数据集"><a href="#查看数据集" class="headerlink" title="查看数据集"></a>查看数据集</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423181400223.png" alt="image-20220423181400223"></p><h3 id="快速生成data和target"><a href="#快速生成data和target" class="headerlink" title="快速生成data和target"></a>快速生成data和target</h3><p><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220423201830252.png" alt="image-20220423201830252"></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
      <category term="Sklearn" scheme="http://tianyong.fun/tags/Sklearn/"/>
    
  </entry>
  
  <entry>
    <title>python廖雪峰-函数式编程 装饰器</title>
    <link href="http://tianyong.fun/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8.html"/>
    <id>http://tianyong.fun/python%E5%BB%96%E9%9B%AA%E5%B3%B0-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8.html</id>
    <published>2022-04-16T13:11:52.000Z</published>
    <updated>2022-04-16T14:05:55.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p><a href="https://blog.csdn.net/duyun0/article/details/118087073" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p><p><a href="https://www.cnblogs.com/hls-code/p/15318801.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584" target="_blank" rel="external nofollow noopener noreferrer">廖雪峰Python-装饰器</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">装饰器是在不改变原函数的源码和调用方式的情况下，为原函数增加功能</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</span><br></pre></td></tr></table></figure><h2 id="被装饰函数带参数-初级"><a href="#被装饰函数带参数-初级" class="headerlink" title="被装饰函数带参数-初级"></a>被装饰函数带参数-初级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(fun.__name__)</span><br><span class="line">        <span class="keyword">return</span> fun(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"goodbye"</span>)</span><br><span class="line"><span class="meta">@debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_parameter</span><span class="params">(para)</span>:</span></span><br><span class="line">    print(para)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="string">''' # 不写@...可以这么用</span></span><br><span class="line"><span class="string">    say_hello = debug(say_hello)</span></span><br><span class="line"><span class="string">    say_hello()</span></span><br><span class="line"><span class="string">    say_goodbye = debug(say_goodbye)</span></span><br><span class="line"><span class="string">    say_goodbye()</span></span><br><span class="line"><span class="string">    say_parameter = debug(say_parameter)</span></span><br><span class="line"><span class="string">    say_parameter('Jack')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">say_hello</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">say_goodbye</span></span><br><span class="line"><span class="string">goodbye</span></span><br><span class="line"><span class="string">say_parameter</span></span><br><span class="line"><span class="string">Jack'''</span></span><br><span class="line">    </span><br><span class="line">有@...直接使用被装饰函数</span><br></pre></td></tr></table></figure><h2 id="装饰器带参数-高级"><a href="#装饰器带参数-高级" class="headerlink" title="装饰器带参数-高级"></a>装饰器带参数-高级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数的闭包:</span><br><span class="line"><span class="number">1</span>、在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用【即外函数的返回值是内函数的内存地址】。这样就构成了一个闭包。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。</span><br><span class="line"></span><br><span class="line">但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">装饰器的接口约定:</span><br><span class="line">装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了__call__()方法，那么这个对象就是callable的。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span><span class="params">(level)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"[&#123;level&#125;]: enter function &#123;func&#125;()"</span>.format(</span><br><span class="line">                level=level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> inner_wrapper</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='INFO')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(something)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"say &#123;&#125;!"</span>.format(something)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有使用@语法，等同于</span></span><br><span class="line"><span class="comment"># say = logging(level='INFO')(say)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(something)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"do &#123;&#125;..."</span>.format(something)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    say(<span class="string">'hello'</span>)</span><br><span class="line">    do(<span class="string">"my work"</span>)</span><br><span class="line"></span><br><span class="line">[INFO]: enter function say()</span><br><span class="line">say hello!</span><br><span class="line">[DEBUG]: enter function do()</span><br><span class="line">do my work...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和两层嵌套的decorator相比，<span class="number">3</span>层嵌套的效果是这样的：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = log(<span class="string">'execute'</span>)(now)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有__name__等属性，但你去看经过decorator装饰之后的函数，它们的__name__已经从原来的<span class="string">'now'</span>变成了<span class="string">'wrapper'</span>：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br><span class="line">因为返回的那个wrapper()函数名字就是<span class="string">'wrapper'</span>，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，有些依赖函数签名的代码执行就会出错。</span><br><span class="line"></span><br><span class="line">不需要编写wrapper.__name__ = func.__name__这样的代码，Python内置的functools.wraps就是干这个事的，所以，一个完整的decorator的写法如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">或者针对带参数的decorator：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="keyword">import</span> functools是导入functools模块。模块的概念稍候讲解。现在，只需记住在定义wrapper()的前面加上@functools.wraps(func)即可。</span><br></pre></td></tr></table></figure><h2 id="基于类实现的装饰器"><a href="#基于类实现的装饰器" class="headerlink" title="基于类实现的装饰器"></a>基于类实现的装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span>  <span class="comment"># 接受函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(</span><br><span class="line">            <span class="string">"[&#123;level&#125;]: enter function &#123;func&#125;()"</span>.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__))</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper  <span class="comment"># 返回函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(level='INFO')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(something)</span>:</span></span><br><span class="line">    print(</span><br><span class="line">    <span class="string">"say &#123;&#125;!"</span>.format(something))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    say(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">[INFO]: enter function say()</span><br><span class="line">say hello!</span><br></pre></td></tr></table></figure><h2 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h2><p><a href="https://www.cnblogs.com/hls-code/p/15318801.html" target="_blank" rel="external nofollow noopener noreferrer">优质参考</a></p><p><a href="https://blog.csdn.net/YiJie__ShuSheng/article/details/84933648" target="_blank" rel="external nofollow noopener noreferrer">参考链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Python" scheme="http://tianyong.fun/categories/Python/"/>
    
    
      <category term="python廖雪峰" scheme="http://tianyong.fun/tags/python%E5%BB%96%E9%9B%AA%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-第一章</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%A6%82%E5%BF%B5.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%A6%82%E5%BF%B5.html</id>
    <published>2022-04-13T09:30:59.000Z</published>
    <updated>2022-05-05T02:42:04.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-第一章-数据挖掘的概念"><a href="#数据挖掘与机器学习-第一章-数据挖掘的概念" class="headerlink" title="数据挖掘与机器学习-第一章 数据挖掘的概念"></a>数据挖掘与机器学习-第一章 数据挖掘的概念</h1><h2 id="数据挖掘的定义"><a href="#数据挖掘的定义" class="headerlink" title="数据挖掘的定义"></a>数据挖掘的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">广义角度:发现数据中的有用信息，从而帮助决策</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">技术过程:数据挖掘是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，提取隐含在其中的、人们事先不知道的、但又是潜在又用的信息和知识，寻找其规律的技术，结合统计学、机器学习和人工智能技术的综合过程</span><br></pre></td></tr></table></figure><h2 id="数据挖据的目的"><a href="#数据挖据的目的" class="headerlink" title="数据挖据的目的"></a>数据挖据的目的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">两大基本目标是预测和描述数据</span><br><span class="line">其中预测的计算机建模及实现过程通常被称为:监督学习</span><br><span class="line">监督学习（supervised learning):从标记的训练数据来推断一个功能的机器学习任务。</span><br><span class="line">描述的通常称为:无监督学习</span><br><span class="line">无监督学习(unsupervised learning):根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题。往更细分，数据挖掘的目标可以分为以下这些:</span><br><span class="line">预测包含:回归、分类、...</span><br><span class="line">描述包含:聚类、关联规则发现....</span><br></pre></td></tr></table></figure><h2 id="数据挖掘技术"><a href="#数据挖掘技术" class="headerlink" title="数据挖掘技术"></a>数据挖掘技术</h2><h3 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">统计学:是关于认识客观规律总体数量特征和数量关系的科学。它是通过搜索、整理、分析统计资料，认识客观现象数量规律性的方法论科学。</span><br></pre></td></tr></table></figure><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">机器学习的英文名称叫Machine Learning，简称ML，是计算机科学的一个重要分支。它研究的是如何让计算机像人类一样学习，并能从中获取新的知识。</span><br><span class="line"></span><br><span class="line">一般的方法是：设定一些算法，让计算机从大量的数据中通过复杂计算总结出一些相关的规律和逻辑，然后这些规律和逻辑来预测未知的数据</span><br></pre></td></tr></table></figure><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200848899.png" alt="image-20220419200848899" style="zoom: 80%;"><h4 id="机器学习种类"><a href="#机器学习种类" class="headerlink" title="机器学习种类"></a>机器学习种类</h4><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195517817.png" alt="image-20220419195517817" style="zoom: 67%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200656385.png" alt="image-20220419200656385" style="zoom:67%;"><h5 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195853584.png" alt="image-20220419195853584" style="zoom:67%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419195925953.png" alt="image-20220419195925953" style="zoom:67%;"><h5 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h5><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200036550.png" alt="image-20220419200036550" style="zoom:67%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200056318.png" alt="image-20220419200056318" style="zoom:67%;"><h2 id="数据挖掘与机器学习的过程"><a href="#数据挖掘与机器学习的过程" class="headerlink" title="数据挖掘与机器学习的过程"></a>数据挖掘与机器学习的过程</h2><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200336571.png" alt="image-20220419200336571" style="zoom:67%;"><img src="https://gitee.com/ttyong/hexoBlog/raw/master/Images/image-20220419200359451.png" alt="image-20220419200359451" style="zoom:67%;"><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据挖掘技术与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="瑞翼教育" scheme="http://tianyong.fun/tags/%E7%91%9E%E7%BF%BC%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
</feed>
