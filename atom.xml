<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田勇的博客</title>
  
  <subtitle>比你优秀的人都努力，有什么理由不努力！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tianyong.fun/"/>
  <updated>2021-01-03T15:00:56.154Z</updated>
  <id>http://tianyong.fun/</id>
  
  <author>
    <name>TTYONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第八章-基于python的数据整理</title>
    <link href="http://tianyong.fun/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86.html"/>
    <id>http://tianyong.fun/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86.html</id>
    <published>2021-01-02T11:34:58.000Z</published>
    <updated>2021-01-03T15:00:56.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第八章-基于python的数据整理"><a href="#第八章-基于python的数据整理" class="headerlink" title="第八章-基于python的数据整理"></a>第八章-基于python的数据整理</h1><h2 id="合并多个数据集"><a href="#合并多个数据集" class="headerlink" title="合并多个数据集"></a>合并多个数据集</h2><p><em>pandas提供以下几种方法合并多个数据集：</em></p><p><strong>pandas.merge</strong>:<em>基于一个键或多个键连接多个DataFrame的行</em></p><p><strong>pandas.concat</strong>:<em>按行或按列将不同的对象叠加到一起</em></p><p><strong>combine_first</strong>:<em>使用一个对象中的数据填充另一个对象中对应位置的缺失值</em></p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><em>默认连接为类似sql的inner join操作</em></p><p><em>利用how参数，实现其它连接方式，left join, right join, outer join</em></p><h4 id="不指明使用某一列作为连接键"><a href="#不指明使用某一列作为连接键" class="headerlink" title="不指明使用某一列作为连接键"></a>不指明使用某一列作为连接键</h4><p><em>在这种情况下使用重叠列作为键进行连接</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df1 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data2'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df2 = DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1, df2)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s9SNY6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9SNY6.png" alt="s9SNY6.png" border="0"></a></p><h4 id="指明连接键"><a href="#指明连接键" class="headerlink" title="指明连接键"></a>指明连接键</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 等同于上例</span><br><span class="line">pd.merge(df1,df2, on=<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><h4 id="使用不同名的键连接"><a href="#使用不同名的键连接" class="headerlink" title="使用不同名的键连接"></a>使用不同名的键连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df3 = DataFrame(&#123;<span class="string">'lkey'</span>:[<span class="string">'b'</span>,<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>,<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>:range(<span class="number">7</span>)&#125;)</span><br><span class="line">df4 = DaraFrame(&#123;<span class="string">'rkey'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>:range(<span class="number">3</span>)&#125;)</span><br><span class="line">pd.merge(df1,df2, left_on=<span class="string">'lkey'</span>, right_on=<span class="string">'rkey'</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s9pOUI" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9pOUI.png" alt="s9pOUI.png" border="0"></a></p><h4 id="how参数"><a href="#how参数" class="headerlink" title="how参数"></a>how参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df1, df2, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s99YRK" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s99YRK.png" alt="s99YRK.png" border="0"></a></p><h4 id="使用多个键连接"><a href="#使用多个键连接" class="headerlink" title="使用多个键连接"></a>使用多个键连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">left = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">                 <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line">                 <span class="string">'lval'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">right = DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,<span class="string">'bar'</span>],</span><br><span class="line">                  <span class="string">'key2'</span>:[<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>],</span><br><span class="line">                  <span class="string">'rval'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s9FQl6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/s9FQl6.png" alt="s9FQl6.png" border="0"></a></p><h3 id="使用index进行DataFrame合并"><a href="#使用index进行DataFrame合并" class="headerlink" title="使用index进行DataFrame合并"></a>使用index进行DataFrame合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left1=DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">                <span class="string">'value'</span>:range(<span class="number">6</span>)&#125;)</span><br><span class="line">right1=DataFrame(&#123;<span class="string">'group_val'</span>:[<span class="number">3.5</span>, <span class="number">7</span>]&#125;,</span><br><span class="line">                 index=[<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">pd.merge(left1, right1, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sCQuGT" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQuGT.png" alt="sCQuGT.png" border="0"></a></p><h3 id="沿着横轴或纵轴串接"><a href="#沿着横轴或纵轴串接" class="headerlink" title="沿着横轴或纵轴串接"></a>沿着横轴或纵轴串接</h3><h4 id="numpy的concatenate函数"><a href="#numpy的concatenate函数" class="headerlink" title="numpy的concatenate函数"></a>numpy的concatenate函数</h4><p><em>NumPy库的concatenate函数用于串接起NumPy的原生数组</em></p><p><em>axis参数默认为0，沿着竖轴连接</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">np.concatenate([arr, arr], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sCQ7oq" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sCQ7oq.png" alt="sCQ7oq.png" border="0"></a></p><h4 id="pandas的concat函数"><a href="#pandas的concat函数" class="headerlink" title="pandas的concat函数"></a>pandas的concat函数</h4><h5 id="用于Series数据类型"><a href="#用于Series数据类型" class="headerlink" title="用于Series数据类型"></a>用于Series数据类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s2 = Series([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">pd.concat([s1, s2])</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a <span class="number">0</span></span><br><span class="line">    b <span class="number">1</span></span><br><span class="line">    c <span class="number">2</span></span><br><span class="line">    d <span class="number">3</span></span><br><span class="line">    e <span class="number">4</span></span><br><span class="line">pd.concat([s1, s2], axis=<span class="number">1</span>) // 此时得到DataFrame对象，连接方式为outer join</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sC1JC6" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC1JC6.png" alt="sC1JC6.png" border="0"></a></p><p><em>可以通过join参数修改连接方式</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">s3= Series([<span class="number">5</span>,<span class="number">6</span>], index=[<span class="string">'f'</span>,<span class="string">'g'</span>])</span><br><span class="line">s4 = pd.concat([s1*<span class="number">5</span>,s3])</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>)</span><br><span class="line">pd.concat([s1, s4], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sC8qHJ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s3.ax1x.com/2021/01/03/sC8qHJ.png" alt="sC8qHJ.png" border="0"></a></p><h5 id="用于DataFrame数据类型"><a href="#用于DataFrame数据类型" class="headerlink" title="用于DataFrame数据类型"></a>用于DataFrame数据类型</h5><h2 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h2><h3 id="多级索引数据的重塑"><a href="#多级索引数据的重塑" class="headerlink" title="多级索引数据的重塑"></a>多级索引数据的重塑</h3><h3 id="应用pivot方法重塑数据"><a href="#应用pivot方法重塑数据" class="headerlink" title="应用pivot方法重塑数据"></a>应用pivot方法重塑数据</h3><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="移除重复数据"><a href="#移除重复数据" class="headerlink" title="移除重复数据"></a>移除重复数据</h3><h3 id="利用函数或隐射进行数据转换"><a href="#利用函数或隐射进行数据转换" class="headerlink" title="利用函数或隐射进行数据转换"></a>利用函数或隐射进行数据转换</h3><h3 id="值转换"><a href="#值转换" class="headerlink" title="值转换"></a>值转换</h3><h3 id="重命名轴索引"><a href="#重命名轴索引" class="headerlink" title="重命名轴索引"></a>重命名轴索引</h3><h3 id="离散化和面元划分"><a href="#离散化和面元划分" class="headerlink" title="离散化和面元划分"></a>离散化和面元划分</h3><h3 id="检测或过滤异常值"><a href="#检测或过滤异常值" class="headerlink" title="检测或过滤异常值"></a>检测或过滤异常值</h3><h3 id="排列和随机采样"><a href="#排列和随机采样" class="headerlink" title="排列和随机采样"></a>排列和随机采样</h3><h3 id="计算指标-哑变量"><a href="#计算指标-哑变量" class="headerlink" title="计算指标/哑变量"></a>计算指标/哑变量</h3><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据预处理技术" scheme="http://tianyong.fun/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第七章-基于python的数据导入与导出</title>
    <link href="http://tianyong.fun/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html"/>
    <id>http://tianyong.fun/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html</id>
    <published>2021-01-02T09:13:44.000Z</published>
    <updated>2021-01-02T11:12:53.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="第七章-基于python的数据导入与导出"><a href="#第七章-基于python的数据导入与导出" class="headerlink" title="第七章-基于python的数据导入与导出"></a>第七章-基于python的数据导入与导出</h1><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p><em>pandas是python的一个开源库，提供了高性能且易于使用的数据结构及数据分析工具</em></p><p><a href="https://www.pypandas.cn/" target="_blank" rel="external nofollow noopener noreferrer">pandas中文文档</a></p><p><a href="https://pandas.pydata.org/docs/" target="_blank" rel="external nofollow noopener noreferrer">pandas官方文档</a></p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><em>处理一维数据</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h4 id="index和values属性"><a href="#index和values属性" class="headerlink" title="index和values属性"></a>index和values属性</h4><p><em>通过Series的index和values属性获取元素值和index值</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.index</span><br><span class="line">&gt;&gt;&gt;RangeIndex(start=<span class="number">0</span>, stop=<span class="number">3</span>, step=<span class="number">1</span>)</span><br><span class="line">s.values</span><br><span class="line">&gt;&gt;&gt;array([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h4 id="使用自己提供的index"><a href="#使用自己提供的index" class="headerlink" title="使用自己提供的index"></a>使用自己提供的index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s2 = Series([<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>], index = [<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line">&gt;&gt;&gt;s2</span><br><span class="line">&gt;&gt;&gt;a <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;d <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;dtype:int64</span><br><span class="line">&gt;&gt;&gt;s2.index</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">'a'</span>,<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><h5 id="访问单个"><a href="#访问单个" class="headerlink" title="访问单个"></a>访问单个</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="string">'a'</span>] // <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="访问多个"><a href="#访问多个" class="headerlink" title="访问多个"></a>访问多个</h5><p><em>返回新的Series对象</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s2[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]] </span><br><span class="line">a <span class="number">2</span></span><br><span class="line">b <span class="number">8</span></span><br><span class="line">d <span class="number">7</span></span><br></pre></td></tr></table></figure><h4 id="Series和实数做算数运算"><a href="#Series和实数做算数运算" class="headerlink" title="Series和实数做算数运算"></a>Series和实数做算数运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s*<span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">16</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h4 id="Series和实数做逻辑运算"><a href="#Series和实数做逻辑运算" class="headerlink" title="Series和实数做逻辑运算"></a>Series和实数做逻辑运算</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s&gt;<span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="literal">False</span></span><br><span class="line"><span class="number">1</span> <span class="literal">False</span></span><br><span class="line"><span class="number">2</span> <span class="literal">True</span></span><br><span class="line"><span class="number">3</span> <span class="literal">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h4 id="bool序列来过滤Series对象"><a href="#bool序列来过滤Series对象" class="headerlink" title="bool序列来过滤Series对象"></a>bool序列来过滤Series对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;s[s&gt;<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><em>除了可以将Series看成类似数组的结构，也可以看成定长且有序的map</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s3 = Series(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;<span class="string">'a'</span> <span class="keyword">in</span> s3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="修改值和index"><a href="#修改值和index" class="headerlink" title="修改值和index"></a>修改值和index</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = Series([<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line">s.index = [<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h2 id="文本文件的导入与导出"><a href="#文本文件的导入与导出" class="headerlink" title="文本文件的导入与导出"></a>文本文件的导入与导出</h2><h3 id="导入CSV文件"><a href="#导入CSV文件" class="headerlink" title="导入CSV文件"></a>导入CSV文件</h3><p><em>CSV文件：一种简单的文本，广泛用于存储表格格式的行列数据</em></p><p><em>pandas提供read_csv()，read_table()两种方式导入csv文件，返回结果为DataFrame类型</em></p><h4 id="read-csv"><a href="#read-csv" class="headerlink" title="read_csv()"></a>read_csv()</h4><p><em>默认分隔符为’,’，且只能读入这种分隔符的csv文件</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!type mycsv.csv</span><br><span class="line">df = pd.read_csv(<span class="string">'mycsv.csv'</span>)</span><br></pre></td></tr></table></figure><h4 id="read-table"><a href="#read-table" class="headerlink" title="read_table()"></a>read_table()</h4><p><em>默认分隔符为’\t’，可以读入其它分隔符CSV文件</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">'mycsv.csv'</span>, sep=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><h5 id="待读取文件没属性列名称"><a href="#待读取文件没属性列名称" class="headerlink" title="待读取文件没属性列名称"></a>待读取文件没属性列名称</h5><p><em>自动以数字零开始，取名属性列</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd.read_table(<span class="string">'....csv'</span>, header=<span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> ....</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>  . . . .</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>....</span><br></pre></td></tr></table></figure><h5 id="自己取名列名"><a href="#自己取名列名" class="headerlink" title="自己取名列名"></a>自己取名列名</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names = [.....])</span><br></pre></td></tr></table></figure><h5 id="以某一列为index"><a href="#以某一列为index" class="headerlink" title="以某一列为index"></a>以某一列为index</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, names=[....], index_col=<span class="string">'某一列的名字'</span>)</span><br></pre></td></tr></table></figure><h5 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_table(<span class="string">'...csv'</span>, sep=<span class="string">'/s+'</span>)</span><br></pre></td></tr></table></figure><h5 id="当第一行比后续行少一个"><a href="#当第一行比后续行少一个" class="headerlink" title="当第一行比后续行少一个"></a>当第一行比后续行少一个</h5><p><em>则相当于已有了index和属性名</em></p><h4 id="read-csv和read-table的其它参数"><a href="#read-csv和read-table的其它参数" class="headerlink" title="read_csv和read_table的其它参数"></a>read_csv和read_table的其它参数</h4><h5 id="skiprows"><a href="#skiprows" class="headerlink" title="skiprows"></a>skiprows</h5><p><em>用于文件中的一些无用行</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, skiprows=[<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure><h5 id="nrows"><a href="#nrows" class="headerlink" title="nrows"></a>nrows</h5><p><em>只显示前n行</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(<span class="string">'...csv'</span>, nrows=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p><em>默认用NaN填写缺失值</em></p><h5 id="isnull"><a href="#isnull" class="headerlink" title="isnull()"></a>isnull()</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.isnull(dataframe对象)</span><br></pre></td></tr></table></figure><h3 id="导出CSV文件"><a href="#导出CSV文件" class="headerlink" title="导出CSV文件"></a>导出CSV文件</h3><h3 id="JSON格式数据的导入与导出"><a href="#JSON格式数据的导入与导出" class="headerlink" title="JSON格式数据的导入与导出"></a>JSON格式数据的导入与导出</h3><h2 id="二进制文件的导入与导出"><a href="#二进制文件的导入与导出" class="headerlink" title="二进制文件的导入与导出"></a>二进制文件的导入与导出</h2><p><em>ASCII文件也称为<strong>文本文件</strong>，这du种文件在磁盘中存放时每个字符对应一个字节，用于存放对应的ASCII码。例如，数5678的存储形式为：5 6 7 8<br><strong>二进制文件</strong>是按二进制的编码方式来存放文件的。 例如， 数5678的存储形式为： 00010110 00101110只占二个字节。二进制文件虽然也可在屏幕上显示， 但其内容无法读懂。C系统在处理这些文件时，并不区分类型，都看成是字符流，按字节进行处理。 输入输出字符流的开始和结束只由程序控制而不受物理符号(如回车符)的控制。 因此也把这种文件称作“流式文件”。</em></p><p><strong>二进制文件类型很多，都有自己独特的存储方式。处理这些文件可能涉及非常复杂的过程。由于二进制文件格式复杂且不通用，数据导入工作应尽可能避免使用程序直接处理二进制格式文件</strong></p><h3 id="ExcelFile类型"><a href="#ExcelFile类型" class="headerlink" title="ExcelFile类型"></a>ExcelFile类型</h3><p><em>pandas通过<strong>ExcelFile类型</strong>提供对Excel文件的基本支持</em></p><p><em>ExcelFile类在内部使用<strong>xlrd</strong>和<strong>openpyxl包</strong>来操作Excel文件，需要提前安装</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">xls = pd.ExcelFile(<span class="string">'mydata.xls'</span>) // 首先导入excel文件，需要创建ExcelFile实例</span><br><span class="line">df = xls.parse(<span class="string">'mysheet'</span>) // 加入mydata.xls存在一个mysheet的表格，使用parse来解析它，获得一个dataframe对象</span><br></pre></td></tr></table></figure><h2 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(pf).to_excel(<span class="string">'out.xlsx'</span>, sheet_name=<span class="string">'mydata'</span>,index=<span class="literal">False</span>,header=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="数据库的导入与导出"><a href="#数据库的导入与导出" class="headerlink" title="数据库的导入与导出"></a>数据库的导入与导出</h2><h3 id="关系型数据库的导入和导出"><a href="#关系型数据库的导入和导出" class="headerlink" title="关系型数据库的导入和导出"></a>关系型数据库的导入和导出</h3><h3 id="非关系型数据库的导入和导出"><a href="#非关系型数据库的导入和导出" class="headerlink" title="非关系型数据库的导入和导出"></a>非关系型数据库的导入和导出</h3><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据预处理技术" scheme="http://tianyong.fun/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://tianyong.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>账单金额P图</title>
    <link href="http://tianyong.fun/%E8%B4%A6%E5%8D%95%E9%87%91%E9%A2%9DP%E5%9B%BE.html"/>
    <id>http://tianyong.fun/%E8%B4%A6%E5%8D%95%E9%87%91%E9%A2%9DP%E5%9B%BE.html</id>
    <published>2020-11-06T08:40:07.000Z</published>
    <updated>2020-11-06T08:41:20.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="账单金额P图"><a href="#账单金额P图" class="headerlink" title="账单金额P图"></a>账单金额P图</h1><p><a href="https://jingyan.baidu.com/article/066074d6497b38c3c21cb028.html" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="PS" scheme="http://tianyong.fun/categories/PS/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法-直接插入排序</title>
    <link href="http://tianyong.fun/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html"/>
    <id>http://tianyong.fun/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html</id>
    <published>2020-10-15T08:36:20.000Z</published>
    <updated>2020-10-17T05:51:27.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><p><a href="https://imgchr.com/i/0T6DFf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6DFf.png" alt="0T6DFf.png" border="0"></a></p><p><a href="https://imgchr.com/i/0T6sfS" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6sfS.png" alt="0T6sfS.png" border="0"></a></p><p><a href="https://imgchr.com/i/0T6jTx" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/10/15/0T6jTx.md.png" alt="0T6jTx.png" border="0"></a></p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(l, new)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">        <span class="keyword">if</span> l[i] &gt;= new:</span><br><span class="line">            l.insert(i, new)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l.append(new)  <span class="comment"># 新知识当for循环正常退出，没有遇到break的前提下，会执行else；如果遇到了就不执行else</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = list(range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line">    print(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        l = insert_sort(l, random.randint(<span class="number">1</span>, <span class="number">200</span>))</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">insert_sort(a, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, tmp;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line">tmp = a[i];</span><br><span class="line"><span class="keyword">for</span>(j = i<span class="number">-1</span>; j &gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;a[j])&#123;</span><br><span class="line">a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    length = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="keyword">if</span> i!=minIndex:</span><br><span class="line">            arr[minIndex], arr[i] = arr[i], arr[minIndex]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    print(arr)</span><br><span class="line">    selectSort(arr)</span><br><span class="line">    print(arr)</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="排序算法" scheme="http://tianyong.fun/categories/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="直接插入排序" scheme="http://tianyong.fun/tags/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C语言-高级计算机语言和编译器</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%AB%98%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%AB%98%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8.html</id>
    <published>2020-09-25T07:21:08.000Z</published>
    <updated>2020-09-25T07:29:02.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="高级计算机语言和编译器"><a href="#高级计算机语言和编译器" class="headerlink" title="高级计算机语言和编译器"></a>高级计算机语言和编译器</h1><h2 id="高级计算机语言"><a href="#高级计算机语言" class="headerlink" title="高级计算机语言"></a>高级计算机语言</h2><p><em>高级计算机语言编程，在更抽象地层面贴近编程者思维，不用考虑计算机机器指令，使编程变得更加容易</em></p><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><em>高级计算机语言编写的程序在计算机看来，是一堆没用的指令，需要编译器将程序编译成机器码</em></p><p><em>而且不同cpu厂商生产的处理器的指令系统和编码格式不同；其它机型编译后的机器码不能在另一个机型上使用；所以有对应不同处理器的编译器</em></p><blockquote><p>The more endeavor you make, the more luck you will gain !</p></blockquote><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据挖掘与机器学习-实验一</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E9%AA%8C%E4%B8%80.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E9%AA%8C%E4%B8%80.html</id>
    <published>2020-09-23T10:22:20.000Z</published>
    <updated>2020-09-23T10:45:33.419Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数据挖掘与机器学习-实验一"><a href="#数据挖掘与机器学习-实验一" class="headerlink" title="数据挖掘与机器学习-实验一"></a>数据挖掘与机器学习-实验一</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="三种数据类型"><a href="#三种数据类型" class="headerlink" title="三种数据类型"></a>三种数据类型</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="date-range"><a href="#date-range" class="headerlink" title="date_range"></a>date_range</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-06-29"</span>, periods=<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(periods=<span class="number">4</span>, <span class="built_in">end</span>=<span class="string">"2018-07-02"</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">&gt;&gt;&gt;date_time_index = pd.date_range(start=<span class="string">"2018-01-01"</span>, <span class="built_in">end</span>=<span class="string">"2018-07-01"</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="loadtxt"><a href="#loadtxt" class="headerlink" title="loadtxt"></a>loadtxt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_file = <span class="string">r"xxx.txt"</span></span><br><span class="line">data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP2###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_data_to_timeseries</span><span class="params">(input_file, column, verbose=False)</span>:</span></span><br><span class="line">    <span class="comment"># 导入数据</span></span><br><span class="line">    data = np.loadtxt(input_file, delimiter=<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># 确定索引的开始与结束时间</span></span><br><span class="line">    start_date = str(int(data[<span class="number">0</span>,<span class="number">0</span>])) + <span class="string">'-'</span> + str(int(data[<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line">    end_date = str(int(data[<span class="number">-1</span>,<span class="number">0</span>] + <span class="number">1</span>)) + <span class="string">'-'</span> + str(int(data[<span class="number">-1</span>,<span class="number">1</span>] % <span class="number">12</span> + <span class="number">1</span>))</span><br><span class="line">    <span class="comment">###问题一：完善函数###</span></span><br><span class="line">    <span class="comment">###提示：通过pandas的date_range函数获取索引###</span></span><br><span class="line"></span><br><span class="line">    date_time_index = pd.date_range(start=start_date, end=end_date, freq=<span class="string">'M'</span>)</span><br><span class="line">    data_timeseries = pd.Series(data[:,column], index=date_time_index)</span><br><span class="line">    <span class="keyword">return</span> data_timeseries</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP3###</span></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">input_file = <span class="string">r'C:\Users\Ty\Desktop\实验手册-实验二pandas\实验手册-实验二pandas\data.txt'</span></span><br><span class="line">column_num = <span class="number">2</span></span><br><span class="line">data_timeseries = convert_data_to_timeseries(input_file, column_num)</span><br><span class="line"><span class="comment"># Plot方法成图</span></span><br><span class="line">data_timeseries.plot()</span><br><span class="line">plt.title(<span class="string">'Input data'</span>)</span><br><span class="line"><span class="comment"># # 图像太密集了，我们换一个时间范围</span></span><br><span class="line">start = <span class="string">'2007-2'</span></span><br><span class="line">end = <span class="string">'2007-11'</span></span><br><span class="line">plt.figure()</span><br><span class="line">data_timeseries[start:end].plot()</span><br><span class="line">plt.title(<span class="string">'Data from '</span> + start + <span class="string">' to '</span> + end)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP4###</span></span><br><span class="line"><span class="comment"># ###问题二：将数据的第三,四列转换为二维数据结构dataframe,索引为时间###</span></span><br><span class="line">data1 = convert_data_to_timeseries(input_file, <span class="number">2</span>)</span><br><span class="line">data2 = convert_data_to_timeseries(input_file, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># # 将两组数据同时成图</span></span><br><span class="line">pd.dataframe[<span class="string">'1955'</span>:<span class="string">'1960'</span>].plot()</span><br><span class="line">plt.title(<span class="string">'Data overlapped on top of each other'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###STEP5###</span></span><br><span class="line"><span class="comment"># # 查看两组数据是否有线性关联</span></span><br><span class="line">plt.figure()</span><br><span class="line">difference = pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'first'</span>] - pd.dataframe[<span class="string">'1952'</span>:<span class="string">'1955'</span>][<span class="string">'second'</span>]</span><br><span class="line">difference.plot()</span><br><span class="line">plt.title(<span class="string">'Difference (first - second)'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP6###</span></span><br><span class="line"><span class="comment">###问题三：请统计两组数组的最大最小值和均值###</span></span><br><span class="line"><span class="comment">###问题三：计算数据的相关系数，调用corr函数###</span></span><br><span class="line">print(<span class="string">'\nMaximum:\n'</span>, pd.dataframe.max())</span><br><span class="line">print(<span class="string">'\nMinimum:\n'</span>, pd.dataframe.min())</span><br><span class="line">print(<span class="string">'\nMean:\n'</span>, pd.dataframe.mean())</span><br><span class="line">print(<span class="string">'\nCorrelation coefficients:\n'</span>, pd.dataframe.corr())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###STEP7###</span></span><br><span class="line"><span class="comment"># 打印两组数据相关性</span></span><br><span class="line">plt.figure()</span><br><span class="line">pd.rolling_corr(pd.dataframe[<span class="string">'first'</span>], pd.dataframe[<span class="string">'second'</span>], window=<span class="number">60</span>).plot()</span><br><span class="line">pd.dataframe[<span class="string">'first'</span>].rolling(<span class="number">60</span>).corr(pd.dataframe[<span class="string">'second'</span>]).plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-数学函数</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.html</id>
    <published>2020-09-22T08:16:06.000Z</published>
    <updated>2020-09-22T09:16:10.332Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-地址</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80.html</id>
    <published>2020-09-20T09:35:29.000Z</published>
    <updated>2020-09-20T09:35:29.045Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库原理与应用-hbase</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-hbase.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8-hbase.html</id>
    <published>2020-09-20T06:36:13.000Z</published>
    <updated>2020-09-20T07:48:57.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h1><h2 id="hbase安装"><a href="#hbase安装" class="headerlink" title="hbase安装"></a>hbase安装</h2><h2 id="hbase命令"><a href="#hbase命令" class="headerlink" title="hbase命令"></a>hbase命令</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#39;user&#39;, &#39;info1&#39;, &#39;info2&#39;</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><em>put ‘表名’, ‘rowKey’, ‘列族 : 列’  ,  ‘值’</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put &#39;user&#39;, &#39;1234&#39;, &#39;info1:Name&#39;, &#39;ttyong&#39;</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p><em>delete ‘表名’,‘行名’,‘列族：列’ 来删除某个记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>deleteall ‘表名’,’rowkey’来删除整行记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>truncate ‘表名’来清空表所有的记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><em>put就是重写一遍，进行覆盖，hbase没有修改，都是追加，即对相同rowKey、列族和列名的数据再次添加即为数据的更新</em></p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p><em>scan ‘表名’来查看表的所有记录</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>get  ‘表名’ , ‘rowKey’ 来查看某个rowKey下的所有记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>get ‘表名’,’rowkey’,’列族’来查看某个rowKey列族的记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>get ‘表名’,’rowkey’,’列族：列’来查看rowKey列族的某个列记录</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看存在的表"><a href="#查看存在的表" class="headerlink" title="查看存在的表"></a>查看存在的表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list &#39;user&#39;</span><br></pre></td></tr></table></figure><h3 id="查看表的具体结构"><a href="#查看表的具体结构" class="headerlink" title="查看表的具体结构"></a>查看表的具体结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe &#39;user&#39;</span><br></pre></td></tr></table></figure><h2 id="hbase遇到的问题"><a href="#hbase遇到的问题" class="headerlink" title="hbase遇到的问题"></a>hbase遇到的问题</h2><p><a href="https://imgchr.com/i/wTZSzQ" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/20/wTZSzQ.md.png" alt="wTZSzQ.md.png" border="0"></a></p><img src="https://s1.ax1x.com/2020/09/20/wTZ0eI.png" alt="wTZ0eI.png" border="0"><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><img src="https://s1.ax1x.com/2020/09/20/wTVzRg.png" alt="wTVzRg.png" border="0"><p><em>1.将regionservers里的localhost改为虚拟机名字</em></p><p><em>2.将hadoop的namenode的tmp文件删除(有更改为固定路径，就删除更改后的文件)，然后重新格式化</em></p><p><em>3.hbase的hbase-site.xml里的端口改为hadoop端口一致的8020</em></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库原理与应用" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-strcpy</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-strcpy.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-strcpy.html</id>
    <published>2020-09-11T08:23:44.000Z</published>
    <updated>2020-09-11T08:23:45.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-strcmp</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-strcmp.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-strcmp.html</id>
    <published>2020-09-11T08:21:26.000Z</published>
    <updated>2020-09-11T08:21:26.114Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-文件输入输出常用函数</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</id>
    <published>2020-09-11T08:01:08.000Z</published>
    <updated>2020-09-11T08:11:41.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="文件输入输出常用函数"><a href="#文件输入输出常用函数" class="headerlink" title="文件输入输出常用函数"></a>文件输入输出常用函数</h1><h2 id="getc，gets，getchar"><a href="#getc，gets，getchar" class="headerlink" title="getc，gets，getchar"></a>getc，gets，getchar</h2><h3 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h3><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p><em>1）baigets()用于从标准输入流stdin读入一个du整行（以’\n’或EOF）结束，写入ptr指向的字符数组，并返回这个指针；出错或遇到文件结束时则返回NULL。行末的’\n’从流中取出，但不写入数组。gets()不检查被写入的数组大小</em></p><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h3><p><em>getchar()用于从标准输入流stdin读入一个字符，并返回这个字符。如果读到文件结尾，则返回EOF。注意到EOF不能用char类型表示，所以getchar()函数返回的是一个int型的数。使用时也应该注意这一点</em></p><p><em>读取一个字符，包括dao车键也会被读成一个字符</em></p><h3 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h3><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><h3 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h3><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-二进制I/O:write函数</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-fwrite%E5%92%8Cfread%E5%87%BD%E6%95%B0.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-fwrite%E5%92%8Cfread%E5%87%BD%E6%95%B0.html</id>
    <published>2020-09-10T10:41:27.000Z</published>
    <updated>2020-09-23T03:09:05.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="fwrite和fread"><a href="#fwrite和fread" class="headerlink" title="fwrite和fread"></a>fwrite和fread</h1><p><em>文件中以二进制形式存储，可以保证数值的精确</em></p><p><em>这两个函数以二进制形式处理数据</em></p><p><em>正常情况下返回的值，就是设置模块的值；如果出错返回值会比nmemb的值小</em></p><h2 id="fwrite函数"><a href="#fwrite函数" class="headerlink" title="fwrite函数"></a>fwrite函数</h2><p><em>二进制数据写入文件</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fwrite(ptr, size, nmemb, fp) // ptr读取数据的地址;size 单位是字节，可以用sizeof的返回值; nmemb 待写入数据块的数量;fp待写入文件地址</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入字符串</span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">256</span>];</span><br><span class="line">fwrite(<span class="built_in">buffer</span>, <span class="number">256</span>, <span class="number">1</span>, fp) <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数字</span></span><br><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp)</span><br></pre></td></tr></table></figure><p><em>以上调用把earnings数组中的数据写入文件，数据被分成10块，每块都是double的大小</em></p><p><a href="https://imgchr.com/i/wjMMhF" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/23/wjMMhF.md.png" alt="wjMMhF.png" border="0"></a></p><h2 id="fread函数"><a href="#fread函数" class="headerlink" title="fread函数"></a>fread函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(ptr, <span class="built_in">size</span>, nmemb, fp);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fread(earnings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp); <span class="comment">// 正常情况下，返回值就是nmemb</span></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-feof函数</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-feof%E5%87%BD%E6%95%B0.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-feof%E5%87%BD%E6%95%B0.html</id>
    <published>2020-09-10T10:11:41.000Z</published>
    <updated>2020-09-10T11:03:50.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="feof和ferror函数"><a href="#feof和ferror函数" class="headerlink" title="feof和ferror函数"></a>feof和ferror函数</h1><h2 id="feof"><a href="#feof" class="headerlink" title="feof"></a>feof</h2><p><em>其功能是检测流上的文件结束符，如果文件结束，则返回非0值，否则返回0（即，文件结束：返回非0值；文件未结束：返回0值)</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ferror"><a href="#ferror" class="headerlink" title="ferror"></a>ferror</h2><p><em>读写错误，ferror返回一个非零值</em></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构-图的深度优先和广度优先访问</title>
    <link href="http://tianyong.fun/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E8%AE%BF%E9%97%AE.html"/>
    <id>http://tianyong.fun/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E8%AE%BF%E9%97%AE.html</id>
    <published>2020-09-02T07:54:55.000Z</published>
    <updated>2020-09-02T08:12:01.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="图的深度优先和广度优先访问"><a href="#图的深度优先和广度优先访问" class="headerlink" title="图的深度优先和广度优先访问"></a>图的深度优先和广度优先访问</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/fkyyly/article/details/83313843" target="_blank" rel="external nofollow noopener noreferrer">url1</a></p><p><a href>url2</a></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://tianyong.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-exit和return</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html</id>
    <published>2020-08-31T04:45:47.000Z</published>
    <updated>2020-08-31T04:45:47.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-getc和getchar和putc和putchar</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html</id>
    <published>2020-08-31T04:19:54.000Z</published>
    <updated>2020-09-11T08:01:12.100Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="getc和getchar和putc和putchar"><a href="#getc和getchar和putc和putchar" class="headerlink" title="getc和getchar和putc和putchar"></a>getc和getchar和putc和putchar</h1><h2 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h2><p><em>从fp指针处获取一个字符</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch = getc(fp);</span><br></pre></td></tr></table></figure><h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p><em>从输入缓存中读取个字符</em></p><a href="/C%E8%AF%AD%E8%A8%80-getchar%E5%92%8Cputchar.html" title="C语言-getchar和putchar">C语言-getchar和putchar</a><h2 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h2><p><em>将字符写入到FILE指针fpout指向的文件中</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putc(ch, fpout);</span><br></pre></td></tr></table></figure><h2 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(ch);</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-文件输入输出</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html</id>
    <published>2020-08-31T03:54:38.000Z</published>
    <updated>2020-09-20T10:17:02.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="文件输入-输出"><a href="#文件输入-输出" class="headerlink" title="文件输入\输出"></a>文件输入\输出</h1><p><em>判断文件结束feof函数，移动文件指针位置fseek函数，获得文件位置ftell函数，文件位置移到开头rewind函数，文件字符输入输出fgetc函数和fputc函数，文件输入输出fscanf函数和fprintf函数，文件字符串输入输出fgets函数和fputs函数，读写二进制文件fread函数和fwrite函数</em></p><h2 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen()函数"></a>fopen()函数</h2><p><em>打开一个文件，返回文件指针，并不是真的指向文件，而是缓冲区信息, 也有可能返回NULL和空指针</em></p><p><em>文件指针是一种指向FILE的指针，在stdlib.h中定义了</em></p><h3 id="fopen的模式字符串"><a href="#fopen的模式字符串" class="headerlink" title="fopen的模式字符串"></a>fopen的模式字符串</h3><p><a href="https://imgchr.com/i/dLomOf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dLomOf.md.jpg" alt="dLomOf.jpg" border="0"></a></p><h2 id="getc函数和putc函数"><a href="#getc函数和putc函数" class="headerlink" title="getc函数和putc函数"></a>getc函数和putc函数</h2><p><em>getc获得的是字符地址，putc第一个参数为字符地址</em></p><h3 id="getc-函数"><a href="#getc-函数" class="headerlink" title="getc()函数"></a>getc()函数</h3><p><em>是一种用来检查文件是否读完的函数，超过时，会返回EOF</em><br><em>EOF是一个特殊的数值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">ch = getc(fp);</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    ch = getc(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面等价于</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(ch=getc(fp)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="putc函数"><a href="#putc函数" class="headerlink" title="putc函数"></a>putc函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// putc(ch, fpout)</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">ch = getc(fp)</span><br><span class="line">putc(ch, <span class="built_in">stdout</span>) <span class="comment">// 相当于putchar(ch)</span></span><br></pre></td></tr></table></figure><h2 id="标准文件指针"><a href="#标准文件指针" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dzEjV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/01/dzEjV1.md.jpg" alt="dzEjV1.jpg" border="0"></a></p><h2 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose()函数"></a>fclose()函数</h2><p><em>关闭fp指针指向的文件，成功关闭文件返回0，失败返回EOF</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"xxxx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    FILE * in, *out;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">char</span> name[LEN];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(in=fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))==<span class="literal">NULL</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"I couldn't open the file: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(name, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcat</span>(name, <span class="string">".red"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(out=fopen(name, <span class="string">"w"</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cant create output file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getc(in)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count++%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">putc(ch, out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(in)!=<span class="number">0</span>||fclose(out)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Errot in closing files\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>使用stderr指针把错误消息发送到标准错误文件，这是一个标准的C惯例</em></p><h2 id="标准文件指针-1"><a href="#标准文件指针-1" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dXP02t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dXP02t.md.jpg" alt="dXP02t.jpg" border="0"></a></p><h2 id="fprintf，fscanf"><a href="#fprintf，fscanf" class="headerlink" title="fprintf，fscanf"></a>fprintf，fscanf</h2><p><em>第一个参数为指针；putc为最后一个为指针</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">10</span>] = <span class="string">"good morning"</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> words[MAX];</span><br><span class="line">FILE * fp;</span><br><span class="line"><span class="keyword">if</span>(fp=fopen(<span class="string">"words.txt"</span>, <span class="string">"a+"</span>))&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Can not open \"words\" file\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(gets(words)!=<span class="literal">NULL</span>&amp;&amp;words[<span class="number">0</span>]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br><span class="line">&#125;</span><br><span class="line">rewind(fp);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words)==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(words);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error closing file\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p><em>使光标回到文件开头</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewind(fp);</span><br></pre></td></tr></table></figure><h2 id="fgets-fputs"><a href="#fgets-fputs" class="headerlink" title="fgets(), fputs()"></a>fgets(), fputs()</h2><h3 id="fgets和gets"><a href="#fgets和gets" class="headerlink" title="fgets和gets"></a>fgets和gets</h3><p><em>gets只能提供一个参数</em></p><p><em>fgets可以提供三个参数，第一个：用于存储输入的地址；第二个：是整数，控制输入的最大字符串长度；第三个：文件指针，要读取的文件</em></p><p><em>gets从输入读取赋值后把换行符删除；fgets从文件读入并赋值，换行符也会读取</em></p><p><em>fgets读取到它所遇到的第一个换行符，或者最大长度前一个字符，或者文件结尾</em></p><p><em>如果fgets在达到最大字符长度之前读完了一行，它会在字符串空字符前添加一个换行符</em></p><p><em>fgets和gets在遇到EOF时都会返回NULL，因此可以用来检查文件结束</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fgets(buf, MAX, fp) buf是一个字符数组名称</span></span><br></pre></td></tr></table></figure><h3 id="puts和fputs"><a href="#puts和fputs" class="headerlink" title="puts和fputs"></a>puts和fputs</h3><p><em>puts自动换行</em></p><p><em>fputs接受两个参数，第一个是字符串地址，第二个文件指针</em></p><p><em>由于fgets保留换行符，fputs不添加换行符，所以它们可以配合得很好</em></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAX];</span><br><span class="line">    <span class="keyword">while</span>(fgets(arr, MAX, <span class="built_in">stdin</span>)!=<span class="literal">NULL</span>&amp;&amp;arr[<span class="number">0</span>]!=<span class="string">'\n'</span>)&#123;</span><br><span class="line"><span class="built_in">fputs</span>(arr, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p><em>如果输入的超过了最大长度减1，则一次只读取19个，循环下一次再读取</em></p><h2 id="fseek和ftell"><a href="#fseek和ftell" class="headerlink" title="fseek和ftell"></a>fseek和ftell</h2><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek()"></a>fseek()</h3><p><em>fseek可以将fopen打开的文件的光标移到任意位置</em></p><p><em>如果正常返回0；试图超过文件范围-1</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fseek(FILE指针，偏移量，起点位置) 偏移量必须为long类型，可以是正负零</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">fseek(fp, <span class="number">-1L</span>, SEEK_END); <span class="comment">// 从文件末尾退回1个字节</span></span><br><span class="line">fseek(fp, <span class="number">5L</span>, SEEK_CUR);</span><br></pre></td></tr></table></figure><h4 id="文件的起点模式"><a href="#文件的起点模式" class="headerlink" title="文件的起点模式"></a>文件的起点模式</h4><p><a href="https://imgchr.com/i/wPeMYd" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/03/wPeMYd.md.jpg" alt="wPeMYd.jpg" border="0"></a></p><h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell()"></a>ftell()</h3><p><em>ftell以一个long值类型返回文件的当前位置</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> last;</span><br><span class="line">last = ftell(fp);</span><br></pre></td></tr></table></figure><h3 id="配合使用"><a href="#配合使用" class="headerlink" title="配合使用"></a>配合使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 50</span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">long</span> last, count;</span><br><span class="line">    FILE*fp;</span><br><span class="line">    <span class="keyword">char</span> file[LEN];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter the file name:"</span>);</span><br><span class="line">    gets(file)</span><br><span class="line">    <span class="keyword">if</span>(fopen(file, <span class="string">"rb"</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Can't open %s"</span>, file);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(fp, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    last = ftell(fp);</span><br><span class="line">    <span class="keyword">for</span>(count=<span class="number">1L</span>, count&lt;last, count++)&#123;</span><br><span class="line">fseek(fp, -count, SEEK_END);</span><br><span class="line">        ch = getc(fp);</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fread-和fwrite"><a href="#fread-和fwrite" class="headerlink" title="fread()和fwrite()"></a>fread()和fwrite()</h2><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-typedef</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-typedef.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-typedef.html</id>
    <published>2020-08-31T03:33:36.000Z</published>
    <updated>2020-09-10T10:12:07.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-指针</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html</id>
    <published>2020-08-30T12:54:00.000Z</published>
    <updated>2020-09-20T09:51:56.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><em>指针是一个值为地址的变量</em></p><p><em>被调函数虽然只是用它自己的局部变量，不可以对调用函数的变量的值进行修改；但使用指针时，可以被修改</em></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br></pre></td></tr></table></figure><h2 id="int-p-中-p和p的差别"><a href="#int-p-中-p和p的差别" class="headerlink" title="int *p 中 *p和p的差别"></a>int *p 中 *p和p的差别</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*p可以当做变量来用;*的作用是取后面地址p里面的数值</span><br><span class="line">p是当作地址来使用</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*p++ 和 (*p)++的之间的差别</span><br><span class="line">    *p++是 地址会变化。</span><br><span class="line"></span><br><span class="line">(*p)++ 是数值会要变化</span><br></pre></td></tr></table></figure><h2 id="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"><a href="#数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。" class="headerlink" title="数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。"></a>数组名：表示个元素的地址。数组名不可以自加，他是地址常量名。</h2><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
