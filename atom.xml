<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田勇的博客</title>
  
  <subtitle>比你优秀的人都努力，有什么理由不努力！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tianyong.fun/"/>
  <updated>2020-08-31T04:45:47.472Z</updated>
  <id>http://tianyong.fun/</id>
  
  <author>
    <name>TTYONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言-exit和return</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-exit%E5%92%8Creturn.html</id>
    <published>2020-08-31T04:45:47.000Z</published>
    <updated>2020-08-31T04:45:47.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-getc和getchar和putc和putchar</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getc%E5%92%8Cgetchar%E5%92%8Cputc%E5%92%8Cputchar.html</id>
    <published>2020-08-31T04:19:54.000Z</published>
    <updated>2020-08-31T04:29:38.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="getc和getchar和putc和putchar"><a href="#getc和getchar和putc和putchar" class="headerlink" title="getc和getchar和putc和putchar"></a>getc和getchar和putc和putchar</h1><h2 id="getc"><a href="#getc" class="headerlink" title="getc"></a>getc</h2><p><em>从fp指针处获取一个字符</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch = getc(fp);</span><br></pre></td></tr></table></figure><h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p><em>从输入缓存中读取个字符</em></p><h2 id="putc"><a href="#putc" class="headerlink" title="putc"></a>putc</h2><p><em>将字符写入到FILE指针fpout指向的文件中</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putc(ch, fpout);</span><br></pre></td></tr></table></figure><h2 id="putchar"><a href="#putchar" class="headerlink" title="putchar"></a>putchar</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(ch);</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-文件输入输出</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA.html</id>
    <published>2020-08-31T03:54:38.000Z</published>
    <updated>2020-09-01T15:24:02.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="文件输入-输出"><a href="#文件输入-输出" class="headerlink" title="文件输入\输出"></a>文件输入\输出</h1><h2 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen()函数"></a>fopen()函数</h2><p><em>打开一个文件，返回文件指针，并不是真的指向文件，而是缓冲区信息, 也有可能返回NULL和空指针</em></p><p><em>文件指针是一种指向FILE的指针，在stdlib.h中定义了</em></p><h3 id="fopen的模式字符串"><a href="#fopen的模式字符串" class="headerlink" title="fopen的模式字符串"></a>fopen的模式字符串</h3><p><a href="https://imgchr.com/i/dLomOf" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dLomOf.md.jpg" alt="dLomOf.jpg" border="0"></a></p><h2 id="getc函数和putc函数"><a href="#getc函数和putc函数" class="headerlink" title="getc函数和putc函数"></a>getc函数和putc函数</h2><p><em>getc获得的是字符地址，putc第一个参数为字符地址</em></p><h3 id="getc-函数"><a href="#getc-函数" class="headerlink" title="getc()函数"></a>getc()函数</h3><p><em>是一种用来检查文件是否读完的函数，超过时，会返回EOF</em><br><em>EOF是一个特殊的数值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">ch = getc(fp);</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    ch = getc(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面等价于</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(ch=getc(fp)!=EOF)&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="putc函数"><a href="#putc函数" class="headerlink" title="putc函数"></a>putc函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// putc(ch, fpout)</span></span><br><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp = fopen(<span class="string">"xxx.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">ch = getc(fp)</span><br><span class="line">putc(ch, <span class="built_in">stdout</span>) <span class="comment">// 相当于putchar(ch)</span></span><br></pre></td></tr></table></figure><h2 id="标准文件指针"><a href="#标准文件指针" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dzEjV1" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/09/01/dzEjV1.md.jpg" alt="dzEjV1.jpg" border="0"></a></p><h2 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose()函数"></a>fclose()函数</h2><p><em>关闭fp指针指向的文件，成功关闭文件返回0，失败返回EOF</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"xxxx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 20</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    FILE * in, *out;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">char</span> name[LEN];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(in=fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))==<span class="literal">NULL</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"I couldn't open the file: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(name, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">strcat</span>(name, <span class="string">".red"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(out=fopen(name, <span class="string">"w"</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cant create output file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch=getc(in)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count++%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">putc(ch, out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(in)!=<span class="number">0</span>||fclose(out)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Errot in closing files\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>使用stderr指针把错误消息发送到标准错误文件，这是一个标准的C惯例</em></p><h2 id="标准文件指针-1"><a href="#标准文件指针-1" class="headerlink" title="标准文件指针"></a>标准文件指针</h2><p><a href="https://imgchr.com/i/dXP02t" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://s1.ax1x.com/2020/08/31/dXP02t.md.jpg" alt="dXP02t.jpg" border="0"></a></p><h2 id="fprintf，fscanf"><a href="#fprintf，fscanf" class="headerlink" title="fprintf，fscanf"></a>fprintf，fscanf</h2><p><em>第一个参数为指针；putc为最后一个为指针</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">10</span>] = <span class="string">"good morning"</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> words[MAX];</span><br><span class="line">FILE * fp;</span><br><span class="line"><span class="keyword">if</span>(fp=fopen(<span class="string">"words.txt"</span>, <span class="string">"a+"</span>))&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"Can not open \"words\" file\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(gets(words)!=<span class="literal">NULL</span>&amp;&amp;words[<span class="number">0</span>]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, words);</span><br><span class="line">&#125;</span><br><span class="line">rewind(fp);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, words)==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(words);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fclose(fp)!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error closing file\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p><em>使光标回到文件开头</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewind(fp);</span><br></pre></td></tr></table></figure><h2 id="fgets-fputs"><a href="#fgets-fputs" class="headerlink" title="fgets(), fputs()"></a>fgets(), fputs()</h2><h3 id="fgets和gets"><a href="#fgets和gets" class="headerlink" title="fgets和gets"></a>fgets和gets</h3><p><em>gets只能提供一个参数</em></p><p><em>fgets可以提供三个参数，第一个：用于存储输入的地址；第二个：是整数，控制输入的最大字符串长度；第三个：文件指针，要读取的文件</em></p><p><em>gets从输入读取赋值后把换行符删除；fgets从文件读入并赋值，换行符也会读取</em></p><p><em>fgets读取到它所遇到的第一个换行符，或者最大长度前一个字符，或者文件结尾</em></p><p><em>如果fgets在达到最大字符长度之前读完了一行，它会在字符串空字符前添加一个换行符</em></p><p><em>fgets和gets在遇到EOF时都会返回NULL，因此可以用来检查文件结束</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fgets(buf, MAX, fp) buf是一个字符数组名称</span></span><br></pre></td></tr></table></figure><h3 id="puts和fputs"><a href="#puts和fputs" class="headerlink" title="puts和fputs"></a>puts和fputs</h3><p><em>puts自动换行</em></p><p><em>fputs接受两个参数，第一个是字符串地址，第二个文件指针</em></p><p><em>由于fgets保留换行符，fputs不添加换行符，所以它们可以配合得很好</em></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[MAX];</span><br><span class="line">    <span class="keyword">while</span>(fgets(arr, MAX, <span class="built_in">stdin</span>)!=<span class="literal">NULL</span>&amp;&amp;arr[<span class="number">0</span>]!=<span class="string">'\n'</span>)&#123;</span><br><span class="line"><span class="built_in">fputs</span>(arr, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br><span class="line">&gt;&gt;&gt; good morning xxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p><em>如果输入的超过了最大长度减1，则一次只读取19个，循环下一次再读取</em></p><h2 id="fseek和ftell"><a href="#fseek和ftell" class="headerlink" title="fseek和ftell"></a>fseek和ftell</h2><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-typedef</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-typedef.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-typedef.html</id>
    <published>2020-08-31T03:33:36.000Z</published>
    <updated>2020-08-31T03:33:36.159Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-指针</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88.html</id>
    <published>2020-08-30T12:54:00.000Z</published>
    <updated>2020-08-30T13:26:38.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><em>指针是一个值为地址的变量</em></p><p><em>被调函数虽然只是用它自己的局部变量，不可以对调用函数的变量的值进行修改；但使用指针时，可以被修改</em></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-间接运算符</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%97%B4%E6%8E%A5%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%97%B4%E6%8E%A5%E8%BF%90%E7%AE%97%E7%AC%A6.html</id>
    <published>2020-08-30T12:52:34.000Z</published>
    <updated>2020-08-30T12:54:15.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="间接运算符"><a href="#间接运算符" class="headerlink" title="间接运算符"></a>间接运算符</h1><p><em>获得地址所指向的值</em></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-地址运算符</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6.html</id>
    <published>2020-08-30T09:01:12.000Z</published>
    <updated>2020-08-30T12:52:41.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="地址运算符-amp"><a href="#地址运算符-amp" class="headerlink" title="地址运算符&amp;"></a>地址运算符&amp;</h1><p><em>可以使用&amp;获得变量的内存地址</em></p><p><em>%p是地址输出说明符</em></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-递归</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%80%92%E5%BD%92.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E9%80%92%E5%BD%92.html</id>
    <published>2020-08-30T08:21:55.000Z</published>
    <updated>2020-08-30T08:52:57.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">main()&#123;</span><br><span class="line">    fun(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">    <span class="keyword">if</span> (n&lt;<span class="number">5</span>)</span><br><span class="line">    fun(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p><em>调用语句在函数最后，return之前</em></p><p><em>最简单的递归形式</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-函数</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0.html</id>
    <published>2020-08-30T03:34:23.000Z</published>
    <updated>2020-08-30T08:23:36.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="使用函数的必要性"><a href="#使用函数的必要性" class="headerlink" title="使用函数的必要性"></a>使用函数的必要性</h2><p><em>一次编写，多出使用，避免重复编写</em></p><p><em>模块化，已阅读，修改，编写</em></p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h2 id="声明函数原型"><a href="#声明函数原型" class="headerlink" title="声明函数原型"></a>声明函数原型</h2><p><em>在调用自定义函数时，都必须在main外面或里面声明函数原型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 声明函数原型</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">fun1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h2><p><em>定义函数是，有多个参数，用逗号隔开；参数名前要带变量类型；不能像声明同类型变量时，一次声明多个变量</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure><h2 id="带参数的函数原型声明"><a href="#带参数的函数原型声明" class="headerlink" title="带参数的函数原型声明"></a>带参数的函数原型声明</h2><p><em>可以省略原型中的参数名，只带类型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p><em>函数原型中参数的名字</em></p><h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p><em>调用时赋给形参的具体值</em></p><h2 id="调用函数和被调用函数"><a href="#调用函数和被调用函数" class="headerlink" title="调用函数和被调用函数"></a>调用函数和被调用函数</h2><p><em>因为被调函数使用的值是从调用函数复制来的值，所以在被调函数中修改值，外层的值不会改变</em></p><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p><em>可以在函数执行中返回值，然后该语句块结束</em></p><h2 id="不确定参数的函数"><a href="#不确定参数的函数" class="headerlink" title="不确定参数的函数"></a>不确定参数的函数</h2><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-结构数组</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E6%95%B0%E7%BB%84.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E6%95%B0%E7%BB%84.html</id>
    <published>2020-08-29T15:00:36.000Z</published>
    <updated>2020-08-29T15:00:36.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-嵌套结构</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84.html</id>
    <published>2020-08-29T14:58:25.000Z</published>
    <updated>2020-08-29T15:11:00.435Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h1><p><em>一个结构不能包含它自己；但可以包含它自己结构的指针；也可以包含另一个结构</em></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> first[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> second[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span></span><br><span class="line">    <span class="keyword">char</span> favfood[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> job[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span> = &#123;</span></span><br><span class="line">        &#123;<span class="string">"Even"</span>, <span class="string">"Villard"</span>&#125;,</span><br><span class="line">        <span class="string">"grilled salmon"</span>,</span><br><span class="line">        <span class="string">"jkahfka"</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-putchar</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-putchar.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-putchar.html</id>
    <published>2020-08-29T14:52:52.000Z</published>
    <updated>2020-08-29T14:52:52.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-某些程序编程技巧</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%9F%90%E4%BA%9B%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E6%9F%90%E4%BA%9B%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7.html</id>
    <published>2020-08-29T14:41:13.000Z</published>
    <updated>2020-08-29T14:55:11.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="某些程序编程技巧"><a href="#某些程序编程技巧" class="headerlink" title="某些程序编程技巧"></a>某些程序编程技巧</h1><h2 id="循环用gets赋值时退出循环"><a href="#循环用gets赋值时退出循环" class="headerlink" title="循环用gets赋值时退出循环"></a>循环用gets赋值时退出循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(gets(arr1)!=<span class="literal">NULL</span>&amp;&amp;arr1!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">x</span><br><span class="line">x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>第一个条件当gets试图超出文件读取时返会NULL；第二个条件，避免用户没有输入直接回车</em></p><h2 id="gets-和scanf一起使用时"><a href="#gets-和scanf一起使用时" class="headerlink" title="gets()和scanf一起使用时"></a>gets()和scanf一起使用时</h2><p><em>由于scanf不会对缓冲输入区中删除最后的回车；如果此时再使用gets，就会导致gets不会读取用户输入，直接停止。所以在使用gets()前要对缓冲区中的\n删除，如下操作：</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>， arr)</span><br><span class="line"><span class="keyword">while</span>(getchar()!=<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">gets(xxx)</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-getchar</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getchar.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-getchar.html</id>
    <published>2020-08-29T08:45:46.000Z</published>
    <updated>2020-08-29T09:29:32.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h1><p><em>可以从输入缓冲区读取一个字符，并作为返回值</em></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar(); <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">putchar</span>(ch); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch); </span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; abc</span><br><span class="line">&gt;&gt;&gt; <span class="meta">#agd</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(ch=getchar()!=<span class="string">'#'</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&gt;&gt;&gt; <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;      <span class="comment">// 5输完回车，光标应该在这一行，但getchar读取缓冲区scanf执行后未删除的‘/n’,跳到下一行，缓冲区空，输入进入后面的循环</span></span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;adfskh</span><br><span class="line">&gt;&gt;&gt;fgsh#</span><br><span class="line">&gt;&gt;&gt;fgsh</span><br></pre></td></tr></table></figure><h2 id="getchar和缓冲区链接"><a href="#getchar和缓冲区链接" class="headerlink" title="getchar和缓冲区链接"></a>getchar和缓冲区链接</h2><p><a href="https://blog.csdn.net/gxyqn626/article/details/79253238" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><p><a href="https://blog.csdn.net/lws123253/article/details/79848373" target="_blank" rel="external nofollow noopener noreferrer">URL2</a></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-C语言中分配了动态内存后一定要释放吗？</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%88%86%E9%85%8D%E4%BA%86%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%90%8E%E4%B8%80%E5%AE%9A%E8%A6%81%E9%87%8A%E6%94%BE%E5%90%97%EF%BC%9F.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%88%86%E9%85%8D%E4%BA%86%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%90%8E%E4%B8%80%E5%AE%9A%E8%A6%81%E9%87%8A%E6%94%BE%E5%90%97%EF%BC%9F.html</id>
    <published>2020-08-29T07:48:27.000Z</published>
    <updated>2020-08-29T07:53:49.818Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="C语言中分配了动态内存后一定要释放吗？"><a href="#C语言中分配了动态内存后一定要释放吗？" class="headerlink" title="C语言中分配了动态内存后一定要释放吗？"></a>C语言中分配了动态内存后一定要释放吗？</h1><p><em>好的开发习惯是使用后就释放</em></p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><em>运行过程中手动分配很少的内存，这样的程序不使用free()也不会太影响系统性能；程序结束后操作系统会自动释放内存</em></p><h2 id="开发大项目"><a href="#开发大项目" class="headerlink" title="开发大项目"></a>开发大项目</h2><p><em>程序中需要分配大量的内存，如果使用后不释放，可能会造成系统崩溃</em></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/lyw736632087/article/details/80346536" target="_blank" rel="external nofollow noopener noreferrer">URL</a></p><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-sizeof</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-sizeof.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-sizeof.html</id>
    <published>2020-08-28T08:32:16.000Z</published>
    <updated>2020-08-28T08:37:34.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h1><p><em>以字节为单位给出对象的大小</em></p><p><strong>测类型必须要括号；测具体量可有可无；但最好所有都带括号</strong></p><h2 id="有括号"><a href="#有括号" class="headerlink" title="有括号"></a>有括号</h2><p><em>测类型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">siezeof (<span class="keyword">char</span>);</span><br><span class="line">siezeof (<span class="keyword">float</span>);</span><br></pre></td></tr></table></figure><h2 id="无括号"><a href="#无括号" class="headerlink" title="无括号"></a>无括号</h2><p><em>测具体量；也可以有括号</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">sizeof</span> a <span class="comment">// size of (a)</span></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-字符串</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2.html</id>
    <published>2020-08-28T06:39:13.000Z</published>
    <updated>2020-09-01T14:56:33.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><em>和java语言一样，严格用双引号代表字符串，单引号代表字符</em></p><p><em>在C语言中没有专门为字符串定义变量类型；用字符数组存储字符串，字符数组实际存储的元素个数要比字符串元素个数多一，因为字符数组最后会存储一个空字符\0</em></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"xfssef"</span>;</span><br></pre></td></tr></table></figure><h2 id="strlen和sizeof"><a href="#strlen和sizeof" class="headerlink" title="strlen和sizeof"></a>strlen和sizeof</h2><p><em>都可以用来计算字符串的长度，但是差异却很大</em></p><h3 id="当定义字符串时没有明确说明字符串多长"><a href="#当定义字符串时没有明确说明字符串多长" class="headerlink" title="当定义字符串时没有明确说明字符串多长"></a>当定义字符串时没有明确说明字符串多长</h3><p><em>strlen会给出准确答案，但sizeof会比strlen大1，这是因为它算上了空白符</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="当定义字符串时明确说明字符串多长"><a href="#当定义字符串时明确说明字符串多长" class="headerlink" title="当定义字符串时明确说明字符串多长"></a>当定义字符串时明确说明字符串多长</h3><p><em>sizeof会给出字符数组的大小，strlen给出准确值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">40</span>] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="built_in">strlen</span>(str); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">sizeof</span>(str); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><h2 id="strcpy和strcat"><a href="#strcpy和strcat" class="headerlink" title="strcpy和strcat"></a>strcpy和strcat</h2><p><em>strcpy是为字符串赋值；strcat字符串后面添加字符串</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(arr, <span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">strcat</span>(arr, <span class="string">".red"</span>);</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-malloc</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-malloc.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-malloc.html</id>
    <published>2020-08-28T06:16:37.000Z</published>
    <updated>2020-08-28T06:39:51.875Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-gets</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-gets.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-gets.html</id>
    <published>2020-08-28T06:15:56.000Z</published>
    <updated>2020-08-29T09:30:45.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="gets-get-string"><a href="#gets-get-string" class="headerlink" title="gets(get string)"></a>gets(get string)</h1><h2 id="gets和scanf的区别"><a href="#gets和scanf的区别" class="headerlink" title="gets和scanf的区别"></a>gets和scanf的区别</h2><h3 id="字符串的读入"><a href="#字符串的读入" class="headerlink" title="字符串的读入"></a>字符串的读入</h3><p><em>gets可以直接读取包含空格的字符串；而scanf当读到空格等就停止读取</em></p><h3 id="给字符变量赋值"><a href="#给字符变量赋值" class="headerlink" title="给字符变量赋值"></a>给字符变量赋值</h3><p><em>gets可以传参的类型为：字符指针变量；字符数组</em></p><p><em>gets从输入缓冲区读入字符串存储到字符指针变量或字符数组所指向的内存空间</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为字符指针</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> * fp = str;</span><br><span class="line">gets(fp)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为字符数组</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">10</span>];</span><br><span class="line">gets(arr)</span><br></pre></td></tr></table></figure><h2 id="是否清空本次输入的回车"><a href="#是否清空本次输入的回车" class="headerlink" title="是否清空本次输入的回车"></a>是否清空本次输入的回车</h2><p><strong>gets</strong>：<em>会自动清除输入缓冲区的回车</em></p><p><strong>scanf</strong>：<em>不会</em></p><p><strong>案例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1);  </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    gets(arr1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr1); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&gt;&gt;&gt; abcd</span><br><span class="line">&gt;&gt;&gt; a</span><br></pre></td></tr></table></figure><h3 id="使用getchar清除缓冲区的回车"><a href="#使用getchar清除缓冲区的回车" class="headerlink" title="使用getchar清除缓冲区的回车"></a>使用getchar清除缓冲区的回车</h3><a href="/C%E8%AF%AD%E8%A8%80-getchar.html" title="C语言-getchar">C语言-getchar</a><h2 id="scanf博客链接"><a href="#scanf博客链接" class="headerlink" title="scanf博客链接"></a>scanf博客链接</h2><a href="/C%E8%AF%AD%E8%A8%80-printf%E5%92%8Cscanf.html" title="C语言-printf和scanf">C语言-printf和scanf</a><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言-puts</title>
    <link href="http://tianyong.fun/C%E8%AF%AD%E8%A8%80-puts.html"/>
    <id>http://tianyong.fun/C%E8%AF%AD%E8%A8%80-puts.html</id>
    <published>2020-08-28T06:15:51.000Z</published>
    <updated>2020-08-28T06:34:55.753Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><script type="text/javascript" src="/js/src/bai.js"></script><h1 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h1><p><em>其实和printf差不多；但printf比puts更强大，更加灵活</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"abcdef"</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"abcdef\n"</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<em>注意puts输出时会自动换行</em></p><p><strong>注意当puts的参数为字符指针或字符数组时，只能有字符指针名或字符数组名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">char</span> * str2 = <span class="string">"efg"</span>;</span><br><span class="line"><span class="built_in">puts</span>(str1); <span class="comment">// "abcd"</span></span><br><span class="line"><span class="built_in">puts</span>(str2); <span class="comment">// "efg"</span></span><br></pre></td></tr></table></figure><hr><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="C" scheme="http://tianyong.fun/categories/C/"/>
    
    
  </entry>
  
</feed>
